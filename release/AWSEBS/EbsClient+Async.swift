// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension EbsClient {
    /// Seals and completes the snapshot after all of the required blocks of data have been
    ///             written to it. Completing the snapshot changes the status to completed. You
    ///             cannot write new blocks to a snapshot after it has been completed.
    func completeSnapshot(input: CompleteSnapshotInput) async throws -> CompleteSnapshotOutputResponse
    {
        typealias completeSnapshotContinuation = CheckedContinuation<CompleteSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: completeSnapshotContinuation) in
            completeSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the data in a block in an Amazon Elastic Block Store snapshot.
    func getSnapshotBlock(input: GetSnapshotBlockInput) async throws -> GetSnapshotBlockOutputResponse
    {
        typealias getSnapshotBlockContinuation = CheckedContinuation<GetSnapshotBlockOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSnapshotBlockContinuation) in
            getSnapshotBlock(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the blocks that are different between two
    ///             Amazon Elastic Block Store snapshots of the same volume/snapshot lineage.
    func listChangedBlocks(input: ListChangedBlocksInput) async throws -> ListChangedBlocksOutputResponse
    {
        typealias listChangedBlocksContinuation = CheckedContinuation<ListChangedBlocksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChangedBlocksContinuation) in
            listChangedBlocks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the blocks in an Amazon Elastic Block Store snapshot.
    func listSnapshotBlocks(input: ListSnapshotBlocksInput) async throws -> ListSnapshotBlocksOutputResponse
    {
        typealias listSnapshotBlocksContinuation = CheckedContinuation<ListSnapshotBlocksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSnapshotBlocksContinuation) in
            listSnapshotBlocks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Writes a block of data to a snapshot. If the specified block contains
    ///             data, the existing data is overwritten. The target snapshot must be in the
    ///                 pending state.  	
    ///     	    Data written to a snapshot must be aligned with 512-KiB sectors.
    func putSnapshotBlock(input: PutSnapshotBlockInput) async throws -> PutSnapshotBlockOutputResponse
    {
        typealias putSnapshotBlockContinuation = CheckedContinuation<PutSnapshotBlockOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putSnapshotBlockContinuation) in
            putSnapshotBlock(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new Amazon EBS snapshot. The new snapshot enters the pending state
    ///             after the request completes.
    ///         After creating the snapshot, use <a href="https://docs.aws.amazon.com/ebs/latest/APIReference/API_PutSnapshotBlock.html"> PutSnapshotBlock to
    ///             write blocks of data to the snapshot.
    func startSnapshot(input: StartSnapshotInput) async throws -> StartSnapshotOutputResponse
    {
        typealias startSnapshotContinuation = CheckedContinuation<StartSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startSnapshotContinuation) in
            startSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
