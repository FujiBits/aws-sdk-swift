// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension RdsDataClient {
    /// <p>Runs a batch SQL statement over an array of data.</p>
    ///         <p>You can run bulk update and insert operations for multiple records using a DML
    ///             statement with different parameter sets. Bulk operations can provide a significant
    ///             performance improvement over individual insert and update operations.</p>
    ///         <important>
    ///             <p>If a call isn't part of a transaction because it doesn't include the
    ///                     <code>transactionID</code> parameter, changes that result from the call are
    ///                 committed automatically.</p>
    ///         </important>
    func batchExecuteStatement(input: BatchExecuteStatementInput) async throws -> BatchExecuteStatementOutputResponse
    {
        typealias batchExecuteStatementContinuation = CheckedContinuation<BatchExecuteStatementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchExecuteStatementContinuation) in
            batchExecuteStatement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts a SQL transaction.</p>
    ///
    ///         <important>
    ///             <p>A transaction can run for a maximum of 24 hours. A transaction is terminated and
    ///                 rolled back automatically after 24 hours.</p>
    ///             <p>A transaction times out if no calls use its transaction ID in three minutes.
    ///                 If a transaction times out before it's committed, it's rolled back
    ///                 automatically.</p>
    ///             <p>DDL statements inside a transaction cause an implicit commit. We recommend
    ///                 that you run each DDL statement in a separate <code>ExecuteStatement</code> call with
    ///                 <code>continueAfterTimeout</code> enabled.</p>
    ///         </important>
    func beginTransaction(input: BeginTransactionInput) async throws -> BeginTransactionOutputResponse
    {
        typealias beginTransactionContinuation = CheckedContinuation<BeginTransactionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: beginTransactionContinuation) in
            beginTransaction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Ends a SQL transaction started with the <code>BeginTransaction</code> operation and
    ///             commits the changes.</p>
    func commitTransaction(input: CommitTransactionInput) async throws -> CommitTransactionOutputResponse
    {
        typealias commitTransactionContinuation = CheckedContinuation<CommitTransactionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: commitTransactionContinuation) in
            commitTransaction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Runs one or more SQL statements.</p>
    ///         <important>
    ///             <p>This operation is deprecated. Use the <code>BatchExecuteStatement</code> or
    ///                     <code>ExecuteStatement</code> operation.</p>
    ///         </important>
    @available(*, deprecated, message: "The ExecuteSql API is deprecated, please use the ExecuteStatement API. API deprecated since 2019-03-21")
    func executeSql(input: ExecuteSqlInput) async throws -> ExecuteSqlOutputResponse
    {
        typealias executeSqlContinuation = CheckedContinuation<ExecuteSqlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: executeSqlContinuation) in
            executeSql(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Runs a SQL statement against a database.</p>
    ///         <important>
    ///             <p>If a call isn't part of a transaction because it doesn't include the
    ///                     <code>transactionID</code> parameter, changes that result from the call are
    ///                 committed automatically.</p>
    ///         </important>
    ///         <p>The response size limit is 1 MB. If the call returns more than 1 MB of response data, the call is terminated.</p>
    func executeStatement(input: ExecuteStatementInput) async throws -> ExecuteStatementOutputResponse
    {
        typealias executeStatementContinuation = CheckedContinuation<ExecuteStatementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: executeStatementContinuation) in
            executeStatement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Performs a rollback of a transaction. Rolling back a transaction cancels its changes.</p>
    func rollbackTransaction(input: RollbackTransactionInput) async throws -> RollbackTransactionOutputResponse
    {
        typealias rollbackTransactionContinuation = CheckedContinuation<RollbackTransactionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rollbackTransactionContinuation) in
            rollbackTransaction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
