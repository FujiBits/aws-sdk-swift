// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct BatchExecuteStatementInputHeadersMiddleware: Middleware {
    public let id: String = "BatchExecuteStatementInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchExecuteStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchExecuteStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchExecuteStatementInput>
    public typealias MOutput = OperationOutput<BatchExecuteStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchExecuteStatementOutputError>
}

public struct BatchExecuteStatementInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchExecuteStatementInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchExecuteStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchExecuteStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchExecuteStatementInput>
    public typealias MOutput = OperationOutput<BatchExecuteStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchExecuteStatementOutputError>
}

public struct BatchExecuteStatementInputBodyMiddleware: Middleware {
    public let id: String = "BatchExecuteStatementInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchExecuteStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchExecuteStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchExecuteStatementInput>
    public typealias MOutput = OperationOutput<BatchExecuteStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchExecuteStatementOutputError>
}

extension BatchExecuteStatementInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case database
        case parameterSets
        case resourceArn
        case schema
        case secretArn
        case sql
        case transactionId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let database = database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let parameterSets = parameterSets {
            var parameterSetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameterSets)
            for sqlparametersets0 in parameterSets {
                var sqlparametersets0Container = parameterSetsContainer.nestedUnkeyedContainer()
                for sqlparameterslist1 in sqlparametersets0 {
                    try sqlparametersets0Container.encode(sqlparameterslist1)
                }
            }
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let schema = schema {
            try encodeContainer.encode(schema, forKey: .schema)
        }
        if let secretArn = secretArn {
            try encodeContainer.encode(secretArn, forKey: .secretArn)
        }
        if let sql = sql {
            try encodeContainer.encode(sql, forKey: .sql)
        }
        if let transactionId = transactionId {
            try encodeContainer.encode(transactionId, forKey: .transactionId)
        }
    }
}
