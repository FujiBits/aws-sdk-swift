// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateAddonInputHeadersMiddleware: Middleware {
    public let id: String = "CreateAddonInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAddonInput>
    public typealias MOutput = OperationOutput<CreateAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAddonOutputError>
}

public struct CreateAddonInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateAddonInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAddonInput>
    public typealias MOutput = OperationOutput<CreateAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAddonOutputError>
}

public struct CreateAddonInputBodyMiddleware: Middleware {
    public let id: String = "CreateAddonInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateAddonInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateAddonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateAddonInput>
    public typealias MOutput = OperationOutput<CreateAddonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateAddonOutputError>
}

extension CreateAddonInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addonName
        case addonVersion
        case clientRequestToken
        case resolveConflicts
        case serviceAccountRoleArn
        case tags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addonName = addonName {
            try encodeContainer.encode(addonName, forKey: .addonName)
        }
        if let addonVersion = addonVersion {
            try encodeContainer.encode(addonVersion, forKey: .addonVersion)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
        if let resolveConflicts = resolveConflicts {
            try encodeContainer.encode(resolveConflicts.rawValue, forKey: .resolveConflicts)
        }
        if let serviceAccountRoleArn = serviceAccountRoleArn {
            try encodeContainer.encode(serviceAccountRoleArn, forKey: .serviceAccountRoleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
