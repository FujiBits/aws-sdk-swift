// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension CloudFormationClient {
    /// Activates a public third-party extension, making it available for use in stack
    ///          templates. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html">Using
    ///             public extensions in the CloudFormation User Guide.
    ///          Once you have activated a public third-party extension in your account and region, use
    ///             <a href="AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html">SetTypeConfiguration to specify configuration properties for the extension. For
    ///          more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level in the CloudFormation
    ///             User Guide.
    func activateType(input: ActivateTypeInput) async throws -> ActivateTypeOutputResponse
    {
        typealias activateTypeContinuation = CheckedContinuation<ActivateTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: activateTypeContinuation) in
            activateType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns configuration data for the specified CloudFormation extensions, from the
    ///          CloudFormation registry for the account and region.
    ///          For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level in the
    ///             CloudFormation User Guide.
    func batchDescribeTypeConfigurations(input: BatchDescribeTypeConfigurationsInput) async throws -> BatchDescribeTypeConfigurationsOutputResponse
    {
        typealias batchDescribeTypeConfigurationsContinuation = CheckedContinuation<BatchDescribeTypeConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDescribeTypeConfigurationsContinuation) in
            batchDescribeTypeConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels an update on the specified stack. If the call completes successfully, the
    ///          stack rolls back the update and reverts to the previous stack configuration.
    ///
    ///             You can cancel only stacks that are in the UPDATE_IN_PROGRESS state.
    ///
    func cancelUpdateStack(input: CancelUpdateStackInput) async throws -> CancelUpdateStackOutputResponse
    {
        typealias cancelUpdateStackContinuation = CheckedContinuation<CancelUpdateStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelUpdateStackContinuation) in
            cancelUpdateStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// For a specified stack that is in the UPDATE_ROLLBACK_FAILED state,
    ///          continues rolling it back to the UPDATE_ROLLBACK_COMPLETE state. Depending on
    ///          the cause of the failure, you can manually <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed"> fix the error and continue the rollback. By continuing the rollback, you can
    ///          return your stack to a working state (the UPDATE_ROLLBACK_COMPLETE state), and
    ///          then try to update the stack again.
    ///          A stack goes into the UPDATE_ROLLBACK_FAILED state when
    ///          CloudFormation cannot roll back all changes after a failed stack update. For example, you
    ///          might have a stack that is rolling back to an old database instance that was deleted
    ///          outside of CloudFormation. Because CloudFormation doesn't know the database was
    ///          deleted, it assumes that the database instance still exists and attempts to roll back to
    ///          it, causing the update rollback to fail.
    func continueUpdateRollback(input: ContinueUpdateRollbackInput) async throws -> ContinueUpdateRollbackOutputResponse
    {
        typealias continueUpdateRollbackContinuation = CheckedContinuation<ContinueUpdateRollbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: continueUpdateRollbackContinuation) in
            continueUpdateRollback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a list of changes that will be applied to a stack so that you can review the
    ///          changes before executing them. You can create a change set for a stack that doesn't exist
    ///          or an existing stack. If you create a change set for a stack that doesn't exist, the change
    ///          set shows all of the resources that CloudFormation will create. If you create a change
    ///          set for an existing stack, CloudFormation compares the stack's information with the
    ///          information that you submit in the change set and lists the differences. Use change sets to
    ///          understand which resources CloudFormation will create or change, and how it will change
    ///          resources in an existing stack, before you create or update a stack.
    ///          To create a change set for a stack that doesn't exist, for the
    ///             ChangeSetType parameter, specify CREATE. To create a change
    ///          set for an existing stack, specify UPDATE for the ChangeSetType
    ///          parameter. To create a change set for an import operation, specify IMPORT for
    ///          the ChangeSetType parameter. After the CreateChangeSet call
    ///          successfully completes, CloudFormation starts creating the change set. To check the
    ///          status of the change set or to review it, use the DescribeChangeSet
    ///          action.
    ///          When you are satisfied with the changes the change set will make, execute the change
    ///          set by using the ExecuteChangeSet action. CloudFormation doesn't make
    ///          changes until you execute the change set.
    ///          To create a change set for the entire stack hierachy, set
    ///             IncludeNestedStacks to True.
    func createChangeSet(input: CreateChangeSetInput) async throws -> CreateChangeSetOutputResponse
    {
        typealias createChangeSetContinuation = CheckedContinuation<CreateChangeSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChangeSetContinuation) in
            createChangeSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a stack as specified in the template. After the call completes successfully,
    ///          the stack creation starts. You can check the status of the stack via the DescribeStacks API.
    func createStack(input: CreateStackInput) async throws -> CreateStackOutputResponse
    {
        typealias createStackContinuation = CheckedContinuation<CreateStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStackContinuation) in
            createStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates stack instances for the specified accounts, within the specified Regions. A
    ///          stack instance refers to a stack in a specific account and Region. You must specify at least one value for either Accounts or DeploymentTargets, and you must specify at least one value for Regions.
    func createStackInstances(input: CreateStackInstancesInput) async throws -> CreateStackInstancesOutputResponse
    {
        typealias createStackInstancesContinuation = CheckedContinuation<CreateStackInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStackInstancesContinuation) in
            createStackInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a stack set.
    func createStackSet(input: CreateStackSetInput) async throws -> CreateStackSetOutputResponse
    {
        typealias createStackSetContinuation = CheckedContinuation<CreateStackSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStackSetContinuation) in
            createStackSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deactivates a public extension that was previously activated in this account and
    ///          region.
    ///          Once deactivated, an extension cannot be used in any CloudFormation operation. This
    ///          includes stack update operations where the stack template includes the extension, even if
    ///          no updates are being made to the extension. In addition, deactivated extensions are not
    ///          automatically updated if a new version of the extension is released.
    func deactivateType(input: DeactivateTypeInput) async throws -> DeactivateTypeOutputResponse
    {
        typealias deactivateTypeContinuation = CheckedContinuation<DeactivateTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deactivateTypeContinuation) in
            deactivateType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified change set. Deleting change sets ensures that no one executes
    ///          the wrong change set.
    ///          If the call successfully completes, CloudFormation successfully deleted the
    ///          change set.
    ///          If IncludeNestedStacks specifies True during the creation of
    ///          the nested change set, then DeleteChangeSet will delete all change sets that
    ///          belong to the stacks hierarchy and will also delete all change sets for nested stacks with
    ///          the status of REVIEW_IN_PROGRESS.
    func deleteChangeSet(input: DeleteChangeSetInput) async throws -> DeleteChangeSetOutputResponse
    {
        typealias deleteChangeSetContinuation = CheckedContinuation<DeleteChangeSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChangeSetContinuation) in
            deleteChangeSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specified stack. Once the call completes successfully, stack deletion
    ///          starts. Deleted stacks do not show up in the DescribeStacks API if the
    ///          deletion has been completed successfully.
    func deleteStack(input: DeleteStackInput) async throws -> DeleteStackOutputResponse
    {
        typealias deleteStackContinuation = CheckedContinuation<DeleteStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteStackContinuation) in
            deleteStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes stack instances for the specified accounts, in the specified Regions.
    func deleteStackInstances(input: DeleteStackInstancesInput) async throws -> DeleteStackInstancesOutputResponse
    {
        typealias deleteStackInstancesContinuation = CheckedContinuation<DeleteStackInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteStackInstancesContinuation) in
            deleteStackInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a stack set. Before you can delete a stack set, all of its member stack
    ///          instances must be deleted. For more information about how to do this, see DeleteStackInstances.
    func deleteStackSet(input: DeleteStackSetInput) async throws -> DeleteStackSetOutputResponse
    {
        typealias deleteStackSetContinuation = CheckedContinuation<DeleteStackSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteStackSetContinuation) in
            deleteStackSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Marks an extension or extension version as DEPRECATED in the CloudFormation registry, removing it from active use. Deprecated extensions or
    ///          extension versions cannot be used in CloudFormation operations.
    ///          To deregister an entire extension, you must individually deregister all active versions
    ///          of that extension. If an extension has only a single active version, deregistering that
    ///          version results in the extension itself being deregistered and marked as deprecated in the
    ///          registry.
    ///          You cannot deregister the default version of an extension if there are other active
    ///          version of that extension. If you do deregister the default version of an extension, the
    ///          textensionype itself is deregistered as well and marked as deprecated.
    ///          To view the deprecation status of an extension or extension version, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html">DescribeType.
    func deregisterType(input: DeregisterTypeInput) async throws -> DeregisterTypeOutputResponse
    {
        typealias deregisterTypeContinuation = CheckedContinuation<DeregisterTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterTypeContinuation) in
            deregisterType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves your account's CloudFormation limits, such as the maximum number of
    ///          stacks that you can create in your account. For more information about account limits, see
    ///             <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html">CloudFormation
    ///             Limits in the CloudFormation User Guide.
    func describeAccountLimits(input: DescribeAccountLimitsInput) async throws -> DescribeAccountLimitsOutputResponse
    {
        typealias describeAccountLimitsContinuation = CheckedContinuation<DescribeAccountLimitsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAccountLimitsContinuation) in
            describeAccountLimits(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the inputs for the change set and a list of changes that CloudFormation
    ///          will make if you execute the change set. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets.html">Updating Stacks Using Change Sets in the CloudFormation User
    ///          Guide.
    func describeChangeSet(input: DescribeChangeSetInput) async throws -> DescribeChangeSetOutputResponse
    {
        typealias describeChangeSetContinuation = CheckedContinuation<DescribeChangeSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChangeSetContinuation) in
            describeChangeSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a CloudFormation extension publisher.
    ///          If you do not supply a PublisherId, and you have registered as an extension
    ///          publisher, DescribePublisher returns information about your own publisher
    ///          account.
    ///          For more information on registering as a publisher, see:
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html">RegisterPublisher
    ///
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html">Publishing
    ///                   extensions to make them available for public use in the
    ///                   CloudFormation CLI User Guide
    ///
    ///
    ///
    func describePublisher(input: DescribePublisherInput) async throws -> DescribePublisherOutputResponse
    {
        typealias describePublisherContinuation = CheckedContinuation<DescribePublisherOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePublisherContinuation) in
            describePublisher(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a stack drift detection operation. A stack drift detection
    ///          operation detects whether a stack's actual configuration differs, or has
    ///             drifted, from it's expected configuration, as defined in the stack
    ///          template and any values specified as template parameters. A stack is considered to have
    ///          drifted if one or more of its resources have drifted. For more information on stack and
    ///          resource drift, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting
    ///             Unregulated Configuration Changes to Stacks and Resources.
    ///          Use DetectStackDrift to initiate a stack drift detection operation.
    ///             DetectStackDrift returns a StackDriftDetectionId you can use
    ///          to monitor the progress of the operation using
    ///             DescribeStackDriftDetectionStatus. Once the drift detection operation has
    ///          completed, use DescribeStackResourceDrifts to return drift information
    ///          about the stack and its resources.
    func describeStackDriftDetectionStatus(input: DescribeStackDriftDetectionStatusInput) async throws -> DescribeStackDriftDetectionStatusOutputResponse
    {
        typealias describeStackDriftDetectionStatusContinuation = CheckedContinuation<DescribeStackDriftDetectionStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStackDriftDetectionStatusContinuation) in
            describeStackDriftDetectionStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns all stack related events for a specified stack in reverse chronological
    ///          order. For more information about a stack's event history, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/concept-stack.html">Stacks in the CloudFormation User Guide.
    ///
    ///             You can list events for stacks that have failed to create or have been deleted by
    ///             specifying the unique stack identifier (stack ID).
    ///
    func describeStackEvents(input: DescribeStackEventsInput) async throws -> DescribeStackEventsOutputResponse
    {
        typealias describeStackEventsContinuation = CheckedContinuation<DescribeStackEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStackEventsContinuation) in
            describeStackEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the stack instance that's associated with the specified stack set, Amazon Web Services account, and Region.
    ///          For a list of stack instances that are associated with a specific stack set, use
    ///             ListStackInstances.
    func describeStackInstance(input: DescribeStackInstanceInput) async throws -> DescribeStackInstanceOutputResponse
    {
        typealias describeStackInstanceContinuation = CheckedContinuation<DescribeStackInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStackInstanceContinuation) in
            describeStackInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a description of the specified resource in the specified stack.
    ///          For deleted stacks, DescribeStackResource returns resource information for up to 90
    ///          days after the stack has been deleted.
    func describeStackResource(input: DescribeStackResourceInput) async throws -> DescribeStackResourceOutputResponse
    {
        typealias describeStackResourceContinuation = CheckedContinuation<DescribeStackResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStackResourceContinuation) in
            describeStackResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns drift information for the resources that have been checked for drift in the
    ///          specified stack. This includes actual and expected configuration values for resources where
    ///          CloudFormation detects configuration drift.
    ///          For a given stack, there will be one StackResourceDrift for each stack
    ///          resource that has been checked for drift. Resources that haven't yet been checked for drift
    ///          are not included. Resources that do not currently support drift detection are not checked,
    ///          and so not included. For a list of resources that support drift detection, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html">Resources that Support Drift Detection.
    ///          Use DetectStackResourceDrift to detect drift on individual
    ///          resources, or DetectStackDrift to detect drift on all supported resources
    ///          for a given stack.
    func describeStackResourceDrifts(input: DescribeStackResourceDriftsInput) async throws -> DescribeStackResourceDriftsOutputResponse
    {
        typealias describeStackResourceDriftsContinuation = CheckedContinuation<DescribeStackResourceDriftsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStackResourceDriftsContinuation) in
            describeStackResourceDrifts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns Amazon Web Services resource descriptions for running and deleted stacks. If
    ///             StackName is specified, all the associated resources that are part of the
    ///          stack are returned. If PhysicalResourceId is specified, the associated
    ///          resources of the stack that the resource belongs to are returned.
    ///
    ///             Only the first 100 resources will be returned. If your stack has more resources
    ///             than this, you should use ListStackResources instead.
    ///
    ///          For deleted stacks, DescribeStackResources returns resource information
    ///          for up to 90 days after the stack has been deleted.
    ///          You must specify either StackName or PhysicalResourceId,
    ///          but not both. In addition, you can specify LogicalResourceId to filter the
    ///          returned result. For more information about resources, the LogicalResourceId
    ///          and PhysicalResourceId, go to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/">CloudFormation User
    ///          Guide.
    ///
    ///             A ValidationError is returned if you specify both
    ///                StackName and PhysicalResourceId in the same
    ///             request.
    ///
    func describeStackResources(input: DescribeStackResourcesInput) async throws -> DescribeStackResourcesOutputResponse
    {
        typealias describeStackResourcesContinuation = CheckedContinuation<DescribeStackResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStackResourcesContinuation) in
            describeStackResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the description of the specified stack set.
    func describeStackSet(input: DescribeStackSetInput) async throws -> DescribeStackSetOutputResponse
    {
        typealias describeStackSetContinuation = CheckedContinuation<DescribeStackSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStackSetContinuation) in
            describeStackSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the description of the specified stack set operation.
    func describeStackSetOperation(input: DescribeStackSetOperationInput) async throws -> DescribeStackSetOperationOutputResponse
    {
        typealias describeStackSetOperationContinuation = CheckedContinuation<DescribeStackSetOperationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStackSetOperationContinuation) in
            describeStackSetOperation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the description for the specified stack; if no stack name was specified, then
    ///          it returns the description for all the stacks created.
    ///
    ///             If the stack does not exist, an ValidationError is
    ///             returned.
    ///
    func describeStacks(input: DescribeStacksInput) async throws -> DescribeStacksOutputResponse
    {
        typealias describeStacksContinuation = CheckedContinuation<DescribeStacksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStacksContinuation) in
            describeStacks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns detailed information about an extension that has been registered.
    ///          If you specify a VersionId, DescribeType returns information
    ///          about that specific extension version. Otherwise, it returns information about the default
    ///          extension version.
    func describeType(input: DescribeTypeInput) async throws -> DescribeTypeOutputResponse
    {
        typealias describeTypeContinuation = CheckedContinuation<DescribeTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTypeContinuation) in
            describeType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about an extension's registration, including its current status and
    ///          type and version identifiers.
    ///          When you initiate a registration request using
    ///                RegisterType
    ///             , you can then use
    ///                DescribeTypeRegistration
    ///              to
    ///          monitor the progress of that registration request.
    ///          Once the registration request has completed, use
    ///                DescribeType
    ///              to return detailed information about an extension.
    func describeTypeRegistration(input: DescribeTypeRegistrationInput) async throws -> DescribeTypeRegistrationOutputResponse
    {
        typealias describeTypeRegistrationContinuation = CheckedContinuation<DescribeTypeRegistrationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTypeRegistrationContinuation) in
            describeTypeRegistration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Detects whether a stack's actual configuration differs, or has
    ///             drifted, from it's expected configuration, as defined in the stack
    ///          template and any values specified as template parameters. For each resource in the stack
    ///          that supports drift detection, CloudFormation compares the actual configuration of the resource with
    ///          its expected template configuration. Only resource properties explicitly defined in the
    ///          stack template are checked for drift. A stack is considered to have drifted if one or more
    ///          of its resources differ from their expected template configurations. For more information,
    ///          see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting
    ///             Unregulated Configuration Changes to Stacks and Resources.
    ///          Use DetectStackDrift to detect drift on all supported resources for a
    ///          given stack, or DetectStackResourceDrift to detect drift on individual
    ///          resources.
    ///          For a list of stack resources that currently support drift detection, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html">Resources that Support Drift Detection.
    ///
    ///             DetectStackDrift can take up to several minutes, depending on the number
    ///          of resources contained within the stack. Use DescribeStackDriftDetectionStatus to monitor the progress of a detect stack
    ///          drift operation. Once the drift detection operation has completed, use DescribeStackResourceDrifts to return drift information about the stack and
    ///          its resources.
    ///          When detecting drift on a stack, CloudFormation does not detect drift on any nested stacks
    ///          belonging to that stack. Perform DetectStackDrift directly on the nested stack
    ///          itself.
    func detectStackDrift(input: DetectStackDriftInput) async throws -> DetectStackDriftOutputResponse
    {
        typealias detectStackDriftContinuation = CheckedContinuation<DetectStackDriftOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectStackDriftContinuation) in
            detectStackDrift(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about whether a resource's actual configuration differs, or has
    ///             drifted, from it's expected configuration, as defined in the stack
    ///          template and any values specified as template parameters. This information includes actual
    ///          and expected property values for resources in which CloudFormation detects drift. Only resource
    ///          properties explicitly defined in the stack template are checked for drift. For more
    ///          information about stack and resource drift, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting
    ///             Unregulated Configuration Changes to Stacks and Resources.
    ///          Use DetectStackResourceDrift to detect drift on individual resources, or
    ///             DetectStackDrift to detect drift on all resources in a given stack
    ///          that support drift detection.
    ///          Resources that do not currently support drift detection cannot be checked. For a list
    ///          of resources that support drift detection, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html">Resources that Support Drift Detection.
    func detectStackResourceDrift(input: DetectStackResourceDriftInput) async throws -> DetectStackResourceDriftOutputResponse
    {
        typealias detectStackResourceDriftContinuation = CheckedContinuation<DetectStackResourceDriftOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectStackResourceDriftContinuation) in
            detectStackResourceDrift(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Detect drift on a stack set. When CloudFormation performs drift detection on a
    ///          stack set, it performs drift detection on the stack associated with each stack instance in
    ///          the stack set. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html">How CloudFormation Performs Drift Detection on a Stack Set.
    ///
    ///             DetectStackSetDrift returns the OperationId of the stack set
    ///          drift detection operation. Use this operation id with
    ///                DescribeStackSetOperation
    ///              to monitor the progress of the drift
    ///          detection operation. The drift detection operation may take some time, depending on the
    ///          number of stack instances included in the stack set, as well as the number of resources
    ///          included in each stack.
    ///          Once the operation has completed, use the following actions to return drift
    ///          information:
    ///
    ///
    ///                Use
    ///                      DescribeStackSet
    ///                    to return detailed information
    ///                about the stack set, including detailed information about the last
    ///                   completed drift operation performed on the stack set.
    ///                (Information about drift operations that are in progress is not included.)
    ///
    ///
    ///                Use
    ///                      ListStackInstances
    ///                    to return a list of stack
    ///                instances belonging to the stack set, including the drift status and last drift time
    ///                checked of each instance.
    ///
    ///
    ///                Use
    ///                      DescribeStackInstance
    ///                    to return detailed
    ///                information about a specific stack instance, including its drift status and last
    ///                drift time checked.
    ///
    ///
    ///          For more information on performing a drift detection operation on a stack set, see
    ///             <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html">Detecting Unmanaged
    ///             Changes in Stack Sets.
    ///          You can only run a single drift detection operation on a given stack set at one time.
    ///          To stop a drift detection stack set operation, use
    ///                StopStackSetOperation
    ///             .
    func detectStackSetDrift(input: DetectStackSetDriftInput) async throws -> DetectStackSetDriftOutputResponse
    {
        typealias detectStackSetDriftContinuation = CheckedContinuation<DetectStackSetDriftOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectStackSetDriftContinuation) in
            detectStackSetDrift(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the estimated monthly cost of a template. The return value is an Amazon Web Services Simple
    ///          Monthly Calculator URL with a query string that describes the resources required to run the
    ///          template.
    func estimateTemplateCost(input: EstimateTemplateCostInput) async throws -> EstimateTemplateCostOutputResponse
    {
        typealias estimateTemplateCostContinuation = CheckedContinuation<EstimateTemplateCostOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: estimateTemplateCostContinuation) in
            estimateTemplateCost(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a stack using the input information that was provided when the specified
    ///          change set was created. After the call successfully completes, CloudFormation starts
    ///          updating the stack. Use the DescribeStacks action to view the status of
    ///          the update.
    ///          When you execute a change set, CloudFormation deletes all other change sets
    ///          associated with the stack because they aren't valid for the updated stack.
    ///          If a stack policy is associated with the stack, CloudFormation enforces the
    ///          policy during the update. You can't specify a temporary stack policy that overrides the
    ///          current policy.
    ///          To create a change set for the entire stack hierachy, IncludeNestedStacks
    ///          must have been set to True.
    func executeChangeSet(input: ExecuteChangeSetInput) async throws -> ExecuteChangeSetOutputResponse
    {
        typealias executeChangeSetContinuation = CheckedContinuation<ExecuteChangeSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: executeChangeSetContinuation) in
            executeChangeSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the stack policy for a specified stack. If a stack doesn't have a policy, a
    ///          null value is returned.
    func getStackPolicy(input: GetStackPolicyInput) async throws -> GetStackPolicyOutputResponse
    {
        typealias getStackPolicyContinuation = CheckedContinuation<GetStackPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getStackPolicyContinuation) in
            getStackPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the template body for a specified stack. You can get the template for running
    ///          or deleted stacks.
    ///          For deleted stacks, GetTemplate returns the template for up to 90 days after the
    ///          stack has been deleted.
    ///
    ///             If the template does not exist, a ValidationError is returned.
    ///
    func getTemplate(input: GetTemplateInput) async throws -> GetTemplateOutputResponse
    {
        typealias getTemplateContinuation = CheckedContinuation<GetTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTemplateContinuation) in
            getTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a new or existing template. The
    ///             GetTemplateSummary action is useful for viewing parameter information, such
    ///          as default parameter values and parameter types, before you create or update a stack or
    ///          stack set.
    ///          You can use the GetTemplateSummary action when you submit a template, or
    ///          you can get template information for a stack set, or a running or deleted stack.
    ///          For deleted stacks, GetTemplateSummary returns the template information
    ///          for up to 90 days after the stack has been deleted. If the template does not exist, a
    ///             ValidationError is returned.
    func getTemplateSummary(input: GetTemplateSummaryInput) async throws -> GetTemplateSummaryOutputResponse
    {
        typealias getTemplateSummaryContinuation = CheckedContinuation<GetTemplateSummaryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTemplateSummaryContinuation) in
            getTemplateSummary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Import existing stacks into a new stack sets. Use the stack import operation to import
    ///          up to 10 stacks into a new stack set in the same account as the source stack or in a
    ///          different administrator account and Region, by specifying the stack ID of the stack you
    ///          intend to import.
    ///
    ///
    ///                ImportStacksToStackSet is only supported by self-managed permissions.
    ///
    func importStacksToStackSet(input: ImportStacksToStackSetInput) async throws -> ImportStacksToStackSetOutputResponse
    {
        typealias importStacksToStackSetContinuation = CheckedContinuation<ImportStacksToStackSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importStacksToStackSetContinuation) in
            importStacksToStackSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the ID and status of each active change set for a stack. For example,
    ///          CloudFormation lists change sets that are in the CREATE_IN_PROGRESS or
    ///             CREATE_PENDING state.
    func listChangeSets(input: ListChangeSetsInput) async throws -> ListChangeSetsOutputResponse
    {
        typealias listChangeSetsContinuation = CheckedContinuation<ListChangeSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChangeSetsContinuation) in
            listChangeSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all exported output values in the account and Region in which you call this
    ///          action. Use this action to see the exported output values that you can import into other
    ///          stacks. To import values, use the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html">
    ///                Fn::ImportValue
    ///              function.
    ///          For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html">
    ///             CloudFormation Export Stack Output Values.
    func listExports(input: ListExportsInput) async throws -> ListExportsOutputResponse
    {
        typealias listExportsContinuation = CheckedContinuation<ListExportsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listExportsContinuation) in
            listExports(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all stacks that are importing an exported output value. To modify or remove an
    ///          exported output value, first use this action to see which stacks are using it. To see the
    ///          exported output values in your account, see ListExports.
    ///          For more information about importing an exported output value, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html">
    ///                Fn::ImportValue
    ///              function.
    func listImports(input: ListImportsInput) async throws -> ListImportsOutputResponse
    {
        typealias listImportsContinuation = CheckedContinuation<ListImportsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listImportsContinuation) in
            listImports(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns summary information about stack instances that are associated with the
    ///          specified stack set. You can filter for stack instances that are associated with a specific
    ///          Amazon Web Services account name or Region, or that have a specific status.
    func listStackInstances(input: ListStackInstancesInput) async throws -> ListStackInstancesOutputResponse
    {
        typealias listStackInstancesContinuation = CheckedContinuation<ListStackInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStackInstancesContinuation) in
            listStackInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns descriptions of all resources of the specified stack.
    ///          For deleted stacks, ListStackResources returns resource information for up to 90 days
    ///          after the stack has been deleted.
    func listStackResources(input: ListStackResourcesInput) async throws -> ListStackResourcesOutputResponse
    {
        typealias listStackResourcesContinuation = CheckedContinuation<ListStackResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStackResourcesContinuation) in
            listStackResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns summary information about the results of a stack set operation.
    func listStackSetOperationResults(input: ListStackSetOperationResultsInput) async throws -> ListStackSetOperationResultsOutputResponse
    {
        typealias listStackSetOperationResultsContinuation = CheckedContinuation<ListStackSetOperationResultsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStackSetOperationResultsContinuation) in
            listStackSetOperationResults(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns summary information about operations performed on a stack set.
    func listStackSetOperations(input: ListStackSetOperationsInput) async throws -> ListStackSetOperationsOutputResponse
    {
        typealias listStackSetOperationsContinuation = CheckedContinuation<ListStackSetOperationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStackSetOperationsContinuation) in
            listStackSetOperations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns summary information about stack sets that are associated with the
    ///          user.
    ///
    ///
    ///                [Self-managed permissions] If you set the CallAs parameter to
    ///                   SELF while signed in to your Amazon Web Services account,
    ///                   ListStackSets returns all self-managed stack sets in your Amazon Web Services account.
    ///
    ///
    ///                [Service-managed permissions] If you set the CallAs parameter to
    ///                   SELF while signed in to the organization's management account,
    ///                   ListStackSets returns all stack sets in the management
    ///                account.
    ///
    ///
    ///                [Service-managed permissions] If you set the CallAs parameter to
    ///                   DELEGATED_ADMIN while signed in to your member account,
    ///                   ListStackSets returns all stack sets with service-managed permissions
    ///                in the management account.
    ///
    ///
    func listStackSets(input: ListStackSetsInput) async throws -> ListStackSetsOutputResponse
    {
        typealias listStackSetsContinuation = CheckedContinuation<ListStackSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStackSetsContinuation) in
            listStackSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the summary information for stacks whose status matches the specified
    ///          StackStatusFilter. Summary information for stacks that have been deleted is kept for 90
    ///          days after the stack is deleted. If no StackStatusFilter is specified, summary information
    ///          for all stacks is returned (including existing stacks and stacks that have been
    ///          deleted).
    func listStacks(input: ListStacksInput) async throws -> ListStacksOutputResponse
    {
        typealias listStacksContinuation = CheckedContinuation<ListStacksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStacksContinuation) in
            listStacks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of registration tokens for the specified extension(s).
    func listTypeRegistrations(input: ListTypeRegistrationsInput) async throws -> ListTypeRegistrationsOutputResponse
    {
        typealias listTypeRegistrationsContinuation = CheckedContinuation<ListTypeRegistrationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTypeRegistrationsContinuation) in
            listTypeRegistrations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns summary information about the versions of an extension.
    func listTypeVersions(input: ListTypeVersionsInput) async throws -> ListTypeVersionsOutputResponse
    {
        typealias listTypeVersionsContinuation = CheckedContinuation<ListTypeVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTypeVersionsContinuation) in
            listTypeVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns summary information about extension that have been registered with CloudFormation.
    func listTypes(input: ListTypesInput) async throws -> ListTypesOutputResponse
    {
        typealias listTypesContinuation = CheckedContinuation<ListTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTypesContinuation) in
            listTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Publishes the specified extension to the CloudFormation registry as a public extension
    ///          in this region. Public extensions are available for use by all CloudFormation users. For
    ///          more information on publishing extensions, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html">Publishing extensions to make them available for public use in the
    ///             CloudFormation CLI User Guide.
    ///          To publish an extension, you must be registered as a publisher with CloudFormation. For
    ///          more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html">RegisterPublisher.
    func publishType(input: PublishTypeInput) async throws -> PublishTypeOutputResponse
    {
        typealias publishTypeContinuation = CheckedContinuation<PublishTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: publishTypeContinuation) in
            publishType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Reports progress of a resource handler to CloudFormation.
    ///          Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI. Do not use this API in your code.
    func recordHandlerProgress(input: RecordHandlerProgressInput) async throws -> RecordHandlerProgressOutputResponse
    {
        typealias recordHandlerProgressContinuation = CheckedContinuation<RecordHandlerProgressOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: recordHandlerProgressContinuation) in
            recordHandlerProgress(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers your account as a publisher of public extensions in the CloudFormation
    ///          registry. Public extensions are available for use by all CloudFormation users. This
    ///          publisher ID applies to your account in all Amazon Web Services Regions.
    ///          For information on requirements for registering as a public extension publisher, see
    ///             <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs">Registering your account to publish CloudFormation
    ///             extensions in the CloudFormation CLI User Guide.
    ///
    func registerPublisher(input: RegisterPublisherInput) async throws -> RegisterPublisherOutputResponse
    {
        typealias registerPublisherContinuation = CheckedContinuation<RegisterPublisherOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerPublisherContinuation) in
            registerPublisher(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers an extension with the CloudFormation service. Registering an
    ///          extension makes it available for use in CloudFormation templates in your Amazon Web Services account, and includes:
    ///
    ///
    ///                Validating the extension schema
    ///
    ///
    ///                Determining which handlers, if any, have been specified for the extension
    ///
    ///
    ///                Making the extension available for use in your account
    ///
    ///
    ///          For more information on how to develop extensions and ready them for registeration, see
    ///             <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-types.html">Creating Resource
    ///             Providers in the CloudFormation CLI User
    ///          Guide.
    ///          You can have a maximum of 50 resource extension versions registered at a time. This
    ///          maximum is per account and per region. Use <a href="AWSCloudFormation/latest/APIReference/API_DeregisterType.html">DeregisterType to deregister specific extension versions if necessary.
    ///          Once you have initiated a registration request using
    ///                RegisterType
    ///             , you can use
    ///                DescribeTypeRegistration
    ///              to
    ///          monitor the progress of the registration request.
    ///          Once you have registered a private extension in your account and region, use <a href="AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html">SetTypeConfiguration to specify configuration properties for the extension. For
    ///          more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level in the CloudFormation
    ///             User Guide.
    func registerType(input: RegisterTypeInput) async throws -> RegisterTypeOutputResponse
    {
        typealias registerTypeContinuation = CheckedContinuation<RegisterTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerTypeContinuation) in
            registerType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// When specifying RollbackStack, you preserve the state of previously provisioned resources when an operation fails. You can check the status of the stack through the DescribeStacks API.
    ///          Rolls back the specified stack to the last known stable state from CREATE_FAILED or UPDATE_FAILED stack statuses.
    ///          This operation will delete a stack if it doesn't contain a last known stable state. A last known stable state includes any status in a *_COMPLETE. This includes the following stack statuses.
    ///
    ///
    ///
    ///                   CREATE_COMPLETE
    ///
    ///
    ///
    ///
    ///                   UPDATE_COMPLETE
    ///
    ///
    ///
    ///
    ///                   UPDATE_ROLLBACK_COMPLETE
    ///
    ///
    ///
    ///
    ///                   IMPORT_COMPLETE
    ///
    ///
    ///
    ///
    ///                   IMPORT_ROLLBACK_COMPLETE
    ///
    ///
    ///
    func rollbackStack(input: RollbackStackInput) async throws -> RollbackStackOutputResponse
    {
        typealias rollbackStackContinuation = CheckedContinuation<RollbackStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rollbackStackContinuation) in
            rollbackStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets a stack policy for a specified stack.
    func setStackPolicy(input: SetStackPolicyInput) async throws -> SetStackPolicyOutputResponse
    {
        typealias setStackPolicyContinuation = CheckedContinuation<SetStackPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setStackPolicyContinuation) in
            setStackPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Specifies the configuration data for a registered CloudFormation extension, in the given
    ///          account and region.
    ///          To view the current configuration data for an extension, refer to the
    ///             ConfigurationSchema element of <a href="AWSCloudFormation/latest/APIReference/API_DescribeType.html">DescribeType.
    ///          For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration">Configuring extensions at the account level in the
    ///             CloudFormation User Guide.
    ///
    ///             It is strongly recommended that you use dynamic references to restrict sensitive
    ///             configuration definitions, such as third-party credentials. For more details on dynamic
    ///             references, see <a href="https://docs.aws.amazon.com/">Using dynamic references to specify
    ///                template values in the CloudFormation User
    ///             Guide.
    ///
    func setTypeConfiguration(input: SetTypeConfigurationInput) async throws -> SetTypeConfigurationOutputResponse
    {
        typealias setTypeConfigurationContinuation = CheckedContinuation<SetTypeConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setTypeConfigurationContinuation) in
            setTypeConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Specify the default version of an extension. The default version of an extension will be
    ///          used in CloudFormation operations.
    func setTypeDefaultVersion(input: SetTypeDefaultVersionInput) async throws -> SetTypeDefaultVersionOutputResponse
    {
        typealias setTypeDefaultVersionContinuation = CheckedContinuation<SetTypeDefaultVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setTypeDefaultVersionContinuation) in
            setTypeDefaultVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends a signal to the specified resource with a success or failure status. You can
    ///          use the SignalResource API in conjunction with a creation policy or update policy.
    ///          CloudFormation doesn't proceed with a stack creation or update until resources receive the
    ///          required number of signals or the timeout period is exceeded. The SignalResource API is
    ///          useful in cases where you want to send signals from anywhere other than an Amazon EC2
    ///          instance.
    func signalResource(input: SignalResourceInput) async throws -> SignalResourceOutputResponse
    {
        typealias signalResourceContinuation = CheckedContinuation<SignalResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: signalResourceContinuation) in
            signalResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops an in-progress operation on a stack set and its associated stack instances.
    func stopStackSetOperation(input: StopStackSetOperationInput) async throws -> StopStackSetOperationOutputResponse
    {
        typealias stopStackSetOperationContinuation = CheckedContinuation<StopStackSetOperationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopStackSetOperationContinuation) in
            stopStackSetOperation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Tests a registered extension to make sure it meets all necessary requirements for being
    ///          published in the CloudFormation registry.
    ///
    ///
    ///                For resource types, this includes passing all contracts tests defined for the
    ///                type.
    ///
    ///
    ///                For modules, this includes determining if the module's model meets all necessary
    ///                requirements.
    ///
    ///
    ///          For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-testing">Testing your public extension prior to publishing in the
    ///             CloudFormation CLI User Guide.
    ///          If you do not specify a version, CloudFormation uses the default version of the
    ///          extension in your account and region for testing.
    ///          To perform testing, CloudFormation assumes the execution role specified when the type
    ///          was registered. For more information, see <a href="AWSCloudFormation/latest/APIReference/API_RegisterType.html">RegisterType.
    ///          Once you've initiated testing on an extension using TestType, you can use
    ///             <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html">DescribeType to monitor the current test status and test
    ///          status description for the extension.
    ///          An extension must have a test status of PASSED before it can be published.
    ///          For more information, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html">Publishing extensions to make them available for public use
    ///          in the CloudFormation CLI User Guide.
    func testType(input: TestTypeInput) async throws -> TestTypeOutputResponse
    {
        typealias testTypeContinuation = CheckedContinuation<TestTypeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testTypeContinuation) in
            testType(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a stack as specified in the template. After the call completes successfully,
    ///          the stack update starts. You can check the status of the stack via the DescribeStacks action.
    ///          To get a copy of the template for an existing stack, you can use the GetTemplate action.
    ///          For more information about creating an update template, updating a stack, and
    ///          monitoring the progress of the update, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks.html">Updating a
    ///             Stack.
    func updateStack(input: UpdateStackInput) async throws -> UpdateStackOutputResponse
    {
        typealias updateStackContinuation = CheckedContinuation<UpdateStackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateStackContinuation) in
            updateStack(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the parameter values for stack instances for the specified accounts, within
    ///          the specified Regions. A stack instance refers to a stack in a specific account and Region.
    ///          You can only update stack instances in Regions and accounts where they already exist;
    ///          to create additional stack instances, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateStackInstances.html">CreateStackInstances.
    ///          During stack set updates, any parameters overridden for a stack instance are not
    ///          updated, but retain their overridden value.
    ///          You can only update the parameter values that are specified in
    ///          the stack set; to add or delete a parameter itself, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html">UpdateStackSet to update the stack set template. If you add a parameter to a
    ///          template, before you can override the parameter value specified in the stack set you must
    ///          first use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html">UpdateStackSet to update all stack instances with the updated template and
    ///          parameter value specified in the stack set. Once a stack instance has been updated with the
    ///          new parameter, you can then override the parameter value using
    ///             UpdateStackInstances.
    func updateStackInstances(input: UpdateStackInstancesInput) async throws -> UpdateStackInstancesOutputResponse
    {
        typealias updateStackInstancesContinuation = CheckedContinuation<UpdateStackInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateStackInstancesContinuation) in
            updateStackInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the stack set, and associated stack instances in the specified accounts and
    ///          Regions.
    ///          Even if the stack set operation created by updating the stack set fails (completely
    ///          or partially, below or above a specified failure tolerance), the stack set is updated with
    ///          your changes. Subsequent CreateStackInstances calls on the specified
    ///          stack set use the updated stack set.
    func updateStackSet(input: UpdateStackSetInput) async throws -> UpdateStackSetOutputResponse
    {
        typealias updateStackSetContinuation = CheckedContinuation<UpdateStackSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateStackSetContinuation) in
            updateStackSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates termination protection for the specified stack. If a user attempts to delete
    ///          a stack with termination protection enabled, the operation fails and the stack remains
    ///          unchanged. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html">Protecting a
    ///             Stack From Being Deleted in the CloudFormation User Guide.
    ///          For <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">nested
    ///             stacks, termination protection is set on the root stack and cannot be changed
    ///          directly on the nested stack.
    func updateTerminationProtection(input: UpdateTerminationProtectionInput) async throws -> UpdateTerminationProtectionOutputResponse
    {
        typealias updateTerminationProtectionContinuation = CheckedContinuation<UpdateTerminationProtectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTerminationProtectionContinuation) in
            updateTerminationProtection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Validates a specified template. CloudFormation first checks if the template is
    ///          valid JSON. If it isn't, CloudFormation checks if the template is valid YAML. If both
    ///          these checks fail, CloudFormation returns a template validation error.
    func validateTemplate(input: ValidateTemplateInput) async throws -> ValidateTemplateOutputResponse
    {
        typealias validateTemplateContinuation = CheckedContinuation<ValidateTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: validateTemplateContinuation) in
            validateTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
