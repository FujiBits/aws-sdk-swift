// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct IndexFacesInputHeadersMiddleware: Middleware {
    public let id: String = "IndexFacesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IndexFacesInput>,
                  next: H) -> Swift.Result<OperationOutput<IndexFacesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IndexFacesInput>
    public typealias MOutput = OperationOutput<IndexFacesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IndexFacesOutputError>
}

public struct IndexFacesInputQueryItemMiddleware: Middleware {
    public let id: String = "IndexFacesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IndexFacesInput>,
                  next: H) -> Swift.Result<OperationOutput<IndexFacesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IndexFacesInput>
    public typealias MOutput = OperationOutput<IndexFacesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IndexFacesOutputError>
}

public struct IndexFacesInputBodyMiddleware: Middleware {
    public let id: String = "IndexFacesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IndexFacesInput>,
                  next: H) -> Swift.Result<OperationOutput<IndexFacesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IndexFacesInput>
    public typealias MOutput = OperationOutput<IndexFacesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IndexFacesOutputError>
}

extension IndexFacesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case collectionId = "CollectionId"
        case detectionAttributes = "DetectionAttributes"
        case externalImageId = "ExternalImageId"
        case image = "Image"
        case maxFaces = "MaxFaces"
        case qualityFilter = "QualityFilter"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let detectionAttributes = detectionAttributes {
            var detectionAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .detectionAttributes)
            for attributes0 in detectionAttributes {
                try detectionAttributesContainer.encode(attributes0.rawValue)
            }
        }
        if let externalImageId = externalImageId {
            try encodeContainer.encode(externalImageId, forKey: .externalImageId)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let maxFaces = maxFaces {
            try encodeContainer.encode(maxFaces, forKey: .maxFaces)
        }
        if let qualityFilter = qualityFilter {
            try encodeContainer.encode(qualityFilter.rawValue, forKey: .qualityFilter)
        }
    }
}
