// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateProjectVersionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateProjectVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateProjectVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateProjectVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateProjectVersionInput>
    public typealias MOutput = OperationOutput<CreateProjectVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateProjectVersionOutputError>
}

public struct CreateProjectVersionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateProjectVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateProjectVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateProjectVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateProjectVersionInput>
    public typealias MOutput = OperationOutput<CreateProjectVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateProjectVersionOutputError>
}

public struct CreateProjectVersionInputBodyMiddleware: Middleware {
    public let id: String = "CreateProjectVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateProjectVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateProjectVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateProjectVersionInput>
    public typealias MOutput = OperationOutput<CreateProjectVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateProjectVersionOutputError>
}

extension CreateProjectVersionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case kmsKeyId = "KmsKeyId"
        case outputConfig = "OutputConfig"
        case projectArn = "ProjectArn"
        case tags = "Tags"
        case testingData = "TestingData"
        case trainingData = "TrainingData"
        case versionName = "VersionName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let outputConfig = outputConfig {
            try encodeContainer.encode(outputConfig, forKey: .outputConfig)
        }
        if let projectArn = projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let testingData = testingData {
            try encodeContainer.encode(testingData, forKey: .testingData)
        }
        if let trainingData = trainingData {
            try encodeContainer.encode(trainingData, forKey: .trainingData)
        }
        if let versionName = versionName {
            try encodeContainer.encode(versionName, forKey: .versionName)
        }
    }
}
