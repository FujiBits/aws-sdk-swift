// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SearchFacesByImageInputHeadersMiddleware: Middleware {
    public let id: String = "SearchFacesByImageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SearchFacesByImageInput>,
                  next: H) -> Swift.Result<OperationOutput<SearchFacesByImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SearchFacesByImageInput>
    public typealias MOutput = OperationOutput<SearchFacesByImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SearchFacesByImageOutputError>
}

public struct SearchFacesByImageInputQueryItemMiddleware: Middleware {
    public let id: String = "SearchFacesByImageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SearchFacesByImageInput>,
                  next: H) -> Swift.Result<OperationOutput<SearchFacesByImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SearchFacesByImageInput>
    public typealias MOutput = OperationOutput<SearchFacesByImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SearchFacesByImageOutputError>
}

public struct SearchFacesByImageInputBodyMiddleware: Middleware {
    public let id: String = "SearchFacesByImageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SearchFacesByImageInput>,
                  next: H) -> Swift.Result<OperationOutput<SearchFacesByImageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SearchFacesByImageInput>
    public typealias MOutput = OperationOutput<SearchFacesByImageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SearchFacesByImageOutputError>
}

extension SearchFacesByImageInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case collectionId = "CollectionId"
        case faceMatchThreshold = "FaceMatchThreshold"
        case image = "Image"
        case maxFaces = "MaxFaces"
        case qualityFilter = "QualityFilter"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionId = collectionId {
            try encodeContainer.encode(collectionId, forKey: .collectionId)
        }
        if let faceMatchThreshold = faceMatchThreshold {
            try encodeContainer.encode(faceMatchThreshold, forKey: .faceMatchThreshold)
        }
        if let image = image {
            try encodeContainer.encode(image, forKey: .image)
        }
        if let maxFaces = maxFaces {
            try encodeContainer.encode(maxFaces, forKey: .maxFaces)
        }
        if let qualityFilter = qualityFilter {
            try encodeContainer.encode(qualityFilter.rawValue, forKey: .qualityFilter)
        }
    }
}
