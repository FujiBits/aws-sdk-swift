// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension TranscribeStreamingClient {
    /// <p>Starts a bidirectional HTTP/2 stream where audio is streamed to Amazon Transcribe Medical and the
    ///             transcription results are streamed to your application.</p>
    func startMedicalStreamTranscription(input: StartMedicalStreamTranscriptionInput) async throws -> StartMedicalStreamTranscriptionOutputResponse
    {
        typealias startMedicalStreamTranscriptionContinuation = CheckedContinuation<StartMedicalStreamTranscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startMedicalStreamTranscriptionContinuation) in
            startMedicalStreamTranscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts a bidirectional HTTP2 stream where audio is streamed to Amazon Transcribe and the transcription
    ///       results are streamed to your application.</p>
    ///          <p>The following are encoded as HTTP2 headers:</p>
    ///          <ul>
    ///             <li>
    ///                <p>x-amzn-transcribe-language-code</p>
    ///             </li>
    ///             <li>
    ///                <p>x-amzn-transcribe-media-encoding</p>
    ///             </li>
    ///             <li>
    ///                <p>x-amzn-transcribe-sample-rate</p>
    ///             </li>
    ///             <li>
    ///                <p>x-amzn-transcribe-session-id</p>
    ///             </li>
    ///          </ul>
    func startStreamTranscription(input: StartStreamTranscriptionInput) async throws -> StartStreamTranscriptionOutputResponse
    {
        typealias startStreamTranscriptionContinuation = CheckedContinuation<StartStreamTranscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startStreamTranscriptionContinuation) in
            startStreamTranscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
