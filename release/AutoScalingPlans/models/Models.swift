// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AutoScalingPlansClientTypes.ApplicationSource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudFormationStackARN = "CloudFormationStackARN"
        case tagFilters = "TagFilters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudFormationStackARN = cloudFormationStackARN {
            try encodeContainer.encode(cloudFormationStackARN, forKey: .cloudFormationStackARN)
        }
        if let tagFilters = tagFilters {
            var tagFiltersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagFilters)
            for tagfilters0 in tagFilters {
                try tagFiltersContainer.encode(tagfilters0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFormationStackARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudFormationStackARN)
        cloudFormationStackARN = cloudFormationStackARNDecoded
        let tagFiltersContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.TagFilter?].self, forKey: .tagFilters)
        var tagFiltersDecoded0:[AutoScalingPlansClientTypes.TagFilter]? = nil
        if let tagFiltersContainer = tagFiltersContainer {
            tagFiltersDecoded0 = [AutoScalingPlansClientTypes.TagFilter]()
            for structure0 in tagFiltersContainer {
                if let structure0 = structure0 {
                    tagFiltersDecoded0?.append(structure0)
                }
            }
        }
        tagFilters = tagFiltersDecoded0
    }
}

extension AutoScalingPlansClientTypes.ApplicationSource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ApplicationSource(cloudFormationStackARN: \(Swift.String(describing: cloudFormationStackARN)), tagFilters: \(Swift.String(describing: tagFilters)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Represents an application source.</p>
    public struct ApplicationSource: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of a AWS CloudFormation stack.</p>
        public let cloudFormationStackARN: Swift.String?
        /// <p>A set of tags (up to 50).</p>
        public let tagFilters: [AutoScalingPlansClientTypes.TagFilter]?

        public init (
            cloudFormationStackARN: Swift.String? = nil,
            tagFilters: [AutoScalingPlansClientTypes.TagFilter]? = nil
        )
        {
            self.cloudFormationStackARN = cloudFormationStackARN
            self.tagFilters = tagFilters
        }
    }

}

extension ConcurrentUpdateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConcurrentUpdateException(message: \(Swift.String(describing: message)))"}
}

extension ConcurrentUpdateException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConcurrentUpdateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Concurrent updates caused an exception, for example, if you request an update to a
///          scaling plan that already has a pending update.</p>
public struct ConcurrentUpdateException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentUpdateExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConcurrentUpdateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CreateScalingPlanInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateScalingPlanInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateScalingPlanInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateScalingPlanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateScalingPlanInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateScalingPlanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateScalingPlanOutputError>
}

extension CreateScalingPlanInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateScalingPlanInput(applicationSource: \(Swift.String(describing: applicationSource)), scalingInstructions: \(Swift.String(describing: scalingInstructions)), scalingPlanName: \(Swift.String(describing: scalingPlanName)))"}
}

extension CreateScalingPlanInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationSource = "ApplicationSource"
        case scalingInstructions = "ScalingInstructions"
        case scalingPlanName = "ScalingPlanName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationSource = applicationSource {
            try encodeContainer.encode(applicationSource, forKey: .applicationSource)
        }
        if let scalingInstructions = scalingInstructions {
            var scalingInstructionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scalingInstructions)
            for scalinginstructions0 in scalingInstructions {
                try scalingInstructionsContainer.encode(scalinginstructions0)
            }
        }
        if let scalingPlanName = scalingPlanName {
            try encodeContainer.encode(scalingPlanName, forKey: .scalingPlanName)
        }
    }
}

public struct CreateScalingPlanInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateScalingPlanInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateScalingPlanInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateScalingPlanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateScalingPlanInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateScalingPlanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateScalingPlanOutputError>
}

public struct CreateScalingPlanInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateScalingPlanInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateScalingPlanInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateScalingPlanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateScalingPlanInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateScalingPlanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateScalingPlanOutputError>
}

public struct CreateScalingPlanInput: Swift.Equatable {
    /// <p>A CloudFormation stack or set of tags. You can create one scaling plan per application
    ///          source.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    public let applicationSource: AutoScalingPlansClientTypes.ApplicationSource?
    /// <p>The scaling instructions.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    public let scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]?
    /// <p>The name of the scaling plan. Names cannot contain vertical bars, colons, or forward
    ///          slashes.</p>
    public let scalingPlanName: Swift.String?

    public init (
        applicationSource: AutoScalingPlansClientTypes.ApplicationSource? = nil,
        scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]? = nil,
        scalingPlanName: Swift.String? = nil
    )
    {
        self.applicationSource = applicationSource
        self.scalingInstructions = scalingInstructions
        self.scalingPlanName = scalingPlanName
    }
}

struct CreateScalingPlanInputBody: Swift.Equatable {
    public let scalingPlanName: Swift.String?
    public let applicationSource: AutoScalingPlansClientTypes.ApplicationSource?
    public let scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]?
}

extension CreateScalingPlanInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationSource = "ApplicationSource"
        case scalingInstructions = "ScalingInstructions"
        case scalingPlanName = "ScalingPlanName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scalingPlanName)
        scalingPlanName = scalingPlanNameDecoded
        let applicationSourceDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ApplicationSource.self, forKey: .applicationSource)
        applicationSource = applicationSourceDecoded
        let scalingInstructionsContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.ScalingInstruction?].self, forKey: .scalingInstructions)
        var scalingInstructionsDecoded0:[AutoScalingPlansClientTypes.ScalingInstruction]? = nil
        if let scalingInstructionsContainer = scalingInstructionsContainer {
            scalingInstructionsDecoded0 = [AutoScalingPlansClientTypes.ScalingInstruction]()
            for structure0 in scalingInstructionsContainer {
                if let structure0 = structure0 {
                    scalingInstructionsDecoded0?.append(structure0)
                }
            }
        }
        scalingInstructions = scalingInstructionsDecoded0
    }
}

extension CreateScalingPlanOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateScalingPlanOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateScalingPlanOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case limitExceededException(LimitExceededException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateScalingPlanOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateScalingPlanOutputResponse(scalingPlanVersion: \(Swift.String(describing: scalingPlanVersion)))"}
}

extension CreateScalingPlanOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateScalingPlanOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.scalingPlanVersion = output.scalingPlanVersion
        } else {
            self.scalingPlanVersion = nil
        }
    }
}

public struct CreateScalingPlanOutputResponse: Swift.Equatable {
    /// <p>The version number of the scaling plan. This value is always <code>1</code>. Currently,
    ///          you cannot have multiple scaling plan versions.</p>
    public let scalingPlanVersion: Swift.Int?

    public init (
        scalingPlanVersion: Swift.Int? = nil
    )
    {
        self.scalingPlanVersion = scalingPlanVersion
    }
}

struct CreateScalingPlanOutputResponseBody: Swift.Equatable {
    public let scalingPlanVersion: Swift.Int?
}

extension CreateScalingPlanOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scalingPlanVersion = "ScalingPlanVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
    }
}

extension AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case statistic = "Statistic"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for metricdimensions0 in dimensions {
                try dimensionsContainer.encode(metricdimensions0)
            }
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if let unit = unit {
            try encodeContainer.encode(unit, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.MetricDimension?].self, forKey: .dimensions)
        var dimensionsDecoded0:[AutoScalingPlansClientTypes.MetricDimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [AutoScalingPlansClientTypes.MetricDimension]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
        let statisticDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomizedLoadMetricSpecification(dimensions: \(Swift.String(describing: dimensions)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), statistic: \(Swift.String(describing: statistic)), unit: \(Swift.String(describing: unit)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Represents a CloudWatch metric of your choosing that can be used for predictive scaling. </p>
    ///          <p>For predictive scaling to work with a customized load metric specification, AWS Auto Scaling
    ///          needs access to the <code>Sum</code> and <code>Average</code> statistics that CloudWatch computes
    ///          from metric data.</p>
    ///          <p>When you choose a load metric, make sure that the required <code>Sum</code> and
    ///             <code>Average</code> statistics for your metric are available in CloudWatch and that they
    ///          provide relevant data for predictive scaling. The <code>Sum</code> statistic must represent
    ///          the total load on the resource, and the <code>Average</code> statistic must represent the
    ///          average load per capacity unit of the resource. For example, there is a metric that counts
    ///          the number of requests processed by your Auto Scaling group. If the <code>Sum</code> statistic
    ///          represents the total request count processed by the group, then the <code>Average</code>
    ///          statistic for the specified metric must represent the average request count processed by
    ///          each instance of the group. </p>
    ///          <p>If you publish your own metrics, you can aggregate the data points at a given interval
    ///          and then publish the aggregated data points to CloudWatch. Before AWS Auto Scaling generates the
    ///          forecast, it sums up all the metric data points that occurred within each hour to match the
    ///          granularity period that is used in the forecast (60 minutes).</p>
    ///          <p>For information about terminology, available metrics, or how to publish new metrics, see
    ///             <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch
    ///             Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p>
    ///          <p>After creating your scaling plan, you can use the AWS Auto Scaling console to visualize
    ///          forecasts for the specified metric. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-create-scaling-plan.html#gs-view-resource">View
    ///             Scaling Information for a Resource</a> in the
    ///          <i>AWS Auto Scaling User Guide</i>.</p>
    public struct CustomizedLoadMetricSpecification: Swift.Equatable {
        /// <p>The dimensions of the metric.</p>
        ///          <p>Conditional: If you published your metric with dimensions, you must specify the same
        ///          dimensions in your customized load metric specification.</p>
        public let dimensions: [AutoScalingPlansClientTypes.MetricDimension]?
        /// <p>The name of the metric.</p>
        public let metricName: Swift.String?
        /// <p>The namespace of the metric.</p>
        public let namespace: Swift.String?
        /// <p>The statistic of the metric. The only valid value is <code>Sum</code>.</p>
        public let statistic: AutoScalingPlansClientTypes.MetricStatistic?
        /// <p>The unit of the metric.</p>
        public let unit: Swift.String?

        public init (
            dimensions: [AutoScalingPlansClientTypes.MetricDimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            statistic: AutoScalingPlansClientTypes.MetricStatistic? = nil,
            unit: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }
    }

}

extension AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case statistic = "Statistic"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for metricdimensions0 in dimensions {
                try dimensionsContainer.encode(metricdimensions0)
            }
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if let unit = unit {
            try encodeContainer.encode(unit, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.MetricDimension?].self, forKey: .dimensions)
        var dimensionsDecoded0:[AutoScalingPlansClientTypes.MetricDimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [AutoScalingPlansClientTypes.MetricDimension]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
        let statisticDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomizedScalingMetricSpecification(dimensions: \(Swift.String(describing: dimensions)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), statistic: \(Swift.String(describing: statistic)), unit: \(Swift.String(describing: unit)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Represents a CloudWatch metric of your choosing that can be used for dynamic scaling as part
    ///          of a target tracking scaling policy. </p>
    ///          <p>To create your customized scaling metric specification:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Add values for each required parameter from CloudWatch. You can use an existing metric,
    ///                or a new metric that you create. To use your own metric, you must first publish the
    ///                metric to CloudWatch. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publish Custom
    ///                   Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Choose a metric that changes proportionally with capacity. The value of the metric
    ///                should increase or decrease in inverse proportion to the number of capacity units.
    ///                That is, the value of the metric should decrease when capacity increases. </p>
    ///             </li>
    ///          </ul>
    ///          <p>For information about terminology, available metrics, or how to publish new metrics, see
    ///             <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch
    ///             Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p>
    public struct CustomizedScalingMetricSpecification: Swift.Equatable {
        /// <p>The dimensions of the metric.</p>
        ///          <p>Conditional: If you published your metric with dimensions, you must specify the same
        ///          dimensions in your customized scaling metric specification.</p>
        public let dimensions: [AutoScalingPlansClientTypes.MetricDimension]?
        /// <p>The name of the metric.</p>
        public let metricName: Swift.String?
        /// <p>The namespace of the metric.</p>
        public let namespace: Swift.String?
        /// <p>The statistic of the metric.</p>
        public let statistic: AutoScalingPlansClientTypes.MetricStatistic?
        /// <p>The unit of the metric. </p>
        public let unit: Swift.String?

        public init (
            dimensions: [AutoScalingPlansClientTypes.MetricDimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            statistic: AutoScalingPlansClientTypes.MetricStatistic? = nil,
            unit: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }
    }

}

extension AutoScalingPlansClientTypes.Datapoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timestamp = "Timestamp"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let timestamp = timestamp {
            try encodeContainer.encode(timestamp.timeIntervalSince1970, forKey: .timestamp)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .value)
        value = valueDecoded
    }
}

extension AutoScalingPlansClientTypes.Datapoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Datapoint(timestamp: \(Swift.String(describing: timestamp)), value: \(Swift.String(describing: value)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Represents a single value in the forecast data used for predictive scaling.</p>
    public struct Datapoint: Swift.Equatable {
        /// <p>The time stamp for the data point in UTC format.</p>
        public let timestamp: ClientRuntime.Date?
        /// <p>The value of the data point.</p>
        public let value: Swift.Double?

        public init (
            timestamp: ClientRuntime.Date? = nil,
            value: Swift.Double? = nil
        )
        {
            self.timestamp = timestamp
            self.value = value
        }
    }

}

public struct DeleteScalingPlanInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScalingPlanInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScalingPlanInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScalingPlanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScalingPlanInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScalingPlanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScalingPlanOutputError>
}

extension DeleteScalingPlanInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteScalingPlanInput(scalingPlanName: \(Swift.String(describing: scalingPlanName)), scalingPlanVersion: \(Swift.String(describing: scalingPlanVersion)))"}
}

extension DeleteScalingPlanInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scalingPlanName = scalingPlanName {
            try encodeContainer.encode(scalingPlanName, forKey: .scalingPlanName)
        }
        if let scalingPlanVersion = scalingPlanVersion {
            try encodeContainer.encode(scalingPlanVersion, forKey: .scalingPlanVersion)
        }
    }
}

public struct DeleteScalingPlanInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScalingPlanInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScalingPlanInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScalingPlanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScalingPlanInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScalingPlanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScalingPlanOutputError>
}

public struct DeleteScalingPlanInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScalingPlanInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScalingPlanInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScalingPlanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScalingPlanInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScalingPlanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScalingPlanOutputError>
}

public struct DeleteScalingPlanInput: Swift.Equatable {
    /// <p>The name of the scaling plan.</p>
    public let scalingPlanName: Swift.String?
    /// <p>The version number of the scaling plan. Currently, the only valid value is
    ///             <code>1</code>.</p>
    public let scalingPlanVersion: Swift.Int?

    public init (
        scalingPlanName: Swift.String? = nil,
        scalingPlanVersion: Swift.Int? = nil
    )
    {
        self.scalingPlanName = scalingPlanName
        self.scalingPlanVersion = scalingPlanVersion
    }
}

struct DeleteScalingPlanInputBody: Swift.Equatable {
    public let scalingPlanName: Swift.String?
    public let scalingPlanVersion: Swift.Int?
}

extension DeleteScalingPlanInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scalingPlanName)
        scalingPlanName = scalingPlanNameDecoded
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
    }
}

extension DeleteScalingPlanOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteScalingPlanOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ObjectNotFoundException" : self = .objectNotFoundException(try ObjectNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteScalingPlanOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case objectNotFoundException(ObjectNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScalingPlanOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteScalingPlanOutputResponse()"}
}

extension DeleteScalingPlanOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteScalingPlanOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteScalingPlanOutputResponseBody: Swift.Equatable {
}

extension DeleteScalingPlanOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeScalingPlanResourcesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingPlanResourcesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingPlanResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingPlanResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingPlanResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingPlanResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingPlanResourcesOutputError>
}

extension DescribeScalingPlanResourcesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingPlanResourcesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), scalingPlanName: \(Swift.String(describing: scalingPlanName)), scalingPlanVersion: \(Swift.String(describing: scalingPlanVersion)))"}
}

extension DescribeScalingPlanResourcesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let scalingPlanName = scalingPlanName {
            try encodeContainer.encode(scalingPlanName, forKey: .scalingPlanName)
        }
        if let scalingPlanVersion = scalingPlanVersion {
            try encodeContainer.encode(scalingPlanVersion, forKey: .scalingPlanVersion)
        }
    }
}

public struct DescribeScalingPlanResourcesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingPlanResourcesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingPlanResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingPlanResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingPlanResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingPlanResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingPlanResourcesOutputError>
}

public struct DescribeScalingPlanResourcesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingPlanResourcesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingPlanResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingPlanResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingPlanResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingPlanResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingPlanResourcesOutputError>
}

public struct DescribeScalingPlanResourcesInput: Swift.Equatable {
    /// <p>The maximum number of scalable resources to return. The value must be between
    ///          1 and 50. The default value is 50.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the scaling plan.</p>
    public let scalingPlanName: Swift.String?
    /// <p>The version number of the scaling plan. Currently, the only valid value is
    ///             <code>1</code>.</p>
    public let scalingPlanVersion: Swift.Int?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scalingPlanName: Swift.String? = nil,
        scalingPlanVersion: Swift.Int? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.scalingPlanName = scalingPlanName
        self.scalingPlanVersion = scalingPlanVersion
    }
}

struct DescribeScalingPlanResourcesInputBody: Swift.Equatable {
    public let scalingPlanName: Swift.String?
    public let scalingPlanVersion: Swift.Int?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension DescribeScalingPlanResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scalingPlanName)
        scalingPlanName = scalingPlanNameDecoded
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeScalingPlanResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScalingPlanResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScalingPlanResourcesOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case invalidNextTokenException(InvalidNextTokenException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingPlanResourcesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingPlanResourcesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), scalingPlanResources: \(Swift.String(describing: scalingPlanResources)))"}
}

extension DescribeScalingPlanResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeScalingPlanResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scalingPlanResources = output.scalingPlanResources
        } else {
            self.nextToken = nil
            self.scalingPlanResources = nil
        }
    }
}

public struct DescribeScalingPlanResourcesOutputResponse: Swift.Equatable {
    /// <p>The token required to get the next set of results. This value is <code>null</code> if
    ///          there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>Information about the scalable resources.</p>
    public let scalingPlanResources: [AutoScalingPlansClientTypes.ScalingPlanResource]?

    public init (
        nextToken: Swift.String? = nil,
        scalingPlanResources: [AutoScalingPlansClientTypes.ScalingPlanResource]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPlanResources = scalingPlanResources
    }
}

struct DescribeScalingPlanResourcesOutputResponseBody: Swift.Equatable {
    public let scalingPlanResources: [AutoScalingPlansClientTypes.ScalingPlanResource]?
    public let nextToken: Swift.String?
}

extension DescribeScalingPlanResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scalingPlanResources = "ScalingPlanResources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanResourcesContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.ScalingPlanResource?].self, forKey: .scalingPlanResources)
        var scalingPlanResourcesDecoded0:[AutoScalingPlansClientTypes.ScalingPlanResource]? = nil
        if let scalingPlanResourcesContainer = scalingPlanResourcesContainer {
            scalingPlanResourcesDecoded0 = [AutoScalingPlansClientTypes.ScalingPlanResource]()
            for structure0 in scalingPlanResourcesContainer {
                if let structure0 = structure0 {
                    scalingPlanResourcesDecoded0?.append(structure0)
                }
            }
        }
        scalingPlanResources = scalingPlanResourcesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeScalingPlansInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingPlansInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingPlansInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingPlansOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingPlansInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingPlansOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingPlansOutputError>
}

extension DescribeScalingPlansInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingPlansInput(applicationSources: \(Swift.String(describing: applicationSources)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), scalingPlanNames: \(Swift.String(describing: scalingPlanNames)), scalingPlanVersion: \(Swift.String(describing: scalingPlanVersion)))"}
}

extension DescribeScalingPlansInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationSources = "ApplicationSources"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case scalingPlanNames = "ScalingPlanNames"
        case scalingPlanVersion = "ScalingPlanVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationSources = applicationSources {
            var applicationSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .applicationSources)
            for applicationsources0 in applicationSources {
                try applicationSourcesContainer.encode(applicationsources0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let scalingPlanNames = scalingPlanNames {
            var scalingPlanNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scalingPlanNames)
            for scalingplannames0 in scalingPlanNames {
                try scalingPlanNamesContainer.encode(scalingplannames0)
            }
        }
        if let scalingPlanVersion = scalingPlanVersion {
            try encodeContainer.encode(scalingPlanVersion, forKey: .scalingPlanVersion)
        }
    }
}

public struct DescribeScalingPlansInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingPlansInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingPlansInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingPlansOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingPlansInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingPlansOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingPlansOutputError>
}

public struct DescribeScalingPlansInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingPlansInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingPlansInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingPlansOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingPlansInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingPlansOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingPlansOutputError>
}

public struct DescribeScalingPlansInput: Swift.Equatable {
    /// <p>The sources for the applications (up to 10). If you specify scaling plan names, you
    ///          cannot specify application sources.</p>
    public let applicationSources: [AutoScalingPlansClientTypes.ApplicationSource]?
    /// <p>The maximum number of scalable resources to return. This value can be between
    ///          1 and 50. The default value is 50.</p>
    public let maxResults: Swift.Int?
    /// <p>The token for the next set of results.</p>
    public let nextToken: Swift.String?
    /// <p>The names of the scaling plans (up to 10). If you specify application sources, you
    ///          cannot specify scaling plan names.</p>
    public let scalingPlanNames: [Swift.String]?
    /// <p>The version number of the scaling plan. Currently, the only valid value is
    ///             <code>1</code>.</p>
    ///          <note>
    ///             <p>If you specify a scaling plan version, you must also specify a scaling plan
    ///             name.</p>
    ///          </note>
    public let scalingPlanVersion: Swift.Int?

    public init (
        applicationSources: [AutoScalingPlansClientTypes.ApplicationSource]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scalingPlanNames: [Swift.String]? = nil,
        scalingPlanVersion: Swift.Int? = nil
    )
    {
        self.applicationSources = applicationSources
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.scalingPlanNames = scalingPlanNames
        self.scalingPlanVersion = scalingPlanVersion
    }
}

struct DescribeScalingPlansInputBody: Swift.Equatable {
    public let scalingPlanNames: [Swift.String]?
    public let scalingPlanVersion: Swift.Int?
    public let applicationSources: [AutoScalingPlansClientTypes.ApplicationSource]?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension DescribeScalingPlansInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationSources = "ApplicationSources"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case scalingPlanNames = "ScalingPlanNames"
        case scalingPlanVersion = "ScalingPlanVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .scalingPlanNames)
        var scalingPlanNamesDecoded0:[Swift.String]? = nil
        if let scalingPlanNamesContainer = scalingPlanNamesContainer {
            scalingPlanNamesDecoded0 = [Swift.String]()
            for string0 in scalingPlanNamesContainer {
                if let string0 = string0 {
                    scalingPlanNamesDecoded0?.append(string0)
                }
            }
        }
        scalingPlanNames = scalingPlanNamesDecoded0
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
        let applicationSourcesContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.ApplicationSource?].self, forKey: .applicationSources)
        var applicationSourcesDecoded0:[AutoScalingPlansClientTypes.ApplicationSource]? = nil
        if let applicationSourcesContainer = applicationSourcesContainer {
            applicationSourcesDecoded0 = [AutoScalingPlansClientTypes.ApplicationSource]()
            for structure0 in applicationSourcesContainer {
                if let structure0 = structure0 {
                    applicationSourcesDecoded0?.append(structure0)
                }
            }
        }
        applicationSources = applicationSourcesDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeScalingPlansOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeScalingPlansOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScalingPlansOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case invalidNextTokenException(InvalidNextTokenException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingPlansOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingPlansOutputResponse(nextToken: \(Swift.String(describing: nextToken)), scalingPlans: \(Swift.String(describing: scalingPlans)))"}
}

extension DescribeScalingPlansOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeScalingPlansOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scalingPlans = output.scalingPlans
        } else {
            self.nextToken = nil
            self.scalingPlans = nil
        }
    }
}

public struct DescribeScalingPlansOutputResponse: Swift.Equatable {
    /// <p>The token required to get the next set of results. This value is <code>null</code> if
    ///          there are no more results to return.</p>
    public let nextToken: Swift.String?
    /// <p>Information about the scaling plans.</p>
    public let scalingPlans: [AutoScalingPlansClientTypes.ScalingPlan]?

    public init (
        nextToken: Swift.String? = nil,
        scalingPlans: [AutoScalingPlansClientTypes.ScalingPlan]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPlans = scalingPlans
    }
}

struct DescribeScalingPlansOutputResponseBody: Swift.Equatable {
    public let scalingPlans: [AutoScalingPlansClientTypes.ScalingPlan]?
    public let nextToken: Swift.String?
}

extension DescribeScalingPlansOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scalingPlans = "ScalingPlans"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlansContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.ScalingPlan?].self, forKey: .scalingPlans)
        var scalingPlansDecoded0:[AutoScalingPlansClientTypes.ScalingPlan]? = nil
        if let scalingPlansContainer = scalingPlansContainer {
            scalingPlansDecoded0 = [AutoScalingPlansClientTypes.ScalingPlan]()
            for structure0 in scalingPlansContainer {
                if let structure0 = structure0 {
                    scalingPlansDecoded0?.append(structure0)
                }
            }
        }
        scalingPlans = scalingPlansDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension AutoScalingPlansClientTypes {
    public enum ForecastDataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case capacityforecast
        case loadforecast
        case scheduledactionmaxcapacity
        case scheduledactionmincapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [ForecastDataType] {
            return [
                .capacityforecast,
                .loadforecast,
                .scheduledactionmaxcapacity,
                .scheduledactionmincapacity,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .capacityforecast: return "CapacityForecast"
            case .loadforecast: return "LoadForecast"
            case .scheduledactionmaxcapacity: return "ScheduledActionMaxCapacity"
            case .scheduledactionmincapacity: return "ScheduledActionMinCapacity"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ForecastDataType(rawValue: rawValue) ?? ForecastDataType.sdkUnknown(rawValue)
        }
    }
}

public struct GetScalingPlanResourceForecastDataInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetScalingPlanResourceForecastDataInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetScalingPlanResourceForecastDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetScalingPlanResourceForecastDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetScalingPlanResourceForecastDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetScalingPlanResourceForecastDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetScalingPlanResourceForecastDataOutputError>
}

extension GetScalingPlanResourceForecastDataInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetScalingPlanResourceForecastDataInput(endTime: \(Swift.String(describing: endTime)), forecastDataType: \(Swift.String(describing: forecastDataType)), resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), scalingPlanName: \(Swift.String(describing: scalingPlanName)), scalingPlanVersion: \(Swift.String(describing: scalingPlanVersion)), serviceNamespace: \(Swift.String(describing: serviceNamespace)), startTime: \(Swift.String(describing: startTime)))"}
}

extension GetScalingPlanResourceForecastDataInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case forecastDataType = "ForecastDataType"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let forecastDataType = forecastDataType {
            try encodeContainer.encode(forecastDataType.rawValue, forKey: .forecastDataType)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let scalingPlanName = scalingPlanName {
            try encodeContainer.encode(scalingPlanName, forKey: .scalingPlanName)
        }
        if let scalingPlanVersion = scalingPlanVersion {
            try encodeContainer.encode(scalingPlanVersion, forKey: .scalingPlanVersion)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }
}

public struct GetScalingPlanResourceForecastDataInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetScalingPlanResourceForecastDataInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetScalingPlanResourceForecastDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetScalingPlanResourceForecastDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetScalingPlanResourceForecastDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetScalingPlanResourceForecastDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetScalingPlanResourceForecastDataOutputError>
}

public struct GetScalingPlanResourceForecastDataInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetScalingPlanResourceForecastDataInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetScalingPlanResourceForecastDataInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetScalingPlanResourceForecastDataOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetScalingPlanResourceForecastDataInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetScalingPlanResourceForecastDataOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetScalingPlanResourceForecastDataOutputError>
}

public struct GetScalingPlanResourceForecastDataInput: Swift.Equatable {
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time
    ///          duration between the start and end time is seven days. </p>
    ///          <p>Although this parameter can accept a date and time that is more than two days in the
    ///          future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for
    ///          periods of two days in advance.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The type of forecast data to get.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>LoadForecast</code>: The load metric forecast. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CapacityForecast</code>: The capacity forecast. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ScheduledActionMinCapacity</code>: The minimum capacity for each scheduled
    ///                scaling action. This data is calculated as the larger of two values: the capacity
    ///                forecast or the minimum capacity in the scaling instruction.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ScheduledActionMaxCapacity</code>: The maximum capacity for each scheduled
    ///                scaling action. The calculation used is determined by the predictive scaling maximum
    ///                capacity behavior setting in the scaling instruction.</p>
    ///             </li>
    ///          </ul>
    public let forecastDataType: AutoScalingPlansClientTypes.ForecastDataType?
    /// <p>The ID of the resource. This string consists of a prefix (<code>autoScalingGroup</code>)
    ///          followed by the name of a specified Auto Scaling group (<code>my-asg</code>). Example:
    ///             <code>autoScalingGroup/my-asg</code>. </p>
    public let resourceId: Swift.String?
    /// <p>The scalable dimension for the resource. The only valid value is
    ///             <code>autoscaling:autoScalingGroup:DesiredCapacity</code>. </p>
    public let scalableDimension: AutoScalingPlansClientTypes.ScalableDimension?
    /// <p>The name of the scaling plan.</p>
    public let scalingPlanName: Swift.String?
    /// <p>The version number of the scaling plan. Currently, the only valid value is
    ///             <code>1</code>.</p>
    public let scalingPlanVersion: Swift.Int?
    /// <p>The namespace of the AWS service. The only valid value is <code>autoscaling</code>.
    ///       </p>
    public let serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace?
    /// <p>The inclusive start time of the time range for the forecast data to get. The date and
    ///          time can be at most 56 days before the current date and time. </p>
    public let startTime: ClientRuntime.Date?

    public init (
        endTime: ClientRuntime.Date? = nil,
        forecastDataType: AutoScalingPlansClientTypes.ForecastDataType? = nil,
        resourceId: Swift.String? = nil,
        scalableDimension: AutoScalingPlansClientTypes.ScalableDimension? = nil,
        scalingPlanName: Swift.String? = nil,
        scalingPlanVersion: Swift.Int? = nil,
        serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.endTime = endTime
        self.forecastDataType = forecastDataType
        self.resourceId = resourceId
        self.scalableDimension = scalableDimension
        self.scalingPlanName = scalingPlanName
        self.scalingPlanVersion = scalingPlanVersion
        self.serviceNamespace = serviceNamespace
        self.startTime = startTime
    }
}

struct GetScalingPlanResourceForecastDataInputBody: Swift.Equatable {
    public let scalingPlanName: Swift.String?
    public let scalingPlanVersion: Swift.Int?
    public let serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace?
    public let resourceId: Swift.String?
    public let scalableDimension: AutoScalingPlansClientTypes.ScalableDimension?
    public let forecastDataType: AutoScalingPlansClientTypes.ForecastDataType?
    public let startTime: ClientRuntime.Date?
    public let endTime: ClientRuntime.Date?
}

extension GetScalingPlanResourceForecastDataInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case forecastDataType = "ForecastDataType"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
        case serviceNamespace = "ServiceNamespace"
        case startTime = "StartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scalingPlanName)
        scalingPlanName = scalingPlanNameDecoded
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let forecastDataTypeDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ForecastDataType.self, forKey: .forecastDataType)
        forecastDataType = forecastDataTypeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension GetScalingPlanResourceForecastDataOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetScalingPlanResourceForecastDataOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetScalingPlanResourceForecastDataOutputError: Swift.Error, Swift.Equatable {
    case internalServiceException(InternalServiceException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetScalingPlanResourceForecastDataOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetScalingPlanResourceForecastDataOutputResponse(datapoints: \(Swift.String(describing: datapoints)))"}
}

extension GetScalingPlanResourceForecastDataOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetScalingPlanResourceForecastDataOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datapoints = output.datapoints
        } else {
            self.datapoints = nil
        }
    }
}

public struct GetScalingPlanResourceForecastDataOutputResponse: Swift.Equatable {
    /// <p>The data points to return.</p>
    public let datapoints: [AutoScalingPlansClientTypes.Datapoint]?

    public init (
        datapoints: [AutoScalingPlansClientTypes.Datapoint]? = nil
    )
    {
        self.datapoints = datapoints
    }
}

struct GetScalingPlanResourceForecastDataOutputResponseBody: Swift.Equatable {
    public let datapoints: [AutoScalingPlansClientTypes.Datapoint]?
}

extension GetScalingPlanResourceForecastDataOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datapoints = "Datapoints"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datapointsContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.Datapoint?].self, forKey: .datapoints)
        var datapointsDecoded0:[AutoScalingPlansClientTypes.Datapoint]? = nil
        if let datapointsContainer = datapointsContainer {
            datapointsDecoded0 = [AutoScalingPlansClientTypes.Datapoint]()
            for structure0 in datapointsContainer {
                if let structure0 = structure0 {
                    datapointsDecoded0?.append(structure0)
                }
            }
        }
        datapoints = datapointsDecoded0
    }
}

extension InternalServiceException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServiceException(message: \(Swift.String(describing: message)))"}
}

extension InternalServiceException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The service encountered an internal error.</p>
public struct InternalServiceException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServiceExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNextTokenException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidNextTokenException(message: \(Swift.String(describing: message)))"}
}

extension InvalidNextTokenException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidNextTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The token provided is not valid.</p>
public struct InvalidNextTokenException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidNextTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Your account exceeded a limit. This exception is thrown when a per-account resource
///          limit is exceeded.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingPlansClientTypes {
    public enum LoadMetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case albtargetgrouprequestcount
        case asgtotalcpuutilization
        case asgtotalnetworkin
        case asgtotalnetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [LoadMetricType] {
            return [
                .albtargetgrouprequestcount,
                .asgtotalcpuutilization,
                .asgtotalnetworkin,
                .asgtotalnetworkout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .albtargetgrouprequestcount: return "ALBTargetGroupRequestCount"
            case .asgtotalcpuutilization: return "ASGTotalCPUUtilization"
            case .asgtotalnetworkin: return "ASGTotalNetworkIn"
            case .asgtotalnetworkout: return "ASGTotalNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LoadMetricType(rawValue: rawValue) ?? LoadMetricType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingPlansClientTypes.MetricDimension: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension AutoScalingPlansClientTypes.MetricDimension: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricDimension(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Represents a dimension for a customized metric.</p>
    public struct MetricDimension: Swift.Equatable {
        /// <p>The name of the dimension.</p>
        public let name: Swift.String?
        /// <p>The value of the dimension.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension AutoScalingPlansClientTypes {
    public enum MetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricStatistic(rawValue: rawValue) ?? MetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension ObjectNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ObjectNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ObjectNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ObjectNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified object could not be found.</p>
public struct ObjectNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ObjectNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ObjectNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingPlansClientTypes {
    public enum PolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case targettrackingscaling
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyType] {
            return [
                .targettrackingscaling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .targettrackingscaling: return "TargetTrackingScaling"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyType(rawValue: rawValue) ?? PolicyType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedLoadMetricType = "PredefinedLoadMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let predefinedLoadMetricType = predefinedLoadMetricType {
            try encodeContainer.encode(predefinedLoadMetricType.rawValue, forKey: .predefinedLoadMetricType)
        }
        if let resourceLabel = resourceLabel {
            try encodeContainer.encode(resourceLabel, forKey: .resourceLabel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedLoadMetricTypeDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.LoadMetricType.self, forKey: .predefinedLoadMetricType)
        predefinedLoadMetricType = predefinedLoadMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredefinedLoadMetricSpecification(predefinedLoadMetricType: \(Swift.String(describing: predefinedLoadMetricType)), resourceLabel: \(Swift.String(describing: resourceLabel)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Represents a predefined metric that can be used for predictive scaling.</p>
    ///          <p>After creating your scaling plan, you can use the AWS Auto Scaling console to visualize
    ///          forecasts for the specified metric. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-create-scaling-plan.html#gs-view-resource">View
    ///             Scaling Information for a Resource</a> in the
    ///          <i>AWS Auto Scaling User Guide</i>.</p>
    public struct PredefinedLoadMetricSpecification: Swift.Equatable {
        /// <p>The metric type.</p>
        public let predefinedLoadMetricType: AutoScalingPlansClientTypes.LoadMetricType?
        /// <p>Identifies the resource associated with the metric type. You can't specify a resource
        ///          label unless the metric type is <code>ALBTargetGroupRequestCount</code> and there is a
        ///          target group for an Application Load Balancer attached to the Auto Scaling group.</p>
        ///          <p>You create the resource label by appending the final portion of the load balancer ARN
        ///          and the final portion of the target group ARN into a single value, separated by a forward
        ///          slash (/). The format is
        ///          app/<load-balancer-name>/<load-balancer-id>/targetgroup/<target-group-name>/<target-group-id>,
        ///          where:</p>
        ///          <ul>
        ///             <li>
        ///                <p>app/<load-balancer-name>/<load-balancer-id> is the final portion of
        ///                the load balancer ARN</p>
        ///             </li>
        ///             <li>
        ///                <p>targetgroup/<target-group-name>/<target-group-id> is the final portion
        ///                of the target group ARN.</p>
        ///             </li>
        ///          </ul>
        ///          <p>This is an example:
        ///          app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d.</p>
        ///          <p>To find the ARN for an Application Load Balancer, use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a> API operation. To find the ARN for the target group, use
        ///          the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups</a> API operation.</p>
        public let resourceLabel: Swift.String?

        public init (
            predefinedLoadMetricType: AutoScalingPlansClientTypes.LoadMetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedLoadMetricType = predefinedLoadMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedScalingMetricType = "PredefinedScalingMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let predefinedScalingMetricType = predefinedScalingMetricType {
            try encodeContainer.encode(predefinedScalingMetricType.rawValue, forKey: .predefinedScalingMetricType)
        }
        if let resourceLabel = resourceLabel {
            try encodeContainer.encode(resourceLabel, forKey: .resourceLabel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedScalingMetricTypeDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ScalingMetricType.self, forKey: .predefinedScalingMetricType)
        predefinedScalingMetricType = predefinedScalingMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredefinedScalingMetricSpecification(predefinedScalingMetricType: \(Swift.String(describing: predefinedScalingMetricType)), resourceLabel: \(Swift.String(describing: resourceLabel)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Represents a predefined metric that can be used for dynamic scaling as part of a target
    ///          tracking scaling policy.</p>
    public struct PredefinedScalingMetricSpecification: Swift.Equatable {
        /// <p>The metric type. The <code>ALBRequestCountPerTarget</code> metric type applies only to
        ///          Auto Scaling groups, Spot Fleet requests, and ECS services.</p>
        public let predefinedScalingMetricType: AutoScalingPlansClientTypes.ScalingMetricType?
        /// <p>Identifies the resource associated with the metric type. You can't specify a resource
        ///          label unless the metric type is <code>ALBRequestCountPerTarget</code> and there is a target
        ///          group for an Application Load Balancer attached to the Auto Scaling group, Spot Fleet request, or
        ///          ECS service.</p>
        ///          <p>You create the resource label by appending the final portion of the load balancer ARN
        ///          and the final portion of the target group ARN into a single value, separated by a forward
        ///          slash (/). The format is
        ///          app/<load-balancer-name>/<load-balancer-id>/targetgroup/<target-group-name>/<target-group-id>,
        ///          where:</p>
        ///          <ul>
        ///             <li>
        ///                <p>app/<load-balancer-name>/<load-balancer-id> is the final portion of
        ///                the load balancer ARN</p>
        ///             </li>
        ///             <li>
        ///                <p>targetgroup/<target-group-name>/<target-group-id> is the final portion
        ///                of the target group ARN.</p>
        ///             </li>
        ///          </ul>
        ///          <p>This is an example:
        ///          app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d.</p>
        ///          <p>To find the ARN for an Application Load Balancer, use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a> API operation. To find the ARN for the target group, use
        ///          the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups</a> API operation.</p>
        public let resourceLabel: Swift.String?

        public init (
            predefinedScalingMetricType: AutoScalingPlansClientTypes.ScalingMetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedScalingMetricType = predefinedScalingMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingPlansClientTypes {
    public enum PredictiveScalingMaxCapacityBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case setforecastcapacitytomaxcapacity
        case setmaxcapacityaboveforecastcapacity
        case setmaxcapacitytoforecastcapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [PredictiveScalingMaxCapacityBehavior] {
            return [
                .setforecastcapacitytomaxcapacity,
                .setmaxcapacityaboveforecastcapacity,
                .setmaxcapacitytoforecastcapacity,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .setforecastcapacitytomaxcapacity: return "SetForecastCapacityToMaxCapacity"
            case .setmaxcapacityaboveforecastcapacity: return "SetMaxCapacityAboveForecastCapacity"
            case .setmaxcapacitytoforecastcapacity: return "SetMaxCapacityToForecastCapacity"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredictiveScalingMaxCapacityBehavior(rawValue: rawValue) ?? PredictiveScalingMaxCapacityBehavior.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingPlansClientTypes {
    public enum PredictiveScalingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case forecastandscale
        case forecastonly
        case sdkUnknown(Swift.String)

        public static var allCases: [PredictiveScalingMode] {
            return [
                .forecastandscale,
                .forecastonly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .forecastandscale: return "ForecastAndScale"
            case .forecastonly: return "ForecastOnly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredictiveScalingMode(rawValue: rawValue) ?? PredictiveScalingMode.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingPlansClientTypes {
    public enum ScalableDimension: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autoscalinggroupdesiredcapacity
        case dynamodbindexreadcapacityunits
        case dynamodbindexwritecapacityunits
        case dynamodbtablereadcapacityunits
        case dynamodbtablewritecapacityunits
        case ec2spotfleetrequesttargetcapacity
        case ecsservicedesiredcount
        case rdsclusterreadreplicacount
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalableDimension] {
            return [
                .autoscalinggroupdesiredcapacity,
                .dynamodbindexreadcapacityunits,
                .dynamodbindexwritecapacityunits,
                .dynamodbtablereadcapacityunits,
                .dynamodbtablewritecapacityunits,
                .ec2spotfleetrequesttargetcapacity,
                .ecsservicedesiredcount,
                .rdsclusterreadreplicacount,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autoscalinggroupdesiredcapacity: return "autoscaling:autoScalingGroup:DesiredCapacity"
            case .dynamodbindexreadcapacityunits: return "dynamodb:index:ReadCapacityUnits"
            case .dynamodbindexwritecapacityunits: return "dynamodb:index:WriteCapacityUnits"
            case .dynamodbtablereadcapacityunits: return "dynamodb:table:ReadCapacityUnits"
            case .dynamodbtablewritecapacityunits: return "dynamodb:table:WriteCapacityUnits"
            case .ec2spotfleetrequesttargetcapacity: return "ec2:spot-fleet-request:TargetCapacity"
            case .ecsservicedesiredcount: return "ecs:service:DesiredCount"
            case .rdsclusterreadreplicacount: return "rds:cluster:ReadReplicaCount"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalableDimension(rawValue: rawValue) ?? ScalableDimension.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingPlansClientTypes.ScalingInstruction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customizedLoadMetricSpecification = "CustomizedLoadMetricSpecification"
        case disableDynamicScaling = "DisableDynamicScaling"
        case maxCapacity = "MaxCapacity"
        case minCapacity = "MinCapacity"
        case predefinedLoadMetricSpecification = "PredefinedLoadMetricSpecification"
        case predictiveScalingMaxCapacityBehavior = "PredictiveScalingMaxCapacityBehavior"
        case predictiveScalingMaxCapacityBuffer = "PredictiveScalingMaxCapacityBuffer"
        case predictiveScalingMode = "PredictiveScalingMode"
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalingPolicyUpdateBehavior = "ScalingPolicyUpdateBehavior"
        case scheduledActionBufferTime = "ScheduledActionBufferTime"
        case serviceNamespace = "ServiceNamespace"
        case targetTrackingConfigurations = "TargetTrackingConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customizedLoadMetricSpecification = customizedLoadMetricSpecification {
            try encodeContainer.encode(customizedLoadMetricSpecification, forKey: .customizedLoadMetricSpecification)
        }
        if let disableDynamicScaling = disableDynamicScaling {
            try encodeContainer.encode(disableDynamicScaling, forKey: .disableDynamicScaling)
        }
        if let maxCapacity = maxCapacity {
            try encodeContainer.encode(maxCapacity, forKey: .maxCapacity)
        }
        if let minCapacity = minCapacity {
            try encodeContainer.encode(minCapacity, forKey: .minCapacity)
        }
        if let predefinedLoadMetricSpecification = predefinedLoadMetricSpecification {
            try encodeContainer.encode(predefinedLoadMetricSpecification, forKey: .predefinedLoadMetricSpecification)
        }
        if let predictiveScalingMaxCapacityBehavior = predictiveScalingMaxCapacityBehavior {
            try encodeContainer.encode(predictiveScalingMaxCapacityBehavior.rawValue, forKey: .predictiveScalingMaxCapacityBehavior)
        }
        if let predictiveScalingMaxCapacityBuffer = predictiveScalingMaxCapacityBuffer {
            try encodeContainer.encode(predictiveScalingMaxCapacityBuffer, forKey: .predictiveScalingMaxCapacityBuffer)
        }
        if let predictiveScalingMode = predictiveScalingMode {
            try encodeContainer.encode(predictiveScalingMode.rawValue, forKey: .predictiveScalingMode)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let scalingPolicyUpdateBehavior = scalingPolicyUpdateBehavior {
            try encodeContainer.encode(scalingPolicyUpdateBehavior.rawValue, forKey: .scalingPolicyUpdateBehavior)
        }
        if let scheduledActionBufferTime = scheduledActionBufferTime {
            try encodeContainer.encode(scheduledActionBufferTime, forKey: .scheduledActionBufferTime)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
        if let targetTrackingConfigurations = targetTrackingConfigurations {
            var targetTrackingConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetTrackingConfigurations)
            for targettrackingconfigurations0 in targetTrackingConfigurations {
                try targetTrackingConfigurationsContainer.encode(targettrackingconfigurations0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let minCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minCapacity)
        minCapacity = minCapacityDecoded
        let maxCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCapacity)
        maxCapacity = maxCapacityDecoded
        let targetTrackingConfigurationsContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.TargetTrackingConfiguration?].self, forKey: .targetTrackingConfigurations)
        var targetTrackingConfigurationsDecoded0:[AutoScalingPlansClientTypes.TargetTrackingConfiguration]? = nil
        if let targetTrackingConfigurationsContainer = targetTrackingConfigurationsContainer {
            targetTrackingConfigurationsDecoded0 = [AutoScalingPlansClientTypes.TargetTrackingConfiguration]()
            for structure0 in targetTrackingConfigurationsContainer {
                if let structure0 = structure0 {
                    targetTrackingConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        targetTrackingConfigurations = targetTrackingConfigurationsDecoded0
        let predefinedLoadMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification.self, forKey: .predefinedLoadMetricSpecification)
        predefinedLoadMetricSpecification = predefinedLoadMetricSpecificationDecoded
        let customizedLoadMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification.self, forKey: .customizedLoadMetricSpecification)
        customizedLoadMetricSpecification = customizedLoadMetricSpecificationDecoded
        let scheduledActionBufferTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scheduledActionBufferTime)
        scheduledActionBufferTime = scheduledActionBufferTimeDecoded
        let predictiveScalingMaxCapacityBehaviorDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.PredictiveScalingMaxCapacityBehavior.self, forKey: .predictiveScalingMaxCapacityBehavior)
        predictiveScalingMaxCapacityBehavior = predictiveScalingMaxCapacityBehaviorDecoded
        let predictiveScalingMaxCapacityBufferDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .predictiveScalingMaxCapacityBuffer)
        predictiveScalingMaxCapacityBuffer = predictiveScalingMaxCapacityBufferDecoded
        let predictiveScalingModeDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.PredictiveScalingMode.self, forKey: .predictiveScalingMode)
        predictiveScalingMode = predictiveScalingModeDecoded
        let scalingPolicyUpdateBehaviorDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ScalingPolicyUpdateBehavior.self, forKey: .scalingPolicyUpdateBehavior)
        scalingPolicyUpdateBehavior = scalingPolicyUpdateBehaviorDecoded
        let disableDynamicScalingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableDynamicScaling)
        disableDynamicScaling = disableDynamicScalingDecoded
    }
}

extension AutoScalingPlansClientTypes.ScalingInstruction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScalingInstruction(customizedLoadMetricSpecification: \(Swift.String(describing: customizedLoadMetricSpecification)), disableDynamicScaling: \(Swift.String(describing: disableDynamicScaling)), maxCapacity: \(Swift.String(describing: maxCapacity)), minCapacity: \(Swift.String(describing: minCapacity)), predefinedLoadMetricSpecification: \(Swift.String(describing: predefinedLoadMetricSpecification)), predictiveScalingMaxCapacityBehavior: \(Swift.String(describing: predictiveScalingMaxCapacityBehavior)), predictiveScalingMaxCapacityBuffer: \(Swift.String(describing: predictiveScalingMaxCapacityBuffer)), predictiveScalingMode: \(Swift.String(describing: predictiveScalingMode)), resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), scalingPolicyUpdateBehavior: \(Swift.String(describing: scalingPolicyUpdateBehavior)), scheduledActionBufferTime: \(Swift.String(describing: scheduledActionBufferTime)), serviceNamespace: \(Swift.String(describing: serviceNamespace)), targetTrackingConfigurations: \(Swift.String(describing: targetTrackingConfigurations)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Describes a scaling instruction for a scalable resource in a scaling plan. Each scaling
    ///          instruction applies to one resource.</p>
    ///          <p>AWS Auto Scaling creates target tracking scaling policies based on the scaling instructions.
    ///          Target tracking scaling policies adjust the capacity of your scalable resource as required
    ///          to maintain resource utilization at the target value that you specified. </p>
    ///          <p>AWS Auto Scaling also configures predictive scaling for your Amazon EC2 Auto Scaling groups using a subset of
    ///          parameters, including the load metric, the scaling metric, the target value for the scaling
    ///          metric, the predictive scaling mode (forecast and scale or forecast only), and the desired
    ///          behavior when the forecast capacity exceeds the maximum capacity of the resource. With
    ///          predictive scaling, AWS Auto Scaling generates forecasts with traffic predictions for the two days
    ///          ahead and schedules scaling actions that proactively add and remove resource capacity to
    ///          match the forecast. </p>
    ///          <important>
    ///             <p>We recommend waiting a minimum of 24 hours after creating an Auto Scaling group to configure
    ///             predictive scaling. At minimum, there must be 24 hours of historical data to generate a
    ///             forecast. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-best-practices.html">Best Practices for
    ///                AWS Auto Scaling</a> in the <i>AWS Auto Scaling User Guide</i>.</p>
    ///          </important>
    public struct ScalingInstruction: Swift.Equatable {
        /// <p>The customized load metric to use for predictive scaling. This parameter or a <b>PredefinedLoadMetricSpecification</b> is required when configuring
        ///          predictive scaling, and cannot be used otherwise. </p>
        public let customizedLoadMetricSpecification: AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification?
        /// <p>Controls whether dynamic scaling by AWS Auto Scaling is disabled. When dynamic scaling is
        ///          enabled, AWS Auto Scaling creates target tracking scaling policies based on the specified target
        ///          tracking configurations. </p>
        ///          <p>The default is enabled (<code>false</code>). </p>
        public let disableDynamicScaling: Swift.Bool?
        /// <p>The maximum capacity of the resource. The exception to this upper limit is if you
        ///          specify a non-default setting for <b>PredictiveScalingMaxCapacityBehavior</b>. </p>
        public let maxCapacity: Swift.Int?
        /// <p>The minimum capacity of the resource. </p>
        public let minCapacity: Swift.Int?
        /// <p>The predefined load metric to use for predictive scaling. This parameter or a <b>CustomizedLoadMetricSpecification</b> is required when configuring
        ///          predictive scaling, and cannot be used otherwise. </p>
        public let predefinedLoadMetricSpecification: AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification?
        /// <p>Defines the behavior that should be applied if the forecast capacity approaches or
        ///          exceeds the maximum capacity specified for the resource. The default value is
        ///             <code>SetForecastCapacityToMaxCapacity</code>.</p>
        ///          <p>The following are possible values:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>SetForecastCapacityToMaxCapacity</code> - AWS Auto Scaling cannot scale resource
        ///                capacity higher than the maximum capacity. The maximum capacity is enforced as a hard
        ///                limit. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SetMaxCapacityToForecastCapacity</code> - AWS Auto Scaling may scale resource
        ///                capacity higher than the maximum capacity to equal but not exceed forecast
        ///                capacity.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SetMaxCapacityAboveForecastCapacity</code> - AWS Auto Scaling may scale resource
        ///                capacity higher than the maximum capacity by a specified buffer value. The intention
        ///                is to give the target tracking scaling policy extra capacity if unexpected traffic
        ///                occurs. </p>
        ///             </li>
        ///          </ul>
        ///          <p>Only valid when configuring predictive scaling.</p>
        public let predictiveScalingMaxCapacityBehavior: AutoScalingPlansClientTypes.PredictiveScalingMaxCapacityBehavior?
        /// <p>The size of the capacity buffer to use when the forecast capacity is close to or exceeds
        ///          the maximum capacity. The value is specified as a percentage relative to the forecast
        ///          capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if
        ///          the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum
        ///          capacity is 55.</p>
        ///          <p>Only valid when configuring predictive scaling. Required if the <b>PredictiveScalingMaxCapacityBehavior</b> is set to
        ///             <code>SetMaxCapacityAboveForecastCapacity</code>, and cannot be used otherwise.</p>
        ///          <p>The range is 1-100.</p>
        public let predictiveScalingMaxCapacityBuffer: Swift.Int?
        /// <p>The predictive scaling mode. The default value is <code>ForecastAndScale</code>.
        ///          Otherwise, AWS Auto Scaling forecasts capacity but does not create any scheduled scaling actions
        ///          based on the capacity forecast. </p>
        public let predictiveScalingMode: AutoScalingPlansClientTypes.PredictiveScalingMode?
        /// <p>The ID of the resource. This string consists of the resource type and unique
        ///          identifier.</p>
        ///          <ul>
        ///             <li>
        ///                <p>Auto Scaling group - The resource type is <code>autoScalingGroup</code> and the unique identifier is the
        ///                name of the Auto Scaling group. Example: <code>autoScalingGroup/my-asg</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
        ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the resource ID.
        ///                Example: <code>table/my-table</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the resource ID.
        ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        ///                Example: <code>cluster:my-db-cluster</code>.</p>
        ///            </li>
        ///          </ul>
        public let resourceId: Swift.String?
        /// <p>The scalable dimension associated with the resource.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>autoscaling:autoScalingGroup:DesiredCapacity</code> - The desired capacity of an Auto Scaling group.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        ///            </li>
        ///          </ul>
        public let scalableDimension: AutoScalingPlansClientTypes.ScalableDimension?
        /// <p>Controls whether a resource's externally created scaling policies are kept or replaced. </p>
        ///          <p>The default value is <code>KeepExternalPolicies</code>. If the parameter is set to
        ///             <code>ReplaceExternalPolicies</code>, any scaling policies that are external to AWS Auto Scaling
        ///          are deleted and new target tracking scaling policies created. </p>
        ///          <p>Only valid when configuring dynamic scaling. </p>
        ///          <p>Condition: The number of existing policies to be replaced must be less than or equal to
        ///          50. If there are more than 50 policies to be replaced, AWS Auto Scaling keeps all existing policies
        ///          and does not create new ones.</p>
        public let scalingPolicyUpdateBehavior: AutoScalingPlansClientTypes.ScalingPolicyUpdateBehavior?
        /// <p>The amount of time, in seconds, to buffer the run time of scheduled scaling actions when
        ///          scaling out. For example, if the forecast says to add capacity at 10:00 AM, and the buffer
        ///          time is 5 minutes, then the run time of the corresponding scheduled scaling action will be
        ///          9:55 AM. The intention is to give resources time to be provisioned. For example, it can
        ///          take a few minutes to launch an EC2 instance. The actual amount of time required depends on
        ///          several factors, such as the size of the instance and whether there are startup scripts to
        ///          complete. </p>
        ///          <p>The value must be less than the forecast interval duration of 3600 seconds (60 minutes).
        ///          The default is 300 seconds. </p>
        ///          <p>Only valid when configuring predictive scaling. </p>
        public let scheduledActionBufferTime: Swift.Int?
        /// <p>The namespace of the AWS service.</p>
        public let serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace?
        /// <p>The target tracking configurations (up to 10). Each of these structures must specify a
        ///          unique scaling metric and a target value for the metric. </p>
        public let targetTrackingConfigurations: [AutoScalingPlansClientTypes.TargetTrackingConfiguration]?

        public init (
            customizedLoadMetricSpecification: AutoScalingPlansClientTypes.CustomizedLoadMetricSpecification? = nil,
            disableDynamicScaling: Swift.Bool? = nil,
            maxCapacity: Swift.Int? = nil,
            minCapacity: Swift.Int? = nil,
            predefinedLoadMetricSpecification: AutoScalingPlansClientTypes.PredefinedLoadMetricSpecification? = nil,
            predictiveScalingMaxCapacityBehavior: AutoScalingPlansClientTypes.PredictiveScalingMaxCapacityBehavior? = nil,
            predictiveScalingMaxCapacityBuffer: Swift.Int? = nil,
            predictiveScalingMode: AutoScalingPlansClientTypes.PredictiveScalingMode? = nil,
            resourceId: Swift.String? = nil,
            scalableDimension: AutoScalingPlansClientTypes.ScalableDimension? = nil,
            scalingPolicyUpdateBehavior: AutoScalingPlansClientTypes.ScalingPolicyUpdateBehavior? = nil,
            scheduledActionBufferTime: Swift.Int? = nil,
            serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace? = nil,
            targetTrackingConfigurations: [AutoScalingPlansClientTypes.TargetTrackingConfiguration]? = nil
        )
        {
            self.customizedLoadMetricSpecification = customizedLoadMetricSpecification
            self.disableDynamicScaling = disableDynamicScaling
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.predefinedLoadMetricSpecification = predefinedLoadMetricSpecification
            self.predictiveScalingMaxCapacityBehavior = predictiveScalingMaxCapacityBehavior
            self.predictiveScalingMaxCapacityBuffer = predictiveScalingMaxCapacityBuffer
            self.predictiveScalingMode = predictiveScalingMode
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scalingPolicyUpdateBehavior = scalingPolicyUpdateBehavior
            self.scheduledActionBufferTime = scheduledActionBufferTime
            self.serviceNamespace = serviceNamespace
            self.targetTrackingConfigurations = targetTrackingConfigurations
        }
    }

}

extension AutoScalingPlansClientTypes {
    public enum ScalingMetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case albrequestcountpertarget
        case asgaveragecpuutilization
        case asgaveragenetworkin
        case asgaveragenetworkout
        case dynamodbreadcapacityutilization
        case dynamodbwritecapacityutilization
        case ec2spotfleetrequestaveragecpuutilization
        case ec2spotfleetrequestaveragenetworkin
        case ec2spotfleetrequestaveragenetworkout
        case ecsserviceaveragecpuutilization
        case ecsserviceaveragememoryutilization
        case rdsreaderaveragecpuutilization
        case rdsreaderaveragedatabaseconnections
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingMetricType] {
            return [
                .albrequestcountpertarget,
                .asgaveragecpuutilization,
                .asgaveragenetworkin,
                .asgaveragenetworkout,
                .dynamodbreadcapacityutilization,
                .dynamodbwritecapacityutilization,
                .ec2spotfleetrequestaveragecpuutilization,
                .ec2spotfleetrequestaveragenetworkin,
                .ec2spotfleetrequestaveragenetworkout,
                .ecsserviceaveragecpuutilization,
                .ecsserviceaveragememoryutilization,
                .rdsreaderaveragecpuutilization,
                .rdsreaderaveragedatabaseconnections,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
            case .asgaveragecpuutilization: return "ASGAverageCPUUtilization"
            case .asgaveragenetworkin: return "ASGAverageNetworkIn"
            case .asgaveragenetworkout: return "ASGAverageNetworkOut"
            case .dynamodbreadcapacityutilization: return "DynamoDBReadCapacityUtilization"
            case .dynamodbwritecapacityutilization: return "DynamoDBWriteCapacityUtilization"
            case .ec2spotfleetrequestaveragecpuutilization: return "EC2SpotFleetRequestAverageCPUUtilization"
            case .ec2spotfleetrequestaveragenetworkin: return "EC2SpotFleetRequestAverageNetworkIn"
            case .ec2spotfleetrequestaveragenetworkout: return "EC2SpotFleetRequestAverageNetworkOut"
            case .ecsserviceaveragecpuutilization: return "ECSServiceAverageCPUUtilization"
            case .ecsserviceaveragememoryutilization: return "ECSServiceAverageMemoryUtilization"
            case .rdsreaderaveragecpuutilization: return "RDSReaderAverageCPUUtilization"
            case .rdsreaderaveragedatabaseconnections: return "RDSReaderAverageDatabaseConnections"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalingMetricType(rawValue: rawValue) ?? ScalingMetricType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingPlansClientTypes.ScalingPlan: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationSource = "ApplicationSource"
        case creationTime = "CreationTime"
        case scalingInstructions = "ScalingInstructions"
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
        case statusStartTime = "StatusStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationSource = applicationSource {
            try encodeContainer.encode(applicationSource, forKey: .applicationSource)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let scalingInstructions = scalingInstructions {
            var scalingInstructionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scalingInstructions)
            for scalinginstructions0 in scalingInstructions {
                try scalingInstructionsContainer.encode(scalinginstructions0)
            }
        }
        if let scalingPlanName = scalingPlanName {
            try encodeContainer.encode(scalingPlanName, forKey: .scalingPlanName)
        }
        if let scalingPlanVersion = scalingPlanVersion {
            try encodeContainer.encode(scalingPlanVersion, forKey: .scalingPlanVersion)
        }
        if let statusCode = statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
        if let statusMessage = statusMessage {
            try encodeContainer.encode(statusMessage, forKey: .statusMessage)
        }
        if let statusStartTime = statusStartTime {
            try encodeContainer.encode(statusStartTime.timeIntervalSince1970, forKey: .statusStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scalingPlanName)
        scalingPlanName = scalingPlanNameDecoded
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
        let applicationSourceDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ApplicationSource.self, forKey: .applicationSource)
        applicationSource = applicationSourceDecoded
        let scalingInstructionsContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.ScalingInstruction?].self, forKey: .scalingInstructions)
        var scalingInstructionsDecoded0:[AutoScalingPlansClientTypes.ScalingInstruction]? = nil
        if let scalingInstructionsContainer = scalingInstructionsContainer {
            scalingInstructionsDecoded0 = [AutoScalingPlansClientTypes.ScalingInstruction]()
            for structure0 in scalingInstructionsContainer {
                if let structure0 = structure0 {
                    scalingInstructionsDecoded0?.append(structure0)
                }
            }
        }
        scalingInstructions = scalingInstructionsDecoded0
        let statusCodeDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ScalingPlanStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let statusStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .statusStartTime)
        statusStartTime = statusStartTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension AutoScalingPlansClientTypes.ScalingPlan: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScalingPlan(applicationSource: \(Swift.String(describing: applicationSource)), creationTime: \(Swift.String(describing: creationTime)), scalingInstructions: \(Swift.String(describing: scalingInstructions)), scalingPlanName: \(Swift.String(describing: scalingPlanName)), scalingPlanVersion: \(Swift.String(describing: scalingPlanVersion)), statusCode: \(Swift.String(describing: statusCode)), statusMessage: \(Swift.String(describing: statusMessage)), statusStartTime: \(Swift.String(describing: statusStartTime)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Represents a scaling plan.</p>
    public struct ScalingPlan: Swift.Equatable {
        /// <p>A CloudFormation stack or a set of tags. You can create one scaling plan per application
        ///          source.</p>
        public let applicationSource: AutoScalingPlansClientTypes.ApplicationSource?
        /// <p>The Unix time stamp when the scaling plan was created.</p>
        public let creationTime: ClientRuntime.Date?
        /// <p>The scaling instructions.</p>
        public let scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]?
        /// <p>The name of the scaling plan.</p>
        public let scalingPlanName: Swift.String?
        /// <p>The version number of the scaling plan.</p>
        public let scalingPlanVersion: Swift.Int?
        /// <p>The status of the scaling plan.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>Active</code> - The scaling plan is active.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>ActiveWithProblems</code> - The scaling plan is active, but the scaling
        ///                configuration for one or more resources could not be applied.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>CreationInProgress</code> - The scaling plan is being created.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>CreationFailed</code> - The scaling plan could not be created.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DeletionInProgress</code> - The scaling plan is being deleted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DeletionFailed</code> - The scaling plan could not be deleted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UpdateInProgress</code> - The scaling plan is being updated.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UpdateFailed</code> - The scaling plan could not be updated.</p>
        ///             </li>
        ///          </ul>
        public let statusCode: AutoScalingPlansClientTypes.ScalingPlanStatusCode?
        /// <p>A simple message about the current status of the scaling plan.</p>
        public let statusMessage: Swift.String?
        /// <p>The Unix time stamp when the scaling plan entered the current status.</p>
        public let statusStartTime: ClientRuntime.Date?

        public init (
            applicationSource: AutoScalingPlansClientTypes.ApplicationSource? = nil,
            creationTime: ClientRuntime.Date? = nil,
            scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]? = nil,
            scalingPlanName: Swift.String? = nil,
            scalingPlanVersion: Swift.Int? = nil,
            statusCode: AutoScalingPlansClientTypes.ScalingPlanStatusCode? = nil,
            statusMessage: Swift.String? = nil,
            statusStartTime: ClientRuntime.Date? = nil
        )
        {
            self.applicationSource = applicationSource
            self.creationTime = creationTime
            self.scalingInstructions = scalingInstructions
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
            self.statusCode = statusCode
            self.statusMessage = statusMessage
            self.statusStartTime = statusStartTime
        }
    }

}

extension AutoScalingPlansClientTypes.ScalingPlanResource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case scalableDimension = "ScalableDimension"
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
        case scalingPolicies = "ScalingPolicies"
        case scalingStatusCode = "ScalingStatusCode"
        case scalingStatusMessage = "ScalingStatusMessage"
        case serviceNamespace = "ServiceNamespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let scalableDimension = scalableDimension {
            try encodeContainer.encode(scalableDimension.rawValue, forKey: .scalableDimension)
        }
        if let scalingPlanName = scalingPlanName {
            try encodeContainer.encode(scalingPlanName, forKey: .scalingPlanName)
        }
        if let scalingPlanVersion = scalingPlanVersion {
            try encodeContainer.encode(scalingPlanVersion, forKey: .scalingPlanVersion)
        }
        if let scalingPolicies = scalingPolicies {
            var scalingPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scalingPolicies)
            for scalingpolicies0 in scalingPolicies {
                try scalingPoliciesContainer.encode(scalingpolicies0)
            }
        }
        if let scalingStatusCode = scalingStatusCode {
            try encodeContainer.encode(scalingStatusCode.rawValue, forKey: .scalingStatusCode)
        }
        if let scalingStatusMessage = scalingStatusMessage {
            try encodeContainer.encode(scalingStatusMessage, forKey: .scalingStatusMessage)
        }
        if let serviceNamespace = serviceNamespace {
            try encodeContainer.encode(serviceNamespace.rawValue, forKey: .serviceNamespace)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scalingPlanName)
        scalingPlanName = scalingPlanNameDecoded
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
        let serviceNamespaceDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ServiceNamespace.self, forKey: .serviceNamespace)
        serviceNamespace = serviceNamespaceDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let scalableDimensionDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ScalableDimension.self, forKey: .scalableDimension)
        scalableDimension = scalableDimensionDecoded
        let scalingPoliciesContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.ScalingPolicy?].self, forKey: .scalingPolicies)
        var scalingPoliciesDecoded0:[AutoScalingPlansClientTypes.ScalingPolicy]? = nil
        if let scalingPoliciesContainer = scalingPoliciesContainer {
            scalingPoliciesDecoded0 = [AutoScalingPlansClientTypes.ScalingPolicy]()
            for structure0 in scalingPoliciesContainer {
                if let structure0 = structure0 {
                    scalingPoliciesDecoded0?.append(structure0)
                }
            }
        }
        scalingPolicies = scalingPoliciesDecoded0
        let scalingStatusCodeDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ScalingStatusCode.self, forKey: .scalingStatusCode)
        scalingStatusCode = scalingStatusCodeDecoded
        let scalingStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scalingStatusMessage)
        scalingStatusMessage = scalingStatusMessageDecoded
    }
}

extension AutoScalingPlansClientTypes.ScalingPlanResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScalingPlanResource(resourceId: \(Swift.String(describing: resourceId)), scalableDimension: \(Swift.String(describing: scalableDimension)), scalingPlanName: \(Swift.String(describing: scalingPlanName)), scalingPlanVersion: \(Swift.String(describing: scalingPlanVersion)), scalingPolicies: \(Swift.String(describing: scalingPolicies)), scalingStatusCode: \(Swift.String(describing: scalingStatusCode)), scalingStatusMessage: \(Swift.String(describing: scalingStatusMessage)), serviceNamespace: \(Swift.String(describing: serviceNamespace)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Represents a scalable resource.</p>
    public struct ScalingPlanResource: Swift.Equatable {
        /// <p>The ID of the resource. This string consists of the resource type and unique
        ///          identifier.</p>
        ///          <ul>
        ///             <li>
        ///                <p>Auto Scaling group - The resource type is <code>autoScalingGroup</code> and the unique identifier is the
        ///                name of the Auto Scaling group. Example: <code>autoScalingGroup/my-asg</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>ECS service - The resource type is <code>service</code> and the unique identifier is the cluster name
        ///                and service name. Example: <code>service/default/sample-webapp</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Spot Fleet request - The resource type is <code>spot-fleet-request</code> and the unique identifier is the
        ///                Spot Fleet request ID. Example: <code>spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB table - The resource type is <code>table</code> and the unique identifier is the resource ID.
        ///                Example: <code>table/my-table</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>DynamoDB global secondary index - The resource type is <code>index</code> and the unique identifier is the resource ID.
        ///                Example: <code>table/my-table/index/my-table-index</code>.</p>
        ///            </li>
        ///             <li>
        ///                <p>Aurora DB cluster - The resource type is <code>cluster</code> and the unique identifier is the cluster name.
        ///                Example: <code>cluster:my-db-cluster</code>.</p>
        ///            </li>
        ///          </ul>
        public let resourceId: Swift.String?
        /// <p>The scalable dimension for the resource.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>autoscaling:autoScalingGroup:DesiredCapacity</code> - The desired capacity of an Auto Scaling group.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>ecs:service:DesiredCount</code> - The desired task count of an ECS service.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>ec2:spot-fleet-request:TargetCapacity</code> - The target capacity of a Spot Fleet request.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:table:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB table.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:ReadCapacityUnits</code> - The provisioned read capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>dynamodb:index:WriteCapacityUnits</code> - The provisioned write capacity for a DynamoDB global secondary index.</p>
        ///            </li>
        ///             <li>
        ///                <p>
        ///                   <code>rds:cluster:ReadReplicaCount</code> - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.</p>
        ///            </li>
        ///          </ul>
        public let scalableDimension: AutoScalingPlansClientTypes.ScalableDimension?
        /// <p>The name of the scaling plan.</p>
        public let scalingPlanName: Swift.String?
        /// <p>The version number of the scaling plan.</p>
        public let scalingPlanVersion: Swift.Int?
        /// <p>The scaling policies.</p>
        public let scalingPolicies: [AutoScalingPlansClientTypes.ScalingPolicy]?
        /// <p>The scaling status of the resource.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>Active</code> - The scaling configuration is active.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Inactive</code> - The scaling configuration is not active because the
        ///                scaling plan is being created or the scaling configuration could not be applied.
        ///                Check the status message for more information.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>PartiallyActive</code> - The scaling configuration is partially active
        ///                because the scaling plan is being created or deleted or the scaling configuration
        ///                could not be fully applied. Check the status message for more information.</p>
        ///             </li>
        ///          </ul>
        public let scalingStatusCode: AutoScalingPlansClientTypes.ScalingStatusCode?
        /// <p>A simple message about the current scaling status of the resource.</p>
        public let scalingStatusMessage: Swift.String?
        /// <p>The namespace of the AWS service.</p>
        public let serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace?

        public init (
            resourceId: Swift.String? = nil,
            scalableDimension: AutoScalingPlansClientTypes.ScalableDimension? = nil,
            scalingPlanName: Swift.String? = nil,
            scalingPlanVersion: Swift.Int? = nil,
            scalingPolicies: [AutoScalingPlansClientTypes.ScalingPolicy]? = nil,
            scalingStatusCode: AutoScalingPlansClientTypes.ScalingStatusCode? = nil,
            scalingStatusMessage: Swift.String? = nil,
            serviceNamespace: AutoScalingPlansClientTypes.ServiceNamespace? = nil
        )
        {
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
            self.scalingPolicies = scalingPolicies
            self.scalingStatusCode = scalingStatusCode
            self.scalingStatusMessage = scalingStatusMessage
            self.serviceNamespace = serviceNamespace
        }
    }

}

extension AutoScalingPlansClientTypes {
    public enum ScalingPlanStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case activewithproblems
        case creationfailed
        case creationinprogress
        case deletionfailed
        case deletioninprogress
        case updatefailed
        case updateinprogress
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingPlanStatusCode] {
            return [
                .active,
                .activewithproblems,
                .creationfailed,
                .creationinprogress,
                .deletionfailed,
                .deletioninprogress,
                .updatefailed,
                .updateinprogress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .activewithproblems: return "ActiveWithProblems"
            case .creationfailed: return "CreationFailed"
            case .creationinprogress: return "CreationInProgress"
            case .deletionfailed: return "DeletionFailed"
            case .deletioninprogress: return "DeletionInProgress"
            case .updatefailed: return "UpdateFailed"
            case .updateinprogress: return "UpdateInProgress"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalingPlanStatusCode(rawValue: rawValue) ?? ScalingPlanStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingPlansClientTypes.ScalingPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
        case policyType = "PolicyType"
        case targetTrackingConfiguration = "TargetTrackingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyType = policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let targetTrackingConfiguration = targetTrackingConfiguration {
            try encodeContainer.encode(targetTrackingConfiguration, forKey: .targetTrackingConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let targetTrackingConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.TargetTrackingConfiguration.self, forKey: .targetTrackingConfiguration)
        targetTrackingConfiguration = targetTrackingConfigurationDecoded
    }
}

extension AutoScalingPlansClientTypes.ScalingPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScalingPolicy(policyName: \(Swift.String(describing: policyName)), policyType: \(Swift.String(describing: policyType)), targetTrackingConfiguration: \(Swift.String(describing: targetTrackingConfiguration)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Represents a scaling policy.</p>
    public struct ScalingPolicy: Swift.Equatable {
        /// <p>The name of the scaling policy.</p>
        public let policyName: Swift.String?
        /// <p>The type of scaling policy.</p>
        public let policyType: AutoScalingPlansClientTypes.PolicyType?
        /// <p>The target tracking scaling policy. Includes support for predefined or customized
        ///          metrics.</p>
        public let targetTrackingConfiguration: AutoScalingPlansClientTypes.TargetTrackingConfiguration?

        public init (
            policyName: Swift.String? = nil,
            policyType: AutoScalingPlansClientTypes.PolicyType? = nil,
            targetTrackingConfiguration: AutoScalingPlansClientTypes.TargetTrackingConfiguration? = nil
        )
        {
            self.policyName = policyName
            self.policyType = policyType
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }
    }

}

extension AutoScalingPlansClientTypes {
    public enum ScalingPolicyUpdateBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case keepexternalpolicies
        case replaceexternalpolicies
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingPolicyUpdateBehavior] {
            return [
                .keepexternalpolicies,
                .replaceexternalpolicies,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .keepexternalpolicies: return "KeepExternalPolicies"
            case .replaceexternalpolicies: return "ReplaceExternalPolicies"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalingPolicyUpdateBehavior(rawValue: rawValue) ?? ScalingPolicyUpdateBehavior.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingPlansClientTypes {
    public enum ScalingStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case partiallyactive
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingStatusCode] {
            return [
                .active,
                .inactive,
                .partiallyactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case .partiallyactive: return "PartiallyActive"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalingStatusCode(rawValue: rawValue) ?? ScalingStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingPlansClientTypes {
    public enum ServiceNamespace: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autoscaling
        case dynamodb
        case ec2
        case ecs
        case rds
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceNamespace] {
            return [
                .autoscaling,
                .dynamodb,
                .ec2,
                .ecs,
                .rds,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autoscaling: return "autoscaling"
            case .dynamodb: return "dynamodb"
            case .ec2: return "ec2"
            case .ecs: return "ecs"
            case .rds: return "rds"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceNamespace(rawValue: rawValue) ?? ServiceNamespace.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingPlansClientTypes.TagFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for tagvalues0 in values {
                try valuesContainer.encode(tagvalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension AutoScalingPlansClientTypes.TagFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagFilter(key: \(Swift.String(describing: key)), values: \(Swift.String(describing: values)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Represents a tag.</p>
    public struct TagFilter: Swift.Equatable {
        /// <p>The tag key.</p>
        public let key: Swift.String?
        /// <p>The tag values (0 to 20).</p>
        public let values: [Swift.String]?

        public init (
            key: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.key = key
            self.values = values
        }
    }

}

extension AutoScalingPlansClientTypes.TargetTrackingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customizedScalingMetricSpecification = "CustomizedScalingMetricSpecification"
        case disableScaleIn = "DisableScaleIn"
        case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
        case predefinedScalingMetricSpecification = "PredefinedScalingMetricSpecification"
        case scaleInCooldown = "ScaleInCooldown"
        case scaleOutCooldown = "ScaleOutCooldown"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customizedScalingMetricSpecification = customizedScalingMetricSpecification {
            try encodeContainer.encode(customizedScalingMetricSpecification, forKey: .customizedScalingMetricSpecification)
        }
        if let disableScaleIn = disableScaleIn {
            try encodeContainer.encode(disableScaleIn, forKey: .disableScaleIn)
        }
        if let estimatedInstanceWarmup = estimatedInstanceWarmup {
            try encodeContainer.encode(estimatedInstanceWarmup, forKey: .estimatedInstanceWarmup)
        }
        if let predefinedScalingMetricSpecification = predefinedScalingMetricSpecification {
            try encodeContainer.encode(predefinedScalingMetricSpecification, forKey: .predefinedScalingMetricSpecification)
        }
        if let scaleInCooldown = scaleInCooldown {
            try encodeContainer.encode(scaleInCooldown, forKey: .scaleInCooldown)
        }
        if let scaleOutCooldown = scaleOutCooldown {
            try encodeContainer.encode(scaleOutCooldown, forKey: .scaleOutCooldown)
        }
        if let targetValue = targetValue {
            try encodeContainer.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedScalingMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification.self, forKey: .predefinedScalingMetricSpecification)
        predefinedScalingMetricSpecification = predefinedScalingMetricSpecificationDecoded
        let customizedScalingMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification.self, forKey: .customizedScalingMetricSpecification)
        customizedScalingMetricSpecification = customizedScalingMetricSpecificationDecoded
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
        let scaleOutCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scaleOutCooldown)
        scaleOutCooldown = scaleOutCooldownDecoded
        let scaleInCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scaleInCooldown)
        scaleInCooldown = scaleInCooldownDecoded
        let estimatedInstanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedInstanceWarmup)
        estimatedInstanceWarmup = estimatedInstanceWarmupDecoded
    }
}

extension AutoScalingPlansClientTypes.TargetTrackingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TargetTrackingConfiguration(customizedScalingMetricSpecification: \(Swift.String(describing: customizedScalingMetricSpecification)), disableScaleIn: \(Swift.String(describing: disableScaleIn)), estimatedInstanceWarmup: \(Swift.String(describing: estimatedInstanceWarmup)), predefinedScalingMetricSpecification: \(Swift.String(describing: predefinedScalingMetricSpecification)), scaleInCooldown: \(Swift.String(describing: scaleInCooldown)), scaleOutCooldown: \(Swift.String(describing: scaleOutCooldown)), targetValue: \(Swift.String(describing: targetValue)))"}
}

extension AutoScalingPlansClientTypes {
    /// <p>Describes a target tracking configuration to use with AWS Auto Scaling. Used with <a>ScalingInstruction</a> and <a>ScalingPolicy</a>.</p>
    public struct TargetTrackingConfiguration: Swift.Equatable {
        /// <p>A customized metric. You can specify either a predefined metric or a customized metric.
        ///       </p>
        public let customizedScalingMetricSpecification: AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification?
        /// <p>Indicates whether scale in by the target tracking scaling policy is disabled. If the
        ///          value is <code>true</code>, scale in is disabled and the target tracking scaling policy
        ///          doesn't remove capacity from the scalable resource. Otherwise, scale in is enabled and the
        ///          target tracking scaling policy can remove capacity from the scalable resource. </p>
        ///          <p>The default value is <code>false</code>.</p>
        public let disableScaleIn: Swift.Bool?
        /// <p>The estimated time, in seconds, until a newly launched instance can contribute to the
        ///          CloudWatch metrics. This value is used only if the resource is an Auto Scaling group.</p>
        public let estimatedInstanceWarmup: Swift.Int?
        /// <p>A predefined metric. You can specify either a predefined metric or a customized
        ///          metric.</p>
        public let predefinedScalingMetricSpecification: AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification?
        /// <p>The amount of time, in seconds, after a scale-in activity completes before another
        ///          scale-in activity can start. This property is not used if the scalable resource is an Auto Scaling
        ///          group.</p>
        ///          <p>With the <i>scale-in cooldown period</i>, the intention is to scale in
        ///          conservatively to protect your application’s availability, so scale-in activities are blocked
        ///          until the cooldown period has expired. However, if another alarm triggers a scale-out activity
        ///          during the scale-in cooldown period, Auto Scaling scales out the target immediately. In this case,
        ///          the scale-in cooldown period stops and doesn't complete.</p>
        public let scaleInCooldown: Swift.Int?
        /// <p>The amount of time, in seconds, to wait for a previous scale-out activity to take
        ///          effect. This property is not used if the scalable resource is an Auto Scaling
        ///          group.</p>
        ///          <p>With the <i>scale-out cooldown period</i>, the intention is to continuously
        ///          (but not excessively) scale out. After Auto Scaling successfully scales out using a target
        ///          tracking scaling policy, it starts to calculate the cooldown time. The scaling policy won't
        ///          increase the desired capacity again unless either a larger scale out is triggered or the
        ///          cooldown period ends.</p>
        public let scaleOutCooldown: Swift.Int?
        /// <p>The target value for the metric. Although this property accepts numbers of type Double,
        ///          it won't accept values that are either too small or too large. Values must be in the range
        ///          of -2^360 to 2^360.</p>
        public let targetValue: Swift.Double?

        public init (
            customizedScalingMetricSpecification: AutoScalingPlansClientTypes.CustomizedScalingMetricSpecification? = nil,
            disableScaleIn: Swift.Bool? = nil,
            estimatedInstanceWarmup: Swift.Int? = nil,
            predefinedScalingMetricSpecification: AutoScalingPlansClientTypes.PredefinedScalingMetricSpecification? = nil,
            scaleInCooldown: Swift.Int? = nil,
            scaleOutCooldown: Swift.Int? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.customizedScalingMetricSpecification = customizedScalingMetricSpecification
            self.disableScaleIn = disableScaleIn
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.predefinedScalingMetricSpecification = predefinedScalingMetricSpecification
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.targetValue = targetValue
        }
    }

}

public struct UpdateScalingPlanInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateScalingPlanInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateScalingPlanInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateScalingPlanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateScalingPlanInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateScalingPlanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateScalingPlanOutputError>
}

extension UpdateScalingPlanInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateScalingPlanInput(applicationSource: \(Swift.String(describing: applicationSource)), scalingInstructions: \(Swift.String(describing: scalingInstructions)), scalingPlanName: \(Swift.String(describing: scalingPlanName)), scalingPlanVersion: \(Swift.String(describing: scalingPlanVersion)))"}
}

extension UpdateScalingPlanInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationSource = "ApplicationSource"
        case scalingInstructions = "ScalingInstructions"
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationSource = applicationSource {
            try encodeContainer.encode(applicationSource, forKey: .applicationSource)
        }
        if let scalingInstructions = scalingInstructions {
            var scalingInstructionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .scalingInstructions)
            for scalinginstructions0 in scalingInstructions {
                try scalingInstructionsContainer.encode(scalinginstructions0)
            }
        }
        if let scalingPlanName = scalingPlanName {
            try encodeContainer.encode(scalingPlanName, forKey: .scalingPlanName)
        }
        if let scalingPlanVersion = scalingPlanVersion {
            try encodeContainer.encode(scalingPlanVersion, forKey: .scalingPlanVersion)
        }
    }
}

public struct UpdateScalingPlanInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateScalingPlanInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateScalingPlanInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateScalingPlanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateScalingPlanInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateScalingPlanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateScalingPlanOutputError>
}

public struct UpdateScalingPlanInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateScalingPlanInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateScalingPlanInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateScalingPlanOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateScalingPlanInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateScalingPlanOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateScalingPlanOutputError>
}

public struct UpdateScalingPlanInput: Swift.Equatable {
    /// <p>A CloudFormation stack or set of tags.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    public let applicationSource: AutoScalingPlansClientTypes.ApplicationSource?
    /// <p>The scaling instructions.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    public let scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]?
    /// <p>The name of the scaling plan.</p>
    public let scalingPlanName: Swift.String?
    /// <p>The version number of the scaling plan. The only valid value is <code>1</code>.
    ///          Currently, you cannot have multiple scaling plan versions.</p>
    public let scalingPlanVersion: Swift.Int?

    public init (
        applicationSource: AutoScalingPlansClientTypes.ApplicationSource? = nil,
        scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]? = nil,
        scalingPlanName: Swift.String? = nil,
        scalingPlanVersion: Swift.Int? = nil
    )
    {
        self.applicationSource = applicationSource
        self.scalingInstructions = scalingInstructions
        self.scalingPlanName = scalingPlanName
        self.scalingPlanVersion = scalingPlanVersion
    }
}

struct UpdateScalingPlanInputBody: Swift.Equatable {
    public let scalingPlanName: Swift.String?
    public let scalingPlanVersion: Swift.Int?
    public let applicationSource: AutoScalingPlansClientTypes.ApplicationSource?
    public let scalingInstructions: [AutoScalingPlansClientTypes.ScalingInstruction]?
}

extension UpdateScalingPlanInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationSource = "ApplicationSource"
        case scalingInstructions = "ScalingInstructions"
        case scalingPlanName = "ScalingPlanName"
        case scalingPlanVersion = "ScalingPlanVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scalingPlanNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scalingPlanName)
        scalingPlanName = scalingPlanNameDecoded
        let scalingPlanVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingPlanVersion)
        scalingPlanVersion = scalingPlanVersionDecoded
        let applicationSourceDecoded = try containerValues.decodeIfPresent(AutoScalingPlansClientTypes.ApplicationSource.self, forKey: .applicationSource)
        applicationSource = applicationSourceDecoded
        let scalingInstructionsContainer = try containerValues.decodeIfPresent([AutoScalingPlansClientTypes.ScalingInstruction?].self, forKey: .scalingInstructions)
        var scalingInstructionsDecoded0:[AutoScalingPlansClientTypes.ScalingInstruction]? = nil
        if let scalingInstructionsContainer = scalingInstructionsContainer {
            scalingInstructionsDecoded0 = [AutoScalingPlansClientTypes.ScalingInstruction]()
            for structure0 in scalingInstructionsContainer {
                if let structure0 = structure0 {
                    scalingInstructionsDecoded0?.append(structure0)
                }
            }
        }
        scalingInstructions = scalingInstructionsDecoded0
    }
}

extension UpdateScalingPlanOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateScalingPlanOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentUpdateException" : self = .concurrentUpdateException(try ConcurrentUpdateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServiceException" : self = .internalServiceException(try InternalServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ObjectNotFoundException" : self = .objectNotFoundException(try ObjectNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateScalingPlanOutputError: Swift.Error, Swift.Equatable {
    case concurrentUpdateException(ConcurrentUpdateException)
    case internalServiceException(InternalServiceException)
    case objectNotFoundException(ObjectNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateScalingPlanOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateScalingPlanOutputResponse()"}
}

extension UpdateScalingPlanOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateScalingPlanOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateScalingPlanOutputResponseBody: Swift.Equatable {
}

extension UpdateScalingPlanOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationException(message: \(Swift.String(describing: message)))"}
}

extension ValidationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An exception was thrown for a validation issue. Review the parameters provided.</p>
public struct ValidationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
