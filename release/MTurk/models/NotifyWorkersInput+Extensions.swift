// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct NotifyWorkersInputHeadersMiddleware: Middleware {
    public let id: String = "NotifyWorkersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<NotifyWorkersInput>,
                  next: H) -> Swift.Result<OperationOutput<NotifyWorkersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<NotifyWorkersInput>
    public typealias MOutput = OperationOutput<NotifyWorkersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<NotifyWorkersOutputError>
}

public struct NotifyWorkersInputQueryItemMiddleware: Middleware {
    public let id: String = "NotifyWorkersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<NotifyWorkersInput>,
                  next: H) -> Swift.Result<OperationOutput<NotifyWorkersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<NotifyWorkersInput>
    public typealias MOutput = OperationOutput<NotifyWorkersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<NotifyWorkersOutputError>
}

public struct NotifyWorkersInputBodyMiddleware: Middleware {
    public let id: String = "NotifyWorkersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<NotifyWorkersInput>,
                  next: H) -> Swift.Result<OperationOutput<NotifyWorkersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<NotifyWorkersInput>
    public typealias MOutput = OperationOutput<NotifyWorkersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<NotifyWorkersOutputError>
}

extension NotifyWorkersInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case messageText = "MessageText"
        case subject = "Subject"
        case workerIds = "WorkerIds"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let messageText = messageText {
            try encodeContainer.encode(messageText, forKey: .messageText)
        }
        if let subject = subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let workerIds = workerIds {
            var workerIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .workerIds)
            for customeridlist0 in workerIds {
                try workerIdsContainer.encode(customeridlist0)
            }
        }
    }
}
