// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateHITTypeInputHeadersMiddleware: Middleware {
    public let id: String = "CreateHITTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHITTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHITTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHITTypeInput>
    public typealias MOutput = OperationOutput<CreateHITTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHITTypeOutputError>
}

public struct CreateHITTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateHITTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHITTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHITTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHITTypeInput>
    public typealias MOutput = OperationOutput<CreateHITTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHITTypeOutputError>
}

public struct CreateHITTypeInputBodyMiddleware: Middleware {
    public let id: String = "CreateHITTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHITTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHITTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHITTypeInput>
    public typealias MOutput = OperationOutput<CreateHITTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHITTypeOutputError>
}

extension CreateHITTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case assignmentDurationInSeconds = "AssignmentDurationInSeconds"
        case autoApprovalDelayInSeconds = "AutoApprovalDelayInSeconds"
        case description = "Description"
        case keywords = "Keywords"
        case qualificationRequirements = "QualificationRequirements"
        case reward = "Reward"
        case title = "Title"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assignmentDurationInSeconds = assignmentDurationInSeconds {
            try encodeContainer.encode(assignmentDurationInSeconds, forKey: .assignmentDurationInSeconds)
        }
        if let autoApprovalDelayInSeconds = autoApprovalDelayInSeconds {
            try encodeContainer.encode(autoApprovalDelayInSeconds, forKey: .autoApprovalDelayInSeconds)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let keywords = keywords {
            try encodeContainer.encode(keywords, forKey: .keywords)
        }
        if let qualificationRequirements = qualificationRequirements {
            var qualificationRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .qualificationRequirements)
            for qualificationrequirementlist0 in qualificationRequirements {
                try qualificationRequirementsContainer.encode(qualificationrequirementlist0)
            }
        }
        if let reward = reward {
            try encodeContainer.encode(reward, forKey: .reward)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }
}
