// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutSlotTypeInputHeadersMiddleware: Middleware {
    public let id: String = "PutSlotTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSlotTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSlotTypeInput>
    public typealias MOutput = OperationOutput<PutSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSlotTypeOutputError>
}

public struct PutSlotTypeInputQueryItemMiddleware: Middleware {
    public let id: String = "PutSlotTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSlotTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSlotTypeInput>
    public typealias MOutput = OperationOutput<PutSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSlotTypeOutputError>
}

public struct PutSlotTypeInputBodyMiddleware: Middleware {
    public let id: String = "PutSlotTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutSlotTypeInput>,
                  next: H) -> Swift.Result<OperationOutput<PutSlotTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutSlotTypeInput>
    public typealias MOutput = OperationOutput<PutSlotTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutSlotTypeOutputError>
}

extension PutSlotTypeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case checksum
        case createVersion
        case description
        case enumerationValues
        case parentSlotTypeSignature
        case slotTypeConfigurations
        case valueSelectionStrategy
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let checksum = checksum {
            try encodeContainer.encode(checksum, forKey: .checksum)
        }
        if let createVersion = createVersion {
            try encodeContainer.encode(createVersion, forKey: .createVersion)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let enumerationValues = enumerationValues {
            var enumerationValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enumerationValues)
            for enumerationvalues0 in enumerationValues {
                try enumerationValuesContainer.encode(enumerationvalues0)
            }
        }
        if let parentSlotTypeSignature = parentSlotTypeSignature {
            try encodeContainer.encode(parentSlotTypeSignature, forKey: .parentSlotTypeSignature)
        }
        if let slotTypeConfigurations = slotTypeConfigurations {
            var slotTypeConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .slotTypeConfigurations)
            for slottypeconfigurations0 in slotTypeConfigurations {
                try slotTypeConfigurationsContainer.encode(slottypeconfigurations0)
            }
        }
        if let valueSelectionStrategy = valueSelectionStrategy {
            try encodeContainer.encode(valueSelectionStrategy.rawValue, forKey: .valueSelectionStrategy)
        }
    }
}
