// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateNetworkProfileInputHeadersMiddleware: Middleware {
    public let id: String = "CreateNetworkProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkProfileInput>
    public typealias MOutput = OperationOutput<CreateNetworkProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkProfileOutputError>
}

public struct CreateNetworkProfileInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateNetworkProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkProfileInput>
    public typealias MOutput = OperationOutput<CreateNetworkProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkProfileOutputError>
}

public struct CreateNetworkProfileInputBodyMiddleware: Middleware {
    public let id: String = "CreateNetworkProfileInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateNetworkProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateNetworkProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateNetworkProfileInput>
    public typealias MOutput = OperationOutput<CreateNetworkProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateNetworkProfileOutputError>
}

extension CreateNetworkProfileInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case downlinkBandwidthBits
        case downlinkDelayMs
        case downlinkJitterMs
        case downlinkLossPercent
        case name
        case projectArn
        case type
        case uplinkBandwidthBits
        case uplinkDelayMs
        case uplinkJitterMs
        case uplinkLossPercent
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let downlinkBandwidthBits = downlinkBandwidthBits {
            try encodeContainer.encode(downlinkBandwidthBits, forKey: .downlinkBandwidthBits)
        }
        if let downlinkDelayMs = downlinkDelayMs {
            try encodeContainer.encode(downlinkDelayMs, forKey: .downlinkDelayMs)
        }
        if let downlinkJitterMs = downlinkJitterMs {
            try encodeContainer.encode(downlinkJitterMs, forKey: .downlinkJitterMs)
        }
        if downlinkLossPercent != 0 {
            try encodeContainer.encode(downlinkLossPercent, forKey: .downlinkLossPercent)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let projectArn = projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let uplinkBandwidthBits = uplinkBandwidthBits {
            try encodeContainer.encode(uplinkBandwidthBits, forKey: .uplinkBandwidthBits)
        }
        if let uplinkDelayMs = uplinkDelayMs {
            try encodeContainer.encode(uplinkDelayMs, forKey: .uplinkDelayMs)
        }
        if let uplinkJitterMs = uplinkJitterMs {
            try encodeContainer.encode(uplinkJitterMs, forKey: .uplinkJitterMs)
        }
        if uplinkLossPercent != 0 {
            try encodeContainer.encode(uplinkLossPercent, forKey: .uplinkLossPercent)
        }
    }
}
