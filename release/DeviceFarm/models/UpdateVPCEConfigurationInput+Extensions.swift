// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateVPCEConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateVPCEConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateVPCEConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateVPCEConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateVPCEConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateVPCEConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateVPCEConfigurationOutputError>
}

public struct UpdateVPCEConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateVPCEConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateVPCEConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateVPCEConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateVPCEConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateVPCEConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateVPCEConfigurationOutputError>
}

public struct UpdateVPCEConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "UpdateVPCEConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateVPCEConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateVPCEConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateVPCEConfigurationInput>
    public typealias MOutput = OperationOutput<UpdateVPCEConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateVPCEConfigurationOutputError>
}

extension UpdateVPCEConfigurationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case arn
        case serviceDnsName
        case vpceConfigurationDescription
        case vpceConfigurationName
        case vpceServiceName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let serviceDnsName = serviceDnsName {
            try encodeContainer.encode(serviceDnsName, forKey: .serviceDnsName)
        }
        if let vpceConfigurationDescription = vpceConfigurationDescription {
            try encodeContainer.encode(vpceConfigurationDescription, forKey: .vpceConfigurationDescription)
        }
        if let vpceConfigurationName = vpceConfigurationName {
            try encodeContainer.encode(vpceConfigurationName, forKey: .vpceConfigurationName)
        }
        if let vpceServiceName = vpceServiceName {
            try encodeContainer.encode(vpceServiceName, forKey: .vpceServiceName)
        }
    }
}
