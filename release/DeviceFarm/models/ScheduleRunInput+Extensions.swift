// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ScheduleRunInputHeadersMiddleware: Middleware {
    public let id: String = "ScheduleRunInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ScheduleRunInput>,
                  next: H) -> Swift.Result<OperationOutput<ScheduleRunOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ScheduleRunInput>
    public typealias MOutput = OperationOutput<ScheduleRunOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ScheduleRunOutputError>
}

public struct ScheduleRunInputQueryItemMiddleware: Middleware {
    public let id: String = "ScheduleRunInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ScheduleRunInput>,
                  next: H) -> Swift.Result<OperationOutput<ScheduleRunOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ScheduleRunInput>
    public typealias MOutput = OperationOutput<ScheduleRunOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ScheduleRunOutputError>
}

public struct ScheduleRunInputBodyMiddleware: Middleware {
    public let id: String = "ScheduleRunInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ScheduleRunInput>,
                  next: H) -> Swift.Result<OperationOutput<ScheduleRunOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ScheduleRunInput>
    public typealias MOutput = OperationOutput<ScheduleRunOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ScheduleRunOutputError>
}

extension ScheduleRunInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case appArn
        case configuration
        case devicePoolArn
        case deviceSelectionConfiguration
        case executionConfiguration
        case name
        case projectArn
        case test
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appArn = appArn {
            try encodeContainer.encode(appArn, forKey: .appArn)
        }
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let devicePoolArn = devicePoolArn {
            try encodeContainer.encode(devicePoolArn, forKey: .devicePoolArn)
        }
        if let deviceSelectionConfiguration = deviceSelectionConfiguration {
            try encodeContainer.encode(deviceSelectionConfiguration, forKey: .deviceSelectionConfiguration)
        }
        if let executionConfiguration = executionConfiguration {
            try encodeContainer.encode(executionConfiguration, forKey: .executionConfiguration)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let projectArn = projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let test = test {
            try encodeContainer.encode(test, forKey: .test)
        }
    }
}
