// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListTestGridSessionsInputHeadersMiddleware: Middleware {
    public let id: String = "ListTestGridSessionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTestGridSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTestGridSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTestGridSessionsInput>
    public typealias MOutput = OperationOutput<ListTestGridSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTestGridSessionsOutputError>
}

public struct ListTestGridSessionsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTestGridSessionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTestGridSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTestGridSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTestGridSessionsInput>
    public typealias MOutput = OperationOutput<ListTestGridSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTestGridSessionsOutputError>
}

public struct ListTestGridSessionsInputBodyMiddleware: Middleware {
    public let id: String = "ListTestGridSessionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTestGridSessionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTestGridSessionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTestGridSessionsInput>
    public typealias MOutput = OperationOutput<ListTestGridSessionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTestGridSessionsOutputError>
}

extension ListTestGridSessionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case creationTimeAfter
        case creationTimeBefore
        case endTimeAfter
        case endTimeBefore
        case maxResult
        case nextToken
        case projectArn
        case status
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimeAfter = creationTimeAfter {
            try encodeContainer.encode(creationTimeAfter.timeIntervalSince1970, forKey: .creationTimeAfter)
        }
        if let creationTimeBefore = creationTimeBefore {
            try encodeContainer.encode(creationTimeBefore.timeIntervalSince1970, forKey: .creationTimeBefore)
        }
        if let endTimeAfter = endTimeAfter {
            try encodeContainer.encode(endTimeAfter.timeIntervalSince1970, forKey: .endTimeAfter)
        }
        if let endTimeBefore = endTimeBefore {
            try encodeContainer.encode(endTimeBefore.timeIntervalSince1970, forKey: .endTimeBefore)
        }
        if let maxResult = maxResult {
            try encodeContainer.encode(maxResult, forKey: .maxResult)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let projectArn = projectArn {
            try encodeContainer.encode(projectArn, forKey: .projectArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}
