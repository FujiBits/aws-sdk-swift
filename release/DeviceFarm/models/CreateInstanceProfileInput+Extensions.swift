// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateInstanceProfileInputHeadersMiddleware: Middleware {
    public let id: String = "CreateInstanceProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInstanceProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInstanceProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInstanceProfileInput>
    public typealias MOutput = OperationOutput<CreateInstanceProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInstanceProfileOutputError>
}

public struct CreateInstanceProfileInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateInstanceProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInstanceProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInstanceProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInstanceProfileInput>
    public typealias MOutput = OperationOutput<CreateInstanceProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInstanceProfileOutputError>
}

public struct CreateInstanceProfileInputBodyMiddleware: Middleware {
    public let id: String = "CreateInstanceProfileInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateInstanceProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateInstanceProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateInstanceProfileInput>
    public typealias MOutput = OperationOutput<CreateInstanceProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateInstanceProfileOutputError>
}

extension CreateInstanceProfileInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case excludeAppPackagesFromCleanup
        case name
        case packageCleanup
        case rebootAfterUse
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let excludeAppPackagesFromCleanup = excludeAppPackagesFromCleanup {
            var excludeAppPackagesFromCleanupContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludeAppPackagesFromCleanup)
            for packageids0 in excludeAppPackagesFromCleanup {
                try excludeAppPackagesFromCleanupContainer.encode(packageids0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let packageCleanup = packageCleanup {
            try encodeContainer.encode(packageCleanup, forKey: .packageCleanup)
        }
        if let rebootAfterUse = rebootAfterUse {
            try encodeContainer.encode(rebootAfterUse, forKey: .rebootAfterUse)
        }
    }
}
