// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension DeviceFarmClient {
    /// <p>Creates a device pool.</p>
    func createDevicePool(input: CreateDevicePoolInput) async throws -> CreateDevicePoolOutputResponse
    {
        typealias createDevicePoolContinuation = CheckedContinuation<CreateDevicePoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDevicePoolContinuation) in
            createDevicePool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a profile that can be applied to one or more private fleet device
    ///             instances.</p>
    func createInstanceProfile(input: CreateInstanceProfileInput) async throws -> CreateInstanceProfileOutputResponse
    {
        typealias createInstanceProfileContinuation = CheckedContinuation<CreateInstanceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createInstanceProfileContinuation) in
            createInstanceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a network profile.</p>
    func createNetworkProfile(input: CreateNetworkProfileInput) async throws -> CreateNetworkProfileOutputResponse
    {
        typealias createNetworkProfileContinuation = CheckedContinuation<CreateNetworkProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createNetworkProfileContinuation) in
            createNetworkProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a project.</p>
    func createProject(input: CreateProjectInput) async throws -> CreateProjectOutputResponse
    {
        typealias createProjectContinuation = CheckedContinuation<CreateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProjectContinuation) in
            createProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Specifies and starts a remote access session.</p>
    func createRemoteAccessSession(input: CreateRemoteAccessSessionInput) async throws -> CreateRemoteAccessSessionOutputResponse
    {
        typealias createRemoteAccessSessionContinuation = CheckedContinuation<CreateRemoteAccessSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRemoteAccessSessionContinuation) in
            createRemoteAccessSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a Selenium testing project. Projects are used to track <a>TestGridSession</a>
    ///          instances.</p>
    func createTestGridProject(input: CreateTestGridProjectInput) async throws -> CreateTestGridProjectOutputResponse
    {
        typealias createTestGridProjectContinuation = CheckedContinuation<CreateTestGridProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTestGridProjectContinuation) in
            createTestGridProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a signed, short-term URL that can be passed to a Selenium <code>RemoteWebDriver</code>
    ///          constructor.</p>
    func createTestGridUrl(input: CreateTestGridUrlInput) async throws -> CreateTestGridUrlOutputResponse
    {
        typealias createTestGridUrlContinuation = CheckedContinuation<CreateTestGridUrlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTestGridUrlContinuation) in
            createTestGridUrl(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Uploads an app or test scripts.</p>
    func createUpload(input: CreateUploadInput) async throws -> CreateUploadOutputResponse
    {
        typealias createUploadContinuation = CheckedContinuation<CreateUploadOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUploadContinuation) in
            createUpload(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud
    ///             (VPC) endpoint.</p>
    func createVPCEConfiguration(input: CreateVPCEConfigurationInput) async throws -> CreateVPCEConfigurationOutputResponse
    {
        typealias createVPCEConfigurationContinuation = CheckedContinuation<CreateVPCEConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createVPCEConfigurationContinuation) in
            createVPCEConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a device pool given the pool ARN. Does not allow deletion of curated pools
    ///             owned by the system.</p>
    func deleteDevicePool(input: DeleteDevicePoolInput) async throws -> DeleteDevicePoolOutputResponse
    {
        typealias deleteDevicePoolContinuation = CheckedContinuation<DeleteDevicePoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDevicePoolContinuation) in
            deleteDevicePool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a profile that can be applied to one or more private device instances.</p>
    func deleteInstanceProfile(input: DeleteInstanceProfileInput) async throws -> DeleteInstanceProfileOutputResponse
    {
        typealias deleteInstanceProfileContinuation = CheckedContinuation<DeleteInstanceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInstanceProfileContinuation) in
            deleteInstanceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a network profile.</p>
    func deleteNetworkProfile(input: DeleteNetworkProfileInput) async throws -> DeleteNetworkProfileOutputResponse
    {
        typealias deleteNetworkProfileContinuation = CheckedContinuation<DeleteNetworkProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteNetworkProfileContinuation) in
            deleteNetworkProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an AWS Device Farm project, given the project ARN.</p>
    ///         <p> Deleting this resource does not stop an in-progress run.</p>
    func deleteProject(input: DeleteProjectInput) async throws -> DeleteProjectOutputResponse
    {
        typealias deleteProjectContinuation = CheckedContinuation<DeleteProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProjectContinuation) in
            deleteProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a completed remote access session and its results.</p>
    func deleteRemoteAccessSession(input: DeleteRemoteAccessSessionInput) async throws -> DeleteRemoteAccessSessionOutputResponse
    {
        typealias deleteRemoteAccessSessionContinuation = CheckedContinuation<DeleteRemoteAccessSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRemoteAccessSessionContinuation) in
            deleteRemoteAccessSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the run, given the run ARN.</p>
    ///         <p> Deleting this resource does not stop an in-progress run.</p>
    func deleteRun(input: DeleteRunInput) async throws -> DeleteRunOutputResponse
    {
        typealias deleteRunContinuation = CheckedContinuation<DeleteRunOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRunContinuation) in
            deleteRun(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Deletes a Selenium testing project and all content generated under it. </p>
    ///          <important>
    ///             <p>You cannot undo this operation.</p>
    ///          </important>
    ///          <note>
    ///             <p>You cannot delete a project if it has active sessions.</p>
    ///          </note>
    func deleteTestGridProject(input: DeleteTestGridProjectInput) async throws -> DeleteTestGridProjectOutputResponse
    {
        typealias deleteTestGridProjectContinuation = CheckedContinuation<DeleteTestGridProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTestGridProjectContinuation) in
            deleteTestGridProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an upload given the upload ARN.</p>
    func deleteUpload(input: DeleteUploadInput) async throws -> DeleteUploadOutputResponse
    {
        typealias deleteUploadContinuation = CheckedContinuation<DeleteUploadOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUploadContinuation) in
            deleteUpload(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.</p>
    func deleteVPCEConfiguration(input: DeleteVPCEConfigurationInput) async throws -> DeleteVPCEConfigurationOutputResponse
    {
        typealias deleteVPCEConfigurationContinuation = CheckedContinuation<DeleteVPCEConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteVPCEConfigurationContinuation) in
            deleteVPCEConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the number of unmetered iOS or unmetered Android devices that have been purchased by the
    ///             account.</p>
    func getAccountSettings(input: GetAccountSettingsInput) async throws -> GetAccountSettingsOutputResponse
    {
        typealias getAccountSettingsContinuation = CheckedContinuation<GetAccountSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAccountSettingsContinuation) in
            getAccountSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a unique device type.</p>
    func getDevice(input: GetDeviceInput) async throws -> GetDeviceOutputResponse
    {
        typealias getDeviceContinuation = CheckedContinuation<GetDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeviceContinuation) in
            getDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a device instance that belongs to a private device fleet.</p>
    func getDeviceInstance(input: GetDeviceInstanceInput) async throws -> GetDeviceInstanceOutputResponse
    {
        typealias getDeviceInstanceContinuation = CheckedContinuation<GetDeviceInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeviceInstanceContinuation) in
            getDeviceInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a device pool.</p>
    func getDevicePool(input: GetDevicePoolInput) async throws -> GetDevicePoolOutputResponse
    {
        typealias getDevicePoolContinuation = CheckedContinuation<GetDevicePoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDevicePoolContinuation) in
            getDevicePool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about compatibility with a device pool.</p>
    func getDevicePoolCompatibility(input: GetDevicePoolCompatibilityInput) async throws -> GetDevicePoolCompatibilityOutputResponse
    {
        typealias getDevicePoolCompatibilityContinuation = CheckedContinuation<GetDevicePoolCompatibilityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDevicePoolCompatibilityContinuation) in
            getDevicePoolCompatibility(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the specified instance profile.</p>
    func getInstanceProfile(input: GetInstanceProfileInput) async throws -> GetInstanceProfileOutputResponse
    {
        typealias getInstanceProfileContinuation = CheckedContinuation<GetInstanceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInstanceProfileContinuation) in
            getInstanceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a job.</p>
    func getJob(input: GetJobInput) async throws -> GetJobOutputResponse
    {
        typealias getJobContinuation = CheckedContinuation<GetJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getJobContinuation) in
            getJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a network profile.</p>
    func getNetworkProfile(input: GetNetworkProfileInput) async throws -> GetNetworkProfileOutputResponse
    {
        typealias getNetworkProfileContinuation = CheckedContinuation<GetNetworkProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNetworkProfileContinuation) in
            getNetworkProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the current status and future status of all offerings purchased by an AWS account. The response
    ///             indicates how many offerings are currently available and the offerings that will be available in the next
    ///             period. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the
    ///             operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
    func getOfferingStatus(input: GetOfferingStatusInput) async throws -> GetOfferingStatusOutputResponse
    {
        typealias getOfferingStatusContinuation = CheckedContinuation<GetOfferingStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getOfferingStatusContinuation) in
            getOfferingStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a project.</p>
    func getProject(input: GetProjectInput) async throws -> GetProjectOutputResponse
    {
        typealias getProjectContinuation = CheckedContinuation<GetProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getProjectContinuation) in
            getProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a link to a currently running remote access session.</p>
    func getRemoteAccessSession(input: GetRemoteAccessSessionInput) async throws -> GetRemoteAccessSessionOutputResponse
    {
        typealias getRemoteAccessSessionContinuation = CheckedContinuation<GetRemoteAccessSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRemoteAccessSessionContinuation) in
            getRemoteAccessSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a run.</p>
    func getRun(input: GetRunInput) async throws -> GetRunOutputResponse
    {
        typealias getRunContinuation = CheckedContinuation<GetRunOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRunContinuation) in
            getRun(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a suite.</p>
    func getSuite(input: GetSuiteInput) async throws -> GetSuiteOutputResponse
    {
        typealias getSuiteContinuation = CheckedContinuation<GetSuiteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSuiteContinuation) in
            getSuite(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about a test.</p>
    func getTest(input: GetTestInput) async throws -> GetTestOutputResponse
    {
        typealias getTestContinuation = CheckedContinuation<GetTestOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTestContinuation) in
            getTest(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a Selenium testing project.</p>
    func getTestGridProject(input: GetTestGridProjectInput) async throws -> GetTestGridProjectOutputResponse
    {
        typealias getTestGridProjectContinuation = CheckedContinuation<GetTestGridProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTestGridProjectContinuation) in
            getTestGridProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>A session is an instance of a browser created through a <code>RemoteWebDriver</code> with the URL from <a>CreateTestGridUrlResult$url</a>. You can use the following to look up sessions:</p>
    ///          <ul>
    ///             <li>
    ///                <p>The session ARN (<a>GetTestGridSessionRequest$sessionArn</a>).</p>
    ///             </li>
    ///             <li>
    ///                <p>The project ARN and a session ID (<a>GetTestGridSessionRequest$projectArn</a> and <a>GetTestGridSessionRequest$sessionId</a>).</p>
    ///             </li>
    ///          </ul>
    ///          <p></p>
    func getTestGridSession(input: GetTestGridSessionInput) async throws -> GetTestGridSessionOutputResponse
    {
        typealias getTestGridSessionContinuation = CheckedContinuation<GetTestGridSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTestGridSessionContinuation) in
            getTestGridSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about an upload.</p>
    func getUpload(input: GetUploadInput) async throws -> GetUploadOutputResponse
    {
        typealias getUploadContinuation = CheckedContinuation<GetUploadOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUploadContinuation) in
            getUpload(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the configuration settings for your Amazon Virtual Private
    ///             Cloud (VPC) endpoint.</p>
    func getVPCEConfiguration(input: GetVPCEConfigurationInput) async throws -> GetVPCEConfigurationOutputResponse
    {
        typealias getVPCEConfigurationContinuation = CheckedContinuation<GetVPCEConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getVPCEConfigurationContinuation) in
            getVPCEConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Installs an application to the device in a remote access session. For Android
    ///             applications, the file must be in .apk format. For iOS applications, the file must be in
    ///             .ipa format.</p>
    func installToRemoteAccessSession(input: InstallToRemoteAccessSessionInput) async throws -> InstallToRemoteAccessSessionOutputResponse
    {
        typealias installToRemoteAccessSessionContinuation = CheckedContinuation<InstallToRemoteAccessSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: installToRemoteAccessSessionContinuation) in
            installToRemoteAccessSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about artifacts.</p>
    func listArtifacts(input: ListArtifactsInput) async throws -> ListArtifactsOutputResponse
    {
        typealias listArtifactsContinuation = CheckedContinuation<ListArtifactsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listArtifactsContinuation) in
            listArtifacts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the private device instances associated with one or more AWS
    ///             accounts.</p>
    func listDeviceInstances(input: ListDeviceInstancesInput) async throws -> ListDeviceInstancesOutputResponse
    {
        typealias listDeviceInstancesContinuation = CheckedContinuation<ListDeviceInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDeviceInstancesContinuation) in
            listDeviceInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about device pools.</p>
    func listDevicePools(input: ListDevicePoolsInput) async throws -> ListDevicePoolsOutputResponse
    {
        typealias listDevicePoolsContinuation = CheckedContinuation<ListDevicePoolsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDevicePoolsContinuation) in
            listDevicePools(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about unique device types.</p>
    func listDevices(input: ListDevicesInput) async throws -> ListDevicesOutputResponse
    {
        typealias listDevicesContinuation = CheckedContinuation<ListDevicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDevicesContinuation) in
            listDevices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about all the instance profiles in an AWS account.</p>
    func listInstanceProfiles(input: ListInstanceProfilesInput) async throws -> ListInstanceProfilesOutputResponse
    {
        typealias listInstanceProfilesContinuation = CheckedContinuation<ListInstanceProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInstanceProfilesContinuation) in
            listInstanceProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about jobs for a given test run.</p>
    func listJobs(input: ListJobsInput) async throws -> ListJobsOutputResponse
    {
        typealias listJobsContinuation = CheckedContinuation<ListJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listJobsContinuation) in
            listJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the list of available network profiles.</p>
    func listNetworkProfiles(input: ListNetworkProfilesInput) async throws -> ListNetworkProfilesOutputResponse
    {
        typealias listNetworkProfilesContinuation = CheckedContinuation<ListNetworkProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNetworkProfilesContinuation) in
            listNetworkProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of offering promotions. Each offering promotion record contains the ID and description
    ///             of the promotion. The API returns a <code>NotEligible</code> error if the caller is not permitted to invoke
    ///             the operation. Contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you must be able to invoke this operation.</p>
    func listOfferingPromotions(input: ListOfferingPromotionsInput) async throws -> ListOfferingPromotionsOutputResponse
    {
        typealias listOfferingPromotionsContinuation = CheckedContinuation<ListOfferingPromotionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOfferingPromotionsContinuation) in
            listOfferingPromotions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS
    ///             account. The list is paginated and ordered by a descending timestamp (most recent transactions are first).
    ///             The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If
    ///             you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
    func listOfferingTransactions(input: ListOfferingTransactionsInput) async throws -> ListOfferingTransactionsOutputResponse
    {
        typealias listOfferingTransactionsContinuation = CheckedContinuation<ListOfferingTransactionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOfferingTransactionsContinuation) in
            listOfferingTransactions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of products or offerings that the user can manage through the API. Each offering record
    ///             indicates the recurring price per unit and the frequency for that offering. The API returns a
    ///                 <code>NotEligible</code> error if the user is not permitted to invoke the operation.  If you must be
    ///             able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
    func listOfferings(input: ListOfferingsInput) async throws -> ListOfferingsOutputResponse
    {
        typealias listOfferingsContinuation = CheckedContinuation<ListOfferingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOfferingsContinuation) in
            listOfferings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about projects.</p>
    func listProjects(input: ListProjectsInput) async throws -> ListProjectsOutputResponse
    {
        typealias listProjectsContinuation = CheckedContinuation<ListProjectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProjectsContinuation) in
            listProjects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of all currently running remote access sessions.</p>
    func listRemoteAccessSessions(input: ListRemoteAccessSessionsInput) async throws -> ListRemoteAccessSessionsOutputResponse
    {
        typealias listRemoteAccessSessionsContinuation = CheckedContinuation<ListRemoteAccessSessionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRemoteAccessSessionsContinuation) in
            listRemoteAccessSessions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about runs, given an AWS Device Farm project ARN.</p>
    func listRuns(input: ListRunsInput) async throws -> ListRunsOutputResponse
    {
        typealias listRunsContinuation = CheckedContinuation<ListRunsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRunsContinuation) in
            listRuns(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about samples, given an AWS Device Farm job ARN.</p>
    func listSamples(input: ListSamplesInput) async throws -> ListSamplesOutputResponse
    {
        typealias listSamplesContinuation = CheckedContinuation<ListSamplesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSamplesContinuation) in
            listSamples(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about test suites for a given job.</p>
    func listSuites(input: ListSuitesInput) async throws -> ListSuitesOutputResponse
    {
        typealias listSuitesContinuation = CheckedContinuation<ListSuitesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSuitesContinuation) in
            listSuites(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the tags for an AWS Device Farm resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a list of all Selenium testing projects in your account.</p>
    func listTestGridProjects(input: ListTestGridProjectsInput) async throws -> ListTestGridProjectsOutputResponse
    {
        typealias listTestGridProjectsContinuation = CheckedContinuation<ListTestGridProjectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTestGridProjectsContinuation) in
            listTestGridProjects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of the actions taken in a <a>TestGridSession</a>.</p>
    func listTestGridSessionActions(input: ListTestGridSessionActionsInput) async throws -> ListTestGridSessionActionsOutputResponse
    {
        typealias listTestGridSessionActionsContinuation = CheckedContinuation<ListTestGridSessionActionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTestGridSessionActionsContinuation) in
            listTestGridSessionActions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of artifacts created during the session.</p>
    func listTestGridSessionArtifacts(input: ListTestGridSessionArtifactsInput) async throws -> ListTestGridSessionArtifactsOutputResponse
    {
        typealias listTestGridSessionArtifactsContinuation = CheckedContinuation<ListTestGridSessionArtifactsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTestGridSessionArtifactsContinuation) in
            listTestGridSessionArtifacts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of sessions for a <a>TestGridProject</a>.</p>
    func listTestGridSessions(input: ListTestGridSessionsInput) async throws -> ListTestGridSessionsOutputResponse
    {
        typealias listTestGridSessionsContinuation = CheckedContinuation<ListTestGridSessionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTestGridSessionsContinuation) in
            listTestGridSessions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about tests in a given test suite.</p>
    func listTests(input: ListTestsInput) async throws -> ListTestsOutputResponse
    {
        typealias listTestsContinuation = CheckedContinuation<ListTestsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTestsContinuation) in
            listTests(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about unique problems, such as exceptions or crashes.</p>
    ///         <p>Unique problems are defined as a single instance of an error across a run, job, or suite. For example,
    ///             if a call in your application consistently raises an exception (<code>OutOfBoundsException in
    ///                 MyActivity.java:386</code>), <code>ListUniqueProblems</code> returns a single entry instead of many
    ///             individual entries for that exception.</p>
    func listUniqueProblems(input: ListUniqueProblemsInput) async throws -> ListUniqueProblemsOutputResponse
    {
        typealias listUniqueProblemsContinuation = CheckedContinuation<ListUniqueProblemsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUniqueProblemsContinuation) in
            listUniqueProblems(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about uploads, given an AWS Device Farm project ARN.</p>
    func listUploads(input: ListUploadsInput) async throws -> ListUploadsOutputResponse
    {
        typealias listUploadsContinuation = CheckedContinuation<ListUploadsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUploadsContinuation) in
            listUploads(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about all Amazon Virtual Private Cloud (VPC) endpoint
    ///             configurations in the AWS account.</p>
    func listVPCEConfigurations(input: ListVPCEConfigurationsInput) async throws -> ListVPCEConfigurationsOutputResponse
    {
        typealias listVPCEConfigurationsContinuation = CheckedContinuation<ListVPCEConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listVPCEConfigurationsContinuation) in
            listVPCEConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased
    ///             quantity for an offering, unless the renewal was overridden. The API returns a <code>NotEligible</code>
    ///             error if the user is not permitted to invoke the operation. If you must be able to invoke this operation,
    ///             contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
    func purchaseOffering(input: PurchaseOfferingInput) async throws -> PurchaseOfferingOutputResponse
    {
        typealias purchaseOfferingContinuation = CheckedContinuation<PurchaseOfferingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: purchaseOfferingContinuation) in
            purchaseOffering(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Explicitly sets the quantity of devices to renew for an offering, starting from the
    ///                 <code>effectiveDate</code> of the next period. The API returns a <code>NotEligible</code> error if the
    ///             user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.</p>
    func renewOffering(input: RenewOfferingInput) async throws -> RenewOfferingOutputResponse
    {
        typealias renewOfferingContinuation = CheckedContinuation<RenewOfferingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: renewOfferingContinuation) in
            renewOffering(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Schedules a run.</p>
    func scheduleRun(input: ScheduleRunInput) async throws -> ScheduleRunOutputResponse
    {
        typealias scheduleRunContinuation = CheckedContinuation<ScheduleRunOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: scheduleRunContinuation) in
            scheduleRun(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Initiates a stop request for the current job. AWS Device Farm immediately stops the job on the device
    ///             where tests have not started. You are not billed for this device. On the device where tests have started,
    ///             setup suite and teardown suite tests run to completion on the device. You are billed for setup, teardown,
    ///             and any tests that were in progress or already completed.</p>
    func stopJob(input: StopJobInput) async throws -> StopJobOutputResponse
    {
        typealias stopJobContinuation = CheckedContinuation<StopJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopJobContinuation) in
            stopJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Ends a specified remote access session.</p>
    func stopRemoteAccessSession(input: StopRemoteAccessSessionInput) async throws -> StopRemoteAccessSessionOutputResponse
    {
        typealias stopRemoteAccessSessionContinuation = CheckedContinuation<StopRemoteAccessSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopRemoteAccessSessionContinuation) in
            stopRemoteAccessSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Initiates a stop request for the current test run. AWS Device Farm immediately stops the run on devices
    ///             where tests have not started. You are not billed for these devices. On devices where tests have started
    ///             executing, setup suite and teardown suite tests run to completion on those devices. You are billed for
    ///             setup, teardown, and any tests that were in progress or already completed.</p>
    func stopRun(input: StopRunInput) async throws -> StopRunOutputResponse
    {
        typealias stopRunContinuation = CheckedContinuation<StopRunOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopRunContinuation) in
            stopRun(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags
    ///             on a resource are not specified in the request parameters, they are not changed. When a resource is deleted,
    ///             the tags associated with that resource are also deleted.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified tags from a resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates information about a private device instance.</p>
    func updateDeviceInstance(input: UpdateDeviceInstanceInput) async throws -> UpdateDeviceInstanceOutputResponse
    {
        typealias updateDeviceInstanceContinuation = CheckedContinuation<UpdateDeviceInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDeviceInstanceContinuation) in
            updateDeviceInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies the name, description, and rules in a device pool given the attributes and
    ///             the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a
    ///             whole (or not at all).</p>
    func updateDevicePool(input: UpdateDevicePoolInput) async throws -> UpdateDevicePoolOutputResponse
    {
        typealias updateDevicePoolContinuation = CheckedContinuation<UpdateDevicePoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDevicePoolContinuation) in
            updateDevicePool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates information about an existing private device instance profile.</p>
    func updateInstanceProfile(input: UpdateInstanceProfileInput) async throws -> UpdateInstanceProfileOutputResponse
    {
        typealias updateInstanceProfileContinuation = CheckedContinuation<UpdateInstanceProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateInstanceProfileContinuation) in
            updateInstanceProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the network profile.</p>
    func updateNetworkProfile(input: UpdateNetworkProfileInput) async throws -> UpdateNetworkProfileOutputResponse
    {
        typealias updateNetworkProfileContinuation = CheckedContinuation<UpdateNetworkProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateNetworkProfileContinuation) in
            updateNetworkProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies the specified project name, given the project ARN and a new
    ///             name.</p>
    func updateProject(input: UpdateProjectInput) async throws -> UpdateProjectOutputResponse
    {
        typealias updateProjectContinuation = CheckedContinuation<UpdateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProjectContinuation) in
            updateProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Change details of a project.</p>
    func updateTestGridProject(input: UpdateTestGridProjectInput) async throws -> UpdateTestGridProjectOutputResponse
    {
        typealias updateTestGridProjectContinuation = CheckedContinuation<UpdateTestGridProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTestGridProjectContinuation) in
            updateTestGridProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an uploaded test spec.</p>
    func updateUpload(input: UpdateUploadInput) async throws -> UpdateUploadOutputResponse
    {
        typealias updateUploadContinuation = CheckedContinuation<UpdateUploadOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUploadContinuation) in
            updateUpload(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates information about an Amazon Virtual Private Cloud (VPC) endpoint configuration.</p>
    func updateVPCEConfiguration(input: UpdateVPCEConfigurationInput) async throws -> UpdateVPCEConfigurationOutputResponse
    {
        typealias updateVPCEConfigurationContinuation = CheckedContinuation<UpdateVPCEConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateVPCEConfigurationContinuation) in
            updateVPCEConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
