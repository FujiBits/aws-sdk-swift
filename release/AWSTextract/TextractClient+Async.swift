// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension TextractClient {
    /// Analyzes an input document for relationships between detected items.
    ///          The types of information returned are as follows:
    ///
    ///
    ///                Form data (key-value pairs). The related information is returned in two Block objects, each of type KEY_VALUE_SET: a KEY
    ///                   Block object and a VALUE Block object. For example,
    ///                   Name: Ana Silva Carolina contains a key and value.
    ///                   Name: is the key. Ana Silva Carolina is
    ///                the value.
    ///
    ///
    ///                Table and table cell data. A TABLE Block object contains information about a detected table. A CELL
    ///                Block object is returned for each cell in a table.
    ///
    ///
    ///                Lines and words of text. A LINE Block object contains one or more WORD Block objects.
    ///         All lines and words that are detected in the document are returned (including text that doesn't have a
    ///                relationship with the value of FeatureTypes).
    ///
    ///
    ///
    ///          Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.
    ///          A SELECTION_ELEMENT Block object contains information about a selection element,
    ///          including the selection status.
    ///          You can choose which type of analysis to perform by specifying the FeatureTypes list.
    ///
    ///          The output is returned in a list of Block objects.
    ///
    ///             AnalyzeDocument is a synchronous operation. To analyze documents
    ///       asynchronously, use StartDocumentAnalysis.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis.
    func analyzeDocument(input: AnalyzeDocumentInput) async throws -> AnalyzeDocumentOutputResponse
    {
        typealias analyzeDocumentContinuation = CheckedContinuation<AnalyzeDocumentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: analyzeDocumentContinuation) in
            analyzeDocument(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Analyzes an input document for financially related relationships between text.
    ///          Information is returned as ExpenseDocuments and seperated as follows.
    ///
    ///
    ///
    ///                   LineItemGroups- A data set containing LineItems which
    ///          store information about the lines of text, such as an item purchased and its price on a receipt.
    ///
    ///
    ///
    ///                   SummaryFields- Contains all other information a receipt, such as header information
    ///          or the vendors name.
    ///
    ///
    func analyzeExpense(input: AnalyzeExpenseInput) async throws -> AnalyzeExpenseOutputResponse
    {
        typealias analyzeExpenseContinuation = CheckedContinuation<AnalyzeExpenseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: analyzeExpenseContinuation) in
            analyzeExpense(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Detects text in the input document. Amazon Textract can detect lines of text and the
    ///          words that make up a line of text. The input document must be an image in JPEG or PNG
    ///          format. DetectDocumentText returns the detected text in an array of Block objects.
    ///          Each document page has as an associated Block of type PAGE. Each PAGE Block object
    ///          is the parent of LINE Block objects that represent the lines of detected text on a page. A LINE Block object is
    ///          a parent for each word that makes up the line. Words are represented by Block objects of type WORD.
    ///
    ///
    ///             DetectDocumentText is a synchronous operation. To analyze documents
    ///          asynchronously, use StartDocumentTextDetection.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection.
    func detectDocumentText(input: DetectDocumentTextInput) async throws -> DetectDocumentTextOutputResponse
    {
        typealias detectDocumentTextContinuation = CheckedContinuation<DetectDocumentTextOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectDocumentTextContinuation) in
            detectDocumentText(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.
    ///          You start asynchronous text analysis by calling StartDocumentAnalysis, which returns a job identifier
    ///             (JobId). When the text analysis operation finishes, Amazon Textract publishes a
    ///          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to
    ///             StartDocumentAnalysis. To get the results of the text-detection operation,
    ///          first check that the status value published to the Amazon SNS topic is SUCCEEDED.
    ///          If so, call GetDocumentAnalysis, and pass the job identifier
    ///             (JobId) from the initial call to StartDocumentAnalysis.
    ///
    ///             GetDocumentAnalysis returns an array of Block objects. The following
    ///          types of information are returned:
    ///
    ///
    ///                Form data (key-value pairs). The related information is returned in two Block objects, each of type KEY_VALUE_SET: a KEY
    ///             Block object and a VALUE Block object. For example,
    ///             Name: Ana Silva Carolina contains a key and value.
    ///             Name: is the key. Ana Silva Carolina is
    ///             the value.
    ///
    ///
    ///                Table and table cell data. A TABLE Block object contains information about a detected table. A CELL
    ///             Block object is returned for each cell in a table.
    ///
    ///
    ///                Lines and words of text. A LINE Block object contains one or more WORD Block objects.
    ///             All lines and words that are detected in the document are returned (including text that doesn't have a
    ///             relationship with the value of the StartDocumentAnalysis
    ///                   FeatureTypes input parameter).
    ///
    ///
    ///
    ///          Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.
    ///          A SELECTION_ELEMENT Block object contains information about a selection element,
    ///          including the selection status.
    ///
    ///
    ///
    ///          Use the MaxResults parameter to limit the number of blocks that are
    ///          returned. If there are more results than specified in MaxResults, the value of
    ///             NextToken in the operation response contains a pagination token for getting
    ///          the next set of results. To get the next page of results, call
    ///             GetDocumentAnalysis, and populate the NextToken request
    ///          parameter with the token value that's returned from the previous call to
    ///             GetDocumentAnalysis.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis.
    func getDocumentAnalysis(input: GetDocumentAnalysisInput) async throws -> GetDocumentAnalysisOutputResponse
    {
        typealias getDocumentAnalysisContinuation = CheckedContinuation<GetDocumentAnalysisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDocumentAnalysisContinuation) in
            getDocumentAnalysis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the results for an Amazon Textract asynchronous operation that detects text in a document.
    ///      Amazon Textract can detect lines of text and the words that make up a line of text.
    ///          You start asynchronous text detection by calling StartDocumentTextDetection, which returns a job identifier
    ///             (JobId). When the text detection operation finishes, Amazon Textract publishes a
    ///          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to
    ///             StartDocumentTextDetection. To get the results of the text-detection
    ///          operation, first check that the status value published to the Amazon SNS topic is
    ///             SUCCEEDED. If so, call GetDocumentTextDetection, and pass the
    ///          job identifier (JobId) from the initial call to
    ///             StartDocumentTextDetection.
    ///
    ///             GetDocumentTextDetection returns an array of Block
    ///          objects.
    ///          Each document page has as an associated Block of type PAGE. Each PAGE Block object
    ///         is the parent of LINE Block objects that represent the lines of detected text on a page. A LINE Block object is
    ///         a parent for each word that makes up the line. Words are represented by Block objects of type WORD.
    ///
    ///          Use the MaxResults parameter to limit the number of blocks that are returned. If there
    ///          are more results than specified in MaxResults, the value of
    ///             NextToken in the operation response contains a pagination token for getting
    ///          the next set of results. To get the next page of results, call
    ///             GetDocumentTextDetection, and populate the NextToken request
    ///          parameter with the token value that's returned from the previous call to
    ///             GetDocumentTextDetection.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection.
    func getDocumentTextDetection(input: GetDocumentTextDetectionInput) async throws -> GetDocumentTextDetectionOutputResponse
    {
        typealias getDocumentTextDetectionContinuation = CheckedContinuation<GetDocumentTextDetectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDocumentTextDetectionContinuation) in
            getDocumentTextDetection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts the asynchronous analysis of an input document for relationships between detected
    ///          items such as key-value pairs, tables, and selection elements.
    ///
    ///
    ///             StartDocumentAnalysis can analyze text in documents that are in JPEG, PNG, and PDF format. The
    ///          documents are stored in an Amazon S3 bucket. Use DocumentLocation to specify the bucket name and file name
    ///          of the document.
    ///
    ///
    ///             StartDocumentAnalysis returns a job identifier
    ///             (JobId) that you use to get the results of the operation. When text
    ///          analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)
    ///          topic that you specify in NotificationChannel. To get the results of the text
    ///          analysis operation, first check that the status value published to the Amazon SNS topic is
    ///             SUCCEEDED. If so, call GetDocumentAnalysis, and pass
    ///          the job identifier (JobId) from the initial call to
    ///             StartDocumentAnalysis.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis.
    func startDocumentAnalysis(input: StartDocumentAnalysisInput) async throws -> StartDocumentAnalysisOutputResponse
    {
        typealias startDocumentAnalysisContinuation = CheckedContinuation<StartDocumentAnalysisOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startDocumentAnalysisContinuation) in
            startDocumentAnalysis(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of
    ///          text and the words that make up a line of text.
    ///
    ///             StartDocumentTextDetection can analyze text in documents that are in JPEG, PNG, and PDF format. The
    ///         documents are stored in an Amazon S3 bucket. Use DocumentLocation to specify the bucket name and file name
    ///         of the document.
    ///
    ///
    ///             StartTextDetection returns a job identifier
    ///             (JobId) that you use to get the results of the operation. When text
    ///          detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)
    ///          topic that you specify in NotificationChannel. To get the results of the text
    ///          detection operation, first check that the status value published to the Amazon SNS topic is
    ///             SUCCEEDED. If so, call GetDocumentTextDetection, and
    ///          pass the job identifier (JobId) from the initial call to
    ///             StartDocumentTextDetection.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection.
    func startDocumentTextDetection(input: StartDocumentTextDetectionInput) async throws -> StartDocumentTextDetectionOutputResponse
    {
        typealias startDocumentTextDetectionContinuation = CheckedContinuation<StartDocumentTextDetectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startDocumentTextDetectionContinuation) in
            startDocumentTextDetection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
