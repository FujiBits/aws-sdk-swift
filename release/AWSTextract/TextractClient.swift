// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation
import Logging

public class TextractClient {
    public static let clientName = "TextractClient"
    let client: ClientRuntime.SdkHttpClient
    let config: AWSClientRuntime.AWSClientConfiguration
    let serviceName = "Textract"
    let encoder: ClientRuntime.RequestEncoder
    let decoder: ClientRuntime.ResponseDecoder

    public init(config: AWSClientRuntime.AWSClientConfiguration) {
        client = ClientRuntime.SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = ClientRuntime.JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        encoder.nonConformingFloatEncodingStrategy = .convertToString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.encoder = config.encoder ?? encoder
        let decoder = ClientRuntime.JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        decoder.nonConformingFloatDecodingStrategy = .convertFromString(positiveInfinity: "Infinity", negativeInfinity: "-Infinity", nan: "NaN")
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public convenience init(region: Swift.String? = nil) throws {
        let config = try TextractClientConfiguration(region: region)
        self.init(config: config)
    }

    deinit {
        client.close()
    }

    public class TextractClientConfiguration: AWSClientRuntime.AWSClientConfiguration {

        public var clientLogMode: ClientRuntime.ClientLogMode
        public var decoder: ClientRuntime.ResponseDecoder?
        public var encoder: ClientRuntime.RequestEncoder?
        public var httpClientConfiguration: ClientRuntime.HttpClientConfiguration
        public var httpClientEngine: ClientRuntime.HttpClientEngine
        public var idempotencyTokenGenerator: ClientRuntime.IdempotencyTokenGenerator
        public var logger: ClientRuntime.LogAgent
        public var retryer: ClientRuntime.SDKRetryer

        public var credentialsProvider: AWSClientRuntime.CredentialsProvider
        public var endpointResolver: AWSClientRuntime.EndpointResolver
        public var region: Swift.String?
        public var regionResolver: AWSClientRuntime.RegionResolver
        public var signingRegion: Swift.String?

        public init(
            credentialsProvider: AWSClientRuntime.CredentialsProvider? = nil,
            endpointResolver: AWSClientRuntime.EndpointResolver? = nil,
            region: Swift.String? = nil,
            regionResolver: AWSClientRuntime.RegionResolver? = nil,
            signingRegion: Swift.String? = nil,
            runtimeConfig: ClientRuntime.SDKRuntimeConfiguration
        ) throws {
            self.regionResolver = regionResolver ?? DefaultRegionResolver()
            let defaultRegion = self.regionResolver.resolveRegion()
            self.region = region ?? defaultRegion
            self.signingRegion = signingRegion ?? defaultRegion
            self.endpointResolver = endpointResolver ?? DefaultEndpointResolver()
            if let credProvider = credentialsProvider {
                self.credentialsProvider = try AWSClientRuntime.AWSCredentialsProvider.fromCustom(credProvider)
            } else {
                self.credentialsProvider = try AWSClientRuntime.AWSCredentialsProvider.fromChain()
            }
            self.clientLogMode = runtimeConfig.clientLogMode
            self.decoder = runtimeConfig.decoder
            self.encoder = runtimeConfig.encoder
            self.httpClientConfiguration = runtimeConfig.httpClientConfiguration
            self.httpClientEngine = runtimeConfig.httpClientEngine
            self.idempotencyTokenGenerator = runtimeConfig.idempotencyTokenGenerator
            self.logger = runtimeConfig.logger
            self.retryer = runtimeConfig.retryer
        }

        public convenience init(
            credentialsProvider: AWSClientRuntime.CredentialsProvider? = nil,
            endpointResolver: AWSClientRuntime.EndpointResolver? = nil,
            region: Swift.String? = nil,
            regionResolver: AWSClientRuntime.RegionResolver? = nil,
            signingRegion: Swift.String? = nil
        ) throws {
            let defaultRuntimeConfig = try ClientRuntime.DefaultSDKRuntimeConfiguration("TextractClient")
            try self.init(credentialsProvider: credentialsProvider, endpointResolver: endpointResolver, region: region, regionResolver: regionResolver, signingRegion: signingRegion, runtimeConfig: defaultRuntimeConfig)
        }
    }
}

public struct TextractClientLogHandlerFactory: ClientRuntime.SDKLogHandlerFactory {
    public var label = "TextractClient"
    let logLevel: ClientRuntime.SDKLogLevel
    public func construct(label: String) -> LogHandler {
        var handler = StreamLogHandler.standardOutput(label: label)
        handler.logLevel = logLevel.toLoggerType()
        return handler
    }
    public init(logLevel: ClientRuntime.SDKLogLevel) {
        self.logLevel = logLevel
    }
}

extension TextractClient: TextractClientProtocol {
    /// Analyzes an input document for relationships between detected items.
    ///          The types of information returned are as follows:
    ///
    ///
    ///                Form data (key-value pairs). The related information is returned in two Block objects, each of type KEY_VALUE_SET: a KEY
    ///                   Block object and a VALUE Block object. For example,
    ///                   Name: Ana Silva Carolina contains a key and value.
    ///                   Name: is the key. Ana Silva Carolina is
    ///                the value.
    ///
    ///
    ///                Table and table cell data. A TABLE Block object contains information about a detected table. A CELL
    ///                Block object is returned for each cell in a table.
    ///
    ///
    ///                Lines and words of text. A LINE Block object contains one or more WORD Block objects.
    ///         All lines and words that are detected in the document are returned (including text that doesn't have a
    ///                relationship with the value of FeatureTypes).
    ///
    ///
    ///
    ///          Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.
    ///          A SELECTION_ELEMENT Block object contains information about a selection element,
    ///          including the selection status.
    ///          You can choose which type of analysis to perform by specifying the FeatureTypes list.
    ///
    ///          The output is returned in a list of Block objects.
    ///
    ///             AnalyzeDocument is a synchronous operation. To analyze documents
    ///       asynchronously, use StartDocumentAnalysis.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis.
    public func analyzeDocument(input: AnalyzeDocumentInput, completion: @escaping (ClientRuntime.SdkResult<AnalyzeDocumentOutputResponse, AnalyzeDocumentOutputError>) -> Void)
    {
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "analyzeDocument")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<AnalyzeDocumentInput, AnalyzeDocumentOutputResponse, AnalyzeDocumentOutputError>(id: "analyzeDocument")
        operation.initializeStep.intercept(position: .after, middleware: AnalyzeDocumentInputURLPathMiddleware())
        operation.initializeStep.intercept(position: .after, middleware: AnalyzeDocumentInputURLHostMiddleware())
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: AnalyzeDocumentInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: AnalyzeDocumentInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<AnalyzeDocumentInput, AnalyzeDocumentOutputResponse, AnalyzeDocumentOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .after, middleware: AnalyzeDocumentInputBodyMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<AnalyzeDocumentInput, AnalyzeDocumentOutputResponse, AnalyzeDocumentOutputError>(xAmzTarget: "Textract.AnalyzeDocument"))
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// Analyzes an input document for financially related relationships between text.
    ///          Information is returned as ExpenseDocuments and seperated as follows.
    ///
    ///
    ///
    ///                   LineItemGroups- A data set containing LineItems which
    ///          store information about the lines of text, such as an item purchased and its price on a receipt.
    ///
    ///
    ///
    ///                   SummaryFields- Contains all other information a receipt, such as header information
    ///          or the vendors name.
    ///
    ///
    public func analyzeExpense(input: AnalyzeExpenseInput, completion: @escaping (ClientRuntime.SdkResult<AnalyzeExpenseOutputResponse, AnalyzeExpenseOutputError>) -> Void)
    {
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "analyzeExpense")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<AnalyzeExpenseInput, AnalyzeExpenseOutputResponse, AnalyzeExpenseOutputError>(id: "analyzeExpense")
        operation.initializeStep.intercept(position: .after, middleware: AnalyzeExpenseInputURLPathMiddleware())
        operation.initializeStep.intercept(position: .after, middleware: AnalyzeExpenseInputURLHostMiddleware())
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: AnalyzeExpenseInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: AnalyzeExpenseInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<AnalyzeExpenseInput, AnalyzeExpenseOutputResponse, AnalyzeExpenseOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .after, middleware: AnalyzeExpenseInputBodyMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<AnalyzeExpenseInput, AnalyzeExpenseOutputResponse, AnalyzeExpenseOutputError>(xAmzTarget: "Textract.AnalyzeExpense"))
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// Detects text in the input document. Amazon Textract can detect lines of text and the
    ///          words that make up a line of text. The input document must be an image in JPEG or PNG
    ///          format. DetectDocumentText returns the detected text in an array of Block objects.
    ///          Each document page has as an associated Block of type PAGE. Each PAGE Block object
    ///          is the parent of LINE Block objects that represent the lines of detected text on a page. A LINE Block object is
    ///          a parent for each word that makes up the line. Words are represented by Block objects of type WORD.
    ///
    ///
    ///             DetectDocumentText is a synchronous operation. To analyze documents
    ///          asynchronously, use StartDocumentTextDetection.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection.
    public func detectDocumentText(input: DetectDocumentTextInput, completion: @escaping (ClientRuntime.SdkResult<DetectDocumentTextOutputResponse, DetectDocumentTextOutputError>) -> Void)
    {
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "detectDocumentText")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<DetectDocumentTextInput, DetectDocumentTextOutputResponse, DetectDocumentTextOutputError>(id: "detectDocumentText")
        operation.initializeStep.intercept(position: .after, middleware: DetectDocumentTextInputURLPathMiddleware())
        operation.initializeStep.intercept(position: .after, middleware: DetectDocumentTextInputURLHostMiddleware())
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: DetectDocumentTextInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: DetectDocumentTextInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<DetectDocumentTextInput, DetectDocumentTextOutputResponse, DetectDocumentTextOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .after, middleware: DetectDocumentTextInputBodyMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<DetectDocumentTextInput, DetectDocumentTextOutputResponse, DetectDocumentTextOutputError>(xAmzTarget: "Textract.DetectDocumentText"))
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.
    ///          You start asynchronous text analysis by calling StartDocumentAnalysis, which returns a job identifier
    ///             (JobId). When the text analysis operation finishes, Amazon Textract publishes a
    ///          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to
    ///             StartDocumentAnalysis. To get the results of the text-detection operation,
    ///          first check that the status value published to the Amazon SNS topic is SUCCEEDED.
    ///          If so, call GetDocumentAnalysis, and pass the job identifier
    ///             (JobId) from the initial call to StartDocumentAnalysis.
    ///
    ///             GetDocumentAnalysis returns an array of Block objects. The following
    ///          types of information are returned:
    ///
    ///
    ///                Form data (key-value pairs). The related information is returned in two Block objects, each of type KEY_VALUE_SET: a KEY
    ///             Block object and a VALUE Block object. For example,
    ///             Name: Ana Silva Carolina contains a key and value.
    ///             Name: is the key. Ana Silva Carolina is
    ///             the value.
    ///
    ///
    ///                Table and table cell data. A TABLE Block object contains information about a detected table. A CELL
    ///             Block object is returned for each cell in a table.
    ///
    ///
    ///                Lines and words of text. A LINE Block object contains one or more WORD Block objects.
    ///             All lines and words that are detected in the document are returned (including text that doesn't have a
    ///             relationship with the value of the StartDocumentAnalysis
    ///                   FeatureTypes input parameter).
    ///
    ///
    ///
    ///          Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables.
    ///          A SELECTION_ELEMENT Block object contains information about a selection element,
    ///          including the selection status.
    ///
    ///
    ///
    ///          Use the MaxResults parameter to limit the number of blocks that are
    ///          returned. If there are more results than specified in MaxResults, the value of
    ///             NextToken in the operation response contains a pagination token for getting
    ///          the next set of results. To get the next page of results, call
    ///             GetDocumentAnalysis, and populate the NextToken request
    ///          parameter with the token value that's returned from the previous call to
    ///             GetDocumentAnalysis.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis.
    public func getDocumentAnalysis(input: GetDocumentAnalysisInput, completion: @escaping (ClientRuntime.SdkResult<GetDocumentAnalysisOutputResponse, GetDocumentAnalysisOutputError>) -> Void)
    {
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getDocumentAnalysis")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<GetDocumentAnalysisInput, GetDocumentAnalysisOutputResponse, GetDocumentAnalysisOutputError>(id: "getDocumentAnalysis")
        operation.initializeStep.intercept(position: .after, middleware: GetDocumentAnalysisInputURLPathMiddleware())
        operation.initializeStep.intercept(position: .after, middleware: GetDocumentAnalysisInputURLHostMiddleware())
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: GetDocumentAnalysisInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: GetDocumentAnalysisInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<GetDocumentAnalysisInput, GetDocumentAnalysisOutputResponse, GetDocumentAnalysisOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .after, middleware: GetDocumentAnalysisInputBodyMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<GetDocumentAnalysisInput, GetDocumentAnalysisOutputResponse, GetDocumentAnalysisOutputError>(xAmzTarget: "Textract.GetDocumentAnalysis"))
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// Gets the results for an Amazon Textract asynchronous operation that detects text in a document.
    ///      Amazon Textract can detect lines of text and the words that make up a line of text.
    ///          You start asynchronous text detection by calling StartDocumentTextDetection, which returns a job identifier
    ///             (JobId). When the text detection operation finishes, Amazon Textract publishes a
    ///          completion status to the Amazon Simple Notification Service (Amazon SNS) topic that's registered in the initial call to
    ///             StartDocumentTextDetection. To get the results of the text-detection
    ///          operation, first check that the status value published to the Amazon SNS topic is
    ///             SUCCEEDED. If so, call GetDocumentTextDetection, and pass the
    ///          job identifier (JobId) from the initial call to
    ///             StartDocumentTextDetection.
    ///
    ///             GetDocumentTextDetection returns an array of Block
    ///          objects.
    ///          Each document page has as an associated Block of type PAGE. Each PAGE Block object
    ///         is the parent of LINE Block objects that represent the lines of detected text on a page. A LINE Block object is
    ///         a parent for each word that makes up the line. Words are represented by Block objects of type WORD.
    ///
    ///          Use the MaxResults parameter to limit the number of blocks that are returned. If there
    ///          are more results than specified in MaxResults, the value of
    ///             NextToken in the operation response contains a pagination token for getting
    ///          the next set of results. To get the next page of results, call
    ///             GetDocumentTextDetection, and populate the NextToken request
    ///          parameter with the token value that's returned from the previous call to
    ///             GetDocumentTextDetection.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection.
    public func getDocumentTextDetection(input: GetDocumentTextDetectionInput, completion: @escaping (ClientRuntime.SdkResult<GetDocumentTextDetectionOutputResponse, GetDocumentTextDetectionOutputError>) -> Void)
    {
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getDocumentTextDetection")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<GetDocumentTextDetectionInput, GetDocumentTextDetectionOutputResponse, GetDocumentTextDetectionOutputError>(id: "getDocumentTextDetection")
        operation.initializeStep.intercept(position: .after, middleware: GetDocumentTextDetectionInputURLPathMiddleware())
        operation.initializeStep.intercept(position: .after, middleware: GetDocumentTextDetectionInputURLHostMiddleware())
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: GetDocumentTextDetectionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: GetDocumentTextDetectionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<GetDocumentTextDetectionInput, GetDocumentTextDetectionOutputResponse, GetDocumentTextDetectionOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .after, middleware: GetDocumentTextDetectionInputBodyMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<GetDocumentTextDetectionInput, GetDocumentTextDetectionOutputResponse, GetDocumentTextDetectionOutputError>(xAmzTarget: "Textract.GetDocumentTextDetection"))
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// Starts the asynchronous analysis of an input document for relationships between detected
    ///          items such as key-value pairs, tables, and selection elements.
    ///
    ///
    ///             StartDocumentAnalysis can analyze text in documents that are in JPEG, PNG, and PDF format. The
    ///          documents are stored in an Amazon S3 bucket. Use DocumentLocation to specify the bucket name and file name
    ///          of the document.
    ///
    ///
    ///             StartDocumentAnalysis returns a job identifier
    ///             (JobId) that you use to get the results of the operation. When text
    ///          analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)
    ///          topic that you specify in NotificationChannel. To get the results of the text
    ///          analysis operation, first check that the status value published to the Amazon SNS topic is
    ///             SUCCEEDED. If so, call GetDocumentAnalysis, and pass
    ///          the job identifier (JobId) from the initial call to
    ///             StartDocumentAnalysis.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html">Document Text Analysis.
    public func startDocumentAnalysis(input: StartDocumentAnalysisInput, completion: @escaping (ClientRuntime.SdkResult<StartDocumentAnalysisOutputResponse, StartDocumentAnalysisOutputError>) -> Void)
    {
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startDocumentAnalysis")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<StartDocumentAnalysisInput, StartDocumentAnalysisOutputResponse, StartDocumentAnalysisOutputError>(id: "startDocumentAnalysis")
        operation.initializeStep.intercept(position: .after, middleware: StartDocumentAnalysisInputURLPathMiddleware())
        operation.initializeStep.intercept(position: .after, middleware: StartDocumentAnalysisInputURLHostMiddleware())
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: StartDocumentAnalysisInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: StartDocumentAnalysisInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<StartDocumentAnalysisInput, StartDocumentAnalysisOutputResponse, StartDocumentAnalysisOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .after, middleware: StartDocumentAnalysisInputBodyMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<StartDocumentAnalysisInput, StartDocumentAnalysisOutputResponse, StartDocumentAnalysisOutputError>(xAmzTarget: "Textract.StartDocumentAnalysis"))
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /// Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of
    ///          text and the words that make up a line of text.
    ///
    ///             StartDocumentTextDetection can analyze text in documents that are in JPEG, PNG, and PDF format. The
    ///         documents are stored in an Amazon S3 bucket. Use DocumentLocation to specify the bucket name and file name
    ///         of the document.
    ///
    ///
    ///             StartTextDetection returns a job identifier
    ///             (JobId) that you use to get the results of the operation. When text
    ///          detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)
    ///          topic that you specify in NotificationChannel. To get the results of the text
    ///          detection operation, first check that the status value published to the Amazon SNS topic is
    ///             SUCCEEDED. If so, call GetDocumentTextDetection, and
    ///          pass the job identifier (JobId) from the initial call to
    ///             StartDocumentTextDetection.
    ///          For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html">Document Text Detection.
    public func startDocumentTextDetection(input: StartDocumentTextDetectionInput, completion: @escaping (ClientRuntime.SdkResult<StartDocumentTextDetectionOutputResponse, StartDocumentTextDetectionOutputError>) -> Void)
    {
        let context = ClientRuntime.HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "startDocumentTextDetection")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withLogger(value: config.logger)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withSigningName(value: "textract")
                      .withSigningRegion(value: config.signingRegion)
        var operation = ClientRuntime.OperationStack<StartDocumentTextDetectionInput, StartDocumentTextDetectionOutputResponse, StartDocumentTextDetectionOutputError>(id: "startDocumentTextDetection")
        operation.initializeStep.intercept(position: .after, middleware: StartDocumentTextDetectionInputURLPathMiddleware())
        operation.initializeStep.intercept(position: .after, middleware: StartDocumentTextDetectionInputURLHostMiddleware())
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.buildStep.intercept(position: .before, middleware: AWSClientRuntime.UserAgentMiddleware(metadata: AWSClientRuntime.AWSUserAgentMetadata.fromEnv(apiMetadata: AWSClientRuntime.APIMetadata(serviceId: serviceName, version: "1.0"))))
        operation.serializeStep.intercept(position: .after, middleware: StartDocumentTextDetectionInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: StartDocumentTextDetectionInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .after, middleware: ContentTypeMiddleware<StartDocumentTextDetectionInput, StartDocumentTextDetectionOutputResponse, StartDocumentTextDetectionOutputError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .after, middleware: StartDocumentTextDetectionInputBodyMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: AWSClientRuntime.XAmzTargetMiddleware<StartDocumentTextDetectionInput, StartDocumentTextDetectionOutputResponse, StartDocumentTextDetectionOutputError>(xAmzTarget: "Textract.StartDocumentTextDetection"))
        operation.finalizeStep.intercept(position: .before, middleware: ClientRuntime.ContentLengthMiddleware())
        operation.finalizeStep.intercept(position: .after, middleware: AWSClientRuntime.RetryerMiddleware(retryer: config.retryer))
        let sigv4Config = AWSClientRuntime.SigV4Config(unsignedBody: false)
        operation.finalizeStep.intercept(position: .before, middleware: AWSClientRuntime.SigV4Middleware(config: sigv4Config))
        operation.deserializeStep.intercept(position: .before, middleware: ClientRuntime.LoggerMiddleware(clientLogMode: config.clientLogMode))
        operation.deserializeStep.intercept(position: .after, middleware: ClientRuntime.DeserializeMiddleware())
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
