// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension LakeFormationClient {
    /// Attaches one or more tags to an existing resource.
    func addLFTagsToResource(input: AddLFTagsToResourceInput) async throws -> AddLFTagsToResourceOutputResponse
    {
        typealias addLFTagsToResourceContinuation = CheckedContinuation<AddLFTagsToResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addLFTagsToResourceContinuation) in
            addLFTagsToResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Batch operation to grant permissions to the principal.
    func batchGrantPermissions(input: BatchGrantPermissionsInput) async throws -> BatchGrantPermissionsOutputResponse
    {
        typealias batchGrantPermissionsContinuation = CheckedContinuation<BatchGrantPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchGrantPermissionsContinuation) in
            batchGrantPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Batch operation to revoke permissions from the principal.
    func batchRevokePermissions(input: BatchRevokePermissionsInput) async throws -> BatchRevokePermissionsOutputResponse
    {
        typealias batchRevokePermissionsContinuation = CheckedContinuation<BatchRevokePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchRevokePermissionsContinuation) in
            batchRevokePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a tag with the specified name and values.
    func createLFTag(input: CreateLFTagInput) async throws -> CreateLFTagOutputResponse
    {
        typealias createLFTagContinuation = CheckedContinuation<CreateLFTagOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createLFTagContinuation) in
            createLFTag(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified tag key name. If the attribute key does not exist or the tag does not exist, then the operation will not do anything. If the attribute key exists, then the operation checks if any resources are tagged with this attribute key, if yes, the API throws a 400 Exception with the message "Delete not allowed" as the tag key is still attached with resources. You can consider untagging resources with this tag key.
    func deleteLFTag(input: DeleteLFTagInput) async throws -> DeleteLFTagOutputResponse
    {
        typealias deleteLFTagContinuation = CheckedContinuation<DeleteLFTagOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLFTagContinuation) in
            deleteLFTag(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deregisters the resource as managed by the Data Catalog.
    /// 	
    ///          When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.
    func deregisterResource(input: DeregisterResourceInput) async throws -> DeregisterResourceOutputResponse
    {
        typealias deregisterResourceContinuation = CheckedContinuation<DeregisterResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterResourceContinuation) in
            deregisterResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the current data access role for the given resource registered in AWS Lake Formation.
    func describeResource(input: DescribeResourceInput) async throws -> DescribeResourceOutputResponse
    {
        typealias describeResourceContinuation = CheckedContinuation<DescribeResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeResourceContinuation) in
            describeResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the list of the data lake administrators of a Lake Formation-managed data lake.
    func getDataLakeSettings(input: GetDataLakeSettingsInput) async throws -> GetDataLakeSettingsOutputResponse
    {
        typealias getDataLakeSettingsContinuation = CheckedContinuation<GetDataLakeSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDataLakeSettingsContinuation) in
            getDataLakeSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the Lake Formation permissions for a specified table or database resource located
    ///       at a path in Amazon S3. GetEffectivePermissionsForPath will not return databases and tables if the catalog is encrypted.
    func getEffectivePermissionsForPath(input: GetEffectivePermissionsForPathInput) async throws -> GetEffectivePermissionsForPathOutputResponse
    {
        typealias getEffectivePermissionsForPathContinuation = CheckedContinuation<GetEffectivePermissionsForPathOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEffectivePermissionsForPathContinuation) in
            getEffectivePermissionsForPath(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a tag definition.
    func getLFTag(input: GetLFTagInput) async throws -> GetLFTagOutputResponse
    {
        typealias getLFTagContinuation = CheckedContinuation<GetLFTagOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLFTagContinuation) in
            getLFTag(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the tags applied to a resource.
    func getResourceLFTags(input: GetResourceLFTagsInput) async throws -> GetResourceLFTagsOutputResponse
    {
        typealias getResourceLFTagsContinuation = CheckedContinuation<GetResourceLFTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourceLFTagsContinuation) in
            getResourceLFTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.
    /// 	        For information about permissions, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/security-data-access.html">Security and Access Control to Metadata and Data.
    func grantPermissions(input: GrantPermissionsInput) async throws -> GrantPermissionsOutputResponse
    {
        typealias grantPermissionsContinuation = CheckedContinuation<GrantPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: grantPermissionsContinuation) in
            grantPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists tags that the requester has permission to view.
    func listLFTags(input: ListLFTagsInput) async throws -> ListLFTagsOutputResponse
    {
        typealias listLFTagsContinuation = CheckedContinuation<ListLFTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLFTagsContinuation) in
            listLFTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER.
    /// 	        This operation returns only those permissions that have been explicitly granted.
    /// 	        For information about permissions, see <a href="https://docs-aws.amazon.com/lake-formation/latest/dg/security-data-access.html">Security and Access Control to Metadata and Data.
    func listPermissions(input: ListPermissionsInput) async throws -> ListPermissionsOutputResponse
    {
        typealias listPermissionsContinuation = CheckedContinuation<ListPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPermissionsContinuation) in
            listPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the resources registered to be managed by the Data Catalog.
    func listResources(input: ListResourcesInput) async throws -> ListResourcesOutputResponse
    {
        typealias listResourcesContinuation = CheckedContinuation<ListResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourcesContinuation) in
            listResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see <a href="https://docs.aws.amazon.com/lake-formation/latest/dg/lake-formation-permissions.html">Granting Lake Formation Permissions.
    /// 	
    /// 	        This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.
    func putDataLakeSettings(input: PutDataLakeSettingsInput) async throws -> PutDataLakeSettingsOutputResponse
    {
        typealias putDataLakeSettingsContinuation = CheckedContinuation<PutDataLakeSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putDataLakeSettingsContinuation) in
            putDataLakeSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers the resource as managed by the Data Catalog.
    /// 	
    /// 	        To add or update data, Lake Formation needs read/write access to the chosen Amazon S3 path. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy.
    ///
    ///          The following request registers a new location and gives AWS Lake Formation permission to use the service-linked role to access that location.
    ///
    ///
    ///             ResourceArn = arn:aws:s3:::my-bucket
    /// UseServiceLinkedRole = true
    ///
    /// 	
    /// 	        If UseServiceLinkedRole is not set to true, you must provide or set the RoleArn:
    /// 	
    ///
    ///             arn:aws:iam::12345:role/my-data-access-role
    ///
    func registerResource(input: RegisterResourceInput) async throws -> RegisterResourceOutputResponse
    {
        typealias registerResourceContinuation = CheckedContinuation<RegisterResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerResourceContinuation) in
            registerResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a tag from the resource. Only database, table, or tableWithColumns resource are allowed. To tag columns, use the column inclusion list in tableWithColumns to specify column input.
    func removeLFTagsFromResource(input: RemoveLFTagsFromResourceInput) async throws -> RemoveLFTagsFromResourceOutputResponse
    {
        typealias removeLFTagsFromResourceContinuation = CheckedContinuation<RemoveLFTagsFromResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeLFTagsFromResourceContinuation) in
            removeLFTagsFromResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.
    func revokePermissions(input: RevokePermissionsInput) async throws -> RevokePermissionsOutputResponse
    {
        typealias revokePermissionsContinuation = CheckedContinuation<RevokePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: revokePermissionsContinuation) in
            revokePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation allows a search on DATABASE resources by TagCondition. This operation is used by admins who want to grant user permissions on certain TagConditions. Before making a grant, the admin can use SearchDatabasesByTags to find all resources where the given TagConditions are valid to verify whether the returned resources can be shared.
    func searchDatabasesByLFTags(input: SearchDatabasesByLFTagsInput) async throws -> SearchDatabasesByLFTagsOutputResponse
    {
        typealias searchDatabasesByLFTagsContinuation = CheckedContinuation<SearchDatabasesByLFTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchDatabasesByLFTagsContinuation) in
            searchDatabasesByLFTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation allows a search on TABLE resources by LFTags. This will be used by admins who want to grant user permissions on certain LFTags. Before making a grant, the admin can use SearchTablesByLFTags to find all resources where the given LFTags are valid to verify whether the returned resources can be shared.
    func searchTablesByLFTags(input: SearchTablesByLFTagsInput) async throws -> SearchTablesByLFTagsOutputResponse
    {
        typealias searchTablesByLFTagsContinuation = CheckedContinuation<SearchTablesByLFTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchTablesByLFTagsContinuation) in
            searchTablesByLFTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the list of possible values for the specified tag key. If the tag does not exist, the operation throws an EntityNotFoundException. The values in the delete key values will be deleted from list of possible values. If any value in the delete key values is attached to a resource, then API errors out with a 400 Exception - "Update not allowed". Untag the attribute before deleting the tag key's value.
    func updateLFTag(input: UpdateLFTagInput) async throws -> UpdateLFTagOutputResponse
    {
        typealias updateLFTagContinuation = CheckedContinuation<UpdateLFTagOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLFTagContinuation) in
            updateLFTag(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the data access role used for vending access to the given (registered) resource in AWS Lake Formation.
    func updateResource(input: UpdateResourceInput) async throws -> UpdateResourceOutputResponse
    {
        typealias updateResourceContinuation = CheckedContinuation<UpdateResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateResourceContinuation) in
            updateResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
