// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension Inspector2Client {
    /// Associates an Amazon Web Services account with an Amazon Inspector delegated administrator.
    func associateMember(input: AssociateMemberInput) async throws -> AssociateMemberOutputResponse
    {
        typealias associateMemberContinuation = CheckedContinuation<AssociateMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateMemberContinuation) in
            associateMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the Amazon Inspector status of multiple Amazon Web Services accounts within your environment.
    func batchGetAccountStatus(input: BatchGetAccountStatusInput) async throws -> BatchGetAccountStatusOutputResponse
    {
        typealias batchGetAccountStatusContinuation = CheckedContinuation<BatchGetAccountStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchGetAccountStatusContinuation) in
            batchGetAccountStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets free trial status for multiple Amazon Web Services accounts.
    func batchGetFreeTrialInfo(input: BatchGetFreeTrialInfoInput) async throws -> BatchGetFreeTrialInfoOutputResponse
    {
        typealias batchGetFreeTrialInfoContinuation = CheckedContinuation<BatchGetFreeTrialInfoOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchGetFreeTrialInfoContinuation) in
            batchGetFreeTrialInfo(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels the given findings report.
    func cancelFindingsReport(input: CancelFindingsReportInput) async throws -> CancelFindingsReportOutputResponse
    {
        typealias cancelFindingsReportContinuation = CheckedContinuation<CancelFindingsReportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelFindingsReportContinuation) in
            cancelFindingsReport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a filter resource using specified filter criteria.
    func createFilter(input: CreateFilterInput) async throws -> CreateFilterOutputResponse
    {
        typealias createFilterContinuation = CheckedContinuation<CreateFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFilterContinuation) in
            createFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a finding report.
    func createFindingsReport(input: CreateFindingsReportInput) async throws -> CreateFindingsReportOutputResponse
    {
        typealias createFindingsReportContinuation = CheckedContinuation<CreateFindingsReportOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFindingsReportContinuation) in
            createFindingsReport(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a filter resource.
    func deleteFilter(input: DeleteFilterInput) async throws -> DeleteFilterOutputResponse
    {
        typealias deleteFilterContinuation = CheckedContinuation<DeleteFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFilterContinuation) in
            deleteFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe Amazon Inspector configuration settings for an Amazon Web Services organization
    func describeOrganizationConfiguration(input: DescribeOrganizationConfigurationInput) async throws -> DescribeOrganizationConfigurationOutputResponse
    {
        typealias describeOrganizationConfigurationContinuation = CheckedContinuation<DescribeOrganizationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOrganizationConfigurationContinuation) in
            describeOrganizationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables Amazon Inspector scans for one or more Amazon Web Services accounts. Disabling all scan types in an account disables the Amazon Inspector service.
    func disable(input: DisableInput) async throws -> DisableOutputResponse
    {
        typealias disableContinuation = CheckedContinuation<DisableOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableContinuation) in
            disable(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables the Amazon Inspector delegated administrator for your organization.
    func disableDelegatedAdminAccount(input: DisableDelegatedAdminAccountInput) async throws -> DisableDelegatedAdminAccountOutputResponse
    {
        typealias disableDelegatedAdminAccountContinuation = CheckedContinuation<DisableDelegatedAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableDelegatedAdminAccountContinuation) in
            disableDelegatedAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a member account from an Amazon Inspector delegated administrator.
    func disassociateMember(input: DisassociateMemberInput) async throws -> DisassociateMemberOutputResponse
    {
        typealias disassociateMemberContinuation = CheckedContinuation<DisassociateMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateMemberContinuation) in
            disassociateMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables Amazon Inspector scans for one or more Amazon Web Services accounts.
    func enable(input: EnableInput) async throws -> EnableOutputResponse
    {
        typealias enableContinuation = CheckedContinuation<EnableOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableContinuation) in
            enable(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables the Amazon Inspector delegated administrator for your Organizations organization.
    func enableDelegatedAdminAccount(input: EnableDelegatedAdminAccountInput) async throws -> EnableDelegatedAdminAccountOutputResponse
    {
        typealias enableDelegatedAdminAccountContinuation = CheckedContinuation<EnableDelegatedAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableDelegatedAdminAccountContinuation) in
            enableDelegatedAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about the Amazon Inspector delegated administrator for your organization.
    func getDelegatedAdminAccount(input: GetDelegatedAdminAccountInput) async throws -> GetDelegatedAdminAccountOutputResponse
    {
        typealias getDelegatedAdminAccountContinuation = CheckedContinuation<GetDelegatedAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDelegatedAdminAccountContinuation) in
            getDelegatedAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the status of a findings report.
    func getFindingsReportStatus(input: GetFindingsReportStatusInput) async throws -> GetFindingsReportStatusOutputResponse
    {
        typealias getFindingsReportStatusContinuation = CheckedContinuation<GetFindingsReportStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFindingsReportStatusContinuation) in
            getFindingsReportStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets member information for your organization.
    func getMember(input: GetMemberInput) async throws -> GetMemberOutputResponse
    {
        typealias getMemberContinuation = CheckedContinuation<GetMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMemberContinuation) in
            getMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the permissions an account has to configure Amazon Inspector.
    func listAccountPermissions(input: ListAccountPermissionsInput) async throws -> ListAccountPermissionsOutputResponse
    {
        typealias listAccountPermissionsContinuation = CheckedContinuation<ListAccountPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAccountPermissionsContinuation) in
            listAccountPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists coverage details for you environment.
    func listCoverage(input: ListCoverageInput) async throws -> ListCoverageOutputResponse
    {
        typealias listCoverageContinuation = CheckedContinuation<ListCoverageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCoverageContinuation) in
            listCoverage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists Amazon Inspector coverage statistics for your environment.
    func listCoverageStatistics(input: ListCoverageStatisticsInput) async throws -> ListCoverageStatisticsOutputResponse
    {
        typealias listCoverageStatisticsContinuation = CheckedContinuation<ListCoverageStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCoverageStatisticsContinuation) in
            listCoverageStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists information about the Amazon Inspector delegated administrator of your organization.
    func listDelegatedAdminAccounts(input: ListDelegatedAdminAccountsInput) async throws -> ListDelegatedAdminAccountsOutputResponse
    {
        typealias listDelegatedAdminAccountsContinuation = CheckedContinuation<ListDelegatedAdminAccountsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDelegatedAdminAccountsContinuation) in
            listDelegatedAdminAccounts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the filters associated with your account.
    func listFilters(input: ListFiltersInput) async throws -> ListFiltersOutputResponse
    {
        typealias listFiltersContinuation = CheckedContinuation<ListFiltersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFiltersContinuation) in
            listFilters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists aggregated finding data for your environment based on specific criteria.
    func listFindingAggregations(input: ListFindingAggregationsInput) async throws -> ListFindingAggregationsOutputResponse
    {
        typealias listFindingAggregationsContinuation = CheckedContinuation<ListFindingAggregationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFindingAggregationsContinuation) in
            listFindingAggregations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists findings for your environment.
    func listFindings(input: ListFindingsInput) async throws -> ListFindingsOutputResponse
    {
        typealias listFindingsContinuation = CheckedContinuation<ListFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFindingsContinuation) in
            listFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List members associated with the Amazon Inspector delegated administrator for your organization.
    func listMembers(input: ListMembersInput) async throws -> ListMembersOutputResponse
    {
        typealias listMembersContinuation = CheckedContinuation<ListMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMembersContinuation) in
            listMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all tags attached to a given resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the Amazon Inspector usage totals over the last 30 days.
    func listUsageTotals(input: ListUsageTotalsInput) async throws -> ListUsageTotalsOutputResponse
    {
        typealias listUsageTotalsContinuation = CheckedContinuation<ListUsageTotalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUsageTotalsContinuation) in
            listUsageTotals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds tags to a resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Specifies the action that is to be applied to the findings that match the filter.
    func updateFilter(input: UpdateFilterInput) async throws -> UpdateFilterOutputResponse
    {
        typealias updateFilterContinuation = CheckedContinuation<UpdateFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFilterContinuation) in
            updateFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the configurations for your Amazon Inspector organization.
    func updateOrganizationConfiguration(input: UpdateOrganizationConfigurationInput) async throws -> UpdateOrganizationConfigurationOutputResponse
    {
        typealias updateOrganizationConfigurationContinuation = CheckedContinuation<UpdateOrganizationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateOrganizationConfigurationContinuation) in
            updateOrganizationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
