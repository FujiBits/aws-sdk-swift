// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateFlowOutputInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateFlowOutputInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFlowOutputInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFlowOutputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFlowOutputInput>
    public typealias MOutput = OperationOutput<UpdateFlowOutputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFlowOutputOutputError>
}

public struct UpdateFlowOutputInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateFlowOutputInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFlowOutputInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFlowOutputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFlowOutputInput>
    public typealias MOutput = OperationOutput<UpdateFlowOutputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFlowOutputOutputError>
}

public struct UpdateFlowOutputInputBodyMiddleware: Middleware {
    public let id: String = "UpdateFlowOutputInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFlowOutputInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFlowOutputOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFlowOutputInput>
    public typealias MOutput = OperationOutput<UpdateFlowOutputOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFlowOutputOutputError>
}

extension UpdateFlowOutputInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cidrAllowList = "cidrAllowList"
        case description = "description"
        case destination = "destination"
        case encryption = "encryption"
        case maxLatency = "maxLatency"
        case mediaStreamOutputConfigurations = "mediaStreamOutputConfigurations"
        case minLatency = "minLatency"
        case port = "port"
        case `protocol` = "protocol"
        case remoteId = "remoteId"
        case smoothingLatency = "smoothingLatency"
        case streamId = "streamId"
        case vpcInterfaceAttachment = "vpcInterfaceAttachment"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrAllowList = cidrAllowList {
            var cidrAllowListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrAllowList)
            for __listof__string0 in cidrAllowList {
                try cidrAllowListContainer.encode(__listof__string0)
            }
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let encryption = encryption {
            try encodeContainer.encode(encryption, forKey: .encryption)
        }
        if maxLatency != 0 {
            try encodeContainer.encode(maxLatency, forKey: .maxLatency)
        }
        if let mediaStreamOutputConfigurations = mediaStreamOutputConfigurations {
            var mediaStreamOutputConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .mediaStreamOutputConfigurations)
            for __listofmediastreamoutputconfigurationrequest0 in mediaStreamOutputConfigurations {
                try mediaStreamOutputConfigurationsContainer.encode(__listofmediastreamoutputconfigurationrequest0)
            }
        }
        if minLatency != 0 {
            try encodeContainer.encode(minLatency, forKey: .minLatency)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`.rawValue, forKey: .`protocol`)
        }
        if let remoteId = remoteId {
            try encodeContainer.encode(remoteId, forKey: .remoteId)
        }
        if smoothingLatency != 0 {
            try encodeContainer.encode(smoothingLatency, forKey: .smoothingLatency)
        }
        if let streamId = streamId {
            try encodeContainer.encode(streamId, forKey: .streamId)
        }
        if let vpcInterfaceAttachment = vpcInterfaceAttachment {
            try encodeContainer.encode(vpcInterfaceAttachment, forKey: .vpcInterfaceAttachment)
        }
    }
}
