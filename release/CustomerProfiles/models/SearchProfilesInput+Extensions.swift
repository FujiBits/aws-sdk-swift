// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SearchProfilesInputHeadersMiddleware: Middleware {
    public let id: String = "SearchProfilesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SearchProfilesInput>,
                  next: H) -> Swift.Result<OperationOutput<SearchProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SearchProfilesInput>
    public typealias MOutput = OperationOutput<SearchProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SearchProfilesOutputError>
}

public struct SearchProfilesInputQueryItemMiddleware: Middleware {
    public let id: String = "SearchProfilesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SearchProfilesInput>,
                  next: H) -> Swift.Result<OperationOutput<SearchProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = URLQueryItem(name: "next-token".urlPercentEncoding(), value: String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = URLQueryItem(name: "max-results".urlPercentEncoding(), value: String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SearchProfilesInput>
    public typealias MOutput = OperationOutput<SearchProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SearchProfilesOutputError>
}

public struct SearchProfilesInputBodyMiddleware: Middleware {
    public let id: String = "SearchProfilesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SearchProfilesInput>,
                  next: H) -> Swift.Result<OperationOutput<SearchProfilesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SearchProfilesInput>
    public typealias MOutput = OperationOutput<SearchProfilesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SearchProfilesOutputError>
}

extension SearchProfilesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case keyName = "KeyName"
        case values = "Values"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keyName = keyName {
            try encodeContainer.encode(keyName, forKey: .keyName)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for requestvaluelist0 in values {
                try valuesContainer.encode(requestvaluelist0)
            }
        }
    }
}
