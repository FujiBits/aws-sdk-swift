// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMatchesOutputResponseBody: Equatable {
    public let nextToken: String?
    public let matchGenerationDate: Date?
    public let potentialMatches: Int?
    public let matches: [MatchItem]?
}

extension GetMatchesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case matchGenerationDate = "MatchGenerationDate"
        case matches = "Matches"
        case nextToken = "NextToken"
        case potentialMatches = "PotentialMatches"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let matchGenerationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .matchGenerationDate)
        matchGenerationDate = matchGenerationDateDecoded
        let potentialMatchesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .potentialMatches)
        potentialMatches = potentialMatchesDecoded
        let matchesContainer = try containerValues.decodeIfPresent([MatchItem?].self, forKey: .matches)
        var matchesDecoded0:[MatchItem]? = nil
        if let matchesContainer = matchesContainer {
            matchesDecoded0 = [MatchItem]()
            for structure0 in matchesContainer {
                if let structure0 = structure0 {
                    matchesDecoded0?.append(structure0)
                }
            }
        }
        matches = matchesDecoded0
    }
}
