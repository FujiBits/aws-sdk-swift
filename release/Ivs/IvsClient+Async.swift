// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension IvsClient {
    /// <p>Performs <a>GetChannel</a> on multiple ARNs simultaneously.</p>
    func batchGetChannel(input: BatchGetChannelInput) async throws -> BatchGetChannelOutputResponse
    {
        typealias batchGetChannelContinuation = CheckedContinuation<BatchGetChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchGetChannelContinuation) in
            batchGetChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Performs <a>GetStreamKey</a> on multiple ARNs simultaneously.</p>
    func batchGetStreamKey(input: BatchGetStreamKeyInput) async throws -> BatchGetStreamKeyOutputResponse
    {
        typealias batchGetStreamKeyContinuation = CheckedContinuation<BatchGetStreamKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchGetStreamKeyContinuation) in
            batchGetStreamKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new channel and an associated stream key to start streaming.</p>
    func createChannel(input: CreateChannelInput) async throws -> CreateChannelOutputResponse
    {
        typealias createChannelContinuation = CheckedContinuation<CreateChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChannelContinuation) in
            createChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new recording configuration, used to enable recording to Amazon S3.</p>
    ///          <p>
    ///             <b>Known issue:</b> In the us-east-1 region, if you use the AWS
    ///       CLI to create a recording configuration, it returns success even if the S3 bucket is in a
    ///       different region. In this case, the <code>state</code> of the recording configuration is
    ///         <code>CREATE_FAILED</code> (instead of <code>ACTIVE</code>). (In other regions, the CLI
    ///       correctly returns failure if the bucket is in a different region.)</p>
    ///          <p>
    ///             <b>Workaround:</b> Ensure that your S3 bucket is in the same region as the recording
    ///       configuration. If you create a recording configuration in a different region as your S3
    ///       bucket, delete that recording configuration and create a new one with an S3 bucket from the
    ///       correct region.</p>
    func createRecordingConfiguration(input: CreateRecordingConfigurationInput) async throws -> CreateRecordingConfigurationOutputResponse
    {
        typealias createRecordingConfigurationContinuation = CheckedContinuation<CreateRecordingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRecordingConfigurationContinuation) in
            createRecordingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a stream key, used to initiate a stream, for the specified channel ARN.</p>
    ///          <p>Note that <a>CreateChannel</a> creates a stream key. If you subsequently use
    ///       CreateStreamKey on the same channel, it will fail because a stream key already exists and
    ///       there is a limit of 1 stream key per channel. To reset the stream key on a channel, use <a>DeleteStreamKey</a> and then CreateStreamKey.</p>
    func createStreamKey(input: CreateStreamKeyInput) async throws -> CreateStreamKeyOutputResponse
    {
        typealias createStreamKeyContinuation = CheckedContinuation<CreateStreamKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStreamKeyContinuation) in
            createStreamKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the specified channel and its associated stream keys.</p>
    ///          <p>If you try to delete a live channel, you will get an error (409 ConflictException). To
    ///       delete a channel that is live, call <a>StopStream</a>, wait for the Amazon
    ///       EventBridge "Stream End" event (to verify that the stream's state was changed from Live to
    ///       Offline), then call DeleteChannel. (See <a href="https://docs.aws.amazon.com/ivs/latest/userguide/eventbridge.html"> Using EventBridge with Amazon IVS</a>.) </p>
    func deleteChannel(input: DeleteChannelInput) async throws -> DeleteChannelOutputResponse
    {
        typealias deleteChannelContinuation = CheckedContinuation<DeleteChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelContinuation) in
            deleteChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a specified authorization key pair. This invalidates future viewer tokens
    ///       generated using the key pairâ€™s <code>privateKey</code>. For more information, see <a href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Setting Up Private
    ///         Channels</a> in the <i>Amazon IVS User Guide</i>.</p>
    func deletePlaybackKeyPair(input: DeletePlaybackKeyPairInput) async throws -> DeletePlaybackKeyPairOutputResponse
    {
        typealias deletePlaybackKeyPairContinuation = CheckedContinuation<DeletePlaybackKeyPairOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePlaybackKeyPairContinuation) in
            deletePlaybackKeyPair(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the recording configuration for the specified ARN.</p>
    ///          <p>If you try to delete a recording configuration that is associated with a channel, you will
    ///       get an error (409 ConflictException). To avoid this, for all channels that reference the
    ///       recording configuration, first use <a>UpdateChannel</a> to set the
    ///         <code>recordingConfigurationArn</code> field to an empty string, then use
    ///       DeleteRecordingConfiguration.</p>
    func deleteRecordingConfiguration(input: DeleteRecordingConfigurationInput) async throws -> DeleteRecordingConfigurationOutputResponse
    {
        typealias deleteRecordingConfigurationContinuation = CheckedContinuation<DeleteRecordingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRecordingConfigurationContinuation) in
            deleteRecordingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the stream key for the specified ARN, so it can no longer be used to
    ///       stream.</p>
    func deleteStreamKey(input: DeleteStreamKeyInput) async throws -> DeleteStreamKeyOutputResponse
    {
        typealias deleteStreamKeyContinuation = CheckedContinuation<DeleteStreamKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteStreamKeyContinuation) in
            deleteStreamKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the channel configuration for the specified channel ARN. See also <a>BatchGetChannel</a>.</p>
    func getChannel(input: GetChannelInput) async throws -> GetChannelOutputResponse
    {
        typealias getChannelContinuation = CheckedContinuation<GetChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getChannelContinuation) in
            getChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets a specified playback authorization key pair and returns the <code>arn</code> and
    ///         <code>fingerprint</code>. The <code>privateKey</code> held by the caller can be used to
    ///       generate viewer authorization tokens, to grant viewers access to private channels. For more
    ///       information, see <a href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Setting Up Private Channels</a> in the <i>Amazon IVS User
    ///       Guide</i>.</p>
    func getPlaybackKeyPair(input: GetPlaybackKeyPairInput) async throws -> GetPlaybackKeyPairOutputResponse
    {
        typealias getPlaybackKeyPairContinuation = CheckedContinuation<GetPlaybackKeyPairOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPlaybackKeyPairContinuation) in
            getPlaybackKeyPair(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the recording configuration for the specified ARN.</p>
    func getRecordingConfiguration(input: GetRecordingConfigurationInput) async throws -> GetRecordingConfigurationOutputResponse
    {
        typealias getRecordingConfigurationContinuation = CheckedContinuation<GetRecordingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRecordingConfigurationContinuation) in
            getRecordingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about the active (live) stream on a specified channel.</p>
    func getStream(input: GetStreamInput) async throws -> GetStreamOutputResponse
    {
        typealias getStreamContinuation = CheckedContinuation<GetStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getStreamContinuation) in
            getStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets stream-key information for a specified ARN.</p>
    func getStreamKey(input: GetStreamKeyInput) async throws -> GetStreamKeyOutputResponse
    {
        typealias getStreamKeyContinuation = CheckedContinuation<GetStreamKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getStreamKeyContinuation) in
            getStreamKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Imports the public portion of a new key pair and returns its <code>arn</code> and
    ///         <code>fingerprint</code>. The <code>privateKey</code> can then be used to generate viewer
    ///       authorization tokens, to grant viewers access to private channels. For more information, see
    ///         <a href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Setting Up
    ///         Private Channels</a> in the <i>Amazon IVS User Guide</i>.</p>
    func importPlaybackKeyPair(input: ImportPlaybackKeyPairInput) async throws -> ImportPlaybackKeyPairOutputResponse
    {
        typealias importPlaybackKeyPairContinuation = CheckedContinuation<ImportPlaybackKeyPairOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importPlaybackKeyPairContinuation) in
            importPlaybackKeyPair(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets summary information about all channels in your account, in the AWS region where the
    ///       API request is processed. This list can be filtered to match a specified name or
    ///       recording-configuration ARN. Filters are mutually exclusive and cannot be used together. If
    ///       you try to use both filters, you will get an error (409 ConflictException).</p>
    func listChannels(input: ListChannelsInput) async throws -> ListChannelsOutputResponse
    {
        typealias listChannelsContinuation = CheckedContinuation<ListChannelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelsContinuation) in
            listChannels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets summary information about playback key pairs. For more information, see <a href="https://docs.aws.amazon.com/ivs/latest/userguide/private-channels.html">Setting Up Private
    ///         Channels</a> in the <i>Amazon IVS User Guide</i>.</p>
    func listPlaybackKeyPairs(input: ListPlaybackKeyPairsInput) async throws -> ListPlaybackKeyPairsOutputResponse
    {
        typealias listPlaybackKeyPairsContinuation = CheckedContinuation<ListPlaybackKeyPairsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPlaybackKeyPairsContinuation) in
            listPlaybackKeyPairs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets summary information about all recording configurations in your account, in the AWS
    ///       region where the API request is processed.</p>
    func listRecordingConfigurations(input: ListRecordingConfigurationsInput) async throws -> ListRecordingConfigurationsOutputResponse
    {
        typealias listRecordingConfigurationsContinuation = CheckedContinuation<ListRecordingConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRecordingConfigurationsContinuation) in
            listRecordingConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets summary information about stream keys for the specified channel.</p>
    func listStreamKeys(input: ListStreamKeysInput) async throws -> ListStreamKeysOutputResponse
    {
        typealias listStreamKeysContinuation = CheckedContinuation<ListStreamKeysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStreamKeysContinuation) in
            listStreamKeys(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets summary information about live streams in your account, in the AWS region where the
    ///       API request is processed.</p>
    func listStreams(input: ListStreamsInput) async throws -> ListStreamsOutputResponse
    {
        typealias listStreamsContinuation = CheckedContinuation<ListStreamsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStreamsContinuation) in
            listStreams(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about AWS tags for the specified ARN.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Inserts metadata into the active stream of the specified channel. A maximum of 5 requests
    ///       per second per channel is allowed, each with a maximum 1 KB payload. (If 5 TPS is not
    ///       sufficient for your needs, we recommend batching your data into a single PutMetadata call.)
    ///
    ///       Also see <a href="https://docs.aws.amazon.com/ivs/latest/userguide/metadata.html">Embedding Metadata
    ///
    ///         within a Video Stream</a> in the <i>Amazon IVS User Guide</i>.</p>
    func putMetadata(input: PutMetadataInput) async throws -> PutMetadataOutputResponse
    {
        typealias putMetadataContinuation = CheckedContinuation<PutMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putMetadataContinuation) in
            putMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disconnects the incoming RTMPS stream for the specified channel. Can be used in
    ///       conjunction with <a>DeleteStreamKey</a> to prevent further streaming to a
    ///       channel.</p>
    ///          <note>
    ///             <p>Many streaming client-software libraries automatically reconnect a dropped RTMPS
    ///         session, so to stop the stream permanently, you may want to first revoke the
    ///           <code>streamKey</code> attached to the channel.</p>
    ///          </note>
    func stopStream(input: StopStreamInput) async throws -> StopStreamOutputResponse
    {
        typealias stopStreamContinuation = CheckedContinuation<StopStreamOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopStreamContinuation) in
            stopStream(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds or updates tags for the AWS resource with the specified ARN.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes tags from the resource with the specified ARN.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a channel's configuration. This does not affect an ongoing stream of this channel.
    ///       You must stop and restart the stream for the changes to take effect.</p>
    func updateChannel(input: UpdateChannelInput) async throws -> UpdateChannelOutputResponse
    {
        typealias updateChannelContinuation = CheckedContinuation<UpdateChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateChannelContinuation) in
            updateChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
