// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension CognitoIdentityProviderClient {
    /// Adds additional user attributes to the user pool schema.
    func addCustomAttributes(input: AddCustomAttributesInput) async throws -> AddCustomAttributesOutputResponse
    {
        typealias addCustomAttributesContinuation = CheckedContinuation<AddCustomAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addCustomAttributesContinuation) in
            addCustomAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds the specified user to the specified group.
    ///         Calling this action requires developer credentials.
    func adminAddUserToGroup(input: AdminAddUserToGroupInput) async throws -> AdminAddUserToGroupOutputResponse
    {
        typealias adminAddUserToGroupContinuation = CheckedContinuation<AdminAddUserToGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminAddUserToGroupContinuation) in
            adminAddUserToGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Confirms user registration as an admin without using a confirmation code. Works on any
    ///             user.
    ///         Calling this action requires developer credentials.
    func adminConfirmSignUp(input: AdminConfirmSignUpInput) async throws -> AdminConfirmSignUpOutputResponse
    {
        typealias adminConfirmSignUpContinuation = CheckedContinuation<AdminConfirmSignUpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminConfirmSignUpContinuation) in
            adminConfirmSignUp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new user in the specified user pool.
    ///         If MessageAction is not set, the default is to send a welcome message via
    ///             email or phone (SMS).
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    ///
    ///         This message is based on a template that you configured in your call to create or
    ///             update a user pool. This template includes your custom sign-up instructions and
    ///             placeholders for user name and temporary password.
    ///         Alternatively, you can call AdminCreateUser with “SUPPRESS” for the
    ///                 MessageAction parameter, and Amazon Cognito will not send any email.
    ///         In either case, the user will be in the FORCE_CHANGE_PASSWORD state until
    ///             they sign in and change their password.
    ///
    ///             AdminCreateUser requires developer credentials.
    func adminCreateUser(input: AdminCreateUserInput) async throws -> AdminCreateUserOutputResponse
    {
        typealias adminCreateUserContinuation = CheckedContinuation<AdminCreateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminCreateUserContinuation) in
            adminCreateUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a user as an administrator. Works on any user.
    ///         Calling this action requires developer credentials.
    func adminDeleteUser(input: AdminDeleteUserInput) async throws -> AdminDeleteUserOutputResponse
    {
        typealias adminDeleteUserContinuation = CheckedContinuation<AdminDeleteUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminDeleteUserContinuation) in
            adminDeleteUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the user attributes in a user pool as an administrator. Works on any
    ///             user.
    ///         Calling this action requires developer credentials.
    func adminDeleteUserAttributes(input: AdminDeleteUserAttributesInput) async throws -> AdminDeleteUserAttributesOutputResponse
    {
        typealias adminDeleteUserAttributesContinuation = CheckedContinuation<AdminDeleteUserAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminDeleteUserAttributesContinuation) in
            adminDeleteUserAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables the user from signing in with the specified external (SAML or social)
    ///             identity provider. If the user to disable is a Cognito User Pools native username +
    ///             password user, they are not permitted to use their password to sign-in. If the user to
    ///             disable is a linked external IdP user, any link between that user and an existing user
    ///             is removed. The next time the external user (no longer attached to the previously linked
    ///                 DestinationUser) signs in, they must create a new user account. See
    ///                 <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminLinkProviderForUser.html">AdminLinkProviderForUser.
    ///         This action is enabled only for admin access and requires developer
    ///             credentials.
    ///         The ProviderName must match the value specified when creating an IdP for
    ///             the pool.
    ///         To disable a native username + password user, the ProviderName value must
    ///             be Cognito and the ProviderAttributeName must be
    ///                 Cognito_Subject, with the ProviderAttributeValue being the
    ///             name that is used in the user pool for the user.
    ///         The ProviderAttributeName must always be Cognito_Subject for
    ///             social identity providers. The ProviderAttributeValue must always be the
    ///             exact subject that was used when the user was originally linked as a source user.
    ///         For de-linking a SAML identity, there are two scenarios. If the linked identity has
    ///             not yet been used to sign-in, the ProviderAttributeName and
    ///                 ProviderAttributeValue must be the same values that were used for the
    ///                 SourceUser when the identities were originally linked using
    ///                 AdminLinkProviderForUser call. (If the linking was done with
    ///                 ProviderAttributeName set to Cognito_Subject, the same
    ///             applies here). However, if the user has already signed in, the
    ///                 ProviderAttributeName must be Cognito_Subject and
    ///                 ProviderAttributeValue must be the subject of the SAML
    ///             assertion.
    func adminDisableProviderForUser(input: AdminDisableProviderForUserInput) async throws -> AdminDisableProviderForUserOutputResponse
    {
        typealias adminDisableProviderForUserContinuation = CheckedContinuation<AdminDisableProviderForUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminDisableProviderForUserContinuation) in
            adminDisableProviderForUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables the specified user.
    ///         Calling this action requires developer credentials.
    func adminDisableUser(input: AdminDisableUserInput) async throws -> AdminDisableUserOutputResponse
    {
        typealias adminDisableUserContinuation = CheckedContinuation<AdminDisableUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminDisableUserContinuation) in
            adminDisableUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables the specified user as an administrator. Works on any user.
    ///         Calling this action requires developer credentials.
    func adminEnableUser(input: AdminEnableUserInput) async throws -> AdminEnableUserOutputResponse
    {
        typealias adminEnableUserContinuation = CheckedContinuation<AdminEnableUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminEnableUserContinuation) in
            adminEnableUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Forgets the device, as an administrator.
    ///         Calling this action requires developer credentials.
    func adminForgetDevice(input: AdminForgetDeviceInput) async throws -> AdminForgetDeviceOutputResponse
    {
        typealias adminForgetDeviceContinuation = CheckedContinuation<AdminForgetDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminForgetDeviceContinuation) in
            adminForgetDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the device, as an administrator.
    ///         Calling this action requires developer credentials.
    func adminGetDevice(input: AdminGetDeviceInput) async throws -> AdminGetDeviceOutputResponse
    {
        typealias adminGetDeviceContinuation = CheckedContinuation<AdminGetDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminGetDeviceContinuation) in
            adminGetDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the specified user by user name in a user pool as an administrator. Works on any
    ///             user.
    ///         Calling this action requires developer credentials.
    func adminGetUser(input: AdminGetUserInput) async throws -> AdminGetUserOutputResponse
    {
        typealias adminGetUserContinuation = CheckedContinuation<AdminGetUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminGetUserContinuation) in
            adminGetUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Initiates the authentication flow, as an administrator.
    ///
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    ///
    ///         Calling this action requires developer credentials.
    func adminInitiateAuth(input: AdminInitiateAuthInput) async throws -> AdminInitiateAuthOutputResponse
    {
        typealias adminInitiateAuthContinuation = CheckedContinuation<AdminInitiateAuthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminInitiateAuthContinuation) in
            adminInitiateAuth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Links an existing user account in a user pool (DestinationUser) to an
    ///             identity from an external identity provider (SourceUser) based on a
    ///             specified attribute name and value from the external identity provider. This allows you
    ///             to create a link from the existing user account to an external federated user identity
    ///             that has not yet been used to sign in, so that the federated user identity can be used
    ///             to sign in as the existing user account.
    ///          For example, if there is an existing user with a username and password, this API
    ///             links that user to a federated user identity, so that when the federated user identity
    ///             is used, the user signs in as the existing user account.
    ///
    ///             The maximum number of federated identities linked to a user is 5.
    ///
    ///
    ///             Because this API allows a user with an external federated identity to sign in as
    ///                 an existing user in the user pool, it is critical that it only be used with external
    ///                 identity providers and provider attributes that have been trusted by the application
    ///                 owner.
    ///
    ///
    ///         This action is enabled only for admin access and requires developer
    ///             credentials.
    func adminLinkProviderForUser(input: AdminLinkProviderForUserInput) async throws -> AdminLinkProviderForUserOutputResponse
    {
        typealias adminLinkProviderForUserContinuation = CheckedContinuation<AdminLinkProviderForUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminLinkProviderForUserContinuation) in
            adminLinkProviderForUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists devices, as an administrator.
    ///         Calling this action requires developer credentials.
    func adminListDevices(input: AdminListDevicesInput) async throws -> AdminListDevicesOutputResponse
    {
        typealias adminListDevicesContinuation = CheckedContinuation<AdminListDevicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminListDevicesContinuation) in
            adminListDevices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the groups that the user belongs to.
    ///         Calling this action requires developer credentials.
    func adminListGroupsForUser(input: AdminListGroupsForUserInput) async throws -> AdminListGroupsForUserOutputResponse
    {
        typealias adminListGroupsForUserContinuation = CheckedContinuation<AdminListGroupsForUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminListGroupsForUserContinuation) in
            adminListGroupsForUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists a history of user activity and any risks detected as part of Amazon Cognito
    ///             advanced security.
    func adminListUserAuthEvents(input: AdminListUserAuthEventsInput) async throws -> AdminListUserAuthEventsOutputResponse
    {
        typealias adminListUserAuthEventsContinuation = CheckedContinuation<AdminListUserAuthEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminListUserAuthEventsContinuation) in
            adminListUserAuthEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified user from the specified group.
    ///         Calling this action requires developer credentials.
    func adminRemoveUserFromGroup(input: AdminRemoveUserFromGroupInput) async throws -> AdminRemoveUserFromGroupOutputResponse
    {
        typealias adminRemoveUserFromGroupContinuation = CheckedContinuation<AdminRemoveUserFromGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminRemoveUserFromGroupContinuation) in
            adminRemoveUserFromGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Resets the specified user's password in a user pool as an administrator. Works on any
    ///             user.
    ///         When a developer calls this API, the current password is invalidated, so it must be
    ///             changed. If a user tries to sign in after the API is called, the app will get a
    ///             PasswordResetRequiredException exception back and should direct the user down the flow
    ///             to reset the password, which is the same as the forgot password flow. In addition, if
    ///             the user pool has phone verification selected and a verified phone number exists for the
    ///             user, or if email verification is selected and a verified email exists for the user,
    ///             calling this API will also result in sending a message to the end user with the code to
    ///             change their password.
    ///
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    ///
    ///         Calling this action requires developer credentials.
    func adminResetUserPassword(input: AdminResetUserPasswordInput) async throws -> AdminResetUserPasswordOutputResponse
    {
        typealias adminResetUserPasswordContinuation = CheckedContinuation<AdminResetUserPasswordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminResetUserPasswordContinuation) in
            adminResetUserPassword(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Responds to an authentication challenge, as an administrator.
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    ///
    ///         Calling this action requires developer credentials.
    func adminRespondToAuthChallenge(input: AdminRespondToAuthChallengeInput) async throws -> AdminRespondToAuthChallengeOutputResponse
    {
        typealias adminRespondToAuthChallengeContinuation = CheckedContinuation<AdminRespondToAuthChallengeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminRespondToAuthChallengeContinuation) in
            adminRespondToAuthChallenge(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the user's multi-factor authentication (MFA) preference, including which MFA
    ///             options are enabled and if any are preferred. Only one factor can be set as preferred.
    ///             The preferred MFA factor will be used to authenticate a user if multiple factors are
    ///             enabled. If multiple options are enabled and no preference is set, a challenge to choose
    ///             an MFA option will be returned during sign in.
    func adminSetUserMFAPreference(input: AdminSetUserMFAPreferenceInput) async throws -> AdminSetUserMFAPreferenceOutputResponse
    {
        typealias adminSetUserMFAPreferenceContinuation = CheckedContinuation<AdminSetUserMFAPreferenceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminSetUserMFAPreferenceContinuation) in
            adminSetUserMFAPreference(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the specified user's password in a user pool as an administrator. Works on any
    ///             user.
    ///         The password can be temporary or permanent. If it is temporary, the user status will
    ///             be placed into the FORCE_CHANGE_PASSWORD state. When the user next tries to
    ///             sign in, the InitiateAuth/AdminInitiateAuth response will contain the
    ///                 NEW_PASSWORD_REQUIRED challenge. If the user does not sign in before it
    ///             expires, the user will not be able to sign in and their password will need to be reset
    ///             by an administrator.
    ///         Once the user has set a new password, or the password is permanent, the user status
    ///             will be set to Confirmed.
    func adminSetUserPassword(input: AdminSetUserPasswordInput) async throws -> AdminSetUserPasswordOutputResponse
    {
        typealias adminSetUserPasswordContinuation = CheckedContinuation<AdminSetUserPasswordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminSetUserPasswordContinuation) in
            adminSetUserPassword(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             This action is no longer supported. You can use it to configure
    ///             only SMS MFA. You can't use it to configure TOTP software token MFA. To configure either
    ///             type of MFA, use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminSetUserMFAPreference.html">AdminSetUserMFAPreference instead.
    func adminSetUserSettings(input: AdminSetUserSettingsInput) async throws -> AdminSetUserSettingsOutputResponse
    {
        typealias adminSetUserSettingsContinuation = CheckedContinuation<AdminSetUserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminSetUserSettingsContinuation) in
            adminSetUserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides feedback for an authentication event as to whether it was from a valid user.
    ///             This feedback is used for improving the risk evaluation decision for the user pool as
    ///             part of Amazon Cognito advanced security.
    func adminUpdateAuthEventFeedback(input: AdminUpdateAuthEventFeedbackInput) async throws -> AdminUpdateAuthEventFeedbackOutputResponse
    {
        typealias adminUpdateAuthEventFeedbackContinuation = CheckedContinuation<AdminUpdateAuthEventFeedbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminUpdateAuthEventFeedbackContinuation) in
            adminUpdateAuthEventFeedback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the device status as an administrator.
    ///         Calling this action requires developer credentials.
    func adminUpdateDeviceStatus(input: AdminUpdateDeviceStatusInput) async throws -> AdminUpdateDeviceStatusOutputResponse
    {
        typealias adminUpdateDeviceStatusContinuation = CheckedContinuation<AdminUpdateDeviceStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminUpdateDeviceStatusContinuation) in
            adminUpdateDeviceStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified user's attributes, including developer attributes, as an
    ///             administrator. Works on any user.
    ///         For custom attributes, you must prepend the custom: prefix to the
    ///             attribute name.
    ///         In addition to updating user attributes, this API can also be used to mark phone and
    ///             email as verified.
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    ///
    ///         Calling this action requires developer credentials.
    func adminUpdateUserAttributes(input: AdminUpdateUserAttributesInput) async throws -> AdminUpdateUserAttributesOutputResponse
    {
        typealias adminUpdateUserAttributesContinuation = CheckedContinuation<AdminUpdateUserAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminUpdateUserAttributesContinuation) in
            adminUpdateUserAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Signs out users from all devices, as an administrator. It also invalidates all refresh
    ///             tokens issued to a user. The user's current access and Id tokens remain valid until
    ///             their expiry. Access and Id tokens expire one hour after they are issued.
    ///         Calling this action requires developer credentials.
    func adminUserGlobalSignOut(input: AdminUserGlobalSignOutInput) async throws -> AdminUserGlobalSignOutOutputResponse
    {
        typealias adminUserGlobalSignOutContinuation = CheckedContinuation<AdminUserGlobalSignOutOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: adminUserGlobalSignOutContinuation) in
            adminUserGlobalSignOut(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a unique generated shared secret key code for the user account. The request
    ///             takes an access token or a session string, but not both.
    ///
    ///             Calling AssociateSoftwareToken immediately disassociates the existing software
    ///                 token from the user account. If the user doesn't subsequently verify the software
    ///                 token, their account is essentially set up to authenticate without MFA. If MFA
    ///                 config is set to Optional at the user pool level, the user can then login without
    ///                 MFA. However, if MFA is set to Required for the user pool, the user will be asked to
    ///                 setup a new software token MFA during sign in.
    ///
    func associateSoftwareToken(input: AssociateSoftwareTokenInput) async throws -> AssociateSoftwareTokenOutputResponse
    {
        typealias associateSoftwareTokenContinuation = CheckedContinuation<AssociateSoftwareTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateSoftwareTokenContinuation) in
            associateSoftwareToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes the password for a specified user in a user pool.
    func changePassword(input: ChangePasswordInput) async throws -> ChangePasswordOutputResponse
    {
        typealias changePasswordContinuation = CheckedContinuation<ChangePasswordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: changePasswordContinuation) in
            changePassword(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Confirms tracking of the device. This API call is the call that begins device
    ///             tracking.
    func confirmDevice(input: ConfirmDeviceInput) async throws -> ConfirmDeviceOutputResponse
    {
        typealias confirmDeviceContinuation = CheckedContinuation<ConfirmDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: confirmDeviceContinuation) in
            confirmDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows a user to enter a confirmation code to reset a forgotten password.
    func confirmForgotPassword(input: ConfirmForgotPasswordInput) async throws -> ConfirmForgotPasswordOutputResponse
    {
        typealias confirmForgotPasswordContinuation = CheckedContinuation<ConfirmForgotPasswordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: confirmForgotPasswordContinuation) in
            confirmForgotPassword(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Confirms registration of a user and handles the existing alias from a previous
    ///             user.
    func confirmSignUp(input: ConfirmSignUpInput) async throws -> ConfirmSignUpOutputResponse
    {
        typealias confirmSignUpContinuation = CheckedContinuation<ConfirmSignUpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: confirmSignUpContinuation) in
            confirmSignUp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new group in the specified user pool.
    ///         Calling this action requires developer credentials.
    func createGroup(input: CreateGroupInput) async throws -> CreateGroupOutputResponse
    {
        typealias createGroupContinuation = CheckedContinuation<CreateGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createGroupContinuation) in
            createGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an identity provider for a user pool.
    func createIdentityProvider(input: CreateIdentityProviderInput) async throws -> CreateIdentityProviderOutputResponse
    {
        typealias createIdentityProviderContinuation = CheckedContinuation<CreateIdentityProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIdentityProviderContinuation) in
            createIdentityProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new OAuth2.0 resource server and defines custom scopes in it.
    func createResourceServer(input: CreateResourceServerInput) async throws -> CreateResourceServerOutputResponse
    {
        typealias createResourceServerContinuation = CheckedContinuation<CreateResourceServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createResourceServerContinuation) in
            createResourceServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates the user import job.
    func createUserImportJob(input: CreateUserImportJobInput) async throws -> CreateUserImportJobOutputResponse
    {
        typealias createUserImportJobContinuation = CheckedContinuation<CreateUserImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserImportJobContinuation) in
            createUserImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new Amazon Cognito user pool and sets the password policy for the
    ///             pool.
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    func createUserPool(input: CreateUserPoolInput) async throws -> CreateUserPoolOutputResponse
    {
        typealias createUserPoolContinuation = CheckedContinuation<CreateUserPoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserPoolContinuation) in
            createUserPool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates the user pool client.
    ///         When you create a new user pool client, token revocation is automatically enabled. For more information
    ///             about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken.
    func createUserPoolClient(input: CreateUserPoolClientInput) async throws -> CreateUserPoolClientOutputResponse
    {
        typealias createUserPoolClientContinuation = CheckedContinuation<CreateUserPoolClientOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserPoolClientContinuation) in
            createUserPoolClient(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new domain for a user pool.
    func createUserPoolDomain(input: CreateUserPoolDomainInput) async throws -> CreateUserPoolDomainOutputResponse
    {
        typealias createUserPoolDomainContinuation = CheckedContinuation<CreateUserPoolDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserPoolDomainContinuation) in
            createUserPoolDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a group.
    ///         Calling this action requires developer credentials.
    func deleteGroup(input: DeleteGroupInput) async throws -> DeleteGroupOutputResponse
    {
        typealias deleteGroupContinuation = CheckedContinuation<DeleteGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteGroupContinuation) in
            deleteGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an identity provider for a user pool.
    func deleteIdentityProvider(input: DeleteIdentityProviderInput) async throws -> DeleteIdentityProviderOutputResponse
    {
        typealias deleteIdentityProviderContinuation = CheckedContinuation<DeleteIdentityProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIdentityProviderContinuation) in
            deleteIdentityProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a resource server.
    func deleteResourceServer(input: DeleteResourceServerInput) async throws -> DeleteResourceServerOutputResponse
    {
        typealias deleteResourceServerContinuation = CheckedContinuation<DeleteResourceServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteResourceServerContinuation) in
            deleteResourceServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows a user to delete himself or herself.
    func deleteUser(input: DeleteUserInput) async throws -> DeleteUserOutputResponse
    {
        typealias deleteUserContinuation = CheckedContinuation<DeleteUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserContinuation) in
            deleteUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the attributes for a user.
    func deleteUserAttributes(input: DeleteUserAttributesInput) async throws -> DeleteUserAttributesOutputResponse
    {
        typealias deleteUserAttributesContinuation = CheckedContinuation<DeleteUserAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserAttributesContinuation) in
            deleteUserAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified Amazon Cognito user pool.
    func deleteUserPool(input: DeleteUserPoolInput) async throws -> DeleteUserPoolOutputResponse
    {
        typealias deleteUserPoolContinuation = CheckedContinuation<DeleteUserPoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserPoolContinuation) in
            deleteUserPool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows the developer to delete the user pool client.
    func deleteUserPoolClient(input: DeleteUserPoolClientInput) async throws -> DeleteUserPoolClientOutputResponse
    {
        typealias deleteUserPoolClientContinuation = CheckedContinuation<DeleteUserPoolClientOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserPoolClientContinuation) in
            deleteUserPoolClient(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a domain for a user pool.
    func deleteUserPoolDomain(input: DeleteUserPoolDomainInput) async throws -> DeleteUserPoolDomainOutputResponse
    {
        typealias deleteUserPoolDomainContinuation = CheckedContinuation<DeleteUserPoolDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserPoolDomainContinuation) in
            deleteUserPoolDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a specific identity provider.
    func describeIdentityProvider(input: DescribeIdentityProviderInput) async throws -> DescribeIdentityProviderOutputResponse
    {
        typealias describeIdentityProviderContinuation = CheckedContinuation<DescribeIdentityProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeIdentityProviderContinuation) in
            describeIdentityProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a resource server.
    func describeResourceServer(input: DescribeResourceServerInput) async throws -> DescribeResourceServerOutputResponse
    {
        typealias describeResourceServerContinuation = CheckedContinuation<DescribeResourceServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeResourceServerContinuation) in
            describeResourceServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the risk configuration.
    func describeRiskConfiguration(input: DescribeRiskConfigurationInput) async throws -> DescribeRiskConfigurationOutputResponse
    {
        typealias describeRiskConfigurationContinuation = CheckedContinuation<DescribeRiskConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRiskConfigurationContinuation) in
            describeRiskConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the user import job.
    func describeUserImportJob(input: DescribeUserImportJobInput) async throws -> DescribeUserImportJobOutputResponse
    {
        typealias describeUserImportJobContinuation = CheckedContinuation<DescribeUserImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserImportJobContinuation) in
            describeUserImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the configuration information and metadata of the specified user pool.
    func describeUserPool(input: DescribeUserPoolInput) async throws -> DescribeUserPoolOutputResponse
    {
        typealias describeUserPoolContinuation = CheckedContinuation<DescribeUserPoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserPoolContinuation) in
            describeUserPool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Client method for returning the configuration information and metadata of the
    ///             specified user pool app client.
    func describeUserPoolClient(input: DescribeUserPoolClientInput) async throws -> DescribeUserPoolClientOutputResponse
    {
        typealias describeUserPoolClientContinuation = CheckedContinuation<DescribeUserPoolClientOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserPoolClientContinuation) in
            describeUserPoolClient(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a domain.
    func describeUserPoolDomain(input: DescribeUserPoolDomainInput) async throws -> DescribeUserPoolDomainOutputResponse
    {
        typealias describeUserPoolDomainContinuation = CheckedContinuation<DescribeUserPoolDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserPoolDomainContinuation) in
            describeUserPoolDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Forgets the specified device.
    func forgetDevice(input: ForgetDeviceInput) async throws -> ForgetDeviceOutputResponse
    {
        typealias forgetDeviceContinuation = CheckedContinuation<ForgetDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: forgetDeviceContinuation) in
            forgetDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Calling this API causes a message to be sent to the end user with a confirmation code
    ///             that is required to change the user's password. For the Username parameter,
    ///             you can use the username or user alias. The method used to send the confirmation code is
    ///             sent according to the specified AccountRecoverySetting. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-recover-a-user-account.html">Recovering
    ///                 User Accounts in the Amazon Cognito Developer Guide. If
    ///             neither a verified phone number nor a verified email exists, an
    ///                 InvalidParameterException is thrown. To use the confirmation code for
    ///             resetting the password, call <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmForgotPassword.html">ConfirmForgotPassword.
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    func forgotPassword(input: ForgotPasswordInput) async throws -> ForgotPasswordOutputResponse
    {
        typealias forgotPasswordContinuation = CheckedContinuation<ForgotPasswordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: forgotPasswordContinuation) in
            forgotPassword(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the header information for the .csv file to be used as input for the user import
    ///             job.
    func getCSVHeader(input: GetCSVHeaderInput) async throws -> GetCSVHeaderOutputResponse
    {
        typealias getCSVHeaderContinuation = CheckedContinuation<GetCSVHeaderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCSVHeaderContinuation) in
            getCSVHeader(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the device.
    func getDevice(input: GetDeviceInput) async throws -> GetDeviceOutputResponse
    {
        typealias getDeviceContinuation = CheckedContinuation<GetDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeviceContinuation) in
            getDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a group.
    ///         Calling this action requires developer credentials.
    func getGroup(input: GetGroupInput) async throws -> GetGroupOutputResponse
    {
        typealias getGroupContinuation = CheckedContinuation<GetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getGroupContinuation) in
            getGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the specified identity provider.
    func getIdentityProviderByIdentifier(input: GetIdentityProviderByIdentifierInput) async throws -> GetIdentityProviderByIdentifierOutputResponse
    {
        typealias getIdentityProviderByIdentifierContinuation = CheckedContinuation<GetIdentityProviderByIdentifierOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIdentityProviderByIdentifierContinuation) in
            getIdentityProviderByIdentifier(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This method takes a user pool ID, and returns the signing certificate.
    func getSigningCertificate(input: GetSigningCertificateInput) async throws -> GetSigningCertificateOutputResponse
    {
        typealias getSigningCertificateContinuation = CheckedContinuation<GetSigningCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSigningCertificateContinuation) in
            getSigningCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the UI Customization information for a particular app client's app UI, if there
    ///             is something set. If nothing is set for the particular client, but there is an existing
    ///             pool level customization (app clientId will be ALL), then that
    ///             is returned. If nothing is present, then an empty shape is returned.
    func getUICustomization(input: GetUICustomizationInput) async throws -> GetUICustomizationOutputResponse
    {
        typealias getUICustomizationContinuation = CheckedContinuation<GetUICustomizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUICustomizationContinuation) in
            getUICustomization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the user attributes and metadata for a user.
    func getUser(input: GetUserInput) async throws -> GetUserOutputResponse
    {
        typealias getUserContinuation = CheckedContinuation<GetUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUserContinuation) in
            getUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the user attribute verification code for the specified attribute name.
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    func getUserAttributeVerificationCode(input: GetUserAttributeVerificationCodeInput) async throws -> GetUserAttributeVerificationCodeOutputResponse
    {
        typealias getUserAttributeVerificationCodeContinuation = CheckedContinuation<GetUserAttributeVerificationCodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUserAttributeVerificationCodeContinuation) in
            getUserAttributeVerificationCode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the user pool multi-factor authentication (MFA) configuration.
    func getUserPoolMfaConfig(input: GetUserPoolMfaConfigInput) async throws -> GetUserPoolMfaConfigOutputResponse
    {
        typealias getUserPoolMfaConfigContinuation = CheckedContinuation<GetUserPoolMfaConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUserPoolMfaConfigContinuation) in
            getUserPoolMfaConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Signs out users from all devices. It also invalidates all refresh tokens issued to a
    ///             user. The user's current access and Id tokens remain valid until their expiry. Access
    ///             and Id tokens expire one hour after they are issued.
    func globalSignOut(input: GlobalSignOutInput) async throws -> GlobalSignOutOutputResponse
    {
        typealias globalSignOutContinuation = CheckedContinuation<GlobalSignOutOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: globalSignOutContinuation) in
            globalSignOut(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Initiates the authentication flow.
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    func initiateAuth(input: InitiateAuthInput) async throws -> InitiateAuthOutputResponse
    {
        typealias initiateAuthContinuation = CheckedContinuation<InitiateAuthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: initiateAuthContinuation) in
            initiateAuth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the devices.
    func listDevices(input: ListDevicesInput) async throws -> ListDevicesOutputResponse
    {
        typealias listDevicesContinuation = CheckedContinuation<ListDevicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDevicesContinuation) in
            listDevices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the groups associated with a user pool.
    ///         Calling this action requires developer credentials.
    func listGroups(input: ListGroupsInput) async throws -> ListGroupsOutputResponse
    {
        typealias listGroupsContinuation = CheckedContinuation<ListGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listGroupsContinuation) in
            listGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists information about all identity providers for a user pool.
    func listIdentityProviders(input: ListIdentityProvidersInput) async throws -> ListIdentityProvidersOutputResponse
    {
        typealias listIdentityProvidersContinuation = CheckedContinuation<ListIdentityProvidersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIdentityProvidersContinuation) in
            listIdentityProviders(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the resource servers for a user pool.
    func listResourceServers(input: ListResourceServersInput) async throws -> ListResourceServersOutputResponse
    {
        typealias listResourceServersContinuation = CheckedContinuation<ListResourceServersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourceServersContinuation) in
            listResourceServers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags that are assigned to an Amazon Cognito user pool.
    ///         A tag is a label that you can apply to user pools to categorize and manage them in
    ///             different ways, such as by purpose, owner, environment, or other criteria.
    ///         You can use this action up to 10 times per second, per account.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the user import jobs.
    func listUserImportJobs(input: ListUserImportJobsInput) async throws -> ListUserImportJobsOutputResponse
    {
        typealias listUserImportJobsContinuation = CheckedContinuation<ListUserImportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUserImportJobsContinuation) in
            listUserImportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the clients that have been created for the specified user pool.
    func listUserPoolClients(input: ListUserPoolClientsInput) async throws -> ListUserPoolClientsOutputResponse
    {
        typealias listUserPoolClientsContinuation = CheckedContinuation<ListUserPoolClientsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUserPoolClientsContinuation) in
            listUserPoolClients(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the user pools associated with an account.
    func listUserPools(input: ListUserPoolsInput) async throws -> ListUserPoolsOutputResponse
    {
        typealias listUserPoolsContinuation = CheckedContinuation<ListUserPoolsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUserPoolsContinuation) in
            listUserPools(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the users in the Amazon Cognito user pool.
    func listUsers(input: ListUsersInput) async throws -> ListUsersOutputResponse
    {
        typealias listUsersContinuation = CheckedContinuation<ListUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUsersContinuation) in
            listUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the users in the specified group.
    ///         Calling this action requires developer credentials.
    func listUsersInGroup(input: ListUsersInGroupInput) async throws -> ListUsersInGroupOutputResponse
    {
        typealias listUsersInGroupContinuation = CheckedContinuation<ListUsersInGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUsersInGroupContinuation) in
            listUsersInGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Resends the confirmation (for confirmation of registration) to a specific user in the
    ///             user pool.
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    func resendConfirmationCode(input: ResendConfirmationCodeInput) async throws -> ResendConfirmationCodeOutputResponse
    {
        typealias resendConfirmationCodeContinuation = CheckedContinuation<ResendConfirmationCodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resendConfirmationCodeContinuation) in
            resendConfirmationCode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Responds to the authentication challenge.
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    func respondToAuthChallenge(input: RespondToAuthChallengeInput) async throws -> RespondToAuthChallengeOutputResponse
    {
        typealias respondToAuthChallengeContinuation = CheckedContinuation<RespondToAuthChallengeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: respondToAuthChallengeContinuation) in
            respondToAuthChallenge(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Revokes all of the access tokens generated by the specified refresh token. After the token is revoked, you can not
    ///             use the revoked token to access Cognito authenticated APIs.
    func revokeToken(input: RevokeTokenInput) async throws -> RevokeTokenOutputResponse
    {
        typealias revokeTokenContinuation = CheckedContinuation<RevokeTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: revokeTokenContinuation) in
            revokeToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Configures actions on detected risks. To delete the risk configuration for
    ///                 UserPoolId or ClientId, pass null values for all four
    ///             configuration types.
    ///         To enable Amazon Cognito advanced security features, update the user pool to include
    ///             the UserPoolAddOns keyAdvancedSecurityMode.
    func setRiskConfiguration(input: SetRiskConfigurationInput) async throws -> SetRiskConfigurationOutputResponse
    {
        typealias setRiskConfigurationContinuation = CheckedContinuation<SetRiskConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setRiskConfigurationContinuation) in
            setRiskConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the UI customization information for a user pool's built-in app UI.
    ///         You can specify app UI customization settings for a single client (with a specific
    ///                 clientId) or for all clients (by setting the clientId to
    ///                 ALL). If you specify ALL, the default configuration will
    ///             be used for every client that has no UI customization set previously. If you specify UI
    ///             customization settings for a particular client, it will no longer fall back to the
    ///                 ALL configuration.
    ///
    ///             To use this API, your user pool must have a domain associated with it. Otherwise,
    ///                 there is no place to host the app's pages, and the service will throw an
    ///                 error.
    ///
    func setUICustomization(input: SetUICustomizationInput) async throws -> SetUICustomizationOutputResponse
    {
        typealias setUICustomizationContinuation = CheckedContinuation<SetUICustomizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setUICustomizationContinuation) in
            setUICustomization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Set the user's multi-factor authentication (MFA) method preference, including which
    ///             MFA factors are enabled and if any are preferred. Only one factor can be set as
    ///             preferred. The preferred MFA factor will be used to authenticate a user if multiple
    ///             factors are enabled. If multiple options are enabled and no preference is set, a
    ///             challenge to choose an MFA option will be returned during sign in. If an MFA type is
    ///             enabled for a user, the user will be prompted for MFA during all sign in attempts,
    ///             unless device tracking is turned on and the device has been trusted. If you would like
    ///             MFA to be applied selectively based on the assessed risk level of sign in attempts,
    ///             disable MFA for users and turn on Adaptive Authentication for the user pool.
    func setUserMFAPreference(input: SetUserMFAPreferenceInput) async throws -> SetUserMFAPreferenceOutputResponse
    {
        typealias setUserMFAPreferenceContinuation = CheckedContinuation<SetUserMFAPreferenceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setUserMFAPreferenceContinuation) in
            setUserMFAPreference(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Set the user pool multi-factor authentication (MFA) configuration.
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    func setUserPoolMfaConfig(input: SetUserPoolMfaConfigInput) async throws -> SetUserPoolMfaConfigOutputResponse
    {
        typealias setUserPoolMfaConfigContinuation = CheckedContinuation<SetUserPoolMfaConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setUserPoolMfaConfigContinuation) in
            setUserPoolMfaConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             This action is no longer supported. You can use it to configure
    ///             only SMS MFA. You can't use it to configure TOTP software token MFA. To configure either
    ///             type of MFA, use <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserMFAPreference.html">SetUserMFAPreference instead.
    func setUserSettings(input: SetUserSettingsInput) async throws -> SetUserSettingsOutputResponse
    {
        typealias setUserSettingsContinuation = CheckedContinuation<SetUserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setUserSettingsContinuation) in
            setUserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers the user in the specified user pool and creates a user name, password, and
    ///             user attributes.
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    func signUp(input: SignUpInput) async throws -> SignUpOutputResponse
    {
        typealias signUpContinuation = CheckedContinuation<SignUpOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: signUpContinuation) in
            signUp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts the user import.
    func startUserImportJob(input: StartUserImportJobInput) async throws -> StartUserImportJobOutputResponse
    {
        typealias startUserImportJobContinuation = CheckedContinuation<StartUserImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startUserImportJobContinuation) in
            startUserImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops the user import job.
    func stopUserImportJob(input: StopUserImportJobInput) async throws -> StopUserImportJobOutputResponse
    {
        typealias stopUserImportJobContinuation = CheckedContinuation<StopUserImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopUserImportJobContinuation) in
            stopUserImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can
    ///             use to categorize and manage user pools in different ways, such as by purpose, owner,
    ///             environment, or other criteria.
    ///         Each tag consists of a key and value, both of which you define. A key is a general
    ///             category for more specific values. For example, if you have two versions of a user pool,
    ///             one for testing and another for production, you might assign an Environment
    ///             tag key to both user pools. The value of this key might be Test for one
    ///             user pool and Production for the other.
    ///         Tags are useful for cost tracking and access control. You can activate your tags so
    ///             that they appear on the Billing and Cost Management console, where you can track the
    ///             costs associated with your user pools. In an IAM policy, you can constrain permissions
    ///             for user pools based on specific tags or tag values.
    ///         You can use this action up to 5 times per second, per account. A user pool can have as
    ///             many as 50 tags.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified tags from an Amazon Cognito user pool. You can use this action
    ///             up to 5 times per second, per account
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides the feedback for an authentication event whether it was from a valid user or
    ///             not. This feedback is used for improving the risk evaluation decision for the user pool
    ///             as part of Amazon Cognito advanced security.
    func updateAuthEventFeedback(input: UpdateAuthEventFeedbackInput) async throws -> UpdateAuthEventFeedbackOutputResponse
    {
        typealias updateAuthEventFeedbackContinuation = CheckedContinuation<UpdateAuthEventFeedbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAuthEventFeedbackContinuation) in
            updateAuthEventFeedback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the device status.
    func updateDeviceStatus(input: UpdateDeviceStatusInput) async throws -> UpdateDeviceStatusOutputResponse
    {
        typealias updateDeviceStatusContinuation = CheckedContinuation<UpdateDeviceStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDeviceStatusContinuation) in
            updateDeviceStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified group with the specified attributes.
    ///         Calling this action requires developer credentials.
    func updateGroup(input: UpdateGroupInput) async throws -> UpdateGroupOutputResponse
    {
        typealias updateGroupContinuation = CheckedContinuation<UpdateGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateGroupContinuation) in
            updateGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates identity provider information for a user pool.
    func updateIdentityProvider(input: UpdateIdentityProviderInput) async throws -> UpdateIdentityProviderOutputResponse
    {
        typealias updateIdentityProviderContinuation = CheckedContinuation<UpdateIdentityProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIdentityProviderContinuation) in
            updateIdentityProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the name and scopes of resource server. All other fields are read-only.
    ///
    ///             If you don't provide a value for an attribute, it will be set to the default
    ///                 value.
    ///
    func updateResourceServer(input: UpdateResourceServerInput) async throws -> UpdateResourceServerOutputResponse
    {
        typealias updateResourceServerContinuation = CheckedContinuation<UpdateResourceServerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateResourceServerContinuation) in
            updateResourceServer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows a user to update a specific attribute (one at a time).
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    func updateUserAttributes(input: UpdateUserAttributesInput) async throws -> UpdateUserAttributesOutputResponse
    {
        typealias updateUserAttributesContinuation = CheckedContinuation<UpdateUserAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserAttributesContinuation) in
            updateUserAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified user pool with the specified attributes. You can get a list of
    ///             the current user pool settings using <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html">DescribeUserPool. If you don't provide a value for an attribute, it will be set to the default
    ///             value.
    ///
    ///
    ///             This action might generate an SMS text message. Starting June 1, 2021, U.S.
    ///                 telecom carriers require that you register an origination phone number before you can
    ///                 send SMS messages to U.S. phone numbers. If you use SMS text messages in Amazon Cognito,
    ///                 you must register a phone number with <a href="https://console.aws.amazon.com/pinpoint/home/">Amazon Pinpoint.
    ///                 Cognito  will use the the registered number automatically. Otherwise, Cognito users that must
    ///                 receive SMS messages might be unable to sign up, activate their accounts, or sign
    ///                 in.
    ///             If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon SNS might place your account in SMS sandbox. In
    ///                   <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">sandbox
    ///                     mode
    ///                , you’ll have limitations, such as sending messages
    ///                 to only verified phone numbers. After testing in the sandbox environment, you can
    ///                 move out of the SMS sandbox and into production. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-sms-userpool-settings.html"> SMS message settings for Cognito User Pools in the Amazon
    ///                         Cognito Developer Guide.
    ///
    func updateUserPool(input: UpdateUserPoolInput) async throws -> UpdateUserPoolOutputResponse
    {
        typealias updateUserPoolContinuation = CheckedContinuation<UpdateUserPoolOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserPoolContinuation) in
            updateUserPool(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified user pool app client with the specified attributes. You can get
    ///             a list of the current user pool app client settings using <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPoolClient.html">DescribeUserPoolClient.
    ///
    ///             If you don't provide a value for an attribute, it will be set to the default
    ///                 value.
    ///
    ///         You can also use this operation to enable token revocation for user pool clients. For more information
    ///         about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken.
    func updateUserPoolClient(input: UpdateUserPoolClientInput) async throws -> UpdateUserPoolClientOutputResponse
    {
        typealias updateUserPoolClientContinuation = CheckedContinuation<UpdateUserPoolClientOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserPoolClientContinuation) in
            updateUserPoolClient(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user
    ///             pool.
    ///         You can use this operation to provide the Amazon Resource Name (ARN) of a new
    ///             certificate to Amazon Cognito. You cannot use it to change the domain for a user
    ///             pool.
    ///         A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up
    ///             and sign-in pages for your application. When you set up a custom domain, you provide a
    ///             certificate that you manage with Certificate Manager (ACM). When necessary, you can
    ///             use this operation to change the certificate that you applied to your custom
    ///             domain.
    ///         Usually, this is unnecessary following routine certificate renewal with ACM. When you
    ///             renew your existing certificate in ACM, the ARN for your certificate remains the same,
    ///             and your custom domain uses the new certificate automatically.
    ///         However, if you replace your existing certificate with a new one, ACM gives the new
    ///             certificate a new ARN. To apply the new certificate to your custom domain, you must
    ///             provide this ARN to Amazon Cognito.
    ///         When you add your new certificate in ACM, you must choose US East (N. Virginia) as the
    ///             Region.
    ///         After you submit your request, Amazon Cognito requires up to 1 hour to distribute your
    ///             new certificate to your custom domain.
    ///         For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI.
    func updateUserPoolDomain(input: UpdateUserPoolDomainInput) async throws -> UpdateUserPoolDomainOutputResponse
    {
        typealias updateUserPoolDomainContinuation = CheckedContinuation<UpdateUserPoolDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserPoolDomainContinuation) in
            updateUserPoolDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Use this API to register a user's entered TOTP code and mark the user's software token
    ///             MFA status as "verified" if successful. The request takes an access token or a session
    ///             string, but not both.
    func verifySoftwareToken(input: VerifySoftwareTokenInput) async throws -> VerifySoftwareTokenOutputResponse
    {
        typealias verifySoftwareTokenContinuation = CheckedContinuation<VerifySoftwareTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: verifySoftwareTokenContinuation) in
            verifySoftwareToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Verifies the specified user attributes in the user pool.
    func verifyUserAttribute(input: VerifyUserAttributeInput) async throws -> VerifyUserAttributeOutputResponse
    {
        typealias verifyUserAttributeContinuation = CheckedContinuation<VerifyUserAttributeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: verifyUserAttributeContinuation) in
            verifyUserAttribute(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
