// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateCustomKeyStoreInputHeadersMiddleware: Middleware {
    public let id: String = "CreateCustomKeyStoreInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCustomKeyStoreInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCustomKeyStoreOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCustomKeyStoreInput>
    public typealias MOutput = OperationOutput<CreateCustomKeyStoreOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCustomKeyStoreOutputError>
}

public struct CreateCustomKeyStoreInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateCustomKeyStoreInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCustomKeyStoreInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCustomKeyStoreOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCustomKeyStoreInput>
    public typealias MOutput = OperationOutput<CreateCustomKeyStoreOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCustomKeyStoreOutputError>
}

public struct CreateCustomKeyStoreInputBodyMiddleware: Middleware {
    public let id: String = "CreateCustomKeyStoreInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateCustomKeyStoreInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateCustomKeyStoreOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateCustomKeyStoreInput>
    public typealias MOutput = OperationOutput<CreateCustomKeyStoreOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateCustomKeyStoreOutputError>
}

extension CreateCustomKeyStoreInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cloudHsmClusterId = "CloudHsmClusterId"
        case customKeyStoreName = "CustomKeyStoreName"
        case keyStorePassword = "KeyStorePassword"
        case trustAnchorCertificate = "TrustAnchorCertificate"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudHsmClusterId = cloudHsmClusterId {
            try encodeContainer.encode(cloudHsmClusterId, forKey: .cloudHsmClusterId)
        }
        if let customKeyStoreName = customKeyStoreName {
            try encodeContainer.encode(customKeyStoreName, forKey: .customKeyStoreName)
        }
        if let keyStorePassword = keyStorePassword {
            try encodeContainer.encode(keyStorePassword, forKey: .keyStorePassword)
        }
        if let trustAnchorCertificate = trustAnchorCertificate {
            try encodeContainer.encode(trustAnchorCertificate, forKey: .trustAnchorCertificate)
        }
    }
}
