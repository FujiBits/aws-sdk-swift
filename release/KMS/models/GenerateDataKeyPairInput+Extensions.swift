// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GenerateDataKeyPairInputHeadersMiddleware: Middleware {
    public let id: String = "GenerateDataKeyPairInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GenerateDataKeyPairInput>,
                  next: H) -> Swift.Result<OperationOutput<GenerateDataKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GenerateDataKeyPairInput>
    public typealias MOutput = OperationOutput<GenerateDataKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GenerateDataKeyPairOutputError>
}

public struct GenerateDataKeyPairInputQueryItemMiddleware: Middleware {
    public let id: String = "GenerateDataKeyPairInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GenerateDataKeyPairInput>,
                  next: H) -> Swift.Result<OperationOutput<GenerateDataKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GenerateDataKeyPairInput>
    public typealias MOutput = OperationOutput<GenerateDataKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GenerateDataKeyPairOutputError>
}

public struct GenerateDataKeyPairInputBodyMiddleware: Middleware {
    public let id: String = "GenerateDataKeyPairInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GenerateDataKeyPairInput>,
                  next: H) -> Swift.Result<OperationOutput<GenerateDataKeyPairOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GenerateDataKeyPairInput>
    public typealias MOutput = OperationOutput<GenerateDataKeyPairOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GenerateDataKeyPairOutputError>
}

extension GenerateDataKeyPairInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case encryptionContext = "EncryptionContext"
        case grantTokens = "GrantTokens"
        case keyId = "KeyId"
        case keyPairSpec = "KeyPairSpec"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionContext = encryptionContext {
            var encryptionContextContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .encryptionContext)
            for (dictKey0, encryptioncontexttype0) in encryptionContext {
                try encryptionContextContainer.encode(encryptioncontexttype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokenlist0 in grantTokens {
                try grantTokensContainer.encode(granttokenlist0)
            }
        }
        if let keyId = keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let keyPairSpec = keyPairSpec {
            try encodeContainer.encode(keyPairSpec.rawValue, forKey: .keyPairSpec)
        }
    }
}
