// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ReEncryptInputHeadersMiddleware: Middleware {
    public let id: String = "ReEncryptInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReEncryptInput>,
                  next: H) -> Swift.Result<OperationOutput<ReEncryptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReEncryptInput>
    public typealias MOutput = OperationOutput<ReEncryptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReEncryptOutputError>
}

public struct ReEncryptInputQueryItemMiddleware: Middleware {
    public let id: String = "ReEncryptInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReEncryptInput>,
                  next: H) -> Swift.Result<OperationOutput<ReEncryptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReEncryptInput>
    public typealias MOutput = OperationOutput<ReEncryptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReEncryptOutputError>
}

public struct ReEncryptInputBodyMiddleware: Middleware {
    public let id: String = "ReEncryptInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReEncryptInput>,
                  next: H) -> Swift.Result<OperationOutput<ReEncryptOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReEncryptInput>
    public typealias MOutput = OperationOutput<ReEncryptOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReEncryptOutputError>
}

extension ReEncryptInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case ciphertextBlob = "CiphertextBlob"
        case destinationEncryptionAlgorithm = "DestinationEncryptionAlgorithm"
        case destinationEncryptionContext = "DestinationEncryptionContext"
        case destinationKeyId = "DestinationKeyId"
        case grantTokens = "GrantTokens"
        case sourceEncryptionAlgorithm = "SourceEncryptionAlgorithm"
        case sourceEncryptionContext = "SourceEncryptionContext"
        case sourceKeyId = "SourceKeyId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ciphertextBlob = ciphertextBlob {
            try encodeContainer.encode(ciphertextBlob.base64EncodedString(), forKey: .ciphertextBlob)
        }
        if let destinationEncryptionAlgorithm = destinationEncryptionAlgorithm {
            try encodeContainer.encode(destinationEncryptionAlgorithm.rawValue, forKey: .destinationEncryptionAlgorithm)
        }
        if let destinationEncryptionContext = destinationEncryptionContext {
            var destinationEncryptionContextContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .destinationEncryptionContext)
            for (dictKey0, encryptioncontexttype0) in destinationEncryptionContext {
                try destinationEncryptionContextContainer.encode(encryptioncontexttype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let destinationKeyId = destinationKeyId {
            try encodeContainer.encode(destinationKeyId, forKey: .destinationKeyId)
        }
        if let grantTokens = grantTokens {
            var grantTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .grantTokens)
            for granttokenlist0 in grantTokens {
                try grantTokensContainer.encode(granttokenlist0)
            }
        }
        if let sourceEncryptionAlgorithm = sourceEncryptionAlgorithm {
            try encodeContainer.encode(sourceEncryptionAlgorithm.rawValue, forKey: .sourceEncryptionAlgorithm)
        }
        if let sourceEncryptionContext = sourceEncryptionContext {
            var sourceEncryptionContextContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .sourceEncryptionContext)
            for (dictKey0, encryptioncontexttype0) in sourceEncryptionContext {
                try sourceEncryptionContextContainer.encode(encryptioncontexttype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let sourceKeyId = sourceKeyId {
            try encodeContainer.encode(sourceKeyId, forKey: .sourceKeyId)
        }
    }
}
