// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension SchemasClient {
    /// <p>Creates a discoverer.</p>
    func createDiscoverer(input: CreateDiscovererInput) async throws -> CreateDiscovererOutputResponse
    {
        typealias createDiscovererContinuation = CheckedContinuation<CreateDiscovererOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDiscovererContinuation) in
            createDiscoverer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a registry.</p>
    func createRegistry(input: CreateRegistryInput) async throws -> CreateRegistryOutputResponse
    {
        typealias createRegistryContinuation = CheckedContinuation<CreateRegistryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRegistryContinuation) in
            createRegistry(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a schema definition.</p> <note><p>Inactive schemas will be deleted after two years.</p></note>
    func createSchema(input: CreateSchemaInput) async throws -> CreateSchemaOutputResponse
    {
        typealias createSchemaContinuation = CheckedContinuation<CreateSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSchemaContinuation) in
            createSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a discoverer.</p>
    func deleteDiscoverer(input: DeleteDiscovererInput) async throws -> DeleteDiscovererOutputResponse
    {
        typealias deleteDiscovererContinuation = CheckedContinuation<DeleteDiscovererOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDiscovererContinuation) in
            deleteDiscoverer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Registry.</p>
    func deleteRegistry(input: DeleteRegistryInput) async throws -> DeleteRegistryOutputResponse
    {
        typealias deleteRegistryContinuation = CheckedContinuation<DeleteRegistryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRegistryContinuation) in
            deleteRegistry(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Delete the resource-based policy attached to the specified registry.</p>
    func deleteResourcePolicy(input: DeleteResourcePolicyInput) async throws -> DeleteResourcePolicyOutputResponse
    {
        typealias deleteResourcePolicyContinuation = CheckedContinuation<DeleteResourcePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteResourcePolicyContinuation) in
            deleteResourcePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Delete a schema definition.</p>
    func deleteSchema(input: DeleteSchemaInput) async throws -> DeleteSchemaOutputResponse
    {
        typealias deleteSchemaContinuation = CheckedContinuation<DeleteSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSchemaContinuation) in
            deleteSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Delete the schema version definition</p>
    func deleteSchemaVersion(input: DeleteSchemaVersionInput) async throws -> DeleteSchemaVersionOutputResponse
    {
        typealias deleteSchemaVersionContinuation = CheckedContinuation<DeleteSchemaVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSchemaVersionContinuation) in
            deleteSchemaVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describe the code binding URI.</p>
    func describeCodeBinding(input: DescribeCodeBindingInput) async throws -> DescribeCodeBindingOutputResponse
    {
        typealias describeCodeBindingContinuation = CheckedContinuation<DescribeCodeBindingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCodeBindingContinuation) in
            describeCodeBinding(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the discoverer.</p>
    func describeDiscoverer(input: DescribeDiscovererInput) async throws -> DescribeDiscovererOutputResponse
    {
        typealias describeDiscovererContinuation = CheckedContinuation<DescribeDiscovererOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDiscovererContinuation) in
            describeDiscoverer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the registry.</p>
    func describeRegistry(input: DescribeRegistryInput) async throws -> DescribeRegistryOutputResponse
    {
        typealias describeRegistryContinuation = CheckedContinuation<DescribeRegistryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRegistryContinuation) in
            describeRegistry(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieve the schema definition.</p>
    func describeSchema(input: DescribeSchemaInput) async throws -> DescribeSchemaOutputResponse
    {
        typealias describeSchemaContinuation = CheckedContinuation<DescribeSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSchemaContinuation) in
            describeSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    func exportSchema(input: ExportSchemaInput) async throws -> ExportSchemaOutputResponse
    {
        typealias exportSchemaContinuation = CheckedContinuation<ExportSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportSchemaContinuation) in
            exportSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Get the code binding source URI.</p>
    func getCodeBindingSource(input: GetCodeBindingSourceInput) async throws -> GetCodeBindingSourceOutputResponse
    {
        typealias getCodeBindingSourceContinuation = CheckedContinuation<GetCodeBindingSourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCodeBindingSourceContinuation) in
            getCodeBindingSource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Get the discovered schema that was generated based on sampled events.</p>
    func getDiscoveredSchema(input: GetDiscoveredSchemaInput) async throws -> GetDiscoveredSchemaOutputResponse
    {
        typealias getDiscoveredSchemaContinuation = CheckedContinuation<GetDiscoveredSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDiscoveredSchemaContinuation) in
            getDiscoveredSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the resource-based policy attached to a given registry.</p>
    func getResourcePolicy(input: GetResourcePolicyInput) async throws -> GetResourcePolicyOutputResponse
    {
        typealias getResourcePolicyContinuation = CheckedContinuation<GetResourcePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourcePolicyContinuation) in
            getResourcePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the discoverers.</p>
    func listDiscoverers(input: ListDiscoverersInput) async throws -> ListDiscoverersOutputResponse
    {
        typealias listDiscoverersContinuation = CheckedContinuation<ListDiscoverersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDiscoverersContinuation) in
            listDiscoverers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the registries.</p>
    func listRegistries(input: ListRegistriesInput) async throws -> ListRegistriesOutputResponse
    {
        typealias listRegistriesContinuation = CheckedContinuation<ListRegistriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRegistriesContinuation) in
            listRegistries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides a list of the schema versions and related information.</p>
    func listSchemaVersions(input: ListSchemaVersionsInput) async throws -> ListSchemaVersionsOutputResponse
    {
        typealias listSchemaVersionsContinuation = CheckedContinuation<ListSchemaVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSchemaVersionsContinuation) in
            listSchemaVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the schemas.</p>
    func listSchemas(input: ListSchemasInput) async throws -> ListSchemasOutputResponse
    {
        typealias listSchemasContinuation = CheckedContinuation<ListSchemasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSchemasContinuation) in
            listSchemas(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Get tags for resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Put code binding URI</p>
    func putCodeBinding(input: PutCodeBindingInput) async throws -> PutCodeBindingOutputResponse
    {
        typealias putCodeBindingContinuation = CheckedContinuation<PutCodeBindingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putCodeBindingContinuation) in
            putCodeBinding(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>The name of the policy.</p>
    func putResourcePolicy(input: PutResourcePolicyInput) async throws -> PutResourcePolicyOutputResponse
    {
        typealias putResourcePolicyContinuation = CheckedContinuation<PutResourcePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putResourcePolicyContinuation) in
            putResourcePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Search the schemas</p>
    func searchSchemas(input: SearchSchemasInput) async throws -> SearchSchemasOutputResponse
    {
        typealias searchSchemasContinuation = CheckedContinuation<SearchSchemasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchSchemasContinuation) in
            searchSchemas(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts the discoverer</p>
    func startDiscoverer(input: StartDiscovererInput) async throws -> StartDiscovererOutputResponse
    {
        typealias startDiscovererContinuation = CheckedContinuation<StartDiscovererOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startDiscovererContinuation) in
            startDiscoverer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Stops the discoverer</p>
    func stopDiscoverer(input: StopDiscovererInput) async throws -> StopDiscovererOutputResponse
    {
        typealias stopDiscovererContinuation = CheckedContinuation<StopDiscovererOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopDiscovererContinuation) in
            stopDiscoverer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Add tags to a resource.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes tags from a resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the discoverer</p>
    func updateDiscoverer(input: UpdateDiscovererInput) async throws -> UpdateDiscovererOutputResponse
    {
        typealias updateDiscovererContinuation = CheckedContinuation<UpdateDiscovererOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDiscovererContinuation) in
            updateDiscoverer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a registry.</p>
    func updateRegistry(input: UpdateRegistryInput) async throws -> UpdateRegistryOutputResponse
    {
        typealias updateRegistryContinuation = CheckedContinuation<UpdateRegistryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRegistryContinuation) in
            updateRegistry(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the schema definition</p> <note><p>Inactive schemas will be deleted after two years.</p></note>
    func updateSchema(input: UpdateSchemaInput) async throws -> UpdateSchemaOutputResponse
    {
        typealias updateSchemaContinuation = CheckedContinuation<UpdateSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSchemaContinuation) in
            updateSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
