// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension HealthLakeClient {
    /// <p>Creates a Data Store that can ingest and export FHIR formatted data.</p>
    func createFHIRDatastore(input: CreateFHIRDatastoreInput) async throws -> CreateFHIRDatastoreOutputResponse
    {
        typealias createFHIRDatastoreContinuation = CheckedContinuation<CreateFHIRDatastoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFHIRDatastoreContinuation) in
            createFHIRDatastore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Data Store. </p>
    func deleteFHIRDatastore(input: DeleteFHIRDatastoreInput) async throws -> DeleteFHIRDatastoreOutputResponse
    {
        typealias deleteFHIRDatastoreContinuation = CheckedContinuation<DeleteFHIRDatastoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFHIRDatastoreContinuation) in
            deleteFHIRDatastore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the properties associated with the FHIR Data Store, including the Data Store ID,
    ///          Data Store ARN, Data Store name, Data Store status, created at, Data Store type version, and
    ///          Data Store endpoint.</p>
    func describeFHIRDatastore(input: DescribeFHIRDatastoreInput) async throws -> DescribeFHIRDatastoreOutputResponse
    {
        typealias describeFHIRDatastoreContinuation = CheckedContinuation<DescribeFHIRDatastoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeFHIRDatastoreContinuation) in
            describeFHIRDatastore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Displays the properties of a FHIR export job, including the ID, ARN, name, and the status of the job.</p>
    func describeFHIRExportJob(input: DescribeFHIRExportJobInput) async throws -> DescribeFHIRExportJobOutputResponse
    {
        typealias describeFHIRExportJobContinuation = CheckedContinuation<DescribeFHIRExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeFHIRExportJobContinuation) in
            describeFHIRExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Displays the properties of a FHIR import job, including the ID, ARN, name, and the status of the job.</p>
    func describeFHIRImportJob(input: DescribeFHIRImportJobInput) async throws -> DescribeFHIRImportJobOutputResponse
    {
        typealias describeFHIRImportJobContinuation = CheckedContinuation<DescribeFHIRImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeFHIRImportJobContinuation) in
            describeFHIRImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all FHIR Data Stores that are in the userâ€™s account, regardless of Data Store
    ///          status.</p>
    func listFHIRDatastores(input: ListFHIRDatastoresInput) async throws -> ListFHIRDatastoresOutputResponse
    {
        typealias listFHIRDatastoresContinuation = CheckedContinuation<ListFHIRDatastoresOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFHIRDatastoresContinuation) in
            listFHIRDatastores(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Begins a FHIR export job.</p>
    func startFHIRExportJob(input: StartFHIRExportJobInput) async throws -> StartFHIRExportJobOutputResponse
    {
        typealias startFHIRExportJobContinuation = CheckedContinuation<StartFHIRExportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startFHIRExportJobContinuation) in
            startFHIRExportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Begins a FHIR Import job.</p>
    func startFHIRImportJob(input: StartFHIRImportJobInput) async throws -> StartFHIRImportJobOutputResponse
    {
        typealias startFHIRImportJobContinuation = CheckedContinuation<StartFHIRImportJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startFHIRImportJobContinuation) in
            startFHIRImportJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
