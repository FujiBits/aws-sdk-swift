// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SetIdentityPoolRolesInputHeadersMiddleware: Middleware {
    public let id: String = "SetIdentityPoolRolesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetIdentityPoolRolesInput>,
                  next: H) -> Swift.Result<OperationOutput<SetIdentityPoolRolesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetIdentityPoolRolesInput>
    public typealias MOutput = OperationOutput<SetIdentityPoolRolesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetIdentityPoolRolesOutputError>
}

public struct SetIdentityPoolRolesInputQueryItemMiddleware: Middleware {
    public let id: String = "SetIdentityPoolRolesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetIdentityPoolRolesInput>,
                  next: H) -> Swift.Result<OperationOutput<SetIdentityPoolRolesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetIdentityPoolRolesInput>
    public typealias MOutput = OperationOutput<SetIdentityPoolRolesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetIdentityPoolRolesOutputError>
}

public struct SetIdentityPoolRolesInputBodyMiddleware: Middleware {
    public let id: String = "SetIdentityPoolRolesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetIdentityPoolRolesInput>,
                  next: H) -> Swift.Result<OperationOutput<SetIdentityPoolRolesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetIdentityPoolRolesInput>
    public typealias MOutput = OperationOutput<SetIdentityPoolRolesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetIdentityPoolRolesOutputError>
}

extension SetIdentityPoolRolesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case identityPoolId = "IdentityPoolId"
        case roleMappings = "RoleMappings"
        case roles = "Roles"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let identityPoolId = identityPoolId {
            try encodeContainer.encode(identityPoolId, forKey: .identityPoolId)
        }
        if let roleMappings = roleMappings {
            var roleMappingsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .roleMappings)
            for (dictKey0, rolemappingmap0) in roleMappings {
                try roleMappingsContainer.encode(rolemappingmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let roles = roles {
            var rolesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .roles)
            for (dictKey0, rolesmap0) in roles {
                try rolesContainer.encode(rolesmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
