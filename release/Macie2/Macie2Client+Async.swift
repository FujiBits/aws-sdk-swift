// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension Macie2Client {
    /// <p>Accepts an Amazon Macie membership invitation that was received from a specific account.</p>
    func acceptInvitation(input: AcceptInvitationInput) async throws -> AcceptInvitationOutputResponse
    {
        typealias acceptInvitationContinuation = CheckedContinuation<AcceptInvitationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptInvitationContinuation) in
            acceptInvitation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about one or more custom data identifiers.</p>
    func batchGetCustomDataIdentifiers(input: BatchGetCustomDataIdentifiersInput) async throws -> BatchGetCustomDataIdentifiersOutputResponse
    {
        typealias batchGetCustomDataIdentifiersContinuation = CheckedContinuation<BatchGetCustomDataIdentifiersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchGetCustomDataIdentifiersContinuation) in
            batchGetCustomDataIdentifiers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates and defines the settings for a classification job.</p>
    func createClassificationJob(input: CreateClassificationJobInput) async throws -> CreateClassificationJobOutputResponse
    {
        typealias createClassificationJobContinuation = CheckedContinuation<CreateClassificationJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createClassificationJobContinuation) in
            createClassificationJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates and defines the criteria and other settings for a custom data identifier.</p>
    func createCustomDataIdentifier(input: CreateCustomDataIdentifierInput) async throws -> CreateCustomDataIdentifierOutputResponse
    {
        typealias createCustomDataIdentifierContinuation = CheckedContinuation<CreateCustomDataIdentifierOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCustomDataIdentifierContinuation) in
            createCustomDataIdentifier(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates and defines the criteria and other settings for a findings filter.</p>
    func createFindingsFilter(input: CreateFindingsFilterInput) async throws -> CreateFindingsFilterOutputResponse
    {
        typealias createFindingsFilterContinuation = CheckedContinuation<CreateFindingsFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFindingsFilterContinuation) in
            createFindingsFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sends an Amazon Macie membership invitation to one or more accounts.</p>
    func createInvitations(input: CreateInvitationsInput) async throws -> CreateInvitationsOutputResponse
    {
        typealias createInvitationsContinuation = CheckedContinuation<CreateInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createInvitationsContinuation) in
            createInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates an account with an Amazon Macie administrator account.</p>
    func createMember(input: CreateMemberInput) async throws -> CreateMemberOutputResponse
    {
        typealias createMemberContinuation = CheckedContinuation<CreateMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMemberContinuation) in
            createMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates sample findings.</p>
    func createSampleFindings(input: CreateSampleFindingsInput) async throws -> CreateSampleFindingsOutputResponse
    {
        typealias createSampleFindingsContinuation = CheckedContinuation<CreateSampleFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSampleFindingsContinuation) in
            createSampleFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Declines Amazon Macie membership invitations that were received from specific accounts.</p>
    func declineInvitations(input: DeclineInvitationsInput) async throws -> DeclineInvitationsOutputResponse
    {
        typealias declineInvitationsContinuation = CheckedContinuation<DeclineInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: declineInvitationsContinuation) in
            declineInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Soft deletes a custom data identifier.</p>
    func deleteCustomDataIdentifier(input: DeleteCustomDataIdentifierInput) async throws -> DeleteCustomDataIdentifierOutputResponse
    {
        typealias deleteCustomDataIdentifierContinuation = CheckedContinuation<DeleteCustomDataIdentifierOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteCustomDataIdentifierContinuation) in
            deleteCustomDataIdentifier(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a findings filter.</p>
    func deleteFindingsFilter(input: DeleteFindingsFilterInput) async throws -> DeleteFindingsFilterOutputResponse
    {
        typealias deleteFindingsFilterContinuation = CheckedContinuation<DeleteFindingsFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFindingsFilterContinuation) in
            deleteFindingsFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes Amazon Macie membership invitations that were received from specific accounts.</p>
    func deleteInvitations(input: DeleteInvitationsInput) async throws -> DeleteInvitationsOutputResponse
    {
        typealias deleteInvitationsContinuation = CheckedContinuation<DeleteInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInvitationsContinuation) in
            deleteInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the association between an Amazon Macie administrator account and an account.</p>
    func deleteMember(input: DeleteMemberInput) async throws -> DeleteMemberOutputResponse
    {
        typealias deleteMemberContinuation = CheckedContinuation<DeleteMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMemberContinuation) in
            deleteMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves (queries) statistical data and other information about one or more S3 buckets that Amazon Macie monitors and analyzes.</p>
    func describeBuckets(input: DescribeBucketsInput) async throws -> DescribeBucketsOutputResponse
    {
        typealias describeBucketsContinuation = CheckedContinuation<DescribeBucketsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeBucketsContinuation) in
            describeBuckets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the status and settings for a classification job.</p>
    func describeClassificationJob(input: DescribeClassificationJobInput) async throws -> DescribeClassificationJobOutputResponse
    {
        typealias describeClassificationJobContinuation = CheckedContinuation<DescribeClassificationJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeClassificationJobContinuation) in
            describeClassificationJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the Amazon Macie configuration settings for an AWS organization.</p>
    func describeOrganizationConfiguration(input: DescribeOrganizationConfigurationInput) async throws -> DescribeOrganizationConfigurationOutputResponse
    {
        typealias describeOrganizationConfigurationContinuation = CheckedContinuation<DescribeOrganizationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOrganizationConfigurationContinuation) in
            describeOrganizationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables an Amazon Macie account and deletes Macie resources for the account.</p>
    func disableMacie(input: DisableMacieInput) async throws -> DisableMacieOutputResponse
    {
        typealias disableMacieContinuation = CheckedContinuation<DisableMacieOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableMacieContinuation) in
            disableMacie(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables an account as the delegated Amazon Macie administrator account for an AWS organization.</p>
    func disableOrganizationAdminAccount(input: DisableOrganizationAdminAccountInput) async throws -> DisableOrganizationAdminAccountOutputResponse
    {
        typealias disableOrganizationAdminAccountContinuation = CheckedContinuation<DisableOrganizationAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableOrganizationAdminAccountContinuation) in
            disableOrganizationAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates a member account from its Amazon Macie administrator account.</p>
    func disassociateFromAdministratorAccount(input: DisassociateFromAdministratorAccountInput) async throws -> DisassociateFromAdministratorAccountOutputResponse
    {
        typealias disassociateFromAdministratorAccountContinuation = CheckedContinuation<DisassociateFromAdministratorAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateFromAdministratorAccountContinuation) in
            disassociateFromAdministratorAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>(Deprecated) Disassociates a member account from its Amazon Macie administrator account. This operation has been replaced by the <link  linkend="DisassociateFromAdministratorAccount">DisassociateFromAdministratorAccount</link> operation.</p>
    func disassociateFromMasterAccount(input: DisassociateFromMasterAccountInput) async throws -> DisassociateFromMasterAccountOutputResponse
    {
        typealias disassociateFromMasterAccountContinuation = CheckedContinuation<DisassociateFromMasterAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateFromMasterAccountContinuation) in
            disassociateFromMasterAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates an Amazon Macie administrator account from a member account.</p>
    func disassociateMember(input: DisassociateMemberInput) async throws -> DisassociateMemberOutputResponse
    {
        typealias disassociateMemberContinuation = CheckedContinuation<DisassociateMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateMemberContinuation) in
            disassociateMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables Amazon Macie and specifies the configuration settings for a Macie account.</p>
    func enableMacie(input: EnableMacieInput) async throws -> EnableMacieOutputResponse
    {
        typealias enableMacieContinuation = CheckedContinuation<EnableMacieOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableMacieContinuation) in
            enableMacie(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Designates an account as the delegated Amazon Macie administrator account for an AWS organization.</p>
    func enableOrganizationAdminAccount(input: EnableOrganizationAdminAccountInput) async throws -> EnableOrganizationAdminAccountOutputResponse
    {
        typealias enableOrganizationAdminAccountContinuation = CheckedContinuation<EnableOrganizationAdminAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableOrganizationAdminAccountContinuation) in
            enableOrganizationAdminAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the Amazon Macie administrator account for an account.</p>
    func getAdministratorAccount(input: GetAdministratorAccountInput) async throws -> GetAdministratorAccountOutputResponse
    {
        typealias getAdministratorAccountContinuation = CheckedContinuation<GetAdministratorAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAdministratorAccountContinuation) in
            getAdministratorAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves (queries) aggregated statistical data for all the S3 buckets that Amazon Macie monitors and analyzes.</p>
    func getBucketStatistics(input: GetBucketStatisticsInput) async throws -> GetBucketStatisticsOutputResponse
    {
        typealias getBucketStatisticsContinuation = CheckedContinuation<GetBucketStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBucketStatisticsContinuation) in
            getBucketStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the configuration settings for storing data classification results.</p>
    func getClassificationExportConfiguration(input: GetClassificationExportConfigurationInput) async throws -> GetClassificationExportConfigurationOutputResponse
    {
        typealias getClassificationExportConfigurationContinuation = CheckedContinuation<GetClassificationExportConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getClassificationExportConfigurationContinuation) in
            getClassificationExportConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the criteria and other settings for a custom data identifier.</p>
    func getCustomDataIdentifier(input: GetCustomDataIdentifierInput) async throws -> GetCustomDataIdentifierOutputResponse
    {
        typealias getCustomDataIdentifierContinuation = CheckedContinuation<GetCustomDataIdentifierOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCustomDataIdentifierContinuation) in
            getCustomDataIdentifier(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves (queries) aggregated statistical data about findings.</p>
    func getFindingStatistics(input: GetFindingStatisticsInput) async throws -> GetFindingStatisticsOutputResponse
    {
        typealias getFindingStatisticsContinuation = CheckedContinuation<GetFindingStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFindingStatisticsContinuation) in
            getFindingStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the details of one or more findings.</p>
    func getFindings(input: GetFindingsInput) async throws -> GetFindingsOutputResponse
    {
        typealias getFindingsContinuation = CheckedContinuation<GetFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFindingsContinuation) in
            getFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the criteria and other settings for a findings filter.</p>
    func getFindingsFilter(input: GetFindingsFilterInput) async throws -> GetFindingsFilterOutputResponse
    {
        typealias getFindingsFilterContinuation = CheckedContinuation<GetFindingsFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFindingsFilterContinuation) in
            getFindingsFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the configuration settings for publishing findings to AWS Security Hub.</p>
    func getFindingsPublicationConfiguration(input: GetFindingsPublicationConfigurationInput) async throws -> GetFindingsPublicationConfigurationOutputResponse
    {
        typealias getFindingsPublicationConfigurationContinuation = CheckedContinuation<GetFindingsPublicationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFindingsPublicationConfigurationContinuation) in
            getFindingsPublicationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the count of Amazon Macie membership invitations that were received by an account.</p>
    func getInvitationsCount(input: GetInvitationsCountInput) async throws -> GetInvitationsCountOutputResponse
    {
        typealias getInvitationsCountContinuation = CheckedContinuation<GetInvitationsCountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInvitationsCountContinuation) in
            getInvitationsCount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the current status and configuration settings for an Amazon Macie account.</p>
    func getMacieSession(input: GetMacieSessionInput) async throws -> GetMacieSessionOutputResponse
    {
        typealias getMacieSessionContinuation = CheckedContinuation<GetMacieSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMacieSessionContinuation) in
            getMacieSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>(Deprecated) Retrieves information about the Amazon Macie administrator account for an account. This operation has been replaced by the <link  linkend="GetAdministratorAccount">GetAdministratorAccount</link> operation.</p>
    func getMasterAccount(input: GetMasterAccountInput) async throws -> GetMasterAccountOutputResponse
    {
        typealias getMasterAccountContinuation = CheckedContinuation<GetMasterAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMasterAccountContinuation) in
            getMasterAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about an account that's associated with an Amazon Macie administrator account.</p>
    func getMember(input: GetMemberInput) async throws -> GetMemberOutputResponse
    {
        typealias getMemberContinuation = CheckedContinuation<GetMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMemberContinuation) in
            getMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves (queries) quotas and aggregated usage data for one or more accounts.</p>
    func getUsageStatistics(input: GetUsageStatisticsInput) async throws -> GetUsageStatisticsOutputResponse
    {
        typealias getUsageStatisticsContinuation = CheckedContinuation<GetUsageStatisticsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUsageStatisticsContinuation) in
            getUsageStatistics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves (queries) aggregated usage data for an account.</p>
    func getUsageTotals(input: GetUsageTotalsInput) async throws -> GetUsageTotalsOutputResponse
    {
        typealias getUsageTotalsContinuation = CheckedContinuation<GetUsageTotalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUsageTotalsContinuation) in
            getUsageTotals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a subset of information about one or more classification jobs.</p>
    func listClassificationJobs(input: ListClassificationJobsInput) async throws -> ListClassificationJobsOutputResponse
    {
        typealias listClassificationJobsContinuation = CheckedContinuation<ListClassificationJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listClassificationJobsContinuation) in
            listClassificationJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a subset of information about all the custom data identifiers for an account.</p>
    func listCustomDataIdentifiers(input: ListCustomDataIdentifiersInput) async throws -> ListCustomDataIdentifiersOutputResponse
    {
        typealias listCustomDataIdentifiersContinuation = CheckedContinuation<ListCustomDataIdentifiersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCustomDataIdentifiersContinuation) in
            listCustomDataIdentifiers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a subset of information about one or more findings.</p>
    func listFindings(input: ListFindingsInput) async throws -> ListFindingsOutputResponse
    {
        typealias listFindingsContinuation = CheckedContinuation<ListFindingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFindingsContinuation) in
            listFindings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a subset of information about all the findings filters for an account.</p>
    func listFindingsFilters(input: ListFindingsFiltersInput) async throws -> ListFindingsFiltersOutputResponse
    {
        typealias listFindingsFiltersContinuation = CheckedContinuation<ListFindingsFiltersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFindingsFiltersContinuation) in
            listFindingsFilters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about all the Amazon Macie membership invitations that were received by an account.</p>
    func listInvitations(input: ListInvitationsInput) async throws -> ListInvitationsOutputResponse
    {
        typealias listInvitationsContinuation = CheckedContinuation<ListInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInvitationsContinuation) in
            listInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the accounts that are associated with an Amazon Macie administrator account.</p>
    func listMembers(input: ListMembersInput) async throws -> ListMembersOutputResponse
    {
        typealias listMembersContinuation = CheckedContinuation<ListMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMembersContinuation) in
            listMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the delegated Amazon Macie administrator account for an AWS organization.</p>
    func listOrganizationAdminAccounts(input: ListOrganizationAdminAccountsInput) async throws -> ListOrganizationAdminAccountsOutputResponse
    {
        typealias listOrganizationAdminAccountsContinuation = CheckedContinuation<ListOrganizationAdminAccountsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOrganizationAdminAccountsContinuation) in
            listOrganizationAdminAccounts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the tags (keys and values) that are associated with a classification job, custom data identifier, findings filter, or member account.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates or updates the configuration settings for storing data classification results.</p>
    func putClassificationExportConfiguration(input: PutClassificationExportConfigurationInput) async throws -> PutClassificationExportConfigurationOutputResponse
    {
        typealias putClassificationExportConfigurationContinuation = CheckedContinuation<PutClassificationExportConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putClassificationExportConfigurationContinuation) in
            putClassificationExportConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the configuration settings for publishing findings to AWS Security Hub.</p>
    func putFindingsPublicationConfiguration(input: PutFindingsPublicationConfigurationInput) async throws -> PutFindingsPublicationConfigurationOutputResponse
    {
        typealias putFindingsPublicationConfigurationContinuation = CheckedContinuation<PutFindingsPublicationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putFindingsPublicationConfigurationContinuation) in
            putFindingsPublicationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves (queries) statistical data and other information about AWS resources that Amazon Macie monitors and analyzes.</p>
    func searchResources(input: SearchResourcesInput) async throws -> SearchResourcesOutputResponse
    {
        typealias searchResourcesContinuation = CheckedContinuation<SearchResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: searchResourcesContinuation) in
            searchResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds or updates one or more tags (keys and values) that are associated with a classification job, custom data identifier, findings filter, or member account.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Tests a custom data identifier.</p>
    func testCustomDataIdentifier(input: TestCustomDataIdentifierInput) async throws -> TestCustomDataIdentifierOutputResponse
    {
        typealias testCustomDataIdentifierContinuation = CheckedContinuation<TestCustomDataIdentifierOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: testCustomDataIdentifierContinuation) in
            testCustomDataIdentifier(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes one or more tags (keys and values) from a classification job, custom data identifier, findings filter, or member account.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Changes the status of a classification job.</p>
    func updateClassificationJob(input: UpdateClassificationJobInput) async throws -> UpdateClassificationJobOutputResponse
    {
        typealias updateClassificationJobContinuation = CheckedContinuation<UpdateClassificationJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateClassificationJobContinuation) in
            updateClassificationJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the criteria and other settings for a findings filter.</p>
    func updateFindingsFilter(input: UpdateFindingsFilterInput) async throws -> UpdateFindingsFilterOutputResponse
    {
        typealias updateFindingsFilterContinuation = CheckedContinuation<UpdateFindingsFilterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFindingsFilterContinuation) in
            updateFindingsFilter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Suspends or re-enables an Amazon Macie account, or updates the configuration settings for a Macie account.</p>
    func updateMacieSession(input: UpdateMacieSessionInput) async throws -> UpdateMacieSessionOutputResponse
    {
        typealias updateMacieSessionContinuation = CheckedContinuation<UpdateMacieSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMacieSessionContinuation) in
            updateMacieSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables an Amazon Macie administrator to suspend or re-enable a member account.</p>
    func updateMemberSession(input: UpdateMemberSessionInput) async throws -> UpdateMemberSessionOutputResponse
    {
        typealias updateMemberSessionContinuation = CheckedContinuation<UpdateMemberSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMemberSessionContinuation) in
            updateMemberSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the Amazon Macie configuration settings for an AWS organization.</p>
    func updateOrganizationConfiguration(input: UpdateOrganizationConfigurationInput) async throws -> UpdateOrganizationConfigurationOutputResponse
    {
        typealias updateOrganizationConfigurationContinuation = CheckedContinuation<UpdateOrganizationConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateOrganizationConfigurationContinuation) in
            updateOrganizationConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
