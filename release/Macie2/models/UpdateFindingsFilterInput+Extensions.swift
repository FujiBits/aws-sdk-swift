// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateFindingsFilterInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateFindingsFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFindingsFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFindingsFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFindingsFilterInput>
    public typealias MOutput = OperationOutput<UpdateFindingsFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFindingsFilterOutputError>
}

public struct UpdateFindingsFilterInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateFindingsFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFindingsFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFindingsFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFindingsFilterInput>
    public typealias MOutput = OperationOutput<UpdateFindingsFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFindingsFilterOutputError>
}

public struct UpdateFindingsFilterInputBodyMiddleware: Middleware {
    public let id: String = "UpdateFindingsFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateFindingsFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateFindingsFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateFindingsFilterInput>
    public typealias MOutput = OperationOutput<UpdateFindingsFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateFindingsFilterOutputError>
}

extension UpdateFindingsFilterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "action"
        case description = "description"
        case findingCriteria = "findingCriteria"
        case name = "name"
        case position = "position"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let findingCriteria = findingCriteria {
            try encodeContainer.encode(findingCriteria, forKey: .findingCriteria)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if position != 0 {
            try encodeContainer.encode(position, forKey: .position)
        }
    }
}
