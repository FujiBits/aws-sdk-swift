// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ImagebuilderClient {
    /// <p>CancelImageCreation cancels the creation of Image. This operation can only be used on
    ///       images in a non-terminal state.</p>
    func cancelImageCreation(input: CancelImageCreationInput) async throws -> CancelImageCreationOutputResponse
    {
        typealias cancelImageCreationContinuation = CheckedContinuation<CancelImageCreationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelImageCreationContinuation) in
            cancelImageCreation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new component that can be used to build, validate, test, and assess your
    ///       image.</p>
    func createComponent(input: CreateComponentInput) async throws -> CreateComponentOutputResponse
    {
        typealias createComponentContinuation = CheckedContinuation<CreateComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createComponentContinuation) in
            createComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new container recipe. Container recipes define how images are configured, tested, and assessed.</p>
    func createContainerRecipe(input: CreateContainerRecipeInput) async throws -> CreateContainerRecipeOutputResponse
    {
        typealias createContainerRecipeContinuation = CheckedContinuation<CreateContainerRecipeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createContainerRecipeContinuation) in
            createContainerRecipe(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new distribution configuration. Distribution configurations define and configure
    ///       the outputs of your pipeline.</p>
    func createDistributionConfiguration(input: CreateDistributionConfigurationInput) async throws -> CreateDistributionConfigurationOutputResponse
    {
        typealias createDistributionConfigurationContinuation = CheckedContinuation<CreateDistributionConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDistributionConfigurationContinuation) in
            createDistributionConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Creates a new image. This request will create a new image along with all of the
    ///       configured output resources defined in the distribution configuration. You must specify
    ///       exactly one recipe for your image, using either a ContainerRecipeArn or an ImageRecipeArn.</p>
    func createImage(input: CreateImageInput) async throws -> CreateImageOutputResponse
    {
        typealias createImageContinuation = CheckedContinuation<CreateImageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createImageContinuation) in
            createImage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Creates a new image pipeline. Image pipelines enable you to automate the creation and
    ///       distribution of images.</p>
    func createImagePipeline(input: CreateImagePipelineInput) async throws -> CreateImagePipelineOutputResponse
    {
        typealias createImagePipelineContinuation = CheckedContinuation<CreateImagePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createImagePipelineContinuation) in
            createImagePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Creates a new image recipe. Image recipes define how images are configured, tested, and
    ///       assessed.</p>
    func createImageRecipe(input: CreateImageRecipeInput) async throws -> CreateImageRecipeOutputResponse
    {
        typealias createImageRecipeContinuation = CheckedContinuation<CreateImageRecipeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createImageRecipeContinuation) in
            createImageRecipe(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Creates a new infrastructure configuration. An infrastructure configuration defines the
    ///       environment in which your image will be built and tested.</p>
    func createInfrastructureConfiguration(input: CreateInfrastructureConfigurationInput) async throws -> CreateInfrastructureConfigurationOutputResponse
    {
        typealias createInfrastructureConfigurationContinuation = CheckedContinuation<CreateInfrastructureConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createInfrastructureConfigurationContinuation) in
            createInfrastructureConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Deletes a component build version.</p>
    func deleteComponent(input: DeleteComponentInput) async throws -> DeleteComponentOutputResponse
    {
        typealias deleteComponentContinuation = CheckedContinuation<DeleteComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteComponentContinuation) in
            deleteComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a container recipe.</p>
    func deleteContainerRecipe(input: DeleteContainerRecipeInput) async throws -> DeleteContainerRecipeOutputResponse
    {
        typealias deleteContainerRecipeContinuation = CheckedContinuation<DeleteContainerRecipeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteContainerRecipeContinuation) in
            deleteContainerRecipe(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Deletes a distribution configuration.</p>
    func deleteDistributionConfiguration(input: DeleteDistributionConfigurationInput) async throws -> DeleteDistributionConfigurationOutputResponse
    {
        typealias deleteDistributionConfigurationContinuation = CheckedContinuation<DeleteDistributionConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDistributionConfigurationContinuation) in
            deleteDistributionConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Deletes an image.</p>
    func deleteImage(input: DeleteImageInput) async throws -> DeleteImageOutputResponse
    {
        typealias deleteImageContinuation = CheckedContinuation<DeleteImageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteImageContinuation) in
            deleteImage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Deletes an image pipeline.</p>
    func deleteImagePipeline(input: DeleteImagePipelineInput) async throws -> DeleteImagePipelineOutputResponse
    {
        typealias deleteImagePipelineContinuation = CheckedContinuation<DeleteImagePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteImagePipelineContinuation) in
            deleteImagePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Deletes an image recipe.</p>
    func deleteImageRecipe(input: DeleteImageRecipeInput) async throws -> DeleteImageRecipeOutputResponse
    {
        typealias deleteImageRecipeContinuation = CheckedContinuation<DeleteImageRecipeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteImageRecipeContinuation) in
            deleteImageRecipe(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Deletes an infrastructure configuration.</p>
    func deleteInfrastructureConfiguration(input: DeleteInfrastructureConfigurationInput) async throws -> DeleteInfrastructureConfigurationOutputResponse
    {
        typealias deleteInfrastructureConfigurationContinuation = CheckedContinuation<DeleteInfrastructureConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInfrastructureConfigurationContinuation) in
            deleteInfrastructureConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Gets a component object.</p>
    func getComponent(input: GetComponentInput) async throws -> GetComponentOutputResponse
    {
        typealias getComponentContinuation = CheckedContinuation<GetComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getComponentContinuation) in
            getComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Gets a component policy.</p>
    func getComponentPolicy(input: GetComponentPolicyInput) async throws -> GetComponentPolicyOutputResponse
    {
        typealias getComponentPolicyContinuation = CheckedContinuation<GetComponentPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getComponentPolicyContinuation) in
            getComponentPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a container recipe.</p>
    func getContainerRecipe(input: GetContainerRecipeInput) async throws -> GetContainerRecipeOutputResponse
    {
        typealias getContainerRecipeContinuation = CheckedContinuation<GetContainerRecipeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContainerRecipeContinuation) in
            getContainerRecipe(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the policy for a container recipe.</p>
    func getContainerRecipePolicy(input: GetContainerRecipePolicyInput) async throws -> GetContainerRecipePolicyOutputResponse
    {
        typealias getContainerRecipePolicyContinuation = CheckedContinuation<GetContainerRecipePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContainerRecipePolicyContinuation) in
            getContainerRecipePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Gets a distribution configuration.</p>
    func getDistributionConfiguration(input: GetDistributionConfigurationInput) async throws -> GetDistributionConfigurationOutputResponse
    {
        typealias getDistributionConfigurationContinuation = CheckedContinuation<GetDistributionConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDistributionConfigurationContinuation) in
            getDistributionConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Gets an image.</p>
    func getImage(input: GetImageInput) async throws -> GetImageOutputResponse
    {
        typealias getImageContinuation = CheckedContinuation<GetImageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getImageContinuation) in
            getImage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Gets an image pipeline.</p>
    func getImagePipeline(input: GetImagePipelineInput) async throws -> GetImagePipelineOutputResponse
    {
        typealias getImagePipelineContinuation = CheckedContinuation<GetImagePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getImagePipelineContinuation) in
            getImagePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Gets an image policy.</p>
    func getImagePolicy(input: GetImagePolicyInput) async throws -> GetImagePolicyOutputResponse
    {
        typealias getImagePolicyContinuation = CheckedContinuation<GetImagePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getImagePolicyContinuation) in
            getImagePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Gets an image recipe.</p>
    func getImageRecipe(input: GetImageRecipeInput) async throws -> GetImageRecipeOutputResponse
    {
        typealias getImageRecipeContinuation = CheckedContinuation<GetImageRecipeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getImageRecipeContinuation) in
            getImageRecipe(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Gets an image recipe policy.</p>
    func getImageRecipePolicy(input: GetImageRecipePolicyInput) async throws -> GetImageRecipePolicyOutputResponse
    {
        typealias getImageRecipePolicyContinuation = CheckedContinuation<GetImageRecipePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getImageRecipePolicyContinuation) in
            getImageRecipePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Gets an infrastructure configuration.</p>
    func getInfrastructureConfiguration(input: GetInfrastructureConfigurationInput) async throws -> GetInfrastructureConfigurationOutputResponse
    {
        typealias getInfrastructureConfigurationContinuation = CheckedContinuation<GetInfrastructureConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInfrastructureConfigurationContinuation) in
            getInfrastructureConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Imports a component and transforms its data into a component document.</p>
    func importComponent(input: ImportComponentInput) async throws -> ImportComponentOutputResponse
    {
        typealias importComponentContinuation = CheckedContinuation<ImportComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importComponentContinuation) in
            importComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Returns the list of component build versions for the specified semantic version.</p>
    func listComponentBuildVersions(input: ListComponentBuildVersionsInput) async throws -> ListComponentBuildVersionsOutputResponse
    {
        typealias listComponentBuildVersionsContinuation = CheckedContinuation<ListComponentBuildVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listComponentBuildVersionsContinuation) in
            listComponentBuildVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the list of component build versions for the specified semantic version.</p>
    func listComponents(input: ListComponentsInput) async throws -> ListComponentsOutputResponse
    {
        typealias listComponentsContinuation = CheckedContinuation<ListComponentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listComponentsContinuation) in
            listComponents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of container recipes.</p>
    func listContainerRecipes(input: ListContainerRecipesInput) async throws -> ListContainerRecipesOutputResponse
    {
        typealias listContainerRecipesContinuation = CheckedContinuation<ListContainerRecipesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listContainerRecipesContinuation) in
            listContainerRecipes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of distribution configurations.</p>
    func listDistributionConfigurations(input: ListDistributionConfigurationsInput) async throws -> ListDistributionConfigurationsOutputResponse
    {
        typealias listDistributionConfigurationsContinuation = CheckedContinuation<ListDistributionConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDistributionConfigurationsContinuation) in
            listDistributionConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Returns a list of image build versions.</p>
    func listImageBuildVersions(input: ListImageBuildVersionsInput) async throws -> ListImageBuildVersionsOutputResponse
    {
        typealias listImageBuildVersionsContinuation = CheckedContinuation<ListImageBuildVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listImageBuildVersionsContinuation) in
            listImageBuildVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List the Packages that are associated with an Image Build Version, as determined by AWS Systems Manager Inventory at build time.</p>
    func listImagePackages(input: ListImagePackagesInput) async throws -> ListImagePackagesOutputResponse
    {
        typealias listImagePackagesContinuation = CheckedContinuation<ListImagePackagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listImagePackagesContinuation) in
            listImagePackages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Returns a list of images created by the specified pipeline.</p>
    func listImagePipelineImages(input: ListImagePipelineImagesInput) async throws -> ListImagePipelineImagesOutputResponse
    {
        typealias listImagePipelineImagesContinuation = CheckedContinuation<ListImagePipelineImagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listImagePipelineImagesContinuation) in
            listImagePipelineImages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of image pipelines.</p>
    func listImagePipelines(input: ListImagePipelinesInput) async throws -> ListImagePipelinesOutputResponse
    {
        typealias listImagePipelinesContinuation = CheckedContinuation<ListImagePipelinesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listImagePipelinesContinuation) in
            listImagePipelines(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Returns a list of image recipes.</p>
    func listImageRecipes(input: ListImageRecipesInput) async throws -> ListImageRecipesOutputResponse
    {
        typealias listImageRecipesContinuation = CheckedContinuation<ListImageRecipesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listImageRecipesContinuation) in
            listImageRecipes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Returns the list of images that you have access to.</p>
    func listImages(input: ListImagesInput) async throws -> ListImagesOutputResponse
    {
        typealias listImagesContinuation = CheckedContinuation<ListImagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listImagesContinuation) in
            listImages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Returns a list of infrastructure configurations.</p>
    func listInfrastructureConfigurations(input: ListInfrastructureConfigurationsInput) async throws -> ListInfrastructureConfigurationsOutputResponse
    {
        typealias listInfrastructureConfigurationsContinuation = CheckedContinuation<ListInfrastructureConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInfrastructureConfigurationsContinuation) in
            listInfrastructureConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Returns the list of tags for the specified resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Applies a policy to a component. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API
    ///         <code>PutComponentPolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to
    ///       all principals with whom the resource is shared.</p>
    func putComponentPolicy(input: PutComponentPolicyInput) async throws -> PutComponentPolicyOutputResponse
    {
        typealias putComponentPolicyContinuation = CheckedContinuation<PutComponentPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putComponentPolicyContinuation) in
            putComponentPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Applies a policy to a container image. We recommend that you call the RAM API CreateResourceShare (https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html) to share resources. If you call the Image Builder API <code>PutContainerImagePolicy</code>, you must also call the RAM API PromoteResourceShareCreatedFromPolicy (https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html) in order for the resource to be visible to all principals with whom the resource is shared.</p>
    func putContainerRecipePolicy(input: PutContainerRecipePolicyInput) async throws -> PutContainerRecipePolicyOutputResponse
    {
        typealias putContainerRecipePolicyContinuation = CheckedContinuation<PutContainerRecipePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putContainerRecipePolicyContinuation) in
            putContainerRecipePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Applies a policy to an image. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API
    ///         <code>PutImagePolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to
    ///       all principals with whom the resource is shared.</p>
    func putImagePolicy(input: PutImagePolicyInput) async throws -> PutImagePolicyOutputResponse
    {
        typealias putImagePolicyContinuation = CheckedContinuation<PutImagePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putImagePolicyContinuation) in
            putImagePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Applies a policy to an image recipe. We recommend that you call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_CreateResourceShare.html">CreateResourceShare</a> to share resources. If you call the Image Builder API
    ///         <code>PutImageRecipePolicy</code>, you must also call the RAM API <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_PromoteResourceShareCreatedFromPolicy.html">PromoteResourceShareCreatedFromPolicy</a> in order for the resource to be visible to
    ///       all principals with whom the resource is shared.</p>
    func putImageRecipePolicy(input: PutImageRecipePolicyInput) async throws -> PutImageRecipePolicyOutputResponse
    {
        typealias putImageRecipePolicyContinuation = CheckedContinuation<PutImageRecipePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putImageRecipePolicyContinuation) in
            putImageRecipePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Manually triggers a pipeline to create an image.</p>
    func startImagePipelineExecution(input: StartImagePipelineExecutionInput) async throws -> StartImagePipelineExecutionOutputResponse
    {
        typealias startImagePipelineExecutionContinuation = CheckedContinuation<StartImagePipelineExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startImagePipelineExecutionContinuation) in
            startImagePipelineExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Adds a tag to a resource.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Removes a tag from a resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Updates a new distribution configuration. Distribution configurations define and
    ///       configure the outputs of your pipeline.</p>
    func updateDistributionConfiguration(input: UpdateDistributionConfigurationInput) async throws -> UpdateDistributionConfigurationOutputResponse
    {
        typealias updateDistributionConfigurationContinuation = CheckedContinuation<UpdateDistributionConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDistributionConfigurationContinuation) in
            updateDistributionConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Updates an image pipeline. Image pipelines enable you to automate the creation and
    ///       distribution of images.</p>
    ///   	      <note>
    ///             <p>UpdateImagePipeline does not support selective updates for the pipeline.
    ///   		You must specify all of the required properties in the update request, not just
    ///   		the properties that have changed.</p>
    ///          </note>
    func updateImagePipeline(input: UpdateImagePipelineInput) async throws -> UpdateImagePipelineOutputResponse
    {
        typealias updateImagePipelineContinuation = CheckedContinuation<UpdateImagePipelineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateImagePipelineContinuation) in
            updateImagePipeline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Updates a new infrastructure configuration. An infrastructure configuration defines the
    ///       environment in which your image will be built and tested.</p>
    func updateInfrastructureConfiguration(input: UpdateInfrastructureConfigurationInput) async throws -> UpdateInfrastructureConfigurationOutputResponse
    {
        typealias updateInfrastructureConfigurationContinuation = CheckedContinuation<UpdateInfrastructureConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateInfrastructureConfigurationContinuation) in
            updateInfrastructureConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
