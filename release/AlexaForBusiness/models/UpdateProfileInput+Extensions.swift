// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateProfileInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateProfileInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateProfileInput>
    public typealias MOutput = OperationOutput<UpdateProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateProfileOutputError>
}

public struct UpdateProfileInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateProfileInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateProfileInput>
    public typealias MOutput = OperationOutput<UpdateProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateProfileOutputError>
}

public struct UpdateProfileInputBodyMiddleware: Middleware {
    public let id: String = "UpdateProfileInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateProfileInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateProfileOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateProfileInput>
    public typealias MOutput = OperationOutput<UpdateProfileOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateProfileOutputError>
}

extension UpdateProfileInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case address = "Address"
        case dataRetentionOptIn = "DataRetentionOptIn"
        case distanceUnit = "DistanceUnit"
        case isDefault = "IsDefault"
        case locale = "Locale"
        case maxVolumeLimit = "MaxVolumeLimit"
        case meetingRoomConfiguration = "MeetingRoomConfiguration"
        case pSTNEnabled = "PSTNEnabled"
        case profileArn = "ProfileArn"
        case profileName = "ProfileName"
        case setupModeDisabled = "SetupModeDisabled"
        case temperatureUnit = "TemperatureUnit"
        case timezone = "Timezone"
        case wakeWord = "WakeWord"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let dataRetentionOptIn = dataRetentionOptIn {
            try encodeContainer.encode(dataRetentionOptIn, forKey: .dataRetentionOptIn)
        }
        if let distanceUnit = distanceUnit {
            try encodeContainer.encode(distanceUnit.rawValue, forKey: .distanceUnit)
        }
        if let isDefault = isDefault {
            try encodeContainer.encode(isDefault, forKey: .isDefault)
        }
        if let locale = locale {
            try encodeContainer.encode(locale, forKey: .locale)
        }
        if let maxVolumeLimit = maxVolumeLimit {
            try encodeContainer.encode(maxVolumeLimit, forKey: .maxVolumeLimit)
        }
        if let meetingRoomConfiguration = meetingRoomConfiguration {
            try encodeContainer.encode(meetingRoomConfiguration, forKey: .meetingRoomConfiguration)
        }
        if let pSTNEnabled = pSTNEnabled {
            try encodeContainer.encode(pSTNEnabled, forKey: .pSTNEnabled)
        }
        if let profileArn = profileArn {
            try encodeContainer.encode(profileArn, forKey: .profileArn)
        }
        if let profileName = profileName {
            try encodeContainer.encode(profileName, forKey: .profileName)
        }
        if let setupModeDisabled = setupModeDisabled {
            try encodeContainer.encode(setupModeDisabled, forKey: .setupModeDisabled)
        }
        if let temperatureUnit = temperatureUnit {
            try encodeContainer.encode(temperatureUnit.rawValue, forKey: .temperatureUnit)
        }
        if let timezone = timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
        if let wakeWord = wakeWord {
            try encodeContainer.encode(wakeWord.rawValue, forKey: .wakeWord)
        }
    }
}
