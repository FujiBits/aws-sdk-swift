// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateConferenceProviderInput: Equatable {
    /// <p>The request token of the client.</p>
    public var clientRequestToken: String?
    /// <p>The name of the conference provider.</p>
    public let conferenceProviderName: String?
    /// <p>Represents a type within a list of predefined types.</p>
    public let conferenceProviderType: ConferenceProviderType?
    /// <p>The IP endpoint and protocol for calling.</p>
    public let iPDialIn: IPDialIn?
    /// <p>The meeting settings for the conference provider.</p>
    public let meetingSetting: MeetingSetting?
    /// <p>The information for PSTN conferencing.</p>
    public let pSTNDialIn: PSTNDialIn?
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    public let tags: [Tag]?

    public init (
        clientRequestToken: String? = nil,
        conferenceProviderName: String? = nil,
        conferenceProviderType: ConferenceProviderType? = nil,
        iPDialIn: IPDialIn? = nil,
        meetingSetting: MeetingSetting? = nil,
        pSTNDialIn: PSTNDialIn? = nil,
        tags: [Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.conferenceProviderName = conferenceProviderName
        self.conferenceProviderType = conferenceProviderType
        self.iPDialIn = iPDialIn
        self.meetingSetting = meetingSetting
        self.pSTNDialIn = pSTNDialIn
        self.tags = tags
    }
}

extension CreateConferenceProviderInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateConferenceProviderInput(clientRequestToken: \(String(describing: clientRequestToken)), conferenceProviderName: \(String(describing: conferenceProviderName)), conferenceProviderType: \(String(describing: conferenceProviderType)), iPDialIn: \(String(describing: iPDialIn)), meetingSetting: \(String(describing: meetingSetting)), pSTNDialIn: \(String(describing: pSTNDialIn)), tags: \(String(describing: tags)))"}
}
