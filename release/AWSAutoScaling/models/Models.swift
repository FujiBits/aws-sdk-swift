// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension ActiveInstanceRefreshNotFoundFault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActiveInstanceRefreshNotFoundFault(message: \(Swift.String(describing: message)))"}
}

extension ActiveInstanceRefreshNotFoundFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ActiveInstanceRefreshNotFoundFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request failed because an active instance refresh for the specified Auto Scaling group was
///             not found.
public struct ActiveInstanceRefreshNotFoundFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ActiveInstanceRefreshNotFoundFaultBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ActiveInstanceRefreshNotFoundFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingClientTypes.Activity: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityId = "ActivityId"
        case autoScalingGroupARN = "AutoScalingGroupARN"
        case autoScalingGroupName = "AutoScalingGroupName"
        case autoScalingGroupState = "AutoScalingGroupState"
        case cause = "Cause"
        case description = "Description"
        case details = "Details"
        case endTime = "EndTime"
        case progress = "Progress"
        case startTime = "StartTime"
        case statusCode = "StatusCode"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let activityId = activityId {
            try container.encode(activityId, forKey: ClientRuntime.Key("ActivityId"))
        }
        if let autoScalingGroupARN = autoScalingGroupARN {
            try container.encode(autoScalingGroupARN, forKey: ClientRuntime.Key("AutoScalingGroupARN"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let autoScalingGroupState = autoScalingGroupState {
            try container.encode(autoScalingGroupState, forKey: ClientRuntime.Key("AutoScalingGroupState"))
        }
        if let cause = cause {
            try container.encode(cause, forKey: ClientRuntime.Key("Cause"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let details = details {
            try container.encode(details, forKey: ClientRuntime.Key("Details"))
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if progress != 0 {
            try container.encode(progress, forKey: ClientRuntime.Key("Progress"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        if let statusCode = statusCode {
            try container.encode(statusCode, forKey: ClientRuntime.Key("StatusCode"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activityIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityId)
        activityId = activityIdDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let causeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cause)
        cause = causeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let statusCodeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.ScalingActivityStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let progressDecoded = try containerValues.decode(Swift.Int.self, forKey: .progress)
        progress = progressDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .details)
        details = detailsDecoded
        let autoScalingGroupStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupState)
        autoScalingGroupState = autoScalingGroupStateDecoded
        let autoScalingGroupARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupARN)
        autoScalingGroupARN = autoScalingGroupARNDecoded
    }
}

extension AutoScalingClientTypes.Activity: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Activity(activityId: \(Swift.String(describing: activityId)), autoScalingGroupARN: \(Swift.String(describing: autoScalingGroupARN)), autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), autoScalingGroupState: \(Swift.String(describing: autoScalingGroupState)), cause: \(Swift.String(describing: cause)), description: \(Swift.String(describing: description)), details: \(Swift.String(describing: details)), endTime: \(Swift.String(describing: endTime)), progress: \(Swift.String(describing: progress)), startTime: \(Swift.String(describing: startTime)), statusCode: \(Swift.String(describing: statusCode)), statusMessage: \(Swift.String(describing: statusMessage)))"}
}

extension AutoScalingClientTypes {
    /// Describes scaling activity, which is a long-running process that represents a change
    ///             to your Auto Scaling group, such as changing its size or replacing an instance.
    public struct Activity: Swift.Equatable {
        /// The ID of the activity.
        /// This member is required.
        public var activityId: Swift.String?
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public var autoScalingGroupARN: Swift.String?
        /// The name of the Auto Scaling group.
        /// This member is required.
        public var autoScalingGroupName: Swift.String?
        /// The state of the Auto Scaling group, which is either InService or
        ///                 Deleted.
        public var autoScalingGroupState: Swift.String?
        /// The reason the activity began.
        /// This member is required.
        public var cause: Swift.String?
        /// A friendly, more verbose description of the activity.
        public var description: Swift.String?
        /// The details about the activity.
        public var details: Swift.String?
        /// The end time of the activity.
        public var endTime: ClientRuntime.Date?
        /// A value between 0 and 100 that indicates the progress of the activity.
        public var progress: Swift.Int
        /// The start time of the activity.
        /// This member is required.
        public var startTime: ClientRuntime.Date?
        /// The current status of the activity.
        /// This member is required.
        public var statusCode: AutoScalingClientTypes.ScalingActivityStatusCode?
        /// A friendly, more verbose description of the activity status.
        public var statusMessage: Swift.String?

        public init (
            activityId: Swift.String? = nil,
            autoScalingGroupARN: Swift.String? = nil,
            autoScalingGroupName: Swift.String? = nil,
            autoScalingGroupState: Swift.String? = nil,
            cause: Swift.String? = nil,
            description: Swift.String? = nil,
            details: Swift.String? = nil,
            endTime: ClientRuntime.Date? = nil,
            progress: Swift.Int = 0,
            startTime: ClientRuntime.Date? = nil,
            statusCode: AutoScalingClientTypes.ScalingActivityStatusCode? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.activityId = activityId
            self.autoScalingGroupARN = autoScalingGroupARN
            self.autoScalingGroupName = autoScalingGroupName
            self.autoScalingGroupState = autoScalingGroupState
            self.cause = cause
            self.description = description
            self.details = details
            self.endTime = endTime
            self.progress = progress
            self.startTime = startTime
            self.statusCode = statusCode
            self.statusMessage = statusMessage
        }
    }

}

extension AutoScalingClientTypes.AdjustmentType: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustmentType = "AdjustmentType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let adjustmentType = adjustmentType {
            try container.encode(adjustmentType, forKey: ClientRuntime.Key("AdjustmentType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
    }
}

extension AutoScalingClientTypes.AdjustmentType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdjustmentType(adjustmentType: \(Swift.String(describing: adjustmentType)))"}
}

extension AutoScalingClientTypes {
    /// Describes a policy adjustment type.
    public struct AdjustmentType: Swift.Equatable {
        /// The policy adjustment type. The valid values are ChangeInCapacity,
        ///                 ExactCapacity, and PercentChangeInCapacity.
        public var adjustmentType: Swift.String?

        public init (
            adjustmentType: Swift.String? = nil
        )
        {
            self.adjustmentType = adjustmentType
        }
    }

}

extension AutoScalingClientTypes.Alarm: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmARN = "AlarmARN"
        case alarmName = "AlarmName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let alarmARN = alarmARN {
            try container.encode(alarmARN, forKey: ClientRuntime.Key("AlarmARN"))
        }
        if let alarmName = alarmName {
            try container.encode(alarmName, forKey: ClientRuntime.Key("AlarmName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let alarmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmName)
        alarmName = alarmNameDecoded
        let alarmARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alarmARN)
        alarmARN = alarmARNDecoded
    }
}

extension AutoScalingClientTypes.Alarm: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Alarm(alarmARN: \(Swift.String(describing: alarmARN)), alarmName: \(Swift.String(describing: alarmName)))"}
}

extension AutoScalingClientTypes {
    /// Describes an alarm.
    public struct Alarm: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the alarm.
        public var alarmARN: Swift.String?
        /// The name of the alarm.
        public var alarmName: Swift.String?

        public init (
            alarmARN: Swift.String? = nil,
            alarmName: Swift.String? = nil
        )
        {
            self.alarmARN = alarmARN
            self.alarmName = alarmName
        }
    }

}

extension AlreadyExistsFault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AlreadyExistsFault(message: \(Swift.String(describing: message)))"}
}

extension AlreadyExistsFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<AlreadyExistsFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You already have an Auto Scaling group or launch configuration with this name.
public struct AlreadyExistsFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyExistsFaultBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AlreadyExistsFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct AttachInstancesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachInstancesOutputError>
}

extension AttachInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachInstancesInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), instanceIds: \(Swift.String(describing: instanceIds)))"}
}

extension AttachInstancesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("AttachInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct AttachInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachInstancesOutputError>
}

public struct AttachInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachInstancesOutputError>
}

public struct AttachInstancesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachInstancesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AttachInstancesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AttachInstancesInput
    public typealias MOutput = ClientRuntime.OperationOutput<AttachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachInstancesOutputError>
}

public struct AttachInstancesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
    }
}

extension AttachInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachInstancesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachInstancesOutputResponse()"}
}

extension AttachInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachInstancesOutputResponse: Swift.Equatable {

    public init() {}
}

struct AttachInstancesOutputResponseBody: Swift.Equatable {
}

extension AttachInstancesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AttachLoadBalancerTargetGroupsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachLoadBalancerTargetGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachLoadBalancerTargetGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachLoadBalancerTargetGroupsOutputError>
}

extension AttachLoadBalancerTargetGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachLoadBalancerTargetGroupsInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), targetGroupARNs: \(Swift.String(describing: targetGroupARNs)))"}
}

extension AttachLoadBalancerTargetGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let targetGroupARNs = targetGroupARNs {
            var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
            for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("AttachLoadBalancerTargetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct AttachLoadBalancerTargetGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachLoadBalancerTargetGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachLoadBalancerTargetGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachLoadBalancerTargetGroupsOutputError>
}

public struct AttachLoadBalancerTargetGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachLoadBalancerTargetGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachLoadBalancerTargetGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachLoadBalancerTargetGroupsOutputError>
}

public struct AttachLoadBalancerTargetGroupsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachLoadBalancerTargetGroupsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AttachLoadBalancerTargetGroupsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AttachLoadBalancerTargetGroupsInput
    public typealias MOutput = ClientRuntime.OperationOutput<AttachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachLoadBalancerTargetGroupsOutputError>
}

public struct AttachLoadBalancerTargetGroupsInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target
    ///             groups. To get the ARN of a target group, use the Elastic Load Balancing <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups API operation.
    /// This member is required.
    public var targetGroupARNs: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        targetGroupARNs: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.targetGroupARNs = targetGroupARNs
    }
}

extension AttachLoadBalancerTargetGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachLoadBalancerTargetGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachLoadBalancerTargetGroupsOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachLoadBalancerTargetGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachLoadBalancerTargetGroupsOutputResponse()"}
}

extension AttachLoadBalancerTargetGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachLoadBalancerTargetGroupsOutputResponse: Swift.Equatable {

    public init() {}
}

struct AttachLoadBalancerTargetGroupsOutputResponseBody: Swift.Equatable {
}

extension AttachLoadBalancerTargetGroupsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AttachLoadBalancersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachLoadBalancersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachLoadBalancersOutputError>
}

extension AttachLoadBalancersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachLoadBalancersInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), loadBalancerNames: \(Swift.String(describing: loadBalancerNames)))"}
}

extension AttachLoadBalancersInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let loadBalancerNames = loadBalancerNames {
            var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
            for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("AttachLoadBalancers", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct AttachLoadBalancersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachLoadBalancersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachLoadBalancersOutputError>
}

public struct AttachLoadBalancersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachLoadBalancersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AttachLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AttachLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AttachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachLoadBalancersOutputError>
}

public struct AttachLoadBalancersInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AttachLoadBalancersInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AttachLoadBalancersInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AttachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AttachLoadBalancersInput
    public typealias MOutput = ClientRuntime.OperationOutput<AttachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AttachLoadBalancersOutputError>
}

public struct AttachLoadBalancersInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of the load balancers. You can specify up to 10 load balancers.
    /// This member is required.
    public var loadBalancerNames: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        loadBalancerNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.loadBalancerNames = loadBalancerNames
    }
}

extension AttachLoadBalancersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AttachLoadBalancersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AttachLoadBalancersOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension AttachLoadBalancersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AttachLoadBalancersOutputResponse()"}
}

extension AttachLoadBalancersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AttachLoadBalancersOutputResponse: Swift.Equatable {

    public init() {}
}

struct AttachLoadBalancersOutputResponseBody: Swift.Equatable {
}

extension AttachLoadBalancersOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AutoScalingClientTypes.AutoScalingGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupARN = "AutoScalingGroupARN"
        case autoScalingGroupName = "AutoScalingGroupName"
        case availabilityZones = "AvailabilityZones"
        case capacityRebalance = "CapacityRebalance"
        case context = "Context"
        case createdTime = "CreatedTime"
        case defaultCooldown = "DefaultCooldown"
        case desiredCapacity = "DesiredCapacity"
        case enabledMetrics = "EnabledMetrics"
        case healthCheckGracePeriod = "HealthCheckGracePeriod"
        case healthCheckType = "HealthCheckType"
        case instances = "Instances"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case loadBalancerNames = "LoadBalancerNames"
        case maxInstanceLifetime = "MaxInstanceLifetime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case mixedInstancesPolicy = "MixedInstancesPolicy"
        case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
        case placementGroup = "PlacementGroup"
        case predictedCapacity = "PredictedCapacity"
        case serviceLinkedRoleARN = "ServiceLinkedRoleARN"
        case status = "Status"
        case suspendedProcesses = "SuspendedProcesses"
        case tags = "Tags"
        case targetGroupARNs = "TargetGroupARNs"
        case terminationPolicies = "TerminationPolicies"
        case vPCZoneIdentifier = "VPCZoneIdentifier"
        case warmPoolConfiguration = "WarmPoolConfiguration"
        case warmPoolSize = "WarmPoolSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupARN = autoScalingGroupARN {
            try container.encode(autoScalingGroupARN, forKey: ClientRuntime.Key("AutoScalingGroupARN"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
            for (index0, xmlstringmaxlen2550) in availabilityZones.enumerated() {
                try availabilityZonesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let capacityRebalance = capacityRebalance {
            try container.encode(capacityRebalance, forKey: ClientRuntime.Key("CapacityRebalance"))
        }
        if let context = context {
            try container.encode(context, forKey: ClientRuntime.Key("Context"))
        }
        if let createdTime = createdTime {
            try container.encode(ClientRuntime.TimestampWrapper(createdTime, format: .dateTime), forKey: ClientRuntime.Key("createdTime"))
        }
        if let defaultCooldown = defaultCooldown {
            try container.encode(defaultCooldown, forKey: ClientRuntime.Key("DefaultCooldown"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let enabledMetrics = enabledMetrics {
            var enabledMetricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("EnabledMetrics"))
            for (index0, enabledmetric0) in enabledMetrics.enumerated() {
                try enabledMetricsContainer.encode(enabledmetric0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let healthCheckGracePeriod = healthCheckGracePeriod {
            try container.encode(healthCheckGracePeriod, forKey: ClientRuntime.Key("HealthCheckGracePeriod"))
        }
        if let healthCheckType = healthCheckType {
            try container.encode(healthCheckType, forKey: ClientRuntime.Key("HealthCheckType"))
        }
        if let instances = instances {
            var instancesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Instances"))
            for (index0, instance0) in instances.enumerated() {
                try instancesContainer.encode(instance0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let loadBalancerNames = loadBalancerNames {
            var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
            for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxInstanceLifetime = maxInstanceLifetime {
            try container.encode(maxInstanceLifetime, forKey: ClientRuntime.Key("MaxInstanceLifetime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: ClientRuntime.Key("MixedInstancesPolicy"))
        }
        if let newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn {
            try container.encode(newInstancesProtectedFromScaleIn, forKey: ClientRuntime.Key("NewInstancesProtectedFromScaleIn"))
        }
        if let placementGroup = placementGroup {
            try container.encode(placementGroup, forKey: ClientRuntime.Key("PlacementGroup"))
        }
        if let predictedCapacity = predictedCapacity {
            try container.encode(predictedCapacity, forKey: ClientRuntime.Key("PredictedCapacity"))
        }
        if let serviceLinkedRoleARN = serviceLinkedRoleARN {
            try container.encode(serviceLinkedRoleARN, forKey: ClientRuntime.Key("ServiceLinkedRoleARN"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let suspendedProcesses = suspendedProcesses {
            var suspendedProcessesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SuspendedProcesses"))
            for (index0, suspendedprocess0) in suspendedProcesses.enumerated() {
                try suspendedProcessesContainer.encode(suspendedprocess0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tagdescription0) in tags.enumerated() {
                try tagsContainer.encode(tagdescription0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let targetGroupARNs = targetGroupARNs {
            var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
            for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let terminationPolicies = terminationPolicies {
            var terminationPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TerminationPolicies"))
            for (index0, xmlstringmaxlen16000) in terminationPolicies.enumerated() {
                try terminationPoliciesContainer.encode(xmlstringmaxlen16000, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let vPCZoneIdentifier = vPCZoneIdentifier {
            try container.encode(vPCZoneIdentifier, forKey: ClientRuntime.Key("VPCZoneIdentifier"))
        }
        if let warmPoolConfiguration = warmPoolConfiguration {
            try container.encode(warmPoolConfiguration, forKey: ClientRuntime.Key("WarmPoolConfiguration"))
        }
        if let warmPoolSize = warmPoolSize {
            try container.encode(warmPoolSize, forKey: ClientRuntime.Key("WarmPoolSize"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let autoScalingGroupARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupARN)
        autoScalingGroupARN = autoScalingGroupARNDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let mixedInstancesPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MixedInstancesPolicy.self, forKey: .mixedInstancesPolicy)
        mixedInstancesPolicy = mixedInstancesPolicyDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let predictedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .predictedCapacity)
        predictedCapacity = predictedCapacityDecoded
        let defaultCooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .defaultCooldown)
        defaultCooldown = defaultCooldownDecoded
        if containerValues.contains(.availabilityZones) {
            struct KeyVal0{struct member{}}
            let availabilityZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .availabilityZones)
            if let availabilityZonesWrappedContainer = availabilityZonesWrappedContainer {
                let availabilityZonesContainer = try availabilityZonesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var availabilityZonesBuffer:[Swift.String]? = nil
                if let availabilityZonesContainer = availabilityZonesContainer {
                    availabilityZonesBuffer = [Swift.String]()
                    for stringContainer0 in availabilityZonesContainer {
                        availabilityZonesBuffer?.append(stringContainer0)
                    }
                }
                availabilityZones = availabilityZonesBuffer
            } else {
                availabilityZones = []
            }
        } else {
            availabilityZones = nil
        }
        if containerValues.contains(.loadBalancerNames) {
            struct KeyVal0{struct member{}}
            let loadBalancerNamesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerNames)
            if let loadBalancerNamesWrappedContainer = loadBalancerNamesWrappedContainer {
                let loadBalancerNamesContainer = try loadBalancerNamesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var loadBalancerNamesBuffer:[Swift.String]? = nil
                if let loadBalancerNamesContainer = loadBalancerNamesContainer {
                    loadBalancerNamesBuffer = [Swift.String]()
                    for stringContainer0 in loadBalancerNamesContainer {
                        loadBalancerNamesBuffer?.append(stringContainer0)
                    }
                }
                loadBalancerNames = loadBalancerNamesBuffer
            } else {
                loadBalancerNames = []
            }
        } else {
            loadBalancerNames = nil
        }
        if containerValues.contains(.targetGroupARNs) {
            struct KeyVal0{struct member{}}
            let targetGroupARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .targetGroupARNs)
            if let targetGroupARNsWrappedContainer = targetGroupARNsWrappedContainer {
                let targetGroupARNsContainer = try targetGroupARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var targetGroupARNsBuffer:[Swift.String]? = nil
                if let targetGroupARNsContainer = targetGroupARNsContainer {
                    targetGroupARNsBuffer = [Swift.String]()
                    for stringContainer0 in targetGroupARNsContainer {
                        targetGroupARNsBuffer?.append(stringContainer0)
                    }
                }
                targetGroupARNs = targetGroupARNsBuffer
            } else {
                targetGroupARNs = []
            }
        } else {
            targetGroupARNs = nil
        }
        let healthCheckTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckType)
        healthCheckType = healthCheckTypeDecoded
        let healthCheckGracePeriodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckGracePeriod)
        healthCheckGracePeriod = healthCheckGracePeriodDecoded
        if containerValues.contains(.instances) {
            struct KeyVal0{struct member{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Instance].self, forKey: .member)
                var instancesBuffer:[AutoScalingClientTypes.Instance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [AutoScalingClientTypes.Instance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        var createdTimeBuffer:ClientRuntime.Date? = nil
        if let createdTimeDecoded = createdTimeDecoded {
            createdTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createdTimeDecoded, format: .dateTime)
        }
        createdTime = createdTimeBuffer
        if containerValues.contains(.suspendedProcesses) {
            struct KeyVal0{struct member{}}
            let suspendedProcessesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .suspendedProcesses)
            if let suspendedProcessesWrappedContainer = suspendedProcessesWrappedContainer {
                let suspendedProcessesContainer = try suspendedProcessesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.SuspendedProcess].self, forKey: .member)
                var suspendedProcessesBuffer:[AutoScalingClientTypes.SuspendedProcess]? = nil
                if let suspendedProcessesContainer = suspendedProcessesContainer {
                    suspendedProcessesBuffer = [AutoScalingClientTypes.SuspendedProcess]()
                    for structureContainer0 in suspendedProcessesContainer {
                        suspendedProcessesBuffer?.append(structureContainer0)
                    }
                }
                suspendedProcesses = suspendedProcessesBuffer
            } else {
                suspendedProcesses = []
            }
        } else {
            suspendedProcesses = nil
        }
        let placementGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementGroup)
        placementGroup = placementGroupDecoded
        let vPCZoneIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vPCZoneIdentifier)
        vPCZoneIdentifier = vPCZoneIdentifierDecoded
        if containerValues.contains(.enabledMetrics) {
            struct KeyVal0{struct member{}}
            let enabledMetricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .enabledMetrics)
            if let enabledMetricsWrappedContainer = enabledMetricsWrappedContainer {
                let enabledMetricsContainer = try enabledMetricsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.EnabledMetric].self, forKey: .member)
                var enabledMetricsBuffer:[AutoScalingClientTypes.EnabledMetric]? = nil
                if let enabledMetricsContainer = enabledMetricsContainer {
                    enabledMetricsBuffer = [AutoScalingClientTypes.EnabledMetric]()
                    for structureContainer0 in enabledMetricsContainer {
                        enabledMetricsBuffer?.append(structureContainer0)
                    }
                }
                enabledMetrics = enabledMetricsBuffer
            } else {
                enabledMetrics = []
            }
        } else {
            enabledMetrics = nil
        }
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.TagDescription].self, forKey: .member)
                var tagsBuffer:[AutoScalingClientTypes.TagDescription]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [AutoScalingClientTypes.TagDescription]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.terminationPolicies) {
            struct KeyVal0{struct member{}}
            let terminationPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .terminationPolicies)
            if let terminationPoliciesWrappedContainer = terminationPoliciesWrappedContainer {
                let terminationPoliciesContainer = try terminationPoliciesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var terminationPoliciesBuffer:[Swift.String]? = nil
                if let terminationPoliciesContainer = terminationPoliciesContainer {
                    terminationPoliciesBuffer = [Swift.String]()
                    for stringContainer0 in terminationPoliciesContainer {
                        terminationPoliciesBuffer?.append(stringContainer0)
                    }
                }
                terminationPolicies = terminationPoliciesBuffer
            } else {
                terminationPolicies = []
            }
        } else {
            terminationPolicies = nil
        }
        let newInstancesProtectedFromScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .newInstancesProtectedFromScaleIn)
        newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleInDecoded
        let serviceLinkedRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceLinkedRoleARN)
        serviceLinkedRoleARN = serviceLinkedRoleARNDecoded
        let maxInstanceLifetimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxInstanceLifetime)
        maxInstanceLifetime = maxInstanceLifetimeDecoded
        let capacityRebalanceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .capacityRebalance)
        capacityRebalance = capacityRebalanceDecoded
        let warmPoolConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolConfiguration.self, forKey: .warmPoolConfiguration)
        warmPoolConfiguration = warmPoolConfigurationDecoded
        let warmPoolSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .warmPoolSize)
        warmPoolSize = warmPoolSizeDecoded
        let contextDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .context)
        context = contextDecoded
    }
}

extension AutoScalingClientTypes.AutoScalingGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoScalingGroup(autoScalingGroupARN: \(Swift.String(describing: autoScalingGroupARN)), autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), availabilityZones: \(Swift.String(describing: availabilityZones)), capacityRebalance: \(Swift.String(describing: capacityRebalance)), context: \(Swift.String(describing: context)), createdTime: \(Swift.String(describing: createdTime)), defaultCooldown: \(Swift.String(describing: defaultCooldown)), desiredCapacity: \(Swift.String(describing: desiredCapacity)), enabledMetrics: \(Swift.String(describing: enabledMetrics)), healthCheckGracePeriod: \(Swift.String(describing: healthCheckGracePeriod)), healthCheckType: \(Swift.String(describing: healthCheckType)), instances: \(Swift.String(describing: instances)), launchConfigurationName: \(Swift.String(describing: launchConfigurationName)), launchTemplate: \(Swift.String(describing: launchTemplate)), loadBalancerNames: \(Swift.String(describing: loadBalancerNames)), maxInstanceLifetime: \(Swift.String(describing: maxInstanceLifetime)), maxSize: \(Swift.String(describing: maxSize)), minSize: \(Swift.String(describing: minSize)), mixedInstancesPolicy: \(Swift.String(describing: mixedInstancesPolicy)), newInstancesProtectedFromScaleIn: \(Swift.String(describing: newInstancesProtectedFromScaleIn)), placementGroup: \(Swift.String(describing: placementGroup)), predictedCapacity: \(Swift.String(describing: predictedCapacity)), serviceLinkedRoleARN: \(Swift.String(describing: serviceLinkedRoleARN)), status: \(Swift.String(describing: status)), suspendedProcesses: \(Swift.String(describing: suspendedProcesses)), tags: \(Swift.String(describing: tags)), targetGroupARNs: \(Swift.String(describing: targetGroupARNs)), terminationPolicies: \(Swift.String(describing: terminationPolicies)), vPCZoneIdentifier: \(Swift.String(describing: vPCZoneIdentifier)), warmPoolConfiguration: \(Swift.String(describing: warmPoolConfiguration)), warmPoolSize: \(Swift.String(describing: warmPoolSize)))"}
}

extension AutoScalingClientTypes {
    /// Describes an Auto Scaling group.
    public struct AutoScalingGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public var autoScalingGroupARN: Swift.String?
        /// The name of the Auto Scaling group.
        /// This member is required.
        public var autoScalingGroupName: Swift.String?
        /// One or more Availability Zones for the group.
        /// This member is required.
        public var availabilityZones: [Swift.String]?
        /// Indicates whether Capacity Rebalancing is enabled.
        public var capacityRebalance: Swift.Bool?
        /// Reserved.
        public var context: Swift.String?
        /// The date and time the group was created.
        /// This member is required.
        public var createdTime: ClientRuntime.Date?
        /// The duration of the default cooldown period, in seconds.
        /// This member is required.
        public var defaultCooldown: Swift.Int?
        /// The desired size of the group.
        /// This member is required.
        public var desiredCapacity: Swift.Int?
        /// The metrics enabled for the group.
        public var enabledMetrics: [AutoScalingClientTypes.EnabledMetric]?
        /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status
        ///             of an EC2 instance that has come into service.
        public var healthCheckGracePeriod: Swift.Int?
        /// The service to use for the health checks. The valid values are EC2 and
        ///                 ELB. If you configure an Auto Scaling group to use ELB health
        ///             checks, it considers the instance unhealthy if it fails either the EC2 status checks or
        ///             the load balancer health checks.
        /// This member is required.
        public var healthCheckType: Swift.String?
        /// The EC2 instances associated with the group.
        public var instances: [AutoScalingClientTypes.Instance]?
        /// The name of the associated launch configuration.
        public var launchConfigurationName: Swift.String?
        /// The launch template for the group.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// One or more load balancers associated with the group.
        public var loadBalancerNames: [Swift.String]?
        /// The maximum amount of time, in seconds, that an instance can be in service.
        ///         Valid Range: Minimum value of 0.
        public var maxInstanceLifetime: Swift.Int?
        /// The maximum size of the group.
        /// This member is required.
        public var maxSize: Swift.Int?
        /// The minimum size of the group.
        /// This member is required.
        public var minSize: Swift.Int?
        /// The mixed instances policy for the group.
        public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
        /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling
        ///             when scaling in.
        public var newInstancesProtectedFromScaleIn: Swift.Bool?
        /// The name of the placement group into which to launch your instances, if any.
        public var placementGroup: Swift.String?
        /// The predicted capacity of the group when it has a predictive scaling policy.
        public var predictedCapacity: Swift.Int?
        /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to
        ///             call other Amazon Web Services on your behalf.
        public var serviceLinkedRoleARN: Swift.String?
        /// The current state of the group when the DeleteAutoScalingGroup
        ///             operation is in progress.
        public var status: Swift.String?
        /// The suspended processes associated with the group.
        public var suspendedProcesses: [AutoScalingClientTypes.SuspendedProcess]?
        /// The tags for the group.
        public var tags: [AutoScalingClientTypes.TagDescription]?
        /// The Amazon Resource Names (ARN) of the target groups for your load balancer.
        public var targetGroupARNs: [Swift.String]?
        /// The termination policies for the group.
        public var terminationPolicies: [Swift.String]?
        /// One or more subnet IDs, if applicable, separated by commas.
        public var vPCZoneIdentifier: Swift.String?
        /// The warm pool for the group.
        public var warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration?
        /// The current size of the warm pool.
        public var warmPoolSize: Swift.Int?

        public init (
            autoScalingGroupARN: Swift.String? = nil,
            autoScalingGroupName: Swift.String? = nil,
            availabilityZones: [Swift.String]? = nil,
            capacityRebalance: Swift.Bool? = nil,
            context: Swift.String? = nil,
            createdTime: ClientRuntime.Date? = nil,
            defaultCooldown: Swift.Int? = nil,
            desiredCapacity: Swift.Int? = nil,
            enabledMetrics: [AutoScalingClientTypes.EnabledMetric]? = nil,
            healthCheckGracePeriod: Swift.Int? = nil,
            healthCheckType: Swift.String? = nil,
            instances: [AutoScalingClientTypes.Instance]? = nil,
            launchConfigurationName: Swift.String? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            loadBalancerNames: [Swift.String]? = nil,
            maxInstanceLifetime: Swift.Int? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil,
            newInstancesProtectedFromScaleIn: Swift.Bool? = nil,
            placementGroup: Swift.String? = nil,
            predictedCapacity: Swift.Int? = nil,
            serviceLinkedRoleARN: Swift.String? = nil,
            status: Swift.String? = nil,
            suspendedProcesses: [AutoScalingClientTypes.SuspendedProcess]? = nil,
            tags: [AutoScalingClientTypes.TagDescription]? = nil,
            targetGroupARNs: [Swift.String]? = nil,
            terminationPolicies: [Swift.String]? = nil,
            vPCZoneIdentifier: Swift.String? = nil,
            warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration? = nil,
            warmPoolSize: Swift.Int? = nil
        )
        {
            self.autoScalingGroupARN = autoScalingGroupARN
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZones = availabilityZones
            self.capacityRebalance = capacityRebalance
            self.context = context
            self.createdTime = createdTime
            self.defaultCooldown = defaultCooldown
            self.desiredCapacity = desiredCapacity
            self.enabledMetrics = enabledMetrics
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.healthCheckType = healthCheckType
            self.instances = instances
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.loadBalancerNames = loadBalancerNames
            self.maxInstanceLifetime = maxInstanceLifetime
            self.maxSize = maxSize
            self.minSize = minSize
            self.mixedInstancesPolicy = mixedInstancesPolicy
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.placementGroup = placementGroup
            self.predictedCapacity = predictedCapacity
            self.serviceLinkedRoleARN = serviceLinkedRoleARN
            self.status = status
            self.suspendedProcesses = suspendedProcesses
            self.tags = tags
            self.targetGroupARNs = targetGroupARNs
            self.terminationPolicies = terminationPolicies
            self.vPCZoneIdentifier = vPCZoneIdentifier
            self.warmPoolConfiguration = warmPoolConfiguration
            self.warmPoolSize = warmPoolSize
        }
    }

}

extension AutoScalingClientTypes.AutoScalingInstanceDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case availabilityZone = "AvailabilityZone"
        case healthStatus = "HealthStatus"
        case instanceId = "InstanceId"
        case instanceType = "InstanceType"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case lifecycleState = "LifecycleState"
        case protectedFromScaleIn = "ProtectedFromScaleIn"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: ClientRuntime.Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let lifecycleState = lifecycleState {
            try container.encode(lifecycleState, forKey: ClientRuntime.Key("LifecycleState"))
        }
        if let protectedFromScaleIn = protectedFromScaleIn {
            try container.encode(protectedFromScaleIn, forKey: ClientRuntime.Key("ProtectedFromScaleIn"))
        }
        if let weightedCapacity = weightedCapacity {
            try container.encode(weightedCapacity, forKey: ClientRuntime.Key("WeightedCapacity"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let lifecycleStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleState)
        lifecycleState = lifecycleStateDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let protectedFromScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .protectedFromScaleIn)
        protectedFromScaleIn = protectedFromScaleInDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
    }
}

extension AutoScalingClientTypes.AutoScalingInstanceDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoScalingInstanceDetails(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), availabilityZone: \(Swift.String(describing: availabilityZone)), healthStatus: \(Swift.String(describing: healthStatus)), instanceId: \(Swift.String(describing: instanceId)), instanceType: \(Swift.String(describing: instanceType)), launchConfigurationName: \(Swift.String(describing: launchConfigurationName)), launchTemplate: \(Swift.String(describing: launchTemplate)), lifecycleState: \(Swift.String(describing: lifecycleState)), protectedFromScaleIn: \(Swift.String(describing: protectedFromScaleIn)), weightedCapacity: \(Swift.String(describing: weightedCapacity)))"}
}

extension AutoScalingClientTypes {
    /// Describes an EC2 instance associated with an Auto Scaling group.
    public struct AutoScalingInstanceDetails: Swift.Equatable {
        /// The name of the Auto Scaling group for the instance.
        /// This member is required.
        public var autoScalingGroupName: Swift.String?
        /// The Availability Zone for the instance.
        /// This member is required.
        public var availabilityZone: Swift.String?
        /// The last reported health status of this instance. "Healthy" means that the instance is
        ///             healthy and should remain in service. "Unhealthy" means that the instance is unhealthy
        ///             and Amazon EC2 Auto Scaling should terminate and replace it.
        /// This member is required.
        public var healthStatus: Swift.String?
        /// The ID of the instance.
        /// This member is required.
        public var instanceId: Swift.String?
        /// The instance type of the EC2 instance.
        public var instanceType: Swift.String?
        /// The launch configuration used to launch the instance. This value is not available if
        ///             you attached the instance to the Auto Scaling group.
        public var launchConfigurationName: Swift.String?
        /// The launch template for the instance.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// The lifecycle state for the instance. The Quarantined state is not used.
        ///             For information about lifecycle states, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Instance
        ///                 lifecycle in the Amazon EC2 Auto Scaling User Guide.
        ///         Valid Values: Pending | Pending:Wait |
        ///                 Pending:Proceed | Quarantined | InService |
        ///                 Terminating | Terminating:Wait |
        ///                 Terminating:Proceed | Terminated | Detaching
        ///             | Detached | EnteringStandby | Standby |
        ///                 Warmed:Pending | Warmed:Pending:Wait |
        ///                 Warmed:Pending:Proceed | Warmed:Terminating |
        ///                 Warmed:Terminating:Wait | Warmed:Terminating:Proceed |
        ///                 Warmed:Terminated | Warmed:Stopped |
        ///                 Warmed:Running
        ///
        /// This member is required.
        public var lifecycleState: Swift.String?
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling
        ///             in.
        /// This member is required.
        public var protectedFromScaleIn: Swift.Bool?
        /// The number of capacity units contributed by the instance based on its instance
        ///             type.
        ///         Valid Range: Minimum value of 1. Maximum value of 999.
        public var weightedCapacity: Swift.String?

        public init (
            autoScalingGroupName: Swift.String? = nil,
            availabilityZone: Swift.String? = nil,
            healthStatus: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            launchConfigurationName: Swift.String? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            lifecycleState: Swift.String? = nil,
            protectedFromScaleIn: Swift.Bool? = nil,
            weightedCapacity: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZone = availabilityZone
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.lifecycleState = lifecycleState
            self.protectedFromScaleIn = protectedFromScaleIn
            self.weightedCapacity = weightedCapacity
        }
    }

}

public struct BatchDeleteScheduledActionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchDeleteScheduledActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchDeleteScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchDeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchDeleteScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchDeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchDeleteScheduledActionOutputError>
}

extension BatchDeleteScheduledActionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDeleteScheduledActionInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), scheduledActionNames: \(Swift.String(describing: scheduledActionNames)))"}
}

extension BatchDeleteScheduledActionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let scheduledActionNames = scheduledActionNames {
            var scheduledActionNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduledActionNames"))
            for (index0, xmlstringmaxlen2550) in scheduledActionNames.enumerated() {
                try scheduledActionNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("BatchDeleteScheduledAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct BatchDeleteScheduledActionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchDeleteScheduledActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchDeleteScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchDeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchDeleteScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchDeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchDeleteScheduledActionOutputError>
}

public struct BatchDeleteScheduledActionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchDeleteScheduledActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchDeleteScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchDeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchDeleteScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchDeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchDeleteScheduledActionOutputError>
}

public struct BatchDeleteScheduledActionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchDeleteScheduledActionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: BatchDeleteScheduledActionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchDeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = BatchDeleteScheduledActionInput
    public typealias MOutput = ClientRuntime.OperationOutput<BatchDeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchDeleteScheduledActionOutputError>
}

public struct BatchDeleteScheduledActionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of the scheduled actions to delete. The maximum number allowed is 50.
    ///
    /// This member is required.
    public var scheduledActionNames: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        scheduledActionNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledActionNames = scheduledActionNames
    }
}

extension BatchDeleteScheduledActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension BatchDeleteScheduledActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDeleteScheduledActionOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDeleteScheduledActionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDeleteScheduledActionOutputResponse(failedScheduledActions: \(Swift.String(describing: failedScheduledActions)))"}
}

extension BatchDeleteScheduledActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchDeleteScheduledActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedScheduledActions = output.failedScheduledActions
        } else {
            self.failedScheduledActions = nil
        }
    }
}

public struct BatchDeleteScheduledActionOutputResponse: Swift.Equatable {
    /// The names of the scheduled actions that could not be deleted, including an error
    ///             message.
    public var failedScheduledActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]?

    public init (
        failedScheduledActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.failedScheduledActions = failedScheduledActions
    }
}

struct BatchDeleteScheduledActionOutputResponseBody: Swift.Equatable {
    public let failedScheduledActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]?
}

extension BatchDeleteScheduledActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedScheduledActions = "FailedScheduledActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("BatchDeleteScheduledActionResult"))
        if containerValues.contains(.failedScheduledActions) {
            struct KeyVal0{struct member{}}
            let failedScheduledActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failedScheduledActions)
            if let failedScheduledActionsWrappedContainer = failedScheduledActionsWrappedContainer {
                let failedScheduledActionsContainer = try failedScheduledActionsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest].self, forKey: .member)
                var failedScheduledActionsBuffer:[AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]? = nil
                if let failedScheduledActionsContainer = failedScheduledActionsContainer {
                    failedScheduledActionsBuffer = [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]()
                    for structureContainer0 in failedScheduledActionsContainer {
                        failedScheduledActionsBuffer?.append(structureContainer0)
                    }
                }
                failedScheduledActions = failedScheduledActionsBuffer
            } else {
                failedScheduledActions = []
            }
        } else {
            failedScheduledActions = nil
        }
    }
}

public struct BatchPutScheduledUpdateGroupActionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchPutScheduledUpdateGroupActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchPutScheduledUpdateGroupActionOutputError>
}

extension BatchPutScheduledUpdateGroupActionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchPutScheduledUpdateGroupActionInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), scheduledUpdateGroupActions: \(Swift.String(describing: scheduledUpdateGroupActions)))"}
}

extension BatchPutScheduledUpdateGroupActionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let scheduledUpdateGroupActions = scheduledUpdateGroupActions {
            var scheduledUpdateGroupActionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduledUpdateGroupActions"))
            for (index0, scheduledupdategroupactionrequest0) in scheduledUpdateGroupActions.enumerated() {
                try scheduledUpdateGroupActionsContainer.encode(scheduledupdategroupactionrequest0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("BatchPutScheduledUpdateGroupAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct BatchPutScheduledUpdateGroupActionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchPutScheduledUpdateGroupActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchPutScheduledUpdateGroupActionOutputError>
}

public struct BatchPutScheduledUpdateGroupActionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchPutScheduledUpdateGroupActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchPutScheduledUpdateGroupActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchPutScheduledUpdateGroupActionOutputError>
}

public struct BatchPutScheduledUpdateGroupActionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchPutScheduledUpdateGroupActionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: BatchPutScheduledUpdateGroupActionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = BatchPutScheduledUpdateGroupActionInput
    public typealias MOutput = ClientRuntime.OperationOutput<BatchPutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchPutScheduledUpdateGroupActionOutputError>
}

public struct BatchPutScheduledUpdateGroupActionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more scheduled actions. The maximum number allowed is 50.
    /// This member is required.
    public var scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
    }
}

extension BatchPutScheduledUpdateGroupActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension BatchPutScheduledUpdateGroupActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchPutScheduledUpdateGroupActionOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchPutScheduledUpdateGroupActionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchPutScheduledUpdateGroupActionOutputResponse(failedScheduledUpdateGroupActions: \(Swift.String(describing: failedScheduledUpdateGroupActions)))"}
}

extension BatchPutScheduledUpdateGroupActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchPutScheduledUpdateGroupActionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedScheduledUpdateGroupActions = output.failedScheduledUpdateGroupActions
        } else {
            self.failedScheduledUpdateGroupActions = nil
        }
    }
}

public struct BatchPutScheduledUpdateGroupActionOutputResponse: Swift.Equatable {
    /// The names of the scheduled actions that could not be created or updated, including an
    ///             error message.
    public var failedScheduledUpdateGroupActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]?

    public init (
        failedScheduledUpdateGroupActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.failedScheduledUpdateGroupActions = failedScheduledUpdateGroupActions
    }
}

struct BatchPutScheduledUpdateGroupActionOutputResponseBody: Swift.Equatable {
    public let failedScheduledUpdateGroupActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]?
}

extension BatchPutScheduledUpdateGroupActionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedScheduledUpdateGroupActions = "FailedScheduledUpdateGroupActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("BatchPutScheduledUpdateGroupActionResult"))
        if containerValues.contains(.failedScheduledUpdateGroupActions) {
            struct KeyVal0{struct member{}}
            let failedScheduledUpdateGroupActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .failedScheduledUpdateGroupActions)
            if let failedScheduledUpdateGroupActionsWrappedContainer = failedScheduledUpdateGroupActionsWrappedContainer {
                let failedScheduledUpdateGroupActionsContainer = try failedScheduledUpdateGroupActionsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest].self, forKey: .member)
                var failedScheduledUpdateGroupActionsBuffer:[AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]? = nil
                if let failedScheduledUpdateGroupActionsContainer = failedScheduledUpdateGroupActionsContainer {
                    failedScheduledUpdateGroupActionsBuffer = [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]()
                    for structureContainer0 in failedScheduledUpdateGroupActionsContainer {
                        failedScheduledUpdateGroupActionsBuffer?.append(structureContainer0)
                    }
                }
                failedScheduledUpdateGroupActions = failedScheduledUpdateGroupActionsBuffer
            } else {
                failedScheduledUpdateGroupActions = []
            }
        } else {
            failedScheduledUpdateGroupActions = nil
        }
    }
}

extension AutoScalingClientTypes.BlockDeviceMapping: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deviceName = "DeviceName"
        case ebs = "Ebs"
        case noDevice = "NoDevice"
        case virtualName = "VirtualName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deviceName = deviceName {
            try container.encode(deviceName, forKey: ClientRuntime.Key("DeviceName"))
        }
        if let ebs = ebs {
            try container.encode(ebs, forKey: ClientRuntime.Key("Ebs"))
        }
        if let noDevice = noDevice {
            try container.encode(noDevice, forKey: ClientRuntime.Key("NoDevice"))
        }
        if let virtualName = virtualName {
            try container.encode(virtualName, forKey: ClientRuntime.Key("VirtualName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let virtualNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .virtualName)
        virtualName = virtualNameDecoded
        let deviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deviceName)
        deviceName = deviceNameDecoded
        let ebsDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.Ebs.self, forKey: .ebs)
        ebs = ebsDecoded
        let noDeviceDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noDevice)
        noDevice = noDeviceDecoded
    }
}

extension AutoScalingClientTypes.BlockDeviceMapping: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BlockDeviceMapping(deviceName: \(Swift.String(describing: deviceName)), ebs: \(Swift.String(describing: ebs)), noDevice: \(Swift.String(describing: noDevice)), virtualName: \(Swift.String(describing: virtualName)))"}
}

extension AutoScalingClientTypes {
    /// Describes a block device mapping.
    public struct BlockDeviceMapping: Swift.Equatable {
        /// The device name exposed to the EC2 instance (for example, /dev/sdh or
        ///                 xvdh). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html">Device Naming on Linux
        ///                 Instances in the Amazon EC2 User Guide for Linux Instances.
        /// This member is required.
        public var deviceName: Swift.String?
        /// Parameters used to automatically set up EBS volumes when an instance is
        ///             launched.
        ///         You can specify either VirtualName or Ebs, but not
        ///             both.
        public var ebs: AutoScalingClientTypes.Ebs?
        /// Setting this value to true suppresses the specified device included in
        ///             the block device mapping of the AMI.
        ///         If NoDevice is true for the root device, instances might
        ///             fail the EC2 health check. In that case, Amazon EC2 Auto Scaling launches replacement instances.
        ///         If you specify NoDevice, you cannot specify Ebs.
        public var noDevice: Swift.Bool?
        /// The name of the virtual device (for example, ephemeral0).
        ///         You can specify either VirtualName or Ebs, but not
        ///             both.
        public var virtualName: Swift.String?

        public init (
            deviceName: Swift.String? = nil,
            ebs: AutoScalingClientTypes.Ebs? = nil,
            noDevice: Swift.Bool? = nil,
            virtualName: Swift.String? = nil
        )
        {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }
    }

}

public struct CancelInstanceRefreshInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelInstanceRefreshInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelInstanceRefreshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelInstanceRefreshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelInstanceRefreshOutputError>
}

extension CancelInstanceRefreshInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelInstanceRefreshInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)))"}
}

extension CancelInstanceRefreshInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        try container.encode("CancelInstanceRefresh", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CancelInstanceRefreshInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelInstanceRefreshInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelInstanceRefreshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelInstanceRefreshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelInstanceRefreshOutputError>
}

public struct CancelInstanceRefreshInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelInstanceRefreshInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelInstanceRefreshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelInstanceRefreshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelInstanceRefreshOutputError>
}

public struct CancelInstanceRefreshInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelInstanceRefreshInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CancelInstanceRefreshInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CancelInstanceRefreshInput
    public typealias MOutput = ClientRuntime.OperationOutput<CancelInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelInstanceRefreshOutputError>
}

public struct CancelInstanceRefreshInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
    }
}

extension CancelInstanceRefreshOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CancelInstanceRefreshOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ActiveInstanceRefreshNotFound" : self = .activeInstanceRefreshNotFoundFault(try ActiveInstanceRefreshNotFoundFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelInstanceRefreshOutputError: Swift.Error, Swift.Equatable {
    case activeInstanceRefreshNotFoundFault(ActiveInstanceRefreshNotFoundFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelInstanceRefreshOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelInstanceRefreshOutputResponse(instanceRefreshId: \(Swift.String(describing: instanceRefreshId)))"}
}

extension CancelInstanceRefreshOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CancelInstanceRefreshOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceRefreshId = output.instanceRefreshId
        } else {
            self.instanceRefreshId = nil
        }
    }
}

public struct CancelInstanceRefreshOutputResponse: Swift.Equatable {
    /// The instance refresh ID.
    public var instanceRefreshId: Swift.String?

    public init (
        instanceRefreshId: Swift.String? = nil
    )
    {
        self.instanceRefreshId = instanceRefreshId
    }
}

struct CancelInstanceRefreshOutputResponseBody: Swift.Equatable {
    public let instanceRefreshId: Swift.String?
}

extension CancelInstanceRefreshOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceRefreshId = "InstanceRefreshId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CancelInstanceRefreshResult"))
        let instanceRefreshIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRefreshId)
        instanceRefreshId = instanceRefreshIdDecoded
    }
}

extension AutoScalingClientTypes.CapacityForecast: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let timestamps = timestamps {
            var timestampsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Timestamps"))
            for (index0, timestamptype0) in timestamps.enumerated() {
                try timestampsContainer.encode(TimestampWrapper(timestamptype0, format: .dateTime), forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
            for (index0, metricscale0) in values.enumerated() {
                try valuesContainer.encode(metricscale0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.timestamps) {
            struct KeyVal0{struct member{}}
            let timestampsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .timestamps)
            if let timestampsWrappedContainer = timestampsWrappedContainer {
                let timestampsContainer = try timestampsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var timestampsBuffer:[ClientRuntime.Date]? = nil
                if let timestampsContainer = timestampsContainer {
                    timestampsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in timestampsContainer {
                        try timestampsBuffer?.append(ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampContainer0, format: .dateTime))
                    }
                }
                timestamps = timestampsBuffer
            } else {
                timestamps = []
            }
        } else {
            timestamps = nil
        }
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var valuesBuffer:[Swift.Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension AutoScalingClientTypes.CapacityForecast: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CapacityForecast(timestamps: \(Swift.String(describing: timestamps)), values: \(Swift.String(describing: values)))"}
}

extension AutoScalingClientTypes {
    /// A GetPredictiveScalingForecast call returns the capacity forecast for a
    ///             predictive scaling policy. This structure includes the data points for that capacity
    ///             forecast, along with the timestamps of those data points.
    public struct CapacityForecast: Swift.Equatable {
        /// The time stamps for the data points, in UTC format.
        /// This member is required.
        public var timestamps: [ClientRuntime.Date]?
        /// The values of the data points.
        /// This member is required.
        public var values: [Swift.Double]?

        public init (
            timestamps: [ClientRuntime.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.timestamps = timestamps
            self.values = values
        }
    }

}

public struct CompleteLifecycleActionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CompleteLifecycleActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CompleteLifecycleActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CompleteLifecycleActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CompleteLifecycleActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CompleteLifecycleActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CompleteLifecycleActionOutputError>
}

extension CompleteLifecycleActionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompleteLifecycleActionInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), instanceId: \(Swift.String(describing: instanceId)), lifecycleActionResult: \(Swift.String(describing: lifecycleActionResult)), lifecycleActionToken: \(Swift.String(describing: lifecycleActionToken)), lifecycleHookName: \(Swift.String(describing: lifecycleHookName)))"}
}

extension CompleteLifecycleActionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let lifecycleActionResult = lifecycleActionResult {
            try container.encode(lifecycleActionResult, forKey: ClientRuntime.Key("LifecycleActionResult"))
        }
        if let lifecycleActionToken = lifecycleActionToken {
            try container.encode(lifecycleActionToken, forKey: ClientRuntime.Key("LifecycleActionToken"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        try container.encode("CompleteLifecycleAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CompleteLifecycleActionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CompleteLifecycleActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CompleteLifecycleActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CompleteLifecycleActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CompleteLifecycleActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CompleteLifecycleActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CompleteLifecycleActionOutputError>
}

public struct CompleteLifecycleActionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CompleteLifecycleActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CompleteLifecycleActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CompleteLifecycleActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CompleteLifecycleActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CompleteLifecycleActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CompleteLifecycleActionOutputError>
}

public struct CompleteLifecycleActionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CompleteLifecycleActionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CompleteLifecycleActionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CompleteLifecycleActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CompleteLifecycleActionInput
    public typealias MOutput = ClientRuntime.OperationOutput<CompleteLifecycleActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CompleteLifecycleActionOutputError>
}

public struct CompleteLifecycleActionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The ID of the instance.
    public var instanceId: Swift.String?
    /// The action for the group to take. This parameter can be either CONTINUE
    ///             or ABANDON.
    /// This member is required.
    public var lifecycleActionResult: Swift.String?
    /// A universally unique identifier (UUID) that identifies a specific lifecycle action
    ///             associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you
    ///             specified when you created the lifecycle hook.
    public var lifecycleActionToken: Swift.String?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        lifecycleActionResult: Swift.String? = nil,
        lifecycleActionToken: Swift.String? = nil,
        lifecycleHookName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceId = instanceId
        self.lifecycleActionResult = lifecycleActionResult
        self.lifecycleActionToken = lifecycleActionToken
        self.lifecycleHookName = lifecycleHookName
    }
}

extension CompleteLifecycleActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CompleteLifecycleActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CompleteLifecycleActionOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CompleteLifecycleActionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CompleteLifecycleActionOutputResponse()"}
}

extension CompleteLifecycleActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CompleteLifecycleActionOutputResponse: Swift.Equatable {

    public init() {}
}

struct CompleteLifecycleActionOutputResponseBody: Swift.Equatable {
}

extension CompleteLifecycleActionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateAutoScalingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAutoScalingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAutoScalingGroupOutputError>
}

extension CreateAutoScalingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAutoScalingGroupInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), availabilityZones: \(Swift.String(describing: availabilityZones)), capacityRebalance: \(Swift.String(describing: capacityRebalance)), context: \(Swift.String(describing: context)), defaultCooldown: \(Swift.String(describing: defaultCooldown)), desiredCapacity: \(Swift.String(describing: desiredCapacity)), healthCheckGracePeriod: \(Swift.String(describing: healthCheckGracePeriod)), healthCheckType: \(Swift.String(describing: healthCheckType)), instanceId: \(Swift.String(describing: instanceId)), launchConfigurationName: \(Swift.String(describing: launchConfigurationName)), launchTemplate: \(Swift.String(describing: launchTemplate)), lifecycleHookSpecificationList: \(Swift.String(describing: lifecycleHookSpecificationList)), loadBalancerNames: \(Swift.String(describing: loadBalancerNames)), maxInstanceLifetime: \(Swift.String(describing: maxInstanceLifetime)), maxSize: \(Swift.String(describing: maxSize)), minSize: \(Swift.String(describing: minSize)), mixedInstancesPolicy: \(Swift.String(describing: mixedInstancesPolicy)), newInstancesProtectedFromScaleIn: \(Swift.String(describing: newInstancesProtectedFromScaleIn)), placementGroup: \(Swift.String(describing: placementGroup)), serviceLinkedRoleARN: \(Swift.String(describing: serviceLinkedRoleARN)), tags: \(Swift.String(describing: tags)), targetGroupARNs: \(Swift.String(describing: targetGroupARNs)), terminationPolicies: \(Swift.String(describing: terminationPolicies)), vPCZoneIdentifier: \(Swift.String(describing: vPCZoneIdentifier)))"}
}

extension CreateAutoScalingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
            for (index0, xmlstringmaxlen2550) in availabilityZones.enumerated() {
                try availabilityZonesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let capacityRebalance = capacityRebalance {
            try container.encode(capacityRebalance, forKey: ClientRuntime.Key("CapacityRebalance"))
        }
        if let context = context {
            try container.encode(context, forKey: ClientRuntime.Key("Context"))
        }
        if let defaultCooldown = defaultCooldown {
            try container.encode(defaultCooldown, forKey: ClientRuntime.Key("DefaultCooldown"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let healthCheckGracePeriod = healthCheckGracePeriod {
            try container.encode(healthCheckGracePeriod, forKey: ClientRuntime.Key("HealthCheckGracePeriod"))
        }
        if let healthCheckType = healthCheckType {
            try container.encode(healthCheckType, forKey: ClientRuntime.Key("HealthCheckType"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let lifecycleHookSpecificationList = lifecycleHookSpecificationList {
            var lifecycleHookSpecificationListContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LifecycleHookSpecificationList"))
            for (index0, lifecyclehookspecification0) in lifecycleHookSpecificationList.enumerated() {
                try lifecycleHookSpecificationListContainer.encode(lifecyclehookspecification0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let loadBalancerNames = loadBalancerNames {
            var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
            for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxInstanceLifetime = maxInstanceLifetime {
            try container.encode(maxInstanceLifetime, forKey: ClientRuntime.Key("MaxInstanceLifetime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: ClientRuntime.Key("MixedInstancesPolicy"))
        }
        if let newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn {
            try container.encode(newInstancesProtectedFromScaleIn, forKey: ClientRuntime.Key("NewInstancesProtectedFromScaleIn"))
        }
        if let placementGroup = placementGroup {
            try container.encode(placementGroup, forKey: ClientRuntime.Key("PlacementGroup"))
        }
        if let serviceLinkedRoleARN = serviceLinkedRoleARN {
            try container.encode(serviceLinkedRoleARN, forKey: ClientRuntime.Key("ServiceLinkedRoleARN"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let targetGroupARNs = targetGroupARNs {
            var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
            for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let terminationPolicies = terminationPolicies {
            var terminationPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TerminationPolicies"))
            for (index0, xmlstringmaxlen16000) in terminationPolicies.enumerated() {
                try terminationPoliciesContainer.encode(xmlstringmaxlen16000, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let vPCZoneIdentifier = vPCZoneIdentifier {
            try container.encode(vPCZoneIdentifier, forKey: ClientRuntime.Key("VPCZoneIdentifier"))
        }
        try container.encode("CreateAutoScalingGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateAutoScalingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAutoScalingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAutoScalingGroupOutputError>
}

public struct CreateAutoScalingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAutoScalingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAutoScalingGroupOutputError>
}

public struct CreateAutoScalingGroupInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAutoScalingGroupInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateAutoScalingGroupInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateAutoScalingGroupInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAutoScalingGroupOutputError>
}

public struct CreateAutoScalingGroupInput: Swift.Equatable {
    /// The name of the Auto Scaling group. This name must be unique per Region per account.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// A list of Availability Zones where instances in the Auto Scaling group can be created. This
    ///             parameter is optional if you specify one or more subnets for
    ///                 VPCZoneIdentifier.
    ///         Conditional: If your account supports EC2-Classic and VPC, this parameter is required
    ///             to launch instances into EC2-Classic.
    public var availabilityZones: [Swift.String]?
    /// Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is
    ///             disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot
    ///             Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of
    ///             interruption. After launching a new instance, it then terminates an old instance. For
    ///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/capacity-rebalance.html">Amazon EC2 Auto Scaling Capacity
    ///                 Rebalancing in the Amazon EC2 Auto Scaling User Guide.
    public var capacityRebalance: Swift.Bool?
    /// Reserved.
    public var context: Swift.String?
    /// The amount of time, in seconds, after a scaling activity completes before another
    ///             scaling activity can start. The default value is 300. This setting applies
    ///             when using simple scaling policies, but not when using other scaling policies or
    ///             scheduled scaling. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling
    ///             in the Amazon EC2 Auto Scaling User Guide.
    public var defaultCooldown: Swift.Int?
    /// The desired capacity is the initial capacity of the Auto Scaling group at the time of its
    ///             creation and the capacity it attempts to maintain. It can scale beyond this capacity if
    ///             you configure auto scaling. This number must be greater than or equal to the minimum
    ///             size of the group and less than or equal to the maximum size of the group. If you do not
    ///             specify a desired capacity, the default is the minimum size of the group.
    public var desiredCapacity: Swift.Int?
    /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status
    ///             of an EC2 instance that has come into service. During this time, any health check
    ///             failures for the instance are ignored. The default value is 0. For more
    ///             information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health
    ///                 check grace period in the Amazon EC2 Auto Scaling User Guide.
    ///         Conditional: Required if you are adding an ELB health check.
    public var healthCheckGracePeriod: Swift.Int?
    /// The service to use for the health checks. The valid values are EC2
    ///             (default) and ELB. If you configure an Auto Scaling group to use load balancer
    ///             (ELB) health checks, it considers the instance unhealthy if it fails either the EC2
    ///             status checks or the load balancer health checks. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health checks
    ///                 for Auto Scaling instances in the Amazon EC2 Auto Scaling User Guide.
    public var healthCheckType: Swift.String?
    /// The ID of the instance used to base the launch configuration on. If specified, Amazon
    ///             EC2 Auto Scaling uses the configuration values from the specified instance to create a
    ///             new launch configuration. To get the instance ID, use the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html">DescribeInstances API operation. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html">Creating an Auto Scaling group using an EC2 instance in the
    ///                 Amazon EC2 Auto Scaling User Guide.
    public var instanceId: Swift.String?
    /// The name of the launch configuration to use to launch instances.
    ///         Conditional: You must specify either a launch template (LaunchTemplate or
    ///                 MixedInstancesPolicy) or a launch configuration
    ///                 (LaunchConfigurationName or InstanceId).
    public var launchConfigurationName: Swift.String?
    /// Parameters used to specify the launch template and version to use to launch instances.
    ///         Conditional: You must specify either a launch template (LaunchTemplate or
    ///                 MixedInstancesPolicy) or a launch configuration
    ///                 (LaunchConfigurationName or InstanceId).
    ///
    ///             The launch template that is specified must be configured for use with an Auto Scaling
    ///                 group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html">Creating a launch
    ///                     template for an Auto Scaling group in the
    ///                 Amazon EC2 Auto Scaling User Guide.
    ///
    public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
    /// One or more lifecycle hooks for the group, which specify actions to perform when
    ///             Amazon EC2 Auto Scaling launches or terminates instances.
    public var lifecycleHookSpecificationList: [AutoScalingClientTypes.LifecycleHookSpecification]?
    /// A list of Classic Load Balancers associated with this Auto Scaling group. For
    ///             Application Load Balancers, Network Load Balancers, and Gateway Load Balancers, specify
    ///             the TargetGroupARNs property instead.
    public var loadBalancerNames: [Swift.String]?
    /// The maximum amount of time, in seconds, that an instance can be in service. The
    ///             default is null. If specified, the value must be either 0 or a number equal to or
    ///             greater than 86,400 seconds (1 day). For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling instances based on maximum instance lifetime in the
    ///                 Amazon EC2 Auto Scaling User Guide.
    public var maxInstanceLifetime: Swift.Int?
    /// The maximum size of the group.
    ///
    ///             With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to
    ///                 go above MaxSize to meet your capacity requirements. In this event,
    ///                 Amazon EC2 Auto Scaling will never go above MaxSize by more than your largest instance
    ///                 weight (weights that define how many units each instance contributes to the desired
    ///                 capacity of the group).
    ///
    /// This member is required.
    public var maxSize: Swift.Int?
    /// The minimum size of the group.
    /// This member is required.
    public var minSize: Swift.Int?
    /// An embedded object that specifies a mixed instances policy. The required properties
    ///             must be specified. If optional properties are unspecified, their default values are
    ///             used.
    ///         The policy includes properties that not only define the distribution of On-Demand
    ///             Instances and Spot Instances, the maximum price to pay for Spot Instances, and how the
    ///             Auto Scaling group allocates instance types to fulfill On-Demand and Spot capacities, but also
    ///             the properties that specify the instance configuration information—the launch template
    ///             and instance types. The policy can also include a weight for each instance type and
    ///             different launch templates for individual instance types. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling groups with multiple
    ///                 instance types and purchase options in the Amazon EC2 Auto Scaling User
    ///                 Guide.
    public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
    /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling
    ///             when scaling in. For more information about preventing instances from terminating on
    ///             scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance scale-in protection in the
    ///             Amazon EC2 Auto Scaling User Guide.
    public var newInstancesProtectedFromScaleIn: Swift.Bool?
    /// The name of an existing placement group into which to launch your instances, if any. A
    ///             placement group is a logical grouping of instances within a single Availability Zone.
    ///             You cannot specify multiple Availability Zones and a placement group. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups in the
    ///                 Amazon EC2 User Guide for Linux Instances.
    public var placementGroup: Swift.String?
    /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to
    ///             call other Amazon Web Services on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role
    ///             named AWSServiceRoleForAutoScaling, which it creates if it does not exist.
    ///             For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-linked
    ///                 roles in the Amazon EC2 Auto Scaling User Guide.
    public var serviceLinkedRoleARN: Swift.String?
    /// One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2
    ///             instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS
    ///             volumes, specify the tags in a launch template but use caution. If the launch template
    ///             specifies an instance tag with a key that is also specified for the Auto Scaling group, Amazon EC2 Auto Scaling
    ///             overrides the value of that instance tag with the value specified by the Auto Scaling group. For
    ///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling groups and
    ///                 instances in the Amazon EC2 Auto Scaling User Guide.
    public var tags: [AutoScalingClientTypes.Tag]?
    /// The Amazon Resource Names (ARN) of the target groups to associate with the Auto Scaling group.
    ///             Instances are registered as targets in a target group, and traffic is routed to the
    ///             target group. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html">Elastic Load Balancing and
    ///                 Amazon EC2 Auto Scaling in the Amazon EC2 Auto Scaling User Guide.
    public var targetGroupARNs: [Swift.String]?
    /// A policy or a list of policies that are used to select the instance to terminate.
    ///             These policies are executed in the order that you list them. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling which Auto Scaling
    ///                 instances terminate during scale in in the
    ///                 Amazon EC2 Auto Scaling User Guide.
    public var terminationPolicies: [Swift.String]?
    /// A comma-separated list of subnet IDs for a virtual private cloud (VPC) where instances
    ///             in the Auto Scaling group can be created. If you specify VPCZoneIdentifier with
    ///                 AvailabilityZones, the subnets that you specify for this parameter must
    ///             reside in those Availability Zones.
    ///         Conditional: If your account supports EC2-Classic and VPC, this parameter is required
    ///             to launch instances into a VPC.
    public var vPCZoneIdentifier: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        capacityRebalance: Swift.Bool? = nil,
        context: Swift.String? = nil,
        defaultCooldown: Swift.Int? = nil,
        desiredCapacity: Swift.Int? = nil,
        healthCheckGracePeriod: Swift.Int? = nil,
        healthCheckType: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        launchConfigurationName: Swift.String? = nil,
        launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
        lifecycleHookSpecificationList: [AutoScalingClientTypes.LifecycleHookSpecification]? = nil,
        loadBalancerNames: [Swift.String]? = nil,
        maxInstanceLifetime: Swift.Int? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil,
        newInstancesProtectedFromScaleIn: Swift.Bool? = nil,
        placementGroup: Swift.String? = nil,
        serviceLinkedRoleARN: Swift.String? = nil,
        tags: [AutoScalingClientTypes.Tag]? = nil,
        targetGroupARNs: [Swift.String]? = nil,
        terminationPolicies: [Swift.String]? = nil,
        vPCZoneIdentifier: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZones = availabilityZones
        self.capacityRebalance = capacityRebalance
        self.context = context
        self.defaultCooldown = defaultCooldown
        self.desiredCapacity = desiredCapacity
        self.healthCheckGracePeriod = healthCheckGracePeriod
        self.healthCheckType = healthCheckType
        self.instanceId = instanceId
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.lifecycleHookSpecificationList = lifecycleHookSpecificationList
        self.loadBalancerNames = loadBalancerNames
        self.maxInstanceLifetime = maxInstanceLifetime
        self.maxSize = maxSize
        self.minSize = minSize
        self.mixedInstancesPolicy = mixedInstancesPolicy
        self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
        self.placementGroup = placementGroup
        self.serviceLinkedRoleARN = serviceLinkedRoleARN
        self.tags = tags
        self.targetGroupARNs = targetGroupARNs
        self.terminationPolicies = terminationPolicies
        self.vPCZoneIdentifier = vPCZoneIdentifier
    }
}

extension CreateAutoScalingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateAutoScalingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAutoScalingGroupOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAutoScalingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAutoScalingGroupOutputResponse()"}
}

extension CreateAutoScalingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateAutoScalingGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateAutoScalingGroupOutputResponseBody: Swift.Equatable {
}

extension CreateAutoScalingGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateLaunchConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLaunchConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLaunchConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLaunchConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLaunchConfigurationOutputError>
}

extension CreateLaunchConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLaunchConfigurationInput(associatePublicIpAddress: \(Swift.String(describing: associatePublicIpAddress)), blockDeviceMappings: \(Swift.String(describing: blockDeviceMappings)), classicLinkVPCId: \(Swift.String(describing: classicLinkVPCId)), classicLinkVPCSecurityGroups: \(Swift.String(describing: classicLinkVPCSecurityGroups)), ebsOptimized: \(Swift.String(describing: ebsOptimized)), iamInstanceProfile: \(Swift.String(describing: iamInstanceProfile)), imageId: \(Swift.String(describing: imageId)), instanceId: \(Swift.String(describing: instanceId)), instanceMonitoring: \(Swift.String(describing: instanceMonitoring)), instanceType: \(Swift.String(describing: instanceType)), kernelId: \(Swift.String(describing: kernelId)), keyName: \(Swift.String(describing: keyName)), launchConfigurationName: \(Swift.String(describing: launchConfigurationName)), metadataOptions: \(Swift.String(describing: metadataOptions)), placementTenancy: \(Swift.String(describing: placementTenancy)), ramdiskId: \(Swift.String(describing: ramdiskId)), securityGroups: \(Swift.String(describing: securityGroups)), spotPrice: \(Swift.String(describing: spotPrice)), userData: \(Swift.String(describing: userData)))"}
}

extension CreateLaunchConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let associatePublicIpAddress = associatePublicIpAddress {
            try container.encode(associatePublicIpAddress, forKey: ClientRuntime.Key("AssociatePublicIpAddress"))
        }
        if let blockDeviceMappings = blockDeviceMappings {
            var blockDeviceMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BlockDeviceMappings"))
            for (index0, blockdevicemapping0) in blockDeviceMappings.enumerated() {
                try blockDeviceMappingsContainer.encode(blockdevicemapping0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let classicLinkVPCId = classicLinkVPCId {
            try container.encode(classicLinkVPCId, forKey: ClientRuntime.Key("ClassicLinkVPCId"))
        }
        if let classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups {
            var classicLinkVPCSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClassicLinkVPCSecurityGroups"))
            for (index0, xmlstringmaxlen2550) in classicLinkVPCSecurityGroups.enumerated() {
                try classicLinkVPCSecurityGroupsContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let ebsOptimized = ebsOptimized {
            try container.encode(ebsOptimized, forKey: ClientRuntime.Key("EbsOptimized"))
        }
        if let iamInstanceProfile = iamInstanceProfile {
            try container.encode(iamInstanceProfile, forKey: ClientRuntime.Key("IamInstanceProfile"))
        }
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceMonitoring = instanceMonitoring {
            try container.encode(instanceMonitoring, forKey: ClientRuntime.Key("InstanceMonitoring"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let kernelId = kernelId {
            try container.encode(kernelId, forKey: ClientRuntime.Key("KernelId"))
        }
        if let keyName = keyName {
            try container.encode(keyName, forKey: ClientRuntime.Key("KeyName"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let metadataOptions = metadataOptions {
            try container.encode(metadataOptions, forKey: ClientRuntime.Key("MetadataOptions"))
        }
        if let placementTenancy = placementTenancy {
            try container.encode(placementTenancy, forKey: ClientRuntime.Key("PlacementTenancy"))
        }
        if let ramdiskId = ramdiskId {
            try container.encode(ramdiskId, forKey: ClientRuntime.Key("RamdiskId"))
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
            for (index0, xmlstring0) in securityGroups.enumerated() {
                try securityGroupsContainer.encode(xmlstring0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let spotPrice = spotPrice {
            try container.encode(spotPrice, forKey: ClientRuntime.Key("SpotPrice"))
        }
        if let userData = userData {
            try container.encode(userData, forKey: ClientRuntime.Key("UserData"))
        }
        try container.encode("CreateLaunchConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateLaunchConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLaunchConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLaunchConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLaunchConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLaunchConfigurationOutputError>
}

public struct CreateLaunchConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLaunchConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLaunchConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLaunchConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLaunchConfigurationOutputError>
}

public struct CreateLaunchConfigurationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLaunchConfigurationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateLaunchConfigurationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLaunchConfigurationInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLaunchConfigurationOutputError>
}

public struct CreateLaunchConfigurationInput: Swift.Equatable {
    /// For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether
    ///             to assign a public IP address to the group's instances. If you specify
    ///             true, each instance in the Auto Scaling group receives a unique public IP address.
    ///             For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling instances in a
    ///                 VPC in the Amazon EC2 Auto Scaling User Guide.
    ///         If you specify this parameter, you must specify at least one subnet for
    ///                 VPCZoneIdentifier when you create your group.
    ///
    ///             If the instance is launched into a default subnet, the default is to assign a
    ///                 public IP address, unless you disabled the option to assign a public IP address on
    ///                 the subnet. If the instance is launched into a nondefault subnet, the default is not
    ///                 to assign a public IP address, unless you enabled the option to assign a public IP
    ///                 address on the subnet.
    ///
    public var associatePublicIpAddress: Swift.Bool?
    /// A block device mapping, which specifies the block devices for the instance. You can
    ///             specify virtual devices and EBS volumes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device
    ///                 Mapping in the Amazon EC2 User Guide for Linux Instances.
    public var blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]?
    /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink in the
    ///                 Amazon EC2 User Guide for Linux Instances and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic
    ///                 instances to a VPC in the Amazon EC2 Auto Scaling User Guide.
    ///         This parameter can only be used if you are launching EC2-Classic instances.
    public var classicLinkVPCId: Swift.String?
    /// The IDs of one or more security groups for the specified ClassicLink-enabled VPC. For
    ///             more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink in the
    ///                 Amazon EC2 User Guide for Linux Instances and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic
    ///                 instances to a VPC in the Amazon EC2 Auto Scaling User Guide.
    ///         If you specify the ClassicLinkVPCId parameter, you must specify this
    ///             parameter.
    public var classicLinkVPCSecurityGroups: [Swift.String]?
    /// Specifies whether the launch configuration is optimized for EBS I/O
    ///             (true) or not (false). The optimization provides dedicated
    ///             throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O
    ///             performance. This optimization is not available with all instance types. Additional fees
    ///             are incurred when you enable EBS optimization for an instance type that is not
    ///             EBS-optimized by default. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon EBS-Optimized
    ///                 Instances in the Amazon EC2 User Guide for Linux Instances.
    ///         The default value is false.
    public var ebsOptimized: Swift.Bool?
    /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the
    ///             IAM role for the instance. The instance profile contains the IAM role.
    ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM role for applications that run
    ///                 on Amazon EC2 instances in the Amazon EC2 Auto Scaling User Guide.
    public var iamInstanceProfile: Swift.String?
    /// The ID of the Amazon Machine Image (AMI) that was assigned during registration. For
    ///             more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI in the
    ///                 Amazon EC2 User Guide for Linux Instances.
    ///         If you do not specify InstanceId, you must specify
    ///             ImageId.
    public var imageId: Swift.String?
    /// The ID of the instance to use to create the launch configuration. The new launch
    ///             configuration derives attributes from the instance, except for the block device
    ///             mapping.
    ///         To create a launch configuration with a block device mapping or override any other
    ///             instance attributes, specify them as part of the same request.
    ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html">Creating a launch
    ///                 configuration using an EC2 instance in the
    ///                 Amazon EC2 Auto Scaling User Guide.
    ///         If you do not specify InstanceId, you must specify both
    ///                 ImageId and InstanceType.
    public var instanceId: Swift.String?
    /// Controls whether instances in this group are launched with detailed
    ///             (true) or basic (false) monitoring.
    ///         The default value is true (enabled).
    ///
    ///             When detailed monitoring is enabled, Amazon CloudWatch generates metrics every minute and
    ///                 your account is charged a fee. When you disable detailed monitoring, CloudWatch generates
    ///                 metrics every 5 minutes. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html">Configure
    ///                     Monitoring for Auto Scaling Instances in the
    ///                 Amazon EC2 Auto Scaling User Guide.
    ///
    public var instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring?
    /// Specifies the instance type of the EC2 instance.
    ///         For information about available instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available
    ///                 Instance Types in the Amazon EC2 User Guide for Linux Instances.
    ///         If you do not specify InstanceId, you must specify
    ///                 InstanceType.
    public var instanceType: Swift.String?
    /// The ID of the kernel associated with the AMI.
    public var kernelId: Swift.String?
    /// The name of the key pair. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs in the
    ///                 Amazon EC2 User Guide for Linux Instances.
    public var keyName: Swift.String?
    /// The name of the launch configuration. This name must be unique per Region per
    ///             account.
    /// This member is required.
    public var launchConfigurationName: Swift.String?
    /// The metadata options for the instances. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds">Configuring the Instance Metadata Options in the
    ///                 Amazon EC2 Auto Scaling User Guide.
    public var metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions?
    /// The tenancy of the instance. An instance with dedicated tenancy runs on
    ///             isolated, single-tenant hardware and can only be launched into a VPC.
    ///         To launch dedicated instances into a shared tenancy VPC (a VPC with the instance
    ///             placement tenancy attribute set to default), you must set the value of this
    ///             parameter to dedicated.
    ///         If you specify PlacementTenancy, you must specify at least one subnet for
    ///                 VPCZoneIdentifier when you create your group.
    ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html">Configuring
    ///                 instance tenancy with Amazon EC2 Auto Scaling in the
    ///             Amazon EC2 Auto Scaling User Guide.
    ///         Valid Values: default | dedicated
    ///
    public var placementTenancy: Swift.String?
    /// The ID of the RAM disk to select.
    public var ramdiskId: Swift.String?
    /// A list that contains the security groups to assign to the instances in the Auto Scaling
    ///             group.
    ///         [EC2-VPC] Specify the security group IDs. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC in the Amazon Virtual Private Cloud
    ///                 User Guide.
    ///         [EC2-Classic] Specify either the security group names or the security group IDs. For
    ///             more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security
    ///                 Groups in the Amazon EC2 User Guide for Linux Instances.
    public var securityGroups: [Swift.String]?
    /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the
    ///             request. Spot Instances are launched when the price you specify exceeds the current Spot
    ///             price. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Requesting Spot
    ///                 Instances in the Amazon EC2 Auto Scaling User Guide.
    ///
    ///             When you change your maximum price by creating a new launch configuration, running
    ///                 instances will continue to run as long as the maximum price for those running
    ///                 instances is higher than the current Spot price.
    ///
    public var spotPrice: Swift.String?
    /// The user data to make available to the launched EC2 instances. For more information,
    ///             see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data (Linux) and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html">Instance metadata and
    ///                 user data (Windows). If you are using a command line tool, base64-encoding
    ///             is performed for you, and you can load the text from a file. Otherwise, you must provide
    ///             base64-encoded text. User data is limited to 16 KB.
    public var userData: Swift.String?

    public init (
        associatePublicIpAddress: Swift.Bool? = nil,
        blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]? = nil,
        classicLinkVPCId: Swift.String? = nil,
        classicLinkVPCSecurityGroups: [Swift.String]? = nil,
        ebsOptimized: Swift.Bool? = nil,
        iamInstanceProfile: Swift.String? = nil,
        imageId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring? = nil,
        instanceType: Swift.String? = nil,
        kernelId: Swift.String? = nil,
        keyName: Swift.String? = nil,
        launchConfigurationName: Swift.String? = nil,
        metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions? = nil,
        placementTenancy: Swift.String? = nil,
        ramdiskId: Swift.String? = nil,
        securityGroups: [Swift.String]? = nil,
        spotPrice: Swift.String? = nil,
        userData: Swift.String? = nil
    )
    {
        self.associatePublicIpAddress = associatePublicIpAddress
        self.blockDeviceMappings = blockDeviceMappings
        self.classicLinkVPCId = classicLinkVPCId
        self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
        self.ebsOptimized = ebsOptimized
        self.iamInstanceProfile = iamInstanceProfile
        self.imageId = imageId
        self.instanceId = instanceId
        self.instanceMonitoring = instanceMonitoring
        self.instanceType = instanceType
        self.kernelId = kernelId
        self.keyName = keyName
        self.launchConfigurationName = launchConfigurationName
        self.metadataOptions = metadataOptions
        self.placementTenancy = placementTenancy
        self.ramdiskId = ramdiskId
        self.securityGroups = securityGroups
        self.spotPrice = spotPrice
        self.userData = userData
    }
}

extension CreateLaunchConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateLaunchConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLaunchConfigurationOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLaunchConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLaunchConfigurationOutputResponse()"}
}

extension CreateLaunchConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateLaunchConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateLaunchConfigurationOutputResponseBody: Swift.Equatable {
}

extension CreateLaunchConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateOrUpdateTagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateOrUpdateTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateOrUpdateTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateOrUpdateTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateOrUpdateTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateOrUpdateTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateOrUpdateTagsOutputError>
}

extension CreateOrUpdateTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateOrUpdateTagsInput(tags: \(Swift.String(describing: tags)))"}
}

extension CreateOrUpdateTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateOrUpdateTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateOrUpdateTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateOrUpdateTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateOrUpdateTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateOrUpdateTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateOrUpdateTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateOrUpdateTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateOrUpdateTagsOutputError>
}

public struct CreateOrUpdateTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateOrUpdateTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateOrUpdateTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateOrUpdateTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateOrUpdateTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateOrUpdateTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateOrUpdateTagsOutputError>
}

public struct CreateOrUpdateTagsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateOrUpdateTagsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateOrUpdateTagsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateOrUpdateTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateOrUpdateTagsInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateOrUpdateTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateOrUpdateTagsOutputError>
}

public struct CreateOrUpdateTagsInput: Swift.Equatable {
    /// One or more tags.
    /// This member is required.
    public var tags: [AutoScalingClientTypes.Tag]?

    public init (
        tags: [AutoScalingClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

extension CreateOrUpdateTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateOrUpdateTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateOrUpdateTagsOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateOrUpdateTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateOrUpdateTagsOutputResponse()"}
}

extension CreateOrUpdateTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateOrUpdateTagsOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateOrUpdateTagsOutputResponseBody: Swift.Equatable {
}

extension CreateOrUpdateTagsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AutoScalingClientTypes.CustomizedMetricSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case statistic = "Statistic"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for (index0, metricdimension0) in dimensions.enumerated() {
                try dimensionsContainer.encode(metricdimension0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
        if let unit = unit {
            try container.encode(unit, forKey: ClientRuntime.Key("Unit"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct member{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricDimension].self, forKey: .member)
                var dimensionsBuffer:[AutoScalingClientTypes.MetricDimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [AutoScalingClientTypes.MetricDimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
        let statisticDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension AutoScalingClientTypes.CustomizedMetricSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomizedMetricSpecification(dimensions: \(Swift.String(describing: dimensions)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), statistic: \(Swift.String(describing: statistic)), unit: \(Swift.String(describing: unit)))"}
}

extension AutoScalingClientTypes {
    /// Represents a CloudWatch metric of your choosing for a target tracking scaling policy to use
    ///             with Amazon EC2 Auto Scaling.
    ///         To create your customized metric specification:
    ///
    ///
    ///                 Add values for each required parameter from CloudWatch. You can use an existing
    ///                     metric, or a new metric that you create. To use your own metric, you must first
    ///                     publish the metric to CloudWatch. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publish
    ///                         Custom Metrics in the Amazon CloudWatch User
    ///                     Guide.
    ///
    ///
    ///                 Choose a metric that changes proportionally with capacity. The value of the
    ///                     metric should increase or decrease in inverse proportion to the number of
    ///                     capacity units. That is, the value of the metric should decrease when capacity
    ///                     increases.
    ///
    ///
    ///         For more information about CloudWatch, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch
    ///                 Concepts.
    public struct CustomizedMetricSpecification: Swift.Equatable {
        /// The dimensions of the metric.
        ///         Conditional: If you published your metric with dimensions, you must specify the same
        ///             dimensions in your scaling policy.
        public var dimensions: [AutoScalingClientTypes.MetricDimension]?
        /// The name of the metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// The namespace of the metric.
        /// This member is required.
        public var namespace: Swift.String?
        /// The statistic of the metric.
        /// This member is required.
        public var statistic: AutoScalingClientTypes.MetricStatistic?
        /// The unit of the metric.
        public var unit: Swift.String?

        public init (
            dimensions: [AutoScalingClientTypes.MetricDimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            statistic: AutoScalingClientTypes.MetricStatistic? = nil,
            unit: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }
    }

}

public struct DeleteAutoScalingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAutoScalingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAutoScalingGroupOutputError>
}

extension DeleteAutoScalingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAutoScalingGroupInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), forceDelete: \(Swift.String(describing: forceDelete)))"}
}

extension DeleteAutoScalingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let forceDelete = forceDelete {
            try container.encode(forceDelete, forKey: ClientRuntime.Key("ForceDelete"))
        }
        try container.encode("DeleteAutoScalingGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteAutoScalingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAutoScalingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAutoScalingGroupOutputError>
}

public struct DeleteAutoScalingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAutoScalingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAutoScalingGroupOutputError>
}

public struct DeleteAutoScalingGroupInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAutoScalingGroupInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteAutoScalingGroupInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteAutoScalingGroupInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAutoScalingGroupOutputError>
}

public struct DeleteAutoScalingGroupInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Specifies that the group is to be deleted along with all instances associated with the
    ///             group, without waiting for all instances to be terminated. This parameter also deletes
    ///             any outstanding lifecycle actions associated with the group.
    public var forceDelete: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        forceDelete: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.forceDelete = forceDelete
    }
}

extension DeleteAutoScalingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteAutoScalingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAutoScalingGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAutoScalingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAutoScalingGroupOutputResponse()"}
}

extension DeleteAutoScalingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAutoScalingGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteAutoScalingGroupOutputResponseBody: Swift.Equatable {
}

extension DeleteAutoScalingGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteLaunchConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLaunchConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLaunchConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLaunchConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLaunchConfigurationOutputError>
}

extension DeleteLaunchConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLaunchConfigurationInput(launchConfigurationName: \(Swift.String(describing: launchConfigurationName)))"}
}

extension DeleteLaunchConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        try container.encode("DeleteLaunchConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteLaunchConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLaunchConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLaunchConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLaunchConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLaunchConfigurationOutputError>
}

public struct DeleteLaunchConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLaunchConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLaunchConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLaunchConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLaunchConfigurationOutputError>
}

public struct DeleteLaunchConfigurationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLaunchConfigurationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteLaunchConfigurationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLaunchConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteLaunchConfigurationInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLaunchConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLaunchConfigurationOutputError>
}

public struct DeleteLaunchConfigurationInput: Swift.Equatable {
    /// The name of the launch configuration.
    /// This member is required.
    public var launchConfigurationName: Swift.String?

    public init (
        launchConfigurationName: Swift.String? = nil
    )
    {
        self.launchConfigurationName = launchConfigurationName
    }
}

extension DeleteLaunchConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteLaunchConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLaunchConfigurationOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLaunchConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLaunchConfigurationOutputResponse()"}
}

extension DeleteLaunchConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLaunchConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteLaunchConfigurationOutputResponseBody: Swift.Equatable {
}

extension DeleteLaunchConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteLifecycleHookInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLifecycleHookInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLifecycleHookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLifecycleHookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLifecycleHookOutputError>
}

extension DeleteLifecycleHookInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLifecycleHookInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), lifecycleHookName: \(Swift.String(describing: lifecycleHookName)))"}
}

extension DeleteLifecycleHookInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        try container.encode("DeleteLifecycleHook", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteLifecycleHookInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLifecycleHookInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLifecycleHookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLifecycleHookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLifecycleHookOutputError>
}

public struct DeleteLifecycleHookInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLifecycleHookInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLifecycleHookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLifecycleHookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLifecycleHookOutputError>
}

public struct DeleteLifecycleHookInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLifecycleHookInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteLifecycleHookInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteLifecycleHookInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLifecycleHookOutputError>
}

public struct DeleteLifecycleHookInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        lifecycleHookName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.lifecycleHookName = lifecycleHookName
    }
}

extension DeleteLifecycleHookOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteLifecycleHookOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLifecycleHookOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLifecycleHookOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLifecycleHookOutputResponse()"}
}

extension DeleteLifecycleHookOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLifecycleHookOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteLifecycleHookOutputResponseBody: Swift.Equatable {
}

extension DeleteLifecycleHookOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteNotificationConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteNotificationConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteNotificationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteNotificationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteNotificationConfigurationOutputError>
}

extension DeleteNotificationConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteNotificationConfigurationInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), topicARN: \(Swift.String(describing: topicARN)))"}
}

extension DeleteNotificationConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: ClientRuntime.Key("TopicARN"))
        }
        try container.encode("DeleteNotificationConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteNotificationConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteNotificationConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteNotificationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteNotificationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteNotificationConfigurationOutputError>
}

public struct DeleteNotificationConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteNotificationConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteNotificationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteNotificationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteNotificationConfigurationOutputError>
}

public struct DeleteNotificationConfigurationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteNotificationConfigurationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteNotificationConfigurationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteNotificationConfigurationInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteNotificationConfigurationOutputError>
}

public struct DeleteNotificationConfigurationInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS)
    ///             topic.
    /// This member is required.
    public var topicARN: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        topicARN: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.topicARN = topicARN
    }
}

extension DeleteNotificationConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteNotificationConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteNotificationConfigurationOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteNotificationConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteNotificationConfigurationOutputResponse()"}
}

extension DeleteNotificationConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteNotificationConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteNotificationConfigurationOutputResponseBody: Swift.Equatable {
}

extension DeleteNotificationConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeletePolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePolicyOutputError>
}

extension DeletePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePolicyInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), policyName: \(Swift.String(describing: policyName)))"}
}

extension DeletePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("DeletePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeletePolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePolicyOutputError>
}

public struct DeletePolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePolicyOutputError>
}

public struct DeletePolicyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePolicyInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeletePolicyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeletePolicyInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePolicyOutputError>
}

public struct DeletePolicyInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The name or Amazon Resource Name (ARN) of the policy.
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.policyName = policyName
    }
}

extension DeletePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeletePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePolicyOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePolicyOutputResponse()"}
}

extension DeletePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeletePolicyOutputResponseBody: Swift.Equatable {
}

extension DeletePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteScheduledActionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScheduledActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScheduledActionOutputError>
}

extension DeleteScheduledActionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteScheduledActionInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), scheduledActionName: \(Swift.String(describing: scheduledActionName)))"}
}

extension DeleteScheduledActionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        try container.encode("DeleteScheduledAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteScheduledActionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScheduledActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScheduledActionOutputError>
}

public struct DeleteScheduledActionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScheduledActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteScheduledActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScheduledActionOutputError>
}

public struct DeleteScheduledActionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteScheduledActionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteScheduledActionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteScheduledActionInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteScheduledActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteScheduledActionOutputError>
}

public struct DeleteScheduledActionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The name of the action to delete.
    /// This member is required.
    public var scheduledActionName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledActionName = scheduledActionName
    }
}

extension DeleteScheduledActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteScheduledActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteScheduledActionOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteScheduledActionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteScheduledActionOutputResponse()"}
}

extension DeleteScheduledActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteScheduledActionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteScheduledActionOutputResponseBody: Swift.Equatable {
}

extension DeleteScheduledActionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteTagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTagsOutputError>
}

extension DeleteTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTagsInput(tags: \(Swift.String(describing: tags)))"}
}

extension DeleteTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DeleteTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTagsOutputError>
}

public struct DeleteTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTagsOutputError>
}

public struct DeleteTagsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTagsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteTagsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteTagsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTagsOutputError>
}

public struct DeleteTagsInput: Swift.Equatable {
    /// One or more tags.
    /// This member is required.
    public var tags: [AutoScalingClientTypes.Tag]?

    public init (
        tags: [AutoScalingClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

extension DeleteTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTagsOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTagsOutputResponse()"}
}

extension DeleteTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTagsOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteTagsOutputResponseBody: Swift.Equatable {
}

extension DeleteTagsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteWarmPoolInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteWarmPoolInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteWarmPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteWarmPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteWarmPoolOutputError>
}

extension DeleteWarmPoolInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteWarmPoolInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), forceDelete: \(Swift.String(describing: forceDelete)))"}
}

extension DeleteWarmPoolInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let forceDelete = forceDelete {
            try container.encode(forceDelete, forKey: ClientRuntime.Key("ForceDelete"))
        }
        try container.encode("DeleteWarmPool", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteWarmPoolInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteWarmPoolInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteWarmPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteWarmPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteWarmPoolOutputError>
}

public struct DeleteWarmPoolInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteWarmPoolInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteWarmPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteWarmPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteWarmPoolOutputError>
}

public struct DeleteWarmPoolInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteWarmPoolInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteWarmPoolInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteWarmPoolInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteWarmPoolOutputError>
}

public struct DeleteWarmPoolInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Specifies that the warm pool is to be deleted along with all of its associated
    ///             instances, without waiting for all instances to be terminated. This parameter also
    ///             deletes any outstanding lifecycle actions associated with the warm pool
    ///             instances.
    public var forceDelete: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        forceDelete: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.forceDelete = forceDelete
    }
}

extension DeleteWarmPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteWarmPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteWarmPoolOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteWarmPoolOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteWarmPoolOutputResponse()"}
}

extension DeleteWarmPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteWarmPoolOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteWarmPoolOutputResponseBody: Swift.Equatable {
}

extension DeleteWarmPoolOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeAccountLimitsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountLimitsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountLimitsOutputError>
}

extension DescribeAccountLimitsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAccountLimitsInput()"}
}

extension DescribeAccountLimitsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeAccountLimits", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeAccountLimitsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountLimitsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountLimitsOutputError>
}

public struct DescribeAccountLimitsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountLimitsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountLimitsOutputError>
}

public struct DescribeAccountLimitsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountLimitsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeAccountLimitsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeAccountLimitsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountLimitsOutputError>
}

public struct DescribeAccountLimitsInput: Swift.Equatable {

    public init() {}
}

extension DescribeAccountLimitsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAccountLimitsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAccountLimitsOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAccountLimitsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAccountLimitsOutputResponse(maxNumberOfAutoScalingGroups: \(Swift.String(describing: maxNumberOfAutoScalingGroups)), maxNumberOfLaunchConfigurations: \(Swift.String(describing: maxNumberOfLaunchConfigurations)), numberOfAutoScalingGroups: \(Swift.String(describing: numberOfAutoScalingGroups)), numberOfLaunchConfigurations: \(Swift.String(describing: numberOfLaunchConfigurations)))"}
}

extension DescribeAccountLimitsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAccountLimitsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.maxNumberOfAutoScalingGroups = output.maxNumberOfAutoScalingGroups
            self.maxNumberOfLaunchConfigurations = output.maxNumberOfLaunchConfigurations
            self.numberOfAutoScalingGroups = output.numberOfAutoScalingGroups
            self.numberOfLaunchConfigurations = output.numberOfLaunchConfigurations
        } else {
            self.maxNumberOfAutoScalingGroups = nil
            self.maxNumberOfLaunchConfigurations = nil
            self.numberOfAutoScalingGroups = nil
            self.numberOfLaunchConfigurations = nil
        }
    }
}

public struct DescribeAccountLimitsOutputResponse: Swift.Equatable {
    /// The maximum number of groups allowed for your account. The default is 200 groups per
    ///             Region.
    public var maxNumberOfAutoScalingGroups: Swift.Int?
    /// The maximum number of launch configurations allowed for your account. The default is
    ///             200 launch configurations per Region.
    public var maxNumberOfLaunchConfigurations: Swift.Int?
    /// The current number of groups for your account.
    public var numberOfAutoScalingGroups: Swift.Int?
    /// The current number of launch configurations for your account.
    public var numberOfLaunchConfigurations: Swift.Int?

    public init (
        maxNumberOfAutoScalingGroups: Swift.Int? = nil,
        maxNumberOfLaunchConfigurations: Swift.Int? = nil,
        numberOfAutoScalingGroups: Swift.Int? = nil,
        numberOfLaunchConfigurations: Swift.Int? = nil
    )
    {
        self.maxNumberOfAutoScalingGroups = maxNumberOfAutoScalingGroups
        self.maxNumberOfLaunchConfigurations = maxNumberOfLaunchConfigurations
        self.numberOfAutoScalingGroups = numberOfAutoScalingGroups
        self.numberOfLaunchConfigurations = numberOfLaunchConfigurations
    }
}

struct DescribeAccountLimitsOutputResponseBody: Swift.Equatable {
    public let maxNumberOfAutoScalingGroups: Swift.Int?
    public let maxNumberOfLaunchConfigurations: Swift.Int?
    public let numberOfAutoScalingGroups: Swift.Int?
    public let numberOfLaunchConfigurations: Swift.Int?
}

extension DescribeAccountLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxNumberOfAutoScalingGroups = "MaxNumberOfAutoScalingGroups"
        case maxNumberOfLaunchConfigurations = "MaxNumberOfLaunchConfigurations"
        case numberOfAutoScalingGroups = "NumberOfAutoScalingGroups"
        case numberOfLaunchConfigurations = "NumberOfLaunchConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAccountLimitsResult"))
        let maxNumberOfAutoScalingGroupsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxNumberOfAutoScalingGroups)
        maxNumberOfAutoScalingGroups = maxNumberOfAutoScalingGroupsDecoded
        let maxNumberOfLaunchConfigurationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxNumberOfLaunchConfigurations)
        maxNumberOfLaunchConfigurations = maxNumberOfLaunchConfigurationsDecoded
        let numberOfAutoScalingGroupsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfAutoScalingGroups)
        numberOfAutoScalingGroups = numberOfAutoScalingGroupsDecoded
        let numberOfLaunchConfigurationsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfLaunchConfigurations)
        numberOfLaunchConfigurations = numberOfLaunchConfigurationsDecoded
    }
}

public struct DescribeAdjustmentTypesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAdjustmentTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAdjustmentTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAdjustmentTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAdjustmentTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAdjustmentTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAdjustmentTypesOutputError>
}

extension DescribeAdjustmentTypesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAdjustmentTypesInput()"}
}

extension DescribeAdjustmentTypesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeAdjustmentTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeAdjustmentTypesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAdjustmentTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAdjustmentTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAdjustmentTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAdjustmentTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAdjustmentTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAdjustmentTypesOutputError>
}

public struct DescribeAdjustmentTypesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAdjustmentTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAdjustmentTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAdjustmentTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAdjustmentTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAdjustmentTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAdjustmentTypesOutputError>
}

public struct DescribeAdjustmentTypesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAdjustmentTypesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeAdjustmentTypesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAdjustmentTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeAdjustmentTypesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAdjustmentTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAdjustmentTypesOutputError>
}

public struct DescribeAdjustmentTypesInput: Swift.Equatable {

    public init() {}
}

extension DescribeAdjustmentTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAdjustmentTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAdjustmentTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAdjustmentTypesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAdjustmentTypesOutputResponse(adjustmentTypes: \(Swift.String(describing: adjustmentTypes)))"}
}

extension DescribeAdjustmentTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAdjustmentTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.adjustmentTypes = output.adjustmentTypes
        } else {
            self.adjustmentTypes = nil
        }
    }
}

public struct DescribeAdjustmentTypesOutputResponse: Swift.Equatable {
    /// The policy adjustment types.
    public var adjustmentTypes: [AutoScalingClientTypes.AdjustmentType]?

    public init (
        adjustmentTypes: [AutoScalingClientTypes.AdjustmentType]? = nil
    )
    {
        self.adjustmentTypes = adjustmentTypes
    }
}

struct DescribeAdjustmentTypesOutputResponseBody: Swift.Equatable {
    public let adjustmentTypes: [AutoScalingClientTypes.AdjustmentType]?
}

extension DescribeAdjustmentTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustmentTypes = "AdjustmentTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAdjustmentTypesResult"))
        if containerValues.contains(.adjustmentTypes) {
            struct KeyVal0{struct member{}}
            let adjustmentTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .adjustmentTypes)
            if let adjustmentTypesWrappedContainer = adjustmentTypesWrappedContainer {
                let adjustmentTypesContainer = try adjustmentTypesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.AdjustmentType].self, forKey: .member)
                var adjustmentTypesBuffer:[AutoScalingClientTypes.AdjustmentType]? = nil
                if let adjustmentTypesContainer = adjustmentTypesContainer {
                    adjustmentTypesBuffer = [AutoScalingClientTypes.AdjustmentType]()
                    for structureContainer0 in adjustmentTypesContainer {
                        adjustmentTypesBuffer?.append(structureContainer0)
                    }
                }
                adjustmentTypes = adjustmentTypesBuffer
            } else {
                adjustmentTypes = []
            }
        } else {
            adjustmentTypes = nil
        }
    }
}

public struct DescribeAutoScalingGroupsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAutoScalingGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAutoScalingGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingGroupsOutputError>
}

extension DescribeAutoScalingGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAutoScalingGroupsInput(autoScalingGroupNames: \(Swift.String(describing: autoScalingGroupNames)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAutoScalingGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupNames = autoScalingGroupNames {
            var autoScalingGroupNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AutoScalingGroupNames"))
            for (index0, xmlstringmaxlen2550) in autoScalingGroupNames.enumerated() {
                try autoScalingGroupNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeAutoScalingGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeAutoScalingGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAutoScalingGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAutoScalingGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingGroupsOutputError>
}

public struct DescribeAutoScalingGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAutoScalingGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAutoScalingGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingGroupsOutputError>
}

public struct DescribeAutoScalingGroupsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingGroupsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeAutoScalingGroupsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeAutoScalingGroupsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingGroupsOutputError>
}

public struct DescribeAutoScalingGroupsInput: Swift.Equatable {
    /// The names of the Auto Scaling groups. By default, you can only specify up to 50 names. You can
    ///             optionally increase this limit using the MaxRecords parameter.
    ///         If you omit this parameter, all Auto Scaling groups are described.
    public var autoScalingGroupNames: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is
    ///                 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupNames: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupNames = autoScalingGroupNames
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeAutoScalingGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAutoScalingGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAutoScalingGroupsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAutoScalingGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAutoScalingGroupsOutputResponse(autoScalingGroups: \(Swift.String(describing: autoScalingGroups)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAutoScalingGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAutoScalingGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoScalingGroups = output.autoScalingGroups
            self.nextToken = output.nextToken
        } else {
            self.autoScalingGroups = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAutoScalingGroupsOutputResponse: Swift.Equatable {
    /// The groups.
    /// This member is required.
    public var autoScalingGroups: [AutoScalingClientTypes.AutoScalingGroup]?
    /// A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 NextToken value when requesting the next set of items. This value is
    ///             null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        autoScalingGroups: [AutoScalingClientTypes.AutoScalingGroup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroups = autoScalingGroups
        self.nextToken = nextToken
    }
}

struct DescribeAutoScalingGroupsOutputResponseBody: Swift.Equatable {
    public let autoScalingGroups: [AutoScalingClientTypes.AutoScalingGroup]?
    public let nextToken: Swift.String?
}

extension DescribeAutoScalingGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroups = "AutoScalingGroups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAutoScalingGroupsResult"))
        if containerValues.contains(.autoScalingGroups) {
            struct KeyVal0{struct member{}}
            let autoScalingGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingGroups)
            if let autoScalingGroupsWrappedContainer = autoScalingGroupsWrappedContainer {
                let autoScalingGroupsContainer = try autoScalingGroupsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.AutoScalingGroup].self, forKey: .member)
                var autoScalingGroupsBuffer:[AutoScalingClientTypes.AutoScalingGroup]? = nil
                if let autoScalingGroupsContainer = autoScalingGroupsContainer {
                    autoScalingGroupsBuffer = [AutoScalingClientTypes.AutoScalingGroup]()
                    for structureContainer0 in autoScalingGroupsContainer {
                        autoScalingGroupsBuffer?.append(structureContainer0)
                    }
                }
                autoScalingGroups = autoScalingGroupsBuffer
            } else {
                autoScalingGroups = []
            }
        } else {
            autoScalingGroups = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeAutoScalingInstancesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAutoScalingInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAutoScalingInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingInstancesOutputError>
}

extension DescribeAutoScalingInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAutoScalingInstancesInput(instanceIds: \(Swift.String(describing: instanceIds)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAutoScalingInstancesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeAutoScalingInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeAutoScalingInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAutoScalingInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAutoScalingInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingInstancesOutputError>
}

public struct DescribeAutoScalingInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAutoScalingInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAutoScalingInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingInstancesOutputError>
}

public struct DescribeAutoScalingInstancesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingInstancesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeAutoScalingInstancesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeAutoScalingInstancesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingInstancesOutputError>
}

public struct DescribeAutoScalingInstancesInput: Swift.Equatable {
    /// The IDs of the instances. If you omit this parameter, all Auto Scaling instances are
    ///             described. If you specify an ID that does not exist, it is ignored with no error.
    ///         Array Members: Maximum number of 50 items.
    public var instanceIds: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is
    ///                 50 and the maximum value is 50.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?

    public init (
        instanceIds: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceIds = instanceIds
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeAutoScalingInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAutoScalingInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAutoScalingInstancesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAutoScalingInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAutoScalingInstancesOutputResponse(autoScalingInstances: \(Swift.String(describing: autoScalingInstances)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAutoScalingInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAutoScalingInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoScalingInstances = output.autoScalingInstances
            self.nextToken = output.nextToken
        } else {
            self.autoScalingInstances = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAutoScalingInstancesOutputResponse: Swift.Equatable {
    /// The instances.
    public var autoScalingInstances: [AutoScalingClientTypes.AutoScalingInstanceDetails]?
    /// A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 NextToken value when requesting the next set of items. This value is
    ///             null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        autoScalingInstances: [AutoScalingClientTypes.AutoScalingInstanceDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingInstances = autoScalingInstances
        self.nextToken = nextToken
    }
}

struct DescribeAutoScalingInstancesOutputResponseBody: Swift.Equatable {
    public let autoScalingInstances: [AutoScalingClientTypes.AutoScalingInstanceDetails]?
    public let nextToken: Swift.String?
}

extension DescribeAutoScalingInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingInstances = "AutoScalingInstances"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAutoScalingInstancesResult"))
        if containerValues.contains(.autoScalingInstances) {
            struct KeyVal0{struct member{}}
            let autoScalingInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingInstances)
            if let autoScalingInstancesWrappedContainer = autoScalingInstancesWrappedContainer {
                let autoScalingInstancesContainer = try autoScalingInstancesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.AutoScalingInstanceDetails].self, forKey: .member)
                var autoScalingInstancesBuffer:[AutoScalingClientTypes.AutoScalingInstanceDetails]? = nil
                if let autoScalingInstancesContainer = autoScalingInstancesContainer {
                    autoScalingInstancesBuffer = [AutoScalingClientTypes.AutoScalingInstanceDetails]()
                    for structureContainer0 in autoScalingInstancesContainer {
                        autoScalingInstancesBuffer?.append(structureContainer0)
                    }
                }
                autoScalingInstances = autoScalingInstancesBuffer
            } else {
                autoScalingInstances = []
            }
        } else {
            autoScalingInstances = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeAutoScalingNotificationTypesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingNotificationTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAutoScalingNotificationTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAutoScalingNotificationTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingNotificationTypesOutputError>
}

extension DescribeAutoScalingNotificationTypesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAutoScalingNotificationTypesInput()"}
}

extension DescribeAutoScalingNotificationTypesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeAutoScalingNotificationTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeAutoScalingNotificationTypesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingNotificationTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAutoScalingNotificationTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAutoScalingNotificationTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingNotificationTypesOutputError>
}

public struct DescribeAutoScalingNotificationTypesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingNotificationTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAutoScalingNotificationTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAutoScalingNotificationTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingNotificationTypesOutputError>
}

public struct DescribeAutoScalingNotificationTypesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAutoScalingNotificationTypesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeAutoScalingNotificationTypesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeAutoScalingNotificationTypesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAutoScalingNotificationTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAutoScalingNotificationTypesOutputError>
}

public struct DescribeAutoScalingNotificationTypesInput: Swift.Equatable {

    public init() {}
}

extension DescribeAutoScalingNotificationTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAutoScalingNotificationTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAutoScalingNotificationTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAutoScalingNotificationTypesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAutoScalingNotificationTypesOutputResponse(autoScalingNotificationTypes: \(Swift.String(describing: autoScalingNotificationTypes)))"}
}

extension DescribeAutoScalingNotificationTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAutoScalingNotificationTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoScalingNotificationTypes = output.autoScalingNotificationTypes
        } else {
            self.autoScalingNotificationTypes = nil
        }
    }
}

public struct DescribeAutoScalingNotificationTypesOutputResponse: Swift.Equatable {
    /// The notification types.
    public var autoScalingNotificationTypes: [Swift.String]?

    public init (
        autoScalingNotificationTypes: [Swift.String]? = nil
    )
    {
        self.autoScalingNotificationTypes = autoScalingNotificationTypes
    }
}

struct DescribeAutoScalingNotificationTypesOutputResponseBody: Swift.Equatable {
    public let autoScalingNotificationTypes: [Swift.String]?
}

extension DescribeAutoScalingNotificationTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingNotificationTypes = "AutoScalingNotificationTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAutoScalingNotificationTypesResult"))
        if containerValues.contains(.autoScalingNotificationTypes) {
            struct KeyVal0{struct member{}}
            let autoScalingNotificationTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .autoScalingNotificationTypes)
            if let autoScalingNotificationTypesWrappedContainer = autoScalingNotificationTypesWrappedContainer {
                let autoScalingNotificationTypesContainer = try autoScalingNotificationTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var autoScalingNotificationTypesBuffer:[Swift.String]? = nil
                if let autoScalingNotificationTypesContainer = autoScalingNotificationTypesContainer {
                    autoScalingNotificationTypesBuffer = [Swift.String]()
                    for stringContainer0 in autoScalingNotificationTypesContainer {
                        autoScalingNotificationTypesBuffer?.append(stringContainer0)
                    }
                }
                autoScalingNotificationTypes = autoScalingNotificationTypesBuffer
            } else {
                autoScalingNotificationTypes = []
            }
        } else {
            autoScalingNotificationTypes = nil
        }
    }
}

public struct DescribeInstanceRefreshesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceRefreshesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInstanceRefreshesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceRefreshesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInstanceRefreshesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceRefreshesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceRefreshesOutputError>
}

extension DescribeInstanceRefreshesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInstanceRefreshesInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), instanceRefreshIds: \(Swift.String(describing: instanceRefreshIds)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeInstanceRefreshesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceRefreshIds = instanceRefreshIds {
            var instanceRefreshIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceRefreshIds"))
            for (index0, xmlstringmaxlen2550) in instanceRefreshIds.enumerated() {
                try instanceRefreshIdsContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeInstanceRefreshes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeInstanceRefreshesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceRefreshesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInstanceRefreshesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceRefreshesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInstanceRefreshesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceRefreshesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceRefreshesOutputError>
}

public struct DescribeInstanceRefreshesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceRefreshesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInstanceRefreshesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceRefreshesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInstanceRefreshesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceRefreshesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceRefreshesOutputError>
}

public struct DescribeInstanceRefreshesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInstanceRefreshesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeInstanceRefreshesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInstanceRefreshesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeInstanceRefreshesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInstanceRefreshesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInstanceRefreshesOutputError>
}

public struct DescribeInstanceRefreshesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more instance refresh IDs.
    public var instanceRefreshIds: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is
    ///                 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceRefreshIds: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceRefreshIds = instanceRefreshIds
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeInstanceRefreshesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeInstanceRefreshesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInstanceRefreshesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInstanceRefreshesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInstanceRefreshesOutputResponse(instanceRefreshes: \(Swift.String(describing: instanceRefreshes)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeInstanceRefreshesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeInstanceRefreshesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceRefreshes = output.instanceRefreshes
            self.nextToken = output.nextToken
        } else {
            self.instanceRefreshes = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeInstanceRefreshesOutputResponse: Swift.Equatable {
    /// The instance refreshes for the specified group.
    public var instanceRefreshes: [AutoScalingClientTypes.InstanceRefresh]?
    /// A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 NextToken value when requesting the next set of items. This value is
    ///             null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        instanceRefreshes: [AutoScalingClientTypes.InstanceRefresh]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceRefreshes = instanceRefreshes
        self.nextToken = nextToken
    }
}

struct DescribeInstanceRefreshesOutputResponseBody: Swift.Equatable {
    public let instanceRefreshes: [AutoScalingClientTypes.InstanceRefresh]?
    public let nextToken: Swift.String?
}

extension DescribeInstanceRefreshesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceRefreshes = "InstanceRefreshes"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeInstanceRefreshesResult"))
        if containerValues.contains(.instanceRefreshes) {
            struct KeyVal0{struct member{}}
            let instanceRefreshesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instanceRefreshes)
            if let instanceRefreshesWrappedContainer = instanceRefreshesWrappedContainer {
                let instanceRefreshesContainer = try instanceRefreshesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.InstanceRefresh].self, forKey: .member)
                var instanceRefreshesBuffer:[AutoScalingClientTypes.InstanceRefresh]? = nil
                if let instanceRefreshesContainer = instanceRefreshesContainer {
                    instanceRefreshesBuffer = [AutoScalingClientTypes.InstanceRefresh]()
                    for structureContainer0 in instanceRefreshesContainer {
                        instanceRefreshesBuffer?.append(structureContainer0)
                    }
                }
                instanceRefreshes = instanceRefreshesBuffer
            } else {
                instanceRefreshes = []
            }
        } else {
            instanceRefreshes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeLaunchConfigurationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLaunchConfigurationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLaunchConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLaunchConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLaunchConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLaunchConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLaunchConfigurationsOutputError>
}

extension DescribeLaunchConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLaunchConfigurationsInput(launchConfigurationNames: \(Swift.String(describing: launchConfigurationNames)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeLaunchConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let launchConfigurationNames = launchConfigurationNames {
            var launchConfigurationNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LaunchConfigurationNames"))
            for (index0, xmlstringmaxlen2550) in launchConfigurationNames.enumerated() {
                try launchConfigurationNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeLaunchConfigurations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeLaunchConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLaunchConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLaunchConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLaunchConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLaunchConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLaunchConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLaunchConfigurationsOutputError>
}

public struct DescribeLaunchConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLaunchConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLaunchConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLaunchConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLaunchConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLaunchConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLaunchConfigurationsOutputError>
}

public struct DescribeLaunchConfigurationsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLaunchConfigurationsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeLaunchConfigurationsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLaunchConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLaunchConfigurationsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLaunchConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLaunchConfigurationsOutputError>
}

public struct DescribeLaunchConfigurationsInput: Swift.Equatable {
    /// The launch configuration names. If you omit this parameter, all launch configurations
    ///             are described.
    ///         Array Members: Maximum number of 50 items.
    public var launchConfigurationNames: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is
    ///                 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?

    public init (
        launchConfigurationNames: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.launchConfigurationNames = launchConfigurationNames
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeLaunchConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLaunchConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLaunchConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLaunchConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLaunchConfigurationsOutputResponse(launchConfigurations: \(Swift.String(describing: launchConfigurations)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeLaunchConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLaunchConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.launchConfigurations = output.launchConfigurations
            self.nextToken = output.nextToken
        } else {
            self.launchConfigurations = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLaunchConfigurationsOutputResponse: Swift.Equatable {
    /// The launch configurations.
    /// This member is required.
    public var launchConfigurations: [AutoScalingClientTypes.LaunchConfiguration]?
    /// A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 NextToken value when requesting the next set of items. This value is
    ///             null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        launchConfigurations: [AutoScalingClientTypes.LaunchConfiguration]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.launchConfigurations = launchConfigurations
        self.nextToken = nextToken
    }
}

struct DescribeLaunchConfigurationsOutputResponseBody: Swift.Equatable {
    public let launchConfigurations: [AutoScalingClientTypes.LaunchConfiguration]?
    public let nextToken: Swift.String?
}

extension DescribeLaunchConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchConfigurations = "LaunchConfigurations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLaunchConfigurationsResult"))
        if containerValues.contains(.launchConfigurations) {
            struct KeyVal0{struct member{}}
            let launchConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .launchConfigurations)
            if let launchConfigurationsWrappedContainer = launchConfigurationsWrappedContainer {
                let launchConfigurationsContainer = try launchConfigurationsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LaunchConfiguration].self, forKey: .member)
                var launchConfigurationsBuffer:[AutoScalingClientTypes.LaunchConfiguration]? = nil
                if let launchConfigurationsContainer = launchConfigurationsContainer {
                    launchConfigurationsBuffer = [AutoScalingClientTypes.LaunchConfiguration]()
                    for structureContainer0 in launchConfigurationsContainer {
                        launchConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                launchConfigurations = launchConfigurationsBuffer
            } else {
                launchConfigurations = []
            }
        } else {
            launchConfigurations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeLifecycleHookTypesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLifecycleHookTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLifecycleHookTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLifecycleHookTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLifecycleHookTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLifecycleHookTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLifecycleHookTypesOutputError>
}

extension DescribeLifecycleHookTypesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLifecycleHookTypesInput()"}
}

extension DescribeLifecycleHookTypesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeLifecycleHookTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeLifecycleHookTypesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLifecycleHookTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLifecycleHookTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLifecycleHookTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLifecycleHookTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLifecycleHookTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLifecycleHookTypesOutputError>
}

public struct DescribeLifecycleHookTypesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLifecycleHookTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLifecycleHookTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLifecycleHookTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLifecycleHookTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLifecycleHookTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLifecycleHookTypesOutputError>
}

public struct DescribeLifecycleHookTypesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLifecycleHookTypesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeLifecycleHookTypesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLifecycleHookTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLifecycleHookTypesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLifecycleHookTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLifecycleHookTypesOutputError>
}

public struct DescribeLifecycleHookTypesInput: Swift.Equatable {

    public init() {}
}

extension DescribeLifecycleHookTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLifecycleHookTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLifecycleHookTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLifecycleHookTypesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLifecycleHookTypesOutputResponse(lifecycleHookTypes: \(Swift.String(describing: lifecycleHookTypes)))"}
}

extension DescribeLifecycleHookTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLifecycleHookTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lifecycleHookTypes = output.lifecycleHookTypes
        } else {
            self.lifecycleHookTypes = nil
        }
    }
}

public struct DescribeLifecycleHookTypesOutputResponse: Swift.Equatable {
    /// The lifecycle hook types.
    public var lifecycleHookTypes: [Swift.String]?

    public init (
        lifecycleHookTypes: [Swift.String]? = nil
    )
    {
        self.lifecycleHookTypes = lifecycleHookTypes
    }
}

struct DescribeLifecycleHookTypesOutputResponseBody: Swift.Equatable {
    public let lifecycleHookTypes: [Swift.String]?
}

extension DescribeLifecycleHookTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycleHookTypes = "LifecycleHookTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLifecycleHookTypesResult"))
        if containerValues.contains(.lifecycleHookTypes) {
            struct KeyVal0{struct member{}}
            let lifecycleHookTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lifecycleHookTypes)
            if let lifecycleHookTypesWrappedContainer = lifecycleHookTypesWrappedContainer {
                let lifecycleHookTypesContainer = try lifecycleHookTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var lifecycleHookTypesBuffer:[Swift.String]? = nil
                if let lifecycleHookTypesContainer = lifecycleHookTypesContainer {
                    lifecycleHookTypesBuffer = [Swift.String]()
                    for stringContainer0 in lifecycleHookTypesContainer {
                        lifecycleHookTypesBuffer?.append(stringContainer0)
                    }
                }
                lifecycleHookTypes = lifecycleHookTypesBuffer
            } else {
                lifecycleHookTypes = []
            }
        } else {
            lifecycleHookTypes = nil
        }
    }
}

public struct DescribeLifecycleHooksInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLifecycleHooksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLifecycleHooksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLifecycleHooksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLifecycleHooksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLifecycleHooksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLifecycleHooksOutputError>
}

extension DescribeLifecycleHooksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLifecycleHooksInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), lifecycleHookNames: \(Swift.String(describing: lifecycleHookNames)))"}
}

extension DescribeLifecycleHooksInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let lifecycleHookNames = lifecycleHookNames {
            var lifecycleHookNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LifecycleHookNames"))
            for (index0, asciistringmaxlen2550) in lifecycleHookNames.enumerated() {
                try lifecycleHookNamesContainer.encode(asciistringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DescribeLifecycleHooks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeLifecycleHooksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLifecycleHooksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLifecycleHooksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLifecycleHooksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLifecycleHooksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLifecycleHooksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLifecycleHooksOutputError>
}

public struct DescribeLifecycleHooksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLifecycleHooksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLifecycleHooksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLifecycleHooksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLifecycleHooksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLifecycleHooksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLifecycleHooksOutputError>
}

public struct DescribeLifecycleHooksInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLifecycleHooksInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeLifecycleHooksInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLifecycleHooksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLifecycleHooksInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLifecycleHooksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLifecycleHooksOutputError>
}

public struct DescribeLifecycleHooksInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle
    ///             hooks are described.
    public var lifecycleHookNames: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        lifecycleHookNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.lifecycleHookNames = lifecycleHookNames
    }
}

extension DescribeLifecycleHooksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLifecycleHooksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLifecycleHooksOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLifecycleHooksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLifecycleHooksOutputResponse(lifecycleHooks: \(Swift.String(describing: lifecycleHooks)))"}
}

extension DescribeLifecycleHooksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLifecycleHooksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lifecycleHooks = output.lifecycleHooks
        } else {
            self.lifecycleHooks = nil
        }
    }
}

public struct DescribeLifecycleHooksOutputResponse: Swift.Equatable {
    /// The lifecycle hooks for the specified group.
    public var lifecycleHooks: [AutoScalingClientTypes.LifecycleHook]?

    public init (
        lifecycleHooks: [AutoScalingClientTypes.LifecycleHook]? = nil
    )
    {
        self.lifecycleHooks = lifecycleHooks
    }
}

struct DescribeLifecycleHooksOutputResponseBody: Swift.Equatable {
    public let lifecycleHooks: [AutoScalingClientTypes.LifecycleHook]?
}

extension DescribeLifecycleHooksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lifecycleHooks = "LifecycleHooks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLifecycleHooksResult"))
        if containerValues.contains(.lifecycleHooks) {
            struct KeyVal0{struct member{}}
            let lifecycleHooksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .lifecycleHooks)
            if let lifecycleHooksWrappedContainer = lifecycleHooksWrappedContainer {
                let lifecycleHooksContainer = try lifecycleHooksWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LifecycleHook].self, forKey: .member)
                var lifecycleHooksBuffer:[AutoScalingClientTypes.LifecycleHook]? = nil
                if let lifecycleHooksContainer = lifecycleHooksContainer {
                    lifecycleHooksBuffer = [AutoScalingClientTypes.LifecycleHook]()
                    for structureContainer0 in lifecycleHooksContainer {
                        lifecycleHooksBuffer?.append(structureContainer0)
                    }
                }
                lifecycleHooks = lifecycleHooksBuffer
            } else {
                lifecycleHooks = []
            }
        } else {
            lifecycleHooks = nil
        }
    }
}

public struct DescribeLoadBalancerTargetGroupsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLoadBalancerTargetGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLoadBalancerTargetGroupsOutputError>
}

extension DescribeLoadBalancerTargetGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLoadBalancerTargetGroupsInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeLoadBalancerTargetGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeLoadBalancerTargetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeLoadBalancerTargetGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLoadBalancerTargetGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLoadBalancerTargetGroupsOutputError>
}

public struct DescribeLoadBalancerTargetGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLoadBalancerTargetGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLoadBalancerTargetGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLoadBalancerTargetGroupsOutputError>
}

public struct DescribeLoadBalancerTargetGroupsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLoadBalancerTargetGroupsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeLoadBalancerTargetGroupsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLoadBalancerTargetGroupsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLoadBalancerTargetGroupsOutputError>
}

public struct DescribeLoadBalancerTargetGroupsInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of items to return with this call. The default value is
    ///                 100 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeLoadBalancerTargetGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLoadBalancerTargetGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLoadBalancerTargetGroupsOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLoadBalancerTargetGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLoadBalancerTargetGroupsOutputResponse(loadBalancerTargetGroups: \(Swift.String(describing: loadBalancerTargetGroups)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeLoadBalancerTargetGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLoadBalancerTargetGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loadBalancerTargetGroups = output.loadBalancerTargetGroups
            self.nextToken = output.nextToken
        } else {
            self.loadBalancerTargetGroups = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLoadBalancerTargetGroupsOutputResponse: Swift.Equatable {
    /// Information about the target groups.
    public var loadBalancerTargetGroups: [AutoScalingClientTypes.LoadBalancerTargetGroupState]?
    /// A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 NextToken value when requesting the next set of items. This value is
    ///             null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        loadBalancerTargetGroups: [AutoScalingClientTypes.LoadBalancerTargetGroupState]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.loadBalancerTargetGroups = loadBalancerTargetGroups
        self.nextToken = nextToken
    }
}

struct DescribeLoadBalancerTargetGroupsOutputResponseBody: Swift.Equatable {
    public let loadBalancerTargetGroups: [AutoScalingClientTypes.LoadBalancerTargetGroupState]?
    public let nextToken: Swift.String?
}

extension DescribeLoadBalancerTargetGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerTargetGroups = "LoadBalancerTargetGroups"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLoadBalancerTargetGroupsResult"))
        if containerValues.contains(.loadBalancerTargetGroups) {
            struct KeyVal0{struct member{}}
            let loadBalancerTargetGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancerTargetGroups)
            if let loadBalancerTargetGroupsWrappedContainer = loadBalancerTargetGroupsWrappedContainer {
                let loadBalancerTargetGroupsContainer = try loadBalancerTargetGroupsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LoadBalancerTargetGroupState].self, forKey: .member)
                var loadBalancerTargetGroupsBuffer:[AutoScalingClientTypes.LoadBalancerTargetGroupState]? = nil
                if let loadBalancerTargetGroupsContainer = loadBalancerTargetGroupsContainer {
                    loadBalancerTargetGroupsBuffer = [AutoScalingClientTypes.LoadBalancerTargetGroupState]()
                    for structureContainer0 in loadBalancerTargetGroupsContainer {
                        loadBalancerTargetGroupsBuffer?.append(structureContainer0)
                    }
                }
                loadBalancerTargetGroups = loadBalancerTargetGroupsBuffer
            } else {
                loadBalancerTargetGroups = []
            }
        } else {
            loadBalancerTargetGroups = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeLoadBalancersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLoadBalancersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLoadBalancersOutputError>
}

extension DescribeLoadBalancersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLoadBalancersInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeLoadBalancersInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeLoadBalancers", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeLoadBalancersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLoadBalancersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLoadBalancersOutputError>
}

public struct DescribeLoadBalancersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLoadBalancersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLoadBalancersOutputError>
}

public struct DescribeLoadBalancersInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLoadBalancersInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeLoadBalancersInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLoadBalancersInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLoadBalancersOutputError>
}

public struct DescribeLoadBalancersInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of items to return with this call. The default value is
    ///                 100 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeLoadBalancersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeLoadBalancersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLoadBalancersOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLoadBalancersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLoadBalancersOutputResponse(loadBalancers: \(Swift.String(describing: loadBalancers)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeLoadBalancersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLoadBalancersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.loadBalancers = output.loadBalancers
            self.nextToken = output.nextToken
        } else {
            self.loadBalancers = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLoadBalancersOutputResponse: Swift.Equatable {
    /// The load balancers.
    public var loadBalancers: [AutoScalingClientTypes.LoadBalancerState]?
    /// A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 NextToken value when requesting the next set of items. This value is
    ///             null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        loadBalancers: [AutoScalingClientTypes.LoadBalancerState]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.loadBalancers = loadBalancers
        self.nextToken = nextToken
    }
}

struct DescribeLoadBalancersOutputResponseBody: Swift.Equatable {
    public let loadBalancers: [AutoScalingClientTypes.LoadBalancerState]?
    public let nextToken: Swift.String?
}

extension DescribeLoadBalancersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancers = "LoadBalancers"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeLoadBalancersResult"))
        if containerValues.contains(.loadBalancers) {
            struct KeyVal0{struct member{}}
            let loadBalancersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadBalancers)
            if let loadBalancersWrappedContainer = loadBalancersWrappedContainer {
                let loadBalancersContainer = try loadBalancersWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LoadBalancerState].self, forKey: .member)
                var loadBalancersBuffer:[AutoScalingClientTypes.LoadBalancerState]? = nil
                if let loadBalancersContainer = loadBalancersContainer {
                    loadBalancersBuffer = [AutoScalingClientTypes.LoadBalancerState]()
                    for structureContainer0 in loadBalancersContainer {
                        loadBalancersBuffer?.append(structureContainer0)
                    }
                }
                loadBalancers = loadBalancersBuffer
            } else {
                loadBalancers = []
            }
        } else {
            loadBalancers = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeMetricCollectionTypesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeMetricCollectionTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeMetricCollectionTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeMetricCollectionTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeMetricCollectionTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeMetricCollectionTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeMetricCollectionTypesOutputError>
}

extension DescribeMetricCollectionTypesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeMetricCollectionTypesInput()"}
}

extension DescribeMetricCollectionTypesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeMetricCollectionTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeMetricCollectionTypesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeMetricCollectionTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeMetricCollectionTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeMetricCollectionTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeMetricCollectionTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeMetricCollectionTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeMetricCollectionTypesOutputError>
}

public struct DescribeMetricCollectionTypesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeMetricCollectionTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeMetricCollectionTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeMetricCollectionTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeMetricCollectionTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeMetricCollectionTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeMetricCollectionTypesOutputError>
}

public struct DescribeMetricCollectionTypesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeMetricCollectionTypesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeMetricCollectionTypesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeMetricCollectionTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeMetricCollectionTypesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeMetricCollectionTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeMetricCollectionTypesOutputError>
}

public struct DescribeMetricCollectionTypesInput: Swift.Equatable {

    public init() {}
}

extension DescribeMetricCollectionTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeMetricCollectionTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeMetricCollectionTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMetricCollectionTypesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeMetricCollectionTypesOutputResponse(granularities: \(Swift.String(describing: granularities)), metrics: \(Swift.String(describing: metrics)))"}
}

extension DescribeMetricCollectionTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeMetricCollectionTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.granularities = output.granularities
            self.metrics = output.metrics
        } else {
            self.granularities = nil
            self.metrics = nil
        }
    }
}

public struct DescribeMetricCollectionTypesOutputResponse: Swift.Equatable {
    /// The granularities for the metrics.
    public var granularities: [AutoScalingClientTypes.MetricGranularityType]?
    /// One or more metrics.
    public var metrics: [AutoScalingClientTypes.MetricCollectionType]?

    public init (
        granularities: [AutoScalingClientTypes.MetricGranularityType]? = nil,
        metrics: [AutoScalingClientTypes.MetricCollectionType]? = nil
    )
    {
        self.granularities = granularities
        self.metrics = metrics
    }
}

struct DescribeMetricCollectionTypesOutputResponseBody: Swift.Equatable {
    public let metrics: [AutoScalingClientTypes.MetricCollectionType]?
    public let granularities: [AutoScalingClientTypes.MetricGranularityType]?
}

extension DescribeMetricCollectionTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case granularities = "Granularities"
        case metrics = "Metrics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeMetricCollectionTypesResult"))
        if containerValues.contains(.metrics) {
            struct KeyVal0{struct member{}}
            let metricsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metrics)
            if let metricsWrappedContainer = metricsWrappedContainer {
                let metricsContainer = try metricsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricCollectionType].self, forKey: .member)
                var metricsBuffer:[AutoScalingClientTypes.MetricCollectionType]? = nil
                if let metricsContainer = metricsContainer {
                    metricsBuffer = [AutoScalingClientTypes.MetricCollectionType]()
                    for structureContainer0 in metricsContainer {
                        metricsBuffer?.append(structureContainer0)
                    }
                }
                metrics = metricsBuffer
            } else {
                metrics = []
            }
        } else {
            metrics = nil
        }
        if containerValues.contains(.granularities) {
            struct KeyVal0{struct member{}}
            let granularitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .granularities)
            if let granularitiesWrappedContainer = granularitiesWrappedContainer {
                let granularitiesContainer = try granularitiesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.MetricGranularityType].self, forKey: .member)
                var granularitiesBuffer:[AutoScalingClientTypes.MetricGranularityType]? = nil
                if let granularitiesContainer = granularitiesContainer {
                    granularitiesBuffer = [AutoScalingClientTypes.MetricGranularityType]()
                    for structureContainer0 in granularitiesContainer {
                        granularitiesBuffer?.append(structureContainer0)
                    }
                }
                granularities = granularitiesBuffer
            } else {
                granularities = []
            }
        } else {
            granularities = nil
        }
    }
}

public struct DescribeNotificationConfigurationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeNotificationConfigurationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeNotificationConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeNotificationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeNotificationConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeNotificationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeNotificationConfigurationsOutputError>
}

extension DescribeNotificationConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeNotificationConfigurationsInput(autoScalingGroupNames: \(Swift.String(describing: autoScalingGroupNames)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeNotificationConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupNames = autoScalingGroupNames {
            var autoScalingGroupNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AutoScalingGroupNames"))
            for (index0, xmlstringmaxlen2550) in autoScalingGroupNames.enumerated() {
                try autoScalingGroupNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeNotificationConfigurations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeNotificationConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeNotificationConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeNotificationConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeNotificationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeNotificationConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeNotificationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeNotificationConfigurationsOutputError>
}

public struct DescribeNotificationConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeNotificationConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeNotificationConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeNotificationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeNotificationConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeNotificationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeNotificationConfigurationsOutputError>
}

public struct DescribeNotificationConfigurationsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeNotificationConfigurationsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeNotificationConfigurationsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeNotificationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeNotificationConfigurationsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeNotificationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeNotificationConfigurationsOutputError>
}

public struct DescribeNotificationConfigurationsInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupNames: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is
    ///                 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupNames: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupNames = autoScalingGroupNames
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeNotificationConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeNotificationConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeNotificationConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeNotificationConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeNotificationConfigurationsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), notificationConfigurations: \(Swift.String(describing: notificationConfigurations)))"}
}

extension DescribeNotificationConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeNotificationConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.notificationConfigurations = output.notificationConfigurations
        } else {
            self.nextToken = nil
            self.notificationConfigurations = nil
        }
    }
}

public struct DescribeNotificationConfigurationsOutputResponse: Swift.Equatable {
    /// A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 NextToken value when requesting the next set of items. This value is
    ///             null when there are no more items to return.
    public var nextToken: Swift.String?
    /// The notification configurations.
    /// This member is required.
    public var notificationConfigurations: [AutoScalingClientTypes.NotificationConfiguration]?

    public init (
        nextToken: Swift.String? = nil,
        notificationConfigurations: [AutoScalingClientTypes.NotificationConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.notificationConfigurations = notificationConfigurations
    }
}

struct DescribeNotificationConfigurationsOutputResponseBody: Swift.Equatable {
    public let notificationConfigurations: [AutoScalingClientTypes.NotificationConfiguration]?
    public let nextToken: Swift.String?
}

extension DescribeNotificationConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case notificationConfigurations = "NotificationConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeNotificationConfigurationsResult"))
        if containerValues.contains(.notificationConfigurations) {
            struct KeyVal0{struct member{}}
            let notificationConfigurationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationConfigurations)
            if let notificationConfigurationsWrappedContainer = notificationConfigurationsWrappedContainer {
                let notificationConfigurationsContainer = try notificationConfigurationsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.NotificationConfiguration].self, forKey: .member)
                var notificationConfigurationsBuffer:[AutoScalingClientTypes.NotificationConfiguration]? = nil
                if let notificationConfigurationsContainer = notificationConfigurationsContainer {
                    notificationConfigurationsBuffer = [AutoScalingClientTypes.NotificationConfiguration]()
                    for structureContainer0 in notificationConfigurationsContainer {
                        notificationConfigurationsBuffer?.append(structureContainer0)
                    }
                }
                notificationConfigurations = notificationConfigurationsBuffer
            } else {
                notificationConfigurations = []
            }
        } else {
            notificationConfigurations = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribePoliciesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePoliciesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePoliciesOutputError>
}

extension DescribePoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribePoliciesInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)), policyNames: \(Swift.String(describing: policyNames)), policyTypes: \(Swift.String(describing: policyTypes)))"}
}

extension DescribePoliciesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let policyNames = policyNames {
            var policyNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyNames"))
            for (index0, resourcename0) in policyNames.enumerated() {
                try policyNamesContainer.encode(resourcename0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let policyTypes = policyTypes {
            var policyTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PolicyTypes"))
            for (index0, xmlstringmaxlen640) in policyTypes.enumerated() {
                try policyTypesContainer.encode(xmlstringmaxlen640, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DescribePolicies", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribePoliciesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePoliciesOutputError>
}

public struct DescribePoliciesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePoliciesOutputError>
}

public struct DescribePoliciesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePoliciesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribePoliciesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribePoliciesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePoliciesOutputError>
}

public struct DescribePoliciesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of items to be returned with each call. The default value is
    ///                 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?
    /// The names of one or more policies. If you omit this parameter, all policies are
    ///             described. If a group name is provided, the results are limited to that group. If you
    ///             specify an unknown policy name, it is ignored with no error.
    ///         Array Members: Maximum number of 50 items.
    public var policyNames: [Swift.String]?
    /// One or more policy types. The valid values are SimpleScaling,
    ///                 StepScaling, TargetTrackingScaling, and
    ///                 PredictiveScaling.
    public var policyTypes: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        policyNames: [Swift.String]? = nil,
        policyTypes: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.policyNames = policyNames
        self.policyTypes = policyTypes
    }
}

extension DescribePoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribePoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribePoliciesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribePoliciesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), scalingPolicies: \(Swift.String(describing: scalingPolicies)))"}
}

extension DescribePoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribePoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scalingPolicies = output.scalingPolicies
        } else {
            self.nextToken = nil
            self.scalingPolicies = nil
        }
    }
}

public struct DescribePoliciesOutputResponse: Swift.Equatable {
    /// A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 NextToken value when requesting the next set of items. This value is
    ///             null when there are no more items to return.
    public var nextToken: Swift.String?
    /// The scaling policies.
    public var scalingPolicies: [AutoScalingClientTypes.ScalingPolicy]?

    public init (
        nextToken: Swift.String? = nil,
        scalingPolicies: [AutoScalingClientTypes.ScalingPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPolicies = scalingPolicies
    }
}

struct DescribePoliciesOutputResponseBody: Swift.Equatable {
    public let scalingPolicies: [AutoScalingClientTypes.ScalingPolicy]?
    public let nextToken: Swift.String?
}

extension DescribePoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scalingPolicies = "ScalingPolicies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribePoliciesResult"))
        if containerValues.contains(.scalingPolicies) {
            struct KeyVal0{struct member{}}
            let scalingPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scalingPolicies)
            if let scalingPoliciesWrappedContainer = scalingPoliciesWrappedContainer {
                let scalingPoliciesContainer = try scalingPoliciesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.ScalingPolicy].self, forKey: .member)
                var scalingPoliciesBuffer:[AutoScalingClientTypes.ScalingPolicy]? = nil
                if let scalingPoliciesContainer = scalingPoliciesContainer {
                    scalingPoliciesBuffer = [AutoScalingClientTypes.ScalingPolicy]()
                    for structureContainer0 in scalingPoliciesContainer {
                        scalingPoliciesBuffer?.append(structureContainer0)
                    }
                }
                scalingPolicies = scalingPoliciesBuffer
            } else {
                scalingPolicies = []
            }
        } else {
            scalingPolicies = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeScalingActivitiesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingActivitiesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingActivitiesOutputError>
}

extension DescribeScalingActivitiesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingActivitiesInput(activityIds: \(Swift.String(describing: activityIds)), autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), includeDeletedGroups: \(Swift.String(describing: includeDeletedGroups)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeScalingActivitiesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let activityIds = activityIds {
            var activityIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ActivityIds"))
            for (index0, xmlstring0) in activityIds.enumerated() {
                try activityIdsContainer.encode(xmlstring0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let includeDeletedGroups = includeDeletedGroups {
            try container.encode(includeDeletedGroups, forKey: ClientRuntime.Key("IncludeDeletedGroups"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeScalingActivities", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeScalingActivitiesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingActivitiesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingActivitiesOutputError>
}

public struct DescribeScalingActivitiesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingActivitiesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingActivitiesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingActivitiesOutputError>
}

public struct DescribeScalingActivitiesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingActivitiesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeScalingActivitiesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeScalingActivitiesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingActivitiesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingActivitiesOutputError>
}

public struct DescribeScalingActivitiesInput: Swift.Equatable {
    /// The activity IDs of the desired scaling activities. If you omit this parameter, all
    ///             activities for the past six weeks are described. If unknown activities are requested,
    ///             they are ignored with no error. If you specify an Auto Scaling group, the results are limited to
    ///             that group.
    ///         Array Members: Maximum number of 50 IDs.
    public var activityIds: [Swift.String]?
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// Indicates whether to include scaling activity from deleted Auto Scaling groups.
    public var includeDeletedGroups: Swift.Bool?
    /// The maximum number of items to return with this call. The default value is
    ///                 100 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?

    public init (
        activityIds: [Swift.String]? = nil,
        autoScalingGroupName: Swift.String? = nil,
        includeDeletedGroups: Swift.Bool? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.activityIds = activityIds
        self.autoScalingGroupName = autoScalingGroupName
        self.includeDeletedGroups = includeDeletedGroups
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeScalingActivitiesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeScalingActivitiesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScalingActivitiesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingActivitiesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingActivitiesOutputResponse(activities: \(Swift.String(describing: activities)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeScalingActivitiesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeScalingActivitiesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activities = output.activities
            self.nextToken = output.nextToken
        } else {
            self.activities = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeScalingActivitiesOutputResponse: Swift.Equatable {
    /// The scaling activities. Activities are sorted by start time. Activities still in
    ///             progress are described first.
    /// This member is required.
    public var activities: [AutoScalingClientTypes.Activity]?
    /// A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 NextToken value when requesting the next set of items. This value is
    ///             null when there are no more items to return.
    public var nextToken: Swift.String?

    public init (
        activities: [AutoScalingClientTypes.Activity]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.activities = activities
        self.nextToken = nextToken
    }
}

struct DescribeScalingActivitiesOutputResponseBody: Swift.Equatable {
    public let activities: [AutoScalingClientTypes.Activity]?
    public let nextToken: Swift.String?
}

extension DescribeScalingActivitiesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities = "Activities"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeScalingActivitiesResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Activity].self, forKey: .member)
                var activitiesBuffer:[AutoScalingClientTypes.Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [AutoScalingClientTypes.Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeScalingProcessTypesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingProcessTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingProcessTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingProcessTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingProcessTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingProcessTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingProcessTypesOutputError>
}

extension DescribeScalingProcessTypesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingProcessTypesInput()"}
}

extension DescribeScalingProcessTypesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeScalingProcessTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeScalingProcessTypesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingProcessTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingProcessTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingProcessTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingProcessTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingProcessTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingProcessTypesOutputError>
}

public struct DescribeScalingProcessTypesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingProcessTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScalingProcessTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingProcessTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScalingProcessTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingProcessTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingProcessTypesOutputError>
}

public struct DescribeScalingProcessTypesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScalingProcessTypesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeScalingProcessTypesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScalingProcessTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeScalingProcessTypesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScalingProcessTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScalingProcessTypesOutputError>
}

public struct DescribeScalingProcessTypesInput: Swift.Equatable {

    public init() {}
}

extension DescribeScalingProcessTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeScalingProcessTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScalingProcessTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScalingProcessTypesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScalingProcessTypesOutputResponse(processes: \(Swift.String(describing: processes)))"}
}

extension DescribeScalingProcessTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeScalingProcessTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.processes = output.processes
        } else {
            self.processes = nil
        }
    }
}

public struct DescribeScalingProcessTypesOutputResponse: Swift.Equatable {
    /// The names of the process types.
    public var processes: [AutoScalingClientTypes.ProcessType]?

    public init (
        processes: [AutoScalingClientTypes.ProcessType]? = nil
    )
    {
        self.processes = processes
    }
}

struct DescribeScalingProcessTypesOutputResponseBody: Swift.Equatable {
    public let processes: [AutoScalingClientTypes.ProcessType]?
}

extension DescribeScalingProcessTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processes = "Processes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeScalingProcessTypesResult"))
        if containerValues.contains(.processes) {
            struct KeyVal0{struct member{}}
            let processesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .processes)
            if let processesWrappedContainer = processesWrappedContainer {
                let processesContainer = try processesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.ProcessType].self, forKey: .member)
                var processesBuffer:[AutoScalingClientTypes.ProcessType]? = nil
                if let processesContainer = processesContainer {
                    processesBuffer = [AutoScalingClientTypes.ProcessType]()
                    for structureContainer0 in processesContainer {
                        processesBuffer?.append(structureContainer0)
                    }
                }
                processes = processesBuffer
            } else {
                processes = []
            }
        } else {
            processes = nil
        }
    }
}

public struct DescribeScheduledActionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScheduledActionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScheduledActionsOutputError>
}

extension DescribeScheduledActionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScheduledActionsInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), endTime: \(Swift.String(describing: endTime)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)), scheduledActionNames: \(Swift.String(describing: scheduledActionNames)), startTime: \(Swift.String(describing: startTime)))"}
}

extension DescribeScheduledActionsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let scheduledActionNames = scheduledActionNames {
            var scheduledActionNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScheduledActionNames"))
            for (index0, xmlstringmaxlen2550) in scheduledActionNames.enumerated() {
                try scheduledActionNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        try container.encode("DescribeScheduledActions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeScheduledActionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScheduledActionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScheduledActionsOutputError>
}

public struct DescribeScheduledActionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScheduledActionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeScheduledActionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScheduledActionsOutputError>
}

public struct DescribeScheduledActionsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeScheduledActionsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeScheduledActionsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeScheduledActionsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeScheduledActionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeScheduledActionsOutputError>
}

public struct DescribeScheduledActionsInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The latest scheduled start time to return. If scheduled action names are provided,
    ///             this parameter is ignored.
    public var endTime: ClientRuntime.Date?
    /// The maximum number of items to return with this call. The default value is
    ///                 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?
    /// The names of one or more scheduled actions. If you omit this parameter, all scheduled
    ///             actions are described. If you specify an unknown scheduled action, it is ignored with no
    ///             error.
    ///         Array Members: Maximum number of 50 actions.
    public var scheduledActionNames: [Swift.String]?
    /// The earliest scheduled start time to return. If scheduled action names are provided,
    ///             this parameter is ignored.
    public var startTime: ClientRuntime.Date?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scheduledActionNames: [Swift.String]? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.endTime = endTime
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.scheduledActionNames = scheduledActionNames
        self.startTime = startTime
    }
}

extension DescribeScheduledActionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeScheduledActionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeScheduledActionsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeScheduledActionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeScheduledActionsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), scheduledUpdateGroupActions: \(Swift.String(describing: scheduledUpdateGroupActions)))"}
}

extension DescribeScheduledActionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeScheduledActionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.scheduledUpdateGroupActions = output.scheduledUpdateGroupActions
        } else {
            self.nextToken = nil
            self.scheduledUpdateGroupActions = nil
        }
    }
}

public struct DescribeScheduledActionsOutputResponse: Swift.Equatable {
    /// A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 NextToken value when requesting the next set of items. This value is
    ///             null when there are no more items to return.
    public var nextToken: Swift.String?
    /// The scheduled actions.
    public var scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupAction]?

    public init (
        nextToken: Swift.String? = nil,
        scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupAction]? = nil
    )
    {
        self.nextToken = nextToken
        self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
    }
}

struct DescribeScheduledActionsOutputResponseBody: Swift.Equatable {
    public let scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupAction]?
    public let nextToken: Swift.String?
}

extension DescribeScheduledActionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case scheduledUpdateGroupActions = "ScheduledUpdateGroupActions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeScheduledActionsResult"))
        if containerValues.contains(.scheduledUpdateGroupActions) {
            struct KeyVal0{struct member{}}
            let scheduledUpdateGroupActionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scheduledUpdateGroupActions)
            if let scheduledUpdateGroupActionsWrappedContainer = scheduledUpdateGroupActionsWrappedContainer {
                let scheduledUpdateGroupActionsContainer = try scheduledUpdateGroupActionsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.ScheduledUpdateGroupAction].self, forKey: .member)
                var scheduledUpdateGroupActionsBuffer:[AutoScalingClientTypes.ScheduledUpdateGroupAction]? = nil
                if let scheduledUpdateGroupActionsContainer = scheduledUpdateGroupActionsContainer {
                    scheduledUpdateGroupActionsBuffer = [AutoScalingClientTypes.ScheduledUpdateGroupAction]()
                    for structureContainer0 in scheduledUpdateGroupActionsContainer {
                        scheduledUpdateGroupActionsBuffer?.append(structureContainer0)
                    }
                }
                scheduledUpdateGroupActions = scheduledUpdateGroupActionsBuffer
            } else {
                scheduledUpdateGroupActions = []
            }
        } else {
            scheduledUpdateGroupActions = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeTagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTagsOutputError>
}

extension DescribeTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTagsInput(filters: \(Swift.String(describing: filters)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let filters = filters {
            var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
            for (index0, filter0) in filters.enumerated() {
                try filtersContainer.encode(filter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeTags", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTagsOutputError>
}

public struct DescribeTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTagsOutputError>
}

public struct DescribeTagsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTagsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeTagsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeTagsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTagsOutputError>
}

public struct DescribeTagsInput: Swift.Equatable {
    /// One or more filters to scope the tags to return. The maximum number of filters per
    ///             filter type (for example, auto-scaling-group) is 1000.
    public var filters: [AutoScalingClientTypes.Filter]?
    /// The maximum number of items to return with this call. The default value is
    ///                 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?

    public init (
        filters: [AutoScalingClientTypes.Filter]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTagsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTagsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), tags: \(Swift.String(describing: tags)))"}
}

extension DescribeTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct DescribeTagsOutputResponse: Swift.Equatable {
    /// A string that indicates that the response contains more items than can be returned in
    ///             a single response. To receive additional items, specify this string for the
    ///                 NextToken value when requesting the next set of items. This value is
    ///             null when there are no more items to return.
    public var nextToken: Swift.String?
    /// One or more tags.
    public var tags: [AutoScalingClientTypes.TagDescription]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [AutoScalingClientTypes.TagDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct DescribeTagsOutputResponseBody: Swift.Equatable {
    public let tags: [AutoScalingClientTypes.TagDescription]?
    public let nextToken: Swift.String?
}

extension DescribeTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTagsResult"))
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.TagDescription].self, forKey: .member)
                var tagsBuffer:[AutoScalingClientTypes.TagDescription]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [AutoScalingClientTypes.TagDescription]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeTerminationPolicyTypesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTerminationPolicyTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTerminationPolicyTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTerminationPolicyTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTerminationPolicyTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTerminationPolicyTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTerminationPolicyTypesOutputError>
}

extension DescribeTerminationPolicyTypesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTerminationPolicyTypesInput()"}
}

extension DescribeTerminationPolicyTypesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        try container.encode("DescribeTerminationPolicyTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeTerminationPolicyTypesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTerminationPolicyTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTerminationPolicyTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTerminationPolicyTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTerminationPolicyTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTerminationPolicyTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTerminationPolicyTypesOutputError>
}

public struct DescribeTerminationPolicyTypesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTerminationPolicyTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTerminationPolicyTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTerminationPolicyTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTerminationPolicyTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTerminationPolicyTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTerminationPolicyTypesOutputError>
}

public struct DescribeTerminationPolicyTypesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTerminationPolicyTypesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeTerminationPolicyTypesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTerminationPolicyTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeTerminationPolicyTypesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTerminationPolicyTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTerminationPolicyTypesOutputError>
}

public struct DescribeTerminationPolicyTypesInput: Swift.Equatable {

    public init() {}
}

extension DescribeTerminationPolicyTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeTerminationPolicyTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTerminationPolicyTypesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTerminationPolicyTypesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTerminationPolicyTypesOutputResponse(terminationPolicyTypes: \(Swift.String(describing: terminationPolicyTypes)))"}
}

extension DescribeTerminationPolicyTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTerminationPolicyTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.terminationPolicyTypes = output.terminationPolicyTypes
        } else {
            self.terminationPolicyTypes = nil
        }
    }
}

public struct DescribeTerminationPolicyTypesOutputResponse: Swift.Equatable {
    /// The termination policies supported by Amazon EC2 Auto Scaling: OldestInstance,
    ///                 OldestLaunchConfiguration, NewestInstance,
    ///                 ClosestToNextInstanceHour, Default,
    ///                 OldestLaunchTemplate, and AllocationStrategy.
    public var terminationPolicyTypes: [Swift.String]?

    public init (
        terminationPolicyTypes: [Swift.String]? = nil
    )
    {
        self.terminationPolicyTypes = terminationPolicyTypes
    }
}

struct DescribeTerminationPolicyTypesOutputResponseBody: Swift.Equatable {
    public let terminationPolicyTypes: [Swift.String]?
}

extension DescribeTerminationPolicyTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case terminationPolicyTypes = "TerminationPolicyTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTerminationPolicyTypesResult"))
        if containerValues.contains(.terminationPolicyTypes) {
            struct KeyVal0{struct member{}}
            let terminationPolicyTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .terminationPolicyTypes)
            if let terminationPolicyTypesWrappedContainer = terminationPolicyTypesWrappedContainer {
                let terminationPolicyTypesContainer = try terminationPolicyTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var terminationPolicyTypesBuffer:[Swift.String]? = nil
                if let terminationPolicyTypesContainer = terminationPolicyTypesContainer {
                    terminationPolicyTypesBuffer = [Swift.String]()
                    for stringContainer0 in terminationPolicyTypesContainer {
                        terminationPolicyTypesBuffer?.append(stringContainer0)
                    }
                }
                terminationPolicyTypes = terminationPolicyTypesBuffer
            } else {
                terminationPolicyTypes = []
            }
        } else {
            terminationPolicyTypes = nil
        }
    }
}

public struct DescribeWarmPoolInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeWarmPoolInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeWarmPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeWarmPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeWarmPoolOutputError>
}

extension DescribeWarmPoolInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeWarmPoolInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), maxRecords: \(Swift.String(describing: maxRecords)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeWarmPoolInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: ClientRuntime.Key("MaxRecords"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeWarmPool", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeWarmPoolInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeWarmPoolInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeWarmPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeWarmPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeWarmPoolOutputError>
}

public struct DescribeWarmPoolInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeWarmPoolInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeWarmPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeWarmPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeWarmPoolOutputError>
}

public struct DescribeWarmPoolInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeWarmPoolInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeWarmPoolInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeWarmPoolInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeWarmPoolOutputError>
}

public struct DescribeWarmPoolInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of instances to return with this call. The maximum value is
    ///                 50.
    public var maxRecords: Swift.Int?
    /// The token for the next set of instances to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension DescribeWarmPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeWarmPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextToken" : self = .invalidNextToken(try InvalidNextToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeWarmPoolOutputError: Swift.Error, Swift.Equatable {
    case invalidNextToken(InvalidNextToken)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeWarmPoolOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeWarmPoolOutputResponse(instances: \(Swift.String(describing: instances)), nextToken: \(Swift.String(describing: nextToken)), warmPoolConfiguration: \(Swift.String(describing: warmPoolConfiguration)))"}
}

extension DescribeWarmPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeWarmPoolOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instances = output.instances
            self.nextToken = output.nextToken
            self.warmPoolConfiguration = output.warmPoolConfiguration
        } else {
            self.instances = nil
            self.nextToken = nil
            self.warmPoolConfiguration = nil
        }
    }
}

public struct DescribeWarmPoolOutputResponse: Swift.Equatable {
    /// The instances that are currently in the warm pool.
    public var instances: [AutoScalingClientTypes.Instance]?
    /// The token for the next set of items to return. (You received this token from a
    ///             previous call.)
    public var nextToken: Swift.String?
    /// The warm pool configuration details.
    public var warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration?

    public init (
        instances: [AutoScalingClientTypes.Instance]? = nil,
        nextToken: Swift.String? = nil,
        warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration? = nil
    )
    {
        self.instances = instances
        self.nextToken = nextToken
        self.warmPoolConfiguration = warmPoolConfiguration
    }
}

struct DescribeWarmPoolOutputResponseBody: Swift.Equatable {
    public let warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration?
    public let instances: [AutoScalingClientTypes.Instance]?
    public let nextToken: Swift.String?
}

extension DescribeWarmPoolOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instances = "Instances"
        case nextToken = "NextToken"
        case warmPoolConfiguration = "WarmPoolConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeWarmPoolResult"))
        let warmPoolConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolConfiguration.self, forKey: .warmPoolConfiguration)
        warmPoolConfiguration = warmPoolConfigurationDecoded
        if containerValues.contains(.instances) {
            struct KeyVal0{struct member{}}
            let instancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .instances)
            if let instancesWrappedContainer = instancesWrappedContainer {
                let instancesContainer = try instancesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Instance].self, forKey: .member)
                var instancesBuffer:[AutoScalingClientTypes.Instance]? = nil
                if let instancesContainer = instancesContainer {
                    instancesBuffer = [AutoScalingClientTypes.Instance]()
                    for structureContainer0 in instancesContainer {
                        instancesBuffer?.append(structureContainer0)
                    }
                }
                instances = instancesBuffer
            } else {
                instances = []
            }
        } else {
            instances = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension AutoScalingClientTypes.DesiredConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchTemplate = "LaunchTemplate"
        case mixedInstancesPolicy = "MixedInstancesPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: ClientRuntime.Key("MixedInstancesPolicy"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let mixedInstancesPolicyDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MixedInstancesPolicy.self, forKey: .mixedInstancesPolicy)
        mixedInstancesPolicy = mixedInstancesPolicyDecoded
    }
}

extension AutoScalingClientTypes.DesiredConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DesiredConfiguration(launchTemplate: \(Swift.String(describing: launchTemplate)), mixedInstancesPolicy: \(Swift.String(describing: mixedInstancesPolicy)))"}
}

extension AutoScalingClientTypes {
    /// Describes the desired configuration for an instance refresh.
    ///         If you specify a desired configuration, you must specify either a
    ///                 LaunchTemplate or a MixedInstancesPolicy.
    public struct DesiredConfiguration: Swift.Equatable {
        /// Describes the launch template and the version of the launch template that Amazon EC2 Auto Scaling
        ///             uses to launch Amazon EC2 instances. For more information about launch templates, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchTemplates.html">Launch
        ///                 templates in the Amazon EC2 Auto Scaling User Guide.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// Describes a mixed instances policy. A mixed instances policy contains the instance
        ///             types Amazon EC2 Auto Scaling can launch, and other information Amazon EC2 Auto Scaling can use to launch instances to
        ///             help you optimize your costs. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling groups with multiple
        ///                 instance types and purchase options in the Amazon EC2 Auto Scaling User
        ///                 Guide.
        public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?

        public init (
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil
        )
        {
            self.launchTemplate = launchTemplate
            self.mixedInstancesPolicy = mixedInstancesPolicy
        }
    }

}

public struct DetachInstancesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachInstancesOutputError>
}

extension DetachInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachInstancesInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), instanceIds: \(Swift.String(describing: instanceIds)), shouldDecrementDesiredCapacity: \(Swift.String(describing: shouldDecrementDesiredCapacity)))"}
}

extension DetachInstancesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity {
            try container.encode(shouldDecrementDesiredCapacity, forKey: ClientRuntime.Key("ShouldDecrementDesiredCapacity"))
        }
        try container.encode("DetachInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DetachInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachInstancesOutputError>
}

public struct DetachInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachInstancesOutputError>
}

public struct DetachInstancesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachInstancesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DetachInstancesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DetachInstancesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DetachInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachInstancesOutputError>
}

public struct DetachInstancesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?
    /// Indicates whether the Auto Scaling group decrements the desired capacity value by the number
    ///             of instances detached.
    /// This member is required.
    public var shouldDecrementDesiredCapacity: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil,
        shouldDecrementDesiredCapacity: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

extension DetachInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachInstancesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachInstancesOutputResponse(activities: \(Swift.String(describing: activities)))"}
}

extension DetachInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DetachInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activities = output.activities
        } else {
            self.activities = nil
        }
    }
}

public struct DetachInstancesOutputResponse: Swift.Equatable {
    /// The activities related to detaching the instances from the Auto Scaling group.
    public var activities: [AutoScalingClientTypes.Activity]?

    public init (
        activities: [AutoScalingClientTypes.Activity]? = nil
    )
    {
        self.activities = activities
    }
}

struct DetachInstancesOutputResponseBody: Swift.Equatable {
    public let activities: [AutoScalingClientTypes.Activity]?
}

extension DetachInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities = "Activities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DetachInstancesResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Activity].self, forKey: .member)
                var activitiesBuffer:[AutoScalingClientTypes.Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [AutoScalingClientTypes.Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
    }
}

public struct DetachLoadBalancerTargetGroupsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachLoadBalancerTargetGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachLoadBalancerTargetGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachLoadBalancerTargetGroupsOutputError>
}

extension DetachLoadBalancerTargetGroupsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachLoadBalancerTargetGroupsInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), targetGroupARNs: \(Swift.String(describing: targetGroupARNs)))"}
}

extension DetachLoadBalancerTargetGroupsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let targetGroupARNs = targetGroupARNs {
            var targetGroupARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TargetGroupARNs"))
            for (index0, xmlstringmaxlen5110) in targetGroupARNs.enumerated() {
                try targetGroupARNsContainer.encode(xmlstringmaxlen5110, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DetachLoadBalancerTargetGroups", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DetachLoadBalancerTargetGroupsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachLoadBalancerTargetGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachLoadBalancerTargetGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachLoadBalancerTargetGroupsOutputError>
}

public struct DetachLoadBalancerTargetGroupsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachLoadBalancerTargetGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachLoadBalancerTargetGroupsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachLoadBalancerTargetGroupsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachLoadBalancerTargetGroupsOutputError>
}

public struct DetachLoadBalancerTargetGroupsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachLoadBalancerTargetGroupsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DetachLoadBalancerTargetGroupsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DetachLoadBalancerTargetGroupsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DetachLoadBalancerTargetGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachLoadBalancerTargetGroupsOutputError>
}

public struct DetachLoadBalancerTargetGroupsInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target
    ///             groups.
    /// This member is required.
    public var targetGroupARNs: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        targetGroupARNs: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.targetGroupARNs = targetGroupARNs
    }
}

extension DetachLoadBalancerTargetGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachLoadBalancerTargetGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachLoadBalancerTargetGroupsOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachLoadBalancerTargetGroupsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachLoadBalancerTargetGroupsOutputResponse()"}
}

extension DetachLoadBalancerTargetGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachLoadBalancerTargetGroupsOutputResponse: Swift.Equatable {

    public init() {}
}

struct DetachLoadBalancerTargetGroupsOutputResponseBody: Swift.Equatable {
}

extension DetachLoadBalancerTargetGroupsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DetachLoadBalancersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachLoadBalancersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachLoadBalancersOutputError>
}

extension DetachLoadBalancersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachLoadBalancersInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), loadBalancerNames: \(Swift.String(describing: loadBalancerNames)))"}
}

extension DetachLoadBalancersInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let loadBalancerNames = loadBalancerNames {
            var loadBalancerNamesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LoadBalancerNames"))
            for (index0, xmlstringmaxlen2550) in loadBalancerNames.enumerated() {
                try loadBalancerNamesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DetachLoadBalancers", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DetachLoadBalancersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachLoadBalancersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachLoadBalancersOutputError>
}

public struct DetachLoadBalancersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachLoadBalancersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetachLoadBalancersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetachLoadBalancersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachLoadBalancersOutputError>
}

public struct DetachLoadBalancersInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetachLoadBalancersInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DetachLoadBalancersInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetachLoadBalancersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DetachLoadBalancersInput
    public typealias MOutput = ClientRuntime.OperationOutput<DetachLoadBalancersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetachLoadBalancersOutputError>
}

public struct DetachLoadBalancersInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of the load balancers. You can specify up to 10 load balancers.
    /// This member is required.
    public var loadBalancerNames: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        loadBalancerNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.loadBalancerNames = loadBalancerNames
    }
}

extension DetachLoadBalancersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetachLoadBalancersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetachLoadBalancersOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetachLoadBalancersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetachLoadBalancersOutputResponse()"}
}

extension DetachLoadBalancersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DetachLoadBalancersOutputResponse: Swift.Equatable {

    public init() {}
}

struct DetachLoadBalancersOutputResponseBody: Swift.Equatable {
}

extension DetachLoadBalancersOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DisableMetricsCollectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableMetricsCollectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableMetricsCollectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableMetricsCollectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableMetricsCollectionOutputError>
}

extension DisableMetricsCollectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableMetricsCollectionInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), metrics: \(Swift.String(describing: metrics)))"}
}

extension DisableMetricsCollectionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let metrics = metrics {
            var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
            for (index0, xmlstringmaxlen2550) in metrics.enumerated() {
                try metricsContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DisableMetricsCollection", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DisableMetricsCollectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableMetricsCollectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableMetricsCollectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableMetricsCollectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableMetricsCollectionOutputError>
}

public struct DisableMetricsCollectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableMetricsCollectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableMetricsCollectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableMetricsCollectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableMetricsCollectionOutputError>
}

public struct DisableMetricsCollectionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableMetricsCollectionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DisableMetricsCollectionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DisableMetricsCollectionInput
    public typealias MOutput = ClientRuntime.OperationOutput<DisableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableMetricsCollectionOutputError>
}

public struct DisableMetricsCollectionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Specifies one or more of the following metrics:
    ///
    ///
    ///
    ///                     GroupMinSize
    ///
    ///
    ///
    ///
    ///                     GroupMaxSize
    ///
    ///
    ///
    ///
    ///                     GroupDesiredCapacity
    ///
    ///
    ///
    ///
    ///                     GroupInServiceInstances
    ///
    ///
    ///
    ///
    ///                     GroupPendingInstances
    ///
    ///
    ///
    ///
    ///                     GroupStandbyInstances
    ///
    ///
    ///
    ///
    ///                     GroupTerminatingInstances
    ///
    ///
    ///
    ///
    ///                     GroupTotalInstances
    ///
    ///
    ///
    ///
    ///                     GroupInServiceCapacity
    ///
    ///
    ///
    ///
    ///                     GroupPendingCapacity
    ///
    ///
    ///
    ///
    ///                     GroupStandbyCapacity
    ///
    ///
    ///
    ///
    ///                     GroupTerminatingCapacity
    ///
    ///
    ///
    ///
    ///                     GroupTotalCapacity
    ///
    ///
    ///
    ///
    ///                     WarmPoolDesiredCapacity
    ///
    ///
    ///
    ///
    ///                     WarmPoolWarmedCapacity
    ///
    ///
    ///
    ///
    ///                     WarmPoolPendingCapacity
    ///
    ///
    ///
    ///
    ///                     WarmPoolTerminatingCapacity
    ///
    ///
    ///
    ///
    ///                     WarmPoolTotalCapacity
    ///
    ///
    ///
    ///
    ///                     GroupAndWarmPoolDesiredCapacity
    ///
    ///
    ///
    ///
    ///                     GroupAndWarmPoolTotalCapacity
    ///
    ///
    ///
    ///         If you omit this parameter, all metrics are disabled.
    public var metrics: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        metrics: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.metrics = metrics
    }
}

extension DisableMetricsCollectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisableMetricsCollectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableMetricsCollectionOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableMetricsCollectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableMetricsCollectionOutputResponse()"}
}

extension DisableMetricsCollectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableMetricsCollectionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisableMetricsCollectionOutputResponseBody: Swift.Equatable {
}

extension DisableMetricsCollectionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AutoScalingClientTypes.Ebs: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteOnTermination = "DeleteOnTermination"
        case encrypted = "Encrypted"
        case iops = "Iops"
        case snapshotId = "SnapshotId"
        case throughput = "Throughput"
        case volumeSize = "VolumeSize"
        case volumeType = "VolumeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deleteOnTermination = deleteOnTermination {
            try container.encode(deleteOnTermination, forKey: ClientRuntime.Key("DeleteOnTermination"))
        }
        if let encrypted = encrypted {
            try container.encode(encrypted, forKey: ClientRuntime.Key("Encrypted"))
        }
        if let iops = iops {
            try container.encode(iops, forKey: ClientRuntime.Key("Iops"))
        }
        if let snapshotId = snapshotId {
            try container.encode(snapshotId, forKey: ClientRuntime.Key("SnapshotId"))
        }
        if let throughput = throughput {
            try container.encode(throughput, forKey: ClientRuntime.Key("Throughput"))
        }
        if let volumeSize = volumeSize {
            try container.encode(volumeSize, forKey: ClientRuntime.Key("VolumeSize"))
        }
        if let volumeType = volumeType {
            try container.encode(volumeType, forKey: ClientRuntime.Key("VolumeType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let volumeSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let volumeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let deleteOnTerminationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .deleteOnTermination)
        deleteOnTermination = deleteOnTerminationDecoded
        let iopsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let encryptedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let throughputDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .throughput)
        throughput = throughputDecoded
    }
}

extension AutoScalingClientTypes.Ebs: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Ebs(deleteOnTermination: \(Swift.String(describing: deleteOnTermination)), encrypted: \(Swift.String(describing: encrypted)), iops: \(Swift.String(describing: iops)), snapshotId: \(Swift.String(describing: snapshotId)), throughput: \(Swift.String(describing: throughput)), volumeSize: \(Swift.String(describing: volumeSize)), volumeType: \(Swift.String(describing: volumeType)))"}
}

extension AutoScalingClientTypes {
    /// Describes information used to set up an Amazon EBS volume specified in a block device
    ///             mapping.
    public struct Ebs: Swift.Equatable {
        /// Indicates whether the volume is deleted on instance termination. For Amazon EC2 Auto Scaling, the
        ///             default value is true.
        public var deleteOnTermination: Swift.Bool?
        /// Specifies whether the volume should be encrypted. Encrypted EBS volumes can only be
        ///             attached to instances that support Amazon EBS encryption. For more information, see
        ///                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported Instance Types. If your AMI uses encrypted volumes, you can also
        ///             only launch it on supported instance types.
        ///
        ///             If you are creating a volume from a snapshot, you cannot specify an encryption
        ///                 value. Volumes that are created from encrypted snapshots are automatically
        ///                 encrypted, and volumes that are created from unencrypted snapshots are automatically
        ///                 unencrypted. By default, encrypted snapshots use the Amazon Web Services managed CMK that is used
        ///                 for EBS encryption, but you can specify a custom CMK when you create the snapshot.
        ///                 The ability to encrypt a snapshot during copying also allows you to apply a new CMK
        ///                 to an already-encrypted snapshot. Volumes restored from the
        ///                 resulting copy are only accessible using the new CMK.
        ///             Enabling <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default">encryption by default results in all EBS volumes being encrypted with
        ///                 the Amazon Web Services managed CMK or a customer managed CMK, whether or not the snapshot was
        ///                 encrypted.
        ///
        ///         For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIEncryption.html">Using Encryption with EBS-Backed
        ///                 AMIs in the Amazon EC2 User Guide for Linux Instances and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/key-policy-requirements-EBS-encryption.html">Required
        ///                 CMK key policy for use with encrypted volumes in the
        ///                 Amazon EC2 Auto Scaling User Guide.
        public var encrypted: Swift.Bool?
        /// The number of input/output (I/O) operations per second (IOPS) to provision for the
        ///             volume. For gp3 and io1 volumes, this represents the number of
        ///             IOPS that are provisioned for the volume. For gp2 volumes, this represents
        ///             the baseline performance of the volume and the rate at which the volume accumulates I/O
        ///             credits for bursting.
        ///         The following are the supported values for each volume type:
        ///
        ///
        ///
        ///                   gp3: 3,000-16,000 IOPS
        ///
        ///
        ///
        ///                   io1: 100-64,000 IOPS
        ///
        ///
        ///
        ///         For io1 volumes, we guarantee 64,000 IOPS only for <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Instances
        ///                 built on the Nitro System. Other instance families guarantee performance up
        ///             to 32,000 IOPS.
        ///
        ///             Iops is supported when the volume type is gp3 or
        ///                 io1 and required only when the volume type is io1. (Not
        ///             used with standard, gp2, st1, or sc1
        ///             volumes.)
        public var iops: Swift.Int?
        /// The snapshot ID of the volume to use.
        ///         You must specify either a VolumeSize or a SnapshotId.
        public var snapshotId: Swift.String?
        /// The throughput (MiBps) to provision for a gp3 volume.
        public var throughput: Swift.Int?
        /// The volume size, in GiBs. The following are the supported volumes sizes for each
        ///             volume type:
        ///
        ///
        ///
        ///                   gp2 and gp3: 1-16,384
        ///
        ///
        ///
        ///                   io1: 4-16,384
        ///
        ///
        ///
        ///                   st1 and sc1: 125-16,384
        ///
        ///
        ///
        ///                   standard: 1-1,024
        ///
        ///
        ///         You must specify either a SnapshotId or a VolumeSize. If you
        ///             specify both SnapshotId and VolumeSize, the volume size must
        ///             be equal or greater than the size of the snapshot.
        public var volumeSize: Swift.Int?
        /// The volume type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types in
        ///             the Amazon EC2 User Guide for Linux Instances.
        ///         Valid Values: standard | io1 | gp2 |
        ///                 st1 | sc1 | gp3
        ///
        public var volumeType: Swift.String?

        public init (
            deleteOnTermination: Swift.Bool? = nil,
            encrypted: Swift.Bool? = nil,
            iops: Swift.Int? = nil,
            snapshotId: Swift.String? = nil,
            throughput: Swift.Int? = nil,
            volumeSize: Swift.Int? = nil,
            volumeType: Swift.String? = nil
        )
        {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.snapshotId = snapshotId
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }
    }

}

public struct EnableMetricsCollectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableMetricsCollectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableMetricsCollectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableMetricsCollectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableMetricsCollectionOutputError>
}

extension EnableMetricsCollectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableMetricsCollectionInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), granularity: \(Swift.String(describing: granularity)), metrics: \(Swift.String(describing: metrics)))"}
}

extension EnableMetricsCollectionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let granularity = granularity {
            try container.encode(granularity, forKey: ClientRuntime.Key("Granularity"))
        }
        if let metrics = metrics {
            var metricsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Metrics"))
            for (index0, xmlstringmaxlen2550) in metrics.enumerated() {
                try metricsContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("EnableMetricsCollection", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct EnableMetricsCollectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableMetricsCollectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableMetricsCollectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableMetricsCollectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableMetricsCollectionOutputError>
}

public struct EnableMetricsCollectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableMetricsCollectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableMetricsCollectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableMetricsCollectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableMetricsCollectionOutputError>
}

public struct EnableMetricsCollectionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableMetricsCollectionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: EnableMetricsCollectionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableMetricsCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = EnableMetricsCollectionInput
    public typealias MOutput = ClientRuntime.OperationOutput<EnableMetricsCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableMetricsCollectionOutputError>
}

public struct EnableMetricsCollectionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The granularity to associate with the metrics to collect. The only valid value is
    ///                 1Minute.
    /// This member is required.
    public var granularity: Swift.String?
    /// Specifies which group-level metrics to start collecting. You can specify one or more
    ///             of the following metrics:
    ///
    ///
    ///
    ///                     GroupMinSize
    ///
    ///
    ///
    ///
    ///                     GroupMaxSize
    ///
    ///
    ///
    ///
    ///                     GroupDesiredCapacity
    ///
    ///
    ///
    ///
    ///                     GroupInServiceInstances
    ///
    ///
    ///
    ///
    ///                     GroupPendingInstances
    ///
    ///
    ///
    ///
    ///                     GroupStandbyInstances
    ///
    ///
    ///
    ///
    ///                     GroupTerminatingInstances
    ///
    ///
    ///
    ///
    ///                     GroupTotalInstances
    ///
    ///
    ///
    ///         The instance weighting feature supports the following additional metrics:
    ///
    ///
    ///
    ///                     GroupInServiceCapacity
    ///
    ///
    ///
    ///
    ///                     GroupPendingCapacity
    ///
    ///
    ///
    ///
    ///                     GroupStandbyCapacity
    ///
    ///
    ///
    ///
    ///                     GroupTerminatingCapacity
    ///
    ///
    ///
    ///
    ///                     GroupTotalCapacity
    ///
    ///
    ///
    ///         The warm pools feature supports the following additional metrics:
    ///
    ///
    ///
    ///                     WarmPoolDesiredCapacity
    ///
    ///
    ///
    ///
    ///                     WarmPoolWarmedCapacity
    ///
    ///
    ///
    ///
    ///                     WarmPoolPendingCapacity
    ///
    ///
    ///
    ///
    ///                     WarmPoolTerminatingCapacity
    ///
    ///
    ///
    ///
    ///                     WarmPoolTotalCapacity
    ///
    ///
    ///
    ///
    ///                     GroupAndWarmPoolDesiredCapacity
    ///
    ///
    ///
    ///
    ///                     GroupAndWarmPoolTotalCapacity
    ///
    ///
    ///
    ///         If you omit this parameter, all metrics are enabled.
    public var metrics: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        granularity: Swift.String? = nil,
        metrics: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.granularity = granularity
        self.metrics = metrics
    }
}

extension EnableMetricsCollectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnableMetricsCollectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableMetricsCollectionOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableMetricsCollectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableMetricsCollectionOutputResponse()"}
}

extension EnableMetricsCollectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableMetricsCollectionOutputResponse: Swift.Equatable {

    public init() {}
}

struct EnableMetricsCollectionOutputResponseBody: Swift.Equatable {
}

extension EnableMetricsCollectionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AutoScalingClientTypes.EnabledMetric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case granularity = "Granularity"
        case metric = "Metric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let granularity = granularity {
            try container.encode(granularity, forKey: ClientRuntime.Key("Granularity"))
        }
        if let metric = metric {
            try container.encode(metric, forKey: ClientRuntime.Key("Metric"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metric)
        metric = metricDecoded
        let granularityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .granularity)
        granularity = granularityDecoded
    }
}

extension AutoScalingClientTypes.EnabledMetric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnabledMetric(granularity: \(Swift.String(describing: granularity)), metric: \(Swift.String(describing: metric)))"}
}

extension AutoScalingClientTypes {
    /// Describes an enabled metric.
    public struct EnabledMetric: Swift.Equatable {
        /// The granularity of the metric. The only valid value is 1Minute.
        public var granularity: Swift.String?
        /// One of the following metrics:
        ///
        ///
        ///
        ///                     GroupMinSize
        ///
        ///
        ///
        ///
        ///                     GroupMaxSize
        ///
        ///
        ///
        ///
        ///                     GroupDesiredCapacity
        ///
        ///
        ///
        ///
        ///                     GroupInServiceInstances
        ///
        ///
        ///
        ///
        ///                     GroupPendingInstances
        ///
        ///
        ///
        ///
        ///                     GroupStandbyInstances
        ///
        ///
        ///
        ///
        ///                     GroupTerminatingInstances
        ///
        ///
        ///
        ///
        ///                     GroupTotalInstances
        ///
        ///
        ///
        ///
        ///                     GroupInServiceCapacity
        ///
        ///
        ///
        ///
        ///                     GroupPendingCapacity
        ///
        ///
        ///
        ///
        ///                     GroupStandbyCapacity
        ///
        ///
        ///
        ///
        ///                     GroupTerminatingCapacity
        ///
        ///
        ///
        ///
        ///                     GroupTotalCapacity
        ///
        ///
        ///
        ///
        ///                     WarmPoolDesiredCapacity
        ///
        ///
        ///
        ///
        ///                     WarmPoolWarmedCapacity
        ///
        ///
        ///
        ///
        ///                     WarmPoolPendingCapacity
        ///
        ///
        ///
        ///
        ///                     WarmPoolTerminatingCapacity
        ///
        ///
        ///
        ///
        ///                     WarmPoolTotalCapacity
        ///
        ///
        ///
        ///
        ///                     GroupAndWarmPoolDesiredCapacity
        ///
        ///
        ///
        ///
        ///                     GroupAndWarmPoolTotalCapacity
        ///
        ///
        ///
        public var metric: Swift.String?

        public init (
            granularity: Swift.String? = nil,
            metric: Swift.String? = nil
        )
        {
            self.granularity = granularity
            self.metric = metric
        }
    }

}

public struct EnterStandbyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnterStandbyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnterStandbyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnterStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnterStandbyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnterStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnterStandbyOutputError>
}

extension EnterStandbyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnterStandbyInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), instanceIds: \(Swift.String(describing: instanceIds)), shouldDecrementDesiredCapacity: \(Swift.String(describing: shouldDecrementDesiredCapacity)))"}
}

extension EnterStandbyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity {
            try container.encode(shouldDecrementDesiredCapacity, forKey: ClientRuntime.Key("ShouldDecrementDesiredCapacity"))
        }
        try container.encode("EnterStandby", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct EnterStandbyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnterStandbyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnterStandbyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnterStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnterStandbyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnterStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnterStandbyOutputError>
}

public struct EnterStandbyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnterStandbyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnterStandbyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnterStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnterStandbyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnterStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnterStandbyOutputError>
}

public struct EnterStandbyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnterStandbyInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: EnterStandbyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnterStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = EnterStandbyInput
    public typealias MOutput = ClientRuntime.OperationOutput<EnterStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnterStandbyOutputError>
}

public struct EnterStandbyInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?
    /// Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of
    ///             instances moved to Standby mode.
    /// This member is required.
    public var shouldDecrementDesiredCapacity: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil,
        shouldDecrementDesiredCapacity: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

extension EnterStandbyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnterStandbyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnterStandbyOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnterStandbyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnterStandbyOutputResponse(activities: \(Swift.String(describing: activities)))"}
}

extension EnterStandbyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EnterStandbyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activities = output.activities
        } else {
            self.activities = nil
        }
    }
}

public struct EnterStandbyOutputResponse: Swift.Equatable {
    /// The activities related to moving instances into Standby mode.
    public var activities: [AutoScalingClientTypes.Activity]?

    public init (
        activities: [AutoScalingClientTypes.Activity]? = nil
    )
    {
        self.activities = activities
    }
}

struct EnterStandbyOutputResponseBody: Swift.Equatable {
    public let activities: [AutoScalingClientTypes.Activity]?
}

extension EnterStandbyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities = "Activities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("EnterStandbyResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Activity].self, forKey: .member)
                var activitiesBuffer:[AutoScalingClientTypes.Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [AutoScalingClientTypes.Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
    }
}

public struct ExecutePolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExecutePolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExecutePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExecutePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExecutePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExecutePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExecutePolicyOutputError>
}

extension ExecutePolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExecutePolicyInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), breachThreshold: \(Swift.String(describing: breachThreshold)), honorCooldown: \(Swift.String(describing: honorCooldown)), metricValue: \(Swift.String(describing: metricValue)), policyName: \(Swift.String(describing: policyName)))"}
}

extension ExecutePolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let breachThreshold = breachThreshold {
            try container.encode(breachThreshold, forKey: ClientRuntime.Key("BreachThreshold"))
        }
        if let honorCooldown = honorCooldown {
            try container.encode(honorCooldown, forKey: ClientRuntime.Key("HonorCooldown"))
        }
        if let metricValue = metricValue {
            try container.encode(metricValue, forKey: ClientRuntime.Key("MetricValue"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        try container.encode("ExecutePolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ExecutePolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExecutePolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExecutePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExecutePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExecutePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExecutePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExecutePolicyOutputError>
}

public struct ExecutePolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExecutePolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExecutePolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExecutePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExecutePolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExecutePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExecutePolicyOutputError>
}

public struct ExecutePolicyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExecutePolicyInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ExecutePolicyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExecutePolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ExecutePolicyInput
    public typealias MOutput = ClientRuntime.OperationOutput<ExecutePolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExecutePolicyOutputError>
}

public struct ExecutePolicyInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The breach threshold for the alarm.
    ///         Required if the policy type is StepScaling and not supported
    ///             otherwise.
    public var breachThreshold: Swift.Double?
    /// Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing
    ///             the policy.
    ///         Valid only if the policy type is SimpleScaling. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling
    ///                 cooldowns for Amazon EC2 Auto Scaling in the Amazon EC2 Auto Scaling User Guide.
    public var honorCooldown: Swift.Bool?
    /// The metric value to compare to BreachThreshold. This enables you to
    ///             execute a policy of type StepScaling and determine which step adjustment to
    ///             use. For example, if the breach threshold is 50 and you want to use a step adjustment
    ///             with a lower bound of 0 and an upper bound of 10, you can set the metric value to
    ///             59.
    ///         If you specify a metric value that doesn't correspond to a step adjustment for the
    ///             policy, the call returns an error.
    ///         Required if the policy type is StepScaling and not supported
    ///             otherwise.
    public var metricValue: Swift.Double?
    /// The name or ARN of the policy.
    /// This member is required.
    public var policyName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        breachThreshold: Swift.Double? = nil,
        honorCooldown: Swift.Bool? = nil,
        metricValue: Swift.Double? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.breachThreshold = breachThreshold
        self.honorCooldown = honorCooldown
        self.metricValue = metricValue
        self.policyName = policyName
    }
}

extension ExecutePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ExecutePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExecutePolicyOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExecutePolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExecutePolicyOutputResponse()"}
}

extension ExecutePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ExecutePolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct ExecutePolicyOutputResponseBody: Swift.Equatable {
}

extension ExecutePolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct ExitStandbyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExitStandbyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExitStandbyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExitStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExitStandbyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExitStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExitStandbyOutputError>
}

extension ExitStandbyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExitStandbyInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), instanceIds: \(Swift.String(describing: instanceIds)))"}
}

extension ExitStandbyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ExitStandby", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ExitStandbyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExitStandbyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExitStandbyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExitStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExitStandbyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExitStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExitStandbyOutputError>
}

public struct ExitStandbyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExitStandbyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExitStandbyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExitStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExitStandbyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExitStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExitStandbyOutputError>
}

public struct ExitStandbyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExitStandbyInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ExitStandbyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExitStandbyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ExitStandbyInput
    public typealias MOutput = ClientRuntime.OperationOutput<ExitStandbyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExitStandbyOutputError>
}

public struct ExitStandbyInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
    }
}

extension ExitStandbyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ExitStandbyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExitStandbyOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExitStandbyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExitStandbyOutputResponse(activities: \(Swift.String(describing: activities)))"}
}

extension ExitStandbyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ExitStandbyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activities = output.activities
        } else {
            self.activities = nil
        }
    }
}

public struct ExitStandbyOutputResponse: Swift.Equatable {
    /// The activities related to moving instances out of Standby mode.
    public var activities: [AutoScalingClientTypes.Activity]?

    public init (
        activities: [AutoScalingClientTypes.Activity]? = nil
    )
    {
        self.activities = activities
    }
}

struct ExitStandbyOutputResponseBody: Swift.Equatable {
    public let activities: [AutoScalingClientTypes.Activity]?
}

extension ExitStandbyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activities = "Activities"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ExitStandbyResult"))
        if containerValues.contains(.activities) {
            struct KeyVal0{struct member{}}
            let activitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .activities)
            if let activitiesWrappedContainer = activitiesWrappedContainer {
                let activitiesContainer = try activitiesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Activity].self, forKey: .member)
                var activitiesBuffer:[AutoScalingClientTypes.Activity]? = nil
                if let activitiesContainer = activitiesContainer {
                    activitiesBuffer = [AutoScalingClientTypes.Activity]()
                    for structureContainer0 in activitiesContainer {
                        activitiesBuffer?.append(structureContainer0)
                    }
                }
                activities = activitiesBuffer
            } else {
                activities = []
            }
        } else {
            activities = nil
        }
    }
}

extension AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case scheduledActionName = "ScheduledActionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: ClientRuntime.Key("ErrorCode"))
        }
        if let errorMessage = errorMessage {
            try container.encode(errorMessage, forKey: ClientRuntime.Key("ErrorMessage"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FailedScheduledUpdateGroupActionRequest(errorCode: \(Swift.String(describing: errorCode)), errorMessage: \(Swift.String(describing: errorMessage)), scheduledActionName: \(Swift.String(describing: scheduledActionName)))"}
}

extension AutoScalingClientTypes {
    /// Describes a scheduled action that could not be created, updated, or deleted.
    public struct FailedScheduledUpdateGroupActionRequest: Swift.Equatable {
        /// The error code.
        public var errorCode: Swift.String?
        /// The error message accompanying the error code.
        public var errorMessage: Swift.String?
        /// The name of the scheduled action.
        /// This member is required.
        public var scheduledActionName: Swift.String?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.scheduledActionName = scheduledActionName
        }
    }

}

extension AutoScalingClientTypes.Filter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
            for (index0, xmlstring0) in values.enumerated() {
                try valuesContainer.encode(xmlstring0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var valuesBuffer:[Swift.String]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.String]()
                    for stringContainer0 in valuesContainer {
                        valuesBuffer?.append(stringContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
    }
}

extension AutoScalingClientTypes.Filter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Filter(name: \(Swift.String(describing: name)), values: \(Swift.String(describing: values)))"}
}

extension AutoScalingClientTypes {
    /// Describes a filter that is used to return a more specific list of results when
    ///             describing tags.
    ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-tagging.html">Tagging Auto Scaling groups and
    ///                 instances in the Amazon EC2 Auto Scaling User Guide.
    public struct Filter: Swift.Equatable {
        /// The name of the filter. The valid values are: auto-scaling-group,
        ///                 key, value, and propagate-at-launch.
        public var name: Swift.String?
        /// One or more filter values. Filter values are case-sensitive.
        public var values: [Swift.String]?

        public init (
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

public struct GetPredictiveScalingForecastInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPredictiveScalingForecastInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPredictiveScalingForecastInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPredictiveScalingForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPredictiveScalingForecastInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPredictiveScalingForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPredictiveScalingForecastOutputError>
}

extension GetPredictiveScalingForecastInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPredictiveScalingForecastInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), endTime: \(Swift.String(describing: endTime)), policyName: \(Swift.String(describing: policyName)), startTime: \(Swift.String(describing: startTime)))"}
}

extension GetPredictiveScalingForecastInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        try container.encode("GetPredictiveScalingForecast", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetPredictiveScalingForecastInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPredictiveScalingForecastInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPredictiveScalingForecastInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPredictiveScalingForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPredictiveScalingForecastInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPredictiveScalingForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPredictiveScalingForecastOutputError>
}

public struct GetPredictiveScalingForecastInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPredictiveScalingForecastInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPredictiveScalingForecastInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPredictiveScalingForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPredictiveScalingForecastInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPredictiveScalingForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPredictiveScalingForecastOutputError>
}

public struct GetPredictiveScalingForecastInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPredictiveScalingForecastInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetPredictiveScalingForecastInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPredictiveScalingForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetPredictiveScalingForecastInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetPredictiveScalingForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPredictiveScalingForecastOutputError>
}

public struct GetPredictiveScalingForecastInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The exclusive end time of the time range for the forecast data to get. The maximum
    ///             time duration between the start and end time is 30 days.
    ///         Although this parameter can accept a date and time that is more than two days in the
    ///             future, the availability of forecast data has limits. Amazon EC2 Auto Scaling only issues forecasts for
    ///             periods of two days in advance.
    /// This member is required.
    public var endTime: ClientRuntime.Date?
    /// The name of the policy.
    /// This member is required.
    public var policyName: Swift.String?
    /// The inclusive start time of the time range for the forecast data to get. At most, the
    ///             date and time can be one year before the current date and time.
    /// This member is required.
    public var startTime: ClientRuntime.Date?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        policyName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.endTime = endTime
        self.policyName = policyName
        self.startTime = startTime
    }
}

extension GetPredictiveScalingForecastOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetPredictiveScalingForecastOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPredictiveScalingForecastOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPredictiveScalingForecastOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPredictiveScalingForecastOutputResponse(capacityForecast: \(Swift.String(describing: capacityForecast)), loadForecast: \(Swift.String(describing: loadForecast)), updateTime: \(Swift.String(describing: updateTime)))"}
}

extension GetPredictiveScalingForecastOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPredictiveScalingForecastOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capacityForecast = output.capacityForecast
            self.loadForecast = output.loadForecast
            self.updateTime = output.updateTime
        } else {
            self.capacityForecast = nil
            self.loadForecast = nil
            self.updateTime = nil
        }
    }
}

public struct GetPredictiveScalingForecastOutputResponse: Swift.Equatable {
    /// The capacity forecast.
    /// This member is required.
    public var capacityForecast: AutoScalingClientTypes.CapacityForecast?
    /// The load forecast.
    /// This member is required.
    public var loadForecast: [AutoScalingClientTypes.LoadForecast]?
    /// The time the forecast was made.
    /// This member is required.
    public var updateTime: ClientRuntime.Date?

    public init (
        capacityForecast: AutoScalingClientTypes.CapacityForecast? = nil,
        loadForecast: [AutoScalingClientTypes.LoadForecast]? = nil,
        updateTime: ClientRuntime.Date? = nil
    )
    {
        self.capacityForecast = capacityForecast
        self.loadForecast = loadForecast
        self.updateTime = updateTime
    }
}

struct GetPredictiveScalingForecastOutputResponseBody: Swift.Equatable {
    public let loadForecast: [AutoScalingClientTypes.LoadForecast]?
    public let capacityForecast: AutoScalingClientTypes.CapacityForecast?
    public let updateTime: ClientRuntime.Date?
}

extension GetPredictiveScalingForecastOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityForecast = "CapacityForecast"
        case loadForecast = "LoadForecast"
        case updateTime = "UpdateTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetPredictiveScalingForecastResult"))
        if containerValues.contains(.loadForecast) {
            struct KeyVal0{struct member{}}
            let loadForecastWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .loadForecast)
            if let loadForecastWrappedContainer = loadForecastWrappedContainer {
                let loadForecastContainer = try loadForecastWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LoadForecast].self, forKey: .member)
                var loadForecastBuffer:[AutoScalingClientTypes.LoadForecast]? = nil
                if let loadForecastContainer = loadForecastContainer {
                    loadForecastBuffer = [AutoScalingClientTypes.LoadForecast]()
                    for structureContainer0 in loadForecastContainer {
                        loadForecastBuffer?.append(structureContainer0)
                    }
                }
                loadForecast = loadForecastBuffer
            } else {
                loadForecast = []
            }
        } else {
            loadForecast = nil
        }
        let capacityForecastDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.CapacityForecast.self, forKey: .capacityForecast)
        capacityForecast = capacityForecastDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateTime)
        var updateTimeBuffer:ClientRuntime.Date? = nil
        if let updateTimeDecoded = updateTimeDecoded {
            updateTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(updateTimeDecoded, format: .dateTime)
        }
        updateTime = updateTimeBuffer
    }
}

extension AutoScalingClientTypes.Instance: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case healthStatus = "HealthStatus"
        case instanceId = "InstanceId"
        case instanceType = "InstanceType"
        case launchConfigurationName = "LaunchConfigurationName"
        case launchTemplate = "LaunchTemplate"
        case lifecycleState = "LifecycleState"
        case protectedFromScaleIn = "ProtectedFromScaleIn"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let availabilityZone = availabilityZone {
            try container.encode(availabilityZone, forKey: ClientRuntime.Key("AvailabilityZone"))
        }
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: ClientRuntime.Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let lifecycleState = lifecycleState {
            try container.encode(lifecycleState, forKey: ClientRuntime.Key("LifecycleState"))
        }
        if let protectedFromScaleIn = protectedFromScaleIn {
            try container.encode(protectedFromScaleIn, forKey: ClientRuntime.Key("ProtectedFromScaleIn"))
        }
        if let weightedCapacity = weightedCapacity {
            try container.encode(weightedCapacity, forKey: ClientRuntime.Key("WeightedCapacity"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let lifecycleStateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LifecycleState.self, forKey: .lifecycleState)
        lifecycleState = lifecycleStateDecoded
        let healthStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthStatus)
        healthStatus = healthStatusDecoded
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let protectedFromScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .protectedFromScaleIn)
        protectedFromScaleIn = protectedFromScaleInDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
    }
}

extension AutoScalingClientTypes.Instance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Instance(availabilityZone: \(Swift.String(describing: availabilityZone)), healthStatus: \(Swift.String(describing: healthStatus)), instanceId: \(Swift.String(describing: instanceId)), instanceType: \(Swift.String(describing: instanceType)), launchConfigurationName: \(Swift.String(describing: launchConfigurationName)), launchTemplate: \(Swift.String(describing: launchTemplate)), lifecycleState: \(Swift.String(describing: lifecycleState)), protectedFromScaleIn: \(Swift.String(describing: protectedFromScaleIn)), weightedCapacity: \(Swift.String(describing: weightedCapacity)))"}
}

extension AutoScalingClientTypes {
    /// Describes an EC2 instance.
    public struct Instance: Swift.Equatable {
        /// The Availability Zone in which the instance is running.
        /// This member is required.
        public var availabilityZone: Swift.String?
        /// The last reported health status of the instance. "Healthy" means that the instance is
        ///             healthy and should remain in service. "Unhealthy" means that the instance is unhealthy
        ///             and that Amazon EC2 Auto Scaling should terminate and replace it.
        /// This member is required.
        public var healthStatus: Swift.String?
        /// The ID of the instance.
        /// This member is required.
        public var instanceId: Swift.String?
        /// The instance type of the EC2 instance.
        public var instanceType: Swift.String?
        /// The launch configuration associated with the instance.
        public var launchConfigurationName: Swift.String?
        /// The launch template for the instance.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// A description of the current lifecycle state. The Quarantined state is
        ///             not used. For information about lifecycle states, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroupLifecycle.html">Instance
        ///                 lifecycle in the Amazon EC2 Auto Scaling User Guide.
        /// This member is required.
        public var lifecycleState: AutoScalingClientTypes.LifecycleState?
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling
        ///             in.
        /// This member is required.
        public var protectedFromScaleIn: Swift.Bool?
        /// The number of capacity units contributed by the instance based on its instance
        ///             type.
        ///         Valid Range: Minimum value of 1. Maximum value of 999.
        public var weightedCapacity: Swift.String?

        public init (
            availabilityZone: Swift.String? = nil,
            healthStatus: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            launchConfigurationName: Swift.String? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            lifecycleState: AutoScalingClientTypes.LifecycleState? = nil,
            protectedFromScaleIn: Swift.Bool? = nil,
            weightedCapacity: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.lifecycleState = lifecycleState
            self.protectedFromScaleIn = protectedFromScaleIn
            self.weightedCapacity = weightedCapacity
        }
    }

}

extension AutoScalingClientTypes {
    public enum InstanceMetadataEndpointState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceMetadataEndpointState] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceMetadataEndpointState(rawValue: rawValue) ?? InstanceMetadataEndpointState.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes {
    public enum InstanceMetadataHttpTokensState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `optional`
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceMetadataHttpTokensState] {
            return [
                .optional,
                .required,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .optional: return "optional"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceMetadataHttpTokensState(rawValue: rawValue) ?? InstanceMetadataHttpTokensState.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.InstanceMetadataOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case httpEndpoint = "HttpEndpoint"
        case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
        case httpTokens = "HttpTokens"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let httpEndpoint = httpEndpoint {
            try container.encode(httpEndpoint, forKey: ClientRuntime.Key("HttpEndpoint"))
        }
        if let httpPutResponseHopLimit = httpPutResponseHopLimit {
            try container.encode(httpPutResponseHopLimit, forKey: ClientRuntime.Key("HttpPutResponseHopLimit"))
        }
        if let httpTokens = httpTokens {
            try container.encode(httpTokens, forKey: ClientRuntime.Key("HttpTokens"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let httpTokensDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceMetadataHttpTokensState.self, forKey: .httpTokens)
        httpTokens = httpTokensDecoded
        let httpPutResponseHopLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .httpPutResponseHopLimit)
        httpPutResponseHopLimit = httpPutResponseHopLimitDecoded
        let httpEndpointDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceMetadataEndpointState.self, forKey: .httpEndpoint)
        httpEndpoint = httpEndpointDecoded
    }
}

extension AutoScalingClientTypes.InstanceMetadataOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceMetadataOptions(httpEndpoint: \(Swift.String(describing: httpEndpoint)), httpPutResponseHopLimit: \(Swift.String(describing: httpPutResponseHopLimit)), httpTokens: \(Swift.String(describing: httpTokens)))"}
}

extension AutoScalingClientTypes {
    /// The metadata options for the instances. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds">Configuring the Instance Metadata Options in the
    ///                 Amazon EC2 Auto Scaling User Guide.
    public struct InstanceMetadataOptions: Swift.Equatable {
        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If
        ///             the parameter is not specified, the default state is enabled.
        ///
        ///             If you specify a value of disabled, you will not be able to access
        ///                 your instance metadata.
        ///
        public var httpEndpoint: AutoScalingClientTypes.InstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the
        ///             number, the further instance metadata requests can travel.
        ///         Default: 1
        public var httpPutResponseHopLimit: Swift.Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not
        ///             specified in the request, the default state is optional.
        ///         If the state is optional, you can choose to retrieve instance metadata
        ///             with or without a signed token header on your request. If you retrieve the IAM role
        ///             credentials without a token, the version 1.0 role credentials are returned. If you
        ///             retrieve the IAM role credentials using a valid signed token, the version 2.0 role
        ///             credentials are returned.
        ///         If the state is required, you must send a signed token header with any
        ///             instance metadata retrieval requests. In this state, retrieving the IAM role credentials
        ///             always returns the version 2.0 credentials; the version 1.0 credentials are not
        ///             available.
        public var httpTokens: AutoScalingClientTypes.InstanceMetadataHttpTokensState?

        public init (
            httpEndpoint: AutoScalingClientTypes.InstanceMetadataEndpointState? = nil,
            httpPutResponseHopLimit: Swift.Int? = nil,
            httpTokens: AutoScalingClientTypes.InstanceMetadataHttpTokensState? = nil
        )
        {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
        }
    }

}

extension AutoScalingClientTypes.InstanceMonitoring: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension AutoScalingClientTypes.InstanceMonitoring: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceMonitoring(enabled: \(Swift.String(describing: enabled)))"}
}

extension AutoScalingClientTypes {
    /// Describes whether detailed monitoring is enabled for the Auto Scaling instances.
    public struct InstanceMonitoring: Swift.Equatable {
        /// If true, detailed monitoring is enabled. Otherwise, basic monitoring is
        ///             enabled.
        public var enabled: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension AutoScalingClientTypes.InstanceRefresh: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case desiredConfiguration = "DesiredConfiguration"
        case endTime = "EndTime"
        case instanceRefreshId = "InstanceRefreshId"
        case instancesToUpdate = "InstancesToUpdate"
        case percentageComplete = "PercentageComplete"
        case preferences = "Preferences"
        case progressDetails = "ProgressDetails"
        case startTime = "StartTime"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let desiredConfiguration = desiredConfiguration {
            try container.encode(desiredConfiguration, forKey: ClientRuntime.Key("DesiredConfiguration"))
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let instanceRefreshId = instanceRefreshId {
            try container.encode(instanceRefreshId, forKey: ClientRuntime.Key("InstanceRefreshId"))
        }
        if let instancesToUpdate = instancesToUpdate {
            try container.encode(instancesToUpdate, forKey: ClientRuntime.Key("InstancesToUpdate"))
        }
        if let percentageComplete = percentageComplete {
            try container.encode(percentageComplete, forKey: ClientRuntime.Key("PercentageComplete"))
        }
        if let preferences = preferences {
            try container.encode(preferences, forKey: ClientRuntime.Key("Preferences"))
        }
        if let progressDetails = progressDetails {
            try container.encode(progressDetails, forKey: ClientRuntime.Key("ProgressDetails"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceRefreshIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRefreshId)
        instanceRefreshId = instanceRefreshIdDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceRefreshStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let percentageCompleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentageComplete)
        percentageComplete = percentageCompleteDecoded
        let instancesToUpdateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesToUpdate)
        instancesToUpdate = instancesToUpdateDecoded
        let progressDetailsDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceRefreshProgressDetails.self, forKey: .progressDetails)
        progressDetails = progressDetailsDecoded
        let preferencesDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.RefreshPreferences.self, forKey: .preferences)
        preferences = preferencesDecoded
        let desiredConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.DesiredConfiguration.self, forKey: .desiredConfiguration)
        desiredConfiguration = desiredConfigurationDecoded
    }
}

extension AutoScalingClientTypes.InstanceRefresh: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceRefresh(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), desiredConfiguration: \(Swift.String(describing: desiredConfiguration)), endTime: \(Swift.String(describing: endTime)), instanceRefreshId: \(Swift.String(describing: instanceRefreshId)), instancesToUpdate: \(Swift.String(describing: instancesToUpdate)), percentageComplete: \(Swift.String(describing: percentageComplete)), preferences: \(Swift.String(describing: preferences)), progressDetails: \(Swift.String(describing: progressDetails)), startTime: \(Swift.String(describing: startTime)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)))"}
}

extension AutoScalingClientTypes {
    /// Describes an instance refresh for an Auto Scaling group.
    public struct InstanceRefresh: Swift.Equatable {
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// Describes the specific update you want to deploy.
        public var desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration?
        /// The date and time at which the instance refresh ended.
        public var endTime: ClientRuntime.Date?
        /// The instance refresh ID.
        public var instanceRefreshId: Swift.String?
        /// The number of instances remaining to update before the instance refresh is
        ///             complete.
        public var instancesToUpdate: Swift.Int?
        /// The percentage of the instance refresh that is complete. For each instance
        ///             replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the
        ///             instance's health status changes to healthy and the specified warm-up time passes, the
        ///             instance is considered updated and is added to the percentage complete.
        public var percentageComplete: Swift.Int?
        /// Describes the preferences for an instance refresh.
        public var preferences: AutoScalingClientTypes.RefreshPreferences?
        /// Additional progress details for an Auto Scaling group that has a warm pool.
        public var progressDetails: AutoScalingClientTypes.InstanceRefreshProgressDetails?
        /// The date and time at which the instance refresh began.
        public var startTime: ClientRuntime.Date?
        /// The current status for the instance refresh operation:
        ///
        ///
        ///
        ///                   Pending - The request was created, but the operation has not
        ///                     started.
        ///
        ///
        ///
        ///                   InProgress - The operation is in progress.
        ///
        ///
        ///
        ///                   Successful - The operation completed successfully.
        ///
        ///
        ///
        ///                   Failed - The operation failed to complete. You can troubleshoot
        ///                     using the status reason and the scaling activities.
        ///
        ///
        ///
        ///                   Cancelling - An ongoing operation is being cancelled.
        ///                     Cancellation does not roll back any replacements that have already been
        ///                     completed, but it prevents new replacements from being started.
        ///
        ///
        ///
        ///                   Cancelled - The operation is cancelled.
        ///
        ///
        public var status: AutoScalingClientTypes.InstanceRefreshStatus?
        /// Provides more details about the current status of the instance refresh.
        public var statusReason: Swift.String?

        public init (
            autoScalingGroupName: Swift.String? = nil,
            desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration? = nil,
            endTime: ClientRuntime.Date? = nil,
            instanceRefreshId: Swift.String? = nil,
            instancesToUpdate: Swift.Int? = nil,
            percentageComplete: Swift.Int? = nil,
            preferences: AutoScalingClientTypes.RefreshPreferences? = nil,
            progressDetails: AutoScalingClientTypes.InstanceRefreshProgressDetails? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: AutoScalingClientTypes.InstanceRefreshStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.desiredConfiguration = desiredConfiguration
            self.endTime = endTime
            self.instanceRefreshId = instanceRefreshId
            self.instancesToUpdate = instancesToUpdate
            self.percentageComplete = percentageComplete
            self.preferences = preferences
            self.progressDetails = progressDetails
            self.startTime = startTime
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension InstanceRefreshInProgressFault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceRefreshInProgressFault(message: \(Swift.String(describing: message)))"}
}

extension InstanceRefreshInProgressFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InstanceRefreshInProgressFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request failed because an active instance refresh operation already exists for the
///             specified Auto Scaling group.
public struct InstanceRefreshInProgressFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InstanceRefreshInProgressFaultBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InstanceRefreshInProgressFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingClientTypes.InstanceRefreshLivePoolProgress: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instancesToUpdate = "InstancesToUpdate"
        case percentageComplete = "PercentageComplete"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instancesToUpdate = instancesToUpdate {
            try container.encode(instancesToUpdate, forKey: ClientRuntime.Key("InstancesToUpdate"))
        }
        if let percentageComplete = percentageComplete {
            try container.encode(percentageComplete, forKey: ClientRuntime.Key("PercentageComplete"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let percentageCompleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentageComplete)
        percentageComplete = percentageCompleteDecoded
        let instancesToUpdateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesToUpdate)
        instancesToUpdate = instancesToUpdateDecoded
    }
}

extension AutoScalingClientTypes.InstanceRefreshLivePoolProgress: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceRefreshLivePoolProgress(instancesToUpdate: \(Swift.String(describing: instancesToUpdate)), percentageComplete: \(Swift.String(describing: percentageComplete)))"}
}

extension AutoScalingClientTypes {
    /// Reports the progress of an instance refresh on instances that are in the Auto Scaling
    ///             group.
    public struct InstanceRefreshLivePoolProgress: Swift.Equatable {
        /// The number of instances remaining to update.
        public var instancesToUpdate: Swift.Int?
        /// The percentage of instances in the Auto Scaling group that have been replaced. For each
        ///             instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time.
        ///             When the instance's health status changes to healthy and the specified warm-up time
        ///             passes, the instance is considered updated and is added to the percentage
        ///             complete.
        public var percentageComplete: Swift.Int?

        public init (
            instancesToUpdate: Swift.Int? = nil,
            percentageComplete: Swift.Int? = nil
        )
        {
            self.instancesToUpdate = instancesToUpdate
            self.percentageComplete = percentageComplete
        }
    }

}

extension AutoScalingClientTypes.InstanceRefreshProgressDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case livePoolProgress = "LivePoolProgress"
        case warmPoolProgress = "WarmPoolProgress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let livePoolProgress = livePoolProgress {
            try container.encode(livePoolProgress, forKey: ClientRuntime.Key("LivePoolProgress"))
        }
        if let warmPoolProgress = warmPoolProgress {
            try container.encode(warmPoolProgress, forKey: ClientRuntime.Key("WarmPoolProgress"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let livePoolProgressDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceRefreshLivePoolProgress.self, forKey: .livePoolProgress)
        livePoolProgress = livePoolProgressDecoded
        let warmPoolProgressDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceRefreshWarmPoolProgress.self, forKey: .warmPoolProgress)
        warmPoolProgress = warmPoolProgressDecoded
    }
}

extension AutoScalingClientTypes.InstanceRefreshProgressDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceRefreshProgressDetails(livePoolProgress: \(Swift.String(describing: livePoolProgress)), warmPoolProgress: \(Swift.String(describing: warmPoolProgress)))"}
}

extension AutoScalingClientTypes {
    /// Reports the progress of an instance refresh on an Auto Scaling group that has a warm pool.
    ///             This includes separate details for instances in the warm pool and instances in the Auto Scaling
    ///             group (the live pool).
    public struct InstanceRefreshProgressDetails: Swift.Equatable {
        /// Indicates the progress of an instance refresh on instances that are in the Auto Scaling
        ///             group.
        public var livePoolProgress: AutoScalingClientTypes.InstanceRefreshLivePoolProgress?
        /// Indicates the progress of an instance refresh on instances that are in the warm
        ///             pool.
        public var warmPoolProgress: AutoScalingClientTypes.InstanceRefreshWarmPoolProgress?

        public init (
            livePoolProgress: AutoScalingClientTypes.InstanceRefreshLivePoolProgress? = nil,
            warmPoolProgress: AutoScalingClientTypes.InstanceRefreshWarmPoolProgress? = nil
        )
        {
            self.livePoolProgress = livePoolProgress
            self.warmPoolProgress = warmPoolProgress
        }
    }

}

extension AutoScalingClientTypes {
    public enum InstanceRefreshStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case cancelling
        case failed
        case inprogress
        case pending
        case successful
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceRefreshStatus] {
            return [
                .cancelled,
                .cancelling,
                .failed,
                .inprogress,
                .pending,
                .successful,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .cancelling: return "Cancelling"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .pending: return "Pending"
            case .successful: return "Successful"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceRefreshStatus(rawValue: rawValue) ?? InstanceRefreshStatus.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.InstanceRefreshWarmPoolProgress: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instancesToUpdate = "InstancesToUpdate"
        case percentageComplete = "PercentageComplete"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instancesToUpdate = instancesToUpdate {
            try container.encode(instancesToUpdate, forKey: ClientRuntime.Key("InstancesToUpdate"))
        }
        if let percentageComplete = percentageComplete {
            try container.encode(percentageComplete, forKey: ClientRuntime.Key("PercentageComplete"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let percentageCompleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percentageComplete)
        percentageComplete = percentageCompleteDecoded
        let instancesToUpdateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instancesToUpdate)
        instancesToUpdate = instancesToUpdateDecoded
    }
}

extension AutoScalingClientTypes.InstanceRefreshWarmPoolProgress: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceRefreshWarmPoolProgress(instancesToUpdate: \(Swift.String(describing: instancesToUpdate)), percentageComplete: \(Swift.String(describing: percentageComplete)))"}
}

extension AutoScalingClientTypes {
    /// Reports the progress of an instance refresh on instances that are in the warm
    ///             pool.
    public struct InstanceRefreshWarmPoolProgress: Swift.Equatable {
        /// The number of instances remaining to update.
        public var instancesToUpdate: Swift.Int?
        /// The percentage of instances in the warm pool that have been replaced. For each
        ///             instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time.
        ///             When the instance's health status changes to healthy and the specified warm-up time
        ///             passes, the instance is considered updated and is added to the percentage
        ///             complete.
        public var percentageComplete: Swift.Int?

        public init (
            instancesToUpdate: Swift.Int? = nil,
            percentageComplete: Swift.Int? = nil
        )
        {
            self.instancesToUpdate = instancesToUpdate
            self.percentageComplete = percentageComplete
        }
    }

}

extension AutoScalingClientTypes.InstancesDistribution: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case onDemandAllocationStrategy = "OnDemandAllocationStrategy"
        case onDemandBaseCapacity = "OnDemandBaseCapacity"
        case onDemandPercentageAboveBaseCapacity = "OnDemandPercentageAboveBaseCapacity"
        case spotAllocationStrategy = "SpotAllocationStrategy"
        case spotInstancePools = "SpotInstancePools"
        case spotMaxPrice = "SpotMaxPrice"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let onDemandAllocationStrategy = onDemandAllocationStrategy {
            try container.encode(onDemandAllocationStrategy, forKey: ClientRuntime.Key("OnDemandAllocationStrategy"))
        }
        if let onDemandBaseCapacity = onDemandBaseCapacity {
            try container.encode(onDemandBaseCapacity, forKey: ClientRuntime.Key("OnDemandBaseCapacity"))
        }
        if let onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity {
            try container.encode(onDemandPercentageAboveBaseCapacity, forKey: ClientRuntime.Key("OnDemandPercentageAboveBaseCapacity"))
        }
        if let spotAllocationStrategy = spotAllocationStrategy {
            try container.encode(spotAllocationStrategy, forKey: ClientRuntime.Key("SpotAllocationStrategy"))
        }
        if let spotInstancePools = spotInstancePools {
            try container.encode(spotInstancePools, forKey: ClientRuntime.Key("SpotInstancePools"))
        }
        if let spotMaxPrice = spotMaxPrice {
            try container.encode(spotMaxPrice, forKey: ClientRuntime.Key("SpotMaxPrice"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let onDemandAllocationStrategyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .onDemandAllocationStrategy)
        onDemandAllocationStrategy = onDemandAllocationStrategyDecoded
        let onDemandBaseCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .onDemandBaseCapacity)
        onDemandBaseCapacity = onDemandBaseCapacityDecoded
        let onDemandPercentageAboveBaseCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .onDemandPercentageAboveBaseCapacity)
        onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacityDecoded
        let spotAllocationStrategyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotAllocationStrategy)
        spotAllocationStrategy = spotAllocationStrategyDecoded
        let spotInstancePoolsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .spotInstancePools)
        spotInstancePools = spotInstancePoolsDecoded
        let spotMaxPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotMaxPrice)
        spotMaxPrice = spotMaxPriceDecoded
    }
}

extension AutoScalingClientTypes.InstancesDistribution: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstancesDistribution(onDemandAllocationStrategy: \(Swift.String(describing: onDemandAllocationStrategy)), onDemandBaseCapacity: \(Swift.String(describing: onDemandBaseCapacity)), onDemandPercentageAboveBaseCapacity: \(Swift.String(describing: onDemandPercentageAboveBaseCapacity)), spotAllocationStrategy: \(Swift.String(describing: spotAllocationStrategy)), spotInstancePools: \(Swift.String(describing: spotInstancePools)), spotMaxPrice: \(Swift.String(describing: spotMaxPrice)))"}
}

extension AutoScalingClientTypes {
    /// Describes an instances distribution for an Auto Scaling group with a MixedInstancesPolicy.
    ///         The instances distribution specifies the distribution of On-Demand Instances and Spot
    ///             Instances, the maximum price to pay for Spot Instances, and how the Auto Scaling group allocates
    ///             instance types to fulfill On-Demand and Spot capacities.
    ///         When you modify SpotAllocationStrategy, SpotInstancePools,
    ///             or SpotMaxPrice in the UpdateAutoScalingGroup API call,
    ///             this update action does not deploy any changes across the running Amazon EC2 instances
    ///             in the group. Your existing Spot Instances continue to run as long as the maximum price
    ///             for those instances is higher than the current Spot price. When scale out occurs,
    ///             Amazon EC2 Auto Scaling launches instances based on the new settings. When scale in occurs, Amazon EC2 Auto Scaling
    ///             terminates instances according to the group's termination policies.
    public struct InstancesDistribution: Swift.Equatable {
        /// Indicates how to allocate instance types to fulfill On-Demand capacity. The only valid
        ///             value is prioritized, which is also the default value. This strategy uses
        ///             the order of instance types in the LaunchTemplateOverrides to define the
        ///             launch priority of each instance type. The first instance type in the array is
        ///             prioritized higher than the last. If all your On-Demand capacity cannot be fulfilled
        ///             using your highest priority instance, then the Auto Scaling groups launches the remaining
        ///             capacity using the second priority instance type, and so on.
        public var onDemandAllocationStrategy: Swift.String?
        /// The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand
        ///             Instances. This base portion is provisioned first as your group scales. Defaults to 0 if
        ///             not specified. If you specify weights for the instance types in the overrides, set the
        ///             value of OnDemandBaseCapacity in terms of the number of capacity units, and
        ///             not the number of instances.
        public var onDemandBaseCapacity: Swift.Int?
        /// Controls the percentages of On-Demand Instances and Spot Instances for your additional
        ///             capacity beyond OnDemandBaseCapacity. Expressed as a number (for example,
        ///             20 specifies 20% On-Demand Instances, 80% Spot Instances). Defaults to 100 if not
        ///             specified. If set to 100, only On-Demand Instances are provisioned.
        public var onDemandPercentageAboveBaseCapacity: Swift.Int?
        /// Indicates how to allocate instances across Spot Instance pools.
        ///         If the allocation strategy is lowest-price, the Auto Scaling group launches
        ///             instances using the Spot pools with the lowest price, and evenly allocates your
        ///             instances across the number of Spot pools that you specify. Defaults to
        ///                 lowest-price if not specified.
        ///         If the allocation strategy is capacity-optimized (recommended), the Auto Scaling
        ///             group launches instances using Spot pools that are optimally chosen based on the
        ///             available Spot capacity. Alternatively, you can use
        ///                 capacity-optimized-prioritized and set the order of instance types in
        ///             the list of launch template overrides from highest to lowest priority (from first to
        ///             last in the list). Amazon EC2 Auto Scaling honors the instance type priorities on a best-effort basis
        ///             but optimizes for capacity first.
        public var spotAllocationStrategy: Swift.String?
        /// The number of Spot Instance pools across which to allocate your Spot Instances. The
        ///             Spot pools are determined from the different instance types in the overrides. Valid only
        ///             when the Spot allocation strategy is lowest-price. Value must be in the
        ///             range of 1 to 20. Defaults to 2 if not specified.
        public var spotInstancePools: Swift.Int?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. If
        ///             you leave the value at its default (empty), Amazon EC2 Auto Scaling uses the On-Demand price as the
        ///             maximum Spot price. To remove a value that you previously set, include the property but
        ///             specify an empty string ("") for the value.
        public var spotMaxPrice: Swift.String?

        public init (
            onDemandAllocationStrategy: Swift.String? = nil,
            onDemandBaseCapacity: Swift.Int? = nil,
            onDemandPercentageAboveBaseCapacity: Swift.Int? = nil,
            spotAllocationStrategy: Swift.String? = nil,
            spotInstancePools: Swift.Int? = nil,
            spotMaxPrice: Swift.String? = nil
        )
        {
            self.onDemandAllocationStrategy = onDemandAllocationStrategy
            self.onDemandBaseCapacity = onDemandBaseCapacity
            self.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity
            self.spotAllocationStrategy = spotAllocationStrategy
            self.spotInstancePools = spotInstancePools
            self.spotMaxPrice = spotMaxPrice
        }
    }

}

extension InvalidNextToken: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidNextToken(message: \(Swift.String(describing: message)))"}
}

extension InvalidNextToken {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<InvalidNextTokenBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The NextToken value is not valid.
public struct InvalidNextToken: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidNextTokenBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingClientTypes.LaunchConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associatePublicIpAddress = "AssociatePublicIpAddress"
        case blockDeviceMappings = "BlockDeviceMappings"
        case classicLinkVPCId = "ClassicLinkVPCId"
        case classicLinkVPCSecurityGroups = "ClassicLinkVPCSecurityGroups"
        case createdTime = "CreatedTime"
        case ebsOptimized = "EbsOptimized"
        case iamInstanceProfile = "IamInstanceProfile"
        case imageId = "ImageId"
        case instanceMonitoring = "InstanceMonitoring"
        case instanceType = "InstanceType"
        case kernelId = "KernelId"
        case keyName = "KeyName"
        case launchConfigurationARN = "LaunchConfigurationARN"
        case launchConfigurationName = "LaunchConfigurationName"
        case metadataOptions = "MetadataOptions"
        case placementTenancy = "PlacementTenancy"
        case ramdiskId = "RamdiskId"
        case securityGroups = "SecurityGroups"
        case spotPrice = "SpotPrice"
        case userData = "UserData"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let associatePublicIpAddress = associatePublicIpAddress {
            try container.encode(associatePublicIpAddress, forKey: ClientRuntime.Key("AssociatePublicIpAddress"))
        }
        if let blockDeviceMappings = blockDeviceMappings {
            var blockDeviceMappingsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("BlockDeviceMappings"))
            for (index0, blockdevicemapping0) in blockDeviceMappings.enumerated() {
                try blockDeviceMappingsContainer.encode(blockdevicemapping0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let classicLinkVPCId = classicLinkVPCId {
            try container.encode(classicLinkVPCId, forKey: ClientRuntime.Key("ClassicLinkVPCId"))
        }
        if let classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups {
            var classicLinkVPCSecurityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ClassicLinkVPCSecurityGroups"))
            for (index0, xmlstringmaxlen2550) in classicLinkVPCSecurityGroups.enumerated() {
                try classicLinkVPCSecurityGroupsContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let createdTime = createdTime {
            try container.encode(ClientRuntime.TimestampWrapper(createdTime, format: .dateTime), forKey: ClientRuntime.Key("createdTime"))
        }
        if let ebsOptimized = ebsOptimized {
            try container.encode(ebsOptimized, forKey: ClientRuntime.Key("EbsOptimized"))
        }
        if let iamInstanceProfile = iamInstanceProfile {
            try container.encode(iamInstanceProfile, forKey: ClientRuntime.Key("IamInstanceProfile"))
        }
        if let imageId = imageId {
            try container.encode(imageId, forKey: ClientRuntime.Key("ImageId"))
        }
        if let instanceMonitoring = instanceMonitoring {
            try container.encode(instanceMonitoring, forKey: ClientRuntime.Key("InstanceMonitoring"))
        }
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let kernelId = kernelId {
            try container.encode(kernelId, forKey: ClientRuntime.Key("KernelId"))
        }
        if let keyName = keyName {
            try container.encode(keyName, forKey: ClientRuntime.Key("KeyName"))
        }
        if let launchConfigurationARN = launchConfigurationARN {
            try container.encode(launchConfigurationARN, forKey: ClientRuntime.Key("LaunchConfigurationARN"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let metadataOptions = metadataOptions {
            try container.encode(metadataOptions, forKey: ClientRuntime.Key("MetadataOptions"))
        }
        if let placementTenancy = placementTenancy {
            try container.encode(placementTenancy, forKey: ClientRuntime.Key("PlacementTenancy"))
        }
        if let ramdiskId = ramdiskId {
            try container.encode(ramdiskId, forKey: ClientRuntime.Key("RamdiskId"))
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("SecurityGroups"))
            for (index0, xmlstring0) in securityGroups.enumerated() {
                try securityGroupsContainer.encode(xmlstring0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let spotPrice = spotPrice {
            try container.encode(spotPrice, forKey: ClientRuntime.Key("SpotPrice"))
        }
        if let userData = userData {
            try container.encode(userData, forKey: ClientRuntime.Key("UserData"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let launchConfigurationARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationARN)
        launchConfigurationARN = launchConfigurationARNDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let keyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyName)
        keyName = keyNameDecoded
        if containerValues.contains(.securityGroups) {
            struct KeyVal0{struct member{}}
            let securityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .securityGroups)
            if let securityGroupsWrappedContainer = securityGroupsWrappedContainer {
                let securityGroupsContainer = try securityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var securityGroupsBuffer:[Swift.String]? = nil
                if let securityGroupsContainer = securityGroupsContainer {
                    securityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in securityGroupsContainer {
                        securityGroupsBuffer?.append(stringContainer0)
                    }
                }
                securityGroups = securityGroupsBuffer
            } else {
                securityGroups = []
            }
        } else {
            securityGroups = nil
        }
        let classicLinkVPCIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .classicLinkVPCId)
        classicLinkVPCId = classicLinkVPCIdDecoded
        if containerValues.contains(.classicLinkVPCSecurityGroups) {
            struct KeyVal0{struct member{}}
            let classicLinkVPCSecurityGroupsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .classicLinkVPCSecurityGroups)
            if let classicLinkVPCSecurityGroupsWrappedContainer = classicLinkVPCSecurityGroupsWrappedContainer {
                let classicLinkVPCSecurityGroupsContainer = try classicLinkVPCSecurityGroupsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var classicLinkVPCSecurityGroupsBuffer:[Swift.String]? = nil
                if let classicLinkVPCSecurityGroupsContainer = classicLinkVPCSecurityGroupsContainer {
                    classicLinkVPCSecurityGroupsBuffer = [Swift.String]()
                    for stringContainer0 in classicLinkVPCSecurityGroupsContainer {
                        classicLinkVPCSecurityGroupsBuffer?.append(stringContainer0)
                    }
                }
                classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroupsBuffer
            } else {
                classicLinkVPCSecurityGroups = []
            }
        } else {
            classicLinkVPCSecurityGroups = nil
        }
        let userDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userData)
        userData = userDataDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let kernelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kernelId)
        kernelId = kernelIdDecoded
        let ramdiskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ramdiskId)
        ramdiskId = ramdiskIdDecoded
        if containerValues.contains(.blockDeviceMappings) {
            struct KeyVal0{struct member{}}
            let blockDeviceMappingsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .blockDeviceMappings)
            if let blockDeviceMappingsWrappedContainer = blockDeviceMappingsWrappedContainer {
                let blockDeviceMappingsContainer = try blockDeviceMappingsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.BlockDeviceMapping].self, forKey: .member)
                var blockDeviceMappingsBuffer:[AutoScalingClientTypes.BlockDeviceMapping]? = nil
                if let blockDeviceMappingsContainer = blockDeviceMappingsContainer {
                    blockDeviceMappingsBuffer = [AutoScalingClientTypes.BlockDeviceMapping]()
                    for structureContainer0 in blockDeviceMappingsContainer {
                        blockDeviceMappingsBuffer?.append(structureContainer0)
                    }
                }
                blockDeviceMappings = blockDeviceMappingsBuffer
            } else {
                blockDeviceMappings = []
            }
        } else {
            blockDeviceMappings = nil
        }
        let instanceMonitoringDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceMonitoring.self, forKey: .instanceMonitoring)
        instanceMonitoring = instanceMonitoringDecoded
        let spotPriceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .spotPrice)
        spotPrice = spotPriceDecoded
        let iamInstanceProfileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamInstanceProfile)
        iamInstanceProfile = iamInstanceProfileDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        var createdTimeBuffer:ClientRuntime.Date? = nil
        if let createdTimeDecoded = createdTimeDecoded {
            createdTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createdTimeDecoded, format: .dateTime)
        }
        createdTime = createdTimeBuffer
        let ebsOptimizedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .ebsOptimized)
        ebsOptimized = ebsOptimizedDecoded
        let associatePublicIpAddressDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .associatePublicIpAddress)
        associatePublicIpAddress = associatePublicIpAddressDecoded
        let placementTenancyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .placementTenancy)
        placementTenancy = placementTenancyDecoded
        let metadataOptionsDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstanceMetadataOptions.self, forKey: .metadataOptions)
        metadataOptions = metadataOptionsDecoded
    }
}

extension AutoScalingClientTypes.LaunchConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LaunchConfiguration(associatePublicIpAddress: \(Swift.String(describing: associatePublicIpAddress)), blockDeviceMappings: \(Swift.String(describing: blockDeviceMappings)), classicLinkVPCId: \(Swift.String(describing: classicLinkVPCId)), classicLinkVPCSecurityGroups: \(Swift.String(describing: classicLinkVPCSecurityGroups)), createdTime: \(Swift.String(describing: createdTime)), ebsOptimized: \(Swift.String(describing: ebsOptimized)), iamInstanceProfile: \(Swift.String(describing: iamInstanceProfile)), imageId: \(Swift.String(describing: imageId)), instanceMonitoring: \(Swift.String(describing: instanceMonitoring)), instanceType: \(Swift.String(describing: instanceType)), kernelId: \(Swift.String(describing: kernelId)), keyName: \(Swift.String(describing: keyName)), launchConfigurationARN: \(Swift.String(describing: launchConfigurationARN)), launchConfigurationName: \(Swift.String(describing: launchConfigurationName)), metadataOptions: \(Swift.String(describing: metadataOptions)), placementTenancy: \(Swift.String(describing: placementTenancy)), ramdiskId: \(Swift.String(describing: ramdiskId)), securityGroups: \(Swift.String(describing: securityGroups)), spotPrice: \(Swift.String(describing: spotPrice)), userData: \(Swift.String(describing: userData)))"}
}

extension AutoScalingClientTypes {
    /// Describes a launch configuration.
    public struct LaunchConfiguration: Swift.Equatable {
        /// For Auto Scaling groups that are running in a VPC, specifies whether to assign a public IP
        ///             address to the group's instances. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html">Launching Auto Scaling instances in a
        ///                 VPC in the Amazon EC2 Auto Scaling User Guide.
        public var associatePublicIpAddress: Swift.Bool?
        /// A block device mapping, which specifies the block devices for the instance. For more
        ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html">Block Device
        ///                 Mapping in the Amazon EC2 User Guide for Linux Instances.
        public var blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]?
        /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. For more
        ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink in the
        ///                 Amazon EC2 User Guide for Linux Instances and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic
        ///                 instances to a VPC in the Amazon EC2 Auto Scaling User Guide.
        public var classicLinkVPCId: Swift.String?
        /// The IDs of one or more security groups for the VPC specified in
        ///                 ClassicLinkVPCId.
        ///         For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink in the
        ///                 Amazon EC2 User Guide for Linux Instances and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html#as-ClassicLink">Linking EC2-Classic
        ///                 instances to a VPC in the Amazon EC2 Auto Scaling User Guide.
        public var classicLinkVPCSecurityGroups: [Swift.String]?
        /// The creation date and time for the launch configuration.
        /// This member is required.
        public var createdTime: ClientRuntime.Date?
        /// Specifies whether the launch configuration is optimized for EBS I/O
        ///             (true) or not (false). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html">Amazon
        ///                 EBS-Optimized Instances in the Amazon EC2 User Guide for Linux Instances.
        public var ebsOptimized: Swift.Bool?
        /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the
        ///             IAM role for the instance. The instance profile contains the IAM role. For more
        ///             information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html">IAM role for applications that run
        ///                 on Amazon EC2 instances in the Amazon EC2 Auto Scaling User Guide.
        public var iamInstanceProfile: Swift.String?
        /// The ID of the Amazon Machine Image (AMI) to use to launch your EC2 instances. For more
        ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html">Finding an AMI in the
        ///                 Amazon EC2 User Guide for Linux Instances.
        /// This member is required.
        public var imageId: Swift.String?
        /// Controls whether instances in this group are launched with detailed
        ///             (true) or basic (false) monitoring.
        ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html">Configure
        ///                 Monitoring for Auto Scaling Instances in the
        ///             Amazon EC2 Auto Scaling User Guide.
        public var instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring?
        /// The instance type for the instances.
        ///         For information about available instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes">Available
        ///                 Instance Types in the Amazon EC2 User Guide for Linux Instances.
        /// This member is required.
        public var instanceType: Swift.String?
        /// The ID of the kernel associated with the AMI.
        public var kernelId: Swift.String?
        /// The name of the key pair.
        ///         For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 Key Pairs in the
        ///                 Amazon EC2 User Guide for Linux Instances.
        public var keyName: Swift.String?
        /// The Amazon Resource Name (ARN) of the launch configuration.
        public var launchConfigurationARN: Swift.String?
        /// The name of the launch configuration.
        /// This member is required.
        public var launchConfigurationName: Swift.String?
        /// The metadata options for the instances. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds">Configuring the Instance Metadata Options in the
        ///                 Amazon EC2 Auto Scaling User Guide.
        public var metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions?
        /// The tenancy of the instance, either default or dedicated. An
        ///             instance with dedicated tenancy runs on isolated, single-tenant hardware
        ///             and can only be launched into a VPC.
        ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html">Configuring
        ///                 instance tenancy with Amazon EC2 Auto Scaling in the
        ///             Amazon EC2 Auto Scaling User Guide.
        public var placementTenancy: Swift.String?
        /// The ID of the RAM disk associated with the AMI.
        public var ramdiskId: Swift.String?
        /// A list that contains the security groups to assign to the instances in the Auto Scaling group.
        ///             For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your
        ///                 VPC in the Amazon Virtual Private Cloud User
        ///             Guide.
        public var securityGroups: [Swift.String]?
        /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the
        ///             request. Spot Instances are launched when the price you specify exceeds the current Spot
        ///             price. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-spot-instances.html">Requesting Spot
        ///                 Instances in the Amazon EC2 Auto Scaling User Guide.
        public var spotPrice: Swift.String?
        /// The user data to make available to the launched EC2 instances. For more information,
        ///             see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data (Linux) and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html">Instance metadata and
        ///                 user data (Windows). If you are using a command line tool, base64-encoding
        ///             is performed for you, and you can load the text from a file. Otherwise, you must provide
        ///             base64-encoded text. User data is limited to 16 KB.
        public var userData: Swift.String?

        public init (
            associatePublicIpAddress: Swift.Bool? = nil,
            blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]? = nil,
            classicLinkVPCId: Swift.String? = nil,
            classicLinkVPCSecurityGroups: [Swift.String]? = nil,
            createdTime: ClientRuntime.Date? = nil,
            ebsOptimized: Swift.Bool? = nil,
            iamInstanceProfile: Swift.String? = nil,
            imageId: Swift.String? = nil,
            instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring? = nil,
            instanceType: Swift.String? = nil,
            kernelId: Swift.String? = nil,
            keyName: Swift.String? = nil,
            launchConfigurationARN: Swift.String? = nil,
            launchConfigurationName: Swift.String? = nil,
            metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions? = nil,
            placementTenancy: Swift.String? = nil,
            ramdiskId: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            spotPrice: Swift.String? = nil,
            userData: Swift.String? = nil
        )
        {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.blockDeviceMappings = blockDeviceMappings
            self.classicLinkVPCId = classicLinkVPCId
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.createdTime = createdTime
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceMonitoring = instanceMonitoring
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchConfigurationARN = launchConfigurationARN
            self.launchConfigurationName = launchConfigurationName
            self.metadataOptions = metadataOptions
            self.placementTenancy = placementTenancy
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.spotPrice = spotPrice
            self.userData = userData
        }
    }

}

extension AutoScalingClientTypes.LaunchTemplate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchTemplateSpecification = "LaunchTemplateSpecification"
        case overrides = "Overrides"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let launchTemplateSpecification = launchTemplateSpecification {
            try container.encode(launchTemplateSpecification, forKey: ClientRuntime.Key("LaunchTemplateSpecification"))
        }
        if let overrides = overrides {
            var overridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Overrides"))
            for (index0, launchtemplateoverrides0) in overrides.enumerated() {
                try overridesContainer.encode(launchtemplateoverrides0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplateSpecification)
        launchTemplateSpecification = launchTemplateSpecificationDecoded
        if containerValues.contains(.overrides) {
            struct KeyVal0{struct member{}}
            let overridesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .overrides)
            if let overridesWrappedContainer = overridesWrappedContainer {
                let overridesContainer = try overridesWrappedContainer.decodeIfPresent([AutoScalingClientTypes.LaunchTemplateOverrides].self, forKey: .member)
                var overridesBuffer:[AutoScalingClientTypes.LaunchTemplateOverrides]? = nil
                if let overridesContainer = overridesContainer {
                    overridesBuffer = [AutoScalingClientTypes.LaunchTemplateOverrides]()
                    for structureContainer0 in overridesContainer {
                        overridesBuffer?.append(structureContainer0)
                    }
                }
                overrides = overridesBuffer
            } else {
                overrides = []
            }
        } else {
            overrides = nil
        }
    }
}

extension AutoScalingClientTypes.LaunchTemplate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LaunchTemplate(launchTemplateSpecification: \(Swift.String(describing: launchTemplateSpecification)), overrides: \(Swift.String(describing: overrides)))"}
}

extension AutoScalingClientTypes {
    /// Describes a launch template and overrides.
    ///         You specify these properties as part of a mixed instances policy.
    ///         When you update the launch template or overrides in the UpdateAutoScalingGroup API call, existing Amazon EC2 instances continue to
    ///             run. When scale out occurs, Amazon EC2 Auto Scaling launches instances to match the new settings. When
    ///             scale in occurs, Amazon EC2 Auto Scaling terminates instances according to the group's termination
    ///             policies.
    public struct LaunchTemplate: Swift.Equatable {
        /// The launch template to use.
        public var launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// Any properties that you specify override the same properties in the launch template.
        ///             If not provided, Amazon EC2 Auto Scaling uses the instance type specified in the launch template when
        ///             it launches an instance.
        public var overrides: [AutoScalingClientTypes.LaunchTemplateOverrides]?

        public init (
            launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            overrides: [AutoScalingClientTypes.LaunchTemplateOverrides]? = nil
        )
        {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }
    }

}

extension AutoScalingClientTypes.LaunchTemplateOverrides: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceType = "InstanceType"
        case launchTemplateSpecification = "LaunchTemplateSpecification"
        case weightedCapacity = "WeightedCapacity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceType = instanceType {
            try container.encode(instanceType, forKey: ClientRuntime.Key("InstanceType"))
        }
        if let launchTemplateSpecification = launchTemplateSpecification {
            try container.encode(launchTemplateSpecification, forKey: ClientRuntime.Key("LaunchTemplateSpecification"))
        }
        if let weightedCapacity = weightedCapacity {
            try container.encode(weightedCapacity, forKey: ClientRuntime.Key("WeightedCapacity"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let weightedCapacityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .weightedCapacity)
        weightedCapacity = weightedCapacityDecoded
        let launchTemplateSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplateSpecification.self, forKey: .launchTemplateSpecification)
        launchTemplateSpecification = launchTemplateSpecificationDecoded
    }
}

extension AutoScalingClientTypes.LaunchTemplateOverrides: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LaunchTemplateOverrides(instanceType: \(Swift.String(describing: instanceType)), launchTemplateSpecification: \(Swift.String(describing: launchTemplateSpecification)), weightedCapacity: \(Swift.String(describing: weightedCapacity)))"}
}

extension AutoScalingClientTypes {
    /// Describes an override for a launch template. The maximum number of instance types that
    ///             can be associated with an Auto Scaling group is 40. The maximum number of distinct launch
    ///             templates you can define for an Auto Scaling group is 20. For more information about configuring
    ///             overrides, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-override-options.html">Configuring
    ///                 overrides in the Amazon EC2 Auto Scaling User Guide.
    public struct LaunchTemplateOverrides: Swift.Equatable {
        /// The instance type, such as m3.xlarge. You must use an instance type that
        ///             is supported in your requested Region and Availability Zones. For more information, see
        ///                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types in the Amazon Elastic Compute Cloud User
        ///                 Guide.
        public var instanceType: Swift.String?
        /// Provides the launch template to be used when launching the instance type. For example,
        ///             some instance types might require a launch template with a different AMI. If not
        ///             provided, Amazon EC2 Auto Scaling uses the launch template that's defined for your mixed instances
        ///             policy. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-launch-template-overrides.html">Specifying a
        ///                 different launch template for an instance type in the
        ///                 Amazon EC2 Auto Scaling User Guide.
        public var launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// The number of capacity units provided by the specified instance type in terms of
        ///             virtual CPUs, memory, storage, throughput, or other relative performance characteristic.
        ///             When a Spot or On-Demand Instance is provisioned, the capacity units count toward the
        ///             desired capacity. Amazon EC2 Auto Scaling provisions instances until the desired capacity is totally
        ///             fulfilled, even if this results in an overage. For example, if there are 2 units
        ///             remaining to fulfill capacity, and Amazon EC2 Auto Scaling can only provision an instance with a
        ///                 WeightedCapacity of 5 units, the instance is provisioned, and the
        ///             desired capacity is exceeded by 3 units. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-weighting.html">Instance weighting for Amazon EC2 Auto Scaling in the Amazon EC2 Auto Scaling User Guide.
        ///             Value must be in the range of 1 to 999.
        public var weightedCapacity: Swift.String?

        public init (
            instanceType: Swift.String? = nil,
            launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            weightedCapacity: Swift.String? = nil
        )
        {
            self.instanceType = instanceType
            self.launchTemplateSpecification = launchTemplateSpecification
            self.weightedCapacity = weightedCapacity
        }
    }

}

extension AutoScalingClientTypes.LaunchTemplateSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchTemplateId = "LaunchTemplateId"
        case launchTemplateName = "LaunchTemplateName"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let launchTemplateId = launchTemplateId {
            try container.encode(launchTemplateId, forKey: ClientRuntime.Key("LaunchTemplateId"))
        }
        if let launchTemplateName = launchTemplateName {
            try container.encode(launchTemplateName, forKey: ClientRuntime.Key("LaunchTemplateName"))
        }
        if let version = version {
            try container.encode(version, forKey: ClientRuntime.Key("Version"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateId)
        launchTemplateId = launchTemplateIdDecoded
        let launchTemplateNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchTemplateName)
        launchTemplateName = launchTemplateNameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension AutoScalingClientTypes.LaunchTemplateSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LaunchTemplateSpecification(launchTemplateId: \(Swift.String(describing: launchTemplateId)), launchTemplateName: \(Swift.String(describing: launchTemplateName)), version: \(Swift.String(describing: version)))"}
}

extension AutoScalingClientTypes {
    /// Describes the launch template and the version of the launch template that Amazon EC2 Auto Scaling
    ///             uses to launch Amazon EC2 instances. For more information about launch templates, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchTemplates.html">Launch
    ///                 templates in the Amazon EC2 Auto Scaling User Guide.
    public struct LaunchTemplateSpecification: Swift.Equatable {
        /// The ID of the launch template. To get the template ID, use the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html">DescribeLaunchTemplates API operation. New launch templates can be created
        ///             using the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html">CreateLaunchTemplate API.
        ///         Conditional: You must specify either a LaunchTemplateId or a
        ///                 LaunchTemplateName.
        public var launchTemplateId: Swift.String?
        /// The name of the launch template. To get the template name, use the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html">DescribeLaunchTemplates API operation. New launch templates can be created
        ///             using the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html">CreateLaunchTemplate API.
        ///         Conditional: You must specify either a LaunchTemplateId or a
        ///                 LaunchTemplateName.
        public var launchTemplateName: Swift.String?
        /// The version number, $Latest, or $Default. To get the version
        ///             number, use the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplateVersions.html">DescribeLaunchTemplateVersions API operation. New launch template versions
        ///             can be created using the Amazon EC2 <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplateVersion.html">CreateLaunchTemplateVersion API. If the value is $Latest,
        ///             Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If
        ///             the value is $Default, Amazon EC2 Auto Scaling selects the default version of the launch
        ///             template when launching instances. The default value is $Default.
        public var version: Swift.String?

        public init (
            launchTemplateId: Swift.String? = nil,
            launchTemplateName: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }
    }

}

extension AutoScalingClientTypes.LifecycleHook: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case defaultResult = "DefaultResult"
        case globalTimeout = "GlobalTimeout"
        case heartbeatTimeout = "HeartbeatTimeout"
        case lifecycleHookName = "LifecycleHookName"
        case lifecycleTransition = "LifecycleTransition"
        case notificationMetadata = "NotificationMetadata"
        case notificationTargetARN = "NotificationTargetARN"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let defaultResult = defaultResult {
            try container.encode(defaultResult, forKey: ClientRuntime.Key("DefaultResult"))
        }
        if let globalTimeout = globalTimeout {
            try container.encode(globalTimeout, forKey: ClientRuntime.Key("GlobalTimeout"))
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try container.encode(heartbeatTimeout, forKey: ClientRuntime.Key("HeartbeatTimeout"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        if let lifecycleTransition = lifecycleTransition {
            try container.encode(lifecycleTransition, forKey: ClientRuntime.Key("LifecycleTransition"))
        }
        if let notificationMetadata = notificationMetadata {
            try container.encode(notificationMetadata, forKey: ClientRuntime.Key("NotificationMetadata"))
        }
        if let notificationTargetARN = notificationTargetARN {
            try container.encode(notificationTargetARN, forKey: ClientRuntime.Key("NotificationTargetARN"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let lifecycleTransitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleTransition)
        lifecycleTransition = lifecycleTransitionDecoded
        let notificationTargetARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTargetARN)
        notificationTargetARN = notificationTargetARNDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let notificationMetadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationMetadata)
        notificationMetadata = notificationMetadataDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
        let globalTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .globalTimeout)
        globalTimeout = globalTimeoutDecoded
        let defaultResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultResult)
        defaultResult = defaultResultDecoded
    }
}

extension AutoScalingClientTypes.LifecycleHook: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LifecycleHook(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), defaultResult: \(Swift.String(describing: defaultResult)), globalTimeout: \(Swift.String(describing: globalTimeout)), heartbeatTimeout: \(Swift.String(describing: heartbeatTimeout)), lifecycleHookName: \(Swift.String(describing: lifecycleHookName)), lifecycleTransition: \(Swift.String(describing: lifecycleTransition)), notificationMetadata: \(Swift.String(describing: notificationMetadata)), notificationTargetARN: \(Swift.String(describing: notificationTargetARN)), roleARN: \(Swift.String(describing: roleARN)))"}
}

extension AutoScalingClientTypes {
    /// Describes a lifecycle hook, which tells Amazon EC2 Auto Scaling that you want to perform an action
    ///             whenever it launches instances or terminates
    ///             instances.
    public struct LifecycleHook: Swift.Equatable {
        /// The name of the Auto Scaling group for the lifecycle hook.
        public var autoScalingGroupName: Swift.String?
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses
        ///             or if an unexpected failure occurs. The possible values are CONTINUE and
        ///                 ABANDON.
        public var defaultResult: Swift.String?
        /// The maximum time, in seconds, that an instance can remain in a
        ///                 Pending:Wait or Terminating:Wait state. The maximum is
        ///             172800 seconds (48 hours) or 100 times HeartbeatTimeout, whichever is
        ///             smaller.
        public var globalTimeout: Swift.Int?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. If
        ///             the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the
        ///                 DefaultResult parameter.
        public var heartbeatTimeout: Swift.Int?
        /// The name of the lifecycle hook.
        public var lifecycleHookName: Swift.String?
        /// The state of the EC2 instance to which to attach the lifecycle hook. The following are
        ///             possible values:
        ///
        ///
        ///                 autoscaling:EC2_INSTANCE_LAUNCHING
        ///
        ///
        ///                 autoscaling:EC2_INSTANCE_TERMINATING
        ///
        ///
        public var lifecycleTransition: Swift.String?
        /// Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the
        ///             notification target.
        public var notificationMetadata: Swift.String?
        /// The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in the
        ///             transition state for the lifecycle hook. The notification target can be either an SQS
        ///             queue or an SNS topic.
        public var notificationTargetARN: Swift.String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified
        ///             notification target.
        public var roleARN: Swift.String?

        public init (
            autoScalingGroupName: Swift.String? = nil,
            defaultResult: Swift.String? = nil,
            globalTimeout: Swift.Int? = nil,
            heartbeatTimeout: Swift.Int? = nil,
            lifecycleHookName: Swift.String? = nil,
            lifecycleTransition: Swift.String? = nil,
            notificationMetadata: Swift.String? = nil,
            notificationTargetARN: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.defaultResult = defaultResult
            self.globalTimeout = globalTimeout
            self.heartbeatTimeout = heartbeatTimeout
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleTransition = lifecycleTransition
            self.notificationMetadata = notificationMetadata
            self.notificationTargetARN = notificationTargetARN
            self.roleARN = roleARN
        }
    }

}

extension AutoScalingClientTypes.LifecycleHookSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultResult = "DefaultResult"
        case heartbeatTimeout = "HeartbeatTimeout"
        case lifecycleHookName = "LifecycleHookName"
        case lifecycleTransition = "LifecycleTransition"
        case notificationMetadata = "NotificationMetadata"
        case notificationTargetARN = "NotificationTargetARN"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultResult = defaultResult {
            try container.encode(defaultResult, forKey: ClientRuntime.Key("DefaultResult"))
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try container.encode(heartbeatTimeout, forKey: ClientRuntime.Key("HeartbeatTimeout"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        if let lifecycleTransition = lifecycleTransition {
            try container.encode(lifecycleTransition, forKey: ClientRuntime.Key("LifecycleTransition"))
        }
        if let notificationMetadata = notificationMetadata {
            try container.encode(notificationMetadata, forKey: ClientRuntime.Key("NotificationMetadata"))
        }
        if let notificationTargetARN = notificationTargetARN {
            try container.encode(notificationTargetARN, forKey: ClientRuntime.Key("NotificationTargetARN"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lifecycleHookNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleHookName)
        lifecycleHookName = lifecycleHookNameDecoded
        let lifecycleTransitionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lifecycleTransition)
        lifecycleTransition = lifecycleTransitionDecoded
        let notificationMetadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationMetadata)
        notificationMetadata = notificationMetadataDecoded
        let heartbeatTimeoutDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .heartbeatTimeout)
        heartbeatTimeout = heartbeatTimeoutDecoded
        let defaultResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultResult)
        defaultResult = defaultResultDecoded
        let notificationTargetARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationTargetARN)
        notificationTargetARN = notificationTargetARNDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
    }
}

extension AutoScalingClientTypes.LifecycleHookSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LifecycleHookSpecification(defaultResult: \(Swift.String(describing: defaultResult)), heartbeatTimeout: \(Swift.String(describing: heartbeatTimeout)), lifecycleHookName: \(Swift.String(describing: lifecycleHookName)), lifecycleTransition: \(Swift.String(describing: lifecycleTransition)), notificationMetadata: \(Swift.String(describing: notificationMetadata)), notificationTargetARN: \(Swift.String(describing: notificationTargetARN)), roleARN: \(Swift.String(describing: roleARN)))"}
}

extension AutoScalingClientTypes {
    /// Describes information used to specify a lifecycle hook for an Auto Scaling
    ///             group.
    ///         A lifecycle hook tells Amazon EC2 Auto Scaling to perform an action on an instance when the instance
    ///             launches (before it is put into service) or as the instance terminates (before it is
    ///             fully terminated).
    ///         This step is a part of the procedure for creating a lifecycle hook for an Auto Scaling
    ///             group:
    ///         <ol>
    ///
    ///                 (Optional) Create a Lambda function and a rule that allows CloudWatch Events to
    ///                     invoke your Lambda function when Amazon EC2 Auto Scaling launches or terminates
    ///                     instances.
    ///
    ///
    ///                 (Optional) Create a notification target and an IAM role. The target can be
    ///                     either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to
    ///                     publish lifecycle notifications to the target.
    ///
    ///
    ///
    ///                     Create the lifecycle hook. Specify whether the hook is
    ///                         used when the instances launch or terminate.
    ///
    ///
    ///
    ///                 If you need more time, record the lifecycle action heartbeat to keep the
    ///                     instance in a pending state.
    ///
    ///
    ///                 If you finish before the timeout period ends, complete the lifecycle
    ///                     action.
    ///
    ///          </ol>
    ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling lifecycle
    ///                 hooks in the Amazon EC2 Auto Scaling User Guide.
    public struct LifecycleHookSpecification: Swift.Equatable {
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses
        ///             or if an unexpected failure occurs. The valid values are CONTINUE and
        ///                 ABANDON. The default value is ABANDON.
        public var defaultResult: Swift.String?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times
        ///             out.
        ///         If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in
        ///             the DefaultResult parameter. You can prevent the lifecycle hook from timing
        ///             out by calling RecordLifecycleActionHeartbeat.
        public var heartbeatTimeout: Swift.Int?
        /// The name of the lifecycle hook.
        /// This member is required.
        public var lifecycleHookName: Swift.String?
        /// The state of the EC2 instance to which you want to attach the lifecycle hook. The
        ///             valid values are:
        ///
        ///
        ///                 autoscaling:EC2_INSTANCE_LAUNCHING
        ///
        ///
        ///                 autoscaling:EC2_INSTANCE_TERMINATING
        ///
        ///
        /// This member is required.
        public var lifecycleTransition: Swift.String?
        /// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to
        ///             the notification target.
        public var notificationMetadata: Swift.String?
        /// The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in the
        ///             transition state for the lifecycle hook. The notification target can be either an SQS
        ///             queue or an SNS topic.
        public var notificationTargetARN: Swift.String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified
        ///             notification target, for example, an Amazon SNS topic or an Amazon SQS queue.
        public var roleARN: Swift.String?

        public init (
            defaultResult: Swift.String? = nil,
            heartbeatTimeout: Swift.Int? = nil,
            lifecycleHookName: Swift.String? = nil,
            lifecycleTransition: Swift.String? = nil,
            notificationMetadata: Swift.String? = nil,
            notificationTargetARN: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.defaultResult = defaultResult
            self.heartbeatTimeout = heartbeatTimeout
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleTransition = lifecycleTransition
            self.notificationMetadata = notificationMetadata
            self.notificationTargetARN = notificationTargetARN
            self.roleARN = roleARN
        }
    }

}

extension AutoScalingClientTypes {
    public enum LifecycleState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case detached
        case detaching
        case enteringStandby
        case inService
        case pending
        case pendingProceed
        case pendingWait
        case quarantined
        case standby
        case terminated
        case terminating
        case terminatingProceed
        case terminatingWait
        case warmedPending
        case warmedPendingProceed
        case warmedPendingWait
        case warmedRunning
        case warmedStopped
        case warmedTerminated
        case warmedTerminating
        case warmedTerminatingProceed
        case warmedTerminatingWait
        case sdkUnknown(Swift.String)

        public static var allCases: [LifecycleState] {
            return [
                .detached,
                .detaching,
                .enteringStandby,
                .inService,
                .pending,
                .pendingProceed,
                .pendingWait,
                .quarantined,
                .standby,
                .terminated,
                .terminating,
                .terminatingProceed,
                .terminatingWait,
                .warmedPending,
                .warmedPendingProceed,
                .warmedPendingWait,
                .warmedRunning,
                .warmedStopped,
                .warmedTerminated,
                .warmedTerminating,
                .warmedTerminatingProceed,
                .warmedTerminatingWait,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .detached: return "Detached"
            case .detaching: return "Detaching"
            case .enteringStandby: return "EnteringStandby"
            case .inService: return "InService"
            case .pending: return "Pending"
            case .pendingProceed: return "Pending:Proceed"
            case .pendingWait: return "Pending:Wait"
            case .quarantined: return "Quarantined"
            case .standby: return "Standby"
            case .terminated: return "Terminated"
            case .terminating: return "Terminating"
            case .terminatingProceed: return "Terminating:Proceed"
            case .terminatingWait: return "Terminating:Wait"
            case .warmedPending: return "Warmed:Pending"
            case .warmedPendingProceed: return "Warmed:Pending:Proceed"
            case .warmedPendingWait: return "Warmed:Pending:Wait"
            case .warmedRunning: return "Warmed:Running"
            case .warmedStopped: return "Warmed:Stopped"
            case .warmedTerminated: return "Warmed:Terminated"
            case .warmedTerminating: return "Warmed:Terminating"
            case .warmedTerminatingProceed: return "Warmed:Terminating:Proceed"
            case .warmedTerminatingWait: return "Warmed:Terminating:Wait"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LifecycleState(rawValue: rawValue) ?? LifecycleState.sdkUnknown(rawValue)
        }
    }
}

extension LimitExceededFault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededFault(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<LimitExceededFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have already reached a limit for your Amazon EC2 Auto Scaling
///             resources (for example, Auto Scaling groups, launch configurations, or lifecycle hooks). For
///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_DescribeAccountLimits.html">DescribeAccountLimits in the Amazon EC2 Auto Scaling API
///             Reference.
public struct LimitExceededFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededFaultBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingClientTypes.LoadBalancerState: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerName = "LoadBalancerName"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancerName = loadBalancerName {
            try container.encode(loadBalancerName, forKey: ClientRuntime.Key("LoadBalancerName"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}

extension AutoScalingClientTypes.LoadBalancerState: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoadBalancerState(loadBalancerName: \(Swift.String(describing: loadBalancerName)), state: \(Swift.String(describing: state)))"}
}

extension AutoScalingClientTypes {
    /// Describes the state of a Classic Load Balancer.
    public struct LoadBalancerState: Swift.Equatable {
        /// The name of the load balancer.
        public var loadBalancerName: Swift.String?
        /// One of the following load balancer states:
        ///
        ///
        ///
        ///                   Adding - The Auto Scaling instances are being registered with the load
        ///                     balancer.
        ///
        ///
        ///
        ///                     Added - All Auto Scaling instances are registered with the load
        ///                     balancer.
        ///
        ///
        ///
        ///                   InService - At least one Auto Scaling instance passed an ELB
        ///                     health check.
        ///
        ///
        ///
        ///                   Removing - The Auto Scaling instances are being deregistered from the
        ///                     load balancer. If connection draining is enabled, Elastic Load Balancing waits for in-flight
        ///                     requests to complete before deregistering the instances.
        ///
        ///
        ///
        ///                   Removed - All Auto Scaling instances are deregistered from the load
        ///                     balancer.
        ///
        ///
        public var state: Swift.String?

        public init (
            loadBalancerName: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.loadBalancerName = loadBalancerName
            self.state = state
        }
    }

}

extension AutoScalingClientTypes.LoadBalancerTargetGroupState: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case loadBalancerTargetGroupARN = "LoadBalancerTargetGroupARN"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let loadBalancerTargetGroupARN = loadBalancerTargetGroupARN {
            try container.encode(loadBalancerTargetGroupARN, forKey: ClientRuntime.Key("LoadBalancerTargetGroupARN"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let loadBalancerTargetGroupARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerTargetGroupARN)
        loadBalancerTargetGroupARN = loadBalancerTargetGroupARNDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}

extension AutoScalingClientTypes.LoadBalancerTargetGroupState: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoadBalancerTargetGroupState(loadBalancerTargetGroupARN: \(Swift.String(describing: loadBalancerTargetGroupARN)), state: \(Swift.String(describing: state)))"}
}

extension AutoScalingClientTypes {
    /// Describes the state of a target group.
    public struct LoadBalancerTargetGroupState: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the target group.
        public var loadBalancerTargetGroupARN: Swift.String?
        /// The state of the target group.
        ///
        ///
        ///
        ///                   Adding - The Auto Scaling instances are being registered with the target
        ///                     group.
        ///
        ///
        ///
        ///                   Added - All Auto Scaling instances are registered with the target
        ///                     group.
        ///
        ///
        ///
        ///                   InService - At least one Auto Scaling instance passed an ELB
        ///                     health check.
        ///
        ///
        ///
        ///                   Removing - The Auto Scaling instances are being deregistered from the
        ///                     target group. If connection draining is enabled, Elastic Load Balancing waits for in-flight
        ///                     requests to complete before deregistering the instances.
        ///
        ///
        ///
        ///                   Removed - All Auto Scaling instances are deregistered from the target
        ///                     group.
        ///
        ///
        public var state: Swift.String?

        public init (
            loadBalancerTargetGroupARN: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.loadBalancerTargetGroupARN = loadBalancerTargetGroupARN
            self.state = state
        }
    }

}

extension AutoScalingClientTypes.LoadForecast: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricSpecification = "MetricSpecification"
        case timestamps = "Timestamps"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricSpecification = metricSpecification {
            try container.encode(metricSpecification, forKey: ClientRuntime.Key("MetricSpecification"))
        }
        if let timestamps = timestamps {
            var timestampsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Timestamps"))
            for (index0, timestamptype0) in timestamps.enumerated() {
                try timestampsContainer.encode(TimestampWrapper(timestamptype0, format: .dateTime), forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let values = values {
            var valuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Values"))
            for (index0, metricscale0) in values.enumerated() {
                try valuesContainer.encode(metricscale0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.timestamps) {
            struct KeyVal0{struct member{}}
            let timestampsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .timestamps)
            if let timestampsWrappedContainer = timestampsWrappedContainer {
                let timestampsContainer = try timestampsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var timestampsBuffer:[ClientRuntime.Date]? = nil
                if let timestampsContainer = timestampsContainer {
                    timestampsBuffer = [ClientRuntime.Date]()
                    for timestampContainer0 in timestampsContainer {
                        try timestampsBuffer?.append(ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampContainer0, format: .dateTime))
                    }
                }
                timestamps = timestampsBuffer
            } else {
                timestamps = []
            }
        } else {
            timestamps = nil
        }
        if containerValues.contains(.values) {
            struct KeyVal0{struct member{}}
            let valuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .values)
            if let valuesWrappedContainer = valuesWrappedContainer {
                let valuesContainer = try valuesWrappedContainer.decodeIfPresent([Swift.Double].self, forKey: .member)
                var valuesBuffer:[Swift.Double]? = nil
                if let valuesContainer = valuesContainer {
                    valuesBuffer = [Swift.Double]()
                    for doubleContainer0 in valuesContainer {
                        valuesBuffer?.append(doubleContainer0)
                    }
                }
                values = valuesBuffer
            } else {
                values = []
            }
        } else {
            values = nil
        }
        let metricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingMetricSpecification.self, forKey: .metricSpecification)
        metricSpecification = metricSpecificationDecoded
    }
}

extension AutoScalingClientTypes.LoadForecast: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoadForecast(metricSpecification: \(Swift.String(describing: metricSpecification)), timestamps: \(Swift.String(describing: timestamps)), values: \(Swift.String(describing: values)))"}
}

extension AutoScalingClientTypes {
    /// A GetPredictiveScalingForecast call returns the load forecast for a
    ///             predictive scaling policy. This structure includes the data points for that load
    ///             forecast, along with the timestamps of those data points and the metric specification.
    ///
    public struct LoadForecast: Swift.Equatable {
        /// The metric specification for the load forecast.
        /// This member is required.
        public var metricSpecification: AutoScalingClientTypes.PredictiveScalingMetricSpecification?
        /// The time stamps for the data points, in UTC format.
        /// This member is required.
        public var timestamps: [ClientRuntime.Date]?
        /// The values of the data points.
        /// This member is required.
        public var values: [Swift.Double]?

        public init (
            metricSpecification: AutoScalingClientTypes.PredictiveScalingMetricSpecification? = nil,
            timestamps: [ClientRuntime.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.metricSpecification = metricSpecification
            self.timestamps = timestamps
            self.values = values
        }
    }

}

extension AutoScalingClientTypes.MetricCollectionType: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metric = "Metric"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metric = metric {
            try container.encode(metric, forKey: ClientRuntime.Key("Metric"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metric)
        metric = metricDecoded
    }
}

extension AutoScalingClientTypes.MetricCollectionType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricCollectionType(metric: \(Swift.String(describing: metric)))"}
}

extension AutoScalingClientTypes {
    /// Describes a metric.
    public struct MetricCollectionType: Swift.Equatable {
        /// One of the following metrics:
        ///
        ///
        ///
        ///                     GroupMinSize
        ///
        ///
        ///
        ///
        ///                     GroupMaxSize
        ///
        ///
        ///
        ///
        ///                     GroupDesiredCapacity
        ///
        ///
        ///
        ///
        ///                     GroupInServiceInstances
        ///
        ///
        ///
        ///
        ///                     GroupPendingInstances
        ///
        ///
        ///
        ///
        ///                     GroupStandbyInstances
        ///
        ///
        ///
        ///
        ///                     GroupTerminatingInstances
        ///
        ///
        ///
        ///
        ///                     GroupTotalInstances
        ///
        ///
        ///
        ///
        ///                     GroupInServiceCapacity
        ///
        ///
        ///
        ///
        ///                     GroupPendingCapacity
        ///
        ///
        ///
        ///
        ///                     GroupStandbyCapacity
        ///
        ///
        ///
        ///
        ///                     GroupTerminatingCapacity
        ///
        ///
        ///
        ///
        ///                     GroupTotalCapacity
        ///
        ///
        ///
        ///
        ///                     WarmPoolDesiredCapacity
        ///
        ///
        ///
        ///
        ///                     WarmPoolWarmedCapacity
        ///
        ///
        ///
        ///
        ///                     WarmPoolPendingCapacity
        ///
        ///
        ///
        ///
        ///                     WarmPoolTerminatingCapacity
        ///
        ///
        ///
        ///
        ///                     WarmPoolTotalCapacity
        ///
        ///
        ///
        ///
        ///                     GroupAndWarmPoolDesiredCapacity
        ///
        ///
        ///
        ///
        ///                     GroupAndWarmPoolTotalCapacity
        ///
        ///
        ///
        public var metric: Swift.String?

        public init (
            metric: Swift.String? = nil
        )
        {
            self.metric = metric
        }
    }

}

extension AutoScalingClientTypes.MetricDimension: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension AutoScalingClientTypes.MetricDimension: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricDimension(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension AutoScalingClientTypes {
    /// Describes the dimension of a metric.
    public struct MetricDimension: Swift.Equatable {
        /// The name of the dimension.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the dimension.
        /// This member is required.
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension AutoScalingClientTypes.MetricGranularityType: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case granularity = "Granularity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let granularity = granularity {
            try container.encode(granularity, forKey: ClientRuntime.Key("Granularity"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let granularityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .granularity)
        granularity = granularityDecoded
    }
}

extension AutoScalingClientTypes.MetricGranularityType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MetricGranularityType(granularity: \(Swift.String(describing: granularity)))"}
}

extension AutoScalingClientTypes {
    /// Describes a granularity of a metric.
    public struct MetricGranularityType: Swift.Equatable {
        /// The granularity. The only valid value is 1Minute.
        public var granularity: Swift.String?

        public init (
            granularity: Swift.String? = nil
        )
        {
            self.granularity = granularity
        }
    }

}

extension AutoScalingClientTypes {
    public enum MetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricStatistic(rawValue: rawValue) ?? MetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes {
    public enum MetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case albrequestcountpertarget
        case asgaveragecpuutilization
        case asgaveragenetworkin
        case asgaveragenetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricType] {
            return [
                .albrequestcountpertarget,
                .asgaveragecpuutilization,
                .asgaveragenetworkin,
                .asgaveragenetworkout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
            case .asgaveragecpuutilization: return "ASGAverageCPUUtilization"
            case .asgaveragenetworkin: return "ASGAverageNetworkIn"
            case .asgaveragenetworkout: return "ASGAverageNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricType(rawValue: rawValue) ?? MetricType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.MixedInstancesPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instancesDistribution = "InstancesDistribution"
        case launchTemplate = "LaunchTemplate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instancesDistribution = instancesDistribution {
            try container.encode(instancesDistribution, forKey: ClientRuntime.Key("InstancesDistribution"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchTemplateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.LaunchTemplate.self, forKey: .launchTemplate)
        launchTemplate = launchTemplateDecoded
        let instancesDistributionDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.InstancesDistribution.self, forKey: .instancesDistribution)
        instancesDistribution = instancesDistributionDecoded
    }
}

extension AutoScalingClientTypes.MixedInstancesPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MixedInstancesPolicy(instancesDistribution: \(Swift.String(describing: instancesDistribution)), launchTemplate: \(Swift.String(describing: launchTemplate)))"}
}

extension AutoScalingClientTypes {
    /// Describes a mixed instances policy. A mixed instances policy contains the instance
    ///             types Amazon EC2 Auto Scaling can launch, and other information Amazon EC2 Auto Scaling can use to launch instances to
    ///             help you optimize your costs. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling groups with multiple
    ///                 instance types and purchase options in the Amazon EC2 Auto Scaling User
    ///                 Guide.
    public struct MixedInstancesPolicy: Swift.Equatable {
        /// Specifies the instances distribution. If not provided, the value for each property in
        ///                 InstancesDistribution uses a default value.
        public var instancesDistribution: AutoScalingClientTypes.InstancesDistribution?
        /// Specifies the launch template to use and the instance types (overrides) that are used
        ///             to provision EC2 instances to fulfill On-Demand and Spot capacities. Required when
        ///             creating a mixed instances policy.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplate?

        public init (
            instancesDistribution: AutoScalingClientTypes.InstancesDistribution? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplate? = nil
        )
        {
            self.instancesDistribution = instancesDistribution
            self.launchTemplate = launchTemplate
        }
    }

}

extension AutoScalingClientTypes.NotificationConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case notificationType = "NotificationType"
        case topicARN = "TopicARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let notificationType = notificationType {
            try container.encode(notificationType, forKey: ClientRuntime.Key("NotificationType"))
        }
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: ClientRuntime.Key("TopicARN"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let topicARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicARN)
        topicARN = topicARNDecoded
        let notificationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notificationType)
        notificationType = notificationTypeDecoded
    }
}

extension AutoScalingClientTypes.NotificationConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotificationConfiguration(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), notificationType: \(Swift.String(describing: notificationType)), topicARN: \(Swift.String(describing: topicARN)))"}
}

extension AutoScalingClientTypes {
    /// Describes a notification.
    public struct NotificationConfiguration: Swift.Equatable {
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// One of the following event notification types:
        ///
        ///
        ///
        ///                     autoscaling:EC2_INSTANCE_LAUNCH
        ///
        ///
        ///
        ///
        ///                     autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        ///
        ///
        ///
        ///
        ///                     autoscaling:EC2_INSTANCE_TERMINATE
        ///
        ///
        ///
        ///
        ///                     autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        ///
        ///
        ///
        ///
        ///                     autoscaling:TEST_NOTIFICATION
        ///
        ///
        ///
        public var notificationType: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS)
        ///             topic.
        public var topicARN: Swift.String?

        public init (
            autoScalingGroupName: Swift.String? = nil,
            notificationType: Swift.String? = nil,
            topicARN: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.notificationType = notificationType
            self.topicARN = topicARN
        }
    }

}

extension AutoScalingClientTypes {
    public enum PredefinedLoadMetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case albtargetgrouprequestcount
        case asgtotalcpuutilization
        case asgtotalnetworkin
        case asgtotalnetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [PredefinedLoadMetricType] {
            return [
                .albtargetgrouprequestcount,
                .asgtotalcpuutilization,
                .asgtotalnetworkin,
                .asgtotalnetworkout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .albtargetgrouprequestcount: return "ALBTargetGroupRequestCount"
            case .asgtotalcpuutilization: return "ASGTotalCPUUtilization"
            case .asgtotalnetworkin: return "ASGTotalNetworkIn"
            case .asgtotalnetworkout: return "ASGTotalNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredefinedLoadMetricType(rawValue: rawValue) ?? PredefinedLoadMetricType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes {
    public enum PredefinedMetricPairType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case albrequestcount
        case asgcpuutilization
        case asgnetworkin
        case asgnetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [PredefinedMetricPairType] {
            return [
                .albrequestcount,
                .asgcpuutilization,
                .asgnetworkin,
                .asgnetworkout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .albrequestcount: return "ALBRequestCount"
            case .asgcpuutilization: return "ASGCPUUtilization"
            case .asgnetworkin: return "ASGNetworkIn"
            case .asgnetworkout: return "ASGNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredefinedMetricPairType(rawValue: rawValue) ?? PredefinedMetricPairType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.PredefinedMetricSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: ClientRuntime.Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: ClientRuntime.Key("ResourceLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.MetricType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension AutoScalingClientTypes.PredefinedMetricSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredefinedMetricSpecification(predefinedMetricType: \(Swift.String(describing: predefinedMetricType)), resourceLabel: \(Swift.String(describing: resourceLabel)))"}
}

extension AutoScalingClientTypes {
    /// Represents a predefined metric for a target tracking scaling policy to use with
    ///             Amazon EC2 Auto Scaling.
    public struct PredefinedMetricSpecification: Swift.Equatable {
        /// The metric type. The following predefined metrics are available:
        ///
        ///
        ///
        ///                   ASGAverageCPUUtilization - Average CPU utilization of the Auto Scaling
        ///                     group.
        ///
        ///
        ///
        ///                   ASGAverageNetworkIn - Average number of bytes received on all
        ///                     network interfaces by the Auto Scaling group.
        ///
        ///
        ///
        ///                   ASGAverageNetworkOut - Average number of bytes sent out on all
        ///                     network interfaces by the Auto Scaling group.
        ///
        ///
        ///
        ///                   ALBRequestCountPerTarget - Number of requests completed per
        ///                     target in an Application Load Balancer target group.
        ///
        ///
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.MetricType?
        /// A label that uniquely identifies a specific Application Load Balancer target group
        ///             from which to determine the average request count served by your Auto Scaling group. You can't
        ///             specify a resource label unless the target group is attached to the Auto Scaling group.
        ///         You create the resource label by appending the final portion of the load balancer ARN
        ///             and the final portion of the target group ARN into a single value, separated by a forward
        ///             slash (/). The format of the resource label is:
        ///
        ///             app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff.
        ///         Where:
        ///
        ///
        ///                 app/<load-balancer-name>/<load-balancer-id> is the final portion of
        ///                     the load balancer ARN
        ///
        ///
        ///                 targetgroup/<target-group-name>/<target-group-id> is the final portion
        ///                     of the target group ARN.
        ///
        ///
        ///         To find the ARN for an Application Load Balancer, use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers API operation. To find the ARN for the target group, use
        ///             the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups API operation.
        public var resourceLabel: Swift.String?

        public init (
            predefinedMetricType: AutoScalingClientTypes.MetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingClientTypes {
    public enum PredefinedScalingMetricType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case albrequestcountpertarget
        case asgaveragecpuutilization
        case asgaveragenetworkin
        case asgaveragenetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [PredefinedScalingMetricType] {
            return [
                .albrequestcountpertarget,
                .asgaveragecpuutilization,
                .asgaveragenetworkin,
                .asgaveragenetworkout,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
            case .asgaveragecpuutilization: return "ASGAverageCPUUtilization"
            case .asgaveragenetworkin: return "ASGAverageNetworkIn"
            case .asgaveragenetworkout: return "ASGAverageNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredefinedScalingMetricType(rawValue: rawValue) ?? PredefinedScalingMetricType.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.PredictiveScalingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxCapacityBreachBehavior = "MaxCapacityBreachBehavior"
        case maxCapacityBuffer = "MaxCapacityBuffer"
        case metricSpecifications = "MetricSpecifications"
        case mode = "Mode"
        case schedulingBufferTime = "SchedulingBufferTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxCapacityBreachBehavior = maxCapacityBreachBehavior {
            try container.encode(maxCapacityBreachBehavior, forKey: ClientRuntime.Key("MaxCapacityBreachBehavior"))
        }
        if let maxCapacityBuffer = maxCapacityBuffer {
            try container.encode(maxCapacityBuffer, forKey: ClientRuntime.Key("MaxCapacityBuffer"))
        }
        if let metricSpecifications = metricSpecifications {
            var metricSpecificationsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("MetricSpecifications"))
            for (index0, predictivescalingmetricspecification0) in metricSpecifications.enumerated() {
                try metricSpecificationsContainer.encode(predictivescalingmetricspecification0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let mode = mode {
            try container.encode(mode, forKey: ClientRuntime.Key("Mode"))
        }
        if let schedulingBufferTime = schedulingBufferTime {
            try container.encode(schedulingBufferTime, forKey: ClientRuntime.Key("SchedulingBufferTime"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.metricSpecifications) {
            struct KeyVal0{struct member{}}
            let metricSpecificationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .metricSpecifications)
            if let metricSpecificationsWrappedContainer = metricSpecificationsWrappedContainer {
                let metricSpecificationsContainer = try metricSpecificationsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.PredictiveScalingMetricSpecification].self, forKey: .member)
                var metricSpecificationsBuffer:[AutoScalingClientTypes.PredictiveScalingMetricSpecification]? = nil
                if let metricSpecificationsContainer = metricSpecificationsContainer {
                    metricSpecificationsBuffer = [AutoScalingClientTypes.PredictiveScalingMetricSpecification]()
                    for structureContainer0 in metricSpecificationsContainer {
                        metricSpecificationsBuffer?.append(structureContainer0)
                    }
                }
                metricSpecifications = metricSpecificationsBuffer
            } else {
                metricSpecifications = []
            }
        } else {
            metricSpecifications = nil
        }
        let modeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingMode.self, forKey: .mode)
        mode = modeDecoded
        let schedulingBufferTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .schedulingBufferTime)
        schedulingBufferTime = schedulingBufferTimeDecoded
        let maxCapacityBreachBehaviorDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingMaxCapacityBreachBehavior.self, forKey: .maxCapacityBreachBehavior)
        maxCapacityBreachBehavior = maxCapacityBreachBehaviorDecoded
        let maxCapacityBufferDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxCapacityBuffer)
        maxCapacityBuffer = maxCapacityBufferDecoded
    }
}

extension AutoScalingClientTypes.PredictiveScalingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredictiveScalingConfiguration(maxCapacityBreachBehavior: \(Swift.String(describing: maxCapacityBreachBehavior)), maxCapacityBuffer: \(Swift.String(describing: maxCapacityBuffer)), metricSpecifications: \(Swift.String(describing: metricSpecifications)), mode: \(Swift.String(describing: mode)), schedulingBufferTime: \(Swift.String(describing: schedulingBufferTime)))"}
}

extension AutoScalingClientTypes {
    /// Represents a predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
    public struct PredictiveScalingConfiguration: Swift.Equatable {
        /// Defines the behavior that should be applied if the forecast capacity approaches or
        ///             exceeds the maximum capacity of the Auto Scaling group. Defaults to
        ///                 HonorMaxCapacity if not specified.
        ///         The following are possible values:
        ///
        ///
        ///
        ///                   HonorMaxCapacity - Amazon EC2 Auto Scaling cannot scale out capacity higher than
        ///                     the maximum capacity. The maximum capacity is enforced as a hard limit.
        ///
        ///
        ///
        ///                   IncreaseMaxCapacity - Amazon EC2 Auto Scaling can scale out capacity higher than
        ///                     the maximum capacity when the forecast capacity is close to or exceeds the
        ///                     maximum capacity. The upper limit is determined by the forecasted capacity and
        ///                     the value for MaxCapacityBuffer.
        ///
        ///
        public var maxCapacityBreachBehavior: AutoScalingClientTypes.PredictiveScalingMaxCapacityBreachBehavior?
        /// The size of the capacity buffer to use when the forecast capacity is close to or
        ///             exceeds the maximum capacity. The value is specified as a percentage relative to the
        ///             forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer,
        ///             such that if the forecast capacity is 50, and the maximum capacity is 40, then the
        ///             effective maximum capacity is 55.
        ///         If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but
        ///             not exceed forecast capacity.
        ///         Required if the MaxCapacityBreachBehavior property is set to
        ///                 IncreaseMaxCapacity, and cannot be used otherwise.
        public var maxCapacityBuffer: Swift.Int?
        /// This structure includes the metrics and target utilization to use for predictive
        ///             scaling.
        ///         This is an array, but we currently only support a single metric specification. That
        ///             is, you can specify a target value and a single metric pair, or a target value and one
        ///             scaling metric and one load metric.
        /// This member is required.
        public var metricSpecifications: [AutoScalingClientTypes.PredictiveScalingMetricSpecification]?
        /// The predictive scaling mode. Defaults to ForecastOnly if not
        ///             specified.
        public var mode: AutoScalingClientTypes.PredictiveScalingMode?
        /// The amount of time, in seconds, by which the instance launch time can be advanced. For
        ///             example, the forecast says to add capacity at 10:00 AM, and you choose to pre-launch
        ///             instances by 5 minutes. In that case, the instances will be launched at 9:55 AM. The
        ///             intention is to give resources time to be provisioned. It can take a few minutes to
        ///             launch an EC2 instance. The actual amount of time required depends on several factors,
        ///             such as the size of the instance and whether there are startup scripts to complete.
        ///         The value must be less than the forecast interval duration of 3600 seconds (60
        ///             minutes). Defaults to 300 seconds if not specified.
        public var schedulingBufferTime: Swift.Int?

        public init (
            maxCapacityBreachBehavior: AutoScalingClientTypes.PredictiveScalingMaxCapacityBreachBehavior? = nil,
            maxCapacityBuffer: Swift.Int? = nil,
            metricSpecifications: [AutoScalingClientTypes.PredictiveScalingMetricSpecification]? = nil,
            mode: AutoScalingClientTypes.PredictiveScalingMode? = nil,
            schedulingBufferTime: Swift.Int? = nil
        )
        {
            self.maxCapacityBreachBehavior = maxCapacityBreachBehavior
            self.maxCapacityBuffer = maxCapacityBuffer
            self.metricSpecifications = metricSpecifications
            self.mode = mode
            self.schedulingBufferTime = schedulingBufferTime
        }
    }

}

extension AutoScalingClientTypes {
    public enum PredictiveScalingMaxCapacityBreachBehavior: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case honormaxcapacity
        case increasemaxcapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [PredictiveScalingMaxCapacityBreachBehavior] {
            return [
                .honormaxcapacity,
                .increasemaxcapacity,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .honormaxcapacity: return "HonorMaxCapacity"
            case .increasemaxcapacity: return "IncreaseMaxCapacity"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredictiveScalingMaxCapacityBreachBehavior(rawValue: rawValue) ?? PredictiveScalingMaxCapacityBreachBehavior.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.PredictiveScalingMetricSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedLoadMetricSpecification = "PredefinedLoadMetricSpecification"
        case predefinedMetricPairSpecification = "PredefinedMetricPairSpecification"
        case predefinedScalingMetricSpecification = "PredefinedScalingMetricSpecification"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let predefinedLoadMetricSpecification = predefinedLoadMetricSpecification {
            try container.encode(predefinedLoadMetricSpecification, forKey: ClientRuntime.Key("PredefinedLoadMetricSpecification"))
        }
        if let predefinedMetricPairSpecification = predefinedMetricPairSpecification {
            try container.encode(predefinedMetricPairSpecification, forKey: ClientRuntime.Key("PredefinedMetricPairSpecification"))
        }
        if let predefinedScalingMetricSpecification = predefinedScalingMetricSpecification {
            try container.encode(predefinedScalingMetricSpecification, forKey: ClientRuntime.Key("PredefinedScalingMetricSpecification"))
        }
        if let targetValue = targetValue {
            try container.encode(targetValue, forKey: ClientRuntime.Key("TargetValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
        let predefinedMetricPairSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair.self, forKey: .predefinedMetricPairSpecification)
        predefinedMetricPairSpecification = predefinedMetricPairSpecificationDecoded
        let predefinedScalingMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric.self, forKey: .predefinedScalingMetricSpecification)
        predefinedScalingMetricSpecification = predefinedScalingMetricSpecificationDecoded
        let predefinedLoadMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric.self, forKey: .predefinedLoadMetricSpecification)
        predefinedLoadMetricSpecification = predefinedLoadMetricSpecificationDecoded
    }
}

extension AutoScalingClientTypes.PredictiveScalingMetricSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredictiveScalingMetricSpecification(predefinedLoadMetricSpecification: \(Swift.String(describing: predefinedLoadMetricSpecification)), predefinedMetricPairSpecification: \(Swift.String(describing: predefinedMetricPairSpecification)), predefinedScalingMetricSpecification: \(Swift.String(describing: predefinedScalingMetricSpecification)), targetValue: \(Swift.String(describing: targetValue)))"}
}

extension AutoScalingClientTypes {
    /// This structure specifies the metrics and target utilization settings for a predictive
    ///             scaling policy.
    ///         You must specify either a metric pair, or a load metric and a scaling metric
    ///             individually. Specifying a metric pair instead of individual metrics provides a simpler
    ///             way to configure metrics for a scaling policy. You choose the metric pair, and the
    ///             policy automatically knows the correct sum and average statistics to use for the load
    ///             metric and the scaling metric.
    ///         Example
    ///
    ///
    ///                 You create a predictive scaling policy and specify
    ///                         ALBRequestCount as the value for the metric pair and
    ///                         1000.0 as the target value. For this type of metric, you must
    ///                     provide the metric dimension for the corresponding target group, so you also
    ///                     provide a resource label for the Application Load Balancer target group that is
    ///                     attached to your Auto Scaling group.
    ///
    ///
    ///                 The number of requests the target group receives per minute provides the load
    ///                     metric, and the request count averaged between the members of the target group
    ///                     provides the scaling metric. In CloudWatch, this refers to the
    ///                         RequestCount and RequestCountPerTarget metrics,
    ///                     respectively.
    ///
    ///
    ///                 For optimal use of predictive scaling, you adhere to the best practice of
    ///                     using a dynamic scaling policy to automatically scale between the minimum
    ///                     capacity and maximum capacity in response to real-time changes in resource
    ///                     utilization.
    ///
    ///
    ///                 Amazon EC2 Auto Scaling consumes data points for the load metric over the last 14 days and
    ///                     creates an hourly load forecast for predictive scaling. (A minimum of 24 hours
    ///                     of data is required.)
    ///
    ///
    ///                 After creating the load forecast, Amazon EC2 Auto Scaling determines when to reduce or
    ///                     increase the capacity of your Auto Scaling group in each hour of the forecast period so
    ///                     that the average number of requests received by each instance is as close to
    ///                     1000 requests per minute as possible at all times.
    ///
    ///
    public struct PredictiveScalingMetricSpecification: Swift.Equatable {
        /// The load metric specification.
        public var predefinedLoadMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric?
        /// The metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling
        ///             metric and load metric to use.
        public var predefinedMetricPairSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair?
        /// The scaling metric specification.
        public var predefinedScalingMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric?
        /// Specifies the target utilization.
        /// This member is required.
        public var targetValue: Swift.Double?

        public init (
            predefinedLoadMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric? = nil,
            predefinedMetricPairSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair? = nil,
            predefinedScalingMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.predefinedLoadMetricSpecification = predefinedLoadMetricSpecification
            self.predefinedMetricPairSpecification = predefinedMetricPairSpecification
            self.predefinedScalingMetricSpecification = predefinedScalingMetricSpecification
            self.targetValue = targetValue
        }
    }

}

extension AutoScalingClientTypes {
    public enum PredictiveScalingMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case forecastandscale
        case forecastonly
        case sdkUnknown(Swift.String)

        public static var allCases: [PredictiveScalingMode] {
            return [
                .forecastandscale,
                .forecastonly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .forecastandscale: return "ForecastAndScale"
            case .forecastonly: return "ForecastOnly"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PredictiveScalingMode(rawValue: rawValue) ?? PredictiveScalingMode.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: ClientRuntime.Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: ClientRuntime.Key("ResourceLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredefinedLoadMetricType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredictiveScalingPredefinedLoadMetric(predefinedMetricType: \(Swift.String(describing: predefinedMetricType)), resourceLabel: \(Swift.String(describing: resourceLabel)))"}
}

extension AutoScalingClientTypes {
    /// Describes a load metric for a predictive scaling policy.
    ///         When returned in the output of DescribePolicies, it indicates that a
    ///             predictive scaling policy uses individually specified load and scaling metrics instead
    ///             of a metric pair.
    public struct PredictiveScalingPredefinedLoadMetric: Swift.Equatable {
        /// The metric type.
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.PredefinedLoadMetricType?
        /// A label that uniquely identifies a specific Application Load Balancer target group from which to determine
        ///             the request count served by your Auto Scaling group. You can't specify a resource label
        ///             unless the target group is attached to the Auto Scaling group.
        ///          You create the resource label by appending the final portion of the load balancer ARN
        ///             and the final portion of the target group ARN into a single value, separated by a forward
        ///             slash (/). The format of the resource label is:
        ///
        ///             app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff.
        ///         Where:
        ///
        ///
        ///                 app/<load-balancer-name>/<load-balancer-id> is the final portion of
        ///                     the load balancer ARN
        ///
        ///
        ///                 targetgroup/<target-group-name>/<target-group-id> is the final portion
        ///                     of the target group ARN.
        ///
        ///
        ///         To find the ARN for an Application Load Balancer, use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers API operation. To find the ARN for the target group, use
        ///             the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups API operation.
        public var resourceLabel: Swift.String?

        public init (
            predefinedMetricType: AutoScalingClientTypes.PredefinedLoadMetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: ClientRuntime.Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: ClientRuntime.Key("ResourceLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredefinedMetricPairType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredictiveScalingPredefinedMetricPair(predefinedMetricType: \(Swift.String(describing: predefinedMetricType)), resourceLabel: \(Swift.String(describing: resourceLabel)))"}
}

extension AutoScalingClientTypes {
    /// Represents a metric pair for a predictive scaling policy.
    public struct PredictiveScalingPredefinedMetricPair: Swift.Equatable {
        /// Indicates which metrics to use. There are two different types of metrics for each
        ///             metric type: one is a load metric and one is a scaling metric. For example, if the
        ///             metric type is ASGCPUUtilization, the Auto Scaling group's total CPU metric is used
        ///             as the load metric, and the average CPU metric is used for the scaling metric.
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.PredefinedMetricPairType?
        /// A label that uniquely identifies a specific Application Load Balancer target group from which to determine
        ///             the total and average request count served by your Auto Scaling group. You can't specify a
        ///             resource label unless the target group is attached to the Auto Scaling group.
        ///         You create the resource label by appending the final portion of the load balancer ARN
        ///             and the final portion of the target group ARN into a single value, separated by a forward
        ///             slash (/). The format of the resource label is:
        ///
        ///             app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff.
        ///         Where:
        ///
        ///
        ///                 app/<load-balancer-name>/<load-balancer-id> is the final portion of
        ///                     the load balancer ARN
        ///
        ///
        ///                 targetgroup/<target-group-name>/<target-group-id> is the final portion
        ///                     of the target group ARN.
        ///
        ///
        ///         To find the ARN for an Application Load Balancer, use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers API operation. To find the ARN for the target group, use
        ///             the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups API operation.
        public var resourceLabel: Swift.String?

        public init (
            predefinedMetricType: AutoScalingClientTypes.PredefinedMetricPairType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case predefinedMetricType = "PredefinedMetricType"
        case resourceLabel = "ResourceLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let predefinedMetricType = predefinedMetricType {
            try container.encode(predefinedMetricType, forKey: ClientRuntime.Key("PredefinedMetricType"))
        }
        if let resourceLabel = resourceLabel {
            try container.encode(resourceLabel, forKey: ClientRuntime.Key("ResourceLabel"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricTypeDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredefinedScalingMetricType.self, forKey: .predefinedMetricType)
        predefinedMetricType = predefinedMetricTypeDecoded
        let resourceLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceLabel)
        resourceLabel = resourceLabelDecoded
    }
}

extension AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredictiveScalingPredefinedScalingMetric(predefinedMetricType: \(Swift.String(describing: predefinedMetricType)), resourceLabel: \(Swift.String(describing: resourceLabel)))"}
}

extension AutoScalingClientTypes {
    /// Describes a scaling metric for a predictive scaling policy.
    ///         When returned in the output of DescribePolicies, it indicates that a
    ///             predictive scaling policy uses individually specified load and scaling metrics instead
    ///             of a metric pair.
    public struct PredictiveScalingPredefinedScalingMetric: Swift.Equatable {
        /// The metric type.
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.PredefinedScalingMetricType?
        /// A label that uniquely identifies a specific Application Load Balancer target group from which to determine
        ///             the average request count served by your Auto Scaling group. You can't specify a resource
        ///             label unless the target group is attached to the Auto Scaling group.
        ///          You create the resource label by appending the final portion of the load balancer ARN
        ///             and the final portion of the target group ARN into a single value, separated by a forward
        ///             slash (/). The format of the resource label is:
        ///
        ///             app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff.
        ///         Where:
        ///
        ///
        ///                 app/<load-balancer-name>/<load-balancer-id> is the final portion of
        ///                     the load balancer ARN
        ///
        ///
        ///                 targetgroup/<target-group-name>/<target-group-id> is the final portion
        ///                     of the target group ARN.
        ///
        ///
        ///         To find the ARN for an Application Load Balancer, use the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers API operation. To find the ARN for the target group, use
        ///             the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html">DescribeTargetGroups API operation.
        public var resourceLabel: Swift.String?

        public init (
            predefinedMetricType: AutoScalingClientTypes.PredefinedScalingMetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }

}

extension AutoScalingClientTypes.ProcessType: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processName = "ProcessName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let processName = processName {
            try container.encode(processName, forKey: ClientRuntime.Key("ProcessName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processName)
        processName = processNameDecoded
    }
}

extension AutoScalingClientTypes.ProcessType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProcessType(processName: \(Swift.String(describing: processName)))"}
}

extension AutoScalingClientTypes {
    /// Describes a process type.
    ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types">Scaling processes in the Amazon EC2 Auto Scaling User Guide.
    public struct ProcessType: Swift.Equatable {
        /// One of the following processes:
        ///
        ///
        ///
        ///                     Launch
        ///
        ///
        ///
        ///
        ///                     Terminate
        ///
        ///
        ///
        ///
        ///                     AddToLoadBalancer
        ///
        ///
        ///
        ///
        ///                     AlarmNotification
        ///
        ///
        ///
        ///
        ///                     AZRebalance
        ///
        ///
        ///
        ///
        ///                     HealthCheck
        ///
        ///
        ///
        ///
        ///                     InstanceRefresh
        ///
        ///
        ///
        ///
        ///                     ReplaceUnhealthy
        ///
        ///
        ///
        ///
        ///                     ScheduledActions
        ///
        ///
        ///
        /// This member is required.
        public var processName: Swift.String?

        public init (
            processName: Swift.String? = nil
        )
        {
            self.processName = processName
        }
    }

}

public struct PutLifecycleHookInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLifecycleHookInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLifecycleHookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLifecycleHookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLifecycleHookOutputError>
}

extension PutLifecycleHookInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutLifecycleHookInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), defaultResult: \(Swift.String(describing: defaultResult)), heartbeatTimeout: \(Swift.String(describing: heartbeatTimeout)), lifecycleHookName: \(Swift.String(describing: lifecycleHookName)), lifecycleTransition: \(Swift.String(describing: lifecycleTransition)), notificationMetadata: \(Swift.String(describing: notificationMetadata)), notificationTargetARN: \(Swift.String(describing: notificationTargetARN)), roleARN: \(Swift.String(describing: roleARN)))"}
}

extension PutLifecycleHookInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let defaultResult = defaultResult {
            try container.encode(defaultResult, forKey: ClientRuntime.Key("DefaultResult"))
        }
        if let heartbeatTimeout = heartbeatTimeout {
            try container.encode(heartbeatTimeout, forKey: ClientRuntime.Key("HeartbeatTimeout"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        if let lifecycleTransition = lifecycleTransition {
            try container.encode(lifecycleTransition, forKey: ClientRuntime.Key("LifecycleTransition"))
        }
        if let notificationMetadata = notificationMetadata {
            try container.encode(notificationMetadata, forKey: ClientRuntime.Key("NotificationMetadata"))
        }
        if let notificationTargetARN = notificationTargetARN {
            try container.encode(notificationTargetARN, forKey: ClientRuntime.Key("NotificationTargetARN"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        try container.encode("PutLifecycleHook", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutLifecycleHookInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLifecycleHookInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLifecycleHookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLifecycleHookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLifecycleHookOutputError>
}

public struct PutLifecycleHookInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLifecycleHookInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutLifecycleHookInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutLifecycleHookInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLifecycleHookOutputError>
}

public struct PutLifecycleHookInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutLifecycleHookInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: PutLifecycleHookInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutLifecycleHookOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutLifecycleHookInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutLifecycleHookOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutLifecycleHookOutputError>
}

public struct PutLifecycleHookInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses
    ///             or if an unexpected failure occurs. This parameter can be either CONTINUE
    ///             or ABANDON. The default value is ABANDON.
    public var defaultResult: Swift.String?
    /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. The
    ///             range is from 30 to 7200 seconds. The default value is
    ///                 3600 seconds (1 hour).
    ///         If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in
    ///             the DefaultResult parameter. You can prevent the lifecycle hook from timing
    ///             out by calling the RecordLifecycleActionHeartbeat API.
    public var heartbeatTimeout: Swift.Int?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?
    /// The instance state to which you want to attach the lifecycle hook. The valid values
    ///             are:
    ///
    ///
    ///                 autoscaling:EC2_INSTANCE_LAUNCHING
    ///
    ///
    ///                 autoscaling:EC2_INSTANCE_TERMINATING
    ///
    ///
    ///         Required for new lifecycle hooks, but optional when updating existing hooks.
    public var lifecycleTransition: Swift.String?
    /// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to
    ///             the notification target.
    public var notificationMetadata: Swift.String?
    /// The ARN of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance
    ///             is in the transition state for the lifecycle hook. This target can be either an SQS
    ///             queue or an SNS topic.
    ///         If you specify an empty string, this overrides the current ARN.
    ///         This operation uses the JSON format when sending notifications to an Amazon SQS queue,
    ///             and an email key-value pair format when sending notifications to an Amazon SNS
    ///             topic.
    ///         When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test
    ///             messages contain the following additional key-value pair: "Event":
    ///                 "autoscaling:TEST_NOTIFICATION".
    public var notificationTargetARN: Swift.String?
    /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified
    ///             notification target, for example, an Amazon SNS topic or an Amazon SQS queue.
    ///         Required for new lifecycle hooks, but optional when updating existing hooks.
    public var roleARN: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        defaultResult: Swift.String? = nil,
        heartbeatTimeout: Swift.Int? = nil,
        lifecycleHookName: Swift.String? = nil,
        lifecycleTransition: Swift.String? = nil,
        notificationMetadata: Swift.String? = nil,
        notificationTargetARN: Swift.String? = nil,
        roleARN: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.defaultResult = defaultResult
        self.heartbeatTimeout = heartbeatTimeout
        self.lifecycleHookName = lifecycleHookName
        self.lifecycleTransition = lifecycleTransition
        self.notificationMetadata = notificationMetadata
        self.notificationTargetARN = notificationTargetARN
        self.roleARN = roleARN
    }
}

extension PutLifecycleHookOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutLifecycleHookOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutLifecycleHookOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLifecycleHookOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutLifecycleHookOutputResponse()"}
}

extension PutLifecycleHookOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutLifecycleHookOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutLifecycleHookOutputResponseBody: Swift.Equatable {
}

extension PutLifecycleHookOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutNotificationConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutNotificationConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutNotificationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutNotificationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutNotificationConfigurationOutputError>
}

extension PutNotificationConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutNotificationConfigurationInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), notificationTypes: \(Swift.String(describing: notificationTypes)), topicARN: \(Swift.String(describing: topicARN)))"}
}

extension PutNotificationConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let notificationTypes = notificationTypes {
            var notificationTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationTypes"))
            for (index0, xmlstringmaxlen2550) in notificationTypes.enumerated() {
                try notificationTypesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let topicARN = topicARN {
            try container.encode(topicARN, forKey: ClientRuntime.Key("TopicARN"))
        }
        try container.encode("PutNotificationConfiguration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutNotificationConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutNotificationConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutNotificationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutNotificationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutNotificationConfigurationOutputError>
}

public struct PutNotificationConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutNotificationConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutNotificationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutNotificationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutNotificationConfigurationOutputError>
}

public struct PutNotificationConfigurationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutNotificationConfigurationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: PutNotificationConfigurationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutNotificationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutNotificationConfigurationInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutNotificationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutNotificationConfigurationOutputError>
}

public struct PutNotificationConfigurationInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The type of event that causes the notification to be sent. To query the notification
    ///             types supported by Amazon EC2 Auto Scaling, call the DescribeAutoScalingNotificationTypes API.
    /// This member is required.
    public var notificationTypes: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS)
    ///             topic.
    /// This member is required.
    public var topicARN: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        notificationTypes: [Swift.String]? = nil,
        topicARN: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.notificationTypes = notificationTypes
        self.topicARN = topicARN
    }
}

extension PutNotificationConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutNotificationConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutNotificationConfigurationOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutNotificationConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutNotificationConfigurationOutputResponse()"}
}

extension PutNotificationConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutNotificationConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutNotificationConfigurationOutputResponseBody: Swift.Equatable {
}

extension PutNotificationConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutScalingPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScalingPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScalingPolicyOutputError>
}

extension PutScalingPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutScalingPolicyInput(adjustmentType: \(Swift.String(describing: adjustmentType)), autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), cooldown: \(Swift.String(describing: cooldown)), enabled: \(Swift.String(describing: enabled)), estimatedInstanceWarmup: \(Swift.String(describing: estimatedInstanceWarmup)), metricAggregationType: \(Swift.String(describing: metricAggregationType)), minAdjustmentMagnitude: \(Swift.String(describing: minAdjustmentMagnitude)), minAdjustmentStep: \(Swift.String(describing: minAdjustmentStep)), policyName: \(Swift.String(describing: policyName)), policyType: \(Swift.String(describing: policyType)), predictiveScalingConfiguration: \(Swift.String(describing: predictiveScalingConfiguration)), scalingAdjustment: \(Swift.String(describing: scalingAdjustment)), stepAdjustments: \(Swift.String(describing: stepAdjustments)), targetTrackingConfiguration: \(Swift.String(describing: targetTrackingConfiguration)))"}
}

extension PutScalingPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let adjustmentType = adjustmentType {
            try container.encode(adjustmentType, forKey: ClientRuntime.Key("AdjustmentType"))
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let cooldown = cooldown {
            try container.encode(cooldown, forKey: ClientRuntime.Key("Cooldown"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let estimatedInstanceWarmup = estimatedInstanceWarmup {
            try container.encode(estimatedInstanceWarmup, forKey: ClientRuntime.Key("EstimatedInstanceWarmup"))
        }
        if let metricAggregationType = metricAggregationType {
            try container.encode(metricAggregationType, forKey: ClientRuntime.Key("MetricAggregationType"))
        }
        if let minAdjustmentMagnitude = minAdjustmentMagnitude {
            try container.encode(minAdjustmentMagnitude, forKey: ClientRuntime.Key("MinAdjustmentMagnitude"))
        }
        if let minAdjustmentStep = minAdjustmentStep {
            try container.encode(minAdjustmentStep, forKey: ClientRuntime.Key("MinAdjustmentStep"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let policyType = policyType {
            try container.encode(policyType, forKey: ClientRuntime.Key("PolicyType"))
        }
        if let predictiveScalingConfiguration = predictiveScalingConfiguration {
            try container.encode(predictiveScalingConfiguration, forKey: ClientRuntime.Key("PredictiveScalingConfiguration"))
        }
        if let scalingAdjustment = scalingAdjustment {
            try container.encode(scalingAdjustment, forKey: ClientRuntime.Key("ScalingAdjustment"))
        }
        if let stepAdjustments = stepAdjustments {
            var stepAdjustmentsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StepAdjustments"))
            for (index0, stepadjustment0) in stepAdjustments.enumerated() {
                try stepAdjustmentsContainer.encode(stepadjustment0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let targetTrackingConfiguration = targetTrackingConfiguration {
            try container.encode(targetTrackingConfiguration, forKey: ClientRuntime.Key("TargetTrackingConfiguration"))
        }
        try container.encode("PutScalingPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutScalingPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScalingPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScalingPolicyOutputError>
}

public struct PutScalingPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScalingPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScalingPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScalingPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScalingPolicyOutputError>
}

public struct PutScalingPolicyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScalingPolicyInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: PutScalingPolicyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutScalingPolicyInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutScalingPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScalingPolicyOutputError>
}

public struct PutScalingPolicyInput: Swift.Equatable {
    /// Specifies how the scaling adjustment is interpreted (for example, an absolute number
    ///             or a percentage). The valid values are ChangeInCapacity,
    ///                 ExactCapacity, and PercentChangeInCapacity.
    ///         Required if the policy type is StepScaling or SimpleScaling.
    ///             For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types in the Amazon EC2 Auto Scaling User Guide.
    public var adjustmentType: Swift.String?
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The duration of the policy's cooldown period, in seconds. When a cooldown period is
    ///             specified here, it overrides the default cooldown period defined for the Auto Scaling
    ///             group.
    ///         Valid only if the policy type is SimpleScaling. For more information, see
    ///                 <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling
    ///                 cooldowns for Amazon EC2 Auto Scaling in the Amazon EC2 Auto Scaling User Guide.
    public var cooldown: Swift.Int?
    /// Indicates whether the scaling policy is enabled or disabled. The default is enabled.
    ///             For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a
    ///                 scaling policy for an Auto Scaling group in the
    ///             Amazon EC2 Auto Scaling User Guide.
    public var enabled: Swift.Bool?
    /// The estimated time, in seconds, until a newly launched instance can contribute to the
    ///             CloudWatch metrics. If not provided, the default is to use the value from the default cooldown
    ///             period for the Auto Scaling group.
    ///         Valid only if the policy type is TargetTrackingScaling or
    ///                 StepScaling.
    public var estimatedInstanceWarmup: Swift.Int?
    /// The aggregation type for the CloudWatch metrics. The valid values are Minimum,
    ///                 Maximum, and Average. If the aggregation type is null, the
    ///             value is treated as Average.
    ///         Valid only if the policy type is StepScaling.
    public var metricAggregationType: Swift.String?
    /// The minimum value to scale by when the adjustment type is
    ///                 PercentChangeInCapacity. For example, suppose that you create a step
    ///             scaling policy to scale out an Auto Scaling group by 25 percent and you specify a
    ///                 MinAdjustmentMagnitude of 2. If the group has 4 instances and the
    ///             scaling policy is performed, 25 percent of 4 is 1. However, because you specified a
    ///                 MinAdjustmentMagnitude of 2, Amazon EC2 Auto Scaling scales out the group by 2
    ///             instances.
    ///         Valid only if the policy type is StepScaling or
    ///                 SimpleScaling. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types in the Amazon EC2 Auto Scaling User
    ///             Guide.
    ///
    ///             Some Auto Scaling groups use instance weights. In this case, set the
    ///                     MinAdjustmentMagnitude to a value that is at least as large as your
    ///                 largest instance weight.
    ///
    public var minAdjustmentMagnitude: Swift.Int?
    /// Available for backward compatibility. Use MinAdjustmentMagnitude
    ///             instead.
    @available(*, deprecated)
    public var minAdjustmentStep: Swift.Int?
    /// The name of the policy.
    /// This member is required.
    public var policyName: Swift.String?
    /// One of the following policy types:
    ///
    ///
    ///
    ///                     TargetTrackingScaling
    ///
    ///
    ///
    ///
    ///                     StepScaling
    ///
    ///
    ///
    ///
    ///                   SimpleScaling (default)
    ///
    ///
    ///
    ///                     PredictiveScaling
    ///
    ///
    ///
    public var policyType: Swift.String?
    /// A predictive scaling policy. Provides support for only predefined metrics.
    ///         Predictive scaling works with CPU utilization, network in/out, and the Application
    ///             Load Balancer request count.
    ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html">PredictiveScalingConfiguration in the Amazon EC2 Auto Scaling API
    ///                 Reference.
    ///         Required if the policy type is PredictiveScaling.
    public var predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration?
    /// The amount by which to scale, based on the specified adjustment type. A positive value
    ///             adds to the current capacity while a negative number removes from the current capacity.
    ///             For exact capacity, you must specify a positive value.
    ///         Required if the policy type is SimpleScaling. (Not used with any other
    ///             policy type.)
    public var scalingAdjustment: Swift.Int?
    /// A set of adjustments that enable you to scale based on the size of the alarm
    ///             breach.
    ///         Required if the policy type is StepScaling. (Not used with any other
    ///             policy type.)
    public var stepAdjustments: [AutoScalingClientTypes.StepAdjustment]?
    /// A target tracking scaling policy. Provides support for predefined or customized
    ///             metrics.
    ///         The following predefined metrics are available:
    ///
    ///
    ///
    ///                     ASGAverageCPUUtilization
    ///
    ///
    ///
    ///
    ///                     ASGAverageNetworkIn
    ///
    ///
    ///
    ///
    ///                     ASGAverageNetworkOut
    ///
    ///
    ///
    ///
    ///                     ALBRequestCountPerTarget
    ///
    ///
    ///
    ///         If you specify ALBRequestCountPerTarget for the metric, you must specify
    ///             the ResourceLabel parameter with the
    ///                 PredefinedMetricSpecification.
    ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html">TargetTrackingConfiguration in the Amazon EC2 Auto Scaling API
    ///                 Reference.
    ///         Required if the policy type is TargetTrackingScaling.
    public var targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration?

    public init (
        adjustmentType: Swift.String? = nil,
        autoScalingGroupName: Swift.String? = nil,
        cooldown: Swift.Int? = nil,
        enabled: Swift.Bool? = nil,
        estimatedInstanceWarmup: Swift.Int? = nil,
        metricAggregationType: Swift.String? = nil,
        minAdjustmentMagnitude: Swift.Int? = nil,
        minAdjustmentStep: Swift.Int? = nil,
        policyName: Swift.String? = nil,
        policyType: Swift.String? = nil,
        predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration? = nil,
        scalingAdjustment: Swift.Int? = nil,
        stepAdjustments: [AutoScalingClientTypes.StepAdjustment]? = nil,
        targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration? = nil
    )
    {
        self.adjustmentType = adjustmentType
        self.autoScalingGroupName = autoScalingGroupName
        self.cooldown = cooldown
        self.enabled = enabled
        self.estimatedInstanceWarmup = estimatedInstanceWarmup
        self.metricAggregationType = metricAggregationType
        self.minAdjustmentMagnitude = minAdjustmentMagnitude
        self.minAdjustmentStep = minAdjustmentStep
        self.policyName = policyName
        self.policyType = policyType
        self.predictiveScalingConfiguration = predictiveScalingConfiguration
        self.scalingAdjustment = scalingAdjustment
        self.stepAdjustments = stepAdjustments
        self.targetTrackingConfiguration = targetTrackingConfiguration
    }
}

extension PutScalingPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutScalingPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutScalingPolicyOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutScalingPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutScalingPolicyOutputResponse(alarms: \(Swift.String(describing: alarms)), policyARN: \(Swift.String(describing: policyARN)))"}
}

extension PutScalingPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutScalingPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alarms = output.alarms
            self.policyARN = output.policyARN
        } else {
            self.alarms = nil
            self.policyARN = nil
        }
    }
}

/// Contains the output of PutScalingPolicy.
public struct PutScalingPolicyOutputResponse: Swift.Equatable {
    /// The CloudWatch alarms created for the target tracking scaling policy.
    public var alarms: [AutoScalingClientTypes.Alarm]?
    /// The Amazon Resource Name (ARN) of the policy.
    public var policyARN: Swift.String?

    public init (
        alarms: [AutoScalingClientTypes.Alarm]? = nil,
        policyARN: Swift.String? = nil
    )
    {
        self.alarms = alarms
        self.policyARN = policyARN
    }
}

struct PutScalingPolicyOutputResponseBody: Swift.Equatable {
    public let policyARN: Swift.String?
    public let alarms: [AutoScalingClientTypes.Alarm]?
}

extension PutScalingPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarms = "Alarms"
        case policyARN = "PolicyARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("PutScalingPolicyResult"))
        let policyARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyARN)
        policyARN = policyARNDecoded
        if containerValues.contains(.alarms) {
            struct KeyVal0{struct member{}}
            let alarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarms)
            if let alarmsWrappedContainer = alarmsWrappedContainer {
                let alarmsContainer = try alarmsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Alarm].self, forKey: .member)
                var alarmsBuffer:[AutoScalingClientTypes.Alarm]? = nil
                if let alarmsContainer = alarmsContainer {
                    alarmsBuffer = [AutoScalingClientTypes.Alarm]()
                    for structureContainer0 in alarmsContainer {
                        alarmsBuffer?.append(structureContainer0)
                    }
                }
                alarms = alarmsBuffer
            } else {
                alarms = []
            }
        } else {
            alarms = nil
        }
    }
}

public struct PutScheduledUpdateGroupActionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScheduledUpdateGroupActionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScheduledUpdateGroupActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScheduledUpdateGroupActionOutputError>
}

extension PutScheduledUpdateGroupActionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutScheduledUpdateGroupActionInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), desiredCapacity: \(Swift.String(describing: desiredCapacity)), endTime: \(Swift.String(describing: endTime)), maxSize: \(Swift.String(describing: maxSize)), minSize: \(Swift.String(describing: minSize)), recurrence: \(Swift.String(describing: recurrence)), scheduledActionName: \(Swift.String(describing: scheduledActionName)), startTime: \(Swift.String(describing: startTime)), time: \(Swift.String(describing: time)), timeZone: \(Swift.String(describing: timeZone)))"}
}

extension PutScheduledUpdateGroupActionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: ClientRuntime.Key("Recurrence"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        if let time = time {
            try container.encode(ClientRuntime.TimestampWrapper(time, format: .dateTime), forKey: ClientRuntime.Key("time"))
        }
        if let timeZone = timeZone {
            try container.encode(timeZone, forKey: ClientRuntime.Key("TimeZone"))
        }
        try container.encode("PutScheduledUpdateGroupAction", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutScheduledUpdateGroupActionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScheduledUpdateGroupActionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScheduledUpdateGroupActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScheduledUpdateGroupActionOutputError>
}

public struct PutScheduledUpdateGroupActionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScheduledUpdateGroupActionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutScheduledUpdateGroupActionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutScheduledUpdateGroupActionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScheduledUpdateGroupActionOutputError>
}

public struct PutScheduledUpdateGroupActionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutScheduledUpdateGroupActionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: PutScheduledUpdateGroupActionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutScheduledUpdateGroupActionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutScheduledUpdateGroupActionInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutScheduledUpdateGroupActionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutScheduledUpdateGroupActionOutputError>
}

public struct PutScheduledUpdateGroupActionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The desired capacity is the initial capacity of the Auto Scaling group after the scheduled
    ///             action runs and the capacity it attempts to maintain. It can scale beyond this capacity
    ///             if you add more scaling conditions.
    public var desiredCapacity: Swift.Int?
    /// The date and time for the recurring schedule to end, in UTC.
    public var endTime: ClientRuntime.Date?
    /// The maximum size of the Auto Scaling group.
    public var maxSize: Swift.Int?
    /// The minimum size of the Auto Scaling group.
    public var minSize: Swift.Int?
    /// The recurring schedule for this action. This format consists of five fields separated
    ///             by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value
    ///             must be in quotes (for example, "30 0 1 1,6,12 *"). For more information
    ///             about this format, see <a href="http://crontab.org">Crontab.
    ///         When StartTime and EndTime are specified with
    ///                 Recurrence, they form the boundaries of when the recurring action
    ///             starts and stops.
    ///         Cron expressions use Universal Coordinated Time (UTC) by default.
    public var recurrence: Swift.String?
    /// The name of this scaling action.
    /// This member is required.
    public var scheduledActionName: Swift.String?
    /// The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT
    ///             only and in quotes (for example, "2019-06-01T00:00:00Z").
    ///         If you specify Recurrence and StartTime, Amazon EC2 Auto Scaling performs
    ///             the action at this time, and then performs the action based on the specified
    ///             recurrence.
    ///         If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error
    ///             message.
    public var startTime: ClientRuntime.Date?
    /// This parameter is no longer used.
    public var time: ClientRuntime.Date?
    /// Specifies the time zone for a cron expression. If a time zone is not provided, UTC is
    ///             used by default.
    ///         Valid values are the canonical names of the IANA time zones, derived from the IANA
    ///             Time Zone Database (such as Etc/GMT+9 or Pacific/Tahiti). For
    ///             more information, see <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
    public var timeZone: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        desiredCapacity: Swift.Int? = nil,
        endTime: ClientRuntime.Date? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        recurrence: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: ClientRuntime.Date? = nil,
        time: ClientRuntime.Date? = nil,
        timeZone: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredCapacity = desiredCapacity
        self.endTime = endTime
        self.maxSize = maxSize
        self.minSize = minSize
        self.recurrence = recurrence
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.time = time
        self.timeZone = timeZone
    }
}

extension PutScheduledUpdateGroupActionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutScheduledUpdateGroupActionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExists" : self = .alreadyExistsFault(try AlreadyExistsFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutScheduledUpdateGroupActionOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsFault(AlreadyExistsFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutScheduledUpdateGroupActionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutScheduledUpdateGroupActionOutputResponse()"}
}

extension PutScheduledUpdateGroupActionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutScheduledUpdateGroupActionOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutScheduledUpdateGroupActionOutputResponseBody: Swift.Equatable {
}

extension PutScheduledUpdateGroupActionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutWarmPoolInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutWarmPoolInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutWarmPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutWarmPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutWarmPoolOutputError>
}

extension PutWarmPoolInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutWarmPoolInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), maxGroupPreparedCapacity: \(Swift.String(describing: maxGroupPreparedCapacity)), minSize: \(Swift.String(describing: minSize)), poolState: \(Swift.String(describing: poolState)))"}
}

extension PutWarmPoolInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let maxGroupPreparedCapacity = maxGroupPreparedCapacity {
            try container.encode(maxGroupPreparedCapacity, forKey: ClientRuntime.Key("MaxGroupPreparedCapacity"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let poolState = poolState {
            try container.encode(poolState, forKey: ClientRuntime.Key("PoolState"))
        }
        try container.encode("PutWarmPool", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct PutWarmPoolInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutWarmPoolInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutWarmPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutWarmPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutWarmPoolOutputError>
}

public struct PutWarmPoolInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutWarmPoolInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutWarmPoolInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutWarmPoolInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutWarmPoolOutputError>
}

public struct PutWarmPoolInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutWarmPoolInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: PutWarmPoolInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutWarmPoolOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutWarmPoolInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutWarmPoolOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutWarmPoolOutputError>
}

public struct PutWarmPoolInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Specifies the maximum number of instances that are allowed to be in the warm pool or
    ///             in any state except Terminated for the Auto Scaling group. This is an optional
    ///             property. Specify it only if you do not want the warm pool size to be determined by the
    ///             difference between the group's maximum capacity and its desired capacity.
    ///
    ///             If a value for MaxGroupPreparedCapacity is not specified, Amazon EC2 Auto Scaling
    ///                 launches and maintains the difference between the group's maximum capacity and its
    ///                 desired capacity. If you specify a value for MaxGroupPreparedCapacity,
    ///                 Amazon EC2 Auto Scaling uses the difference between the MaxGroupPreparedCapacity and
    ///                 the desired capacity instead.
    ///             The size of the warm pool is dynamic. Only when
    ///                     MaxGroupPreparedCapacity and MinSize are set to the
    ///                 same value does the warm pool have an absolute size.
    ///
    ///         If the desired capacity of the Auto Scaling group is higher than the
    ///                 MaxGroupPreparedCapacity, the capacity of the warm pool is 0, unless
    ///             you specify a value for MinSize. To remove a value that you previously set,
    ///             include the property but specify -1 for the value.
    public var maxGroupPreparedCapacity: Swift.Int?
    /// Specifies the minimum number of instances to maintain in the warm pool. This helps you
    ///             to ensure that there is always a certain number of warmed instances available to handle
    ///             traffic spikes. Defaults to 0 if not specified.
    public var minSize: Swift.Int?
    /// Sets the instance state to transition to after the lifecycle actions are complete.
    ///             Default is Stopped.
    public var poolState: AutoScalingClientTypes.WarmPoolState?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        maxGroupPreparedCapacity: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        poolState: AutoScalingClientTypes.WarmPoolState? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxGroupPreparedCapacity = maxGroupPreparedCapacity
        self.minSize = minSize
        self.poolState = poolState
    }
}

extension PutWarmPoolOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension PutWarmPoolOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutWarmPoolOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutWarmPoolOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutWarmPoolOutputResponse()"}
}

extension PutWarmPoolOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutWarmPoolOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutWarmPoolOutputResponseBody: Swift.Equatable {
}

extension PutWarmPoolOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct RecordLifecycleActionHeartbeatInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RecordLifecycleActionHeartbeatInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RecordLifecycleActionHeartbeatInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RecordLifecycleActionHeartbeatInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RecordLifecycleActionHeartbeatOutputError>
}

extension RecordLifecycleActionHeartbeatInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecordLifecycleActionHeartbeatInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), instanceId: \(Swift.String(describing: instanceId)), lifecycleActionToken: \(Swift.String(describing: lifecycleActionToken)), lifecycleHookName: \(Swift.String(describing: lifecycleHookName)))"}
}

extension RecordLifecycleActionHeartbeatInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let lifecycleActionToken = lifecycleActionToken {
            try container.encode(lifecycleActionToken, forKey: ClientRuntime.Key("LifecycleActionToken"))
        }
        if let lifecycleHookName = lifecycleHookName {
            try container.encode(lifecycleHookName, forKey: ClientRuntime.Key("LifecycleHookName"))
        }
        try container.encode("RecordLifecycleActionHeartbeat", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct RecordLifecycleActionHeartbeatInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RecordLifecycleActionHeartbeatInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RecordLifecycleActionHeartbeatInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RecordLifecycleActionHeartbeatInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RecordLifecycleActionHeartbeatOutputError>
}

public struct RecordLifecycleActionHeartbeatInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RecordLifecycleActionHeartbeatInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RecordLifecycleActionHeartbeatInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RecordLifecycleActionHeartbeatInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RecordLifecycleActionHeartbeatOutputError>
}

public struct RecordLifecycleActionHeartbeatInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RecordLifecycleActionHeartbeatInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: RecordLifecycleActionHeartbeatInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = RecordLifecycleActionHeartbeatInput
    public typealias MOutput = ClientRuntime.OperationOutput<RecordLifecycleActionHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RecordLifecycleActionHeartbeatOutputError>
}

public struct RecordLifecycleActionHeartbeatInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The ID of the instance.
    public var instanceId: Swift.String?
    /// A token that uniquely identifies a specific lifecycle action associated with an
    ///             instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when
    ///             you created the lifecycle hook.
    public var lifecycleActionToken: Swift.String?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        lifecycleActionToken: Swift.String? = nil,
        lifecycleHookName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceId = instanceId
        self.lifecycleActionToken = lifecycleActionToken
        self.lifecycleHookName = lifecycleHookName
    }
}

extension RecordLifecycleActionHeartbeatOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RecordLifecycleActionHeartbeatOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RecordLifecycleActionHeartbeatOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension RecordLifecycleActionHeartbeatOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecordLifecycleActionHeartbeatOutputResponse()"}
}

extension RecordLifecycleActionHeartbeatOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RecordLifecycleActionHeartbeatOutputResponse: Swift.Equatable {

    public init() {}
}

struct RecordLifecycleActionHeartbeatOutputResponseBody: Swift.Equatable {
}

extension RecordLifecycleActionHeartbeatOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AutoScalingClientTypes.RefreshPreferences: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkpointDelay = "CheckpointDelay"
        case checkpointPercentages = "CheckpointPercentages"
        case instanceWarmup = "InstanceWarmup"
        case minHealthyPercentage = "MinHealthyPercentage"
        case skipMatching = "SkipMatching"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let checkpointDelay = checkpointDelay {
            try container.encode(checkpointDelay, forKey: ClientRuntime.Key("CheckpointDelay"))
        }
        if let checkpointPercentages = checkpointPercentages {
            var checkpointPercentagesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("CheckpointPercentages"))
            for (index0, nonzerointpercent0) in checkpointPercentages.enumerated() {
                try checkpointPercentagesContainer.encode(nonzerointpercent0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let instanceWarmup = instanceWarmup {
            try container.encode(instanceWarmup, forKey: ClientRuntime.Key("InstanceWarmup"))
        }
        if let minHealthyPercentage = minHealthyPercentage {
            try container.encode(minHealthyPercentage, forKey: ClientRuntime.Key("MinHealthyPercentage"))
        }
        if let skipMatching = skipMatching {
            try container.encode(skipMatching, forKey: ClientRuntime.Key("SkipMatching"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minHealthyPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minHealthyPercentage)
        minHealthyPercentage = minHealthyPercentageDecoded
        let instanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .instanceWarmup)
        instanceWarmup = instanceWarmupDecoded
        if containerValues.contains(.checkpointPercentages) {
            struct KeyVal0{struct member{}}
            let checkpointPercentagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .checkpointPercentages)
            if let checkpointPercentagesWrappedContainer = checkpointPercentagesWrappedContainer {
                let checkpointPercentagesContainer = try checkpointPercentagesWrappedContainer.decodeIfPresent([Swift.Int].self, forKey: .member)
                var checkpointPercentagesBuffer:[Swift.Int]? = nil
                if let checkpointPercentagesContainer = checkpointPercentagesContainer {
                    checkpointPercentagesBuffer = [Swift.Int]()
                    for integerContainer0 in checkpointPercentagesContainer {
                        checkpointPercentagesBuffer?.append(integerContainer0)
                    }
                }
                checkpointPercentages = checkpointPercentagesBuffer
            } else {
                checkpointPercentages = []
            }
        } else {
            checkpointPercentages = nil
        }
        let checkpointDelayDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .checkpointDelay)
        checkpointDelay = checkpointDelayDecoded
        let skipMatchingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .skipMatching)
        skipMatching = skipMatchingDecoded
    }
}

extension AutoScalingClientTypes.RefreshPreferences: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RefreshPreferences(checkpointDelay: \(Swift.String(describing: checkpointDelay)), checkpointPercentages: \(Swift.String(describing: checkpointPercentages)), instanceWarmup: \(Swift.String(describing: instanceWarmup)), minHealthyPercentage: \(Swift.String(describing: minHealthyPercentage)), skipMatching: \(Swift.String(describing: skipMatching)))"}
}

extension AutoScalingClientTypes {
    /// Describes the preferences for an instance refresh.
    public struct RefreshPreferences: Swift.Equatable {
        /// The amount of time, in seconds, to wait after a checkpoint before continuing. This
        ///             property is optional, but if you specify a value for it, you must also specify a value
        ///             for CheckpointPercentages. If you specify a value for
        ///                 CheckpointPercentages and not for CheckpointDelay, the
        ///                 CheckpointDelay defaults to 3600 (1 hour).
        public var checkpointDelay: Swift.Int?
        /// Threshold values for each checkpoint in ascending order. Each number must be unique.
        ///             To replace all instances in the Auto Scaling group, the last number in the array must be
        ///                 100.
        ///         For usage examples, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-adding-checkpoints-instance-refresh.html">Adding
        ///                 checkpoints to an instance refresh in the
        ///             Amazon EC2 Auto Scaling User Guide.
        public var checkpointPercentages: [Swift.Int]?
        /// The number of seconds until a newly launched instance is configured and ready to use.
        ///             During this time, Amazon EC2 Auto Scaling does not immediately move on to the next replacement. The
        ///             default is to use the value for the health check grace period defined for the
        ///             group.
        public var instanceWarmup: Swift.Int?
        /// The amount of capacity in the Auto Scaling group that must remain healthy during an instance
        ///             refresh to allow the operation to continue. The value is expressed as a percentage of
        ///             the desired capacity of the Auto Scaling group (rounded up to the nearest integer). The default
        ///             is 90.
        ///         Setting the minimum healthy percentage to 100 percent limits the rate of replacement
        ///             to one instance at a time. In contrast, setting it to 0 percent has the effect of
        ///             replacing all instances at the same time.
        public var minHealthyPercentage: Swift.Int?
        /// A boolean value that indicates whether skip matching is enabled. If true, then
        ///             Amazon EC2 Auto Scaling skips replacing instances that match the desired configuration. If no desired
        ///             configuration is specified, then it skips replacing instances that have the same
        ///             configuration that is already set on the group. The default is
        ///             false.
        public var skipMatching: Swift.Bool?

        public init (
            checkpointDelay: Swift.Int? = nil,
            checkpointPercentages: [Swift.Int]? = nil,
            instanceWarmup: Swift.Int? = nil,
            minHealthyPercentage: Swift.Int? = nil,
            skipMatching: Swift.Bool? = nil
        )
        {
            self.checkpointDelay = checkpointDelay
            self.checkpointPercentages = checkpointPercentages
            self.instanceWarmup = instanceWarmup
            self.minHealthyPercentage = minHealthyPercentage
            self.skipMatching = skipMatching
        }
    }

}

extension AutoScalingClientTypes {
    public enum RefreshStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case rolling
        case sdkUnknown(Swift.String)

        public static var allCases: [RefreshStrategy] {
            return [
                .rolling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .rolling: return "Rolling"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RefreshStrategy(rawValue: rawValue) ?? RefreshStrategy.sdkUnknown(rawValue)
        }
    }
}

extension ResourceContentionFault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceContentionFault(message: \(Swift.String(describing: message)))"}
}

extension ResourceContentionFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ResourceContentionFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You already have a pending update to an Amazon EC2 Auto Scaling resource (for example, an Auto Scaling group,
///             instance, or load balancer).
public struct ResourceContentionFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceContentionFaultBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceContentionFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceInUseFault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceInUseFault(message: \(Swift.String(describing: message)))"}
}

extension ResourceInUseFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ResourceInUseFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation can't be performed because the resource is in use.
public struct ResourceInUseFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseFaultBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceInUseFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ResumeProcessesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResumeProcessesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResumeProcessesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResumeProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResumeProcessesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResumeProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResumeProcessesOutputError>
}

extension ResumeProcessesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResumeProcessesInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), scalingProcesses: \(Swift.String(describing: scalingProcesses)))"}
}

extension ResumeProcessesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let scalingProcesses = scalingProcesses {
            var scalingProcessesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScalingProcesses"))
            for (index0, xmlstringmaxlen2550) in scalingProcesses.enumerated() {
                try scalingProcessesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ResumeProcesses", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ResumeProcessesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResumeProcessesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResumeProcessesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResumeProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResumeProcessesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResumeProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResumeProcessesOutputError>
}

public struct ResumeProcessesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResumeProcessesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResumeProcessesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResumeProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResumeProcessesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResumeProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResumeProcessesOutputError>
}

public struct ResumeProcessesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResumeProcessesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ResumeProcessesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResumeProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ResumeProcessesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ResumeProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResumeProcessesOutputError>
}

public struct ResumeProcessesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more of the following processes:
    ///
    ///
    ///
    ///                     Launch
    ///
    ///
    ///
    ///
    ///                     Terminate
    ///
    ///
    ///
    ///
    ///                     AddToLoadBalancer
    ///
    ///
    ///
    ///
    ///                     AlarmNotification
    ///
    ///
    ///
    ///
    ///                     AZRebalance
    ///
    ///
    ///
    ///
    ///                     HealthCheck
    ///
    ///
    ///
    ///
    ///                     InstanceRefresh
    ///
    ///
    ///
    ///
    ///                     ReplaceUnhealthy
    ///
    ///
    ///
    ///
    ///                     ScheduledActions
    ///
    ///
    ///
    ///         If you omit this parameter, all processes are specified.
    public var scalingProcesses: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        scalingProcesses: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scalingProcesses = scalingProcesses
    }
}

extension ResumeProcessesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ResumeProcessesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResumeProcessesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResumeProcessesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResumeProcessesOutputResponse()"}
}

extension ResumeProcessesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ResumeProcessesOutputResponse: Swift.Equatable {

    public init() {}
}

struct ResumeProcessesOutputResponseBody: Swift.Equatable {
}

extension ResumeProcessesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ScalingActivityInProgressFault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScalingActivityInProgressFault(message: \(Swift.String(describing: message)))"}
}

extension ScalingActivityInProgressFault {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ScalingActivityInProgressFaultBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation can't be performed because there are scaling activities in
///             progress.
public struct ScalingActivityInProgressFault: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ScalingActivityInProgressFaultBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ScalingActivityInProgressFaultBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AutoScalingClientTypes {
    public enum ScalingActivityStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case inprogress
        case midlifecycleaction
        case pendingspotbidplacement
        case preinservice
        case successful
        case waitingforelbconnectiondraining
        case waitingforinstanceid
        case waitingforinstancewarmup
        case waitingforspotinstanceid
        case waitingforspotinstancerequestid
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingActivityStatusCode] {
            return [
                .cancelled,
                .failed,
                .inprogress,
                .midlifecycleaction,
                .pendingspotbidplacement,
                .preinservice,
                .successful,
                .waitingforelbconnectiondraining,
                .waitingforinstanceid,
                .waitingforinstancewarmup,
                .waitingforspotinstanceid,
                .waitingforspotinstancerequestid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .midlifecycleaction: return "MidLifecycleAction"
            case .pendingspotbidplacement: return "PendingSpotBidPlacement"
            case .preinservice: return "PreInService"
            case .successful: return "Successful"
            case .waitingforelbconnectiondraining: return "WaitingForELBConnectionDraining"
            case .waitingforinstanceid: return "WaitingForInstanceId"
            case .waitingforinstancewarmup: return "WaitingForInstanceWarmup"
            case .waitingforspotinstanceid: return "WaitingForSpotInstanceId"
            case .waitingforspotinstancerequestid: return "WaitingForSpotInstanceRequestId"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ScalingActivityStatusCode(rawValue: rawValue) ?? ScalingActivityStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes.ScalingPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adjustmentType = "AdjustmentType"
        case alarms = "Alarms"
        case autoScalingGroupName = "AutoScalingGroupName"
        case cooldown = "Cooldown"
        case enabled = "Enabled"
        case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
        case metricAggregationType = "MetricAggregationType"
        case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
        case minAdjustmentStep = "MinAdjustmentStep"
        case policyARN = "PolicyARN"
        case policyName = "PolicyName"
        case policyType = "PolicyType"
        case predictiveScalingConfiguration = "PredictiveScalingConfiguration"
        case scalingAdjustment = "ScalingAdjustment"
        case stepAdjustments = "StepAdjustments"
        case targetTrackingConfiguration = "TargetTrackingConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let adjustmentType = adjustmentType {
            try container.encode(adjustmentType, forKey: ClientRuntime.Key("AdjustmentType"))
        }
        if let alarms = alarms {
            var alarmsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Alarms"))
            for (index0, alarm0) in alarms.enumerated() {
                try alarmsContainer.encode(alarm0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let cooldown = cooldown {
            try container.encode(cooldown, forKey: ClientRuntime.Key("Cooldown"))
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let estimatedInstanceWarmup = estimatedInstanceWarmup {
            try container.encode(estimatedInstanceWarmup, forKey: ClientRuntime.Key("EstimatedInstanceWarmup"))
        }
        if let metricAggregationType = metricAggregationType {
            try container.encode(metricAggregationType, forKey: ClientRuntime.Key("MetricAggregationType"))
        }
        if let minAdjustmentMagnitude = minAdjustmentMagnitude {
            try container.encode(minAdjustmentMagnitude, forKey: ClientRuntime.Key("MinAdjustmentMagnitude"))
        }
        if let minAdjustmentStep = minAdjustmentStep {
            try container.encode(minAdjustmentStep, forKey: ClientRuntime.Key("MinAdjustmentStep"))
        }
        if let policyARN = policyARN {
            try container.encode(policyARN, forKey: ClientRuntime.Key("PolicyARN"))
        }
        if let policyName = policyName {
            try container.encode(policyName, forKey: ClientRuntime.Key("PolicyName"))
        }
        if let policyType = policyType {
            try container.encode(policyType, forKey: ClientRuntime.Key("PolicyType"))
        }
        if let predictiveScalingConfiguration = predictiveScalingConfiguration {
            try container.encode(predictiveScalingConfiguration, forKey: ClientRuntime.Key("PredictiveScalingConfiguration"))
        }
        if let scalingAdjustment = scalingAdjustment {
            try container.encode(scalingAdjustment, forKey: ClientRuntime.Key("ScalingAdjustment"))
        }
        if let stepAdjustments = stepAdjustments {
            var stepAdjustmentsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StepAdjustments"))
            for (index0, stepadjustment0) in stepAdjustments.enumerated() {
                try stepAdjustmentsContainer.encode(stepadjustment0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let targetTrackingConfiguration = targetTrackingConfiguration {
            try container.encode(targetTrackingConfiguration, forKey: ClientRuntime.Key("TargetTrackingConfiguration"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyARN)
        policyARN = policyARNDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let adjustmentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adjustmentType)
        adjustmentType = adjustmentTypeDecoded
        let minAdjustmentStepDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minAdjustmentStep)
        minAdjustmentStep = minAdjustmentStepDecoded
        let minAdjustmentMagnitudeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minAdjustmentMagnitude)
        minAdjustmentMagnitude = minAdjustmentMagnitudeDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
        let cooldownDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cooldown)
        cooldown = cooldownDecoded
        if containerValues.contains(.stepAdjustments) {
            struct KeyVal0{struct member{}}
            let stepAdjustmentsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stepAdjustments)
            if let stepAdjustmentsWrappedContainer = stepAdjustmentsWrappedContainer {
                let stepAdjustmentsContainer = try stepAdjustmentsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.StepAdjustment].self, forKey: .member)
                var stepAdjustmentsBuffer:[AutoScalingClientTypes.StepAdjustment]? = nil
                if let stepAdjustmentsContainer = stepAdjustmentsContainer {
                    stepAdjustmentsBuffer = [AutoScalingClientTypes.StepAdjustment]()
                    for structureContainer0 in stepAdjustmentsContainer {
                        stepAdjustmentsBuffer?.append(structureContainer0)
                    }
                }
                stepAdjustments = stepAdjustmentsBuffer
            } else {
                stepAdjustments = []
            }
        } else {
            stepAdjustments = nil
        }
        let metricAggregationTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricAggregationType)
        metricAggregationType = metricAggregationTypeDecoded
        let estimatedInstanceWarmupDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedInstanceWarmup)
        estimatedInstanceWarmup = estimatedInstanceWarmupDecoded
        if containerValues.contains(.alarms) {
            struct KeyVal0{struct member{}}
            let alarmsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .alarms)
            if let alarmsWrappedContainer = alarmsWrappedContainer {
                let alarmsContainer = try alarmsWrappedContainer.decodeIfPresent([AutoScalingClientTypes.Alarm].self, forKey: .member)
                var alarmsBuffer:[AutoScalingClientTypes.Alarm]? = nil
                if let alarmsContainer = alarmsContainer {
                    alarmsBuffer = [AutoScalingClientTypes.Alarm]()
                    for structureContainer0 in alarmsContainer {
                        alarmsBuffer?.append(structureContainer0)
                    }
                }
                alarms = alarmsBuffer
            } else {
                alarms = []
            }
        } else {
            alarms = nil
        }
        let targetTrackingConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.TargetTrackingConfiguration.self, forKey: .targetTrackingConfiguration)
        targetTrackingConfiguration = targetTrackingConfigurationDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let predictiveScalingConfigurationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredictiveScalingConfiguration.self, forKey: .predictiveScalingConfiguration)
        predictiveScalingConfiguration = predictiveScalingConfigurationDecoded
    }
}

extension AutoScalingClientTypes.ScalingPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScalingPolicy(adjustmentType: \(Swift.String(describing: adjustmentType)), alarms: \(Swift.String(describing: alarms)), autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), cooldown: \(Swift.String(describing: cooldown)), enabled: \(Swift.String(describing: enabled)), estimatedInstanceWarmup: \(Swift.String(describing: estimatedInstanceWarmup)), metricAggregationType: \(Swift.String(describing: metricAggregationType)), minAdjustmentMagnitude: \(Swift.String(describing: minAdjustmentMagnitude)), minAdjustmentStep: \(Swift.String(describing: minAdjustmentStep)), policyARN: \(Swift.String(describing: policyARN)), policyName: \(Swift.String(describing: policyName)), policyType: \(Swift.String(describing: policyType)), predictiveScalingConfiguration: \(Swift.String(describing: predictiveScalingConfiguration)), scalingAdjustment: \(Swift.String(describing: scalingAdjustment)), stepAdjustments: \(Swift.String(describing: stepAdjustments)), targetTrackingConfiguration: \(Swift.String(describing: targetTrackingConfiguration)))"}
}

extension AutoScalingClientTypes {
    /// Describes a scaling policy.
    public struct ScalingPolicy: Swift.Equatable {
        /// Specifies how the scaling adjustment is interpreted (for example, an absolute number
        ///             or a percentage). The valid values are ChangeInCapacity,
        ///                 ExactCapacity, and PercentChangeInCapacity.
        public var adjustmentType: Swift.String?
        /// The CloudWatch alarms related to the policy.
        public var alarms: [AutoScalingClientTypes.Alarm]?
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// The duration of the policy's cooldown period, in seconds.
        public var cooldown: Swift.Int?
        /// Indicates whether the policy is enabled (true) or disabled
        ///                 (false).
        public var enabled: Swift.Bool?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the
        ///             CloudWatch metrics.
        public var estimatedInstanceWarmup: Swift.Int?
        /// The aggregation type for the CloudWatch metrics. The valid values are Minimum,
        ///                 Maximum, and Average.
        public var metricAggregationType: Swift.String?
        /// The minimum value to scale by when the adjustment type is
        ///                 PercentChangeInCapacity.
        public var minAdjustmentMagnitude: Swift.Int?
        /// Available for backward compatibility. Use MinAdjustmentMagnitude
        ///             instead.
        @available(*, deprecated)
        public var minAdjustmentStep: Swift.Int?
        /// The Amazon Resource Name (ARN) of the policy.
        public var policyARN: Swift.String?
        /// The name of the scaling policy.
        public var policyName: Swift.String?
        /// One of the following policy types:
        ///
        ///
        ///
        ///                     TargetTrackingScaling
        ///
        ///
        ///
        ///
        ///                     StepScaling
        ///
        ///
        ///
        ///
        ///                   SimpleScaling (default)
        ///
        ///
        ///
        ///                     PredictiveScaling
        ///
        ///
        ///
        ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html">Target tracking
        ///                 scaling policies and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html">Step and simple scaling
        ///                 policies in the Amazon EC2 Auto Scaling User Guide.
        public var policyType: Swift.String?
        /// A predictive scaling policy.
        public var predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration?
        /// The amount by which to scale, based on the specified adjustment type. A positive value
        ///             adds to the current capacity while a negative number removes from the current
        ///             capacity.
        public var scalingAdjustment: Swift.Int?
        /// A set of adjustments that enable you to scale based on the size of the alarm
        ///             breach.
        public var stepAdjustments: [AutoScalingClientTypes.StepAdjustment]?
        /// A target tracking scaling policy.
        public var targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration?

        public init (
            adjustmentType: Swift.String? = nil,
            alarms: [AutoScalingClientTypes.Alarm]? = nil,
            autoScalingGroupName: Swift.String? = nil,
            cooldown: Swift.Int? = nil,
            enabled: Swift.Bool? = nil,
            estimatedInstanceWarmup: Swift.Int? = nil,
            metricAggregationType: Swift.String? = nil,
            minAdjustmentMagnitude: Swift.Int? = nil,
            minAdjustmentStep: Swift.Int? = nil,
            policyARN: Swift.String? = nil,
            policyName: Swift.String? = nil,
            policyType: Swift.String? = nil,
            predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration? = nil,
            scalingAdjustment: Swift.Int? = nil,
            stepAdjustments: [AutoScalingClientTypes.StepAdjustment]? = nil,
            targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration? = nil
        )
        {
            self.adjustmentType = adjustmentType
            self.alarms = alarms
            self.autoScalingGroupName = autoScalingGroupName
            self.cooldown = cooldown
            self.enabled = enabled
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.metricAggregationType = metricAggregationType
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.minAdjustmentStep = minAdjustmentStep
            self.policyARN = policyARN
            self.policyName = policyName
            self.policyType = policyType
            self.predictiveScalingConfiguration = predictiveScalingConfiguration
            self.scalingAdjustment = scalingAdjustment
            self.stepAdjustments = stepAdjustments
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }
    }

}

extension AutoScalingClientTypes.ScheduledUpdateGroupAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupName = "AutoScalingGroupName"
        case desiredCapacity = "DesiredCapacity"
        case endTime = "EndTime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case recurrence = "Recurrence"
        case scheduledActionARN = "ScheduledActionARN"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case time = "Time"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: ClientRuntime.Key("Recurrence"))
        }
        if let scheduledActionARN = scheduledActionARN {
            try container.encode(scheduledActionARN, forKey: ClientRuntime.Key("ScheduledActionARN"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        if let time = time {
            try container.encode(ClientRuntime.TimestampWrapper(time, format: .dateTime), forKey: ClientRuntime.Key("time"))
        }
        if let timeZone = timeZone {
            try container.encode(timeZone, forKey: ClientRuntime.Key("TimeZone"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let scheduledActionARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionARN)
        scheduledActionARN = scheduledActionARNDecoded
        let timeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .time)
        var timeBuffer:ClientRuntime.Date? = nil
        if let timeDecoded = timeDecoded {
            timeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timeDecoded, format: .dateTime)
        }
        time = timeBuffer
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let recurrenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
    }
}

extension AutoScalingClientTypes.ScheduledUpdateGroupAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScheduledUpdateGroupAction(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), desiredCapacity: \(Swift.String(describing: desiredCapacity)), endTime: \(Swift.String(describing: endTime)), maxSize: \(Swift.String(describing: maxSize)), minSize: \(Swift.String(describing: minSize)), recurrence: \(Swift.String(describing: recurrence)), scheduledActionARN: \(Swift.String(describing: scheduledActionARN)), scheduledActionName: \(Swift.String(describing: scheduledActionName)), startTime: \(Swift.String(describing: startTime)), time: \(Swift.String(describing: time)), timeZone: \(Swift.String(describing: timeZone)))"}
}

extension AutoScalingClientTypes {
    /// Describes a scheduled scaling
    ///             action.
    public struct ScheduledUpdateGroupAction: Swift.Equatable {
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// The desired capacity is the initial capacity of the Auto Scaling group after the scheduled
        ///             action runs and the capacity it attempts to maintain.
        public var desiredCapacity: Swift.Int?
        /// The date and time in UTC for the recurring schedule to end. For example,
        ///                 "2019-06-01T00:00:00Z".
        ///
        public var endTime: ClientRuntime.Date?
        /// The maximum size of the Auto Scaling group.
        public var maxSize: Swift.Int?
        /// The minimum size of the Auto Scaling group.
        public var minSize: Swift.Int?
        /// The recurring schedule for the action, in Unix cron syntax format.
        ///         When StartTime and EndTime are specified with
        ///                 Recurrence, they form the boundaries of when the recurring action
        ///             starts and stops.
        public var recurrence: Swift.String?
        /// The Amazon Resource Name (ARN) of the scheduled action.
        public var scheduledActionARN: Swift.String?
        /// The name of the scheduled action.
        public var scheduledActionName: Swift.String?
        /// The date and time in UTC for this action to start. For example,
        ///                 "2019-06-01T00:00:00Z".
        ///
        public var startTime: ClientRuntime.Date?
        /// This parameter is no longer used.
        public var time: ClientRuntime.Date?
        /// The time zone for the cron expression.
        public var timeZone: Swift.String?

        public init (
            autoScalingGroupName: Swift.String? = nil,
            desiredCapacity: Swift.Int? = nil,
            endTime: ClientRuntime.Date? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            recurrence: Swift.String? = nil,
            scheduledActionARN: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            time: ClientRuntime.Date? = nil,
            timeZone: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.maxSize = maxSize
            self.minSize = minSize
            self.recurrence = recurrence
            self.scheduledActionARN = scheduledActionARN
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
            self.time = time
            self.timeZone = timeZone
        }
    }

}

extension AutoScalingClientTypes.ScheduledUpdateGroupActionRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredCapacity = "DesiredCapacity"
        case endTime = "EndTime"
        case maxSize = "MaxSize"
        case minSize = "MinSize"
        case recurrence = "Recurrence"
        case scheduledActionName = "ScheduledActionName"
        case startTime = "StartTime"
        case timeZone = "TimeZone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let endTime = endTime {
            try container.encode(ClientRuntime.TimestampWrapper(endTime, format: .dateTime), forKey: ClientRuntime.Key("endTime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let recurrence = recurrence {
            try container.encode(recurrence, forKey: ClientRuntime.Key("Recurrence"))
        }
        if let scheduledActionName = scheduledActionName {
            try container.encode(scheduledActionName, forKey: ClientRuntime.Key("ScheduledActionName"))
        }
        if let startTime = startTime {
            try container.encode(ClientRuntime.TimestampWrapper(startTime, format: .dateTime), forKey: ClientRuntime.Key("startTime"))
        }
        if let timeZone = timeZone {
            try container.encode(timeZone, forKey: ClientRuntime.Key("TimeZone"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduledActionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduledActionName)
        scheduledActionName = scheduledActionNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .startTime)
        var startTimeBuffer:ClientRuntime.Date? = nil
        if let startTimeDecoded = startTimeDecoded {
            startTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(startTimeDecoded, format: .dateTime)
        }
        startTime = startTimeBuffer
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTime)
        var endTimeBuffer:ClientRuntime.Date? = nil
        if let endTimeDecoded = endTimeDecoded {
            endTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimeDecoded, format: .dateTime)
        }
        endTime = endTimeBuffer
        let recurrenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recurrence)
        recurrence = recurrenceDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let desiredCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let timeZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeZone)
        timeZone = timeZoneDecoded
    }
}

extension AutoScalingClientTypes.ScheduledUpdateGroupActionRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScheduledUpdateGroupActionRequest(desiredCapacity: \(Swift.String(describing: desiredCapacity)), endTime: \(Swift.String(describing: endTime)), maxSize: \(Swift.String(describing: maxSize)), minSize: \(Swift.String(describing: minSize)), recurrence: \(Swift.String(describing: recurrence)), scheduledActionName: \(Swift.String(describing: scheduledActionName)), startTime: \(Swift.String(describing: startTime)), timeZone: \(Swift.String(describing: timeZone)))"}
}

extension AutoScalingClientTypes {
    /// Describes information used for one or more scheduled scaling action updates in a BatchPutScheduledUpdateGroupAction operation.
    public struct ScheduledUpdateGroupActionRequest: Swift.Equatable {
        /// The desired capacity is the initial capacity of the Auto Scaling group after the scheduled
        ///             action runs and the capacity it attempts to maintain.
        public var desiredCapacity: Swift.Int?
        /// The date and time for the recurring schedule to end, in UTC.
        public var endTime: ClientRuntime.Date?
        /// The maximum size of the Auto Scaling group.
        public var maxSize: Swift.Int?
        /// The minimum size of the Auto Scaling group.
        public var minSize: Swift.Int?
        /// The recurring schedule for the action, in Unix cron syntax format. This format
        ///             consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month]
        ///             [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, "30 0 1
        ///                 1,6,12 *"). For more information about this format, see <a href="http://crontab.org">Crontab.
        ///         When StartTime and EndTime are specified with
        ///                 Recurrence, they form the boundaries of when the recurring action
        ///             starts and stops.
        ///         Cron expressions use Universal Coordinated Time (UTC) by default.
        public var recurrence: Swift.String?
        /// The name of the scaling action.
        /// This member is required.
        public var scheduledActionName: Swift.String?
        /// The date and time for the action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT
        ///             only and in quotes (for example, "2019-06-01T00:00:00Z").
        ///         If you specify Recurrence and StartTime, Amazon EC2 Auto Scaling performs
        ///             the action at this time, and then performs the action based on the specified
        ///             recurrence.
        ///         If you try to schedule the action in the past, Amazon EC2 Auto Scaling returns an error
        ///             message.
        public var startTime: ClientRuntime.Date?
        /// Specifies the time zone for a cron expression. If a time zone is not provided, UTC is
        ///             used by default.
        ///         Valid values are the canonical names of the IANA time zones, derived from the IANA
        ///             Time Zone Database (such as Etc/GMT+9 or Pacific/Tahiti). For
        ///             more information, see <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
        public var timeZone: Swift.String?

        public init (
            desiredCapacity: Swift.Int? = nil,
            endTime: ClientRuntime.Date? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            recurrence: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            timeZone: Swift.String? = nil
        )
        {
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.maxSize = maxSize
            self.minSize = minSize
            self.recurrence = recurrence
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
            self.timeZone = timeZone
        }
    }

}

extension ServiceLinkedRoleFailure: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceLinkedRoleFailure(message: \(Swift.String(describing: message)))"}
}

extension ServiceLinkedRoleFailure {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AWSClientRuntime.ErrorResponseContainer<ServiceLinkedRoleFailureBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service-linked role is not yet ready for use.
public struct ServiceLinkedRoleFailure: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceLinkedRoleFailureBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceLinkedRoleFailureBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct SetDesiredCapacityInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetDesiredCapacityInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetDesiredCapacityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetDesiredCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetDesiredCapacityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetDesiredCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetDesiredCapacityOutputError>
}

extension SetDesiredCapacityInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetDesiredCapacityInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), desiredCapacity: \(Swift.String(describing: desiredCapacity)), honorCooldown: \(Swift.String(describing: honorCooldown)))"}
}

extension SetDesiredCapacityInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let honorCooldown = honorCooldown {
            try container.encode(honorCooldown, forKey: ClientRuntime.Key("HonorCooldown"))
        }
        try container.encode("SetDesiredCapacity", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetDesiredCapacityInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetDesiredCapacityInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetDesiredCapacityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetDesiredCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetDesiredCapacityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetDesiredCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetDesiredCapacityOutputError>
}

public struct SetDesiredCapacityInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetDesiredCapacityInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetDesiredCapacityInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetDesiredCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetDesiredCapacityInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetDesiredCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetDesiredCapacityOutputError>
}

public struct SetDesiredCapacityInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetDesiredCapacityInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SetDesiredCapacityInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetDesiredCapacityOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SetDesiredCapacityInput
    public typealias MOutput = ClientRuntime.OperationOutput<SetDesiredCapacityOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetDesiredCapacityOutputError>
}

public struct SetDesiredCapacityInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The desired capacity is the initial capacity of the Auto Scaling group after this operation
    ///             completes and the capacity it attempts to maintain.
    /// This member is required.
    public var desiredCapacity: Swift.Int?
    /// Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating
    ///             a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does
    ///             not honor the cooldown period during manual scaling activities.
    public var honorCooldown: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        desiredCapacity: Swift.Int? = nil,
        honorCooldown: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredCapacity = desiredCapacity
        self.honorCooldown = honorCooldown
    }
}

extension SetDesiredCapacityOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetDesiredCapacityOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetDesiredCapacityOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetDesiredCapacityOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetDesiredCapacityOutputResponse()"}
}

extension SetDesiredCapacityOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetDesiredCapacityOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetDesiredCapacityOutputResponseBody: Swift.Equatable {
}

extension SetDesiredCapacityOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetInstanceHealthInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetInstanceHealthInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetInstanceHealthInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetInstanceHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetInstanceHealthInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetInstanceHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetInstanceHealthOutputError>
}

extension SetInstanceHealthInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetInstanceHealthInput(healthStatus: \(Swift.String(describing: healthStatus)), instanceId: \(Swift.String(describing: instanceId)), shouldRespectGracePeriod: \(Swift.String(describing: shouldRespectGracePeriod)))"}
}

extension SetInstanceHealthInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let healthStatus = healthStatus {
            try container.encode(healthStatus, forKey: ClientRuntime.Key("HealthStatus"))
        }
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let shouldRespectGracePeriod = shouldRespectGracePeriod {
            try container.encode(shouldRespectGracePeriod, forKey: ClientRuntime.Key("ShouldRespectGracePeriod"))
        }
        try container.encode("SetInstanceHealth", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetInstanceHealthInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetInstanceHealthInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetInstanceHealthInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetInstanceHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetInstanceHealthInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetInstanceHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetInstanceHealthOutputError>
}

public struct SetInstanceHealthInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetInstanceHealthInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetInstanceHealthInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetInstanceHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetInstanceHealthInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetInstanceHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetInstanceHealthOutputError>
}

public struct SetInstanceHealthInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetInstanceHealthInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SetInstanceHealthInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetInstanceHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SetInstanceHealthInput
    public typealias MOutput = ClientRuntime.OperationOutput<SetInstanceHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetInstanceHealthOutputError>
}

public struct SetInstanceHealthInput: Swift.Equatable {
    /// The health status of the instance. Set to Healthy to have the instance
    ///             remain in service. Set to Unhealthy to have the instance be out of service.
    ///             Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
    /// This member is required.
    public var healthStatus: Swift.String?
    /// The ID of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// If the Auto Scaling group of the specified instance has a HealthCheckGracePeriod
    ///             specified for the group, by default, this call respects the grace period. Set this to
    ///                 False, to have the call not respect the grace period associated with
    ///             the group.
    ///
    ///         For more information about the health check grace
    ///             period, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CreateAutoScalingGroup.html">CreateAutoScalingGroup in the Amazon EC2 Auto Scaling API
    ///             Reference.
    public var shouldRespectGracePeriod: Swift.Bool?

    public init (
        healthStatus: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        shouldRespectGracePeriod: Swift.Bool? = nil
    )
    {
        self.healthStatus = healthStatus
        self.instanceId = instanceId
        self.shouldRespectGracePeriod = shouldRespectGracePeriod
    }
}

extension SetInstanceHealthOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetInstanceHealthOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetInstanceHealthOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetInstanceHealthOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetInstanceHealthOutputResponse()"}
}

extension SetInstanceHealthOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetInstanceHealthOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetInstanceHealthOutputResponseBody: Swift.Equatable {
}

extension SetInstanceHealthOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetInstanceProtectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetInstanceProtectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetInstanceProtectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetInstanceProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetInstanceProtectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetInstanceProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetInstanceProtectionOutputError>
}

extension SetInstanceProtectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetInstanceProtectionInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), instanceIds: \(Swift.String(describing: instanceIds)), protectedFromScaleIn: \(Swift.String(describing: protectedFromScaleIn)))"}
}

extension SetInstanceProtectionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let instanceIds = instanceIds {
            var instanceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("InstanceIds"))
            for (index0, xmlstringmaxlen190) in instanceIds.enumerated() {
                try instanceIdsContainer.encode(xmlstringmaxlen190, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let protectedFromScaleIn = protectedFromScaleIn {
            try container.encode(protectedFromScaleIn, forKey: ClientRuntime.Key("ProtectedFromScaleIn"))
        }
        try container.encode("SetInstanceProtection", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetInstanceProtectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetInstanceProtectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetInstanceProtectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetInstanceProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetInstanceProtectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetInstanceProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetInstanceProtectionOutputError>
}

public struct SetInstanceProtectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetInstanceProtectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetInstanceProtectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetInstanceProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetInstanceProtectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetInstanceProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetInstanceProtectionOutputError>
}

public struct SetInstanceProtectionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetInstanceProtectionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SetInstanceProtectionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetInstanceProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SetInstanceProtectionInput
    public typealias MOutput = ClientRuntime.OperationOutput<SetInstanceProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetInstanceProtectionOutputError>
}

public struct SetInstanceProtectionInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more instance IDs. You can specify up to 50 instances.
    /// This member is required.
    public var instanceIds: [Swift.String]?
    /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling
    ///             in.
    /// This member is required.
    public var protectedFromScaleIn: Swift.Bool?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil,
        protectedFromScaleIn: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.protectedFromScaleIn = protectedFromScaleIn
    }
}

extension SetInstanceProtectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetInstanceProtectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetInstanceProtectionOutputError: Swift.Error, Swift.Equatable {
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetInstanceProtectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetInstanceProtectionOutputResponse()"}
}

extension SetInstanceProtectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetInstanceProtectionOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetInstanceProtectionOutputResponseBody: Swift.Equatable {
}

extension SetInstanceProtectionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct StartInstanceRefreshInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartInstanceRefreshInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartInstanceRefreshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartInstanceRefreshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartInstanceRefreshOutputError>
}

extension StartInstanceRefreshInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartInstanceRefreshInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), desiredConfiguration: \(Swift.String(describing: desiredConfiguration)), preferences: \(Swift.String(describing: preferences)), strategy: \(Swift.String(describing: strategy)))"}
}

extension StartInstanceRefreshInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let desiredConfiguration = desiredConfiguration {
            try container.encode(desiredConfiguration, forKey: ClientRuntime.Key("DesiredConfiguration"))
        }
        if let preferences = preferences {
            try container.encode(preferences, forKey: ClientRuntime.Key("Preferences"))
        }
        if let strategy = strategy {
            try container.encode(strategy, forKey: ClientRuntime.Key("Strategy"))
        }
        try container.encode("StartInstanceRefresh", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct StartInstanceRefreshInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartInstanceRefreshInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartInstanceRefreshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartInstanceRefreshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartInstanceRefreshOutputError>
}

public struct StartInstanceRefreshInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartInstanceRefreshInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartInstanceRefreshInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartInstanceRefreshInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartInstanceRefreshOutputError>
}

public struct StartInstanceRefreshInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartInstanceRefreshInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StartInstanceRefreshInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartInstanceRefreshOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartInstanceRefreshInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartInstanceRefreshOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartInstanceRefreshOutputError>
}

public struct StartInstanceRefreshInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The desired configuration. For example, the desired configuration can specify a new
    ///             launch template or a new version of the current launch template.
    ///         Once the instance refresh succeeds, Amazon EC2 Auto Scaling updates the settings of the Auto Scaling group to
    ///             reflect the new desired configuration.
    ///
    ///             When you specify a new launch template or a new version of the current launch
    ///                 template for your desired configuration, consider enabling the
    ///                     SkipMatching property in preferences. If it's enabled, Amazon EC2 Auto Scaling
    ///                 skips replacing instances that already use the specified launch template and
    ///                 version. This can help you reduce the number of replacements that are required to
    ///                 apply updates.
    ///
    public var desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration?
    /// Set of preferences associated with the instance refresh request. If not provided, the
    ///             default values are used.
    public var preferences: AutoScalingClientTypes.RefreshPreferences?
    /// The strategy to use for the instance refresh. The only valid value is
    ///                 Rolling.
    ///         A rolling update helps you update your instances gradually. A rolling update can fail
    ///             due to failed health checks or if instances are on standby or are protected from scale
    ///             in. If the rolling update process fails, any instances that are replaced are not rolled
    ///             back to their previous configuration.
    public var strategy: AutoScalingClientTypes.RefreshStrategy?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration? = nil,
        preferences: AutoScalingClientTypes.RefreshPreferences? = nil,
        strategy: AutoScalingClientTypes.RefreshStrategy? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredConfiguration = desiredConfiguration
        self.preferences = preferences
        self.strategy = strategy
    }
}

extension StartInstanceRefreshOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension StartInstanceRefreshOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InstanceRefreshInProgress" : self = .instanceRefreshInProgressFault(try InstanceRefreshInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceeded" : self = .limitExceededFault(try LimitExceededFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartInstanceRefreshOutputError: Swift.Error, Swift.Equatable {
    case instanceRefreshInProgressFault(InstanceRefreshInProgressFault)
    case limitExceededFault(LimitExceededFault)
    case resourceContentionFault(ResourceContentionFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartInstanceRefreshOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartInstanceRefreshOutputResponse(instanceRefreshId: \(Swift.String(describing: instanceRefreshId)))"}
}

extension StartInstanceRefreshOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartInstanceRefreshOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.instanceRefreshId = output.instanceRefreshId
        } else {
            self.instanceRefreshId = nil
        }
    }
}

public struct StartInstanceRefreshOutputResponse: Swift.Equatable {
    /// A unique ID for tracking the progress of the request.
    public var instanceRefreshId: Swift.String?

    public init (
        instanceRefreshId: Swift.String? = nil
    )
    {
        self.instanceRefreshId = instanceRefreshId
    }
}

struct StartInstanceRefreshOutputResponseBody: Swift.Equatable {
    public let instanceRefreshId: Swift.String?
}

extension StartInstanceRefreshOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceRefreshId = "InstanceRefreshId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("StartInstanceRefreshResult"))
        let instanceRefreshIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceRefreshId)
        instanceRefreshId = instanceRefreshIdDecoded
    }
}

extension AutoScalingClientTypes.StepAdjustment: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricIntervalLowerBound = "MetricIntervalLowerBound"
        case metricIntervalUpperBound = "MetricIntervalUpperBound"
        case scalingAdjustment = "ScalingAdjustment"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let metricIntervalLowerBound = metricIntervalLowerBound {
            try container.encode(metricIntervalLowerBound, forKey: ClientRuntime.Key("MetricIntervalLowerBound"))
        }
        if let metricIntervalUpperBound = metricIntervalUpperBound {
            try container.encode(metricIntervalUpperBound, forKey: ClientRuntime.Key("MetricIntervalUpperBound"))
        }
        if let scalingAdjustment = scalingAdjustment {
            try container.encode(scalingAdjustment, forKey: ClientRuntime.Key("ScalingAdjustment"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricIntervalLowerBoundDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .metricIntervalLowerBound)
        metricIntervalLowerBound = metricIntervalLowerBoundDecoded
        let metricIntervalUpperBoundDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .metricIntervalUpperBound)
        metricIntervalUpperBound = metricIntervalUpperBoundDecoded
        let scalingAdjustmentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .scalingAdjustment)
        scalingAdjustment = scalingAdjustmentDecoded
    }
}

extension AutoScalingClientTypes.StepAdjustment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StepAdjustment(metricIntervalLowerBound: \(Swift.String(describing: metricIntervalLowerBound)), metricIntervalUpperBound: \(Swift.String(describing: metricIntervalUpperBound)), scalingAdjustment: \(Swift.String(describing: scalingAdjustment)))"}
}

extension AutoScalingClientTypes {
    /// Describes information used to create a step adjustment for a step scaling
    ///             policy.
    ///         For the following examples, suppose that you have an alarm with a breach threshold of
    ///             50:
    ///
    ///
    ///                 To trigger the adjustment when the metric is greater than or equal to 50 and
    ///                     less than 60, specify a lower bound of 0 and an upper bound of 10.
    ///
    ///
    ///                 To trigger the adjustment when the metric is greater than 40 and less than or
    ///                     equal to 50, specify a lower bound of -10 and an upper bound of 0.
    ///
    ///
    ///         There are a few rules for the step adjustments for your step policy:
    ///
    ///
    ///                 The ranges of your step adjustments can't overlap or have a gap.
    ///
    ///
    ///                 At most, one step adjustment can have a null lower bound. If one step
    ///                     adjustment has a negative lower bound, then there must be a step adjustment with
    ///                     a null lower bound.
    ///
    ///
    ///                 At most, one step adjustment can have a null upper bound. If one step
    ///                     adjustment has a positive upper bound, then there must be a step adjustment with
    ///                     a null upper bound.
    ///
    ///
    ///                 The upper and lower bound can't be null in the same step adjustment.
    ///
    ///
    ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-steps">Step
    ///                 adjustments in the Amazon EC2 Auto Scaling User Guide.
    public struct StepAdjustment: Swift.Equatable {
        /// The lower bound for the difference between the alarm threshold and the CloudWatch metric. If
        ///             the metric value is above the breach threshold, the lower bound is inclusive (the metric
        ///             must be greater than or equal to the threshold plus the lower bound). Otherwise, it is
        ///             exclusive (the metric must be greater than the threshold plus the lower bound). A null
        ///             value indicates negative infinity.
        public var metricIntervalLowerBound: Swift.Double?
        /// The upper bound for the difference between the alarm threshold and the CloudWatch metric. If
        ///             the metric value is above the breach threshold, the upper bound is exclusive (the metric
        ///             must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the
        ///             metric must be less than or equal to the threshold plus the upper bound). A null value
        ///             indicates positive infinity.
        ///         The upper bound must be greater than the lower bound.
        public var metricIntervalUpperBound: Swift.Double?
        /// The amount by which to scale, based on the specified adjustment type. A positive value
        ///             adds to the current capacity while a negative number removes from the current
        ///             capacity.
        /// This member is required.
        public var scalingAdjustment: Swift.Int?

        public init (
            metricIntervalLowerBound: Swift.Double? = nil,
            metricIntervalUpperBound: Swift.Double? = nil,
            scalingAdjustment: Swift.Int? = nil
        )
        {
            self.metricIntervalLowerBound = metricIntervalLowerBound
            self.metricIntervalUpperBound = metricIntervalUpperBound
            self.scalingAdjustment = scalingAdjustment
        }
    }

}

public struct SuspendProcessesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SuspendProcessesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SuspendProcessesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SuspendProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SuspendProcessesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SuspendProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SuspendProcessesOutputError>
}

extension SuspendProcessesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuspendProcessesInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), scalingProcesses: \(Swift.String(describing: scalingProcesses)))"}
}

extension SuspendProcessesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let scalingProcesses = scalingProcesses {
            var scalingProcessesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ScalingProcesses"))
            for (index0, xmlstringmaxlen2550) in scalingProcesses.enumerated() {
                try scalingProcessesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("SuspendProcesses", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SuspendProcessesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SuspendProcessesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SuspendProcessesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SuspendProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SuspendProcessesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SuspendProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SuspendProcessesOutputError>
}

public struct SuspendProcessesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SuspendProcessesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SuspendProcessesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SuspendProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SuspendProcessesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SuspendProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SuspendProcessesOutputError>
}

public struct SuspendProcessesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SuspendProcessesInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SuspendProcessesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SuspendProcessesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SuspendProcessesInput
    public typealias MOutput = ClientRuntime.OperationOutput<SuspendProcessesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SuspendProcessesOutputError>
}

public struct SuspendProcessesInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more of the following processes:
    ///
    ///
    ///
    ///                     Launch
    ///
    ///
    ///
    ///
    ///                     Terminate
    ///
    ///
    ///
    ///
    ///                     AddToLoadBalancer
    ///
    ///
    ///
    ///
    ///                     AlarmNotification
    ///
    ///
    ///
    ///
    ///                     AZRebalance
    ///
    ///
    ///
    ///
    ///                     HealthCheck
    ///
    ///
    ///
    ///
    ///                     InstanceRefresh
    ///
    ///
    ///
    ///
    ///                     ReplaceUnhealthy
    ///
    ///
    ///
    ///
    ///                     ScheduledActions
    ///
    ///
    ///
    ///         If you omit this parameter, all processes are specified.
    public var scalingProcesses: [Swift.String]?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        scalingProcesses: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scalingProcesses = scalingProcesses
    }
}

extension SuspendProcessesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SuspendProcessesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUse" : self = .resourceInUseFault(try ResourceInUseFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SuspendProcessesOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case resourceInUseFault(ResourceInUseFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension SuspendProcessesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuspendProcessesOutputResponse()"}
}

extension SuspendProcessesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SuspendProcessesOutputResponse: Swift.Equatable {

    public init() {}
}

struct SuspendProcessesOutputResponseBody: Swift.Equatable {
}

extension SuspendProcessesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AutoScalingClientTypes.SuspendedProcess: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processName = "ProcessName"
        case suspensionReason = "SuspensionReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let processName = processName {
            try container.encode(processName, forKey: ClientRuntime.Key("ProcessName"))
        }
        if let suspensionReason = suspensionReason {
            try container.encode(suspensionReason, forKey: ClientRuntime.Key("SuspensionReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processName)
        processName = processNameDecoded
        let suspensionReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .suspensionReason)
        suspensionReason = suspensionReasonDecoded
    }
}

extension AutoScalingClientTypes.SuspendedProcess: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SuspendedProcess(processName: \(Swift.String(describing: processName)), suspensionReason: \(Swift.String(describing: suspensionReason)))"}
}

extension AutoScalingClientTypes {
    /// Describes an auto scaling process that has been suspended.
    ///         For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types">Scaling processes in the Amazon EC2 Auto Scaling User Guide.
    public struct SuspendedProcess: Swift.Equatable {
        /// The name of the suspended process.
        public var processName: Swift.String?
        /// The reason that the process was suspended.
        public var suspensionReason: Swift.String?

        public init (
            processName: Swift.String? = nil,
            suspensionReason: Swift.String? = nil
        )
        {
            self.processName = processName
            self.suspensionReason = suspensionReason
        }
    }

}

extension AutoScalingClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case propagateAtLaunch = "PropagateAtLaunch"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let propagateAtLaunch = propagateAtLaunch {
            try container.encode(propagateAtLaunch, forKey: ClientRuntime.Key("PropagateAtLaunch"))
        }
        if let resourceId = resourceId {
            try container.encode(resourceId, forKey: ClientRuntime.Key("ResourceId"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let propagateAtLaunchDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .propagateAtLaunch)
        propagateAtLaunch = propagateAtLaunchDecoded
    }
}

extension AutoScalingClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), propagateAtLaunch: \(Swift.String(describing: propagateAtLaunch)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)), value: \(Swift.String(describing: value)))"}
}

extension AutoScalingClientTypes {
    /// Describes a tag for an Auto Scaling group.
    public struct Tag: Swift.Equatable {
        /// The tag key.
        /// This member is required.
        public var key: Swift.String?
        /// Determines whether the tag is added to new instances as they are launched in the
        ///             group.
        public var propagateAtLaunch: Swift.Bool?
        /// The name of the Auto Scaling group.
        public var resourceId: Swift.String?
        /// The type of resource. The only supported value is
        ///             auto-scaling-group.
        public var resourceType: Swift.String?
        /// The tag value.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            propagateAtLaunch: Swift.Bool? = nil,
            resourceId: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.value = value
        }
    }

}

extension AutoScalingClientTypes.TagDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case propagateAtLaunch = "PropagateAtLaunch"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let propagateAtLaunch = propagateAtLaunch {
            try container.encode(propagateAtLaunch, forKey: ClientRuntime.Key("PropagateAtLaunch"))
        }
        if let resourceId = resourceId {
            try container.encode(resourceId, forKey: ClientRuntime.Key("ResourceId"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let propagateAtLaunchDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .propagateAtLaunch)
        propagateAtLaunch = propagateAtLaunchDecoded
    }
}

extension AutoScalingClientTypes.TagDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagDescription(key: \(Swift.String(describing: key)), propagateAtLaunch: \(Swift.String(describing: propagateAtLaunch)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)), value: \(Swift.String(describing: value)))"}
}

extension AutoScalingClientTypes {
    /// Describes a tag for an Auto Scaling group.
    public struct TagDescription: Swift.Equatable {
        /// The tag key.
        public var key: Swift.String?
        /// Determines whether the tag is added to new instances as they are launched in the
        ///             group.
        public var propagateAtLaunch: Swift.Bool?
        /// The name of the group.
        public var resourceId: Swift.String?
        /// The type of resource. The only supported value is
        ///             auto-scaling-group.
        public var resourceType: Swift.String?
        /// The tag value.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            propagateAtLaunch: Swift.Bool? = nil,
            resourceId: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.value = value
        }
    }

}

extension AutoScalingClientTypes.TargetTrackingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customizedMetricSpecification = "CustomizedMetricSpecification"
        case disableScaleIn = "DisableScaleIn"
        case predefinedMetricSpecification = "PredefinedMetricSpecification"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let customizedMetricSpecification = customizedMetricSpecification {
            try container.encode(customizedMetricSpecification, forKey: ClientRuntime.Key("CustomizedMetricSpecification"))
        }
        if let disableScaleIn = disableScaleIn {
            try container.encode(disableScaleIn, forKey: ClientRuntime.Key("DisableScaleIn"))
        }
        if let predefinedMetricSpecification = predefinedMetricSpecification {
            try container.encode(predefinedMetricSpecification, forKey: ClientRuntime.Key("PredefinedMetricSpecification"))
        }
        if let targetValue = targetValue {
            try container.encode(targetValue, forKey: ClientRuntime.Key("TargetValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predefinedMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.PredefinedMetricSpecification.self, forKey: .predefinedMetricSpecification)
        predefinedMetricSpecification = predefinedMetricSpecificationDecoded
        let customizedMetricSpecificationDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.CustomizedMetricSpecification.self, forKey: .customizedMetricSpecification)
        customizedMetricSpecification = customizedMetricSpecificationDecoded
        let targetValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
    }
}

extension AutoScalingClientTypes.TargetTrackingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TargetTrackingConfiguration(customizedMetricSpecification: \(Swift.String(describing: customizedMetricSpecification)), disableScaleIn: \(Swift.String(describing: disableScaleIn)), predefinedMetricSpecification: \(Swift.String(describing: predefinedMetricSpecification)), targetValue: \(Swift.String(describing: targetValue)))"}
}

extension AutoScalingClientTypes {
    /// Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
    public struct TargetTrackingConfiguration: Swift.Equatable {
        /// A customized metric. You must specify either a predefined metric or a customized
        ///             metric.
        public var customizedMetricSpecification: AutoScalingClientTypes.CustomizedMetricSpecification?
        /// Indicates whether scaling in by the target tracking scaling policy is disabled. If
        ///             scaling in is disabled, the target tracking scaling policy doesn't remove instances from
        ///             the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from
        ///             the Auto Scaling group. The default is false.
        public var disableScaleIn: Swift.Bool?
        /// A predefined metric. You must specify either a predefined metric or a customized
        ///             metric.
        public var predefinedMetricSpecification: AutoScalingClientTypes.PredefinedMetricSpecification?
        /// The target value for the metric.
        /// This member is required.
        public var targetValue: Swift.Double?

        public init (
            customizedMetricSpecification: AutoScalingClientTypes.CustomizedMetricSpecification? = nil,
            disableScaleIn: Swift.Bool? = nil,
            predefinedMetricSpecification: AutoScalingClientTypes.PredefinedMetricSpecification? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.customizedMetricSpecification = customizedMetricSpecification
            self.disableScaleIn = disableScaleIn
            self.predefinedMetricSpecification = predefinedMetricSpecification
            self.targetValue = targetValue
        }
    }

}

public struct TerminateInstanceInAutoScalingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TerminateInstanceInAutoScalingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TerminateInstanceInAutoScalingGroupOutputError>
}

extension TerminateInstanceInAutoScalingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TerminateInstanceInAutoScalingGroupInput(instanceId: \(Swift.String(describing: instanceId)), shouldDecrementDesiredCapacity: \(Swift.String(describing: shouldDecrementDesiredCapacity)))"}
}

extension TerminateInstanceInAutoScalingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let instanceId = instanceId {
            try container.encode(instanceId, forKey: ClientRuntime.Key("InstanceId"))
        }
        if let shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity {
            try container.encode(shouldDecrementDesiredCapacity, forKey: ClientRuntime.Key("ShouldDecrementDesiredCapacity"))
        }
        try container.encode("TerminateInstanceInAutoScalingGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct TerminateInstanceInAutoScalingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TerminateInstanceInAutoScalingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TerminateInstanceInAutoScalingGroupOutputError>
}

public struct TerminateInstanceInAutoScalingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TerminateInstanceInAutoScalingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TerminateInstanceInAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TerminateInstanceInAutoScalingGroupOutputError>
}

public struct TerminateInstanceInAutoScalingGroupInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TerminateInstanceInAutoScalingGroupInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: TerminateInstanceInAutoScalingGroupInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = TerminateInstanceInAutoScalingGroupInput
    public typealias MOutput = ClientRuntime.OperationOutput<TerminateInstanceInAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TerminateInstanceInAutoScalingGroupOutputError>
}

public struct TerminateInstanceInAutoScalingGroupInput: Swift.Equatable {
    /// The ID of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// Indicates whether terminating the instance also decrements the size of the Auto Scaling
    ///             group.
    /// This member is required.
    public var shouldDecrementDesiredCapacity: Swift.Bool?

    public init (
        instanceId: Swift.String? = nil,
        shouldDecrementDesiredCapacity: Swift.Bool? = nil
    )
    {
        self.instanceId = instanceId
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

extension TerminateInstanceInAutoScalingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TerminateInstanceInAutoScalingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TerminateInstanceInAutoScalingGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case unknown(UnknownAWSHttpServiceError)
}

extension TerminateInstanceInAutoScalingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TerminateInstanceInAutoScalingGroupOutputResponse(activity: \(Swift.String(describing: activity)))"}
}

extension TerminateInstanceInAutoScalingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TerminateInstanceInAutoScalingGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.activity = output.activity
        } else {
            self.activity = nil
        }
    }
}

public struct TerminateInstanceInAutoScalingGroupOutputResponse: Swift.Equatable {
    /// A scaling activity.
    public var activity: AutoScalingClientTypes.Activity?

    public init (
        activity: AutoScalingClientTypes.Activity? = nil
    )
    {
        self.activity = activity
    }
}

struct TerminateInstanceInAutoScalingGroupOutputResponseBody: Swift.Equatable {
    public let activity: AutoScalingClientTypes.Activity?
}

extension TerminateInstanceInAutoScalingGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activity = "Activity"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("TerminateInstanceInAutoScalingGroupResult"))
        let activityDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.Activity.self, forKey: .activity)
        activity = activityDecoded
    }
}

public struct UpdateAutoScalingGroupInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAutoScalingGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAutoScalingGroupOutputError>
}

extension UpdateAutoScalingGroupInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAutoScalingGroupInput(autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), availabilityZones: \(Swift.String(describing: availabilityZones)), capacityRebalance: \(Swift.String(describing: capacityRebalance)), context: \(Swift.String(describing: context)), defaultCooldown: \(Swift.String(describing: defaultCooldown)), desiredCapacity: \(Swift.String(describing: desiredCapacity)), healthCheckGracePeriod: \(Swift.String(describing: healthCheckGracePeriod)), healthCheckType: \(Swift.String(describing: healthCheckType)), launchConfigurationName: \(Swift.String(describing: launchConfigurationName)), launchTemplate: \(Swift.String(describing: launchTemplate)), maxInstanceLifetime: \(Swift.String(describing: maxInstanceLifetime)), maxSize: \(Swift.String(describing: maxSize)), minSize: \(Swift.String(describing: minSize)), mixedInstancesPolicy: \(Swift.String(describing: mixedInstancesPolicy)), newInstancesProtectedFromScaleIn: \(Swift.String(describing: newInstancesProtectedFromScaleIn)), placementGroup: \(Swift.String(describing: placementGroup)), serviceLinkedRoleARN: \(Swift.String(describing: serviceLinkedRoleARN)), terminationPolicies: \(Swift.String(describing: terminationPolicies)), vPCZoneIdentifier: \(Swift.String(describing: vPCZoneIdentifier)))"}
}

extension UpdateAutoScalingGroupInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoScalingGroupName = autoScalingGroupName {
            try container.encode(autoScalingGroupName, forKey: ClientRuntime.Key("AutoScalingGroupName"))
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AvailabilityZones"))
            for (index0, xmlstringmaxlen2550) in availabilityZones.enumerated() {
                try availabilityZonesContainer.encode(xmlstringmaxlen2550, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let capacityRebalance = capacityRebalance {
            try container.encode(capacityRebalance, forKey: ClientRuntime.Key("CapacityRebalance"))
        }
        if let context = context {
            try container.encode(context, forKey: ClientRuntime.Key("Context"))
        }
        if let defaultCooldown = defaultCooldown {
            try container.encode(defaultCooldown, forKey: ClientRuntime.Key("DefaultCooldown"))
        }
        if let desiredCapacity = desiredCapacity {
            try container.encode(desiredCapacity, forKey: ClientRuntime.Key("DesiredCapacity"))
        }
        if let healthCheckGracePeriod = healthCheckGracePeriod {
            try container.encode(healthCheckGracePeriod, forKey: ClientRuntime.Key("HealthCheckGracePeriod"))
        }
        if let healthCheckType = healthCheckType {
            try container.encode(healthCheckType, forKey: ClientRuntime.Key("HealthCheckType"))
        }
        if let launchConfigurationName = launchConfigurationName {
            try container.encode(launchConfigurationName, forKey: ClientRuntime.Key("LaunchConfigurationName"))
        }
        if let launchTemplate = launchTemplate {
            try container.encode(launchTemplate, forKey: ClientRuntime.Key("LaunchTemplate"))
        }
        if let maxInstanceLifetime = maxInstanceLifetime {
            try container.encode(maxInstanceLifetime, forKey: ClientRuntime.Key("MaxInstanceLifetime"))
        }
        if let maxSize = maxSize {
            try container.encode(maxSize, forKey: ClientRuntime.Key("MaxSize"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let mixedInstancesPolicy = mixedInstancesPolicy {
            try container.encode(mixedInstancesPolicy, forKey: ClientRuntime.Key("MixedInstancesPolicy"))
        }
        if let newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn {
            try container.encode(newInstancesProtectedFromScaleIn, forKey: ClientRuntime.Key("NewInstancesProtectedFromScaleIn"))
        }
        if let placementGroup = placementGroup {
            try container.encode(placementGroup, forKey: ClientRuntime.Key("PlacementGroup"))
        }
        if let serviceLinkedRoleARN = serviceLinkedRoleARN {
            try container.encode(serviceLinkedRoleARN, forKey: ClientRuntime.Key("ServiceLinkedRoleARN"))
        }
        if let terminationPolicies = terminationPolicies {
            var terminationPoliciesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("TerminationPolicies"))
            for (index0, xmlstringmaxlen16000) in terminationPolicies.enumerated() {
                try terminationPoliciesContainer.encode(xmlstringmaxlen16000, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let vPCZoneIdentifier = vPCZoneIdentifier {
            try container.encode(vPCZoneIdentifier, forKey: ClientRuntime.Key("VPCZoneIdentifier"))
        }
        try container.encode("UpdateAutoScalingGroup", forKey:ClientRuntime.Key("Action"))
        try container.encode("2011-01-01", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateAutoScalingGroupInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAutoScalingGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAutoScalingGroupOutputError>
}

public struct UpdateAutoScalingGroupInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAutoScalingGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateAutoScalingGroupInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateAutoScalingGroupInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAutoScalingGroupOutputError>
}

public struct UpdateAutoScalingGroupInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateAutoScalingGroupInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateAutoScalingGroupInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateAutoScalingGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateAutoScalingGroupInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateAutoScalingGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateAutoScalingGroupOutputError>
}

public struct UpdateAutoScalingGroupInput: Swift.Equatable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more Availability Zones for the group.
    public var availabilityZones: [Swift.String]?
    /// Enables or disables Capacity Rebalancing. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/capacity-rebalance.html">Amazon EC2 Auto Scaling Capacity Rebalancing in the
    ///             Amazon EC2 Auto Scaling User Guide.
    public var capacityRebalance: Swift.Bool?
    /// Reserved.
    public var context: Swift.String?
    /// The amount of time, in seconds, after a scaling activity completes before another
    ///             scaling activity can start. The default value is 300. This setting applies
    ///             when using simple scaling policies, but not when using other scaling policies or
    ///             scheduled scaling. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling
    ///             in the Amazon EC2 Auto Scaling User Guide.
    public var defaultCooldown: Swift.Int?
    /// The desired capacity is the initial capacity of the Auto Scaling group after this operation
    ///             completes and the capacity it attempts to maintain. This number must be greater than or
    ///             equal to the minimum size of the group and less than or equal to the maximum size of the
    ///             group.
    public var desiredCapacity: Swift.Int?
    /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status
    ///             of an EC2 instance that has come into service. The default value is 0. For
    ///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html#health-check-grace-period">Health
    ///                 check grace period in the Amazon EC2 Auto Scaling User Guide.
    ///         Conditional: Required if you are adding an ELB health check.
    public var healthCheckGracePeriod: Swift.Int?
    /// The service to use for the health checks. The valid values are EC2 and
    ///                 ELB. If you configure an Auto Scaling group to use ELB health
    ///             checks, it considers the instance unhealthy if it fails either the EC2 status checks or
    ///             the load balancer health checks.
    public var healthCheckType: Swift.String?
    /// The name of the launch configuration. If you specify
    ///                 LaunchConfigurationName in your update request, you can't specify
    ///                 LaunchTemplate or MixedInstancesPolicy.
    public var launchConfigurationName: Swift.String?
    /// The launch template and version to use to specify the updates. If you specify
    ///                 LaunchTemplate in your update request, you can't specify
    ///                 LaunchConfigurationName or MixedInstancesPolicy.
    public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
    /// The maximum amount of time, in seconds, that an instance can be in service. The
    ///             default is null. If specified, the value must be either 0 or a number equal to or
    ///             greater than 86,400 seconds (1 day). To clear a previously set value, specify a new
    ///             value of 0. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling
    ///                 instances based on maximum instance lifetime in the
    ///                 Amazon EC2 Auto Scaling User Guide.
    public var maxInstanceLifetime: Swift.Int?
    /// The maximum size of the Auto Scaling group.
    ///
    ///             With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to
    ///                 go above MaxSize to meet your capacity requirements. In this event,
    ///                 Amazon EC2 Auto Scaling will never go above MaxSize by more than your largest instance
    ///                 weight (weights that define how many units each instance contributes to the desired
    ///                 capacity of the group).
    ///
    public var maxSize: Swift.Int?
    /// The minimum size of the Auto Scaling group.
    public var minSize: Swift.Int?
    /// An embedded object that specifies a mixed instances policy. When you make changes to
    ///             an existing policy, all optional properties are left unchanged if not specified. For
    ///             more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-purchase-options.html">Auto Scaling groups with multiple
    ///                 instance types and purchase options in the Amazon EC2 Auto Scaling User
    ///                 Guide.
    public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
    /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling
    ///             when scaling in. For more information about preventing instances from terminating on
    ///             scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection">Instance scale-in protection in the
    ///             Amazon EC2 Auto Scaling User Guide.
    public var newInstancesProtectedFromScaleIn: Swift.Bool?
    /// The name of an existing placement group into which to launch your instances, if any. A
    ///             placement group is a logical grouping of instances within a single Availability Zone.
    ///             You cannot specify multiple Availability Zones and a placement group. For more
    ///             information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups in the
    ///                 Amazon EC2 User Guide for Linux Instances.
    public var placementGroup: Swift.String?
    /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to
    ///             call other Amazon Web Services on your behalf. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-linked
    ///                 roles in the Amazon EC2 Auto Scaling User Guide.
    public var serviceLinkedRoleARN: Swift.String?
    /// A policy or a list of policies that are used to select the instances to terminate. The
    ///             policies are executed in the order that you list them. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html">Controlling which Auto Scaling instances terminate during scale in in the
    ///                 Amazon EC2 Auto Scaling User Guide.
    public var terminationPolicies: [Swift.String]?
    /// A comma-separated list of subnet IDs for a virtual private cloud (VPC). If you specify
    ///                 VPCZoneIdentifier with AvailabilityZones, the subnets that
    ///             you specify for this parameter must reside in those Availability Zones.
    public var vPCZoneIdentifier: Swift.String?

    public init (
        autoScalingGroupName: Swift.String? = nil,
        availabilityZones: [Swift.String]? = nil,
        capacityRebalance: Swift.Bool? = nil,
        context: Swift.String? = nil,
        defaultCooldown: Swift.Int? = nil,
        desiredCapacity: Swift.Int? = nil,
        healthCheckGracePeriod: Swift.Int? = nil,
        healthCheckType: Swift.String? = nil,
        launchConfigurationName: Swift.String? = nil,
        launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
        maxInstanceLifetime: Swift.Int? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil,
        newInstancesProtectedFromScaleIn: Swift.Bool? = nil,
        placementGroup: Swift.String? = nil,
        serviceLinkedRoleARN: Swift.String? = nil,
        terminationPolicies: [Swift.String]? = nil,
        vPCZoneIdentifier: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZones = availabilityZones
        self.capacityRebalance = capacityRebalance
        self.context = context
        self.defaultCooldown = defaultCooldown
        self.desiredCapacity = desiredCapacity
        self.healthCheckGracePeriod = healthCheckGracePeriod
        self.healthCheckType = healthCheckType
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.maxInstanceLifetime = maxInstanceLifetime
        self.maxSize = maxSize
        self.minSize = minSize
        self.mixedInstancesPolicy = mixedInstancesPolicy
        self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
        self.placementGroup = placementGroup
        self.serviceLinkedRoleARN = serviceLinkedRoleARN
        self.terminationPolicies = terminationPolicies
        self.vPCZoneIdentifier = vPCZoneIdentifier
    }
}

extension UpdateAutoScalingGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateAutoScalingGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceContention" : self = .resourceContentionFault(try ResourceContentionFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ScalingActivityInProgress" : self = .scalingActivityInProgressFault(try ScalingActivityInProgressFault(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceLinkedRoleFailure" : self = .serviceLinkedRoleFailure(try ServiceLinkedRoleFailure(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateAutoScalingGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceContentionFault(ResourceContentionFault)
    case scalingActivityInProgressFault(ScalingActivityInProgressFault)
    case serviceLinkedRoleFailure(ServiceLinkedRoleFailure)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateAutoScalingGroupOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAutoScalingGroupOutputResponse()"}
}

extension UpdateAutoScalingGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateAutoScalingGroupOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateAutoScalingGroupOutputResponseBody: Swift.Equatable {
}

extension UpdateAutoScalingGroupOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AutoScalingClientTypes.WarmPoolConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxGroupPreparedCapacity = "MaxGroupPreparedCapacity"
        case minSize = "MinSize"
        case poolState = "PoolState"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxGroupPreparedCapacity = maxGroupPreparedCapacity {
            try container.encode(maxGroupPreparedCapacity, forKey: ClientRuntime.Key("MaxGroupPreparedCapacity"))
        }
        if let minSize = minSize {
            try container.encode(minSize, forKey: ClientRuntime.Key("MinSize"))
        }
        if let poolState = poolState {
            try container.encode(poolState, forKey: ClientRuntime.Key("PoolState"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxGroupPreparedCapacityDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxGroupPreparedCapacity)
        maxGroupPreparedCapacity = maxGroupPreparedCapacityDecoded
        let minSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let poolStateDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolState.self, forKey: .poolState)
        poolState = poolStateDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AutoScalingClientTypes.WarmPoolStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension AutoScalingClientTypes.WarmPoolConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WarmPoolConfiguration(maxGroupPreparedCapacity: \(Swift.String(describing: maxGroupPreparedCapacity)), minSize: \(Swift.String(describing: minSize)), poolState: \(Swift.String(describing: poolState)), status: \(Swift.String(describing: status)))"}
}

extension AutoScalingClientTypes {
    /// Describes a warm pool configuration.
    public struct WarmPoolConfiguration: Swift.Equatable {
        /// The maximum number of instances that are allowed to be in the warm pool or in any
        ///             state except Terminated for the Auto Scaling group.
        public var maxGroupPreparedCapacity: Swift.Int?
        /// The minimum number of instances to maintain in the warm pool.
        public var minSize: Swift.Int?
        /// The instance state to transition to after the lifecycle actions are complete.
        public var poolState: AutoScalingClientTypes.WarmPoolState?
        /// The status of a warm pool that is marked for deletion.
        public var status: AutoScalingClientTypes.WarmPoolStatus?

        public init (
            maxGroupPreparedCapacity: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            poolState: AutoScalingClientTypes.WarmPoolState? = nil,
            status: AutoScalingClientTypes.WarmPoolStatus? = nil
        )
        {
            self.maxGroupPreparedCapacity = maxGroupPreparedCapacity
            self.minSize = minSize
            self.poolState = poolState
            self.status = status
        }
    }

}

extension AutoScalingClientTypes {
    public enum WarmPoolState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case running
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmPoolState] {
            return [
                .running,
                .stopped,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .running: return "Running"
            case .stopped: return "Stopped"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WarmPoolState(rawValue: rawValue) ?? WarmPoolState.sdkUnknown(rawValue)
        }
    }
}

extension AutoScalingClientTypes {
    public enum WarmPoolStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pendingdelete
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmPoolStatus] {
            return [
                .pendingdelete,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pendingdelete: return "PendingDelete"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WarmPoolStatus(rawValue: rawValue) ?? WarmPoolStatus.sdkUnknown(rawValue)
        }
    }
}
