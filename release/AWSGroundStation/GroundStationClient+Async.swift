// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension GroundStationClient {
    /// Cancels a contact with a specified contact ID.
    func cancelContact(input: CancelContactInput) async throws -> CancelContactOutputResponse
    {
        typealias cancelContactContinuation = CheckedContinuation<CancelContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelContactContinuation) in
            cancelContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a Config with the specified configData parameters.
    ///          Only one type of configData can be specified.
    func createConfig(input: CreateConfigInput) async throws -> CreateConfigOutputResponse
    {
        typealias createConfigContinuation = CheckedContinuation<CreateConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConfigContinuation) in
            createConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a DataflowEndpoint group containing the specified list of DataflowEndpoint objects.
    ///          The name field in each endpoint is used in your mission profile DataflowEndpointConfig
    ///          to specify which endpoints to use during a contact.
    ///          When a contact uses multiple DataflowEndpointConfig objects, each Config
    ///          must match a DataflowEndpoint in the same group.
    func createDataflowEndpointGroup(input: CreateDataflowEndpointGroupInput) async throws -> CreateDataflowEndpointGroupOutputResponse
    {
        typealias createDataflowEndpointGroupContinuation = CheckedContinuation<CreateDataflowEndpointGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDataflowEndpointGroupContinuation) in
            createDataflowEndpointGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a mission profile.
    ///
    ///             dataflowEdges is a list of lists of strings. Each lower level list of strings
    ///          has two elements: a from ARN and a to ARN.
    func createMissionProfile(input: CreateMissionProfileInput) async throws -> CreateMissionProfileOutputResponse
    {
        typealias createMissionProfileContinuation = CheckedContinuation<CreateMissionProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMissionProfileContinuation) in
            createMissionProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a Config.
    func deleteConfig(input: DeleteConfigInput) async throws -> DeleteConfigOutputResponse
    {
        typealias deleteConfigContinuation = CheckedContinuation<DeleteConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConfigContinuation) in
            deleteConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a dataflow endpoint group.
    func deleteDataflowEndpointGroup(input: DeleteDataflowEndpointGroupInput) async throws -> DeleteDataflowEndpointGroupOutputResponse
    {
        typealias deleteDataflowEndpointGroupContinuation = CheckedContinuation<DeleteDataflowEndpointGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDataflowEndpointGroupContinuation) in
            deleteDataflowEndpointGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a mission profile.
    func deleteMissionProfile(input: DeleteMissionProfileInput) async throws -> DeleteMissionProfileOutputResponse
    {
        typealias deleteMissionProfileContinuation = CheckedContinuation<DeleteMissionProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMissionProfileContinuation) in
            deleteMissionProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an existing contact.
    func describeContact(input: DescribeContactInput) async throws -> DescribeContactOutputResponse
    {
        typealias describeContactContinuation = CheckedContinuation<DescribeContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeContactContinuation) in
            describeContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns Config information.
    ///          Only one Config response can be returned.
    func getConfig(input: GetConfigInput) async throws -> GetConfigOutputResponse
    {
        typealias getConfigContinuation = CheckedContinuation<GetConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConfigContinuation) in
            getConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the dataflow endpoint group.
    func getDataflowEndpointGroup(input: GetDataflowEndpointGroupInput) async throws -> GetDataflowEndpointGroupOutputResponse
    {
        typealias getDataflowEndpointGroupContinuation = CheckedContinuation<GetDataflowEndpointGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDataflowEndpointGroupContinuation) in
            getDataflowEndpointGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the number of minutes used by account.
    func getMinuteUsage(input: GetMinuteUsageInput) async throws -> GetMinuteUsageOutputResponse
    {
        typealias getMinuteUsageContinuation = CheckedContinuation<GetMinuteUsageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMinuteUsageContinuation) in
            getMinuteUsage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a mission profile.
    func getMissionProfile(input: GetMissionProfileInput) async throws -> GetMissionProfileOutputResponse
    {
        typealias getMissionProfileContinuation = CheckedContinuation<GetMissionProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMissionProfileContinuation) in
            getMissionProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a satellite.
    func getSatellite(input: GetSatelliteInput) async throws -> GetSatelliteOutputResponse
    {
        typealias getSatelliteContinuation = CheckedContinuation<GetSatelliteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSatelliteContinuation) in
            getSatellite(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of Config objects.
    func listConfigs(input: ListConfigsInput) async throws -> ListConfigsOutputResponse
    {
        typealias listConfigsContinuation = CheckedContinuation<ListConfigsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConfigsContinuation) in
            listConfigs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of contacts.
    ///          If statusList contains AVAILABLE, the request must include
    ///       groundStation, missionprofileArn, and satelliteArn.
    ///
    func listContacts(input: ListContactsInput) async throws -> ListContactsOutputResponse
    {
        typealias listContactsContinuation = CheckedContinuation<ListContactsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listContactsContinuation) in
            listContacts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of DataflowEndpoint groups.
    func listDataflowEndpointGroups(input: ListDataflowEndpointGroupsInput) async throws -> ListDataflowEndpointGroupsOutputResponse
    {
        typealias listDataflowEndpointGroupsContinuation = CheckedContinuation<ListDataflowEndpointGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDataflowEndpointGroupsContinuation) in
            listDataflowEndpointGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of ground stations.
    func listGroundStations(input: ListGroundStationsInput) async throws -> ListGroundStationsOutputResponse
    {
        typealias listGroundStationsContinuation = CheckedContinuation<ListGroundStationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listGroundStationsContinuation) in
            listGroundStations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of mission profiles.
    func listMissionProfiles(input: ListMissionProfilesInput) async throws -> ListMissionProfilesOutputResponse
    {
        typealias listMissionProfilesContinuation = CheckedContinuation<ListMissionProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMissionProfilesContinuation) in
            listMissionProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of satellites.
    func listSatellites(input: ListSatellitesInput) async throws -> ListSatellitesOutputResponse
    {
        typealias listSatellitesContinuation = CheckedContinuation<ListSatellitesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSatellitesContinuation) in
            listSatellites(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of tags for a specified resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Reserves a contact using specified parameters.
    func reserveContact(input: ReserveContactInput) async throws -> ReserveContactOutputResponse
    {
        typealias reserveContactContinuation = CheckedContinuation<ReserveContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: reserveContactContinuation) in
            reserveContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Assigns a tag to a resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deassigns a resource tag.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the Config used when scheduling contacts.
    ///          Updating a Config will not update the execution parameters
    ///          for existing future contacts scheduled with this Config.
    func updateConfig(input: UpdateConfigInput) async throws -> UpdateConfigOutputResponse
    {
        typealias updateConfigContinuation = CheckedContinuation<UpdateConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConfigContinuation) in
            updateConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a mission profile.
    ///          Updating a mission profile will not update the execution parameters
    ///          for existing future contacts.
    func updateMissionProfile(input: UpdateMissionProfileInput) async throws -> UpdateMissionProfileOutputResponse
    {
        typealias updateMissionProfileContinuation = CheckedContinuation<UpdateMissionProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMissionProfileContinuation) in
            updateMissionProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
