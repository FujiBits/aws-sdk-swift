// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension SsmClient {
    /// <p>Adds or overwrites one or more tags for the specified resource. Tags are metadata that you
    ///    can assign to your documents, managed instances, maintenance windows, Parameter Store parameters,
    ///    and patch baselines. Tags enable you to categorize your resources in different ways, for example,
    ///    by purpose, owner, or environment. Each tag consists of a key and an optional value, both of
    ///    which you define. For example, you could define a set of tags for your account's managed
    ///    instances that helps you track each instance's owner and stack level. For example: Key=Owner and
    ///    Value=DbAdmin, SysAdmin, or Dev. Or Key=Stack and Value=Production, Pre-Production, or
    ///    Test.</p>
    ///          <p>Each resource can have a maximum of 50 tags. </p>
    ///          <p>We recommend that you devise a set of tag keys that meets your needs for each resource type.
    ///    Using a consistent set of tag keys makes it easier for you to manage your resources. You can
    ///    search and filter the resources based on the tags you add. Tags don't have any semantic meaning
    ///    to and are interpreted strictly as a string of characters. </p>
    ///          <p>For more information about using tags with EC2 instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging your Amazon EC2 resources</a> in the
    ///     <i>Amazon EC2 User Guide</i>.</p>
    func addTagsToResource(input: AddTagsToResourceInput) async throws -> AddTagsToResourceOutputResponse
    {
        typealias addTagsToResourceContinuation = CheckedContinuation<AddTagsToResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addTagsToResourceContinuation) in
            addTagsToResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates a related resource to a Systems Manager OpsCenter OpsItem. For example, you can
    ///    associate an Incident Manager incident or analysis with an OpsItem. Incident Manager is a
    ///    capability of AWS Systems Manager.</p>
    func associateOpsItemRelatedItem(input: AssociateOpsItemRelatedItemInput) async throws -> AssociateOpsItemRelatedItemOutputResponse
    {
        typealias associateOpsItemRelatedItemContinuation = CheckedContinuation<AssociateOpsItemRelatedItemOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateOpsItemRelatedItemContinuation) in
            associateOpsItemRelatedItem(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attempts to cancel the command specified by the Command ID. There is no guarantee that the
    ///    command will be terminated and the underlying process stopped.</p>
    func cancelCommand(input: CancelCommandInput) async throws -> CancelCommandOutputResponse
    {
        typealias cancelCommandContinuation = CheckedContinuation<CancelCommandOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelCommandContinuation) in
            cancelCommand(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Stops a maintenance window execution that is already in progress and cancels any tasks in
    ///    the window that have not already starting running. (Tasks already in progress will continue to
    ///    completion.)</p>
    func cancelMaintenanceWindowExecution(input: CancelMaintenanceWindowExecutionInput) async throws -> CancelMaintenanceWindowExecutionOutputResponse
    {
        typealias cancelMaintenanceWindowExecutionContinuation = CheckedContinuation<CancelMaintenanceWindowExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelMaintenanceWindowExecutionContinuation) in
            cancelMaintenanceWindowExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Generates an activation code and activation ID you can use to register your on-premises
    ///    server or virtual machine (VM) with Systems Manager. Registering these machines with Systems Manager makes it
    ///    possible to manage them using Systems Manager capabilities. You use the activation code and ID when
    ///    installing SSM Agent on machines in your hybrid environment. For more information about
    ///    requirements for managing on-premises instances and VMs using Systems Manager, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html">Setting up
    ///     AWS Systems Manager for hybrid environments</a> in the <i>AWS Systems Manager User Guide</i>. </p>
    ///          <note>
    ///             <p>On-premises servers or VMs that are registered with Systems Manager and EC2 instances that you manage
    ///     with Systems Manager are all called <i>managed instances</i>.</p>
    ///          </note>
    func createActivation(input: CreateActivationInput) async throws -> CreateActivationOutputResponse
    {
        typealias createActivationContinuation = CheckedContinuation<CreateActivationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createActivationContinuation) in
            createActivation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>A State Manager association defines the state that you want to maintain on your instances.
    ///    For example, an association can specify that anti-virus software must be installed and running on
    ///    your instances, or that certain ports must be closed. For static targets, the association
    ///    specifies a schedule for when the configuration is reapplied. For dynamic targets, such as an AWS
    ///    Resource Group or an AWS Autoscaling Group, State Manager applies the configuration when new
    ///    instances are added to the group. The association also specifies actions to take when applying
    ///    the configuration. For example, an association for anti-virus software might run once a day. If
    ///    the software is not installed, then State Manager installs it. If the software is installed, but
    ///    the service is not running, then the association might instruct State Manager to start the
    ///    service. </p>
    func createAssociation(input: CreateAssociationInput) async throws -> CreateAssociationOutputResponse
    {
        typealias createAssociationContinuation = CheckedContinuation<CreateAssociationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAssociationContinuation) in
            createAssociation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates the specified Systems Manager document with the specified instances or targets.</p>
    ///          <p>When you associate a document with one or more instances using instance IDs or tags,
    ///    SSM Agent running on the instance processes the document and configures the instance as
    ///    specified.</p>
    ///          <p>If you associate a document with an instance that already has an associated document, the
    ///    system returns the AssociationAlreadyExists exception.</p>
    func createAssociationBatch(input: CreateAssociationBatchInput) async throws -> CreateAssociationBatchOutputResponse
    {
        typealias createAssociationBatchContinuation = CheckedContinuation<CreateAssociationBatchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAssociationBatchContinuation) in
            createAssociationBatch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a Systems Manager (SSM) document. An SSM document defines the actions that Systems Manager performs on
    ///    your managed instances. For more information about SSM documents, including information about
    ///    supported schemas, features, and syntax, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-ssm-docs.html">AWS Systems Manager Documents</a> in the
    ///     <i>AWS Systems Manager User Guide</i>.</p>
    func createDocument(input: CreateDocumentInput) async throws -> CreateDocumentOutputResponse
    {
        typealias createDocumentContinuation = CheckedContinuation<CreateDocumentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDocumentContinuation) in
            createDocument(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new maintenance window.</p>
    ///          <note>
    ///             <p>The value you specify for <code>Duration</code> determines the specific end time for the
    ///     maintenance window based on the time it begins. No maintenance window tasks are permitted to
    ///     start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>.
    ///     For example, if the maintenance window starts at 3 PM, the duration is three hours, and the
    ///     value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start
    ///     after 5 PM.</p>
    ///          </note>
    func createMaintenanceWindow(input: CreateMaintenanceWindowInput) async throws -> CreateMaintenanceWindowOutputResponse
    {
        typealias createMaintenanceWindowContinuation = CheckedContinuation<CreateMaintenanceWindowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMaintenanceWindowContinuation) in
            createMaintenanceWindow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new OpsItem. You must have permission in AWS Identity and Access Management (IAM)
    ///    to create a new OpsItem. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
    ///     OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    ///          <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate
    ///    operational issues impacting the performance and health of their AWS resources. For more
    ///    information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">AWS Systems Manager OpsCenter</a> in the
    ///     <i>AWS Systems Manager User Guide</i>. </p>
    func createOpsItem(input: CreateOpsItemInput) async throws -> CreateOpsItemOutputResponse
    {
        typealias createOpsItemContinuation = CheckedContinuation<CreateOpsItemOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createOpsItemContinuation) in
            createOpsItem(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>If you create a new application in Application Manager, Systems Manager calls this API action to specify
    ///    information about the new application, including the application type.</p>
    func createOpsMetadata(input: CreateOpsMetadataInput) async throws -> CreateOpsMetadataOutputResponse
    {
        typealias createOpsMetadataContinuation = CheckedContinuation<CreateOpsMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createOpsMetadataContinuation) in
            createOpsMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a patch baseline.</p>
    ///          <note>
    ///             <p>For information about valid key and value pairs in <code>PatchFilters</code> for each
    ///     supported operating system type, see <a href="http://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html">PatchFilter</a>.</p>
    ///          </note>
    func createPatchBaseline(input: CreatePatchBaselineInput) async throws -> CreatePatchBaselineOutputResponse
    {
        typealias createPatchBaselineContinuation = CheckedContinuation<CreatePatchBaselineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPatchBaselineContinuation) in
            createPatchBaseline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>A resource data sync helps you view data from multiple sources in a single location. Systems
    ///    Manager offers two types of resource data sync: <code>SyncToDestination</code> and
    ///     <code>SyncFromSource</code>.</p>
    ///          <p>You can configure Systems Manager Inventory to use the <code>SyncToDestination</code> type to
    ///    synchronize Inventory data from multiple AWS Regions to a single S3 bucket. For more information,
    ///    see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-datasync.html">Configuring Resource Data
    ///     Sync for Inventory</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    ///          <p>You can configure Systems Manager Explorer to use the <code>SyncFromSource</code> type to synchronize
    ///    operational work items (OpsItems) and operational data (OpsData) from multiple AWS Regions to a
    ///    single S3 bucket. This type can synchronize OpsItems and OpsData from multiple AWS accounts and
    ///    Regions or <code>EntireOrganization</code> by using AWS Organizations. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resource-data-sync.html">Setting up Systems Manager Explorer to display data from multiple accounts and Regions</a> in the
    ///     <i>AWS Systems Manager User Guide</i>.</p>
    ///          <p>A resource data sync is an asynchronous operation that returns immediately. After a
    ///    successful initial sync is completed, the system continuously syncs data. To check the status of
    ///    a sync, use the <a>ListResourceDataSync</a>.</p>
    ///          <note>
    ///             <p>By default, data is not encrypted in Amazon S3. We strongly recommend that you enable encryption
    ///     in Amazon S3 to ensure secure data storage. We also recommend that you secure access to the Amazon S3
    ///     bucket by creating a restrictive bucket policy. </p>
    ///          </note>
    func createResourceDataSync(input: CreateResourceDataSyncInput) async throws -> CreateResourceDataSyncOutputResponse
    {
        typealias createResourceDataSyncContinuation = CheckedContinuation<CreateResourceDataSyncOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createResourceDataSyncContinuation) in
            createResourceDataSync(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an activation. You are not required to delete an activation. If you delete an
    ///    activation, you can no longer use it to register additional managed instances. Deleting an
    ///    activation does not de-register managed instances. You must manually de-register managed
    ///    instances.</p>
    func deleteActivation(input: DeleteActivationInput) async throws -> DeleteActivationOutputResponse
    {
        typealias deleteActivationContinuation = CheckedContinuation<DeleteActivationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteActivationContinuation) in
            deleteActivation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates the specified Systems Manager document from the specified instance.</p>
    ///          <p>When you disassociate a document from an instance, it does not change the configuration of
    ///    the instance. To change the configuration state of an instance after you disassociate a document,
    ///    you must create a new document with the desired configuration and associate it with the
    ///    instance.</p>
    func deleteAssociation(input: DeleteAssociationInput) async throws -> DeleteAssociationOutputResponse
    {
        typealias deleteAssociationContinuation = CheckedContinuation<DeleteAssociationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAssociationContinuation) in
            deleteAssociation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the Systems Manager document and all instance associations to the document.</p>
    ///          <p>Before you delete the document, we recommend that you use <a>DeleteAssociation</a> to disassociate all instances that are associated with the document.</p>
    func deleteDocument(input: DeleteDocumentInput) async throws -> DeleteDocumentOutputResponse
    {
        typealias deleteDocumentContinuation = CheckedContinuation<DeleteDocumentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDocumentContinuation) in
            deleteDocument(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Delete a custom inventory type or the data associated with a custom Inventory type. Deleting
    ///    a custom inventory type is also referred to as deleting a custom inventory schema.</p>
    func deleteInventory(input: DeleteInventoryInput) async throws -> DeleteInventoryOutputResponse
    {
        typealias deleteInventoryContinuation = CheckedContinuation<DeleteInventoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInventoryContinuation) in
            deleteInventory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a maintenance window.</p>
    func deleteMaintenanceWindow(input: DeleteMaintenanceWindowInput) async throws -> DeleteMaintenanceWindowOutputResponse
    {
        typealias deleteMaintenanceWindowContinuation = CheckedContinuation<DeleteMaintenanceWindowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMaintenanceWindowContinuation) in
            deleteMaintenanceWindow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Delete OpsMetadata related to an application.</p>
    func deleteOpsMetadata(input: DeleteOpsMetadataInput) async throws -> DeleteOpsMetadataOutputResponse
    {
        typealias deleteOpsMetadataContinuation = CheckedContinuation<DeleteOpsMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteOpsMetadataContinuation) in
            deleteOpsMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Delete a parameter from the system.</p>
    func deleteParameter(input: DeleteParameterInput) async throws -> DeleteParameterOutputResponse
    {
        typealias deleteParameterContinuation = CheckedContinuation<DeleteParameterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteParameterContinuation) in
            deleteParameter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Delete a list of parameters.</p>
    func deleteParameters(input: DeleteParametersInput) async throws -> DeleteParametersOutputResponse
    {
        typealias deleteParametersContinuation = CheckedContinuation<DeleteParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteParametersContinuation) in
            deleteParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a patch baseline.</p>
    func deletePatchBaseline(input: DeletePatchBaselineInput) async throws -> DeletePatchBaselineOutputResponse
    {
        typealias deletePatchBaselineContinuation = CheckedContinuation<DeletePatchBaselineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePatchBaselineContinuation) in
            deletePatchBaseline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a Resource Data Sync configuration. After the configuration is deleted, changes to
    ///    data on managed instances are no longer synced to or from the target. Deleting a sync
    ///    configuration does not delete data.</p>
    func deleteResourceDataSync(input: DeleteResourceDataSyncInput) async throws -> DeleteResourceDataSyncOutputResponse
    {
        typealias deleteResourceDataSyncContinuation = CheckedContinuation<DeleteResourceDataSyncOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteResourceDataSyncContinuation) in
            deleteResourceDataSync(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the server or virtual machine from the list of registered servers. You can
    ///    reregister the instance again at any time. If you don't plan to use Run Command on the server, we
    ///    suggest uninstalling SSM Agent first.</p>
    func deregisterManagedInstance(input: DeregisterManagedInstanceInput) async throws -> DeregisterManagedInstanceOutputResponse
    {
        typealias deregisterManagedInstanceContinuation = CheckedContinuation<DeregisterManagedInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterManagedInstanceContinuation) in
            deregisterManagedInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a patch group from a patch baseline.</p>
    func deregisterPatchBaselineForPatchGroup(input: DeregisterPatchBaselineForPatchGroupInput) async throws -> DeregisterPatchBaselineForPatchGroupOutputResponse
    {
        typealias deregisterPatchBaselineForPatchGroupContinuation = CheckedContinuation<DeregisterPatchBaselineForPatchGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterPatchBaselineForPatchGroupContinuation) in
            deregisterPatchBaselineForPatchGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a target from a maintenance window.</p>
    func deregisterTargetFromMaintenanceWindow(input: DeregisterTargetFromMaintenanceWindowInput) async throws -> DeregisterTargetFromMaintenanceWindowOutputResponse
    {
        typealias deregisterTargetFromMaintenanceWindowContinuation = CheckedContinuation<DeregisterTargetFromMaintenanceWindowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterTargetFromMaintenanceWindowContinuation) in
            deregisterTargetFromMaintenanceWindow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a task from a maintenance window.</p>
    func deregisterTaskFromMaintenanceWindow(input: DeregisterTaskFromMaintenanceWindowInput) async throws -> DeregisterTaskFromMaintenanceWindowOutputResponse
    {
        typealias deregisterTaskFromMaintenanceWindowContinuation = CheckedContinuation<DeregisterTaskFromMaintenanceWindowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterTaskFromMaintenanceWindowContinuation) in
            deregisterTaskFromMaintenanceWindow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes details about the activation, such as the date and time the activation was
    ///    created, its expiration date, the IAM role assigned to the instances in the activation, and the
    ///    number of instances registered by using this activation.</p>
    func describeActivations(input: DescribeActivationsInput) async throws -> DescribeActivationsOutputResponse
    {
        typealias describeActivationsContinuation = CheckedContinuation<DescribeActivationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeActivationsContinuation) in
            describeActivations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the association for the specified target or instance. If you created the
    ///    association by using the <code>Targets</code> parameter, then you must retrieve the association
    ///    by using the association ID. If you created the association by specifying an instance ID and a
    ///    Systems Manager document, then you retrieve the association by specifying the document name and the
    ///    instance ID. </p>
    func describeAssociation(input: DescribeAssociationInput) async throws -> DescribeAssociationOutputResponse
    {
        typealias describeAssociationContinuation = CheckedContinuation<DescribeAssociationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAssociationContinuation) in
            describeAssociation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Use this API action to view information about a specific execution of a specific
    ///    association.</p>
    func describeAssociationExecutionTargets(input: DescribeAssociationExecutionTargetsInput) async throws -> DescribeAssociationExecutionTargetsOutputResponse
    {
        typealias describeAssociationExecutionTargetsContinuation = CheckedContinuation<DescribeAssociationExecutionTargetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAssociationExecutionTargetsContinuation) in
            describeAssociationExecutionTargets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Use this API action to view all executions for a specific association ID. </p>
    func describeAssociationExecutions(input: DescribeAssociationExecutionsInput) async throws -> DescribeAssociationExecutionsOutputResponse
    {
        typealias describeAssociationExecutionsContinuation = CheckedContinuation<DescribeAssociationExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAssociationExecutionsContinuation) in
            describeAssociationExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides details about all active and terminated Automation executions.</p>
    func describeAutomationExecutions(input: DescribeAutomationExecutionsInput) async throws -> DescribeAutomationExecutionsOutputResponse
    {
        typealias describeAutomationExecutionsContinuation = CheckedContinuation<DescribeAutomationExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAutomationExecutionsContinuation) in
            describeAutomationExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Information about all active and terminated step executions in an Automation
    ///    workflow.</p>
    func describeAutomationStepExecutions(input: DescribeAutomationStepExecutionsInput) async throws -> DescribeAutomationStepExecutionsOutputResponse
    {
        typealias describeAutomationStepExecutionsContinuation = CheckedContinuation<DescribeAutomationStepExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAutomationStepExecutionsContinuation) in
            describeAutomationStepExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all patches eligible to be included in a patch baseline.</p>
    func describeAvailablePatches(input: DescribeAvailablePatchesInput) async throws -> DescribeAvailablePatchesOutputResponse
    {
        typealias describeAvailablePatchesContinuation = CheckedContinuation<DescribeAvailablePatchesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAvailablePatchesContinuation) in
            describeAvailablePatches(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the specified Systems Manager document.</p>
    func describeDocument(input: DescribeDocumentInput) async throws -> DescribeDocumentOutputResponse
    {
        typealias describeDocumentContinuation = CheckedContinuation<DescribeDocumentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDocumentContinuation) in
            describeDocument(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the permissions for a Systems Manager document. If you created the document, you are the
    ///    owner. If a document is shared, it can either be shared privately (by specifying a user's AWS
    ///    account ID) or publicly (<i>All</i>). </p>
    func describeDocumentPermission(input: DescribeDocumentPermissionInput) async throws -> DescribeDocumentPermissionOutputResponse
    {
        typealias describeDocumentPermissionContinuation = CheckedContinuation<DescribeDocumentPermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDocumentPermissionContinuation) in
            describeDocumentPermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>All associations for the instance(s).</p>
    func describeEffectiveInstanceAssociations(input: DescribeEffectiveInstanceAssociationsInput) async throws -> DescribeEffectiveInstanceAssociationsOutputResponse
    {
        typealias describeEffectiveInstanceAssociationsContinuation = CheckedContinuation<DescribeEffectiveInstanceAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEffectiveInstanceAssociationsContinuation) in
            describeEffectiveInstanceAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the current effective patches (the patch and the approval state) for the specified
    ///    patch baseline. Note that this API applies only to Windows patch baselines.</p>
    func describeEffectivePatchesForPatchBaseline(input: DescribeEffectivePatchesForPatchBaselineInput) async throws -> DescribeEffectivePatchesForPatchBaselineOutputResponse
    {
        typealias describeEffectivePatchesForPatchBaselineContinuation = CheckedContinuation<DescribeEffectivePatchesForPatchBaselineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEffectivePatchesForPatchBaselineContinuation) in
            describeEffectivePatchesForPatchBaseline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>The status of the associations for the instance(s).</p>
    func describeInstanceAssociationsStatus(input: DescribeInstanceAssociationsStatusInput) async throws -> DescribeInstanceAssociationsStatusOutputResponse
    {
        typealias describeInstanceAssociationsStatusContinuation = CheckedContinuation<DescribeInstanceAssociationsStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInstanceAssociationsStatusContinuation) in
            describeInstanceAssociationsStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes one or more of your instances, including information about the operating system
    ///    platform, the version of SSM Agent installed on the instance, instance status, and so on.</p>
    ///          <p>If you specify one or more instance IDs, it returns information for those instances. If you
    ///    do not specify instance IDs, it returns information for all your instances. If you specify an
    ///    instance ID that is not valid or an instance that you do not own, you receive an error.</p>
    ///          <note>
    ///             <p>The IamRole field for this API action is the Amazon Identity and Access Management (IAM)
    ///     role assigned to on-premises instances. This call does not return the IAM role for EC2
    ///     instances.</p>
    ///          </note>
    func describeInstanceInformation(input: DescribeInstanceInformationInput) async throws -> DescribeInstanceInformationOutputResponse
    {
        typealias describeInstanceInformationContinuation = CheckedContinuation<DescribeInstanceInformationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInstanceInformationContinuation) in
            describeInstanceInformation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the high-level patch state of one or more instances.</p>
    func describeInstancePatchStates(input: DescribeInstancePatchStatesInput) async throws -> DescribeInstancePatchStatesOutputResponse
    {
        typealias describeInstancePatchStatesContinuation = CheckedContinuation<DescribeInstancePatchStatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInstancePatchStatesContinuation) in
            describeInstancePatchStates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the high-level patch state for the instances in the specified patch group.</p>
    func describeInstancePatchStatesForPatchGroup(input: DescribeInstancePatchStatesForPatchGroupInput) async throws -> DescribeInstancePatchStatesForPatchGroupOutputResponse
    {
        typealias describeInstancePatchStatesForPatchGroupContinuation = CheckedContinuation<DescribeInstancePatchStatesForPatchGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInstancePatchStatesForPatchGroupContinuation) in
            describeInstancePatchStatesForPatchGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the patches on the specified instance and their state relative
    ///    to the patch baseline being used for the instance.</p>
    func describeInstancePatches(input: DescribeInstancePatchesInput) async throws -> DescribeInstancePatchesOutputResponse
    {
        typealias describeInstancePatchesContinuation = CheckedContinuation<DescribeInstancePatchesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInstancePatchesContinuation) in
            describeInstancePatches(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a specific delete inventory operation.</p>
    func describeInventoryDeletions(input: DescribeInventoryDeletionsInput) async throws -> DescribeInventoryDeletionsOutputResponse
    {
        typealias describeInventoryDeletionsContinuation = CheckedContinuation<DescribeInventoryDeletionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInventoryDeletionsContinuation) in
            describeInventoryDeletions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the individual task executions (one per target) for a particular task run as part
    ///    of a maintenance window execution.</p>
    func describeMaintenanceWindowExecutionTaskInvocations(input: DescribeMaintenanceWindowExecutionTaskInvocationsInput) async throws -> DescribeMaintenanceWindowExecutionTaskInvocationsOutputResponse
    {
        typealias describeMaintenanceWindowExecutionTaskInvocationsContinuation = CheckedContinuation<DescribeMaintenanceWindowExecutionTaskInvocationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMaintenanceWindowExecutionTaskInvocationsContinuation) in
            describeMaintenanceWindowExecutionTaskInvocations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>For a given maintenance window execution, lists the tasks that were run.</p>
    func describeMaintenanceWindowExecutionTasks(input: DescribeMaintenanceWindowExecutionTasksInput) async throws -> DescribeMaintenanceWindowExecutionTasksOutputResponse
    {
        typealias describeMaintenanceWindowExecutionTasksContinuation = CheckedContinuation<DescribeMaintenanceWindowExecutionTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMaintenanceWindowExecutionTasksContinuation) in
            describeMaintenanceWindowExecutionTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the executions of a maintenance window. This includes information about when the
    ///    maintenance window was scheduled to be active, and information about tasks registered and run
    ///    with the maintenance window.</p>
    func describeMaintenanceWindowExecutions(input: DescribeMaintenanceWindowExecutionsInput) async throws -> DescribeMaintenanceWindowExecutionsOutputResponse
    {
        typealias describeMaintenanceWindowExecutionsContinuation = CheckedContinuation<DescribeMaintenanceWindowExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMaintenanceWindowExecutionsContinuation) in
            describeMaintenanceWindowExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about upcoming executions of a maintenance window.</p>
    func describeMaintenanceWindowSchedule(input: DescribeMaintenanceWindowScheduleInput) async throws -> DescribeMaintenanceWindowScheduleOutputResponse
    {
        typealias describeMaintenanceWindowScheduleContinuation = CheckedContinuation<DescribeMaintenanceWindowScheduleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMaintenanceWindowScheduleContinuation) in
            describeMaintenanceWindowSchedule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the targets registered with the maintenance window.</p>
    func describeMaintenanceWindowTargets(input: DescribeMaintenanceWindowTargetsInput) async throws -> DescribeMaintenanceWindowTargetsOutputResponse
    {
        typealias describeMaintenanceWindowTargetsContinuation = CheckedContinuation<DescribeMaintenanceWindowTargetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMaintenanceWindowTargetsContinuation) in
            describeMaintenanceWindowTargets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the tasks in a maintenance window.</p>
    ///          <note>
    ///             <p>For maintenance window tasks without a specified target, you cannot supply values for
    ///      <code>--max-errors</code> and <code>--max-concurrency</code>. Instead, the system inserts a
    ///     placeholder value of <code>1</code>, which may be reported in the response to this command.
    ///     These values do not affect the running of your task and can be ignored.</p>
    ///          </note>
    func describeMaintenanceWindowTasks(input: DescribeMaintenanceWindowTasksInput) async throws -> DescribeMaintenanceWindowTasksOutputResponse
    {
        typealias describeMaintenanceWindowTasksContinuation = CheckedContinuation<DescribeMaintenanceWindowTasksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMaintenanceWindowTasksContinuation) in
            describeMaintenanceWindowTasks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the maintenance windows in an AWS account.</p>
    func describeMaintenanceWindows(input: DescribeMaintenanceWindowsInput) async throws -> DescribeMaintenanceWindowsOutputResponse
    {
        typealias describeMaintenanceWindowsContinuation = CheckedContinuation<DescribeMaintenanceWindowsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMaintenanceWindowsContinuation) in
            describeMaintenanceWindows(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about the maintenance window targets or tasks that an instance is
    ///    associated with.</p>
    func describeMaintenanceWindowsForTarget(input: DescribeMaintenanceWindowsForTargetInput) async throws -> DescribeMaintenanceWindowsForTargetOutputResponse
    {
        typealias describeMaintenanceWindowsForTargetContinuation = CheckedContinuation<DescribeMaintenanceWindowsForTargetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMaintenanceWindowsForTargetContinuation) in
            describeMaintenanceWindowsForTarget(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Query a set of OpsItems. You must have permission in AWS Identity and Access Management
    ///    (IAM) to query a list of OpsItems. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
    ///     OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    ///          <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate
    ///    operational issues impacting the performance and health of their AWS resources. For more
    ///    information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">AWS Systems Manager OpsCenter</a> in the
    ///     <i>AWS Systems Manager User Guide</i>. </p>
    func describeOpsItems(input: DescribeOpsItemsInput) async throws -> DescribeOpsItemsOutputResponse
    {
        typealias describeOpsItemsContinuation = CheckedContinuation<DescribeOpsItemsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOpsItemsContinuation) in
            describeOpsItems(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Get information about a parameter.</p>
    ///          <note>
    ///             <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code>
    ///     in the request, the response includes information up to the limit specified. The number of items
    ///     returned, however, can be between zero and the value of <code>MaxResults</code>. If the service
    ///     reaches an internal limit while processing the results, it stops the operation and returns the
    ///     matching values up to that point and a <code>NextToken</code>. You can specify the
    ///      <code>NextToken</code> in a subsequent call to get the next set of results.</p>
    ///          </note>
    func describeParameters(input: DescribeParametersInput) async throws -> DescribeParametersOutputResponse
    {
        typealias describeParametersContinuation = CheckedContinuation<DescribeParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeParametersContinuation) in
            describeParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the patch baselines in your AWS account.</p>
    func describePatchBaselines(input: DescribePatchBaselinesInput) async throws -> DescribePatchBaselinesOutputResponse
    {
        typealias describePatchBaselinesContinuation = CheckedContinuation<DescribePatchBaselinesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePatchBaselinesContinuation) in
            describePatchBaselines(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns high-level aggregated patch compliance state for a patch group.</p>
    func describePatchGroupState(input: DescribePatchGroupStateInput) async throws -> DescribePatchGroupStateOutputResponse
    {
        typealias describePatchGroupStateContinuation = CheckedContinuation<DescribePatchGroupStateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePatchGroupStateContinuation) in
            describePatchGroupState(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all patch groups that have been registered with patch baselines.</p>
    func describePatchGroups(input: DescribePatchGroupsInput) async throws -> DescribePatchGroupsOutputResponse
    {
        typealias describePatchGroupsContinuation = CheckedContinuation<DescribePatchGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePatchGroupsContinuation) in
            describePatchGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the properties of available patches organized by product, product family,
    ///    classification, severity, and other properties of available patches. You can use the reported
    ///    properties in the filters you specify in requests for actions such as <a>CreatePatchBaseline</a>, <a>UpdatePatchBaseline</a>, <a>DescribeAvailablePatches</a>, and <a>DescribePatchBaselines</a>.</p>
    ///          <p>The following section lists the properties that can be used in filters for each major
    ///    operating system type:</p>
    ///          <dl>
    ///             <dt>AMAZON_LINUX</dt>
    ///             <dd>
    ///                <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p>
    ///             </dd>
    ///             <dt>AMAZON_LINUX_2</dt>
    ///             <dd>
    ///                <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p>
    ///             </dd>
    ///             <dt>CENTOS</dt>
    ///             <dd>
    ///                <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p>
    ///             </dd>
    ///             <dt>DEBIAN</dt>
    ///             <dd>
    ///                <p>Valid properties: PRODUCT, PRIORITY</p>
    ///             </dd>
    ///             <dt>MACOS</dt>
    ///             <dd>
    ///                <p>Valid properties: PRODUCT, CLASSIFICATION</p>
    ///             </dd>
    ///             <dt>ORACLE_LINUX</dt>
    ///             <dd>
    ///                <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p>
    ///             </dd>
    ///             <dt>REDHAT_ENTERPRISE_LINUX</dt>
    ///             <dd>
    ///                <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p>
    ///             </dd>
    ///             <dt>SUSE</dt>
    ///             <dd>
    ///                <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p>
    ///             </dd>
    ///             <dt>UBUNTU</dt>
    ///             <dd>
    ///                <p>Valid properties: PRODUCT, PRIORITY</p>
    ///             </dd>
    ///             <dt>WINDOWS</dt>
    ///             <dd>
    ///                <p>Valid properties: PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, MSRC_SEVERITY</p>
    ///             </dd>
    ///          </dl>
    func describePatchProperties(input: DescribePatchPropertiesInput) async throws -> DescribePatchPropertiesOutputResponse
    {
        typealias describePatchPropertiesContinuation = CheckedContinuation<DescribePatchPropertiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePatchPropertiesContinuation) in
            describePatchProperties(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a list of all active sessions (both connected and disconnected) or terminated
    ///    sessions from the past 30 days.</p>
    func describeSessions(input: DescribeSessionsInput) async throws -> DescribeSessionsOutputResponse
    {
        typealias describeSessionsContinuation = CheckedContinuation<DescribeSessionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSessionsContinuation) in
            describeSessions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the association between an OpsItem and a related resource. For example, this API
    ///    action can delete an Incident Manager incident from an OpsItem. Incident Manager is a capability
    ///    of AWS Systems Manager.</p>
    func disassociateOpsItemRelatedItem(input: DisassociateOpsItemRelatedItemInput) async throws -> DisassociateOpsItemRelatedItemOutputResponse
    {
        typealias disassociateOpsItemRelatedItemContinuation = CheckedContinuation<DisassociateOpsItemRelatedItemOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateOpsItemRelatedItemContinuation) in
            disassociateOpsItemRelatedItem(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Get detailed information about a particular Automation execution.</p>
    func getAutomationExecution(input: GetAutomationExecutionInput) async throws -> GetAutomationExecutionOutputResponse
    {
        typealias getAutomationExecutionContinuation = CheckedContinuation<GetAutomationExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAutomationExecutionContinuation) in
            getAutomationExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the state of the AWS Systems Manager Change Calendar at an optional, specified time. If you
    ///    specify a time, <code>GetCalendarState</code> returns the state of the calendar at a specific
    ///    time, and returns the next time that the Change Calendar state will transition. If you do not
    ///    specify a time, <code>GetCalendarState</code> assumes the current time. Change Calendar entries
    ///    have two possible states: <code>OPEN</code> or <code>CLOSED</code>.</p>
    ///          <p>If you specify more than one calendar in a request, the command returns the status of
    ///     <code>OPEN</code> only if all calendars in the request are open. If one or more calendars in the
    ///    request are closed, the status returned is <code>CLOSED</code>.</p>
    ///          <p>For more information about Systems Manager Change Calendar, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar.html">AWS Systems Manager Change
    ///     Calendar</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    func getCalendarState(input: GetCalendarStateInput) async throws -> GetCalendarStateOutputResponse
    {
        typealias getCalendarStateContinuation = CheckedContinuation<GetCalendarStateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCalendarStateContinuation) in
            getCalendarState(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns detailed information about command execution for an invocation or plugin.</p>
    ///          <p>
    ///             <code>GetCommandInvocation</code> only gives the execution status of a plugin in a document.
    ///    To get the command execution status on a specific instance, use <a>ListCommandInvocations</a>. To get the command execution status across instances, use
    ///     <a>ListCommands</a>.</p>
    func getCommandInvocation(input: GetCommandInvocationInput) async throws -> GetCommandInvocationOutputResponse
    {
        typealias getCommandInvocationContinuation = CheckedContinuation<GetCommandInvocationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCommandInvocationContinuation) in
            getCommandInvocation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the Session Manager connection status for an instance to determine whether it is running and
    ///    ready to receive Session Manager connections.</p>
    func getConnectionStatus(input: GetConnectionStatusInput) async throws -> GetConnectionStatusOutputResponse
    {
        typealias getConnectionStatusContinuation = CheckedContinuation<GetConnectionStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getConnectionStatusContinuation) in
            getConnectionStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the default patch baseline. Note that Systems Manager supports creating multiple default
    ///    patch baselines. For example, you can create a default patch baseline for each operating
    ///    system.</p>
    ///          <p>If you do not specify an operating system value, the default patch baseline for Windows is
    ///    returned.</p>
    func getDefaultPatchBaseline(input: GetDefaultPatchBaselineInput) async throws -> GetDefaultPatchBaselineOutputResponse
    {
        typealias getDefaultPatchBaselineContinuation = CheckedContinuation<GetDefaultPatchBaselineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDefaultPatchBaselineContinuation) in
            getDefaultPatchBaseline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the current snapshot for the patch baseline the instance uses. This API is
    ///    primarily used by the AWS-RunPatchBaseline Systems Manager document. </p>
    func getDeployablePatchSnapshotForInstance(input: GetDeployablePatchSnapshotForInstanceInput) async throws -> GetDeployablePatchSnapshotForInstanceOutputResponse
    {
        typealias getDeployablePatchSnapshotForInstanceContinuation = CheckedContinuation<GetDeployablePatchSnapshotForInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDeployablePatchSnapshotForInstanceContinuation) in
            getDeployablePatchSnapshotForInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the contents of the specified Systems Manager document.</p>
    func getDocument(input: GetDocumentInput) async throws -> GetDocumentOutputResponse
    {
        typealias getDocumentContinuation = CheckedContinuation<GetDocumentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDocumentContinuation) in
            getDocument(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Query inventory information.</p>
    func getInventory(input: GetInventoryInput) async throws -> GetInventoryOutputResponse
    {
        typealias getInventoryContinuation = CheckedContinuation<GetInventoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInventoryContinuation) in
            getInventory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Return a list of inventory type names for the account, or return a list of attribute names
    ///    for a specific Inventory item type.</p>
    func getInventorySchema(input: GetInventorySchemaInput) async throws -> GetInventorySchemaOutputResponse
    {
        typealias getInventorySchemaContinuation = CheckedContinuation<GetInventorySchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getInventorySchemaContinuation) in
            getInventorySchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a maintenance window.</p>
    func getMaintenanceWindow(input: GetMaintenanceWindowInput) async throws -> GetMaintenanceWindowOutputResponse
    {
        typealias getMaintenanceWindowContinuation = CheckedContinuation<GetMaintenanceWindowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMaintenanceWindowContinuation) in
            getMaintenanceWindow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves details about a specific a maintenance window execution.</p>
    func getMaintenanceWindowExecution(input: GetMaintenanceWindowExecutionInput) async throws -> GetMaintenanceWindowExecutionOutputResponse
    {
        typealias getMaintenanceWindowExecutionContinuation = CheckedContinuation<GetMaintenanceWindowExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMaintenanceWindowExecutionContinuation) in
            getMaintenanceWindowExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the details about a specific task run as part of a maintenance window
    ///    execution.</p>
    func getMaintenanceWindowExecutionTask(input: GetMaintenanceWindowExecutionTaskInput) async throws -> GetMaintenanceWindowExecutionTaskOutputResponse
    {
        typealias getMaintenanceWindowExecutionTaskContinuation = CheckedContinuation<GetMaintenanceWindowExecutionTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMaintenanceWindowExecutionTaskContinuation) in
            getMaintenanceWindowExecutionTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a specific task running on a specific target.</p>
    func getMaintenanceWindowExecutionTaskInvocation(input: GetMaintenanceWindowExecutionTaskInvocationInput) async throws -> GetMaintenanceWindowExecutionTaskInvocationOutputResponse
    {
        typealias getMaintenanceWindowExecutionTaskInvocationContinuation = CheckedContinuation<GetMaintenanceWindowExecutionTaskInvocationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMaintenanceWindowExecutionTaskInvocationContinuation) in
            getMaintenanceWindowExecutionTaskInvocation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the tasks in a maintenance window.</p>
    ///          <note>
    ///             <p>For maintenance window tasks without a specified target, you cannot supply values for
    ///      <code>--max-errors</code> and <code>--max-concurrency</code>. Instead, the system inserts a
    ///     placeholder value of <code>1</code>, which may be reported in the response to this command.
    ///     These values do not affect the running of your task and can be ignored.</p>
    ///          </note>
    func getMaintenanceWindowTask(input: GetMaintenanceWindowTaskInput) async throws -> GetMaintenanceWindowTaskOutputResponse
    {
        typealias getMaintenanceWindowTaskContinuation = CheckedContinuation<GetMaintenanceWindowTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMaintenanceWindowTaskContinuation) in
            getMaintenanceWindowTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Get information about an OpsItem by using the ID. You must have permission in AWS Identity
    ///    and Access Management (IAM) to view information about an OpsItem. For more information, see
    ///     <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
    ///     OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    ///          <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate
    ///    operational issues impacting the performance and health of their AWS resources. For more
    ///    information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">AWS Systems Manager OpsCenter</a> in the
    ///     <i>AWS Systems Manager User Guide</i>. </p>
    func getOpsItem(input: GetOpsItemInput) async throws -> GetOpsItemOutputResponse
    {
        typealias getOpsItemContinuation = CheckedContinuation<GetOpsItemOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getOpsItemContinuation) in
            getOpsItem(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>View operational metadata related to an application in Application Manager.</p>
    func getOpsMetadata(input: GetOpsMetadataInput) async throws -> GetOpsMetadataOutputResponse
    {
        typealias getOpsMetadataContinuation = CheckedContinuation<GetOpsMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getOpsMetadataContinuation) in
            getOpsMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>View a summary of OpsItems based on specified filters and aggregators.</p>
    func getOpsSummary(input: GetOpsSummaryInput) async throws -> GetOpsSummaryOutputResponse
    {
        typealias getOpsSummaryContinuation = CheckedContinuation<GetOpsSummaryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getOpsSummaryContinuation) in
            getOpsSummary(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Get information about a parameter by using the parameter name. Don't confuse this API action
    ///    with the <a>GetParameters</a> API action.</p>
    func getParameter(input: GetParameterInput) async throws -> GetParameterOutputResponse
    {
        typealias getParameterContinuation = CheckedContinuation<GetParameterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getParameterContinuation) in
            getParameter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the history of all changes to a parameter.</p>
    func getParameterHistory(input: GetParameterHistoryInput) async throws -> GetParameterHistoryOutputResponse
    {
        typealias getParameterHistoryContinuation = CheckedContinuation<GetParameterHistoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getParameterHistoryContinuation) in
            getParameterHistory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Get details of a parameter. Don't confuse this API action with the <a>GetParameter</a> API action.</p>
    func getParameters(input: GetParametersInput) async throws -> GetParametersOutputResponse
    {
        typealias getParametersContinuation = CheckedContinuation<GetParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getParametersContinuation) in
            getParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieve information about one or more parameters in a specific hierarchy. </p>
    ///          <note>
    ///             <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code>
    ///     in the request, the response includes information up to the limit specified. The number of items
    ///     returned, however, can be between zero and the value of <code>MaxResults</code>. If the service
    ///     reaches an internal limit while processing the results, it stops the operation and returns the
    ///     matching values up to that point and a <code>NextToken</code>. You can specify the
    ///      <code>NextToken</code> in a subsequent call to get the next set of results.</p>
    ///          </note>
    func getParametersByPath(input: GetParametersByPathInput) async throws -> GetParametersByPathOutputResponse
    {
        typealias getParametersByPathContinuation = CheckedContinuation<GetParametersByPathOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getParametersByPathContinuation) in
            getParametersByPath(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves information about a patch baseline.</p>
    func getPatchBaseline(input: GetPatchBaselineInput) async throws -> GetPatchBaselineOutputResponse
    {
        typealias getPatchBaselineContinuation = CheckedContinuation<GetPatchBaselineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPatchBaselineContinuation) in
            getPatchBaseline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the patch baseline that should be used for the specified patch group.</p>
    func getPatchBaselineForPatchGroup(input: GetPatchBaselineForPatchGroupInput) async throws -> GetPatchBaselineForPatchGroupOutputResponse
    {
        typealias getPatchBaselineForPatchGroupContinuation = CheckedContinuation<GetPatchBaselineForPatchGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPatchBaselineForPatchGroupContinuation) in
            getPatchBaselineForPatchGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///             <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting
    ///    defines how a user interacts with or uses a service or a feature of a service. For example, if an
    ///    AWS service charges money to the account based on feature or service usage, then the AWS service
    ///    team might create a default setting of "false". This means the user can't use this feature unless
    ///    they change the setting to "true" and intentionally opt in for a paid feature.</p>
    ///          <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define
    ///    the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
    ///    but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
    ///    permission for the setting. Use the <a>UpdateServiceSetting</a> API action to change
    ///    the default setting. Or use the <a>ResetServiceSetting</a> to change the value back to
    ///    the original value defined by the AWS service team.</p>
    ///          <p>Query the current service setting for the account. </p>
    func getServiceSetting(input: GetServiceSettingInput) async throws -> GetServiceSettingOutputResponse
    {
        typealias getServiceSettingContinuation = CheckedContinuation<GetServiceSettingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getServiceSettingContinuation) in
            getServiceSetting(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>A parameter label is a user-defined alias to help you manage different versions of a
    ///    parameter. When you modify a parameter, Systems Manager automatically saves a new version and increments
    ///    the version number by one. A label can help you remember the purpose of a parameter when there
    ///    are multiple versions. </p>
    ///          <p>Parameter labels have the following requirements and restrictions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>A version of a parameter can have a maximum of 10 labels.</p>
    ///             </li>
    ///             <li>
    ///                <p>You can't attach the same label to different versions of the same parameter. For example,
    ///      if version 1 has the label Production, then you can't attach Production to version 2.</p>
    ///             </li>
    ///             <li>
    ///                <p>You can move a label from one version of a parameter to another.</p>
    ///             </li>
    ///             <li>
    ///                <p>You can't create a label when you create a new parameter. You must attach a label to a
    ///      specific version of a parameter.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you no longer want to use a parameter label, then you can either delete it or move it
    ///      to a different version of a parameter.</p>
    ///             </li>
    ///             <li>
    ///                <p>A label can have a maximum of 100 characters.</p>
    ///             </li>
    ///             <li>
    ///                <p>Labels can contain letters (case sensitive), numbers, periods (.), hyphens (-), or
    ///      underscores (_).</p>
    ///             </li>
    ///             <li>
    ///                <p>Labels can't begin with a number, "aws," or "ssm" (not case sensitive). If a label fails
    ///      to meet these requirements, then the label is not associated with a parameter and the system
    ///      displays it in the list of InvalidLabels.</p>
    ///             </li>
    ///          </ul>
    func labelParameterVersion(input: LabelParameterVersionInput) async throws -> LabelParameterVersionOutputResponse
    {
        typealias labelParameterVersionContinuation = CheckedContinuation<LabelParameterVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: labelParameterVersionContinuation) in
            labelParameterVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves all versions of an association for a specific association ID.</p>
    func listAssociationVersions(input: ListAssociationVersionsInput) async throws -> ListAssociationVersionsOutputResponse
    {
        typealias listAssociationVersionsContinuation = CheckedContinuation<ListAssociationVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssociationVersionsContinuation) in
            listAssociationVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns all State Manager associations in the current AWS account and Region. You can limit
    ///    the results to a specific State Manager association document or instance by specifying a
    ///    filter.</p>
    func listAssociations(input: ListAssociationsInput) async throws -> ListAssociationsOutputResponse
    {
        typealias listAssociationsContinuation = CheckedContinuation<ListAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAssociationsContinuation) in
            listAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>An invocation is copy of a command sent to a specific instance. A command can apply to one
    ///    or more instances. A command invocation applies to one instance. For example, if a user runs
    ///    SendCommand against three instances, then a command invocation is created for each requested
    ///    instance ID. ListCommandInvocations provide status about command execution.</p>
    func listCommandInvocations(input: ListCommandInvocationsInput) async throws -> ListCommandInvocationsOutputResponse
    {
        typealias listCommandInvocationsContinuation = CheckedContinuation<ListCommandInvocationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCommandInvocationsContinuation) in
            listCommandInvocations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the commands requested by users of the AWS account.</p>
    func listCommands(input: ListCommandsInput) async throws -> ListCommandsOutputResponse
    {
        typealias listCommandsContinuation = CheckedContinuation<ListCommandsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCommandsContinuation) in
            listCommands(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>For a specified resource ID, this API action returns a list of compliance statuses for
    ///    different resource types. Currently, you can only specify one resource ID per call. List results
    ///    depend on the criteria specified in the filter.</p>
    func listComplianceItems(input: ListComplianceItemsInput) async throws -> ListComplianceItemsOutputResponse
    {
        typealias listComplianceItemsContinuation = CheckedContinuation<ListComplianceItemsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listComplianceItemsContinuation) in
            listComplianceItems(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a summary count of compliant and non-compliant resources for a compliance type. For
    ///    example, this call can return State Manager associations, patches, or custom compliance types
    ///    according to the filter criteria that you specify.</p>
    func listComplianceSummaries(input: ListComplianceSummariesInput) async throws -> ListComplianceSummariesOutputResponse
    {
        typealias listComplianceSummariesContinuation = CheckedContinuation<ListComplianceSummariesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listComplianceSummariesContinuation) in
            listComplianceSummaries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Information about approval reviews for a version of an SSM document.</p>
    func listDocumentMetadataHistory(input: ListDocumentMetadataHistoryInput) async throws -> ListDocumentMetadataHistoryOutputResponse
    {
        typealias listDocumentMetadataHistoryContinuation = CheckedContinuation<ListDocumentMetadataHistoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDocumentMetadataHistoryContinuation) in
            listDocumentMetadataHistory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>List all versions for a document.</p>
    func listDocumentVersions(input: ListDocumentVersionsInput) async throws -> ListDocumentVersionsOutputResponse
    {
        typealias listDocumentVersionsContinuation = CheckedContinuation<ListDocumentVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDocumentVersionsContinuation) in
            listDocumentVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns all Systems Manager (SSM) documents in the current AWS account and Region. You can limit the
    ///    results of this request by using a filter.</p>
    func listDocuments(input: ListDocumentsInput) async throws -> ListDocumentsOutputResponse
    {
        typealias listDocumentsContinuation = CheckedContinuation<ListDocumentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDocumentsContinuation) in
            listDocuments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>A list of inventory items returned by the request.</p>
    func listInventoryEntries(input: ListInventoryEntriesInput) async throws -> ListInventoryEntriesOutputResponse
    {
        typealias listInventoryEntriesContinuation = CheckedContinuation<ListInventoryEntriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInventoryEntriesContinuation) in
            listInventoryEntries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of all OpsItem events in the current AWS account and Region. You can limit
    ///    the results to events associated with specific OpsItems by specifying a filter.</p>
    func listOpsItemEvents(input: ListOpsItemEventsInput) async throws -> ListOpsItemEventsOutputResponse
    {
        typealias listOpsItemEventsContinuation = CheckedContinuation<ListOpsItemEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOpsItemEventsContinuation) in
            listOpsItemEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all related-item resources associated with an OpsItem.</p>
    func listOpsItemRelatedItems(input: ListOpsItemRelatedItemsInput) async throws -> ListOpsItemRelatedItemsOutputResponse
    {
        typealias listOpsItemRelatedItemsContinuation = CheckedContinuation<ListOpsItemRelatedItemsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOpsItemRelatedItemsContinuation) in
            listOpsItemRelatedItems(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Systems Manager calls this API action when displaying all Application Manager OpsMetadata objects or
    ///    blobs.</p>
    func listOpsMetadata(input: ListOpsMetadataInput) async throws -> ListOpsMetadataOutputResponse
    {
        typealias listOpsMetadataContinuation = CheckedContinuation<ListOpsMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOpsMetadataContinuation) in
            listOpsMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a resource-level summary count. The summary includes information about compliant and
    ///    non-compliant statuses and detailed compliance-item severity counts, according to the filter
    ///    criteria you specify.</p>
    func listResourceComplianceSummaries(input: ListResourceComplianceSummariesInput) async throws -> ListResourceComplianceSummariesOutputResponse
    {
        typealias listResourceComplianceSummariesContinuation = CheckedContinuation<ListResourceComplianceSummariesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourceComplianceSummariesContinuation) in
            listResourceComplianceSummaries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists your resource data sync configurations. Includes information about the last time a
    ///    sync attempted to start, the last sync status, and the last time a sync successfully
    ///    completed.</p>
    ///          <p>The number of sync configurations might be too large to return using a single call to
    ///     <code>ListResourceDataSync</code>. You can limit the number of sync configurations returned by
    ///    using the <code>MaxResults</code> parameter. To determine whether there are more sync
    ///    configurations to list, check the value of <code>NextToken</code> in the output. If there are
    ///    more sync configurations to list, you can request them by specifying the <code>NextToken</code>
    ///    returned in the call to the parameter of a subsequent call. </p>
    func listResourceDataSync(input: ListResourceDataSyncInput) async throws -> ListResourceDataSyncOutputResponse
    {
        typealias listResourceDataSyncContinuation = CheckedContinuation<ListResourceDataSyncOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourceDataSyncContinuation) in
            listResourceDataSync(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of the tags assigned to the specified resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Shares a Systems Manager document publicly or privately. If you share a document privately, you must
    ///    specify the AWS user account IDs for those people who can use the document. If you share a
    ///    document publicly, you must specify <i>All</i> as the account ID.</p>
    func modifyDocumentPermission(input: ModifyDocumentPermissionInput) async throws -> ModifyDocumentPermissionOutputResponse
    {
        typealias modifyDocumentPermissionContinuation = CheckedContinuation<ModifyDocumentPermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: modifyDocumentPermissionContinuation) in
            modifyDocumentPermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Registers a compliance type and other compliance details on a designated resource. This
    ///    action lets you register custom compliance details with a resource. This call overwrites existing
    ///    compliance information on the resource, so you must provide a full list of compliance items each
    ///    time that you send the request.</p>
    ///          <p>ComplianceType can be one of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>ExecutionId: The execution ID when the patch, association, or custom compliance item was
    ///      applied.</p>
    ///             </li>
    ///             <li>
    ///                <p>ExecutionType: Specify patch, association, or Custom:<code>string</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>ExecutionTime. The time the patch, association, or custom compliance item was applied to
    ///      the instance.</p>
    ///             </li>
    ///             <li>
    ///                <p>Id: The patch, association, or custom compliance ID.</p>
    ///             </li>
    ///             <li>
    ///                <p>Title: A title.</p>
    ///             </li>
    ///             <li>
    ///                <p>Status: The status of the compliance item. For example, <code>approved</code> for patches,
    ///      or <code>Failed</code> for associations.</p>
    ///             </li>
    ///             <li>
    ///                <p>Severity: A patch severity. For example, <code>critical</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>DocumentName: A SSM document name. For example, AWS-RunPatchBaseline.</p>
    ///             </li>
    ///             <li>
    ///                <p>DocumentVersion: An SSM document version number. For example, 4.</p>
    ///             </li>
    ///             <li>
    ///                <p>Classification: A patch classification. For example, <code>security updates</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>PatchBaselineId: A patch baseline ID.</p>
    ///             </li>
    ///             <li>
    ///                <p>PatchSeverity: A patch severity. For example, <code>Critical</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>PatchState: A patch state. For example, <code>InstancesWithFailedPatches</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>PatchGroup: The name of a patch group.</p>
    ///             </li>
    ///             <li>
    ///                <p>InstalledTime: The time the association, patch, or custom compliance item was applied to
    ///      the resource. Specify the time by using the following format: yyyy-MM-dd'T'HH:mm:ss'Z'</p>
    ///             </li>
    ///          </ul>
    func putComplianceItems(input: PutComplianceItemsInput) async throws -> PutComplianceItemsOutputResponse
    {
        typealias putComplianceItemsContinuation = CheckedContinuation<PutComplianceItemsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putComplianceItemsContinuation) in
            putComplianceItems(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Bulk update custom inventory items on one more instance. The request adds an inventory item,
    ///    if it doesn't already exist, or updates an inventory item, if it does exist.</p>
    func putInventory(input: PutInventoryInput) async throws -> PutInventoryOutputResponse
    {
        typealias putInventoryContinuation = CheckedContinuation<PutInventoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putInventoryContinuation) in
            putInventory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Add a parameter to the system.</p>
    func putParameter(input: PutParameterInput) async throws -> PutParameterOutputResponse
    {
        typealias putParameterContinuation = CheckedContinuation<PutParameterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putParameterContinuation) in
            putParameter(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Defines the default patch baseline for the relevant operating system.</p>
    ///          <p>To reset the AWS predefined patch baseline as the default, specify the full patch baseline
    ///    ARN as the baseline ID value. For example, for CentOS, specify
    ///     <code>arn:aws:ssm:us-east-2:733109147000:patchbaseline/pb-0574b43a65ea646ed</code> instead of
    ///     <code>pb-0574b43a65ea646ed</code>.</p>
    func registerDefaultPatchBaseline(input: RegisterDefaultPatchBaselineInput) async throws -> RegisterDefaultPatchBaselineOutputResponse
    {
        typealias registerDefaultPatchBaselineContinuation = CheckedContinuation<RegisterDefaultPatchBaselineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerDefaultPatchBaselineContinuation) in
            registerDefaultPatchBaseline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Registers a patch baseline for a patch group.</p>
    func registerPatchBaselineForPatchGroup(input: RegisterPatchBaselineForPatchGroupInput) async throws -> RegisterPatchBaselineForPatchGroupOutputResponse
    {
        typealias registerPatchBaselineForPatchGroupContinuation = CheckedContinuation<RegisterPatchBaselineForPatchGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerPatchBaselineForPatchGroupContinuation) in
            registerPatchBaselineForPatchGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Registers a target with a maintenance window.</p>
    func registerTargetWithMaintenanceWindow(input: RegisterTargetWithMaintenanceWindowInput) async throws -> RegisterTargetWithMaintenanceWindowOutputResponse
    {
        typealias registerTargetWithMaintenanceWindowContinuation = CheckedContinuation<RegisterTargetWithMaintenanceWindowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerTargetWithMaintenanceWindowContinuation) in
            registerTargetWithMaintenanceWindow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds a new task to a maintenance window.</p>
    func registerTaskWithMaintenanceWindow(input: RegisterTaskWithMaintenanceWindowInput) async throws -> RegisterTaskWithMaintenanceWindowOutputResponse
    {
        typealias registerTaskWithMaintenanceWindowContinuation = CheckedContinuation<RegisterTaskWithMaintenanceWindowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerTaskWithMaintenanceWindowContinuation) in
            registerTaskWithMaintenanceWindow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes tag keys from the specified resource.</p>
    func removeTagsFromResource(input: RemoveTagsFromResourceInput) async throws -> RemoveTagsFromResourceOutputResponse
    {
        typealias removeTagsFromResourceContinuation = CheckedContinuation<RemoveTagsFromResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeTagsFromResourceContinuation) in
            removeTagsFromResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///             <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting
    ///    defines how a user interacts with or uses a service or a feature of a service. For example, if an
    ///    AWS service charges money to the account based on feature or service usage, then the AWS service
    ///    team might create a default setting of "false". This means the user can't use this feature unless
    ///    they change the setting to "true" and intentionally opt in for a paid feature.</p>
    ///          <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define
    ///    the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
    ///    but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
    ///    permission for the setting. Use the <a>GetServiceSetting</a> API action to view the
    ///    current value. Use the <a>UpdateServiceSetting</a> API action to change the default
    ///    setting. </p>
    ///          <p>Reset the service setting for the account to the default value as provisioned by the AWS
    ///    service team. </p>
    func resetServiceSetting(input: ResetServiceSettingInput) async throws -> ResetServiceSettingOutputResponse
    {
        typealias resetServiceSettingContinuation = CheckedContinuation<ResetServiceSettingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetServiceSettingContinuation) in
            resetServiceSetting(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Reconnects a session to an instance after it has been disconnected. Connections can be
    ///    resumed for disconnected sessions, but not terminated sessions.</p>
    ///          <note>
    ///             <p>This command is primarily for use by client machines to automatically reconnect during
    ///     intermittent network issues. It is not intended for any other use.</p>
    ///          </note>
    func resumeSession(input: ResumeSessionInput) async throws -> ResumeSessionOutputResponse
    {
        typealias resumeSessionContinuation = CheckedContinuation<ResumeSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resumeSessionContinuation) in
            resumeSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Sends a signal to an Automation execution to change the current behavior or status of the
    ///    execution. </p>
    func sendAutomationSignal(input: SendAutomationSignalInput) async throws -> SendAutomationSignalOutputResponse
    {
        typealias sendAutomationSignalContinuation = CheckedContinuation<SendAutomationSignalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendAutomationSignalContinuation) in
            sendAutomationSignal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Runs commands on one or more managed instances.</p>
    func sendCommand(input: SendCommandInput) async throws -> SendCommandOutputResponse
    {
        typealias sendCommandContinuation = CheckedContinuation<SendCommandOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendCommandContinuation) in
            sendCommand(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Use this API action to run an association immediately and only one time. This action can be
    ///    helpful when troubleshooting associations.</p>
    func startAssociationsOnce(input: StartAssociationsOnceInput) async throws -> StartAssociationsOnceOutputResponse
    {
        typealias startAssociationsOnceContinuation = CheckedContinuation<StartAssociationsOnceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startAssociationsOnceContinuation) in
            startAssociationsOnce(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Initiates execution of an Automation document.</p>
    func startAutomationExecution(input: StartAutomationExecutionInput) async throws -> StartAutomationExecutionOutputResponse
    {
        typealias startAutomationExecutionContinuation = CheckedContinuation<StartAutomationExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startAutomationExecutionContinuation) in
            startAutomationExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a change request for Change Manager. The runbooks (Automation documents) specified in the
    ///    change request run only after all required approvals for the change request have been
    ///    received.</p>
    func startChangeRequestExecution(input: StartChangeRequestExecutionInput) async throws -> StartChangeRequestExecutionOutputResponse
    {
        typealias startChangeRequestExecutionContinuation = CheckedContinuation<StartChangeRequestExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startChangeRequestExecutionContinuation) in
            startChangeRequestExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Initiates a connection to a target (for example, an instance) for a Session Manager session. Returns a
    ///    URL and token that can be used to open a WebSocket connection for sending input and receiving
    ///    outputs.</p>
    ///          <note>
    ///             <p>AWS CLI usage: <code>start-session</code> is an interactive command that requires the Session Manager
    ///     plugin to be installed on the client machine making the call. For information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html">Install
    ///      the Session Manager plugin for the AWS CLI</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    ///             <p>AWS Tools for PowerShell usage: Start-SSMSession is not currently supported by AWS Tools
    ///     for PowerShell on Windows local machines.</p>
    ///          </note>
    func startSession(input: StartSessionInput) async throws -> StartSessionOutputResponse
    {
        typealias startSessionContinuation = CheckedContinuation<StartSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startSessionContinuation) in
            startSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Stop an Automation that is currently running.</p>
    func stopAutomationExecution(input: StopAutomationExecutionInput) async throws -> StopAutomationExecutionOutputResponse
    {
        typealias stopAutomationExecutionContinuation = CheckedContinuation<StopAutomationExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopAutomationExecutionContinuation) in
            stopAutomationExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Permanently ends a session and closes the data connection between the Session Manager client and
    ///    SSM Agent on the instance. A terminated session cannot be resumed.</p>
    func terminateSession(input: TerminateSessionInput) async throws -> TerminateSessionOutputResponse
    {
        typealias terminateSessionContinuation = CheckedContinuation<TerminateSessionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: terminateSessionContinuation) in
            terminateSession(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Remove a label or labels from a parameter.</p>
    func unlabelParameterVersion(input: UnlabelParameterVersionInput) async throws -> UnlabelParameterVersionOutputResponse
    {
        typealias unlabelParameterVersionContinuation = CheckedContinuation<UnlabelParameterVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: unlabelParameterVersionContinuation) in
            unlabelParameterVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an association. You can update the association name and version, the document
    ///    version, schedule, parameters, and Amazon S3 output. </p>
    ///          <p>In order to call this API action, your IAM user account, group, or role must be configured
    ///    with permission to call the <a>DescribeAssociation</a> API action. If you don't have
    ///    permission to call DescribeAssociation, then you receive the following error: <code>An error
    ///     occurred (AccessDeniedException) when calling the UpdateAssociation operation: User:
    ///     <user_arn> is not authorized to perform: ssm:DescribeAssociation on resource:
    ///     <resource_arn></code>
    ///          </p>
    ///          <important>
    ///             <p>When you update an association, the association immediately runs against the specified
    ///     targets.</p>
    ///          </important>
    func updateAssociation(input: UpdateAssociationInput) async throws -> UpdateAssociationOutputResponse
    {
        typealias updateAssociationContinuation = CheckedContinuation<UpdateAssociationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssociationContinuation) in
            updateAssociation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the status of the Systems Manager document associated with the specified instance.</p>
    func updateAssociationStatus(input: UpdateAssociationStatusInput) async throws -> UpdateAssociationStatusOutputResponse
    {
        typealias updateAssociationStatusContinuation = CheckedContinuation<UpdateAssociationStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAssociationStatusContinuation) in
            updateAssociationStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates one or more values for an SSM document.</p>
    func updateDocument(input: UpdateDocumentInput) async throws -> UpdateDocumentOutputResponse
    {
        typealias updateDocumentContinuation = CheckedContinuation<UpdateDocumentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDocumentContinuation) in
            updateDocument(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Set the default version of a document. </p>
    func updateDocumentDefaultVersion(input: UpdateDocumentDefaultVersionInput) async throws -> UpdateDocumentDefaultVersionOutputResponse
    {
        typealias updateDocumentDefaultVersionContinuation = CheckedContinuation<UpdateDocumentDefaultVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDocumentDefaultVersionContinuation) in
            updateDocumentDefaultVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates information related to approval reviews for a specific version of a document.</p>
    func updateDocumentMetadata(input: UpdateDocumentMetadataInput) async throws -> UpdateDocumentMetadataOutputResponse
    {
        typealias updateDocumentMetadataContinuation = CheckedContinuation<UpdateDocumentMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDocumentMetadataContinuation) in
            updateDocumentMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing maintenance window. Only specified parameters are modified.</p>
    ///          <note>
    ///             <p>The value you specify for <code>Duration</code> determines the specific end time for the
    ///     maintenance window based on the time it begins. No maintenance window tasks are permitted to
    ///     start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>.
    ///     For example, if the maintenance window starts at 3 PM, the duration is three hours, and the
    ///     value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start
    ///     after 5 PM.</p>
    ///          </note>
    func updateMaintenanceWindow(input: UpdateMaintenanceWindowInput) async throws -> UpdateMaintenanceWindowOutputResponse
    {
        typealias updateMaintenanceWindowContinuation = CheckedContinuation<UpdateMaintenanceWindowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMaintenanceWindowContinuation) in
            updateMaintenanceWindow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies the target of an existing maintenance window. You
    ///    can change the following:</p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>Name</p>
    ///             </li>
    ///             <li>
    ///                <p>Description</p>
    ///             </li>
    ///             <li>
    ///                <p>Owner</p>
    ///             </li>
    ///             <li>
    ///                <p>IDs for an ID target</p>
    ///             </li>
    ///             <li>
    ///                <p>Tags for a Tag target</p>
    ///             </li>
    ///             <li>
    ///                <p>From any supported tag type to another. The three supported tag types are ID target, Tag
    ///      target, and resource group. For more information, see <a>Target</a>.</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>If a parameter is null, then the corresponding field is not modified.</p>
    ///          </note>
    func updateMaintenanceWindowTarget(input: UpdateMaintenanceWindowTargetInput) async throws -> UpdateMaintenanceWindowTargetOutputResponse
    {
        typealias updateMaintenanceWindowTargetContinuation = CheckedContinuation<UpdateMaintenanceWindowTargetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMaintenanceWindowTargetContinuation) in
            updateMaintenanceWindowTarget(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies a task assigned to a maintenance window. You can't change the task type, but you
    ///    can change the following values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>TaskARN. For example, you can change a RUN_COMMAND task from AWS-RunPowerShellScript to
    ///      AWS-RunShellScript.</p>
    ///             </li>
    ///             <li>
    ///                <p>ServiceRoleArn</p>
    ///             </li>
    ///             <li>
    ///                <p>TaskInvocationParameters</p>
    ///             </li>
    ///             <li>
    ///                <p>Priority</p>
    ///             </li>
    ///             <li>
    ///                <p>MaxConcurrency</p>
    ///             </li>
    ///             <li>
    ///                <p>MaxErrors</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>One or more targets must be specified for maintenance window Run Command-type tasks.
    ///     Depending on the task, targets are optional for other maintenance window task types (Automation,
    ///     AWS Lambda, and AWS Step Functions). For more information about running tasks that do not
    ///     specify targets, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">Registering
    ///      maintenance window tasks without targets</a> in the
    ///     <i>AWS Systems Manager User Guide</i>.</p>
    ///          </note>
    ///          <p>If the value for a parameter in <code>UpdateMaintenanceWindowTask</code> is null, then the
    ///    corresponding field is not modified. If you set <code>Replace</code> to true, then all fields
    ///    required by the <a>RegisterTaskWithMaintenanceWindow</a> action are required for this
    ///    request. Optional fields that aren't specified are set to null.</p>
    ///          <important>
    ///             <p>When you update a maintenance window task that has options specified in
    ///      <code>TaskInvocationParameters</code>, you must provide again all the
    ///      <code>TaskInvocationParameters</code> values that you want to retain. The values you do not
    ///     specify again are removed. For example, suppose that when you registered a Run Command task, you
    ///     specified <code>TaskInvocationParameters</code> values for <code>Comment</code>,
    ///      <code>NotificationConfig</code>, and <code>OutputS3BucketName</code>. If you update the
    ///     maintenance window task and specify only a different <code>OutputS3BucketName</code> value, the
    ///     values for <code>Comment</code> and <code>NotificationConfig</code> are removed.</p>
    ///          </important>
    func updateMaintenanceWindowTask(input: UpdateMaintenanceWindowTaskInput) async throws -> UpdateMaintenanceWindowTaskOutputResponse
    {
        typealias updateMaintenanceWindowTaskContinuation = CheckedContinuation<UpdateMaintenanceWindowTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMaintenanceWindowTaskContinuation) in
            updateMaintenanceWindowTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Changes the Amazon Identity and Access Management (IAM) role that is assigned to the
    ///    on-premises instance or virtual machines (VM). IAM roles are first assigned to these hybrid
    ///    instances during the activation process. For more information, see <a>CreateActivation</a>.</p>
    func updateManagedInstanceRole(input: UpdateManagedInstanceRoleInput) async throws -> UpdateManagedInstanceRoleOutputResponse
    {
        typealias updateManagedInstanceRoleContinuation = CheckedContinuation<UpdateManagedInstanceRoleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateManagedInstanceRoleContinuation) in
            updateManagedInstanceRole(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Edit or change an OpsItem. You must have permission in AWS Identity and Access Management
    ///    (IAM) to update an OpsItem. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
    ///     OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    ///          <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate
    ///    operational issues impacting the performance and health of their AWS resources. For more
    ///    information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">AWS Systems Manager OpsCenter</a> in the
    ///     <i>AWS Systems Manager User Guide</i>. </p>
    func updateOpsItem(input: UpdateOpsItemInput) async throws -> UpdateOpsItemOutputResponse
    {
        typealias updateOpsItemContinuation = CheckedContinuation<UpdateOpsItemOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateOpsItemContinuation) in
            updateOpsItem(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Systems Manager calls this API action when you edit OpsMetadata in Application Manager.</p>
    func updateOpsMetadata(input: UpdateOpsMetadataInput) async throws -> UpdateOpsMetadataOutputResponse
    {
        typealias updateOpsMetadataContinuation = CheckedContinuation<UpdateOpsMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateOpsMetadataContinuation) in
            updateOpsMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Modifies an existing patch baseline. Fields not specified in the request are left
    ///    unchanged.</p>
    ///          <note>
    ///             <p>For information about valid key and value pairs in <code>PatchFilters</code> for each
    ///     supported operating system type, see <a href="http://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html">PatchFilter</a>.</p>
    ///          </note>
    func updatePatchBaseline(input: UpdatePatchBaselineInput) async throws -> UpdatePatchBaselineOutputResponse
    {
        typealias updatePatchBaselineContinuation = CheckedContinuation<UpdatePatchBaselineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePatchBaselineContinuation) in
            updatePatchBaseline(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Update a resource data sync. After you create a resource data sync for a Region, you can't
    ///    change the account options for that sync. For example, if you create a sync in the us-east-2
    ///    (Ohio) Region and you choose the Include only the current account option, you can't edit that
    ///    sync later and choose the Include all accounts from my AWS Organizations configuration option. Instead,
    ///    you must delete the first resource data sync, and create a new one.</p>
    ///          <note>
    ///             <p>This API action only supports a resource data sync that was created with a SyncFromSource
    ///      <code>SyncType</code>.</p>
    ///          </note>
    func updateResourceDataSync(input: UpdateResourceDataSyncInput) async throws -> UpdateResourceDataSyncOutputResponse
    {
        typealias updateResourceDataSyncContinuation = CheckedContinuation<UpdateResourceDataSyncOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateResourceDataSyncContinuation) in
            updateResourceDataSync(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///             <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting
    ///    defines how a user interacts with or uses a service or a feature of a service. For example, if an
    ///    AWS service charges money to the account based on feature or service usage, then the AWS service
    ///    team might create a default setting of "false". This means the user can't use this feature unless
    ///    they change the setting to "true" and intentionally opt in for a paid feature.</p>
    ///          <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define
    ///    the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
    ///    but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
    ///    permission for the setting. Use the <a>GetServiceSetting</a> API action to view the
    ///    current value. Or, use the <a>ResetServiceSetting</a> to change the value back to the
    ///    original value defined by the AWS service team.</p>
    ///          <p>Update the service setting for the account. </p>
    func updateServiceSetting(input: UpdateServiceSettingInput) async throws -> UpdateServiceSettingOutputResponse
    {
        typealias updateServiceSettingContinuation = CheckedContinuation<UpdateServiceSettingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateServiceSettingContinuation) in
            updateServiceSetting(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
