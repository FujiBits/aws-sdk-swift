// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAssociationVersionsOutputResponseBody: Equatable {
    public let associationVersions: [AssociationVersionInfo]?
    public let nextToken: String?
}

extension ListAssociationVersionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case associationVersions = "AssociationVersions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationVersionsContainer = try containerValues.decodeIfPresent([AssociationVersionInfo?].self, forKey: .associationVersions)
        var associationVersionsDecoded0:[AssociationVersionInfo]? = nil
        if let associationVersionsContainer = associationVersionsContainer {
            associationVersionsDecoded0 = [AssociationVersionInfo]()
            for structure0 in associationVersionsContainer {
                if let structure0 = structure0 {
                    associationVersionsDecoded0?.append(structure0)
                }
            }
        }
        associationVersions = associationVersionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
