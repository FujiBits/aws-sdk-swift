// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PatchGroupPatchBaselineMapping: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case baselineIdentity = "BaselineIdentity"
        case patchGroup = "PatchGroup"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baselineIdentity = baselineIdentity {
            try encodeContainer.encode(baselineIdentity, forKey: .baselineIdentity)
        }
        if let patchGroup = patchGroup {
            try encodeContainer.encode(patchGroup, forKey: .patchGroup)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let patchGroupDecoded = try containerValues.decodeIfPresent(String.self, forKey: .patchGroup)
        patchGroup = patchGroupDecoded
        let baselineIdentityDecoded = try containerValues.decodeIfPresent(PatchBaselineIdentity.self, forKey: .baselineIdentity)
        baselineIdentity = baselineIdentityDecoded
    }
}
