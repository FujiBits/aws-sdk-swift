// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CommandInvocation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cloudWatchOutputConfig = "CloudWatchOutputConfig"
        case commandId = "CommandId"
        case commandPlugins = "CommandPlugins"
        case comment = "Comment"
        case documentName = "DocumentName"
        case documentVersion = "DocumentVersion"
        case instanceId = "InstanceId"
        case instanceName = "InstanceName"
        case notificationConfig = "NotificationConfig"
        case requestedDateTime = "RequestedDateTime"
        case serviceRole = "ServiceRole"
        case standardErrorUrl = "StandardErrorUrl"
        case standardOutputUrl = "StandardOutputUrl"
        case status = "Status"
        case statusDetails = "StatusDetails"
        case traceOutput = "TraceOutput"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchOutputConfig = cloudWatchOutputConfig {
            try encodeContainer.encode(cloudWatchOutputConfig, forKey: .cloudWatchOutputConfig)
        }
        if let commandId = commandId {
            try encodeContainer.encode(commandId, forKey: .commandId)
        }
        if let commandPlugins = commandPlugins {
            var commandPluginsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .commandPlugins)
            for commandpluginlist0 in commandPlugins {
                try commandPluginsContainer.encode(commandpluginlist0)
            }
        }
        if let comment = comment {
            try encodeContainer.encode(comment, forKey: .comment)
        }
        if let documentName = documentName {
            try encodeContainer.encode(documentName, forKey: .documentName)
        }
        if let documentVersion = documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let notificationConfig = notificationConfig {
            try encodeContainer.encode(notificationConfig, forKey: .notificationConfig)
        }
        if let requestedDateTime = requestedDateTime {
            try encodeContainer.encode(requestedDateTime.timeIntervalSince1970, forKey: .requestedDateTime)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let standardErrorUrl = standardErrorUrl {
            try encodeContainer.encode(standardErrorUrl, forKey: .standardErrorUrl)
        }
        if let standardOutputUrl = standardOutputUrl {
            try encodeContainer.encode(standardOutputUrl, forKey: .standardOutputUrl)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusDetails = statusDetails {
            try encodeContainer.encode(statusDetails, forKey: .statusDetails)
        }
        if let traceOutput = traceOutput {
            try encodeContainer.encode(traceOutput, forKey: .traceOutput)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .commandId)
        commandId = commandIdDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let commentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .comment)
        comment = commentDecoded
        let documentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentName)
        documentName = documentNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let requestedDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .requestedDateTime)
        requestedDateTime = requestedDateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CommandInvocationStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
        let traceOutputDecoded = try containerValues.decodeIfPresent(String.self, forKey: .traceOutput)
        traceOutput = traceOutputDecoded
        let standardOutputUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .standardOutputUrl)
        standardOutputUrl = standardOutputUrlDecoded
        let standardErrorUrlDecoded = try containerValues.decodeIfPresent(String.self, forKey: .standardErrorUrl)
        standardErrorUrl = standardErrorUrlDecoded
        let commandPluginsContainer = try containerValues.decodeIfPresent([CommandPlugin?].self, forKey: .commandPlugins)
        var commandPluginsDecoded0:[CommandPlugin]? = nil
        if let commandPluginsContainer = commandPluginsContainer {
            commandPluginsDecoded0 = [CommandPlugin]()
            for structure0 in commandPluginsContainer {
                if let structure0 = structure0 {
                    commandPluginsDecoded0?.append(structure0)
                }
            }
        }
        commandPlugins = commandPluginsDecoded0
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let notificationConfigDecoded = try containerValues.decodeIfPresent(NotificationConfig.self, forKey: .notificationConfig)
        notificationConfig = notificationConfigDecoded
        let cloudWatchOutputConfigDecoded = try containerValues.decodeIfPresent(CloudWatchOutputConfig.self, forKey: .cloudWatchOutputConfig)
        cloudWatchOutputConfig = cloudWatchOutputConfigDecoded
    }
}
