// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>One or more aggregators for viewing counts of OpsItems using different dimensions such as
///     <code>Source</code>, <code>CreatedTime</code>, or <code>Source and CreatedTime</code>, to name a
///    few.</p>
public struct OpsAggregator: Equatable {
    /// <p>Either a Range or Count aggregator for limiting an OpsItem summary.</p>
    public let aggregatorType: String?
    /// <p>A nested aggregator for viewing counts of OpsItems.</p>
    public let aggregators: [OpsAggregator]?
    /// <p>The name of an OpsItem attribute on which to limit the count of OpsItems.</p>
    public let attributeName: String?
    /// <p>The aggregator filters.</p>
    public let filters: [OpsFilter]?
    /// <p>The data type name to use for viewing counts of OpsItems.</p>
    public let typeName: String?
    /// <p>The aggregator value.</p>
    public let values: [String:String]?

    public init (
        aggregatorType: String? = nil,
        aggregators: [OpsAggregator]? = nil,
        attributeName: String? = nil,
        filters: [OpsFilter]? = nil,
        typeName: String? = nil,
        values: [String:String]? = nil
    )
    {
        self.aggregatorType = aggregatorType
        self.aggregators = aggregators
        self.attributeName = attributeName
        self.filters = filters
        self.typeName = typeName
        self.values = values
    }
}

extension OpsAggregator: CustomDebugStringConvertible {
    public var debugDescription: String {
        "OpsAggregator(aggregatorType: \(String(describing: aggregatorType)), aggregators: \(String(describing: aggregators)), attributeName: \(String(describing: attributeName)), filters: \(String(describing: filters)), typeName: \(String(describing: typeName)), values: \(String(describing: values)))"}
}
