// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum SignalType {
    case approve
    case reject
    case resume
    case startStep
    case stopStep
    case sdkUnknown(String)
}

extension SignalType : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SignalType] {
        return [
            .approve,
            .reject,
            .resume,
            .startStep,
            .stopStep,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .approve: return "Approve"
        case .reject: return "Reject"
        case .resume: return "Resume"
        case .startStep: return "StartStep"
        case .stopStep: return "StopStep"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SignalType(rawValue: rawValue) ?? SignalType.sdkUnknown(rawValue)
    }
}
