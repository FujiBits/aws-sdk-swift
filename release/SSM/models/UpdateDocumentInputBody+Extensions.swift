// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct UpdateDocumentInputBody: Equatable {
    public let content: String?
    public let attachments: [AttachmentsSource]?
    public let name: String?
    public let displayName: String?
    public let versionName: String?
    public let documentVersion: String?
    public let documentFormat: DocumentFormat?
    public let targetType: String?
}

extension UpdateDocumentInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attachments = "Attachments"
        case content = "Content"
        case displayName = "DisplayName"
        case documentFormat = "DocumentFormat"
        case documentVersion = "DocumentVersion"
        case name = "Name"
        case targetType = "TargetType"
        case versionName = "VersionName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let contentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .content)
        content = contentDecoded
        let attachmentsContainer = try containerValues.decodeIfPresent([AttachmentsSource?].self, forKey: .attachments)
        var attachmentsDecoded0:[AttachmentsSource]? = nil
        if let attachmentsContainer = attachmentsContainer {
            attachmentsDecoded0 = [AttachmentsSource]()
            for structure0 in attachmentsContainer {
                if let structure0 = structure0 {
                    attachmentsDecoded0?.append(structure0)
                }
            }
        }
        attachments = attachmentsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let documentFormatDecoded = try containerValues.decodeIfPresent(DocumentFormat.self, forKey: .documentFormat)
        documentFormat = documentFormatDecoded
        let targetTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetType)
        targetType = targetTypeDecoded
    }
}
