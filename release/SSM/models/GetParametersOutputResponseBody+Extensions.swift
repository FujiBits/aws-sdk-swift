// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetParametersOutputResponseBody: Equatable {
    public let parameters: [Parameter]?
    public let invalidParameters: [String]?
}

extension GetParametersOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case invalidParameters = "InvalidParameters"
        case parameters = "Parameters"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parametersContainer = try containerValues.decodeIfPresent([Parameter?].self, forKey: .parameters)
        var parametersDecoded0:[Parameter]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Parameter]()
            for structure0 in parametersContainer {
                if let structure0 = structure0 {
                    parametersDecoded0?.append(structure0)
                }
            }
        }
        parameters = parametersDecoded0
        let invalidParametersContainer = try containerValues.decodeIfPresent([String?].self, forKey: .invalidParameters)
        var invalidParametersDecoded0:[String]? = nil
        if let invalidParametersContainer = invalidParametersContainer {
            invalidParametersDecoded0 = [String]()
            for string0 in invalidParametersContainer {
                if let string0 = string0 {
                    invalidParametersDecoded0?.append(string0)
                }
            }
        }
        invalidParameters = invalidParametersDecoded0
    }
}
