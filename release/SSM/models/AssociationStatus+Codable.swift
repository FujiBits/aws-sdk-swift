// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension AssociationStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case additionalInfo = "AdditionalInfo"
        case date = "Date"
        case message = "Message"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalInfo = additionalInfo {
            try encodeContainer.encode(additionalInfo, forKey: .additionalInfo)
        }
        if let date = date {
            try encodeContainer.encode(date.timeIntervalSince1970, forKey: .date)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .date)
        date = dateDecoded
        let nameDecoded = try containerValues.decodeIfPresent(AssociationStatusName.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .message)
        message = messageDecoded
        let additionalInfoDecoded = try containerValues.decodeIfPresent(String.self, forKey: .additionalInfo)
        additionalInfo = additionalInfoDecoded
    }
}
