// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes a command request.</p>
public struct Command: Equatable {
    /// <p>CloudWatch Logs information where you want Systems Manager to send the command output.</p>
    public let cloudWatchOutputConfig: CloudWatchOutputConfig?
    /// <p>A unique identifier for this command.</p>
    public let commandId: String?
    /// <p>User-specified information about the command, such as a brief description of what the
    ///    command should do.</p>
    public let comment: String?
    /// <p>The number of targets for which the command invocation reached a terminal state. Terminal
    ///    states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out, Canceled,
    ///    Terminated, or Undeliverable.</p>
    public let completedCount: Int
    /// <p>The number of targets for which the status is Delivery Timed Out.</p>
    public let deliveryTimedOutCount: Int
    /// <p>The name of the document requested for execution.</p>
    public let documentName: String?
    /// <p>The SSM document version.</p>
    public let documentVersion: String?
    /// <p>The number of targets for which the status is Failed or Execution Timed Out.</p>
    public let errorCount: Int
    /// <p>If this time is reached and the command has not already started running, it will not run.
    ///    Calculated based on the ExpiresAfter user input provided as part of the SendCommand API.</p>
    public let expiresAfter: Date?
    /// <p>The instance IDs against which this command was requested.</p>
    public let instanceIds: [String]?
    /// <p>The maximum number of instances that are allowed to run the command at the same time. You
    ///    can specify a number of instances, such as 10, or a percentage of instances, such as 10%. The
    ///    default value is 50. For more information about how to use MaxConcurrency, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html">Running commands
    ///     using Systems Manager Run Command</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    public let maxConcurrency: String?
    /// <p>The maximum number of errors allowed before the system stops sending the command to
    ///    additional targets. You can specify a number of errors, such as 10, or a percentage or errors,
    ///    such as 10%. The default value is 0. For more information about how to use MaxErrors, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html">Running commands
    ///     using Systems Manager Run Command</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    public let maxErrors: String?
    /// <p>Configurations for sending notifications about command status changes. </p>
    public let notificationConfig: NotificationConfig?
    /// <p>The S3 bucket where the responses to the command executions should be stored. This was
    ///    requested when issuing the command.</p>
    public let outputS3BucketName: String?
    /// <p>The S3 directory path inside the bucket where the responses to the command executions should
    ///    be stored. This was requested when issuing the command.</p>
    public let outputS3KeyPrefix: String?
    /// <p>(Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager
    ///    automatically determines the Region of the S3 bucket.</p>
    public let outputS3Region: String?
    /// <p>The parameter values to be inserted in the document when running the command.</p>
    public let parameters: [String:[String]]?
    /// <p>The date and time the command was requested.</p>
    public let requestedDateTime: Date?
    /// <p>The IAM service role that Run Command uses to act on your behalf when sending notifications
    ///    about command status changes. </p>
    public let serviceRole: String?
    /// <p>The status of the command.</p>
    public let status: CommandStatus?
    /// <p>A detailed status of the command execution. StatusDetails includes more information than
    ///    Status because it includes states resulting from error and concurrency control parameters.
    ///    StatusDetails can show different results than Status. For more information about these statuses,
    ///    see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding command statuses</a> in the <i>AWS Systems Manager User Guide</i>.
    ///    StatusDetails can be one of the following values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Pending: The command has not been sent to any instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>In Progress: The command has been sent to at least one instance but has not reached a
    ///      final state on all instances.</p>
    ///             </li>
    ///             <li>
    ///                <p>Success: The command successfully ran on all invocations. This is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Delivery Timed Out: The value of MaxErrors or more command invocations shows a status of
    ///      Delivery Timed Out. This is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Execution Timed Out: The value of MaxErrors or more command invocations shows a status of
    ///      Execution Timed Out. This is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Failed: The value of MaxErrors or more command invocations shows a status of Failed. This
    ///      is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Incomplete: The command was attempted on all instances and one or more invocations does
    ///      not have a value of Success but not enough invocations failed for the status to be Failed. This
    ///      is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Canceled: The command was terminated before it was completed. This is a terminal
    ///      state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Rate Exceeded: The number of instances targeted by the command exceeded the account limit
    ///      for pending invocations. The system has canceled the command before running it on any instance.
    ///      This is a terminal state.</p>
    ///             </li>
    ///          </ul>
    public let statusDetails: String?
    /// <p>The number of targets for the command.</p>
    public let targetCount: Int
    /// <p>An array of search criteria that targets instances using a Key,Value combination that you
    ///    specify. Targets is required if you don't provide one or more instance IDs in the call.</p>
    public let targets: [Target]?
    /// <p>The <code>TimeoutSeconds</code> value specified for a command.</p>
    public let timeoutSeconds: Int

    public init (
        cloudWatchOutputConfig: CloudWatchOutputConfig? = nil,
        commandId: String? = nil,
        comment: String? = nil,
        completedCount: Int = 0,
        deliveryTimedOutCount: Int = 0,
        documentName: String? = nil,
        documentVersion: String? = nil,
        errorCount: Int = 0,
        expiresAfter: Date? = nil,
        instanceIds: [String]? = nil,
        maxConcurrency: String? = nil,
        maxErrors: String? = nil,
        notificationConfig: NotificationConfig? = nil,
        outputS3BucketName: String? = nil,
        outputS3KeyPrefix: String? = nil,
        outputS3Region: String? = nil,
        parameters: [String:[String]]? = nil,
        requestedDateTime: Date? = nil,
        serviceRole: String? = nil,
        status: CommandStatus? = nil,
        statusDetails: String? = nil,
        targetCount: Int = 0,
        targets: [Target]? = nil,
        timeoutSeconds: Int = 0
    )
    {
        self.cloudWatchOutputConfig = cloudWatchOutputConfig
        self.commandId = commandId
        self.comment = comment
        self.completedCount = completedCount
        self.deliveryTimedOutCount = deliveryTimedOutCount
        self.documentName = documentName
        self.documentVersion = documentVersion
        self.errorCount = errorCount
        self.expiresAfter = expiresAfter
        self.instanceIds = instanceIds
        self.maxConcurrency = maxConcurrency
        self.maxErrors = maxErrors
        self.notificationConfig = notificationConfig
        self.outputS3BucketName = outputS3BucketName
        self.outputS3KeyPrefix = outputS3KeyPrefix
        self.outputS3Region = outputS3Region
        self.parameters = parameters
        self.requestedDateTime = requestedDateTime
        self.serviceRole = serviceRole
        self.status = status
        self.statusDetails = statusDetails
        self.targetCount = targetCount
        self.targets = targets
        self.timeoutSeconds = timeoutSeconds
    }
}

extension Command: CustomDebugStringConvertible {
    public var debugDescription: String {
        "Command(cloudWatchOutputConfig: \(String(describing: cloudWatchOutputConfig)), commandId: \(String(describing: commandId)), comment: \(String(describing: comment)), completedCount: \(String(describing: completedCount)), deliveryTimedOutCount: \(String(describing: deliveryTimedOutCount)), documentName: \(String(describing: documentName)), documentVersion: \(String(describing: documentVersion)), errorCount: \(String(describing: errorCount)), expiresAfter: \(String(describing: expiresAfter)), instanceIds: \(String(describing: instanceIds)), maxConcurrency: \(String(describing: maxConcurrency)), maxErrors: \(String(describing: maxErrors)), notificationConfig: \(String(describing: notificationConfig)), outputS3BucketName: \(String(describing: outputS3BucketName)), outputS3KeyPrefix: \(String(describing: outputS3KeyPrefix)), outputS3Region: \(String(describing: outputS3Region)), parameters: \(String(describing: parameters)), requestedDateTime: \(String(describing: requestedDateTime)), serviceRole: \(String(describing: serviceRole)), status: \(String(describing: status)), statusDetails: \(String(describing: statusDetails)), targetCount: \(String(describing: targetCount)), targets: \(String(describing: targets)), timeoutSeconds: \(String(describing: timeoutSeconds)))"}
}
