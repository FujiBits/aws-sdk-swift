// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifyDocumentPermissionInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyDocumentPermissionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyDocumentPermissionInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyDocumentPermissionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyDocumentPermissionInput>
    public typealias MOutput = OperationOutput<ModifyDocumentPermissionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyDocumentPermissionOutputError>
}

public struct ModifyDocumentPermissionInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyDocumentPermissionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyDocumentPermissionInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyDocumentPermissionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyDocumentPermissionInput>
    public typealias MOutput = OperationOutput<ModifyDocumentPermissionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyDocumentPermissionOutputError>
}

public struct ModifyDocumentPermissionInputBodyMiddleware: Middleware {
    public let id: String = "ModifyDocumentPermissionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyDocumentPermissionInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyDocumentPermissionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyDocumentPermissionInput>
    public typealias MOutput = OperationOutput<ModifyDocumentPermissionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyDocumentPermissionOutputError>
}

extension ModifyDocumentPermissionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountIdsToAdd = "AccountIdsToAdd"
        case accountIdsToRemove = "AccountIdsToRemove"
        case name = "Name"
        case permissionType = "PermissionType"
        case sharedDocumentVersion = "SharedDocumentVersion"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIdsToAdd = accountIdsToAdd {
            var accountIdsToAddContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIdsToAdd)
            for accountidlist0 in accountIdsToAdd {
                try accountIdsToAddContainer.encode(accountidlist0)
            }
        }
        if let accountIdsToRemove = accountIdsToRemove {
            var accountIdsToRemoveContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIdsToRemove)
            for accountidlist0 in accountIdsToRemove {
                try accountIdsToRemoveContainer.encode(accountidlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let permissionType = permissionType {
            try encodeContainer.encode(permissionType.rawValue, forKey: .permissionType)
        }
        if let sharedDocumentVersion = sharedDocumentVersion {
            try encodeContainer.encode(sharedDocumentVersion, forKey: .sharedDocumentVersion)
        }
    }
}
