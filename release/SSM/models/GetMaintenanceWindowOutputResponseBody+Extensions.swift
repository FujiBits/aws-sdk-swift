// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMaintenanceWindowOutputResponseBody: Equatable {
    public let windowId: String?
    public let name: String?
    public let description: String?
    public let startDate: String?
    public let endDate: String?
    public let schedule: String?
    public let scheduleTimezone: String?
    public let scheduleOffset: Int
    public let nextExecutionTime: String?
    public let duration: Int
    public let cutoff: Int
    public let allowUnassociatedTargets: Bool
    public let enabled: Bool
    public let createdDate: Date?
    public let modifiedDate: Date?
}

extension GetMaintenanceWindowOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case allowUnassociatedTargets = "AllowUnassociatedTargets"
        case createdDate = "CreatedDate"
        case cutoff = "Cutoff"
        case description = "Description"
        case duration = "Duration"
        case enabled = "Enabled"
        case endDate = "EndDate"
        case modifiedDate = "ModifiedDate"
        case name = "Name"
        case nextExecutionTime = "NextExecutionTime"
        case schedule = "Schedule"
        case scheduleOffset = "ScheduleOffset"
        case scheduleTimezone = "ScheduleTimezone"
        case startDate = "StartDate"
        case windowId = "WindowId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let windowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .windowId)
        windowId = windowIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let startDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .startDate)
        startDate = startDateDecoded
        let endDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .endDate)
        endDate = endDateDecoded
        let scheduleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schedule)
        schedule = scheduleDecoded
        let scheduleTimezoneDecoded = try containerValues.decodeIfPresent(String.self, forKey: .scheduleTimezone)
        scheduleTimezone = scheduleTimezoneDecoded
        let scheduleOffsetDecoded = try containerValues.decode(Int.self, forKey: .scheduleOffset)
        scheduleOffset = scheduleOffsetDecoded
        let nextExecutionTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextExecutionTime)
        nextExecutionTime = nextExecutionTimeDecoded
        let durationDecoded = try containerValues.decode(Int.self, forKey: .duration)
        duration = durationDecoded
        let cutoffDecoded = try containerValues.decode(Int.self, forKey: .cutoff)
        cutoff = cutoffDecoded
        let allowUnassociatedTargetsDecoded = try containerValues.decode(Bool.self, forKey: .allowUnassociatedTargets)
        allowUnassociatedTargets = allowUnassociatedTargetsDecoded
        let enabledDecoded = try containerValues.decode(Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let modifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .modifiedDate)
        modifiedDate = modifiedDateDecoded
    }
}
