// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct RegisterTargetWithMaintenanceWindowInput: Equatable {
    /// <p>User-provided idempotency token.</p>
    public var clientToken: String?
    /// <p>An optional description for the target.</p>
    public let description: String?
    /// <p>An optional name for the target.</p>
    public let name: String?
    /// <p>User-provided value that will be included in any CloudWatch events raised while running
    ///    tasks for these targets in this maintenance window.</p>
    public let ownerInformation: String?
    /// <p>The type of target being registered with the maintenance window.</p>
    public let resourceType: MaintenanceWindowResourceType?
    /// <p>The targets to register with the maintenance window. In other words, the instances to run
    ///    commands on when the maintenance window runs.</p>
    ///          <note>
    ///             <p>If a single maintenance window task is registered with multiple targets, its task
    ///     invocations occur sequentially and not in parallel. If your task must run on multiple targets at
    ///     the same time, register a task for each target individually and assign each task the same
    ///     priority level.</p>
    ///          </note>
    ///          <p>You can specify targets using instance IDs, resource group names, or tags that have been
    ///    applied to instances.</p>
    ///          <p>
    ///             <b>Example 1</b>: Specify instance IDs</p>
    ///          <p>
    ///             <code>Key=InstanceIds,Values=<i>instance-id-1</i>,<i>instance-id-2</i>,<i>instance-id-3</i>
    ///             </code>
    ///          </p>
    ///          <p>
    ///             <b>Example 2</b>: Use tag key-pairs applied to instances</p>
    ///          <p>
    ///             <code>Key=tag:<i>my-tag-key</i>,Values=<i>my-tag-value-1</i>,<i>my-tag-value-2</i>
    ///             </code>
    ///          </p>
    ///          <p>
    ///             <b>Example 3</b>: Use tag-keys applied to instances</p>
    ///          <p>
    ///             <code>Key=tag-key,Values=<i>my-tag-key-1</i>,<i>my-tag-key-2</i>
    ///             </code>
    ///          </p>
    ///
    ///          <p>
    ///             <b>Example 4</b>: Use resource group names</p>
    ///          <p>
    ///             <code>Key=resource-groups:Name,Values=<i>resource-group-name</i>
    ///             </code>
    ///          </p>
    ///          <p>
    ///             <b>Example 5</b>: Use filters for resource group types</p>
    ///          <p>
    ///             <code>Key=resource-groups:ResourceTypeFilters,Values=<i>resource-type-1</i>,<i>resource-type-2</i>
    ///             </code>
    ///          </p>
    ///          <note>
    ///             <p>For <code>Key=resource-groups:ResourceTypeFilters</code>, specify resource types in the
    ///     following format</p>
    ///             <p>
    ///                <code>Key=resource-groups:ResourceTypeFilters,Values=<i>AWS::EC2::INSTANCE</i>,<i>AWS::EC2::VPC</i>
    ///                </code>
    ///             </p>
    ///          </note>
    ///
    ///          <p>For more information about these examples formats, including the best use case for each one,
    ///    see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html">Examples: Register
    ///     targets with a maintenance window</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    public let targets: [Target]?
    /// <p>The ID of the maintenance window the target should be registered with.</p>
    public let windowId: String?

    public init (
        clientToken: String? = nil,
        description: String? = nil,
        name: String? = nil,
        ownerInformation: String? = nil,
        resourceType: MaintenanceWindowResourceType? = nil,
        targets: [Target]? = nil,
        windowId: String? = nil
    )
    {
        self.clientToken = clientToken
        self.description = description
        self.name = name
        self.ownerInformation = ownerInformation
        self.resourceType = resourceType
        self.targets = targets
        self.windowId = windowId
    }
}

extension RegisterTargetWithMaintenanceWindowInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "RegisterTargetWithMaintenanceWindowInput(clientToken: \(String(describing: clientToken)), description: \(String(describing: description)), name: \(String(describing: name)), ownerInformation: \(String(describing: ownerInformation)), resourceType: \(String(describing: resourceType)), targets: \(String(describing: targets)), windowId: \(String(describing: windowId)))"}
}
