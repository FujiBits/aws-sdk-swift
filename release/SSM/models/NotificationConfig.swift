// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Configurations for sending notifications.</p>
public struct NotificationConfig: Equatable {
    /// <p>An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS) topic. Run Command pushes
    ///    notifications about command status changes to this topic.</p>
    public let notificationArn: String?
    /// <p>The different events for which you can receive notifications. These events include the
    ///    following: All (events), InProgress, Success, TimedOut, Cancelled, Failed. To learn more about
    ///    these events, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html">Monitoring Systems
    ///     Manager status changes using Amazon SNS notifications</a> in the
    ///     <i>AWS Systems Manager User Guide</i>.</p>
    public let notificationEvents: [NotificationEvent]?
    /// <p>Command: Receive notification when the status of a command changes. Invocation: For commands
    ///    sent to multiple instances, receive notification on a per-instance basis when the status of a
    ///    command changes. </p>
    public let notificationType: NotificationType?

    public init (
        notificationArn: String? = nil,
        notificationEvents: [NotificationEvent]? = nil,
        notificationType: NotificationType? = nil
    )
    {
        self.notificationArn = notificationArn
        self.notificationEvents = notificationEvents
        self.notificationType = notificationType
    }
}

extension NotificationConfig: CustomDebugStringConvertible {
    public var debugDescription: String {
        "NotificationConfig(notificationArn: \(String(describing: notificationArn)), notificationEvents: \(String(describing: notificationEvents)), notificationType: \(String(describing: notificationType)))"}
}
