// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum SessionFilterKey {
    case invokedAfter
    case invokedBefore
    case owner
    case sessionId
    case status
    case targetId
    case sdkUnknown(String)
}

extension SessionFilterKey : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [SessionFilterKey] {
        return [
            .invokedAfter,
            .invokedBefore,
            .owner,
            .sessionId,
            .status,
            .targetId,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .invokedAfter: return "InvokedAfter"
        case .invokedBefore: return "InvokedBefore"
        case .owner: return "Owner"
        case .sessionId: return "SessionId"
        case .status: return "Status"
        case .targetId: return "Target"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = SessionFilterKey(rawValue: rawValue) ?? SessionFilterKey.sdkUnknown(rawValue)
    }
}
