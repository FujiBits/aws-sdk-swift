// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCommandsOutputResponseBody: Equatable {
    public let commands: [Command]?
    public let nextToken: String?
}

extension ListCommandsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case commands = "Commands"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandsContainer = try containerValues.decodeIfPresent([Command?].self, forKey: .commands)
        var commandsDecoded0:[Command]? = nil
        if let commandsContainer = commandsContainer {
            commandsDecoded0 = [Command]()
            for structure0 in commandsContainer {
                if let structure0 = structure0 {
                    commandsDecoded0?.append(structure0)
                }
            }
        }
        commands = commandsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
