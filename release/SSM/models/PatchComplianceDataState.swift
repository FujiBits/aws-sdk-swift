// Code generated by smithy-swift-codegen. DO NOT EDIT!



public enum PatchComplianceDataState {
    case failed
    case installed
    case installedother
    case installedpendingreboot
    case installedrejected
    case missing
    case notapplicable
    case sdkUnknown(String)
}

extension PatchComplianceDataState : Equatable, RawRepresentable, Codable, CaseIterable, Hashable {
    public static var allCases: [PatchComplianceDataState] {
        return [
            .failed,
            .installed,
            .installedother,
            .installedpendingreboot,
            .installedrejected,
            .missing,
            .notapplicable,
            .sdkUnknown("")
        ]
    }
    public init?(rawValue: String) {
        let value = Self.allCases.first(where: { $0.rawValue == rawValue })
        self = value ?? Self.sdkUnknown(rawValue)
    }
    public var rawValue: String {
        switch self {
        case .failed: return "FAILED"
        case .installed: return "INSTALLED"
        case .installedother: return "INSTALLED_OTHER"
        case .installedpendingreboot: return "INSTALLED_PENDING_REBOOT"
        case .installedrejected: return "INSTALLED_REJECTED"
        case .missing: return "MISSING"
        case .notapplicable: return "NOT_APPLICABLE"
        case let .sdkUnknown(s): return s
        }
    }
    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawValue = try container.decode(RawValue.self)
        self = PatchComplianceDataState(rawValue: rawValue) ?? PatchComplianceDataState.sdkUnknown(rawValue)
    }
}
