// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Runbook: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case documentName = "DocumentName"
        case documentVersion = "DocumentVersion"
        case maxConcurrency = "MaxConcurrency"
        case maxErrors = "MaxErrors"
        case parameters = "Parameters"
        case targetLocations = "TargetLocations"
        case targetParameterName = "TargetParameterName"
        case targets = "Targets"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documentName = documentName {
            try encodeContainer.encode(documentName, forKey: .documentName)
        }
        if let documentVersion = documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if let maxConcurrency = maxConcurrency {
            try encodeContainer.encode(maxConcurrency, forKey: .maxConcurrency)
        }
        if let maxErrors = maxErrors {
            try encodeContainer.encode(maxErrors, forKey: .maxErrors)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, automationparametermap0) in parameters {
                try parametersContainer.encode(automationparametermap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let targetLocations = targetLocations {
            var targetLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetLocations)
            for targetlocations0 in targetLocations {
                try targetLocationsContainer.encode(targetlocations0)
            }
        }
        if let targetParameterName = targetParameterName {
            try encodeContainer.encode(targetParameterName, forKey: .targetParameterName)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for targets0 in targets {
                try targetsContainer.encode(targets0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentName)
        documentName = documentNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([String: [String?]?].self, forKey: .parameters)
        var parametersDecoded0: [String:[String]]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [String:[String]]()
            for (key0, automationparametervaluelist0) in parametersContainer {
                var automationparametervaluelist0Decoded0: [String]? = nil
                if let automationparametervaluelist0 = automationparametervaluelist0 {
                    automationparametervaluelist0Decoded0 = [String]()
                    for string1 in automationparametervaluelist0 {
                        if let string1 = string1 {
                            automationparametervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                parametersDecoded0?[key0] = automationparametervaluelist0Decoded0
            }
        }
        parameters = parametersDecoded0
        let targetParameterNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .targetParameterName)
        targetParameterName = targetParameterNameDecoded
        let targetsContainer = try containerValues.decodeIfPresent([Target?].self, forKey: .targets)
        var targetsDecoded0:[Target]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Target]()
            for structure0 in targetsContainer {
                if let structure0 = structure0 {
                    targetsDecoded0?.append(structure0)
                }
            }
        }
        targets = targetsDecoded0
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maxConcurrency)
        maxConcurrency = maxConcurrencyDecoded
        let maxErrorsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maxErrors)
        maxErrors = maxErrorsDecoded
        let targetLocationsContainer = try containerValues.decodeIfPresent([TargetLocation?].self, forKey: .targetLocations)
        var targetLocationsDecoded0:[TargetLocation]? = nil
        if let targetLocationsContainer = targetLocationsContainer {
            targetLocationsDecoded0 = [TargetLocation]()
            for structure0 in targetLocationsContainer {
                if let structure0 = structure0 {
                    targetLocationsDecoded0?.append(structure0)
                }
            }
        }
        targetLocations = targetLocationsDecoded0
    }
}
