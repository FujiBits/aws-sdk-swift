// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct DeregisterTargetFromMaintenanceWindowInput: Equatable {
    /// <p>The system checks if the target is being referenced by a task. If the target is being
    ///    referenced, the system returns an error and does not deregister the target from the maintenance
    ///    window.</p>
    public let safe: Bool
    /// <p>The ID of the maintenance window the target should be removed from.</p>
    public let windowId: String?
    /// <p>The ID of the target definition to remove.</p>
    public let windowTargetId: String?

    public init (
        safe: Bool = false,
        windowId: String? = nil,
        windowTargetId: String? = nil
    )
    {
        self.safe = safe
        self.windowId = windowId
        self.windowTargetId = windowTargetId
    }
}

extension DeregisterTargetFromMaintenanceWindowInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DeregisterTargetFromMaintenanceWindowInput(safe: \(String(describing: safe)), windowId: \(String(describing: windowId)), windowTargetId: \(String(describing: windowTargetId)))"}
}
