// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes the parameters for a document.</p>
public struct AssociationDescription: Equatable {
    /// <p>By default, when you create a new associations, the system runs it immediately after it is
    ///    created and then according to the schedule you specified. Specify this option if you don't want
    ///    an association to run immediately after you create it. This parameter is not supported for rate
    ///    expressions.</p>
    public let applyOnlyAtCronInterval: Bool
    /// <p>The association ID.</p>
    public let associationId: String?
    /// <p>The association name.</p>
    public let associationName: String?
    /// <p>The association version.</p>
    public let associationVersion: String?
    /// <p>Specify the target for the association. This target is required for associations that use an
    ///    Automation document and target resources by using rate controls.</p>
    public let automationTargetParameterName: String?
    /// <p>The names or Amazon Resource Names (ARNs) of the Systems Manager Change Calendar type
    ///   documents your associations are gated under. The associations only run when that Change
    ///   Calendar is open. For more information, see
    ///   <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar">AWS Systems Manager Change Calendar</a>.</p>
    public let calendarNames: [String]?
    /// <p>The severity level that is assigned to the association.</p>
    public let complianceSeverity: AssociationComplianceSeverity?
    /// <p>The date when the association was made.</p>
    public let date: Date?
    /// <p>The document version.</p>
    public let documentVersion: String?
    /// <p>The ID of the instance.</p>
    public let instanceId: String?
    /// <p>The date on which the association was last run.</p>
    public let lastExecutionDate: Date?
    /// <p>The last date on which the association was successfully run.</p>
    public let lastSuccessfulExecutionDate: Date?
    /// <p>The date when the association was last updated.</p>
    public let lastUpdateAssociationDate: Date?
    /// <p>The maximum number of targets allowed to run the association at the same time. You can
    ///    specify a number, for example 10, or a percentage of the target set, for example 10%. The default
    ///    value is 100%, which means all targets run the association at the same time.</p>
    ///          <p>If a new instance starts and attempts to run an association while Systems Manager is running
    ///    MaxConcurrency associations, the association is allowed to run. During the next association
    ///    interval, the new instance will process its association within the limit specified for
    ///    MaxConcurrency.</p>
    public let maxConcurrency: String?
    /// <p>The number of errors that are allowed before the system stops sending requests to run the
    ///    association on additional targets. You can specify either an absolute number of errors, for
    ///    example 10, or a percentage of the target set, for example 10%. If you specify 3, for example,
    ///    the system stops sending requests when the fourth error is received. If you specify 0, then the
    ///    system stops sending requests after the first error is returned. If you run an association on 50
    ///    instances and set MaxError to 10%, then the system stops sending the request when the sixth error
    ///    is received.</p>
    ///          <p>Executions that are already running an association when MaxErrors is reached are allowed to
    ///    complete, but some of these executions may fail as well. If you need to ensure that there won't
    ///    be more than max-errors failed executions, set MaxConcurrency to 1 so that executions proceed one
    ///    at a time.</p>
    public let maxErrors: String?
    /// <p>The name of the Systems Manager document.</p>
    public let name: String?
    /// <p>An S3 bucket where you want to store the output details of the request.</p>
    public let outputLocation: InstanceAssociationOutputLocation?
    /// <p>Information about the association.</p>
    public let overview: AssociationOverview?
    /// <p>A description of the parameters for a document. </p>
    public let parameters: [String:[String]]?
    /// <p>A cron expression that specifies a schedule when the association runs.</p>
    public let scheduleExpression: String?
    /// <p>The association status.</p>
    public let status: AssociationStatus?
    /// <p>The mode for generating association compliance. You can specify <code>AUTO</code> or
    ///     <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association
    ///    execution to determine the compliance status. If the association execution runs successfully,
    ///    then the association is <code>COMPLIANT</code>. If the association execution doesn't run
    ///    successfully, the association is <code>NON-COMPLIANT</code>.</p>
    ///          <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter
    ///    for the <a>PutComplianceItems</a> API action. In this case, compliance data is not
    ///    managed by State Manager. It is managed by your direct call to the <a>PutComplianceItems</a> API action.</p>
    ///          <p>By default, all associations use <code>AUTO</code> mode.</p>
    public let syncCompliance: AssociationSyncCompliance?
    /// <p>The combination of AWS Regions and AWS accounts where you want to run the
    ///    association.</p>
    public let targetLocations: [TargetLocation]?
    /// <p>The instances targeted by the request. </p>
    public let targets: [Target]?

    public init (
        applyOnlyAtCronInterval: Bool = false,
        associationId: String? = nil,
        associationName: String? = nil,
        associationVersion: String? = nil,
        automationTargetParameterName: String? = nil,
        calendarNames: [String]? = nil,
        complianceSeverity: AssociationComplianceSeverity? = nil,
        date: Date? = nil,
        documentVersion: String? = nil,
        instanceId: String? = nil,
        lastExecutionDate: Date? = nil,
        lastSuccessfulExecutionDate: Date? = nil,
        lastUpdateAssociationDate: Date? = nil,
        maxConcurrency: String? = nil,
        maxErrors: String? = nil,
        name: String? = nil,
        outputLocation: InstanceAssociationOutputLocation? = nil,
        overview: AssociationOverview? = nil,
        parameters: [String:[String]]? = nil,
        scheduleExpression: String? = nil,
        status: AssociationStatus? = nil,
        syncCompliance: AssociationSyncCompliance? = nil,
        targetLocations: [TargetLocation]? = nil,
        targets: [Target]? = nil
    )
    {
        self.applyOnlyAtCronInterval = applyOnlyAtCronInterval
        self.associationId = associationId
        self.associationName = associationName
        self.associationVersion = associationVersion
        self.automationTargetParameterName = automationTargetParameterName
        self.calendarNames = calendarNames
        self.complianceSeverity = complianceSeverity
        self.date = date
        self.documentVersion = documentVersion
        self.instanceId = instanceId
        self.lastExecutionDate = lastExecutionDate
        self.lastSuccessfulExecutionDate = lastSuccessfulExecutionDate
        self.lastUpdateAssociationDate = lastUpdateAssociationDate
        self.maxConcurrency = maxConcurrency
        self.maxErrors = maxErrors
        self.name = name
        self.outputLocation = outputLocation
        self.overview = overview
        self.parameters = parameters
        self.scheduleExpression = scheduleExpression
        self.status = status
        self.syncCompliance = syncCompliance
        self.targetLocations = targetLocations
        self.targets = targets
    }
}

extension AssociationDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "AssociationDescription(applyOnlyAtCronInterval: \(String(describing: applyOnlyAtCronInterval)), associationId: \(String(describing: associationId)), associationName: \(String(describing: associationName)), associationVersion: \(String(describing: associationVersion)), automationTargetParameterName: \(String(describing: automationTargetParameterName)), calendarNames: \(String(describing: calendarNames)), complianceSeverity: \(String(describing: complianceSeverity)), date: \(String(describing: date)), documentVersion: \(String(describing: documentVersion)), instanceId: \(String(describing: instanceId)), lastExecutionDate: \(String(describing: lastExecutionDate)), lastSuccessfulExecutionDate: \(String(describing: lastSuccessfulExecutionDate)), lastUpdateAssociationDate: \(String(describing: lastUpdateAssociationDate)), maxConcurrency: \(String(describing: maxConcurrency)), maxErrors: \(String(describing: maxErrors)), name: \(String(describing: name)), outputLocation: \(String(describing: outputLocation)), overview: \(String(describing: overview)), parameters: \(String(describing: parameters)), scheduleExpression: \(String(describing: scheduleExpression)), status: \(String(describing: status)), syncCompliance: \(String(describing: syncCompliance)), targetLocations: \(String(describing: targetLocations)), targets: \(String(describing: targets)))"}
}
