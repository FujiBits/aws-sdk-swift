// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ProgressCounters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cancelledSteps = "CancelledSteps"
        case failedSteps = "FailedSteps"
        case successSteps = "SuccessSteps"
        case timedOutSteps = "TimedOutSteps"
        case totalSteps = "TotalSteps"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cancelledSteps != 0 {
            try encodeContainer.encode(cancelledSteps, forKey: .cancelledSteps)
        }
        if failedSteps != 0 {
            try encodeContainer.encode(failedSteps, forKey: .failedSteps)
        }
        if successSteps != 0 {
            try encodeContainer.encode(successSteps, forKey: .successSteps)
        }
        if timedOutSteps != 0 {
            try encodeContainer.encode(timedOutSteps, forKey: .timedOutSteps)
        }
        if totalSteps != 0 {
            try encodeContainer.encode(totalSteps, forKey: .totalSteps)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalStepsDecoded = try containerValues.decode(Int.self, forKey: .totalSteps)
        totalSteps = totalStepsDecoded
        let successStepsDecoded = try containerValues.decode(Int.self, forKey: .successSteps)
        successSteps = successStepsDecoded
        let failedStepsDecoded = try containerValues.decode(Int.self, forKey: .failedSteps)
        failedSteps = failedStepsDecoded
        let cancelledStepsDecoded = try containerValues.decode(Int.self, forKey: .cancelledSteps)
        cancelledSteps = cancelledStepsDecoded
        let timedOutStepsDecoded = try containerValues.decode(Int.self, forKey: .timedOutSteps)
        timedOutSteps = timedOutStepsDecoded
    }
}
