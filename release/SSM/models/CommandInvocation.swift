// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>An invocation is copy of a command sent to a specific instance. A command can apply to one
///    or more instances. A command invocation applies to one instance. For example, if a user runs
///    SendCommand against three instances, then a command invocation is created for each requested
///    instance ID. A command invocation returns status and detail information about a command you ran.
///   </p>
public struct CommandInvocation: Equatable {
    /// <p>CloudWatch Logs information where you want Systems Manager to send the command output.</p>
    public let cloudWatchOutputConfig: CloudWatchOutputConfig?
    /// <p>The command against which this invocation was requested.</p>
    public let commandId: String?
    /// <p>Plugins processed by the command.</p>
    public let commandPlugins: [CommandPlugin]?
    /// <p>User-specified information about the command, such as a brief description of what the
    ///    command should do.</p>
    public let comment: String?
    /// <p>The document name that was requested for execution.</p>
    public let documentName: String?
    /// <p>The SSM document version.</p>
    public let documentVersion: String?
    /// <p>The instance ID in which this invocation was requested.</p>
    public let instanceId: String?
    /// <p>The name of the invocation target. For EC2 instances this is the value for the aws:Name tag.
    ///    For on-premises instances, this is the name of the instance.</p>
    public let instanceName: String?
    /// <p>Configurations for sending notifications about command status changes on a per instance
    ///    basis.</p>
    public let notificationConfig: NotificationConfig?
    /// <p>The time and date the request was sent to this instance.</p>
    public let requestedDateTime: Date?
    /// <p>The IAM service role that Run Command uses to act on your behalf when sending notifications
    ///    about command status changes on a per instance basis.</p>
    public let serviceRole: String?
    /// <p>The URL to the plugin's StdErr file in Amazon S3, if the S3 bucket was defined for the parent
    ///    command. For an invocation, StandardErrorUrl is populated if there is just one plugin defined for
    ///    the command, and the S3 bucket was defined for the command.</p>
    public let standardErrorUrl: String?
    /// <p>The URL to the plugin's StdOut file in Amazon S3, if the S3 bucket was defined for the parent
    ///    command. For an invocation, StandardOutputUrl is populated if there is just one plugin defined
    ///    for the command, and the S3 bucket was defined for the command.</p>
    public let standardOutputUrl: String?
    /// <p>Whether or not the invocation succeeded, failed, or is pending.</p>
    public let status: CommandInvocationStatus?
    /// <p>A detailed status of the command execution for each invocation (each instance targeted by
    ///    the command). StatusDetails includes more information than Status because it includes states
    ///    resulting from error and concurrency control parameters. StatusDetails can show different results
    ///    than Status. For more information about these statuses, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding command
    ///     statuses</a> in the <i>AWS Systems Manager User Guide</i>. StatusDetails can be one of the
    ///    following values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Pending: The command has not been sent to the instance.</p>
    ///             </li>
    ///             <li>
    ///                <p>In Progress: The command has been sent to the instance but has not reached a terminal
    ///      state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Success: The execution of the command or plugin was successfully completed. This is a
    ///      terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Delivery Timed Out: The command was not delivered to the instance before the delivery
    ///      timeout expired. Delivery timeouts do not count against the parent command's MaxErrors limit,
    ///      but they do contribute to whether the parent command status is Success or Incomplete. This is a
    ///      terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Execution Timed Out: Command execution started on the instance, but the execution was not
    ///      complete before the execution timeout expired. Execution timeouts count against the MaxErrors
    ///      limit of the parent command. This is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Failed: The command was not successful on the instance. For a plugin, this indicates that
    ///      the result code was not zero. For a command invocation, this indicates that the result code for
    ///      one or more plugins was not zero. Invocation failures count against the MaxErrors limit of the
    ///      parent command. This is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Canceled: The command was terminated before it was completed. This is a terminal
    ///      state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Undeliverable: The command can't be delivered to the instance. The instance might not
    ///      exist or might not be responding. Undeliverable invocations don't count against the parent
    ///      command's MaxErrors limit and don't contribute to whether the parent command status is Success
    ///      or Incomplete. This is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command
    ///      invocations were canceled by the system. This is a terminal state.</p>
    ///             </li>
    ///          </ul>
    public let statusDetails: String?
    /// <p> Gets the trace output sent by the agent. </p>
    public let traceOutput: String?

    public init (
        cloudWatchOutputConfig: CloudWatchOutputConfig? = nil,
        commandId: String? = nil,
        commandPlugins: [CommandPlugin]? = nil,
        comment: String? = nil,
        documentName: String? = nil,
        documentVersion: String? = nil,
        instanceId: String? = nil,
        instanceName: String? = nil,
        notificationConfig: NotificationConfig? = nil,
        requestedDateTime: Date? = nil,
        serviceRole: String? = nil,
        standardErrorUrl: String? = nil,
        standardOutputUrl: String? = nil,
        status: CommandInvocationStatus? = nil,
        statusDetails: String? = nil,
        traceOutput: String? = nil
    )
    {
        self.cloudWatchOutputConfig = cloudWatchOutputConfig
        self.commandId = commandId
        self.commandPlugins = commandPlugins
        self.comment = comment
        self.documentName = documentName
        self.documentVersion = documentVersion
        self.instanceId = instanceId
        self.instanceName = instanceName
        self.notificationConfig = notificationConfig
        self.requestedDateTime = requestedDateTime
        self.serviceRole = serviceRole
        self.standardErrorUrl = standardErrorUrl
        self.standardOutputUrl = standardOutputUrl
        self.status = status
        self.statusDetails = statusDetails
        self.traceOutput = traceOutput
    }
}

extension CommandInvocation: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CommandInvocation(cloudWatchOutputConfig: \(String(describing: cloudWatchOutputConfig)), commandId: \(String(describing: commandId)), commandPlugins: \(String(describing: commandPlugins)), comment: \(String(describing: comment)), documentName: \(String(describing: documentName)), documentVersion: \(String(describing: documentVersion)), instanceId: \(String(describing: instanceId)), instanceName: \(String(describing: instanceName)), notificationConfig: \(String(describing: notificationConfig)), requestedDateTime: \(String(describing: requestedDateTime)), serviceRole: \(String(describing: serviceRole)), standardErrorUrl: \(String(describing: standardErrorUrl)), standardOutputUrl: \(String(describing: standardOutputUrl)), status: \(String(describing: status)), statusDetails: \(String(describing: statusDetails)), traceOutput: \(String(describing: traceOutput)))"}
}
