// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DocumentReviewerResponseSource: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case comment = "Comment"
        case createTime = "CreateTime"
        case reviewStatus = "ReviewStatus"
        case reviewer = "Reviewer"
        case updatedTime = "UpdatedTime"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comment = comment {
            var commentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .comment)
            for documentreviewcommentlist0 in comment {
                try commentContainer.encode(documentreviewcommentlist0)
            }
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let reviewStatus = reviewStatus {
            try encodeContainer.encode(reviewStatus.rawValue, forKey: .reviewStatus)
        }
        if let reviewer = reviewer {
            try encodeContainer.encode(reviewer, forKey: .reviewer)
        }
        if let updatedTime = updatedTime {
            try encodeContainer.encode(updatedTime.timeIntervalSince1970, forKey: .updatedTime)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let updatedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .updatedTime)
        updatedTime = updatedTimeDecoded
        let reviewStatusDecoded = try containerValues.decodeIfPresent(ReviewStatus.self, forKey: .reviewStatus)
        reviewStatus = reviewStatusDecoded
        let commentContainer = try containerValues.decodeIfPresent([DocumentReviewCommentSource?].self, forKey: .comment)
        var commentDecoded0:[DocumentReviewCommentSource]? = nil
        if let commentContainer = commentContainer {
            commentDecoded0 = [DocumentReviewCommentSource]()
            for structure0 in commentContainer {
                if let structure0 = structure0 {
                    commentDecoded0?.append(structure0)
                }
            }
        }
        comment = commentDecoded0
        let reviewerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reviewer)
        reviewer = reviewerDecoded
    }
}
