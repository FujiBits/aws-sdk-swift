// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetMaintenanceWindowOutputResponse: Equatable {
    /// <p>Whether targets must be registered with the maintenance window before tasks can be defined
    ///    for those targets.</p>
    public let allowUnassociatedTargets: Bool
    /// <p>The date the maintenance window was created.</p>
    public let createdDate: Date?
    /// <p>The number of hours before the end of the maintenance window that Systems Manager stops scheduling new
    ///    tasks for execution.</p>
    public let cutoff: Int
    /// <p>The description of the maintenance window.</p>
    public let description: String?
    /// <p>The duration of the maintenance window in hours.</p>
    public let duration: Int
    /// <p>Indicates whether the maintenance window is enabled.</p>
    public let enabled: Bool
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
    ///    to become inactive. The maintenance window will not run after this specified time.</p>
    public let endDate: String?
    /// <p>The date the maintenance window was last modified.</p>
    public let modifiedDate: Date?
    /// <p>The name of the maintenance window.</p>
    public let name: String?
    /// <p>The next time the maintenance window will actually run, taking into account any specified
    ///    times for the maintenance window to become active or inactive.</p>
    public let nextExecutionTime: String?
    /// <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
    public let schedule: String?
    /// <p>The number of days to wait to run a maintenance window after the scheduled CRON expression
    ///    date and time.</p>
    public let scheduleOffset: Int
    /// <p>The time zone that the scheduled maintenance window executions are based on, in Internet
    ///    Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or
    ///    "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time
    ///     Zone Database</a> on the IANA website.</p>
    public let scheduleTimezone: String?
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
    ///    to become active. The maintenance window will not run before this specified time.</p>
    public let startDate: String?
    /// <p>The ID of the created maintenance window.</p>
    public let windowId: String?

    public init (
        allowUnassociatedTargets: Bool = false,
        createdDate: Date? = nil,
        cutoff: Int = 0,
        description: String? = nil,
        duration: Int = 0,
        enabled: Bool = false,
        endDate: String? = nil,
        modifiedDate: Date? = nil,
        name: String? = nil,
        nextExecutionTime: String? = nil,
        schedule: String? = nil,
        scheduleOffset: Int = 0,
        scheduleTimezone: String? = nil,
        startDate: String? = nil,
        windowId: String? = nil
    )
    {
        self.allowUnassociatedTargets = allowUnassociatedTargets
        self.createdDate = createdDate
        self.cutoff = cutoff
        self.description = description
        self.duration = duration
        self.enabled = enabled
        self.endDate = endDate
        self.modifiedDate = modifiedDate
        self.name = name
        self.nextExecutionTime = nextExecutionTime
        self.schedule = schedule
        self.scheduleOffset = scheduleOffset
        self.scheduleTimezone = scheduleTimezone
        self.startDate = startDate
        self.windowId = windowId
    }
}

extension GetMaintenanceWindowOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetMaintenanceWindowOutputResponse(allowUnassociatedTargets: \(String(describing: allowUnassociatedTargets)), createdDate: \(String(describing: createdDate)), cutoff: \(String(describing: cutoff)), description: \(String(describing: description)), duration: \(String(describing: duration)), enabled: \(String(describing: enabled)), endDate: \(String(describing: endDate)), modifiedDate: \(String(describing: modifiedDate)), name: \(String(describing: name)), nextExecutionTime: \(String(describing: nextExecutionTime)), schedule: \(String(describing: schedule)), scheduleOffset: \(String(describing: scheduleOffset)), scheduleTimezone: \(String(describing: scheduleTimezone)), startDate: \(String(describing: startDate)), windowId: \(String(describing: windowId)))"}
}
