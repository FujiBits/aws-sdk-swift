// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Describes a Systems Manager document. </p>
public struct DocumentDescription: Equatable {
    /// <p>The version of the document currently approved for use in the organization.</p>
    public let approvedVersion: String?
    /// <p>Details about the document attachments, including names, locations, sizes, and so on.</p>
    public let attachmentsInformation: [AttachmentInformation]?
    /// <p>The user in your organization who created the document.</p>
    public let author: String?
    /// <p>The date when the document was created.</p>
    public let createdDate: Date?
    /// <p>The default version.</p>
    public let defaultVersion: String?
    /// <p>A description of the document. </p>
    public let description: String?
    /// <p>The friendly name of the Systems Manager document. This value can differ for each version of the
    ///    document. If you want to update this value, see <a>UpdateDocument</a>.</p>
    public let displayName: String?
    /// <p>The document format, either JSON or YAML.</p>
    public let documentFormat: DocumentFormat?
    /// <p>The type of document.</p>
    public let documentType: DocumentType?
    /// <p>The document version.</p>
    public let documentVersion: String?
    /// <p>The Sha256 or Sha1 hash created by the system when the document was created. </p>
    ///          <note>
    ///             <p>Sha1 hashes have been deprecated.</p>
    ///          </note>
    public let hash: String?
    /// <p>The hash type of the document. Valid values include <code>Sha256</code> or
    ///    <code>Sha1</code>.</p>
    ///          <note>
    ///             <p>Sha1 hashes have been deprecated.</p>
    ///          </note>
    public let hashType: DocumentHashType?
    /// <p>The latest version of the document.</p>
    public let latestVersion: String?
    /// <p>The name of the Systems Manager document.</p>
    public let name: String?
    /// <p>The AWS user account that created the document.</p>
    public let owner: String?
    /// <p>A description of the parameters for a document.</p>
    public let parameters: [DocumentParameter]?
    /// <p>The version of the document that is currently under review.</p>
    public let pendingReviewVersion: String?
    /// <p>The list of OS platforms compatible with this Systems Manager document. </p>
    public let platformTypes: [PlatformType]?
    /// <p>A list of SSM documents required by a document. For example, an
    ///     <code>ApplicationConfiguration</code> document requires an
    ///     <code>ApplicationConfigurationSchema</code> document.</p>
    public let requires: [DocumentRequires]?
    /// <p>Details about the review of a document.</p>
    public let reviewInformation: [ReviewInformation]?
    /// <p>The current status of the review.</p>
    public let reviewStatus: ReviewStatus?
    /// <p>The schema version.</p>
    public let schemaVersion: String?
    /// <p>The SHA1 hash of the document, which you can use for verification.</p>
    public let sha1: String?
    /// <p>The status of the Systems Manager document.</p>
    public let status: DocumentStatus?
    /// <p>A message returned by AWS Systems Manager that explains the <code>Status</code> value. For example, a
    ///     <code>Failed</code> status might be explained by the <code>StatusInformation</code> message,
    ///    "The specified S3 bucket does not exist. Verify that the URL of the S3 bucket is correct."</p>
    public let statusInformation: String?
    /// <p>The tags, or metadata, that have been applied to the document.</p>
    public let tags: [Tag]?
    /// <p>The target type which defines the kinds of resources the document can run on. For example,
    ///    /AWS::EC2::Instance. For a list of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">AWS resource and property types
    ///     reference</a> in the <i>AWS CloudFormation User Guide</i>. </p>
    public let targetType: String?
    /// <p>The version of the artifact associated with the document.</p>
    public let versionName: String?

    public init (
        approvedVersion: String? = nil,
        attachmentsInformation: [AttachmentInformation]? = nil,
        author: String? = nil,
        createdDate: Date? = nil,
        defaultVersion: String? = nil,
        description: String? = nil,
        displayName: String? = nil,
        documentFormat: DocumentFormat? = nil,
        documentType: DocumentType? = nil,
        documentVersion: String? = nil,
        hash: String? = nil,
        hashType: DocumentHashType? = nil,
        latestVersion: String? = nil,
        name: String? = nil,
        owner: String? = nil,
        parameters: [DocumentParameter]? = nil,
        pendingReviewVersion: String? = nil,
        platformTypes: [PlatformType]? = nil,
        requires: [DocumentRequires]? = nil,
        reviewInformation: [ReviewInformation]? = nil,
        reviewStatus: ReviewStatus? = nil,
        schemaVersion: String? = nil,
        sha1: String? = nil,
        status: DocumentStatus? = nil,
        statusInformation: String? = nil,
        tags: [Tag]? = nil,
        targetType: String? = nil,
        versionName: String? = nil
    )
    {
        self.approvedVersion = approvedVersion
        self.attachmentsInformation = attachmentsInformation
        self.author = author
        self.createdDate = createdDate
        self.defaultVersion = defaultVersion
        self.description = description
        self.displayName = displayName
        self.documentFormat = documentFormat
        self.documentType = documentType
        self.documentVersion = documentVersion
        self.hash = hash
        self.hashType = hashType
        self.latestVersion = latestVersion
        self.name = name
        self.owner = owner
        self.parameters = parameters
        self.pendingReviewVersion = pendingReviewVersion
        self.platformTypes = platformTypes
        self.requires = requires
        self.reviewInformation = reviewInformation
        self.reviewStatus = reviewStatus
        self.schemaVersion = schemaVersion
        self.sha1 = sha1
        self.status = status
        self.statusInformation = statusInformation
        self.tags = tags
        self.targetType = targetType
        self.versionName = versionName
    }
}

extension DocumentDescription: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DocumentDescription(approvedVersion: \(String(describing: approvedVersion)), attachmentsInformation: \(String(describing: attachmentsInformation)), author: \(String(describing: author)), createdDate: \(String(describing: createdDate)), defaultVersion: \(String(describing: defaultVersion)), description: \(String(describing: description)), displayName: \(String(describing: displayName)), documentFormat: \(String(describing: documentFormat)), documentType: \(String(describing: documentType)), documentVersion: \(String(describing: documentVersion)), hash: \(String(describing: hash)), hashType: \(String(describing: hashType)), latestVersion: \(String(describing: latestVersion)), name: \(String(describing: name)), owner: \(String(describing: owner)), parameters: \(String(describing: parameters)), pendingReviewVersion: \(String(describing: pendingReviewVersion)), platformTypes: \(String(describing: platformTypes)), requires: \(String(describing: requires)), reviewInformation: \(String(describing: reviewInformation)), reviewStatus: \(String(describing: reviewStatus)), schemaVersion: \(String(describing: schemaVersion)), sha1: \(String(describing: sha1)), status: \(String(describing: status)), statusInformation: \(String(describing: statusInformation)), tags: \(String(describing: tags)), targetType: \(String(describing: targetType)), versionName: \(String(describing: versionName)))"}
}
