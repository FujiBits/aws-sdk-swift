// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInventoryEntriesOutputResponseBody: Equatable {
    public let typeName: String?
    public let instanceId: String?
    public let schemaVersion: String?
    public let captureTime: String?
    public let entries: [[String:String]]?
    public let nextToken: String?
}

extension ListInventoryEntriesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case captureTime = "CaptureTime"
        case entries = "Entries"
        case instanceId = "InstanceId"
        case nextToken = "NextToken"
        case schemaVersion = "SchemaVersion"
        case typeName = "TypeName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let schemaVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .schemaVersion)
        schemaVersion = schemaVersionDecoded
        let captureTimeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .captureTime)
        captureTime = captureTimeDecoded
        let entriesContainer = try containerValues.decodeIfPresent([[String: String?]?].self, forKey: .entries)
        var entriesDecoded0:[[String:String]]? = nil
        if let entriesContainer = entriesContainer {
            entriesDecoded0 = [[String:String]]()
            for map0 in entriesContainer {
                var entriesContainerDecoded0: [String: String]? = nil
                if let map0 = map0 {
                    entriesContainerDecoded0 = [String: String]()
                    for (key1, attributevalue1) in map0 {
                        if let attributevalue1 = attributevalue1 {
                            entriesContainerDecoded0?[key1] = attributevalue1
                        }
                    }
                }
                if let entriesContainerDecoded0 = entriesContainerDecoded0 {
                    entriesDecoded0?.append(entriesContainerDecoded0)
                }
            }
        }
        entries = entriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
