// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>One or more filters. Use a filter to return a more specific list of documents.</p>
///          <p>For keys, you can specify one or more tags that have been applied to a document. </p>
///          <p>You can also use AWS-provided keys, some of which have specific allowed values. These keys
///    and their associated values are as follows:</p>
///          <dl>
///             <dt>DocumentType</dt>
///             <dd>
///                <ul>
///                   <li>
///                      <p>ApplicationConfiguration</p>
///                   </li>
///                   <li>
///                      <p>ApplicationConfigurationSchema</p>
///                   </li>
///                   <li>
///                      <p>Automation</p>
///                   </li>
///                   <li>
///                      <p>ChangeCalendar</p>
///                   </li>
///                   <li>
///                      <p>Command</p>
///                   </li>
///                   <li>
///                      <p>DeploymentStrategy</p>
///                   </li>
///                   <li>
///                      <p>Package</p>
///                   </li>
///                   <li>
///                      <p>Policy</p>
///                   </li>
///                   <li>
///                      <p>Session</p>
///                   </li>
///                </ul>
///             </dd>
///             <dt>Owner</dt>
///             <dd>
///                <p>Note that only one <code>Owner</code> can be specified in a request. For example:
///        <code>Key=Owner,Values=Self</code>.</p>
///                <ul>
///                   <li>
///                      <p>Amazon</p>
///                   </li>
///                   <li>
///                      <p>Private</p>
///                   </li>
///                   <li>
///                      <p>Public</p>
///                   </li>
///                   <li>
///                      <p>Self</p>
///                   </li>
///                   <li>
///                      <p>ThirdParty</p>
///                   </li>
///                </ul>
///             </dd>
///             <dt>PlatformTypes</dt>
///             <dd>
///                <ul>
///                   <li>
///                      <p>Linux</p>
///                   </li>
///                   <li>
///                      <p>Windows</p>
///                   </li>
///                </ul>
///             </dd>
///          </dl>
///          <p>
///             <code>Name</code> is another AWS-provided key. If you use <code>Name</code> as a key, you
///    can use a name prefix to return a list of documents. For example, in the AWS CLI, to return a
///    list of all documents that begin with <code>Te</code>, run the following command:</p>
///          <p>
///             <code>aws ssm list-documents --filters Key=Name,Values=Te</code>
///          </p>
///          <p>You can also use the <code>TargetType</code> AWS-provided key. For a list of valid resource
///    type values that can be used with this key, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">AWS resource and property types
///     reference</a> in the <i>AWS CloudFormation User Guide</i>.</p>
///          <p>If you specify more than two keys, only documents that are identified by all the tags are
///    returned in the results. If you specify more than two values for a key, documents that are
///    identified by any of the values are returned in the results.</p>
///          <p>To specify a custom key and value pair, use the format
///     <code>Key=tag:tagName,Values=valueName</code>.</p>
///          <p>For example, if you created a key called region and are using the AWS CLI to call the
///     <code>list-documents</code> command: </p>
///          <p>
///             <code>aws ssm list-documents --filters Key=tag:region,Values=east,west
///     Key=Owner,Values=Self</code>
///          </p>
public struct DocumentKeyValuesFilter: Equatable {
    /// <p>The name of the filter key.</p>
    public let key: String?
    /// <p>The value for the filter key.</p>
    public let values: [String]?

    public init (
        key: String? = nil,
        values: [String]? = nil
    )
    {
        self.key = key
        self.values = values
    }
}

extension DocumentKeyValuesFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "DocumentKeyValuesFilter(key: \(String(describing: key)), values: \(String(describing: values)))"}
}
