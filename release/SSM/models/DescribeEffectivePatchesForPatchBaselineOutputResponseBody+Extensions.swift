// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEffectivePatchesForPatchBaselineOutputResponseBody: Equatable {
    public let effectivePatches: [EffectivePatch]?
    public let nextToken: String?
}

extension DescribeEffectivePatchesForPatchBaselineOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case effectivePatches = "EffectivePatches"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let effectivePatchesContainer = try containerValues.decodeIfPresent([EffectivePatch?].self, forKey: .effectivePatches)
        var effectivePatchesDecoded0:[EffectivePatch]? = nil
        if let effectivePatchesContainer = effectivePatchesContainer {
            effectivePatchesDecoded0 = [EffectivePatch]()
            for structure0 in effectivePatchesContainer {
                if let structure0 = structure0 {
                    effectivePatchesDecoded0?.append(structure0)
                }
            }
        }
        effectivePatches = effectivePatchesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
