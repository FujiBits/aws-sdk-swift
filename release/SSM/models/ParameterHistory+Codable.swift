// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ParameterHistory: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case allowedPattern = "AllowedPattern"
        case dataType = "DataType"
        case description = "Description"
        case keyId = "KeyId"
        case labels = "Labels"
        case lastModifiedDate = "LastModifiedDate"
        case lastModifiedUser = "LastModifiedUser"
        case name = "Name"
        case policies = "Policies"
        case tier = "Tier"
        case type = "Type"
        case value = "Value"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowedPattern = allowedPattern {
            try encodeContainer.encode(allowedPattern, forKey: .allowedPattern)
        }
        if let dataType = dataType {
            try encodeContainer.encode(dataType, forKey: .dataType)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let keyId = keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let labels = labels {
            var labelsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .labels)
            for parameterlabellist0 in labels {
                try labelsContainer.encode(parameterlabellist0)
            }
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let lastModifiedUser = lastModifiedUser {
            try encodeContainer.encode(lastModifiedUser, forKey: .lastModifiedUser)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let policies = policies {
            var policiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policies)
            for parameterpolicylist0 in policies {
                try policiesContainer.encode(parameterpolicylist0)
            }
        }
        if let tier = tier {
            try encodeContainer.encode(tier.rawValue, forKey: .tier)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ParameterType.self, forKey: .type)
        type = typeDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let lastModifiedUserDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastModifiedUser)
        lastModifiedUser = lastModifiedUserDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let allowedPatternDecoded = try containerValues.decodeIfPresent(String.self, forKey: .allowedPattern)
        allowedPattern = allowedPatternDecoded
        let versionDecoded = try containerValues.decode(Int.self, forKey: .version)
        version = versionDecoded
        let labelsContainer = try containerValues.decodeIfPresent([String?].self, forKey: .labels)
        var labelsDecoded0:[String]? = nil
        if let labelsContainer = labelsContainer {
            labelsDecoded0 = [String]()
            for string0 in labelsContainer {
                if let string0 = string0 {
                    labelsDecoded0?.append(string0)
                }
            }
        }
        labels = labelsDecoded0
        let tierDecoded = try containerValues.decodeIfPresent(ParameterTier.self, forKey: .tier)
        tier = tierDecoded
        let policiesContainer = try containerValues.decodeIfPresent([ParameterInlinePolicy?].self, forKey: .policies)
        var policiesDecoded0:[ParameterInlinePolicy]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [ParameterInlinePolicy]()
            for structure0 in policiesContainer {
                if let structure0 = structure0 {
                    policiesDecoded0?.append(structure0)
                }
            }
        }
        policies = policiesDecoded0
        let dataTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataType)
        dataType = dataTypeDecoded
    }
}
