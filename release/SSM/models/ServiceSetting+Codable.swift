// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServiceSetting: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case lastModifiedDate = "LastModifiedDate"
        case lastModifiedUser = "LastModifiedUser"
        case settingId = "SettingId"
        case settingValue = "SettingValue"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let lastModifiedUser = lastModifiedUser {
            try encodeContainer.encode(lastModifiedUser, forKey: .lastModifiedUser)
        }
        if let settingId = settingId {
            try encodeContainer.encode(settingId, forKey: .settingId)
        }
        if let settingValue = settingValue {
            try encodeContainer.encode(settingValue, forKey: .settingValue)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let settingIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .settingId)
        settingId = settingIdDecoded
        let settingValueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .settingValue)
        settingValue = settingValueDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let lastModifiedUserDecoded = try containerValues.decodeIfPresent(String.self, forKey: .lastModifiedUser)
        lastModifiedUser = lastModifiedUserDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
        let statusDecoded = try containerValues.decodeIfPresent(String.self, forKey: .status)
        status = statusDecoded
    }
}
