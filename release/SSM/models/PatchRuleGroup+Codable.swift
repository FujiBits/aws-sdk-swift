// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PatchRuleGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case patchRules = "PatchRules"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let patchRules = patchRules {
            var patchRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .patchRules)
            for patchrulelist0 in patchRules {
                try patchRulesContainer.encode(patchrulelist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let patchRulesContainer = try containerValues.decodeIfPresent([PatchRule?].self, forKey: .patchRules)
        var patchRulesDecoded0:[PatchRule]? = nil
        if let patchRulesContainer = patchRulesContainer {
            patchRulesDecoded0 = [PatchRule]()
            for structure0 in patchRulesContainer {
                if let structure0 = structure0 {
                    patchRulesDecoded0?.append(structure0)
                }
            }
        }
        patchRules = patchRulesDecoded0
    }
}
