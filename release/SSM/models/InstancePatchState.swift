// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Defines the high-level patch compliance state for a managed instance, providing information
///    about the number of installed, missing, not applicable, and failed patches along with metadata
///    about the operation when this information was gathered for the instance.</p>
public struct InstancePatchState: Equatable {
    /// <p>The ID of the patch baseline used to patch the instance.</p>
    public let baselineId: String?
    /// <p>The number of instances where patches that are specified as "Critical" for compliance
    ///    reporting in the patch baseline are not installed. These patches might be missing, have failed
    ///    installation, were rejected, or were installed but awaiting a required instance reboot. The
    ///    status of these instances is <code>NON_COMPLIANT</code>.</p>
    public let criticalNonCompliantCount: Int
    /// <p>The number of patches from the patch baseline that were attempted to be installed during the
    ///    last patching operation, but failed to install.</p>
    public let failedCount: Int
    /// <p>An https URL or an Amazon S3 path-style URL to a list of patches to be installed. This patch
    ///    installation list, which you maintain in an S3 bucket in YAML format and specify in the SSM
    ///    document <code>AWS-RunPatchBaseline</code>, overrides the patches specified by the default patch
    ///    baseline.</p>
    ///          <p>For more information about the <code>InstallOverrideList</code> parameter, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html">About the
    ///     SSM document AWS-RunPatchBaseline</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    public let installOverrideList: String?
    /// <p>The number of patches from the patch baseline that are installed on the instance.</p>
    public let installedCount: Int
    /// <p>The number of patches not specified in the patch baseline that are installed on the
    ///    instance.</p>
    public let installedOtherCount: Int
    /// <p>The number of patches installed by Patch Manager since the last time the instance was
    ///    rebooted.</p>
    public let installedPendingRebootCount: Int
    /// <p>The number of patches installed on an instance that are specified in a
    ///     <code>RejectedPatches</code> list. Patches with a status of
    ///     <i>InstalledRejected</i> were typically installed before they were added to a
    ///     <code>RejectedPatches</code> list.</p>
    ///          <note>
    ///             <p>If <code>ALLOW_AS_DEPENDENCY</code> is the specified option for
    ///      <code>RejectedPatchesAction</code>, the value of <code>InstalledRejectedCount</code> will
    ///     always be <code>0</code> (zero).</p>
    ///          </note>
    public let installedRejectedCount: Int
    /// <p>The ID of the managed instance the high-level patch compliance information was collected
    ///    for.</p>
    public let instanceId: String?
    /// <p>The time of the last attempt to patch the instance with <code>NoReboot</code> specified as
    ///    the reboot option.</p>
    public let lastNoRebootInstallOperationTime: Date?
    /// <p>The number of patches from the patch baseline that are applicable for the instance but
    ///    aren't currently installed.</p>
    public let missingCount: Int
    /// <p>The number of patches from the patch baseline that aren't applicable for the instance and
    ///    therefore aren't installed on the instance. This number may be truncated if the list of patch
    ///    names is very large. The number of patches beyond this limit are reported in
    ///     <code>UnreportedNotApplicableCount</code>.</p>
    public let notApplicableCount: Int
    /// <p>The type of patching operation that was performed: <code>SCAN</code> (assess patch
    ///    compliance state) or <code>INSTALL</code> (install missing patches).</p>
    public let operation: PatchOperationType?
    /// <p>The time the most recent patching operation completed on the instance.</p>
    public let operationEndTime: Date?
    /// <p>The time the most recent patching operation was started on the instance.</p>
    public let operationStartTime: Date?
    /// <p>The number of instances with patches installed that are specified as other than "Critical"
    ///    or "Security" but are not compliant with the patch baseline. The status of these instances is
    ///    NON_COMPLIANT.</p>
    public let otherNonCompliantCount: Int
    /// <p>Placeholder information. This field will always be empty in the current release of the
    ///    service.</p>
    public let ownerInformation: String?
    /// <p>The name of the patch group the managed instance belongs to.</p>
    public let patchGroup: String?
    /// <p>Indicates the reboot option specified in the patch baseline.</p>
    ///          <note>
    ///             <p>Reboot options apply to <code>Install</code> operations only. Reboots are not attempted for
    ///     Patch Manager <code>Scan</code> operations.</p>
    ///          </note>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>RebootIfNeeded</b>: Patch Manager tries to reboot the
    ///      instance if it installed any patches, or if any patches are detected with a status of
    ///       <code>InstalledPendingReboot</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>NoReboot</b>: Patch Manager attempts to install missing
    ///      packages without trying to reboot the system. Patches installed with this option are assigned a
    ///      status of <code>InstalledPendingReboot</code>. These patches might not be in effect until a
    ///      reboot is performed.</p>
    ///             </li>
    ///          </ul>
    public let rebootOption: RebootOption?
    /// <p>The number of instances where patches that are specified as "Security" in a patch advisory
    ///    are not installed. These patches might be missing, have failed installation, were rejected, or
    ///    were installed but awaiting a required instance reboot. The status of these instances is
    ///     <code>NON_COMPLIANT</code>.</p>
    public let securityNonCompliantCount: Int
    /// <p>The ID of the patch baseline snapshot used during the patching operation when this
    ///    compliance data was collected.</p>
    public let snapshotId: String?
    /// <p>The number of patches beyond the supported limit of <code>NotApplicableCount</code> that are
    ///    not reported by name to Systems Manager Inventory.</p>
    public let unreportedNotApplicableCount: Int

    public init (
        baselineId: String? = nil,
        criticalNonCompliantCount: Int = 0,
        failedCount: Int = 0,
        installOverrideList: String? = nil,
        installedCount: Int = 0,
        installedOtherCount: Int = 0,
        installedPendingRebootCount: Int = 0,
        installedRejectedCount: Int = 0,
        instanceId: String? = nil,
        lastNoRebootInstallOperationTime: Date? = nil,
        missingCount: Int = 0,
        notApplicableCount: Int = 0,
        operation: PatchOperationType? = nil,
        operationEndTime: Date? = nil,
        operationStartTime: Date? = nil,
        otherNonCompliantCount: Int = 0,
        ownerInformation: String? = nil,
        patchGroup: String? = nil,
        rebootOption: RebootOption? = nil,
        securityNonCompliantCount: Int = 0,
        snapshotId: String? = nil,
        unreportedNotApplicableCount: Int = 0
    )
    {
        self.baselineId = baselineId
        self.criticalNonCompliantCount = criticalNonCompliantCount
        self.failedCount = failedCount
        self.installOverrideList = installOverrideList
        self.installedCount = installedCount
        self.installedOtherCount = installedOtherCount
        self.installedPendingRebootCount = installedPendingRebootCount
        self.installedRejectedCount = installedRejectedCount
        self.instanceId = instanceId
        self.lastNoRebootInstallOperationTime = lastNoRebootInstallOperationTime
        self.missingCount = missingCount
        self.notApplicableCount = notApplicableCount
        self.operation = operation
        self.operationEndTime = operationEndTime
        self.operationStartTime = operationStartTime
        self.otherNonCompliantCount = otherNonCompliantCount
        self.ownerInformation = ownerInformation
        self.patchGroup = patchGroup
        self.rebootOption = rebootOption
        self.securityNonCompliantCount = securityNonCompliantCount
        self.snapshotId = snapshotId
        self.unreportedNotApplicableCount = unreportedNotApplicableCount
    }
}

extension InstancePatchState: CustomDebugStringConvertible {
    public var debugDescription: String {
        "InstancePatchState(baselineId: \(String(describing: baselineId)), criticalNonCompliantCount: \(String(describing: criticalNonCompliantCount)), failedCount: \(String(describing: failedCount)), installOverrideList: \(String(describing: installOverrideList)), installedCount: \(String(describing: installedCount)), installedOtherCount: \(String(describing: installedOtherCount)), installedPendingRebootCount: \(String(describing: installedPendingRebootCount)), installedRejectedCount: \(String(describing: installedRejectedCount)), instanceId: \(String(describing: instanceId)), lastNoRebootInstallOperationTime: \(String(describing: lastNoRebootInstallOperationTime)), missingCount: \(String(describing: missingCount)), notApplicableCount: \(String(describing: notApplicableCount)), operation: \(String(describing: operation)), operationEndTime: \(String(describing: operationEndTime)), operationStartTime: \(String(describing: operationStartTime)), otherNonCompliantCount: \(String(describing: otherNonCompliantCount)), ownerInformation: \(String(describing: ownerInformation)), patchGroup: \(String(describing: patchGroup)), rebootOption: \(String(describing: rebootOption)), securityNonCompliantCount: \(String(describing: securityNonCompliantCount)), snapshotId: \(String(describing: snapshotId)), unreportedNotApplicableCount: \(String(describing: unreportedNotApplicableCount)))"}
}
