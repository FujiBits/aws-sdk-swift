// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreatePatchBaselineInput: Equatable {
    /// <p>A set of rules used to include patches in the baseline.</p>
    public let approvalRules: PatchRuleGroup?
    /// <p>A list of explicitly approved patches for the baseline.</p>
    ///          <p>For information about accepted formats for lists of approved patches and rejected patches,
    ///                         see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About
    ///                         package name formats for approved and rejected patch lists</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    public let approvedPatches: [String]?
    /// <p>Defines the compliance level for approved patches. When an approved patch is reported as
    ///    missing, this value describes the severity of the compliance violation. The default value is
    ///    UNSPECIFIED.</p>
    public let approvedPatchesComplianceLevel: PatchComplianceLevel?
    /// <p>Indicates whether the list of approved patches includes non-security updates that should be
    ///    applied to the instances. The default value is 'false'. Applies to Linux instances only.</p>
    public let approvedPatchesEnableNonSecurity: Bool
    /// <p>User-provided idempotency token.</p>
    public var clientToken: String?
    /// <p>A description of the patch baseline.</p>
    public let description: String?
    /// <p>A set of global filters used to include patches in the baseline.</p>
    public let globalFilters: PatchFilterGroup?
    /// <p>The name of the patch baseline.</p>
    public let name: String?
    /// <p>Defines the operating system the patch baseline applies to. The Default value is
    ///    WINDOWS.</p>
    public let operatingSystem: OperatingSystem?
    /// <p>A list of explicitly rejected patches for the baseline.</p>
    ///          <p>For information about accepted formats for lists of approved patches and rejected patches,
    ///                         see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About
    ///                         package name formats for approved and rejected patch lists</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    public let rejectedPatches: [String]?
    /// <p>The action for Patch Manager to take on patches included in the RejectedPackages
    ///    list.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <b>ALLOW_AS_DEPENDENCY</b>: A package in the Rejected patches
    ///      list is installed only if it is a dependency of another package. It is considered compliant
    ///      with the patch baseline, and its status is reported as <i>InstalledOther</i>.
    ///      This is the default action if no option is specified.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>BLOCK</b>: Packages in the RejectedPatches list, and packages
    ///      that include them as dependencies, are not installed under any circumstances. If a package was
    ///      installed before it was added to the Rejected patches list, it is considered non-compliant with
    ///      the patch baseline, and its status is reported as
    ///      <i>InstalledRejected</i>.</p>
    ///             </li>
    ///          </ul>
    public let rejectedPatchesAction: PatchAction?
    /// <p>Information about the patches to use to update the instances, including target operating
    ///    systems and source repositories. Applies to Linux instances only.</p>
    public let sources: [PatchSource]?
    /// <p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in
    ///    different ways, such as by purpose, owner, or environment. For example, you might want to tag a
    ///    patch baseline to identify the severity level of patches it specifies and the operating system
    ///    family it applies to. In this case, you could specify the following key name/value pairs:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Key=PatchSeverity,Value=Critical</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Key=OS,Value=Windows</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>To add tags to an existing patch baseline, use the <a>AddTagsToResource</a>
    ///     action.</p>
    ///          </note>
    public let tags: [Tag]?

    public init (
        approvalRules: PatchRuleGroup? = nil,
        approvedPatches: [String]? = nil,
        approvedPatchesComplianceLevel: PatchComplianceLevel? = nil,
        approvedPatchesEnableNonSecurity: Bool = false,
        clientToken: String? = nil,
        description: String? = nil,
        globalFilters: PatchFilterGroup? = nil,
        name: String? = nil,
        operatingSystem: OperatingSystem? = nil,
        rejectedPatches: [String]? = nil,
        rejectedPatchesAction: PatchAction? = nil,
        sources: [PatchSource]? = nil,
        tags: [Tag]? = nil
    )
    {
        self.approvalRules = approvalRules
        self.approvedPatches = approvedPatches
        self.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel
        self.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity
        self.clientToken = clientToken
        self.description = description
        self.globalFilters = globalFilters
        self.name = name
        self.operatingSystem = operatingSystem
        self.rejectedPatches = rejectedPatches
        self.rejectedPatchesAction = rejectedPatchesAction
        self.sources = sources
        self.tags = tags
    }
}

extension CreatePatchBaselineInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreatePatchBaselineInput(approvalRules: \(String(describing: approvalRules)), approvedPatches: \(String(describing: approvedPatches)), approvedPatchesComplianceLevel: \(String(describing: approvedPatchesComplianceLevel)), approvedPatchesEnableNonSecurity: \(String(describing: approvedPatchesEnableNonSecurity)), clientToken: \(String(describing: clientToken)), description: \(String(describing: description)), globalFilters: \(String(describing: globalFilters)), name: \(String(describing: name)), operatingSystem: \(String(describing: operatingSystem)), rejectedPatches: \(String(describing: rejectedPatches)), rejectedPatchesAction: \(String(describing: rejectedPatchesAction)), sources: \(String(describing: sources)), tags: \(String(describing: tags)))"}
}
