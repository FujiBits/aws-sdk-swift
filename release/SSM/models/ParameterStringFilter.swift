// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>One or more filters. Use a filter to return a more specific list of results.</p>
public struct ParameterStringFilter: Equatable {
    /// <p>The name of the filter.</p>
    ///          <note>
    ///             <p>The <code>ParameterStringFilter</code> object is used by the <a>DescribeParameters</a> and <a>GetParametersByPath</a> API actions. However,
    ///     not all of the pattern values listed for <code>Key</code> can be used with both actions.</p>
    ///             <p>For <code>DescribeActions</code>, all of the listed patterns are valid, with the exception
    ///     of <code>Label</code>.</p>
    ///             <p>For <code>GetParametersByPath</code>, the following patterns listed for <code>Key</code>
    ///     are not valid: <code>tag</code>, <code>Name</code>, <code>Path</code>, and
    ///     <code>Tier</code>.</p>
    ///             <p>For examples of CLI commands demonstrating valid parameter filter constructions, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-search.html">Searching for
    ///      Systems Manager parameters</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    ///          </note>
    public let key: String?
    /// <p>For all filters used with <a>DescribeParameters</a>, valid options include
    ///     <code>Equals</code> and <code>BeginsWith</code>. The <code>Name</code> filter additionally
    ///    supports the <code>Contains</code> option. (Exception: For filters using the key
    ///     <code>Path</code>, valid options include <code>Recursive</code> and
    ///    <code>OneLevel</code>.)</p>
    ///          <p>For filters used with <a>GetParametersByPath</a>, valid options include
    ///     <code>Equals</code> and <code>BeginsWith</code>. (Exception: For filters using
    ///     <code>Label</code> as the Key name, the only valid option is <code>Equals</code>.)</p>
    public let option: String?
    /// <p>The value you want to search for.</p>
    public let values: [String]?

    public init (
        key: String? = nil,
        option: String? = nil,
        values: [String]? = nil
    )
    {
        self.key = key
        self.option = option
        self.values = values
    }
}

extension ParameterStringFilter: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ParameterStringFilter(key: \(String(describing: key)), option: \(String(describing: option)), values: \(String(describing: values)))"}
}
