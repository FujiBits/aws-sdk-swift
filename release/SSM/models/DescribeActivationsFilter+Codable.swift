// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DescribeActivationsFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filterKey = "FilterKey"
        case filterValues = "FilterValues"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterKey = filterKey {
            try encodeContainer.encode(filterKey.rawValue, forKey: .filterKey)
        }
        if let filterValues = filterValues {
            var filterValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filterValues)
            for stringlist0 in filterValues {
                try filterValuesContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterKeyDecoded = try containerValues.decodeIfPresent(DescribeActivationsFilterKeys.self, forKey: .filterKey)
        filterKey = filterKeyDecoded
        let filterValuesContainer = try containerValues.decodeIfPresent([String?].self, forKey: .filterValues)
        var filterValuesDecoded0:[String]? = nil
        if let filterValuesContainer = filterValuesContainer {
            filterValuesDecoded0 = [String]()
            for string0 in filterValuesContainer {
                if let string0 = string0 {
                    filterValuesDecoded0?.append(string0)
                }
            }
        }
        filterValues = filterValuesDecoded0
    }
}
