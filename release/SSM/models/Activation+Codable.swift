// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Activation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case activationId = "ActivationId"
        case createdDate = "CreatedDate"
        case defaultInstanceName = "DefaultInstanceName"
        case description = "Description"
        case expirationDate = "ExpirationDate"
        case expired = "Expired"
        case iamRole = "IamRole"
        case registrationLimit = "RegistrationLimit"
        case registrationsCount = "RegistrationsCount"
        case tags = "Tags"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activationId = activationId {
            try encodeContainer.encode(activationId, forKey: .activationId)
        }
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate.timeIntervalSince1970, forKey: .createdDate)
        }
        if let defaultInstanceName = defaultInstanceName {
            try encodeContainer.encode(defaultInstanceName, forKey: .defaultInstanceName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expirationDate = expirationDate {
            try encodeContainer.encode(expirationDate.timeIntervalSince1970, forKey: .expirationDate)
        }
        if expired != false {
            try encodeContainer.encode(expired, forKey: .expired)
        }
        if let iamRole = iamRole {
            try encodeContainer.encode(iamRole, forKey: .iamRole)
        }
        if registrationLimit != 0 {
            try encodeContainer.encode(registrationLimit, forKey: .registrationLimit)
        }
        if registrationsCount != 0 {
            try encodeContainer.encode(registrationsCount, forKey: .registrationsCount)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activationIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .activationId)
        activationId = activationIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let defaultInstanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultInstanceName)
        defaultInstanceName = defaultInstanceNameDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let registrationLimitDecoded = try containerValues.decode(Int.self, forKey: .registrationLimit)
        registrationLimit = registrationLimitDecoded
        let registrationsCountDecoded = try containerValues.decode(Int.self, forKey: .registrationsCount)
        registrationsCount = registrationsCountDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let expiredDecoded = try containerValues.decode(Bool.self, forKey: .expired)
        expired = expiredDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
