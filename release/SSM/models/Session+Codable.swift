// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Session: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case details = "Details"
        case documentName = "DocumentName"
        case endDate = "EndDate"
        case outputUrl = "OutputUrl"
        case owner = "Owner"
        case sessionId = "SessionId"
        case startDate = "StartDate"
        case status = "Status"
        case target = "Target"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let documentName = documentName {
            try encodeContainer.encode(documentName, forKey: .documentName)
        }
        if let endDate = endDate {
            try encodeContainer.encode(endDate.timeIntervalSince1970, forKey: .endDate)
        }
        if let outputUrl = outputUrl {
            try encodeContainer.encode(outputUrl, forKey: .outputUrl)
        }
        if let owner = owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let sessionId = sessionId {
            try encodeContainer.encode(sessionId, forKey: .sessionId)
        }
        if let startDate = startDate {
            try encodeContainer.encode(startDate.timeIntervalSince1970, forKey: .startDate)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sessionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sessionId)
        sessionId = sessionIdDecoded
        let targetDecoded = try containerValues.decodeIfPresent(String.self, forKey: .target)
        target = targetDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SessionStatus.self, forKey: .status)
        status = statusDecoded
        let startDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startDate)
        startDate = startDateDecoded
        let endDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endDate)
        endDate = endDateDecoded
        let documentNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentName)
        documentName = documentNameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .owner)
        owner = ownerDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .details)
        details = detailsDecoded
        let outputUrlDecoded = try containerValues.decodeIfPresent(SessionManagerOutputUrl.self, forKey: .outputUrl)
        outputUrl = outputUrlDecoded
    }
}
