// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension PatchStatus: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case approvalDate = "ApprovalDate"
        case complianceLevel = "ComplianceLevel"
        case deploymentStatus = "DeploymentStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let approvalDate = approvalDate {
            try encodeContainer.encode(approvalDate.timeIntervalSince1970, forKey: .approvalDate)
        }
        if let complianceLevel = complianceLevel {
            try encodeContainer.encode(complianceLevel.rawValue, forKey: .complianceLevel)
        }
        if let deploymentStatus = deploymentStatus {
            try encodeContainer.encode(deploymentStatus.rawValue, forKey: .deploymentStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentStatusDecoded = try containerValues.decodeIfPresent(PatchDeploymentStatus.self, forKey: .deploymentStatus)
        deploymentStatus = deploymentStatusDecoded
        let complianceLevelDecoded = try containerValues.decodeIfPresent(PatchComplianceLevel.self, forKey: .complianceLevel)
        complianceLevel = complianceLevelDecoded
        let approvalDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .approvalDate)
        approvalDate = approvalDateDecoded
    }
}
