// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdatePatchBaselineOutputResponse: Equatable {
    /// <p>A set of rules used to include patches in the baseline.</p>
    public let approvalRules: PatchRuleGroup?
    /// <p>A list of explicitly approved patches for the baseline.</p>
    public let approvedPatches: [String]?
    /// <p>The compliance severity level assigned to the patch baseline after the update
    ///    completed.</p>
    public let approvedPatchesComplianceLevel: PatchComplianceLevel?
    /// <p>Indicates whether the list of approved patches includes non-security updates that should be
    ///    applied to the instances. The default value is 'false'. Applies to Linux instances only.</p>
    public let approvedPatchesEnableNonSecurity: Bool
    /// <p>The ID of the deleted patch baseline.</p>
    public let baselineId: String?
    /// <p>The date when the patch baseline was created.</p>
    public let createdDate: Date?
    /// <p>A description of the Patch Baseline.</p>
    public let description: String?
    /// <p>A set of global filters used to exclude patches from the baseline.</p>
    public let globalFilters: PatchFilterGroup?
    /// <p>The date when the patch baseline was last modified.</p>
    public let modifiedDate: Date?
    /// <p>The name of the patch baseline.</p>
    public let name: String?
    /// <p>The operating system rule used by the updated patch baseline.</p>
    public let operatingSystem: OperatingSystem?
    /// <p>A list of explicitly rejected patches for the baseline.</p>
    public let rejectedPatches: [String]?
    /// <p>The action specified to take on patches included in the RejectedPatches list. A patch can be
    ///    allowed only if it is a dependency of another package, or blocked entirely along with packages
    ///    that include it as a dependency.</p>
    public let rejectedPatchesAction: PatchAction?
    /// <p>Information about the patches to use to update the instances, including target operating
    ///    systems and source repositories. Applies to Linux instances only.</p>
    public let sources: [PatchSource]?

    public init (
        approvalRules: PatchRuleGroup? = nil,
        approvedPatches: [String]? = nil,
        approvedPatchesComplianceLevel: PatchComplianceLevel? = nil,
        approvedPatchesEnableNonSecurity: Bool = false,
        baselineId: String? = nil,
        createdDate: Date? = nil,
        description: String? = nil,
        globalFilters: PatchFilterGroup? = nil,
        modifiedDate: Date? = nil,
        name: String? = nil,
        operatingSystem: OperatingSystem? = nil,
        rejectedPatches: [String]? = nil,
        rejectedPatchesAction: PatchAction? = nil,
        sources: [PatchSource]? = nil
    )
    {
        self.approvalRules = approvalRules
        self.approvedPatches = approvedPatches
        self.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel
        self.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity
        self.baselineId = baselineId
        self.createdDate = createdDate
        self.description = description
        self.globalFilters = globalFilters
        self.modifiedDate = modifiedDate
        self.name = name
        self.operatingSystem = operatingSystem
        self.rejectedPatches = rejectedPatches
        self.rejectedPatchesAction = rejectedPatchesAction
        self.sources = sources
    }
}

extension UpdatePatchBaselineOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "UpdatePatchBaselineOutputResponse(approvalRules: \(String(describing: approvalRules)), approvedPatches: \(String(describing: approvedPatches)), approvedPatchesComplianceLevel: \(String(describing: approvedPatchesComplianceLevel)), approvedPatchesEnableNonSecurity: \(String(describing: approvedPatchesEnableNonSecurity)), baselineId: \(String(describing: baselineId)), createdDate: \(String(describing: createdDate)), description: \(String(describing: description)), globalFilters: \(String(describing: globalFilters)), modifiedDate: \(String(describing: modifiedDate)), name: \(String(describing: name)), operatingSystem: \(String(describing: operatingSystem)), rejectedPatches: \(String(describing: rejectedPatches)), rejectedPatchesAction: \(String(describing: rejectedPatchesAction)), sources: \(String(describing: sources)))"}
}
