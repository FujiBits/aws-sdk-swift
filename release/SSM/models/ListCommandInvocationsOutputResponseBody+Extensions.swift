// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListCommandInvocationsOutputResponseBody: Equatable {
    public let commandInvocations: [CommandInvocation]?
    public let nextToken: String?
}

extension ListCommandInvocationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case commandInvocations = "CommandInvocations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commandInvocationsContainer = try containerValues.decodeIfPresent([CommandInvocation?].self, forKey: .commandInvocations)
        var commandInvocationsDecoded0:[CommandInvocation]? = nil
        if let commandInvocationsContainer = commandInvocationsContainer {
            commandInvocationsDecoded0 = [CommandInvocation]()
            for structure0 in commandInvocationsContainer {
                if let structure0 = structure0 {
                    commandInvocationsDecoded0?.append(structure0)
                }
            }
        }
        commandInvocations = commandInvocationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
