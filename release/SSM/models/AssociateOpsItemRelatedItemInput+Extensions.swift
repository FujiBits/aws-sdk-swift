// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct AssociateOpsItemRelatedItemInputHeadersMiddleware: Middleware {
    public let id: String = "AssociateOpsItemRelatedItemInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateOpsItemRelatedItemInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateOpsItemRelatedItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateOpsItemRelatedItemInput>
    public typealias MOutput = OperationOutput<AssociateOpsItemRelatedItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateOpsItemRelatedItemOutputError>
}

public struct AssociateOpsItemRelatedItemInputQueryItemMiddleware: Middleware {
    public let id: String = "AssociateOpsItemRelatedItemInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateOpsItemRelatedItemInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateOpsItemRelatedItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateOpsItemRelatedItemInput>
    public typealias MOutput = OperationOutput<AssociateOpsItemRelatedItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateOpsItemRelatedItemOutputError>
}

public struct AssociateOpsItemRelatedItemInputBodyMiddleware: Middleware {
    public let id: String = "AssociateOpsItemRelatedItemInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<AssociateOpsItemRelatedItemInput>,
                  next: H) -> Swift.Result<OperationOutput<AssociateOpsItemRelatedItemOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<AssociateOpsItemRelatedItemInput>
    public typealias MOutput = OperationOutput<AssociateOpsItemRelatedItemOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<AssociateOpsItemRelatedItemOutputError>
}

extension AssociateOpsItemRelatedItemInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case associationType = "AssociationType"
        case opsItemId = "OpsItemId"
        case resourceType = "ResourceType"
        case resourceUri = "ResourceUri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationType = associationType {
            try encodeContainer.encode(associationType, forKey: .associationType)
        }
        if let opsItemId = opsItemId {
            try encodeContainer.encode(opsItemId, forKey: .opsItemId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let resourceUri = resourceUri {
            try encodeContainer.encode(resourceUri, forKey: .resourceUri)
        }
    }
}
