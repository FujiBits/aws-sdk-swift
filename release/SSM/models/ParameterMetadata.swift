// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// <p>Metadata includes information like the ARN of the last user and the date/time the parameter
///    was last used.</p>
public struct ParameterMetadata: Equatable {
    /// <p>A parameter name can include only the following letters and symbols.</p>
    ///          <p>a-zA-Z0-9_.-</p>
    public let allowedPattern: String?
    /// <p>The data type of the parameter, such as <code>text</code> or <code>aws:ec2:image</code>. The
    ///    default is <code>text</code>.</p>
    public let dataType: String?
    /// <p>Description of the parameter actions.</p>
    public let description: String?
    /// <p>The ID of the query key used for this parameter.</p>
    public let keyId: String?
    /// <p>Date the parameter was last changed or updated.</p>
    public let lastModifiedDate: Date?
    /// <p>Amazon Resource Name (ARN) of the AWS user who last changed the parameter.</p>
    public let lastModifiedUser: String?
    /// <p>The parameter name.</p>
    public let name: String?
    /// <p>A list of policies associated with a parameter.</p>
    public let policies: [ParameterInlinePolicy]?
    /// <p>The parameter tier.</p>
    public let tier: ParameterTier?
    /// <p>The type of parameter. Valid parameter types include the following: <code>String</code>,
    ///     <code>StringList</code>, and <code>SecureString</code>.</p>
    public let type: ParameterType?
    /// <p>The parameter version.</p>
    public let version: Int

    public init (
        allowedPattern: String? = nil,
        dataType: String? = nil,
        description: String? = nil,
        keyId: String? = nil,
        lastModifiedDate: Date? = nil,
        lastModifiedUser: String? = nil,
        name: String? = nil,
        policies: [ParameterInlinePolicy]? = nil,
        tier: ParameterTier? = nil,
        type: ParameterType? = nil,
        version: Int = 0
    )
    {
        self.allowedPattern = allowedPattern
        self.dataType = dataType
        self.description = description
        self.keyId = keyId
        self.lastModifiedDate = lastModifiedDate
        self.lastModifiedUser = lastModifiedUser
        self.name = name
        self.policies = policies
        self.tier = tier
        self.type = type
        self.version = version
    }
}

extension ParameterMetadata: CustomDebugStringConvertible {
    public var debugDescription: String {
        "ParameterMetadata(allowedPattern: \(String(describing: allowedPattern)), dataType: \(String(describing: dataType)), description: \(String(describing: description)), keyId: \(String(describing: keyId)), lastModifiedDate: \(String(describing: lastModifiedDate)), lastModifiedUser: \(String(describing: lastModifiedUser)), name: \(String(describing: name)), policies: \(String(describing: policies)), tier: \(String(describing: tier)), type: \(String(describing: type)), version: \(String(describing: version)))"}
}
