// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetDocumentOutputResponseBody: Equatable {
    public let name: String?
    public let createdDate: Date?
    public let displayName: String?
    public let versionName: String?
    public let documentVersion: String?
    public let status: DocumentStatus?
    public let statusInformation: String?
    public let content: String?
    public let documentType: DocumentType?
    public let documentFormat: DocumentFormat?
    public let requires: [DocumentRequires]?
    public let attachmentsContent: [AttachmentContent]?
    public let reviewStatus: ReviewStatus?
}

extension GetDocumentOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case attachmentsContent = "AttachmentsContent"
        case content = "Content"
        case createdDate = "CreatedDate"
        case displayName = "DisplayName"
        case documentFormat = "DocumentFormat"
        case documentType = "DocumentType"
        case documentVersion = "DocumentVersion"
        case name = "Name"
        case requires = "Requires"
        case reviewStatus = "ReviewStatus"
        case status = "Status"
        case statusInformation = "StatusInformation"
        case versionName = "VersionName"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let displayNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .displayName)
        displayName = displayNameDecoded
        let versionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .versionName)
        versionName = versionNameDecoded
        let documentVersionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .documentVersion)
        documentVersion = documentVersionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DocumentStatus.self, forKey: .status)
        status = statusDecoded
        let statusInformationDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusInformation)
        statusInformation = statusInformationDecoded
        let contentDecoded = try containerValues.decodeIfPresent(String.self, forKey: .content)
        content = contentDecoded
        let documentTypeDecoded = try containerValues.decodeIfPresent(DocumentType.self, forKey: .documentType)
        documentType = documentTypeDecoded
        let documentFormatDecoded = try containerValues.decodeIfPresent(DocumentFormat.self, forKey: .documentFormat)
        documentFormat = documentFormatDecoded
        let requiresContainer = try containerValues.decodeIfPresent([DocumentRequires?].self, forKey: .requires)
        var requiresDecoded0:[DocumentRequires]? = nil
        if let requiresContainer = requiresContainer {
            requiresDecoded0 = [DocumentRequires]()
            for structure0 in requiresContainer {
                if let structure0 = structure0 {
                    requiresDecoded0?.append(structure0)
                }
            }
        }
        requires = requiresDecoded0
        let attachmentsContentContainer = try containerValues.decodeIfPresent([AttachmentContent?].self, forKey: .attachmentsContent)
        var attachmentsContentDecoded0:[AttachmentContent]? = nil
        if let attachmentsContentContainer = attachmentsContentContainer {
            attachmentsContentDecoded0 = [AttachmentContent]()
            for structure0 in attachmentsContentContainer {
                if let structure0 = structure0 {
                    attachmentsContentDecoded0?.append(structure0)
                }
            }
        }
        attachmentsContent = attachmentsContentDecoded0
        let reviewStatusDecoded = try containerValues.decodeIfPresent(ReviewStatus.self, forKey: .reviewStatus)
        reviewStatus = reviewStatusDecoded
    }
}
