// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

extension PutInventoryOutputError: HttpResponseBinding {
    public init(httpResponse: HttpResponse, decoder: ResponseDecoder? = nil) throws {
        let errorDetails = try RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutInventoryOutputError {
    public init(errorType: String?, httpResponse: HttpResponse, decoder: ResponseDecoder? = nil, message: String? = nil, requestID: String? = nil) throws {
        switch errorType {
        case "CustomSchemaCountLimitExceededException" : self = .customSchemaCountLimitExceededException(try CustomSchemaCountLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerError" : self = .internalServerError(try InternalServerError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInstanceId" : self = .invalidInstanceId(try InvalidInstanceId(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInventoryItemContextException" : self = .invalidInventoryItemContextException(try InvalidInventoryItemContextException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidItemContentException" : self = .invalidItemContentException(try InvalidItemContentException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTypeNameException" : self = .invalidTypeNameException(try InvalidTypeNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemContentMismatchException" : self = .itemContentMismatchException(try ItemContentMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ItemSizeLimitExceededException" : self = .itemSizeLimitExceededException(try ItemSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SubTypeCountLimitExceededException" : self = .subTypeCountLimitExceededException(try SubTypeCountLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TotalSizeLimitExceededException" : self = .totalSizeLimitExceededException(try TotalSizeLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedInventoryItemContextException" : self = .unsupportedInventoryItemContextException(try UnsupportedInventoryItemContextException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedInventorySchemaVersionException" : self = .unsupportedInventorySchemaVersionException(try UnsupportedInventorySchemaVersionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}
