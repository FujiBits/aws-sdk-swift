// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetParametersByPathInput: Equatable {
    /// <p>The maximum number of items to return for this call. The call also returns a token that you
    ///    can specify in a subsequent call to get the next set of results.</p>
    public let maxResults: Int
    /// <p>A token to start the list. Use this token to get the next set of results. </p>
    public let nextToken: String?
    /// <p>Filters to limit the request results.</p>
    ///          <note>
    ///             <p>For <code>GetParametersByPath</code>, the following filter <code>Key</code> names are
    ///     supported: <code>Type</code>, <code>KeyId</code>, <code>Label</code>, and
    ///     <code>DataType</code>.</p>
    ///             <p>The following <code>Key</code> values are not supported for
    ///      <code>GetParametersByPath</code>: <code>tag</code>, <code>Name</code>, <code>Path</code>, and
    ///      <code>Tier</code>.</p>
    ///          </note>
    public let parameterFilters: [ParameterStringFilter]?
    /// <p>The hierarchy for the parameter. Hierarchies start with a forward slash (/). The hierachy is
    ///    the parameter name except the last part of the parameter. For the API call to succeeed, the last
    ///    part of the parameter name cannot be in the path. A parameter name hierarchy can have a maximum
    ///    of 15 levels. Here is an example of a hierarchy: <code>/Finance/Prod/IAD/WinServ2016/license33
    ///    </code>
    ///          </p>
    public let path: String?
    /// <p>Retrieve all parameters within a hierarchy.</p>
    ///          <important>
    ///             <p>If a user has access to a path, then the user can access all levels of that path. For
    ///     example, if a user has permission to access path <code>/a</code>, then the user can also access
    ///      <code>/a/b</code>. Even if a user has explicitly been denied access in IAM for parameter
    ///      <code>/a/b</code>, they can still call the GetParametersByPath API action recursively for
    ///      <code>/a</code> and view <code>/a/b</code>.</p>
    ///          </important>
    public let recursive: Bool
    /// <p>Retrieve all parameters in a hierarchy with their value decrypted.</p>
    public let withDecryption: Bool

    public init (
        maxResults: Int = 0,
        nextToken: String? = nil,
        parameterFilters: [ParameterStringFilter]? = nil,
        path: String? = nil,
        recursive: Bool = false,
        withDecryption: Bool = false
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.parameterFilters = parameterFilters
        self.path = path
        self.recursive = recursive
        self.withDecryption = withDecryption
    }
}

extension GetParametersByPathInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetParametersByPathInput(maxResults: \(String(describing: maxResults)), nextToken: \(String(describing: nextToken)), parameterFilters: \(String(describing: parameterFilters)), path: \(String(describing: path)), recursive: \(String(describing: recursive)), withDecryption: \(String(describing: withDecryption)))"}
}
