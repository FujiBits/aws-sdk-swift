// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct CreateMaintenanceWindowInput: Equatable {
    /// <p>Enables a maintenance window task to run on managed instances, even if you have not
    ///    registered those instances as targets. If enabled, then you must specify the unregistered
    ///    instances (by instance ID) when you register a task with the maintenance window.</p>
    ///          <p>If you don't enable this option, then you must specify previously-registered targets when
    ///    you register a task with the maintenance window.</p>
    public let allowUnassociatedTargets: Bool
    /// <p>User-provided idempotency token.</p>
    public var clientToken: String?
    /// <p>The number of hours before the end of the maintenance window that Systems Manager stops scheduling new
    ///    tasks for execution.</p>
    public let cutoff: Int
    /// <p>An optional description for the maintenance window. We recommend specifying a description to
    ///    help you organize your maintenance windows. </p>
    public let description: String?
    /// <p>The duration of the maintenance window in hours.</p>
    public let duration: Int
    /// <p>The date and time, in ISO-8601 Extended format, for when you want the maintenance window to
    ///    become inactive. EndDate allows you to set a date and time in the future when the maintenance
    ///    window will no longer run.</p>
    public let endDate: String?
    /// <p>The name of the maintenance window.</p>
    public let name: String?
    /// <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
    public let schedule: String?
    /// <p>The number of days to wait after the date and time specified by a CRON expression before
    ///    running the maintenance window.</p>
    ///          <p>For example, the following cron expression schedules a maintenance window to run on the
    ///    third Tuesday of every month at 11:30 PM.</p>
    ///          <p>
    ///             <code>cron(30 23 ? * TUE#3 *)</code>
    ///          </p>
    ///          <p>If the schedule offset is <code>2</code>, the maintenance window won't run until two days
    ///    later.</p>
    public let scheduleOffset: Int
    /// <p>The time zone that the scheduled maintenance window executions are based on, in Internet
    ///    Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or
    ///    "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time
    ///     Zone Database</a> on the IANA website.</p>
    public let scheduleTimezone: String?
    /// <p>The date and time, in ISO-8601 Extended format, for when you want the maintenance window to
    ///    become active. StartDate allows you to delay activation of the maintenance window until the
    ///    specified future date.</p>
    public let startDate: String?
    /// <p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in
    ///    different ways, such as by purpose, owner, or environment. For example, you might want to tag a
    ///    maintenance window to identify the type of tasks it will run, the types of targets, and the
    ///    environment it will run in. In this case, you could specify the following key name/value
    ///    pairs:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Key=TaskType,Value=AgentUpdate</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Key=OS,Value=Windows</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Key=Environment,Value=Production</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>To add tags to an existing maintenance window, use the <a>AddTagsToResource</a>
    ///     action.</p>
    ///          </note>
    public let tags: [Tag]?

    public init (
        allowUnassociatedTargets: Bool = false,
        clientToken: String? = nil,
        cutoff: Int = 0,
        description: String? = nil,
        duration: Int = 0,
        endDate: String? = nil,
        name: String? = nil,
        schedule: String? = nil,
        scheduleOffset: Int = 0,
        scheduleTimezone: String? = nil,
        startDate: String? = nil,
        tags: [Tag]? = nil
    )
    {
        self.allowUnassociatedTargets = allowUnassociatedTargets
        self.clientToken = clientToken
        self.cutoff = cutoff
        self.description = description
        self.duration = duration
        self.endDate = endDate
        self.name = name
        self.schedule = schedule
        self.scheduleOffset = scheduleOffset
        self.scheduleTimezone = scheduleTimezone
        self.startDate = startDate
        self.tags = tags
    }
}

extension CreateMaintenanceWindowInput: CustomDebugStringConvertible {
    public var debugDescription: String {
        "CreateMaintenanceWindowInput(allowUnassociatedTargets: \(String(describing: allowUnassociatedTargets)), clientToken: \(String(describing: clientToken)), cutoff: \(String(describing: cutoff)), description: \(String(describing: description)), duration: \(String(describing: duration)), endDate: \(String(describing: endDate)), name: \(String(describing: name)), schedule: \(String(describing: schedule)), scheduleOffset: \(String(describing: scheduleOffset)), scheduleTimezone: \(String(describing: scheduleTimezone)), startDate: \(String(describing: startDate)), tags: \(String(describing: tags)))"}
}
