// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InventoryGroup: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filters = "Filters"
        case name = "Name"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for inventoryfilterlist0 in filters {
                try filtersContainer.encode(inventoryfilterlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let filtersContainer = try containerValues.decodeIfPresent([InventoryFilter?].self, forKey: .filters)
        var filtersDecoded0:[InventoryFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [InventoryFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}
