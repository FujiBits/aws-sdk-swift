// Code generated by smithy-swift-codegen. DO NOT EDIT!



/// <p>Defines the basic information about a patch baseline override.</p>
public struct BaselineOverride: Equatable {
    /// <p>A set of rules defining the approval rules for a patch baseline.</p>
    public let approvalRules: PatchRuleGroup?
    /// <p>A list of explicitly approved patches for the baseline.</p>
    ///          <p>For information about accepted formats for lists of approved patches and rejected patches,
    ///                         see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About
    ///                         package name formats for approved and rejected patch lists</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    public let approvedPatches: [String]?
    /// <p>Defines the compliance level for approved patches. When an approved patch is reported as
    ///    missing, this value describes the severity of the compliance violation.</p>
    public let approvedPatchesComplianceLevel: PatchComplianceLevel?
    /// <p>Indicates whether the list of approved patches includes non-security updates that should be
    ///    applied to the instances. The default value is 'false'. Applies to Linux instances only.</p>
    public let approvedPatchesEnableNonSecurity: Bool
    /// <p>A set of patch filters, typically used for approval rules.</p>
    public let globalFilters: PatchFilterGroup?
    /// <p>The operating system rule used by the patch baseline override.</p>
    public let operatingSystem: OperatingSystem?
    /// <p>A list of explicitly rejected patches for the baseline.</p>
    ///          <p>For information about accepted formats for lists of approved patches and rejected patches,
    ///                         see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About
    ///                         package name formats for approved and rejected patch lists</a> in the <i>AWS Systems Manager User Guide</i>.</p>
    public let rejectedPatches: [String]?
    /// <p>The action for Patch Manager to take on patches included in the RejectedPackages list. A
    ///    patch can be allowed only if it is a dependency of another package, or blocked entirely along
    ///    with packages that include it as a dependency.</p>
    public let rejectedPatchesAction: PatchAction?
    /// <p>Information about the patches to use to update the instances, including target operating
    ///    systems and source repositories. Applies to Linux instances only.</p>
    public let sources: [PatchSource]?

    public init (
        approvalRules: PatchRuleGroup? = nil,
        approvedPatches: [String]? = nil,
        approvedPatchesComplianceLevel: PatchComplianceLevel? = nil,
        approvedPatchesEnableNonSecurity: Bool = false,
        globalFilters: PatchFilterGroup? = nil,
        operatingSystem: OperatingSystem? = nil,
        rejectedPatches: [String]? = nil,
        rejectedPatchesAction: PatchAction? = nil,
        sources: [PatchSource]? = nil
    )
    {
        self.approvalRules = approvalRules
        self.approvedPatches = approvedPatches
        self.approvedPatchesComplianceLevel = approvedPatchesComplianceLevel
        self.approvedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity
        self.globalFilters = globalFilters
        self.operatingSystem = operatingSystem
        self.rejectedPatches = rejectedPatches
        self.rejectedPatchesAction = rejectedPatchesAction
        self.sources = sources
    }
}

extension BaselineOverride: CustomDebugStringConvertible {
    public var debugDescription: String {
        "BaselineOverride(approvalRules: \(String(describing: approvalRules)), approvedPatches: \(String(describing: approvedPatches)), approvedPatchesComplianceLevel: \(String(describing: approvedPatchesComplianceLevel)), approvedPatchesEnableNonSecurity: \(String(describing: approvedPatchesEnableNonSecurity)), globalFilters: \(String(describing: globalFilters)), operatingSystem: \(String(describing: operatingSystem)), rejectedPatches: \(String(describing: rejectedPatches)), rejectedPatchesAction: \(String(describing: rejectedPatchesAction)), sources: \(String(describing: sources)))"}
}
