// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct CreateActivationInputBody: Equatable {
    public let description: String?
    public let defaultInstanceName: String?
    public let iamRole: String?
    public let registrationLimit: Int
    public let expirationDate: Date?
    public let tags: [Tag]?
}

extension CreateActivationInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case defaultInstanceName = "DefaultInstanceName"
        case description = "Description"
        case expirationDate = "ExpirationDate"
        case iamRole = "IamRole"
        case registrationLimit = "RegistrationLimit"
        case tags = "Tags"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let defaultInstanceNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .defaultInstanceName)
        defaultInstanceName = defaultInstanceNameDecoded
        let iamRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .iamRole)
        iamRole = iamRoleDecoded
        let registrationLimitDecoded = try containerValues.decode(Int.self, forKey: .registrationLimit)
        registrationLimit = registrationLimitDecoded
        let expirationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .expirationDate)
        expirationDate = expirationDateDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Tag?].self, forKey: .tags)
        var tagsDecoded0:[Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}
