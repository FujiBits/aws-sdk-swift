// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetInventoryInputBody: Equatable {
    public let filters: [InventoryFilter]?
    public let aggregators: [InventoryAggregator]?
    public let resultAttributes: [ResultAttribute]?
    public let nextToken: String?
    public let maxResults: Int
}

extension GetInventoryInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aggregators = "Aggregators"
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resultAttributes = "ResultAttributes"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersContainer = try containerValues.decodeIfPresent([InventoryFilter?].self, forKey: .filters)
        var filtersDecoded0:[InventoryFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [InventoryFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let aggregatorsContainer = try containerValues.decodeIfPresent([InventoryAggregator?].self, forKey: .aggregators)
        var aggregatorsDecoded0:[InventoryAggregator]? = nil
        if let aggregatorsContainer = aggregatorsContainer {
            aggregatorsDecoded0 = [InventoryAggregator]()
            for structure0 in aggregatorsContainer {
                if let structure0 = structure0 {
                    aggregatorsDecoded0?.append(structure0)
                }
            }
        }
        aggregators = aggregatorsDecoded0
        let resultAttributesContainer = try containerValues.decodeIfPresent([ResultAttribute?].self, forKey: .resultAttributes)
        var resultAttributesDecoded0:[ResultAttribute]? = nil
        if let resultAttributesContainer = resultAttributesContainer {
            resultAttributesDecoded0 = [ResultAttribute]()
            for structure0 in resultAttributesContainer {
                if let structure0 = structure0 {
                    resultAttributesDecoded0?.append(structure0)
                }
            }
        }
        resultAttributes = resultAttributesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}
