// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMaintenanceWindowTaskOutputResponseBody: Equatable {
    public let windowId: String?
    public let windowTaskId: String?
    public let targets: [Target]?
    public let taskArn: String?
    public let serviceRoleArn: String?
    public let taskType: MaintenanceWindowTaskType?
    public let taskParameters: [String:MaintenanceWindowTaskParameterValueExpression]?
    public let taskInvocationParameters: MaintenanceWindowTaskInvocationParameters?
    public let priority: Int
    public let maxConcurrency: String?
    public let maxErrors: String?
    public let loggingInfo: LoggingInfo?
    public let name: String?
    public let description: String?
}

extension GetMaintenanceWindowTaskOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case description = "Description"
        case loggingInfo = "LoggingInfo"
        case maxConcurrency = "MaxConcurrency"
        case maxErrors = "MaxErrors"
        case name = "Name"
        case priority = "Priority"
        case serviceRoleArn = "ServiceRoleArn"
        case targets = "Targets"
        case taskArn = "TaskArn"
        case taskInvocationParameters = "TaskInvocationParameters"
        case taskParameters = "TaskParameters"
        case taskType = "TaskType"
        case windowId = "WindowId"
        case windowTaskId = "WindowTaskId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let windowIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .windowId)
        windowId = windowIdDecoded
        let windowTaskIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .windowTaskId)
        windowTaskId = windowTaskIdDecoded
        let targetsContainer = try containerValues.decodeIfPresent([Target?].self, forKey: .targets)
        var targetsDecoded0:[Target]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Target]()
            for structure0 in targetsContainer {
                if let structure0 = structure0 {
                    targetsDecoded0?.append(structure0)
                }
            }
        }
        targets = targetsDecoded0
        let taskArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let serviceRoleArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRoleArn)
        serviceRoleArn = serviceRoleArnDecoded
        let taskTypeDecoded = try containerValues.decodeIfPresent(MaintenanceWindowTaskType.self, forKey: .taskType)
        taskType = taskTypeDecoded
        let taskParametersContainer = try containerValues.decodeIfPresent([String: MaintenanceWindowTaskParameterValueExpression?].self, forKey: .taskParameters)
        var taskParametersDecoded0: [String:MaintenanceWindowTaskParameterValueExpression]? = nil
        if let taskParametersContainer = taskParametersContainer {
            taskParametersDecoded0 = [String:MaintenanceWindowTaskParameterValueExpression]()
            for (key0, maintenancewindowtaskparametervalueexpression0) in taskParametersContainer {
                if let maintenancewindowtaskparametervalueexpression0 = maintenancewindowtaskparametervalueexpression0 {
                    taskParametersDecoded0?[key0] = maintenancewindowtaskparametervalueexpression0
                }
            }
        }
        taskParameters = taskParametersDecoded0
        let taskInvocationParametersDecoded = try containerValues.decodeIfPresent(MaintenanceWindowTaskInvocationParameters.self, forKey: .taskInvocationParameters)
        taskInvocationParameters = taskInvocationParametersDecoded
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maxConcurrency)
        maxConcurrency = maxConcurrencyDecoded
        let maxErrorsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maxErrors)
        maxErrors = maxErrorsDecoded
        let loggingInfoDecoded = try containerValues.decodeIfPresent(LoggingInfo.self, forKey: .loggingInfo)
        loggingInfo = loggingInfoDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
    }
}
