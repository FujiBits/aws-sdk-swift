// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetCommandInvocationOutputResponse: Equatable {
    /// <p>CloudWatch Logs information where Systems Manager sent the command output.</p>
    public let cloudWatchOutputConfig: CloudWatchOutputConfig?
    /// <p>The parent command ID of the invocation plugin.</p>
    public let commandId: String?
    /// <p>The comment text for the command.</p>
    public let comment: String?
    /// <p>The name of the document that was run. For example, <code>AWS-RunShellScript</code>.</p>
    public let documentName: String?
    /// <p>The SSM document version used in the request.</p>
    public let documentVersion: String?
    /// <p>Duration since <code>ExecutionStartDateTime</code>.</p>
    public let executionElapsedTime: String?
    /// <p>The date and time the plugin finished running. Date and time are written in ISO 8601 format.
    ///    For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses
    ///    the <code>InvokedAfter</code> filter.</p>
    ///          <p>
    ///             <code>aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z</code>
    ///          </p>
    ///          <p>If the plugin has not started to run, the string is empty.</p>
    public let executionEndDateTime: String?
    /// <p>The date and time the plugin started running. Date and time are written in ISO 8601 format.
    ///    For example, June 7, 2017 is represented as 2017-06-7. The following sample AWS CLI command uses
    ///    the <code>InvokedBefore</code> filter.</p>
    ///          <p>
    ///             <code>aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z</code>
    ///          </p>
    ///          <p>If the plugin has not started to run, the string is empty.</p>
    public let executionStartDateTime: String?
    /// <p>The ID of the managed instance targeted by the command. A managed instance can be an EC2
    ///    instance or an instance in your hybrid environment that is configured for Systems Manager.</p>
    public let instanceId: String?
    /// <p>The name of the plugin, or <i>step name</i>, for which details are reported.
    ///    For example, <code>aws:RunShellScript</code> is a plugin.</p>
    public let pluginName: String?
    /// <p>The error level response code for the plugin script. If the response code is
    ///    <code>-1</code>, then the command has not started running on the instance, or it was not received
    ///    by the instance.</p>
    public let responseCode: Int
    /// <p>The first 8,000 characters written by the plugin to <code>stderr</code>. If the command has
    ///    not finished running, then this string is empty.</p>
    public let standardErrorContent: String?
    /// <p>The URL for the complete text written by the plugin to <code>stderr</code>. If the command
    ///    has not finished running, then this string is empty.</p>
    public let standardErrorUrl: String?
    /// <p>The first 24,000 characters written by the plugin to <code>stdout</code>. If the command has
    ///    not finished running, if <code>ExecutionStatus</code> is neither Succeeded nor Failed, then this
    ///    string is empty.</p>
    public let standardOutputContent: String?
    /// <p>The URL for the complete text written by the plugin to <code>stdout</code> in Amazon Simple Storage Service
    ///    (Amazon S3). If an S3 bucket was not specified, then this string is empty.</p>
    public let standardOutputUrl: String?
    /// <p>The status of this invocation plugin. This status can be different than
    ///     <code>StatusDetails</code>.</p>
    public let status: CommandInvocationStatus?
    /// <p>A detailed status of the command execution for an invocation. <code>StatusDetails</code>
    ///    includes more information than <code>Status</code> because it includes states resulting from
    ///    error and concurrency control parameters. <code>StatusDetails</code> can show different results
    ///    than <code>Status</code>. For more information about these statuses, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding
    ///     command statuses</a> in the <i>AWS Systems Manager User Guide</i>.
    ///     <code>StatusDetails</code> can be one of the following values:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Pending: The command has not been sent to the instance.</p>
    ///             </li>
    ///             <li>
    ///                <p>In Progress: The command has been sent to the instance but has not reached a terminal
    ///      state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Delayed: The system attempted to send the command to the target, but the target was not
    ///      available. The instance might not be available because of network issues, because the instance
    ///      was stopped, or for similar reasons. The system will try to send the command again.</p>
    ///             </li>
    ///             <li>
    ///                <p>Success: The command or plugin ran successfully. This is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Delivery Timed Out: The command was not delivered to the instance before the delivery
    ///      timeout expired. Delivery timeouts do not count against the parent command's
    ///       <code>MaxErrors</code> limit, but they do contribute to whether the parent command status is
    ///      Success or Incomplete. This is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Execution Timed Out: The command started to run on the instance, but the execution was not
    ///      complete before the timeout expired. Execution timeouts count against the
    ///       <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Failed: The command wasn't run successfully on the instance. For a plugin, this indicates
    ///      that the result code was not zero. For a command invocation, this indicates that the result
    ///      code for one or more plugins was not zero. Invocation failures count against the
    ///       <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Canceled: The command was terminated before it was completed. This is a terminal
    ///      state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Undeliverable: The command can't be delivered to the instance. The instance might not
    ///      exist or might not be responding. Undeliverable invocations don't count against the parent
    ///      command's <code>MaxErrors</code> limit and don't contribute to whether the parent command
    ///      status is Success or Incomplete. This is a terminal state.</p>
    ///             </li>
    ///             <li>
    ///                <p>Terminated: The parent command exceeded its <code>MaxErrors</code> limit and subsequent
    ///      command invocations were canceled by the system. This is a terminal state.</p>
    ///             </li>
    ///          </ul>
    public let statusDetails: String?

    public init (
        cloudWatchOutputConfig: CloudWatchOutputConfig? = nil,
        commandId: String? = nil,
        comment: String? = nil,
        documentName: String? = nil,
        documentVersion: String? = nil,
        executionElapsedTime: String? = nil,
        executionEndDateTime: String? = nil,
        executionStartDateTime: String? = nil,
        instanceId: String? = nil,
        pluginName: String? = nil,
        responseCode: Int = 0,
        standardErrorContent: String? = nil,
        standardErrorUrl: String? = nil,
        standardOutputContent: String? = nil,
        standardOutputUrl: String? = nil,
        status: CommandInvocationStatus? = nil,
        statusDetails: String? = nil
    )
    {
        self.cloudWatchOutputConfig = cloudWatchOutputConfig
        self.commandId = commandId
        self.comment = comment
        self.documentName = documentName
        self.documentVersion = documentVersion
        self.executionElapsedTime = executionElapsedTime
        self.executionEndDateTime = executionEndDateTime
        self.executionStartDateTime = executionStartDateTime
        self.instanceId = instanceId
        self.pluginName = pluginName
        self.responseCode = responseCode
        self.standardErrorContent = standardErrorContent
        self.standardErrorUrl = standardErrorUrl
        self.standardOutputContent = standardOutputContent
        self.standardOutputUrl = standardOutputUrl
        self.status = status
        self.statusDetails = statusDetails
    }
}

extension GetCommandInvocationOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetCommandInvocationOutputResponse(cloudWatchOutputConfig: \(String(describing: cloudWatchOutputConfig)), commandId: \(String(describing: commandId)), comment: \(String(describing: comment)), documentName: \(String(describing: documentName)), documentVersion: \(String(describing: documentVersion)), executionElapsedTime: \(String(describing: executionElapsedTime)), executionEndDateTime: \(String(describing: executionEndDateTime)), executionStartDateTime: \(String(describing: executionStartDateTime)), instanceId: \(String(describing: instanceId)), pluginName: \(String(describing: pluginName)), responseCode: \(String(describing: responseCode)), standardErrorContent: \(String(describing: standardErrorContent)), standardErrorUrl: \(String(describing: standardErrorUrl)), standardOutputContent: \(String(describing: standardOutputContent)), standardOutputUrl: \(String(describing: standardOutputUrl)), status: \(String(describing: status)), statusDetails: \(String(describing: statusDetails)))"}
}
