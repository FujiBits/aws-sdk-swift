// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension DocumentReviews: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action = "Action"
        case comment = "Comment"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let comment = comment {
            var commentContainer = encodeContainer.nestedUnkeyedContainer(forKey: .comment)
            for documentreviewcommentlist0 in comment {
                try commentContainer.encode(documentreviewcommentlist0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(DocumentReviewAction.self, forKey: .action)
        action = actionDecoded
        let commentContainer = try containerValues.decodeIfPresent([DocumentReviewCommentSource?].self, forKey: .comment)
        var commentDecoded0:[DocumentReviewCommentSource]? = nil
        if let commentContainer = commentContainer {
            commentDecoded0 = [DocumentReviewCommentSource]()
            for structure0 in commentContainer {
                if let structure0 = structure0 {
                    commentDecoded0?.append(structure0)
                }
            }
        }
        comment = commentDecoded0
    }
}
