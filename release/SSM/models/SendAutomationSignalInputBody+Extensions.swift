// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct SendAutomationSignalInputBody: Equatable {
    public let automationExecutionId: String?
    public let signalType: SignalType?
    public let payload: [String:[String]]?
}

extension SendAutomationSignalInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case automationExecutionId = "AutomationExecutionId"
        case payload = "Payload"
        case signalType = "SignalType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automationExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .automationExecutionId)
        automationExecutionId = automationExecutionIdDecoded
        let signalTypeDecoded = try containerValues.decodeIfPresent(SignalType.self, forKey: .signalType)
        signalType = signalTypeDecoded
        let payloadContainer = try containerValues.decodeIfPresent([String: [String?]?].self, forKey: .payload)
        var payloadDecoded0: [String:[String]]? = nil
        if let payloadContainer = payloadContainer {
            payloadDecoded0 = [String:[String]]()
            for (key0, automationparametervaluelist0) in payloadContainer {
                var automationparametervaluelist0Decoded0: [String]? = nil
                if let automationparametervaluelist0 = automationparametervaluelist0 {
                    automationparametervaluelist0Decoded0 = [String]()
                    for string1 in automationparametervaluelist0 {
                        if let string1 = string1 {
                            automationparametervaluelist0Decoded0?.append(string1)
                        }
                    }
                }
                payloadDecoded0?[key0] = automationparametervaluelist0Decoded0
            }
        }
        payload = payloadDecoded0
    }
}
