// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ReviewInformation: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case reviewedTime = "ReviewedTime"
        case reviewer = "Reviewer"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reviewedTime = reviewedTime {
            try encodeContainer.encode(reviewedTime.timeIntervalSince1970, forKey: .reviewedTime)
        }
        if let reviewer = reviewer {
            try encodeContainer.encode(reviewer, forKey: .reviewer)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reviewedTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .reviewedTime)
        reviewedTime = reviewedTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ReviewStatus.self, forKey: .status)
        status = statusDecoded
        let reviewerDecoded = try containerValues.decodeIfPresent(String.self, forKey: .reviewer)
        reviewer = reviewerDecoded
    }
}
