// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartAutomationExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "StartAutomationExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartAutomationExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartAutomationExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartAutomationExecutionInput>
    public typealias MOutput = OperationOutput<StartAutomationExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartAutomationExecutionOutputError>
}

public struct StartAutomationExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "StartAutomationExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartAutomationExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartAutomationExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartAutomationExecutionInput>
    public typealias MOutput = OperationOutput<StartAutomationExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartAutomationExecutionOutputError>
}

public struct StartAutomationExecutionInputBodyMiddleware: Middleware {
    public let id: String = "StartAutomationExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartAutomationExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartAutomationExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartAutomationExecutionInput>
    public typealias MOutput = OperationOutput<StartAutomationExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartAutomationExecutionOutputError>
}

extension StartAutomationExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case clientToken = "ClientToken"
        case documentName = "DocumentName"
        case documentVersion = "DocumentVersion"
        case maxConcurrency = "MaxConcurrency"
        case maxErrors = "MaxErrors"
        case mode = "Mode"
        case parameters = "Parameters"
        case tags = "Tags"
        case targetLocations = "TargetLocations"
        case targetMaps = "TargetMaps"
        case targetParameterName = "TargetParameterName"
        case targets = "Targets"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let documentName = documentName {
            try encodeContainer.encode(documentName, forKey: .documentName)
        }
        if let documentVersion = documentVersion {
            try encodeContainer.encode(documentVersion, forKey: .documentVersion)
        }
        if let maxConcurrency = maxConcurrency {
            try encodeContainer.encode(maxConcurrency, forKey: .maxConcurrency)
        }
        if let maxErrors = maxErrors {
            try encodeContainer.encode(maxErrors, forKey: .maxErrors)
        }
        if let mode = mode {
            try encodeContainer.encode(mode.rawValue, forKey: .mode)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .parameters)
            for (dictKey0, automationparametermap0) in parameters {
                try parametersContainer.encode(automationparametermap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let targetLocations = targetLocations {
            var targetLocationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetLocations)
            for targetlocations0 in targetLocations {
                try targetLocationsContainer.encode(targetlocations0)
            }
        }
        if let targetMaps = targetMaps {
            var targetMapsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetMaps)
            for targetmaps0 in targetMaps {
                var targetmaps0Container = targetMapsContainer.nestedContainer(keyedBy: Key.self)
                for (dictKey1, targetmap1) in targetmaps0 {
                    var targetmap1Container = targetmaps0Container.nestedContainer(keyedBy: Key.self)
                    for (dictKey2, targetmapvaluelist2) in targetmap1 {
                        try targetmap1Container.encode(targetmapvaluelist2, forKey: Key(stringValue: dictKey2))
                    }
                }
            }
        }
        if let targetParameterName = targetParameterName {
            try encodeContainer.encode(targetParameterName, forKey: .targetParameterName)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for targets0 in targets {
                try targetsContainer.encode(targets0)
            }
        }
    }
}
