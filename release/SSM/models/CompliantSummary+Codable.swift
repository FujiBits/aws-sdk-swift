// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension CompliantSummary: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case compliantCount = "CompliantCount"
        case severitySummary = "SeveritySummary"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if compliantCount != 0 {
            try encodeContainer.encode(compliantCount, forKey: .compliantCount)
        }
        if let severitySummary = severitySummary {
            try encodeContainer.encode(severitySummary, forKey: .severitySummary)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compliantCountDecoded = try containerValues.decode(Int.self, forKey: .compliantCount)
        compliantCount = compliantCountDecoded
        let severitySummaryDecoded = try containerValues.decodeIfPresent(SeveritySummary.self, forKey: .severitySummary)
        severitySummary = severitySummaryDecoded
    }
}
