// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension MaintenanceWindowTaskInvocationParameters: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case automation = "Automation"
        case lambda = "Lambda"
        case runCommand = "RunCommand"
        case stepFunctions = "StepFunctions"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let automation = automation {
            try encodeContainer.encode(automation, forKey: .automation)
        }
        if let lambda = lambda {
            try encodeContainer.encode(lambda, forKey: .lambda)
        }
        if let runCommand = runCommand {
            try encodeContainer.encode(runCommand, forKey: .runCommand)
        }
        if let stepFunctions = stepFunctions {
            try encodeContainer.encode(stepFunctions, forKey: .stepFunctions)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let runCommandDecoded = try containerValues.decodeIfPresent(MaintenanceWindowRunCommandParameters.self, forKey: .runCommand)
        runCommand = runCommandDecoded
        let automationDecoded = try containerValues.decodeIfPresent(MaintenanceWindowAutomationParameters.self, forKey: .automation)
        automation = automationDecoded
        let stepFunctionsDecoded = try containerValues.decodeIfPresent(MaintenanceWindowStepFunctionsParameters.self, forKey: .stepFunctions)
        stepFunctions = stepFunctionsDecoded
        let lambdaDecoded = try containerValues.decodeIfPresent(MaintenanceWindowLambdaParameters.self, forKey: .lambda)
        lambda = lambdaDecoded
    }
}
