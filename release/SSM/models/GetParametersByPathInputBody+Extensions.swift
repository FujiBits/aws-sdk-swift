// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetParametersByPathInputBody: Equatable {
    public let path: String?
    public let recursive: Bool
    public let parameterFilters: [ParameterStringFilter]?
    public let withDecryption: Bool
    public let maxResults: Int
    public let nextToken: String?
}

extension GetParametersByPathInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case parameterFilters = "ParameterFilters"
        case path = "Path"
        case recursive = "Recursive"
        case withDecryption = "WithDecryption"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pathDecoded = try containerValues.decodeIfPresent(String.self, forKey: .path)
        path = pathDecoded
        let recursiveDecoded = try containerValues.decode(Bool.self, forKey: .recursive)
        recursive = recursiveDecoded
        let parameterFiltersContainer = try containerValues.decodeIfPresent([ParameterStringFilter?].self, forKey: .parameterFilters)
        var parameterFiltersDecoded0:[ParameterStringFilter]? = nil
        if let parameterFiltersContainer = parameterFiltersContainer {
            parameterFiltersDecoded0 = [ParameterStringFilter]()
            for structure0 in parameterFiltersContainer {
                if let structure0 = structure0 {
                    parameterFiltersDecoded0?.append(structure0)
                }
            }
        }
        parameterFilters = parameterFiltersDecoded0
        let withDecryptionDecoded = try containerValues.decode(Bool.self, forKey: .withDecryption)
        withDecryption = withDecryptionDecoded
        let maxResultsDecoded = try containerValues.decode(Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
