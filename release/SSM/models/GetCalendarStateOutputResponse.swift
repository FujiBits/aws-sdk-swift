// Code generated by smithy-swift-codegen. DO NOT EDIT!



public struct GetCalendarStateOutputResponse: Equatable {
    /// <p>The time, as an <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> string,
    ///    that you specified in your command. If you did not specify a time, <code>GetCalendarState</code>
    ///    uses the current time.</p>
    public let atTime: String?
    /// <p>The time, as an <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> string,
    ///    that the calendar state will change. If the current calendar state is <code>OPEN</code>,
    ///     <code>NextTransitionTime</code> indicates when the calendar state changes to
    ///    <code>CLOSED</code>, and vice-versa.</p>
    public let nextTransitionTime: String?
    /// <p>The state of the calendar. An <code>OPEN</code> calendar indicates that actions are allowed
    ///    to proceed, and a <code>CLOSED</code> calendar indicates that actions are not allowed to
    ///    proceed.</p>
    public let state: CalendarState?

    public init (
        atTime: String? = nil,
        nextTransitionTime: String? = nil,
        state: CalendarState? = nil
    )
    {
        self.atTime = atTime
        self.nextTransitionTime = nextTransitionTime
        self.state = state
    }
}

extension GetCalendarStateOutputResponse: CustomDebugStringConvertible {
    public var debugDescription: String {
        "GetCalendarStateOutputResponse(atTime: \(String(describing: atTime)), nextTransitionTime: \(String(describing: nextTransitionTime)), state: \(String(describing: state)))"}
}
