// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension Parameter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case aRN = "ARN"
        case dataType = "DataType"
        case lastModifiedDate = "LastModifiedDate"
        case name = "Name"
        case selector = "Selector"
        case sourceResult = "SourceResult"
        case type = "Type"
        case value = "Value"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aRN = aRN {
            try encodeContainer.encode(aRN, forKey: .aRN)
        }
        if let dataType = dataType {
            try encodeContainer.encode(dataType, forKey: .dataType)
        }
        if let lastModifiedDate = lastModifiedDate {
            try encodeContainer.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let selector = selector {
            try encodeContainer.encode(selector, forKey: .selector)
        }
        if let sourceResult = sourceResult {
            try encodeContainer.encode(sourceResult, forKey: .sourceResult)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(ParameterType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(String.self, forKey: .value)
        value = valueDecoded
        let versionDecoded = try containerValues.decode(Int.self, forKey: .version)
        version = versionDecoded
        let selectorDecoded = try containerValues.decodeIfPresent(String.self, forKey: .selector)
        selector = selectorDecoded
        let sourceResultDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sourceResult)
        sourceResult = sourceResultDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let aRNDecoded = try containerValues.decodeIfPresent(String.self, forKey: .aRN)
        aRN = aRNDecoded
        let dataTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .dataType)
        dataType = dataTypeDecoded
    }
}
