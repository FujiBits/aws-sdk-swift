// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct PutComplianceItemsInputBody: Equatable {
    public let resourceId: String?
    public let resourceType: String?
    public let complianceType: String?
    public let executionSummary: ComplianceExecutionSummary?
    public let items: [ComplianceItemEntry]?
    public let itemContentHash: String?
    public let uploadType: ComplianceUploadType?
}

extension PutComplianceItemsInputBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case complianceType = "ComplianceType"
        case executionSummary = "ExecutionSummary"
        case itemContentHash = "ItemContentHash"
        case items = "Items"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case uploadType = "UploadType"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(String.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let executionSummaryDecoded = try containerValues.decodeIfPresent(ComplianceExecutionSummary.self, forKey: .executionSummary)
        executionSummary = executionSummaryDecoded
        let itemsContainer = try containerValues.decodeIfPresent([ComplianceItemEntry?].self, forKey: .items)
        var itemsDecoded0:[ComplianceItemEntry]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [ComplianceItemEntry]()
            for structure0 in itemsContainer {
                if let structure0 = structure0 {
                    itemsDecoded0?.append(structure0)
                }
            }
        }
        items = itemsDecoded0
        let itemContentHashDecoded = try containerValues.decodeIfPresent(String.self, forKey: .itemContentHash)
        itemContentHash = itemContentHashDecoded
        let uploadTypeDecoded = try containerValues.decodeIfPresent(ComplianceUploadType.self, forKey: .uploadType)
        uploadType = uploadTypeDecoded
    }
}
