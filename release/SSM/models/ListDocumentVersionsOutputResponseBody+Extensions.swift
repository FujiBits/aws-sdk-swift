// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDocumentVersionsOutputResponseBody: Equatable {
    public let documentVersions: [DocumentVersionInfo]?
    public let nextToken: String?
}

extension ListDocumentVersionsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case documentVersions = "DocumentVersions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentVersionsContainer = try containerValues.decodeIfPresent([DocumentVersionInfo?].self, forKey: .documentVersions)
        var documentVersionsDecoded0:[DocumentVersionInfo]? = nil
        if let documentVersionsContainer = documentVersionsContainer {
            documentVersionsDecoded0 = [DocumentVersionInfo]()
            for structure0 in documentVersionsContainer {
                if let structure0 = structure0 {
                    documentVersionsDecoded0?.append(structure0)
                }
            }
        }
        documentVersions = documentVersionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
