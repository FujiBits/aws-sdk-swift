// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension InstanceInformationFilter: Codable, Reflection {
    enum CodingKeys: String, CodingKey {
        case key
        case valueSet
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key.rawValue, forKey: .key)
        }
        if let valueSet = valueSet {
            var valueSetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .valueSet)
            for instanceinformationfiltervalueset0 in valueSet {
                try valueSetContainer.encode(instanceinformationfiltervalueset0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(InstanceInformationFilterKey.self, forKey: .key)
        key = keyDecoded
        let valueSetContainer = try containerValues.decodeIfPresent([String?].self, forKey: .valueSet)
        var valueSetDecoded0:[String]? = nil
        if let valueSetContainer = valueSetContainer {
            valueSetDecoded0 = [String]()
            for string0 in valueSetContainer {
                if let string0 = string0 {
                    valueSetDecoded0?.append(string0)
                }
            }
        }
        valueSet = valueSetDecoded0
    }
}
