// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct GetMaintenanceWindowExecutionTaskOutputResponseBody: Equatable {
    public let windowExecutionId: String?
    public let taskExecutionId: String?
    public let taskArn: String?
    public let serviceRole: String?
    public let type: MaintenanceWindowTaskType?
    public let taskParameters: [[String:MaintenanceWindowTaskParameterValueExpression]]?
    public let priority: Int
    public let maxConcurrency: String?
    public let maxErrors: String?
    public let status: MaintenanceWindowExecutionStatus?
    public let statusDetails: String?
    public let startTime: Date?
    public let endTime: Date?
}

extension GetMaintenanceWindowExecutionTaskOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case endTime = "EndTime"
        case maxConcurrency = "MaxConcurrency"
        case maxErrors = "MaxErrors"
        case priority = "Priority"
        case serviceRole = "ServiceRole"
        case startTime = "StartTime"
        case status = "Status"
        case statusDetails = "StatusDetails"
        case taskArn = "TaskArn"
        case taskExecutionId = "TaskExecutionId"
        case taskParameters = "TaskParameters"
        case type = "Type"
        case windowExecutionId = "WindowExecutionId"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let windowExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .windowExecutionId)
        windowExecutionId = windowExecutionIdDecoded
        let taskExecutionIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskExecutionId)
        taskExecutionId = taskExecutionIdDecoded
        let taskArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let typeDecoded = try containerValues.decodeIfPresent(MaintenanceWindowTaskType.self, forKey: .type)
        type = typeDecoded
        let taskParametersContainer = try containerValues.decodeIfPresent([[String: MaintenanceWindowTaskParameterValueExpression?]?].self, forKey: .taskParameters)
        var taskParametersDecoded0:[[String:MaintenanceWindowTaskParameterValueExpression]]? = nil
        if let taskParametersContainer = taskParametersContainer {
            taskParametersDecoded0 = [[String:MaintenanceWindowTaskParameterValueExpression]]()
            for map0 in taskParametersContainer {
                var taskParametersContainerDecoded0: [String: MaintenanceWindowTaskParameterValueExpression]? = nil
                if let map0 = map0 {
                    taskParametersContainerDecoded0 = [String: MaintenanceWindowTaskParameterValueExpression]()
                    for (key1, maintenancewindowtaskparametervalueexpression1) in map0 {
                        if let maintenancewindowtaskparametervalueexpression1 = maintenancewindowtaskparametervalueexpression1 {
                            taskParametersContainerDecoded0?[key1] = maintenancewindowtaskparametervalueexpression1
                        }
                    }
                }
                if let taskParametersContainerDecoded0 = taskParametersContainerDecoded0 {
                    taskParametersDecoded0?.append(taskParametersContainerDecoded0)
                }
            }
        }
        taskParameters = taskParametersDecoded0
        let priorityDecoded = try containerValues.decode(Int.self, forKey: .priority)
        priority = priorityDecoded
        let maxConcurrencyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maxConcurrency)
        maxConcurrency = maxConcurrencyDecoded
        let maxErrorsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .maxErrors)
        maxErrors = maxErrorsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MaintenanceWindowExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let statusDetailsDecoded = try containerValues.decodeIfPresent(String.self, forKey: .statusDetails)
        statusDetails = statusDetailsDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}
