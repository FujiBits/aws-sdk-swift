// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(message: \(Swift.String(describing: message)))"}
}

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///  You don't have permissions to perform the requested operation. The user or role that is making the request must have at
/// 			least one IAM permissions policy attached that grants the required permissions. For more information, see
/// 			<a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management in the IAM User Guide.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct AddNotificationChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddNotificationChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddNotificationChannelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddNotificationChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddNotificationChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddNotificationChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddNotificationChannelOutputError>
}

extension AddNotificationChannelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddNotificationChannelInput(config: \(Swift.String(describing: config)))"}
}

extension AddNotificationChannelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case config = "Config"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let config = config {
            try encodeContainer.encode(config, forKey: .config)
        }
    }
}

public struct AddNotificationChannelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddNotificationChannelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddNotificationChannelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddNotificationChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddNotificationChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddNotificationChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddNotificationChannelOutputError>
}

public struct AddNotificationChannelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddNotificationChannelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddNotificationChannelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddNotificationChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddNotificationChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddNotificationChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddNotificationChannelOutputError>
}

public struct AddNotificationChannelInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddNotificationChannelInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: AddNotificationChannelInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddNotificationChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/channels"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AddNotificationChannelInput
    public typealias MOutput = ClientRuntime.OperationOutput<AddNotificationChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddNotificationChannelOutputError>
}

public struct AddNotificationChannelInput: Swift.Equatable {
    ///  A NotificationChannelConfig object that specifies what type of
    ///    		notification channel to add. The one
    ///       	supported notification channel is Amazon Simple Notification Service (Amazon SNS).
    /// This member is required.
    public var config: DevOpsGuruClientTypes.NotificationChannelConfig?

    public init (
        config: DevOpsGuruClientTypes.NotificationChannelConfig? = nil
    )
    {
        self.config = config
    }
}

struct AddNotificationChannelInputBody: Swift.Equatable {
    public let config: DevOpsGuruClientTypes.NotificationChannelConfig?
}

extension AddNotificationChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case config = "Config"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.NotificationChannelConfig.self, forKey: .config)
        config = configDecoded
    }
}

extension AddNotificationChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddNotificationChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddNotificationChannelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddNotificationChannelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddNotificationChannelOutputResponse(id: \(Swift.String(describing: id)))"}
}

extension AddNotificationChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AddNotificationChannelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.id = output.id
        } else {
            self.id = nil
        }
    }
}

public struct AddNotificationChannelOutputResponse: Swift.Equatable {
    ///
    ///    		The ID of the added notification channel.
    ///    	
    /// This member is required.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct AddNotificationChannelOutputResponseBody: Swift.Equatable {
    public let id: Swift.String?
}

extension AddNotificationChannelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension DevOpsGuruClientTypes.AnomalyReportedTimeRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case closeTime = "CloseTime"
        case openTime = "OpenTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let closeTime = closeTime {
            try encodeContainer.encode(closeTime.timeIntervalSince1970, forKey: .closeTime)
        }
        if let openTime = openTime {
            try encodeContainer.encode(openTime.timeIntervalSince1970, forKey: .openTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let openTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .openTime)
        openTime = openTimeDecoded
        let closeTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .closeTime)
        closeTime = closeTimeDecoded
    }
}

extension DevOpsGuruClientTypes.AnomalyReportedTimeRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AnomalyReportedTimeRange(closeTime: \(Swift.String(describing: closeTime)), openTime: \(Swift.String(describing: openTime)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			A time range that specifies when DevOps Guru opens and then closes an anomaly. This is different from
    /// 			AnomalyTimeRange, which specifies the time range when DevOps Guru actually observes
    /// 			the anomalous behavior.
    /// 		
    public struct AnomalyReportedTimeRange: Swift.Equatable {
        ///
        /// 			The time when an anomaly is closed.
        /// 		
        public var closeTime: ClientRuntime.Date?
        ///
        /// 			The time when an anomaly is opened.
        /// 		
        /// This member is required.
        public var openTime: ClientRuntime.Date?

        public init (
            closeTime: ClientRuntime.Date? = nil,
            openTime: ClientRuntime.Date? = nil
        )
        {
            self.closeTime = closeTime
            self.openTime = openTime
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum AnomalySeverity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalySeverity] {
            return [
                .high,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnomalySeverity(rawValue: rawValue) ?? AnomalySeverity.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes.AnomalySourceDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchMetrics = "CloudWatchMetrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchMetrics = cloudWatchMetrics {
            var cloudWatchMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cloudWatchMetrics)
            for cloudwatchmetricsdetails0 in cloudWatchMetrics {
                try cloudWatchMetricsContainer.encode(cloudwatchmetricsdetails0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchMetricsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.CloudWatchMetricsDetail?].self, forKey: .cloudWatchMetrics)
        var cloudWatchMetricsDecoded0:[DevOpsGuruClientTypes.CloudWatchMetricsDetail]? = nil
        if let cloudWatchMetricsContainer = cloudWatchMetricsContainer {
            cloudWatchMetricsDecoded0 = [DevOpsGuruClientTypes.CloudWatchMetricsDetail]()
            for structure0 in cloudWatchMetricsContainer {
                if let structure0 = structure0 {
                    cloudWatchMetricsDecoded0?.append(structure0)
                }
            }
        }
        cloudWatchMetrics = cloudWatchMetricsDecoded0
    }
}

extension DevOpsGuruClientTypes.AnomalySourceDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AnomalySourceDetails(cloudWatchMetrics: \(Swift.String(describing: cloudWatchMetrics)))"}
}

extension DevOpsGuruClientTypes {
    ///  Details about the source of the anomalous operational data that triggered the anomaly. The
    /// 			one supported source is Amazon CloudWatch metrics.
    public struct AnomalySourceDetails: Swift.Equatable {
        ///  An array of CloudWatchMetricsDetail object that contains information
        /// 			about the analyzed metrics that displayed anomalous behavior.
        public var cloudWatchMetrics: [DevOpsGuruClientTypes.CloudWatchMetricsDetail]?

        public init (
            cloudWatchMetrics: [DevOpsGuruClientTypes.CloudWatchMetricsDetail]? = nil
        )
        {
            self.cloudWatchMetrics = cloudWatchMetrics
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum AnomalyStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case closed
        case ongoing
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalyStatus] {
            return [
                .closed,
                .ongoing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .closed: return "CLOSED"
            case .ongoing: return "ONGOING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnomalyStatus(rawValue: rawValue) ?? AnomalyStatus.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes.AnomalyTimeRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension DevOpsGuruClientTypes.AnomalyTimeRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AnomalyTimeRange(endTime: \(Swift.String(describing: endTime)), startTime: \(Swift.String(describing: startTime)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			A time range that specifies when the observed unusual behavior in an anomaly started and ended. This is different from
    /// 			AnomalyReportedTimeRange, which specifies the time range when DevOps Guru opens and then closes
    /// 			an anomaly.
    /// 		
    public struct AnomalyTimeRange: Swift.Equatable {
        ///  The time when the anomalous behavior ended.
        public var endTime: ClientRuntime.Date?
        ///
        /// 			The time when the anomalous behavior started.
        /// 		
        /// This member is required.
        public var startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension DevOpsGuruClientTypes.CloudFormationCollection: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackNames = "StackNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stackNames = stackNames {
            var stackNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stackNames)
            for stacknames0 in stackNames {
                try stackNamesContainer.encode(stacknames0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stackNames)
        var stackNamesDecoded0:[Swift.String]? = nil
        if let stackNamesContainer = stackNamesContainer {
            stackNamesDecoded0 = [Swift.String]()
            for string0 in stackNamesContainer {
                if let string0 = string0 {
                    stackNamesDecoded0?.append(string0)
                }
            }
        }
        stackNames = stackNamesDecoded0
    }
}

extension DevOpsGuruClientTypes.CloudFormationCollection: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudFormationCollection(stackNames: \(Swift.String(describing: stackNames)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about AWS CloudFormation stacks. You can use up to 500 stacks to specify which AWS resources in your account to analyze.
    /// 			For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacks.html">Stacks
    /// 			in the AWS CloudFormation User Guide.
    /// 		
    public struct CloudFormationCollection: Swift.Equatable {
        ///
        /// 			An array of CloudFormation stack names.
        /// 		
        public var stackNames: [Swift.String]?

        public init (
            stackNames: [Swift.String]? = nil
        )
        {
            self.stackNames = stackNames
        }
    }

}

extension DevOpsGuruClientTypes.CloudFormationCollectionFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackNames = "StackNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stackNames = stackNames {
            var stackNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stackNames)
            for stacknames0 in stackNames {
                try stackNamesContainer.encode(stacknames0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stackNames)
        var stackNamesDecoded0:[Swift.String]? = nil
        if let stackNamesContainer = stackNamesContainer {
            stackNamesDecoded0 = [Swift.String]()
            for string0 in stackNamesContainer {
                if let string0 = string0 {
                    stackNamesDecoded0?.append(string0)
                }
            }
        }
        stackNames = stackNamesDecoded0
    }
}

extension DevOpsGuruClientTypes.CloudFormationCollectionFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudFormationCollectionFilter(stackNames: \(Swift.String(describing: stackNames)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about AWS CloudFormation stacks. You can use up to 500 stacks to specify which AWS resources in your account to analyze.
    /// 			For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacks.html">Stacks
    /// 			in the AWS CloudFormation User Guide.
    /// 		
    public struct CloudFormationCollectionFilter: Swift.Equatable {
        ///
        /// 			An array of CloudFormation stack names.
        /// 		
        public var stackNames: [Swift.String]?

        public init (
            stackNames: [Swift.String]? = nil
        )
        {
            self.stackNames = stackNames
        }
    }

}

extension DevOpsGuruClientTypes.CloudFormationCostEstimationResourceCollectionFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackNames = "StackNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stackNames = stackNames {
            var stackNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stackNames)
            for costestimationstacknames0 in stackNames {
                try stackNamesContainer.encode(costestimationstacknames0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stackNames)
        var stackNamesDecoded0:[Swift.String]? = nil
        if let stackNamesContainer = stackNamesContainer {
            stackNamesDecoded0 = [Swift.String]()
            for string0 in stackNamesContainer {
                if let string0 = string0 {
                    stackNamesDecoded0?.append(string0)
                }
            }
        }
        stackNames = stackNamesDecoded0
    }
}

extension DevOpsGuruClientTypes.CloudFormationCostEstimationResourceCollectionFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudFormationCostEstimationResourceCollectionFilter(stackNames: \(Swift.String(describing: stackNames)))"}
}

extension DevOpsGuruClientTypes {
    /// Information about an AWS CloudFormation stack used to create a monthly cost estimate for DevOps Guru to analyze
    /// 		AWS resources. The maximum number of stacks you can specify for a cost estimate is one. The estimate created is for the cost
    /// 		to analyze the AWS resources defined by the stack. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacks.html">Stacks
    /// 			in the AWS CloudFormation User Guide.
    public struct CloudFormationCostEstimationResourceCollectionFilter: Swift.Equatable {
        /// An array of CloudFormation stack names. Its size is fixed at 1 item.
        public var stackNames: [Swift.String]?

        public init (
            stackNames: [Swift.String]? = nil
        )
        {
            self.stackNames = stackNames
        }
    }

}

extension DevOpsGuruClientTypes.CloudFormationHealth: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insight = "Insight"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let insight = insight {
            try encodeContainer.encode(insight, forKey: .insight)
        }
        if let stackName = stackName {
            try encodeContainer.encode(stackName, forKey: .stackName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let insightDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightHealth.self, forKey: .insight)
        insight = insightDecoded
    }
}

extension DevOpsGuruClientTypes.CloudFormationHealth: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudFormationHealth(insight: \(Swift.String(describing: insight)), stackName: \(Swift.String(describing: stackName)))"}
}

extension DevOpsGuruClientTypes {
    ///
    ///    		Information about the health of AWS resources in your account that are specified by an AWS CloudFormation stack.
    ///    	
    public struct CloudFormationHealth: Swift.Equatable {
        ///
        ///    		Information about the health of the AWS resources in your account that are specified by an AWS CloudFormation stack, including
        ///    		the number of open proactive, open reactive insights, and the Mean Time to Recover (MTTR) of closed insights.
        ///    	
        public var insight: DevOpsGuruClientTypes.InsightHealth?
        ///
        ///    		The name of the CloudFormation stack.
        ///    	
        public var stackName: Swift.String?

        public init (
            insight: DevOpsGuruClientTypes.InsightHealth? = nil,
            stackName: Swift.String? = nil
        )
        {
            self.insight = insight
            self.stackName = stackName
        }
    }

}

extension DevOpsGuruClientTypes.CloudWatchMetricsDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dimensions = "Dimensions"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case period = "Period"
        case stat = "Stat"
        case unit = "Unit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dimensions)
            for cloudwatchmetricsdimensions0 in dimensions {
                try dimensionsContainer.encode(cloudwatchmetricsdimensions0)
            }
        }
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let stat = stat {
            try encodeContainer.encode(stat.rawValue, forKey: .stat)
        }
        if let unit = unit {
            try encodeContainer.encode(unit, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.CloudWatchMetricsDimension?].self, forKey: .dimensions)
        var dimensionsDecoded0:[DevOpsGuruClientTypes.CloudWatchMetricsDimension]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [DevOpsGuruClientTypes.CloudWatchMetricsDimension]()
            for structure0 in dimensionsContainer {
                if let structure0 = structure0 {
                    dimensionsDecoded0?.append(structure0)
                }
            }
        }
        dimensions = dimensionsDecoded0
        let statDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CloudWatchMetricsStat.self, forKey: .stat)
        stat = statDecoded
        let unitDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unit)
        unit = unitDecoded
        let periodDecoded = try containerValues.decode(Swift.Int.self, forKey: .period)
        period = periodDecoded
    }
}

extension DevOpsGuruClientTypes.CloudWatchMetricsDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudWatchMetricsDetail(dimensions: \(Swift.String(describing: dimensions)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), period: \(Swift.String(describing: period)), stat: \(Swift.String(describing: stat)), unit: \(Swift.String(describing: unit)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about an Amazon CloudWatch metric.
    /// 		
    public struct CloudWatchMetricsDetail: Swift.Equatable {
        ///
        /// 			An array of CloudWatch dimensions associated with
        /// 		
        public var dimensions: [DevOpsGuruClientTypes.CloudWatchMetricsDimension]?
        ///
        /// 			The name of the CloudWatch metric.
        /// 		
        public var metricName: Swift.String?
        ///
        /// 			The namespace of the CloudWatch metric. A namespace is a container for CloudWatch metrics.
        /// 		
        public var namespace: Swift.String?
        ///
        /// 			The length of time associated with the CloudWatch metric in number of seconds.
        /// 		
        public var period: Swift.Int
        ///
        /// 			The type of statistic associated with the CloudWatch metric. For more information, see
        /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic">Statistics in the
        /// 			Amazon CloudWatch User Guide.
        /// 		
        public var stat: DevOpsGuruClientTypes.CloudWatchMetricsStat?
        ///
        /// 			The unit of measure used for the CloudWatch metric. For example, Bytes, Seconds,
        /// 			Count, and Percent.
        /// 		
        public var unit: Swift.String?

        public init (
            dimensions: [DevOpsGuruClientTypes.CloudWatchMetricsDimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            period: Swift.Int = 0,
            stat: DevOpsGuruClientTypes.CloudWatchMetricsStat? = nil,
            unit: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
            self.period = period
            self.stat = stat
            self.unit = unit
        }
    }

}

extension DevOpsGuruClientTypes.CloudWatchMetricsDimension: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension DevOpsGuruClientTypes.CloudWatchMetricsDimension: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudWatchMetricsDimension(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension DevOpsGuruClientTypes {
    ///  The dimension of a Amazon CloudWatch metric that is used when DevOps Guru analyzes the resources in your
    /// 			account for operational problems and anomalous behavior. A dimension is a name/value pair
    /// 			that is part of the identity of a metric. A metric can have up to 10 dimensions. For more
    /// 			information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension">Dimensions in the Amazon CloudWatch User Guide.
    public struct CloudWatchMetricsDimension: Swift.Equatable {
        ///
        /// 			The name of the CloudWatch dimension.
        /// 		
        public var name: Swift.String?
        ///
        /// 			The value of the CloudWatch dimension.
        /// 		
        public var value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum CloudWatchMetricsStat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case p50
        case p90
        case p99
        case sampleCount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [CloudWatchMetricsStat] {
            return [
                .average,
                .maximum,
                .minimum,
                .p50,
                .p90,
                .p99,
                .sampleCount,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .p50: return "p50"
            case .p90: return "p90"
            case .p99: return "p99"
            case .sampleCount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CloudWatchMetricsStat(rawValue: rawValue) ?? CloudWatchMetricsStat.sdkUnknown(rawValue)
        }
    }
}

extension ConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictException(message: \(Swift.String(describing: message)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
        } else {
            self.message = nil
            self.resourceId = nil
            self.resourceType = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
/// 			An exception that is thrown when a conflict occurs.
/// 		
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?
    ///
    /// 			The ID of the AWS resource in which a conflict occurred.
    /// 		
    /// This member is required.
    public var resourceId: Swift.String?
    ///
    /// 			The type of the AWS resource in which a conflict occurred.
    /// 		
    /// This member is required.
    public var resourceType: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let resourceId: Swift.String?
    public let resourceType: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudFormation = "CloudFormation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudFormation = cloudFormation {
            try encodeContainer.encode(cloudFormation, forKey: .cloudFormation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFormationDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CloudFormationCostEstimationResourceCollectionFilter.self, forKey: .cloudFormation)
        cloudFormation = cloudFormationDecoded
    }
}

extension DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CostEstimationResourceCollectionFilter(cloudFormation: \(Swift.String(describing: cloudFormation)))"}
}

extension DevOpsGuruClientTypes {
    /// Information about a filter used to specify which AWS resources are analyzed to create
    /// 			a monthly DevOps Guru cost estimate. For more information,
    /// 			see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html">Estimate your
    /// 			Amazon DevOps Guru costs and
    /// 			<a href="http://aws.amazon.com/devops-guru/pricing/">Amazon DevOps Guru pricing.
    /// 		
    public struct CostEstimationResourceCollectionFilter: Swift.Equatable {
        /// An object that specifies the CloudFormation stack that defines the AWS resources
        /// 			used to create a monthly estimate for DevOps Guru.
        public var cloudFormation: DevOpsGuruClientTypes.CloudFormationCostEstimationResourceCollectionFilter?

        public init (
            cloudFormation: DevOpsGuruClientTypes.CloudFormationCostEstimationResourceCollectionFilter? = nil
        )
        {
            self.cloudFormation = cloudFormation
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum CostEstimationServiceResourceState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [CostEstimationServiceResourceState] {
            return [
                .active,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CostEstimationServiceResourceState(rawValue: rawValue) ?? CostEstimationServiceResourceState.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes {
    public enum CostEstimationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case ongoing
        case sdkUnknown(Swift.String)

        public static var allCases: [CostEstimationStatus] {
            return [
                .completed,
                .ongoing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .ongoing: return "ONGOING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CostEstimationStatus(rawValue: rawValue) ?? CostEstimationStatus.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes.CostEstimationTimeRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension DevOpsGuruClientTypes.CostEstimationTimeRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CostEstimationTimeRange(endTime: \(Swift.String(describing: endTime)), startTime: \(Swift.String(describing: startTime)))"}
}

extension DevOpsGuruClientTypes {
    /// The time range of a cost estimation.
    public struct CostEstimationTimeRange: Swift.Equatable {
        /// The end time of the cost estimation.
        public var endTime: ClientRuntime.Date?
        /// The start time of the cost estimation.
        public var startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension DescribeAccountHealthInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAccountHealthInput()"}
}

extension DescribeAccountHealthInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeAccountHealthInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountHealthInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountHealthInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountHealthInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountHealthOutputError>
}

public struct DescribeAccountHealthInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountHealthInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountHealthInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountHealthInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountHealthOutputError>
}

public struct DescribeAccountHealthInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountHealthInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeAccountHealthInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/accounts/health"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeAccountHealthInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountHealthOutputError>
}

public struct DescribeAccountHealthInput: Swift.Equatable {

    public init() {}
}

struct DescribeAccountHealthInputBody: Swift.Equatable {
}

extension DescribeAccountHealthInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAccountHealthOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAccountHealthOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAccountHealthOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAccountHealthOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAccountHealthOutputResponse(metricsAnalyzed: \(Swift.String(describing: metricsAnalyzed)), openProactiveInsights: \(Swift.String(describing: openProactiveInsights)), openReactiveInsights: \(Swift.String(describing: openReactiveInsights)), resourceHours: \(Swift.String(describing: resourceHours)))"}
}

extension DescribeAccountHealthOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAccountHealthOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricsAnalyzed = output.metricsAnalyzed
            self.openProactiveInsights = output.openProactiveInsights
            self.openReactiveInsights = output.openReactiveInsights
            self.resourceHours = output.resourceHours
        } else {
            self.metricsAnalyzed = 0
            self.openProactiveInsights = 0
            self.openReactiveInsights = 0
            self.resourceHours = nil
        }
    }
}

public struct DescribeAccountHealthOutputResponse: Swift.Equatable {
    ///
    ///    		An integer that specifies the number of metrics that have been analyzed in your AWS account.
    ///    	
    /// This member is required.
    public var metricsAnalyzed: Swift.Int
    ///
    ///    		An integer that specifies the number of open proactive insights in your AWS account.
    ///    	
    /// This member is required.
    public var openProactiveInsights: Swift.Int
    ///
    ///    		An integer that specifies the number of open reactive insights in your AWS account.
    ///    	
    /// This member is required.
    public var openReactiveInsights: Swift.Int
    /// The number of Amazon DevOps Guru resource analysis hours billed to the current AWS account in the last hour.
    ///  		
    /// This member is required.
    public var resourceHours: Swift.Int?

    public init (
        metricsAnalyzed: Swift.Int = 0,
        openProactiveInsights: Swift.Int = 0,
        openReactiveInsights: Swift.Int = 0,
        resourceHours: Swift.Int? = nil
    )
    {
        self.metricsAnalyzed = metricsAnalyzed
        self.openProactiveInsights = openProactiveInsights
        self.openReactiveInsights = openReactiveInsights
        self.resourceHours = resourceHours
    }
}

struct DescribeAccountHealthOutputResponseBody: Swift.Equatable {
    public let openReactiveInsights: Swift.Int
    public let openProactiveInsights: Swift.Int
    public let metricsAnalyzed: Swift.Int
    public let resourceHours: Swift.Int?
}

extension DescribeAccountHealthOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricsAnalyzed = "MetricsAnalyzed"
        case openProactiveInsights = "OpenProactiveInsights"
        case openReactiveInsights = "OpenReactiveInsights"
        case resourceHours = "ResourceHours"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let openReactiveInsightsDecoded = try containerValues.decode(Swift.Int.self, forKey: .openReactiveInsights)
        openReactiveInsights = openReactiveInsightsDecoded
        let openProactiveInsightsDecoded = try containerValues.decode(Swift.Int.self, forKey: .openProactiveInsights)
        openProactiveInsights = openProactiveInsightsDecoded
        let metricsAnalyzedDecoded = try containerValues.decode(Swift.Int.self, forKey: .metricsAnalyzed)
        metricsAnalyzed = metricsAnalyzedDecoded
        let resourceHoursDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .resourceHours)
        resourceHours = resourceHoursDecoded
    }
}

public struct DescribeAccountOverviewInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountOverviewInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountOverviewInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountOverviewOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountOverviewInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountOverviewOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountOverviewOutputError>
}

extension DescribeAccountOverviewInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAccountOverviewInput(fromTime: \(Swift.String(describing: fromTime)), toTime: \(Swift.String(describing: toTime)))"}
}

extension DescribeAccountOverviewInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromTime = "FromTime"
        case toTime = "ToTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromTime = fromTime {
            try encodeContainer.encode(fromTime.timeIntervalSince1970, forKey: .fromTime)
        }
        if let toTime = toTime {
            try encodeContainer.encode(toTime.timeIntervalSince1970, forKey: .toTime)
        }
    }
}

public struct DescribeAccountOverviewInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountOverviewInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountOverviewInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountOverviewOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountOverviewInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountOverviewOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountOverviewOutputError>
}

public struct DescribeAccountOverviewInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountOverviewInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountOverviewInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountOverviewOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountOverviewInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountOverviewOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountOverviewOutputError>
}

public struct DescribeAccountOverviewInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountOverviewInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeAccountOverviewInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountOverviewOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/accounts/overview"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeAccountOverviewInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountOverviewOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountOverviewOutputError>
}

public struct DescribeAccountOverviewInput: Swift.Equatable {
    ///
    ///    		The start of the time range passed in. The start time granularity is at the
    ///    		day level. The floor of the start time is used. Returned information occurred after this day.
    ///    	
    /// This member is required.
    public var fromTime: ClientRuntime.Date?
    ///
    ///    		The end of the time range passed in. The start time granularity is at the
    ///    		day level. The floor of the start time is used. Returned information occurred before this day. If this is not specified, then the current day is used.
    ///    	
    public var toTime: ClientRuntime.Date?

    public init (
        fromTime: ClientRuntime.Date? = nil,
        toTime: ClientRuntime.Date? = nil
    )
    {
        self.fromTime = fromTime
        self.toTime = toTime
    }
}

struct DescribeAccountOverviewInputBody: Swift.Equatable {
    public let fromTime: ClientRuntime.Date?
    public let toTime: ClientRuntime.Date?
}

extension DescribeAccountOverviewInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromTime = "FromTime"
        case toTime = "ToTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .fromTime)
        fromTime = fromTimeDecoded
        let toTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .toTime)
        toTime = toTimeDecoded
    }
}

extension DescribeAccountOverviewOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAccountOverviewOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAccountOverviewOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAccountOverviewOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAccountOverviewOutputResponse(meanTimeToRecoverInMilliseconds: \(Swift.String(describing: meanTimeToRecoverInMilliseconds)), proactiveInsights: \(Swift.String(describing: proactiveInsights)), reactiveInsights: \(Swift.String(describing: reactiveInsights)))"}
}

extension DescribeAccountOverviewOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAccountOverviewOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.meanTimeToRecoverInMilliseconds = output.meanTimeToRecoverInMilliseconds
            self.proactiveInsights = output.proactiveInsights
            self.reactiveInsights = output.reactiveInsights
        } else {
            self.meanTimeToRecoverInMilliseconds = nil
            self.proactiveInsights = 0
            self.reactiveInsights = 0
        }
    }
}

public struct DescribeAccountOverviewOutputResponse: Swift.Equatable {
    ///
    ///    		The Mean Time to Recover (MTTR) for all closed insights that were created during the
    ///    		time range passed in.
    ///    	
    /// This member is required.
    public var meanTimeToRecoverInMilliseconds: Swift.Int?
    ///
    ///    		An integer that specifies the number of open proactive insights in your AWS account that were created during the
    ///    		time range passed in.
    ///    	
    /// This member is required.
    public var proactiveInsights: Swift.Int
    ///
    ///    		An integer that specifies the number of open reactive insights in your AWS account that were created during the
    ///    		time range passed in.
    ///    	
    /// This member is required.
    public var reactiveInsights: Swift.Int

    public init (
        meanTimeToRecoverInMilliseconds: Swift.Int? = nil,
        proactiveInsights: Swift.Int = 0,
        reactiveInsights: Swift.Int = 0
    )
    {
        self.meanTimeToRecoverInMilliseconds = meanTimeToRecoverInMilliseconds
        self.proactiveInsights = proactiveInsights
        self.reactiveInsights = reactiveInsights
    }
}

struct DescribeAccountOverviewOutputResponseBody: Swift.Equatable {
    public let reactiveInsights: Swift.Int
    public let proactiveInsights: Swift.Int
    public let meanTimeToRecoverInMilliseconds: Swift.Int?
}

extension DescribeAccountOverviewOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case meanTimeToRecoverInMilliseconds = "MeanTimeToRecoverInMilliseconds"
        case proactiveInsights = "ProactiveInsights"
        case reactiveInsights = "ReactiveInsights"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reactiveInsightsDecoded = try containerValues.decode(Swift.Int.self, forKey: .reactiveInsights)
        reactiveInsights = reactiveInsightsDecoded
        let proactiveInsightsDecoded = try containerValues.decode(Swift.Int.self, forKey: .proactiveInsights)
        proactiveInsights = proactiveInsightsDecoded
        let meanTimeToRecoverInMillisecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .meanTimeToRecoverInMilliseconds)
        meanTimeToRecoverInMilliseconds = meanTimeToRecoverInMillisecondsDecoded
    }
}

extension DescribeAnomalyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAnomalyInput(id: \(Swift.String(describing: id)))"}
}

extension DescribeAnomalyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeAnomalyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAnomalyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAnomalyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAnomalyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAnomalyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAnomalyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAnomalyOutputError>
}

public struct DescribeAnomalyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAnomalyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAnomalyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAnomalyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAnomalyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAnomalyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAnomalyOutputError>
}

public struct DescribeAnomalyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAnomalyInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeAnomalyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAnomalyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let id = input.id else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("id is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/anomalies/\(id.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeAnomalyInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAnomalyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAnomalyOutputError>
}

public struct DescribeAnomalyInput: Swift.Equatable {
    ///
    ///    		The ID of the anomaly.
    ///    	
    /// This member is required.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct DescribeAnomalyInputBody: Swift.Equatable {
}

extension DescribeAnomalyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeAnomalyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAnomalyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAnomalyOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAnomalyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAnomalyOutputResponse(proactiveAnomaly: \(Swift.String(describing: proactiveAnomaly)), reactiveAnomaly: \(Swift.String(describing: reactiveAnomaly)))"}
}

extension DescribeAnomalyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAnomalyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.proactiveAnomaly = output.proactiveAnomaly
            self.reactiveAnomaly = output.reactiveAnomaly
        } else {
            self.proactiveAnomaly = nil
            self.reactiveAnomaly = nil
        }
    }
}

public struct DescribeAnomalyOutputResponse: Swift.Equatable {
    ///
    /// 			A ReactiveAnomaly object that represents the requested anomaly.
    /// 		
    public var proactiveAnomaly: DevOpsGuruClientTypes.ProactiveAnomaly?
    ///
    /// 			A ProactiveAnomaly object that represents the requested anomaly.
    /// 		
    public var reactiveAnomaly: DevOpsGuruClientTypes.ReactiveAnomaly?

    public init (
        proactiveAnomaly: DevOpsGuruClientTypes.ProactiveAnomaly? = nil,
        reactiveAnomaly: DevOpsGuruClientTypes.ReactiveAnomaly? = nil
    )
    {
        self.proactiveAnomaly = proactiveAnomaly
        self.reactiveAnomaly = reactiveAnomaly
    }
}

struct DescribeAnomalyOutputResponseBody: Swift.Equatable {
    public let proactiveAnomaly: DevOpsGuruClientTypes.ProactiveAnomaly?
    public let reactiveAnomaly: DevOpsGuruClientTypes.ReactiveAnomaly?
}

extension DescribeAnomalyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case proactiveAnomaly = "ProactiveAnomaly"
        case reactiveAnomaly = "ReactiveAnomaly"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proactiveAnomalyDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ProactiveAnomaly.self, forKey: .proactiveAnomaly)
        proactiveAnomaly = proactiveAnomalyDecoded
        let reactiveAnomalyDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ReactiveAnomaly.self, forKey: .reactiveAnomaly)
        reactiveAnomaly = reactiveAnomalyDecoded
    }
}

public struct DescribeFeedbackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeFeedbackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeFeedbackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeFeedbackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeFeedbackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeFeedbackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeFeedbackOutputError>
}

extension DescribeFeedbackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeFeedbackInput(insightId: \(Swift.String(describing: insightId)))"}
}

extension DescribeFeedbackInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightId = "InsightId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let insightId = insightId {
            try encodeContainer.encode(insightId, forKey: .insightId)
        }
    }
}

public struct DescribeFeedbackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeFeedbackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeFeedbackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeFeedbackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeFeedbackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeFeedbackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeFeedbackOutputError>
}

public struct DescribeFeedbackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeFeedbackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeFeedbackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeFeedbackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeFeedbackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeFeedbackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeFeedbackOutputError>
}

public struct DescribeFeedbackInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeFeedbackInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeFeedbackInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeFeedbackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/feedback"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeFeedbackInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeFeedbackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeFeedbackOutputError>
}

public struct DescribeFeedbackInput: Swift.Equatable {
    ///
    /// 			The ID of the insight for which the feedback was provided.
    /// 		
    public var insightId: Swift.String?

    public init (
        insightId: Swift.String? = nil
    )
    {
        self.insightId = insightId
    }
}

struct DescribeFeedbackInputBody: Swift.Equatable {
    public let insightId: Swift.String?
}

extension DescribeFeedbackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightId = "InsightId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .insightId)
        insightId = insightIdDecoded
    }
}

extension DescribeFeedbackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeFeedbackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeFeedbackOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeFeedbackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeFeedbackOutputResponse(insightFeedback: \(Swift.String(describing: insightFeedback)))"}
}

extension DescribeFeedbackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeFeedbackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.insightFeedback = output.insightFeedback
        } else {
            self.insightFeedback = nil
        }
    }
}

public struct DescribeFeedbackOutputResponse: Swift.Equatable {
    ///
    ///       	Information about insight feedback received from a customer.
    ///
    public var insightFeedback: DevOpsGuruClientTypes.InsightFeedback?

    public init (
        insightFeedback: DevOpsGuruClientTypes.InsightFeedback? = nil
    )
    {
        self.insightFeedback = insightFeedback
    }
}

struct DescribeFeedbackOutputResponseBody: Swift.Equatable {
    public let insightFeedback: DevOpsGuruClientTypes.InsightFeedback?
}

extension DescribeFeedbackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightFeedback = "InsightFeedback"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightFeedbackDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightFeedback.self, forKey: .insightFeedback)
        insightFeedback = insightFeedbackDecoded
    }
}

extension DescribeInsightInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInsightInput(id: \(Swift.String(describing: id)))"}
}

extension DescribeInsightInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeInsightInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInsightInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInsightOutputError>
}

public struct DescribeInsightInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInsightInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInsightOutputError>
}

public struct DescribeInsightInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInsightInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeInsightInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let id = input.id else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("id is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/insights/\(id.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeInsightInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInsightOutputError>
}

public struct DescribeInsightInput: Swift.Equatable {
    ///
    ///    		The ID of the insight.
    ///    	
    /// This member is required.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct DescribeInsightInputBody: Swift.Equatable {
}

extension DescribeInsightInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeInsightOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInsightOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInsightOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInsightOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInsightOutputResponse(proactiveInsight: \(Swift.String(describing: proactiveInsight)), reactiveInsight: \(Swift.String(describing: reactiveInsight)))"}
}

extension DescribeInsightOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeInsightOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.proactiveInsight = output.proactiveInsight
            self.reactiveInsight = output.reactiveInsight
        } else {
            self.proactiveInsight = nil
            self.reactiveInsight = nil
        }
    }
}

public struct DescribeInsightOutputResponse: Swift.Equatable {
    ///
    /// 			A ProactiveInsight object that represents the requested insight.
    /// 		
    public var proactiveInsight: DevOpsGuruClientTypes.ProactiveInsight?
    ///
    /// 			A ReactiveInsight object that represents the requested insight.
    /// 		
    public var reactiveInsight: DevOpsGuruClientTypes.ReactiveInsight?

    public init (
        proactiveInsight: DevOpsGuruClientTypes.ProactiveInsight? = nil,
        reactiveInsight: DevOpsGuruClientTypes.ReactiveInsight? = nil
    )
    {
        self.proactiveInsight = proactiveInsight
        self.reactiveInsight = reactiveInsight
    }
}

struct DescribeInsightOutputResponseBody: Swift.Equatable {
    public let proactiveInsight: DevOpsGuruClientTypes.ProactiveInsight?
    public let reactiveInsight: DevOpsGuruClientTypes.ReactiveInsight?
}

extension DescribeInsightOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case proactiveInsight = "ProactiveInsight"
        case reactiveInsight = "ReactiveInsight"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proactiveInsightDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ProactiveInsight.self, forKey: .proactiveInsight)
        proactiveInsight = proactiveInsightDecoded
        let reactiveInsightDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ReactiveInsight.self, forKey: .reactiveInsight)
        reactiveInsight = reactiveInsightDecoded
    }
}

extension DescribeResourceCollectionHealthInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeResourceCollectionHealthInput(nextToken: \(Swift.String(describing: nextToken)), resourceCollectionType: \(Swift.String(describing: resourceCollectionType)))"}
}

extension DescribeResourceCollectionHealthInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeResourceCollectionHealthInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeResourceCollectionHealthInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeResourceCollectionHealthInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeResourceCollectionHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeResourceCollectionHealthInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeResourceCollectionHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeResourceCollectionHealthOutputError>
}

public struct DescribeResourceCollectionHealthInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeResourceCollectionHealthInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeResourceCollectionHealthInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeResourceCollectionHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeResourceCollectionHealthInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeResourceCollectionHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeResourceCollectionHealthOutputError>
}

public struct DescribeResourceCollectionHealthInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeResourceCollectionHealthInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeResourceCollectionHealthInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeResourceCollectionHealthOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let resourceCollectionType = input.resourceCollectionType else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("resourceCollectionType is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/accounts/health/resource-collection/\(resourceCollectionType.rawValue.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeResourceCollectionHealthInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeResourceCollectionHealthOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeResourceCollectionHealthOutputError>
}

public struct DescribeResourceCollectionHealthInput: Swift.Equatable {
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If this value is null, it retrieves the first page.
    public var nextToken: Swift.String?
    ///
    ///    		An AWS resource collection type. This type specifies how analyzed AWS resources are defined. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
    ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
    ///    	
    /// This member is required.
    public var resourceCollectionType: DevOpsGuruClientTypes.ResourceCollectionType?

    public init (
        nextToken: Swift.String? = nil,
        resourceCollectionType: DevOpsGuruClientTypes.ResourceCollectionType? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceCollectionType = resourceCollectionType
    }
}

struct DescribeResourceCollectionHealthInputBody: Swift.Equatable {
}

extension DescribeResourceCollectionHealthInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeResourceCollectionHealthOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeResourceCollectionHealthOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeResourceCollectionHealthOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeResourceCollectionHealthOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeResourceCollectionHealthOutputResponse(cloudFormation: \(Swift.String(describing: cloudFormation)), nextToken: \(Swift.String(describing: nextToken)), service: \(Swift.String(describing: service)))"}
}

extension DescribeResourceCollectionHealthOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeResourceCollectionHealthOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cloudFormation = output.cloudFormation
            self.nextToken = output.nextToken
            self.service = output.service
        } else {
            self.cloudFormation = nil
            self.nextToken = nil
            self.service = nil
        }
    }
}

public struct DescribeResourceCollectionHealthOutputResponse: Swift.Equatable {
    ///
    ///    		The returned CloudFormationHealthOverview object that contains an InsightHealthOverview object with
    ///    		the requested system health information.
    ///    	
    /// This member is required.
    public var cloudFormation: [DevOpsGuruClientTypes.CloudFormationHealth]?
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If there are no more pages, this value is null.
    public var nextToken: Swift.String?
    /// An array of ServiceHealth objects that describes the health of the AWS services
    /// 		associated with the resources in the collection.
    public var service: [DevOpsGuruClientTypes.ServiceHealth]?

    public init (
        cloudFormation: [DevOpsGuruClientTypes.CloudFormationHealth]? = nil,
        nextToken: Swift.String? = nil,
        service: [DevOpsGuruClientTypes.ServiceHealth]? = nil
    )
    {
        self.cloudFormation = cloudFormation
        self.nextToken = nextToken
        self.service = service
    }
}

struct DescribeResourceCollectionHealthOutputResponseBody: Swift.Equatable {
    public let cloudFormation: [DevOpsGuruClientTypes.CloudFormationHealth]?
    public let service: [DevOpsGuruClientTypes.ServiceHealth]?
    public let nextToken: Swift.String?
}

extension DescribeResourceCollectionHealthOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudFormation = "CloudFormation"
        case nextToken = "NextToken"
        case service = "Service"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFormationContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.CloudFormationHealth?].self, forKey: .cloudFormation)
        var cloudFormationDecoded0:[DevOpsGuruClientTypes.CloudFormationHealth]? = nil
        if let cloudFormationContainer = cloudFormationContainer {
            cloudFormationDecoded0 = [DevOpsGuruClientTypes.CloudFormationHealth]()
            for structure0 in cloudFormationContainer {
                if let structure0 = structure0 {
                    cloudFormationDecoded0?.append(structure0)
                }
            }
        }
        cloudFormation = cloudFormationDecoded0
        let serviceContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.ServiceHealth?].self, forKey: .service)
        var serviceDecoded0:[DevOpsGuruClientTypes.ServiceHealth]? = nil
        if let serviceContainer = serviceContainer {
            serviceDecoded0 = [DevOpsGuruClientTypes.ServiceHealth]()
            for structure0 in serviceContainer {
                if let structure0 = structure0 {
                    serviceDecoded0?.append(structure0)
                }
            }
        }
        service = serviceDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeServiceIntegrationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeServiceIntegrationInput()"}
}

extension DescribeServiceIntegrationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeServiceIntegrationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeServiceIntegrationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeServiceIntegrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeServiceIntegrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeServiceIntegrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeServiceIntegrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeServiceIntegrationOutputError>
}

public struct DescribeServiceIntegrationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeServiceIntegrationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeServiceIntegrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeServiceIntegrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeServiceIntegrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeServiceIntegrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeServiceIntegrationOutputError>
}

public struct DescribeServiceIntegrationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeServiceIntegrationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeServiceIntegrationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeServiceIntegrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/service-integrations"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeServiceIntegrationInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeServiceIntegrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeServiceIntegrationOutputError>
}

public struct DescribeServiceIntegrationInput: Swift.Equatable {

    public init() {}
}

struct DescribeServiceIntegrationInputBody: Swift.Equatable {
}

extension DescribeServiceIntegrationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeServiceIntegrationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeServiceIntegrationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeServiceIntegrationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeServiceIntegrationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeServiceIntegrationOutputResponse(serviceIntegration: \(Swift.String(describing: serviceIntegration)))"}
}

extension DescribeServiceIntegrationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeServiceIntegrationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.serviceIntegration = output.serviceIntegration
        } else {
            self.serviceIntegration = nil
        }
    }
}

public struct DescribeServiceIntegrationOutputResponse: Swift.Equatable {
    ///
    /// 			Information about the integration of DevOps Guru with another AWS service, such as AWS Systems Manager.
    /// 		
    public var serviceIntegration: DevOpsGuruClientTypes.ServiceIntegrationConfig?

    public init (
        serviceIntegration: DevOpsGuruClientTypes.ServiceIntegrationConfig? = nil
    )
    {
        self.serviceIntegration = serviceIntegration
    }
}

struct DescribeServiceIntegrationOutputResponseBody: Swift.Equatable {
    public let serviceIntegration: DevOpsGuruClientTypes.ServiceIntegrationConfig?
}

extension DescribeServiceIntegrationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceIntegration = "ServiceIntegration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceIntegrationDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ServiceIntegrationConfig.self, forKey: .serviceIntegration)
        serviceIntegration = serviceIntegrationDecoded
    }
}

extension DevOpsGuruClientTypes.EndTimeRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromTime = "FromTime"
        case toTime = "ToTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromTime = fromTime {
            try encodeContainer.encode(fromTime.timeIntervalSince1970, forKey: .fromTime)
        }
        if let toTime = toTime {
            try encodeContainer.encode(toTime.timeIntervalSince1970, forKey: .toTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .fromTime)
        fromTime = fromTimeDecoded
        let toTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .toTime)
        toTime = toTimeDecoded
    }
}

extension DevOpsGuruClientTypes.EndTimeRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EndTimeRange(fromTime: \(Swift.String(describing: fromTime)), toTime: \(Swift.String(describing: toTime)))"}
}

extension DevOpsGuruClientTypes {
    ///
    ///       	A range of time that specifies when anomalous behavior in an anomaly or insight ended.
    ///
    public struct EndTimeRange: Swift.Equatable {
        ///
        ///       	The earliest end time in the time range.
        ///
        public var fromTime: ClientRuntime.Date?
        ///
        ///       	The latest end time in the time range.
        ///
        public var toTime: ClientRuntime.Date?

        public init (
            fromTime: ClientRuntime.Date? = nil,
            toTime: ClientRuntime.Date? = nil
        )
        {
            self.fromTime = fromTime
            self.toTime = toTime
        }
    }

}

extension DevOpsGuruClientTypes.Event: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSource = "DataSource"
        case eventClass = "EventClass"
        case eventSource = "EventSource"
        case id = "Id"
        case name = "Name"
        case resourceCollection = "ResourceCollection"
        case resources = "Resources"
        case time = "Time"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSource = dataSource {
            try encodeContainer.encode(dataSource.rawValue, forKey: .dataSource)
        }
        if let eventClass = eventClass {
            try encodeContainer.encode(eventClass.rawValue, forKey: .eventClass)
        }
        if let eventSource = eventSource {
            try encodeContainer.encode(eventSource, forKey: .eventSource)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for eventresources0 in resources {
                try resourcesContainer.encode(eventresources0)
            }
        }
        if let time = time {
            try encodeContainer.encode(time.timeIntervalSince1970, forKey: .time)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let timeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .time)
        time = timeDecoded
        let eventSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventSource)
        eventSource = eventSourceDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let dataSourceDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.EventDataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let eventClassDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.EventClass.self, forKey: .eventClass)
        eventClass = eventClassDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.EventResource?].self, forKey: .resources)
        var resourcesDecoded0:[DevOpsGuruClientTypes.EventResource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [DevOpsGuruClientTypes.EventResource]()
            for structure0 in resourcesContainer {
                if let structure0 = structure0 {
                    resourcesDecoded0?.append(structure0)
                }
            }
        }
        resources = resourcesDecoded0
    }
}

extension DevOpsGuruClientTypes.Event: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Event(dataSource: \(Swift.String(describing: dataSource)), eventClass: \(Swift.String(describing: eventClass)), eventSource: \(Swift.String(describing: eventSource)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), resourceCollection: \(Swift.String(describing: resourceCollection)), resources: \(Swift.String(describing: resources)), time: \(Swift.String(describing: time)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			An AWS resource event. AWS resource events and metrics are analyzed by DevOps Guru to find anomalous behavior and
    /// 			provide recommendations to improve your operational solutions.
    /// 		
    public struct Event: Swift.Equatable {
        ///
        /// 			The source, AWS_CLOUD_TRAIL or AWS_CODE_DEPLOY, where DevOps Guru analysis found the event.
        /// 		
        public var dataSource: DevOpsGuruClientTypes.EventDataSource?
        ///
        /// 			The class of the event. The class specifies what the event is related to, such as an infrastructure change, a deployment, or a schema change.
        /// 		
        public var eventClass: DevOpsGuruClientTypes.EventClass?
        ///
        /// 			The AWS source that emitted the event.
        /// 		
        public var eventSource: Swift.String?
        ///
        /// 			The ID of the event.
        /// 		
        public var id: Swift.String?
        ///
        /// 			The name of the event.
        /// 		
        public var name: Swift.String?
        ///
        /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
        ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resourceCollection: DevOpsGuruClientTypes.ResourceCollection?
        ///
        /// 			An EventResource object that contains information about the resource that emitted the event.
        /// 		
        public var resources: [DevOpsGuruClientTypes.EventResource]?
        ///  A Timestamp that specifies the time the event occurred.
        public var time: ClientRuntime.Date?

        public init (
            dataSource: DevOpsGuruClientTypes.EventDataSource? = nil,
            eventClass: DevOpsGuruClientTypes.EventClass? = nil,
            eventSource: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            resourceCollection: DevOpsGuruClientTypes.ResourceCollection? = nil,
            resources: [DevOpsGuruClientTypes.EventResource]? = nil,
            time: ClientRuntime.Date? = nil
        )
        {
            self.dataSource = dataSource
            self.eventClass = eventClass
            self.eventSource = eventSource
            self.id = id
            self.name = name
            self.resourceCollection = resourceCollection
            self.resources = resources
            self.time = time
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum EventClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case configChange
        case deployment
        case infrastructure
        case schemaChange
        case securityChange
        case sdkUnknown(Swift.String)

        public static var allCases: [EventClass] {
            return [
                .configChange,
                .deployment,
                .infrastructure,
                .schemaChange,
                .securityChange,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .configChange: return "CONFIG_CHANGE"
            case .deployment: return "DEPLOYMENT"
            case .infrastructure: return "INFRASTRUCTURE"
            case .schemaChange: return "SCHEMA_CHANGE"
            case .securityChange: return "SECURITY_CHANGE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventClass(rawValue: rawValue) ?? EventClass.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes {
    public enum EventDataSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsCloudTrail
        case awsCodeDeploy
        case sdkUnknown(Swift.String)

        public static var allCases: [EventDataSource] {
            return [
                .awsCloudTrail,
                .awsCodeDeploy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsCloudTrail: return "AWS_CLOUD_TRAIL"
            case .awsCodeDeploy: return "AWS_CODE_DEPLOY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventDataSource(rawValue: rawValue) ?? EventDataSource.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes.EventResource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case name = "Name"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
    }
}

extension DevOpsGuruClientTypes.EventResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EventResource(arn: \(Swift.String(describing: arn)), name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			The AWS resource that emitted an event. AWS resource events and metrics are analyzed by DevOps Guru to find anomalous behavior and
    /// 			provide recommendations to improve your operational solutions.
    /// 		
    public struct EventResource: Swift.Equatable {
        ///
        /// 			The Amazon Resource Name (ARN) of the resource that emitted an event.
        /// 		
        public var arn: Swift.String?
        ///
        /// 			The name of the resource that emitted an event.
        /// 		
        public var name: Swift.String?
        ///
        /// 			The type of resource that emitted an event.
        /// 		
        public var type: Swift.String?

        public init (
            arn: Swift.String? = nil,
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.arn = arn
            self.name = name
            self.type = type
        }
    }

}

extension DevOpsGuruClientTypes.EventTimeRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromTime = "FromTime"
        case toTime = "ToTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromTime = fromTime {
            try encodeContainer.encode(fromTime.timeIntervalSince1970, forKey: .fromTime)
        }
        if let toTime = toTime {
            try encodeContainer.encode(toTime.timeIntervalSince1970, forKey: .toTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .fromTime)
        fromTime = fromTimeDecoded
        let toTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .toTime)
        toTime = toTimeDecoded
    }
}

extension DevOpsGuruClientTypes.EventTimeRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EventTimeRange(fromTime: \(Swift.String(describing: fromTime)), toTime: \(Swift.String(describing: toTime)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			The time range during which an AWS event occurred. AWS resource events and metrics are analyzed by DevOps Guru to find anomalous behavior and
    /// 			provide recommendations to improve your operational solutions.
    /// 		
    public struct EventTimeRange: Swift.Equatable {
        ///
        /// 			The time when the event started.
        /// 		
        /// This member is required.
        public var fromTime: ClientRuntime.Date?
        ///
        /// 			The time when the event ended.
        /// 		
        /// This member is required.
        public var toTime: ClientRuntime.Date?

        public init (
            fromTime: ClientRuntime.Date? = nil,
            toTime: ClientRuntime.Date? = nil
        )
        {
            self.fromTime = fromTime
            self.toTime = toTime
        }
    }

}

extension GetCostEstimationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCostEstimationInput(nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetCostEstimationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetCostEstimationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCostEstimationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCostEstimationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCostEstimationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCostEstimationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCostEstimationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCostEstimationOutputError>
}

public struct GetCostEstimationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCostEstimationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCostEstimationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCostEstimationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCostEstimationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCostEstimationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCostEstimationOutputError>
}

public struct GetCostEstimationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCostEstimationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetCostEstimationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCostEstimationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/cost-estimation"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetCostEstimationInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetCostEstimationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCostEstimationOutputError>
}

public struct GetCostEstimationInput: Swift.Equatable {
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If this value is null, it retrieves the first page.
    public var nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct GetCostEstimationInputBody: Swift.Equatable {
}

extension GetCostEstimationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCostEstimationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCostEstimationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCostEstimationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCostEstimationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCostEstimationOutputResponse(costs: \(Swift.String(describing: costs)), nextToken: \(Swift.String(describing: nextToken)), resourceCollection: \(Swift.String(describing: resourceCollection)), status: \(Swift.String(describing: status)), timeRange: \(Swift.String(describing: timeRange)), totalCost: \(Swift.String(describing: totalCost)))"}
}

extension GetCostEstimationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCostEstimationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.costs = output.costs
            self.nextToken = output.nextToken
            self.resourceCollection = output.resourceCollection
            self.status = output.status
            self.timeRange = output.timeRange
            self.totalCost = output.totalCost
        } else {
            self.costs = nil
            self.nextToken = nil
            self.resourceCollection = nil
            self.status = nil
            self.timeRange = nil
            self.totalCost = 0.0
        }
    }
}

public struct GetCostEstimationOutputResponse: Swift.Equatable {
    /// An array of ResourceCost objects that each contains details
    /// 			about the monthly cost estimate to analyze one of your AWS resources.
    public var costs: [DevOpsGuruClientTypes.ServiceResourceCost]?
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If there are no more pages, this value is null.
    public var nextToken: Swift.String?
    /// The collection of the AWS resources used to create your monthly DevOps Guru cost estimate.
    public var resourceCollection: DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter?
    /// The status of creating this cost estimate. If it's still in progress, the status
    /// 			ONGOING is returned. If it is finished, the status COMPLETED is returned.
    public var status: DevOpsGuruClientTypes.CostEstimationStatus?
    /// The start and end time of the cost estimation.
    public var timeRange: DevOpsGuruClientTypes.CostEstimationTimeRange?
    /// The estimated monthly cost to analyze the AWS resources.
    /// 			This value is the sum of the estimated costs to analyze each resource in the Costs
    /// 			object in this response.
    public var totalCost: Swift.Double

    public init (
        costs: [DevOpsGuruClientTypes.ServiceResourceCost]? = nil,
        nextToken: Swift.String? = nil,
        resourceCollection: DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter? = nil,
        status: DevOpsGuruClientTypes.CostEstimationStatus? = nil,
        timeRange: DevOpsGuruClientTypes.CostEstimationTimeRange? = nil,
        totalCost: Swift.Double = 0.0
    )
    {
        self.costs = costs
        self.nextToken = nextToken
        self.resourceCollection = resourceCollection
        self.status = status
        self.timeRange = timeRange
        self.totalCost = totalCost
    }
}

struct GetCostEstimationOutputResponseBody: Swift.Equatable {
    public let resourceCollection: DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter?
    public let status: DevOpsGuruClientTypes.CostEstimationStatus?
    public let costs: [DevOpsGuruClientTypes.ServiceResourceCost]?
    public let timeRange: DevOpsGuruClientTypes.CostEstimationTimeRange?
    public let totalCost: Swift.Double
    public let nextToken: Swift.String?
}

extension GetCostEstimationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case costs = "Costs"
        case nextToken = "NextToken"
        case resourceCollection = "ResourceCollection"
        case status = "Status"
        case timeRange = "TimeRange"
        case totalCost = "TotalCost"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CostEstimationStatus.self, forKey: .status)
        status = statusDecoded
        let costsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.ServiceResourceCost?].self, forKey: .costs)
        var costsDecoded0:[DevOpsGuruClientTypes.ServiceResourceCost]? = nil
        if let costsContainer = costsContainer {
            costsDecoded0 = [DevOpsGuruClientTypes.ServiceResourceCost]()
            for structure0 in costsContainer {
                if let structure0 = structure0 {
                    costsDecoded0?.append(structure0)
                }
            }
        }
        costs = costsDecoded0
        let timeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CostEstimationTimeRange.self, forKey: .timeRange)
        timeRange = timeRangeDecoded
        let totalCostDecoded = try containerValues.decode(Swift.Double.self, forKey: .totalCost)
        totalCost = totalCostDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetResourceCollectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetResourceCollectionInput(nextToken: \(Swift.String(describing: nextToken)), resourceCollectionType: \(Swift.String(describing: resourceCollectionType)))"}
}

extension GetResourceCollectionInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetResourceCollectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetResourceCollectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetResourceCollectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetResourceCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetResourceCollectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetResourceCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetResourceCollectionOutputError>
}

public struct GetResourceCollectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetResourceCollectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetResourceCollectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetResourceCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetResourceCollectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetResourceCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetResourceCollectionOutputError>
}

public struct GetResourceCollectionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetResourceCollectionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: GetResourceCollectionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetResourceCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let resourceCollectionType = input.resourceCollectionType else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("resourceCollectionType is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/resource-collections/\(resourceCollectionType.rawValue.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetResourceCollectionInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetResourceCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetResourceCollectionOutputError>
}

public struct GetResourceCollectionInput: Swift.Equatable {
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If this value is null, it retrieves the first page.
    public var nextToken: Swift.String?
    ///
    ///    		The type of AWS resource collections to return. The one valid value is CLOUD_FORMATION for
    ///    		AWS CloudFormation stacks.
    ///    	
    /// This member is required.
    public var resourceCollectionType: DevOpsGuruClientTypes.ResourceCollectionType?

    public init (
        nextToken: Swift.String? = nil,
        resourceCollectionType: DevOpsGuruClientTypes.ResourceCollectionType? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceCollectionType = resourceCollectionType
    }
}

struct GetResourceCollectionInputBody: Swift.Equatable {
}

extension GetResourceCollectionInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetResourceCollectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetResourceCollectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetResourceCollectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetResourceCollectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetResourceCollectionOutputResponse(nextToken: \(Swift.String(describing: nextToken)), resourceCollection: \(Swift.String(describing: resourceCollection)))"}
}

extension GetResourceCollectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetResourceCollectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.resourceCollection = output.resourceCollection
        } else {
            self.nextToken = nil
            self.resourceCollection = nil
        }
    }
}

public struct GetResourceCollectionOutputResponse: Swift.Equatable {
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If there are no more pages, this value is null.
    public var nextToken: Swift.String?
    ///
    ///    		The requested list of AWS resource collections. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
    ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
    ///    	
    public var resourceCollection: DevOpsGuruClientTypes.ResourceCollectionFilter?

    public init (
        nextToken: Swift.String? = nil,
        resourceCollection: DevOpsGuruClientTypes.ResourceCollectionFilter? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceCollection = resourceCollection
    }
}

struct GetResourceCollectionOutputResponseBody: Swift.Equatable {
    public let resourceCollection: DevOpsGuruClientTypes.ResourceCollectionFilter?
    public let nextToken: Swift.String?
}

extension GetResourceCollectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case resourceCollection = "ResourceCollection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollectionFilter.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DevOpsGuruClientTypes.InsightFeedback: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case feedback = "Feedback"
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let feedback = feedback {
            try encodeContainer.encode(feedback.rawValue, forKey: .feedback)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let feedbackDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightFeedbackOption.self, forKey: .feedback)
        feedback = feedbackDecoded
    }
}

extension DevOpsGuruClientTypes.InsightFeedback: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsightFeedback(feedback: \(Swift.String(describing: feedback)), id: \(Swift.String(describing: id)))"}
}

extension DevOpsGuruClientTypes {
    ///
    ///       	Information about insight feedback received from a customer.
    ///
    public struct InsightFeedback: Swift.Equatable {
        ///
        ///       	The feedback provided by the customer.
        ///
        public var feedback: DevOpsGuruClientTypes.InsightFeedbackOption?
        ///
        ///       	The insight feedback ID.
        ///
        public var id: Swift.String?

        public init (
            feedback: DevOpsGuruClientTypes.InsightFeedbackOption? = nil,
            id: Swift.String? = nil
        )
        {
            self.feedback = feedback
            self.id = id
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum InsightFeedbackOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case alertTooSensitive
        case dataIncorrect
        case dataNoisyAnomaly
        case recommendationUseful
        case validCollection
        case sdkUnknown(Swift.String)

        public static var allCases: [InsightFeedbackOption] {
            return [
                .alertTooSensitive,
                .dataIncorrect,
                .dataNoisyAnomaly,
                .recommendationUseful,
                .validCollection,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .alertTooSensitive: return "ALERT_TOO_SENSITIVE"
            case .dataIncorrect: return "DATA_INCORRECT"
            case .dataNoisyAnomaly: return "DATA_NOISY_ANOMALY"
            case .recommendationUseful: return "RECOMMENDATION_USEFUL"
            case .validCollection: return "VALID_COLLECTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InsightFeedbackOption(rawValue: rawValue) ?? InsightFeedbackOption.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes.InsightHealth: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case meanTimeToRecoverInMilliseconds = "MeanTimeToRecoverInMilliseconds"
        case openProactiveInsights = "OpenProactiveInsights"
        case openReactiveInsights = "OpenReactiveInsights"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let meanTimeToRecoverInMilliseconds = meanTimeToRecoverInMilliseconds {
            try encodeContainer.encode(meanTimeToRecoverInMilliseconds, forKey: .meanTimeToRecoverInMilliseconds)
        }
        if openProactiveInsights != 0 {
            try encodeContainer.encode(openProactiveInsights, forKey: .openProactiveInsights)
        }
        if openReactiveInsights != 0 {
            try encodeContainer.encode(openReactiveInsights, forKey: .openReactiveInsights)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let openProactiveInsightsDecoded = try containerValues.decode(Swift.Int.self, forKey: .openProactiveInsights)
        openProactiveInsights = openProactiveInsightsDecoded
        let openReactiveInsightsDecoded = try containerValues.decode(Swift.Int.self, forKey: .openReactiveInsights)
        openReactiveInsights = openReactiveInsightsDecoded
        let meanTimeToRecoverInMillisecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .meanTimeToRecoverInMilliseconds)
        meanTimeToRecoverInMilliseconds = meanTimeToRecoverInMillisecondsDecoded
    }
}

extension DevOpsGuruClientTypes.InsightHealth: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsightHealth(meanTimeToRecoverInMilliseconds: \(Swift.String(describing: meanTimeToRecoverInMilliseconds)), openProactiveInsights: \(Swift.String(describing: openProactiveInsights)), openReactiveInsights: \(Swift.String(describing: openReactiveInsights)))"}
}

extension DevOpsGuruClientTypes {
    ///
    ///       	Information about the number of open reactive and proactive insights that can be
    ///       	used to gauge the health of your system.
    ///
    public struct InsightHealth: Swift.Equatable {
        ///
        ///       	The Meant Time to Recover (MTTR) for the insight.	
        ///
        public var meanTimeToRecoverInMilliseconds: Swift.Int?
        ///
        ///       	The number of open proactive insights.
        ///
        public var openProactiveInsights: Swift.Int
        ///
        ///       	The number of open reactive insights.
        ///
        public var openReactiveInsights: Swift.Int

        public init (
            meanTimeToRecoverInMilliseconds: Swift.Int? = nil,
            openProactiveInsights: Swift.Int = 0,
            openReactiveInsights: Swift.Int = 0
        )
        {
            self.meanTimeToRecoverInMilliseconds = meanTimeToRecoverInMilliseconds
            self.openProactiveInsights = openProactiveInsights
            self.openReactiveInsights = openReactiveInsights
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum InsightSeverity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [InsightSeverity] {
            return [
                .high,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InsightSeverity(rawValue: rawValue) ?? InsightSeverity.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes {
    public enum InsightStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case closed
        case ongoing
        case sdkUnknown(Swift.String)

        public static var allCases: [InsightStatus] {
            return [
                .closed,
                .ongoing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .closed: return "CLOSED"
            case .ongoing: return "ONGOING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InsightStatus(rawValue: rawValue) ?? InsightStatus.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes.InsightTimeRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension DevOpsGuruClientTypes.InsightTimeRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsightTimeRange(endTime: \(Swift.String(describing: endTime)), startTime: \(Swift.String(describing: startTime)))"}
}

extension DevOpsGuruClientTypes {
    ///  A time ranged that specifies when the observed behavior in an insight started and
    /// 			ended.
    public struct InsightTimeRange: Swift.Equatable {
        ///
        /// 			The time when the behavior described in an insight ended.
        /// 		
        public var endTime: ClientRuntime.Date?
        ///
        /// 			The time when the behavior described in an insight started.
        /// 		
        /// This member is required.
        public var startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum InsightType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case proactive
        case reactive
        case sdkUnknown(Swift.String)

        public static var allCases: [InsightType] {
            return [
                .proactive,
                .reactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .proactive: return "PROACTIVE"
            case .reactive: return "REACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InsightType(rawValue: rawValue) ?? InsightType.sdkUnknown(rawValue)
        }
    }
}

extension InternalServerException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServerException(message: \(Swift.String(describing: message)), retryAfterSeconds: \(Swift.String(describing: retryAfterSeconds)))"}
}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            self.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        } else {
            self.retryAfterSeconds = 0
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An internal failure in an Amazon service occurred.
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// This member is required.
    public var message: Swift.String?
    ///
    /// 			The number of seconds after which the action that caused the internal server
    /// 			exception can be retried.
    /// 		
    public var retryAfterSeconds: Swift.Int

    public init (
        message: Swift.String? = nil,
        retryAfterSeconds: Swift.Int = 0
    )
    {
        self.message = message
        self.retryAfterSeconds = retryAfterSeconds
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListAnomaliesForInsightInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAnomaliesForInsightInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAnomaliesForInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAnomaliesForInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAnomaliesForInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAnomaliesForInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAnomaliesForInsightOutputError>
}

extension ListAnomaliesForInsightInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAnomaliesForInsightInput(insightId: \(Swift.String(describing: insightId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), startTimeRange: \(Swift.String(describing: startTimeRange)))"}
}

extension ListAnomaliesForInsightInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startTimeRange = "StartTimeRange"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTimeRange = startTimeRange {
            try encodeContainer.encode(startTimeRange, forKey: .startTimeRange)
        }
    }
}

public struct ListAnomaliesForInsightInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAnomaliesForInsightInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAnomaliesForInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAnomaliesForInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAnomaliesForInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAnomaliesForInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAnomaliesForInsightOutputError>
}

public struct ListAnomaliesForInsightInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAnomaliesForInsightInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAnomaliesForInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAnomaliesForInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAnomaliesForInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAnomaliesForInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAnomaliesForInsightOutputError>
}

public struct ListAnomaliesForInsightInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAnomaliesForInsightInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListAnomaliesForInsightInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAnomaliesForInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let insightId = input.insightId else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("insightId is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/anomalies/insight/\(insightId.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListAnomaliesForInsightInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListAnomaliesForInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAnomaliesForInsightOutputError>
}

public struct ListAnomaliesForInsightInput: Swift.Equatable {
    ///
    /// 			The ID of the insight. The returned anomalies belong to this insight.
    /// 		
    /// This member is required.
    public var insightId: Swift.String?
    /// The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If this value is null, it retrieves the first page.
    public var nextToken: Swift.String?
    ///
    ///    		A time range used to specify when the requested anomalies started. All returned anomalies started
    ///    		during this time range.
    ///    	
    public var startTimeRange: DevOpsGuruClientTypes.StartTimeRange?

    public init (
        insightId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTimeRange: DevOpsGuruClientTypes.StartTimeRange? = nil
    )
    {
        self.insightId = insightId
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startTimeRange = startTimeRange
    }
}

struct ListAnomaliesForInsightInputBody: Swift.Equatable {
    public let startTimeRange: DevOpsGuruClientTypes.StartTimeRange?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension ListAnomaliesForInsightInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startTimeRange = "StartTimeRange"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.StartTimeRange.self, forKey: .startTimeRange)
        startTimeRange = startTimeRangeDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAnomaliesForInsightOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAnomaliesForInsightOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAnomaliesForInsightOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAnomaliesForInsightOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAnomaliesForInsightOutputResponse(nextToken: \(Swift.String(describing: nextToken)), proactiveAnomalies: \(Swift.String(describing: proactiveAnomalies)), reactiveAnomalies: \(Swift.String(describing: reactiveAnomalies)))"}
}

extension ListAnomaliesForInsightOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAnomaliesForInsightOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.proactiveAnomalies = output.proactiveAnomalies
            self.reactiveAnomalies = output.reactiveAnomalies
        } else {
            self.nextToken = nil
            self.proactiveAnomalies = nil
            self.reactiveAnomalies = nil
        }
    }
}

public struct ListAnomaliesForInsightOutputResponse: Swift.Equatable {
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If there are no more pages, this value is null.
    public var nextToken: Swift.String?
    ///
    /// 			An array of ProactiveAnomalySummary objects that represent the requested anomalies
    /// 		
    public var proactiveAnomalies: [DevOpsGuruClientTypes.ProactiveAnomalySummary]?
    ///
    /// 			An array of ReactiveAnomalySummary objects that represent the requested anomalies
    /// 		
    public var reactiveAnomalies: [DevOpsGuruClientTypes.ReactiveAnomalySummary]?

    public init (
        nextToken: Swift.String? = nil,
        proactiveAnomalies: [DevOpsGuruClientTypes.ProactiveAnomalySummary]? = nil,
        reactiveAnomalies: [DevOpsGuruClientTypes.ReactiveAnomalySummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.proactiveAnomalies = proactiveAnomalies
        self.reactiveAnomalies = reactiveAnomalies
    }
}

struct ListAnomaliesForInsightOutputResponseBody: Swift.Equatable {
    public let proactiveAnomalies: [DevOpsGuruClientTypes.ProactiveAnomalySummary]?
    public let reactiveAnomalies: [DevOpsGuruClientTypes.ReactiveAnomalySummary]?
    public let nextToken: Swift.String?
}

extension ListAnomaliesForInsightOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case proactiveAnomalies = "ProactiveAnomalies"
        case reactiveAnomalies = "ReactiveAnomalies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proactiveAnomaliesContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.ProactiveAnomalySummary?].self, forKey: .proactiveAnomalies)
        var proactiveAnomaliesDecoded0:[DevOpsGuruClientTypes.ProactiveAnomalySummary]? = nil
        if let proactiveAnomaliesContainer = proactiveAnomaliesContainer {
            proactiveAnomaliesDecoded0 = [DevOpsGuruClientTypes.ProactiveAnomalySummary]()
            for structure0 in proactiveAnomaliesContainer {
                if let structure0 = structure0 {
                    proactiveAnomaliesDecoded0?.append(structure0)
                }
            }
        }
        proactiveAnomalies = proactiveAnomaliesDecoded0
        let reactiveAnomaliesContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.ReactiveAnomalySummary?].self, forKey: .reactiveAnomalies)
        var reactiveAnomaliesDecoded0:[DevOpsGuruClientTypes.ReactiveAnomalySummary]? = nil
        if let reactiveAnomaliesContainer = reactiveAnomaliesContainer {
            reactiveAnomaliesDecoded0 = [DevOpsGuruClientTypes.ReactiveAnomalySummary]()
            for structure0 in reactiveAnomaliesContainer {
                if let structure0 = structure0 {
                    reactiveAnomaliesDecoded0?.append(structure0)
                }
            }
        }
        reactiveAnomalies = reactiveAnomaliesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DevOpsGuruClientTypes.ListEventsFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSource = "DataSource"
        case eventClass = "EventClass"
        case eventSource = "EventSource"
        case eventTimeRange = "EventTimeRange"
        case insightId = "InsightId"
        case resourceCollection = "ResourceCollection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSource = dataSource {
            try encodeContainer.encode(dataSource.rawValue, forKey: .dataSource)
        }
        if let eventClass = eventClass {
            try encodeContainer.encode(eventClass.rawValue, forKey: .eventClass)
        }
        if let eventSource = eventSource {
            try encodeContainer.encode(eventSource, forKey: .eventSource)
        }
        if let eventTimeRange = eventTimeRange {
            try encodeContainer.encode(eventTimeRange, forKey: .eventTimeRange)
        }
        if let insightId = insightId {
            try encodeContainer.encode(insightId, forKey: .insightId)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .insightId)
        insightId = insightIdDecoded
        let eventTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.EventTimeRange.self, forKey: .eventTimeRange)
        eventTimeRange = eventTimeRangeDecoded
        let eventClassDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.EventClass.self, forKey: .eventClass)
        eventClass = eventClassDecoded
        let eventSourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventSource)
        eventSource = eventSourceDecoded
        let dataSourceDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.EventDataSource.self, forKey: .dataSource)
        dataSource = dataSourceDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
    }
}

extension DevOpsGuruClientTypes.ListEventsFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEventsFilters(dataSource: \(Swift.String(describing: dataSource)), eventClass: \(Swift.String(describing: eventClass)), eventSource: \(Swift.String(describing: eventSource)), eventTimeRange: \(Swift.String(describing: eventTimeRange)), insightId: \(Swift.String(describing: insightId)), resourceCollection: \(Swift.String(describing: resourceCollection)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Filters you can use to specify which events are returned when ListEvents is called.
    /// 		
    public struct ListEventsFilters: Swift.Equatable {
        ///
        /// 			The source, AWS_CLOUD_TRAIL or AWS_CODE_DEPLOY, of the events you want returned.
        /// 		
        public var dataSource: DevOpsGuruClientTypes.EventDataSource?
        ///
        /// 			The class of the events you want to filter for, such as an infrastructure change, a deployment, or a schema change.      	
        /// 		
        public var eventClass: DevOpsGuruClientTypes.EventClass?
        ///
        /// 			The AWS source that emitted the events you want to filter for.
        /// 		
        public var eventSource: Swift.String?
        ///  A time range during which you want the filtered events to have occurred.
        public var eventTimeRange: DevOpsGuruClientTypes.EventTimeRange?
        ///
        /// 			An ID of an insight that is related to the events you want to filter for.
        /// 		
        public var insightId: Swift.String?
        ///
        /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
        ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resourceCollection: DevOpsGuruClientTypes.ResourceCollection?

        public init (
            dataSource: DevOpsGuruClientTypes.EventDataSource? = nil,
            eventClass: DevOpsGuruClientTypes.EventClass? = nil,
            eventSource: Swift.String? = nil,
            eventTimeRange: DevOpsGuruClientTypes.EventTimeRange? = nil,
            insightId: Swift.String? = nil,
            resourceCollection: DevOpsGuruClientTypes.ResourceCollection? = nil
        )
        {
            self.dataSource = dataSource
            self.eventClass = eventClass
            self.eventSource = eventSource
            self.eventTimeRange = eventTimeRange
            self.insightId = insightId
            self.resourceCollection = resourceCollection
        }
    }

}

public struct ListEventsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListEventsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListEventsOutputError>
}

extension ListEventsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEventsInput(filters: \(Swift.String(describing: filters)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListEventsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListEventsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListEventsOutputError>
}

public struct ListEventsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListEventsOutputError>
}

public struct ListEventsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListEventsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListEventsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/events"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListEventsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListEventsOutputError>
}

public struct ListEventsInput: Swift.Equatable {
    ///
    ///    		A ListEventsFilters object used to specify which events to return.
    ///    	
    /// This member is required.
    public var filters: DevOpsGuruClientTypes.ListEventsFilters?
    /// The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If this value is null, it retrieves the first page.
    public var nextToken: Swift.String?

    public init (
        filters: DevOpsGuruClientTypes.ListEventsFilters? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListEventsInputBody: Swift.Equatable {
    public let filters: DevOpsGuruClientTypes.ListEventsFilters?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension ListEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ListEventsFilters.self, forKey: .filters)
        filters = filtersDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListEventsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEventsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEventsOutputResponse(events: \(Swift.String(describing: events)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.nextToken = output.nextToken
        } else {
            self.events = nil
            self.nextToken = nil
        }
    }
}

public struct ListEventsOutputResponse: Swift.Equatable {
    ///
    ///    		A list of the requested events.
    ///    	
    /// This member is required.
    public var events: [DevOpsGuruClientTypes.Event]?
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If there are no more pages, this value is null.
    public var nextToken: Swift.String?

    public init (
        events: [DevOpsGuruClientTypes.Event]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.events = events
        self.nextToken = nextToken
    }
}

struct ListEventsOutputResponseBody: Swift.Equatable {
    public let events: [DevOpsGuruClientTypes.Event]?
    public let nextToken: Swift.String?
}

extension ListEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events = "Events"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.Event?].self, forKey: .events)
        var eventsDecoded0:[DevOpsGuruClientTypes.Event]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [DevOpsGuruClientTypes.Event]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DevOpsGuruClientTypes.ListInsightsAnyStatusFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case startTimeRange = "StartTimeRange"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let startTimeRange = startTimeRange {
            try encodeContainer.encode(startTimeRange, forKey: .startTimeRange)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightType.self, forKey: .type)
        type = typeDecoded
        let startTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.StartTimeRange.self, forKey: .startTimeRange)
        startTimeRange = startTimeRangeDecoded
    }
}

extension DevOpsGuruClientTypes.ListInsightsAnyStatusFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInsightsAnyStatusFilter(startTimeRange: \(Swift.String(describing: startTimeRange)), type: \(Swift.String(describing: type)))"}
}

extension DevOpsGuruClientTypes {
    ///
    ///    		Used to filter for insights that have any status.
    ///    	
    public struct ListInsightsAnyStatusFilter: Swift.Equatable {
        ///
        ///    		A time range used to specify when the behavior of the filtered insights started.
        ///    	
        /// This member is required.
        public var startTimeRange: DevOpsGuruClientTypes.StartTimeRange?
        ///
        ///    		Use to filter for either REACTIVE or PROACTIVE insights.
        ///    	
        /// This member is required.
        public var type: DevOpsGuruClientTypes.InsightType?

        public init (
            startTimeRange: DevOpsGuruClientTypes.StartTimeRange? = nil,
            type: DevOpsGuruClientTypes.InsightType? = nil
        )
        {
            self.startTimeRange = startTimeRange
            self.type = type
        }
    }

}

extension DevOpsGuruClientTypes.ListInsightsClosedStatusFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTimeRange = "EndTimeRange"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTimeRange = endTimeRange {
            try encodeContainer.encode(endTimeRange, forKey: .endTimeRange)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightType.self, forKey: .type)
        type = typeDecoded
        let endTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.EndTimeRange.self, forKey: .endTimeRange)
        endTimeRange = endTimeRangeDecoded
    }
}

extension DevOpsGuruClientTypes.ListInsightsClosedStatusFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInsightsClosedStatusFilter(endTimeRange: \(Swift.String(describing: endTimeRange)), type: \(Swift.String(describing: type)))"}
}

extension DevOpsGuruClientTypes {
    ///
    ///    		Used to filter for insights that have the status CLOSED.
    ///    	
    public struct ListInsightsClosedStatusFilter: Swift.Equatable {
        ///
        ///    		A time range used to specify when the behavior of the filtered insights ended.
        ///    	
        /// This member is required.
        public var endTimeRange: DevOpsGuruClientTypes.EndTimeRange?
        ///
        ///       	Use to filter for either REACTIVE or PROACTIVE insights.
        ///
        /// This member is required.
        public var type: DevOpsGuruClientTypes.InsightType?

        public init (
            endTimeRange: DevOpsGuruClientTypes.EndTimeRange? = nil,
            type: DevOpsGuruClientTypes.InsightType? = nil
        )
        {
            self.endTimeRange = endTimeRange
            self.type = type
        }
    }

}

public struct ListInsightsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInsightsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInsightsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInsightsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInsightsOutputError>
}

extension ListInsightsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInsightsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), statusFilter: \(Swift.String(describing: statusFilter)))"}
}

extension ListInsightsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let statusFilter = statusFilter {
            try encodeContainer.encode(statusFilter, forKey: .statusFilter)
        }
    }
}

public struct ListInsightsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInsightsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInsightsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInsightsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInsightsOutputError>
}

public struct ListInsightsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInsightsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInsightsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInsightsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInsightsOutputError>
}

public struct ListInsightsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInsightsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListInsightsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/insights"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListInsightsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInsightsOutputError>
}

public struct ListInsightsInput: Swift.Equatable {
    /// The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If this value is null, it retrieves the first page.
    public var nextToken: Swift.String?
    ///
    ///       	A filter used to filter the returned insights by their status. You can specify one status filter.
    ///
    /// This member is required.
    public var statusFilter: DevOpsGuruClientTypes.ListInsightsStatusFilter?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        statusFilter: DevOpsGuruClientTypes.ListInsightsStatusFilter? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.statusFilter = statusFilter
    }
}

struct ListInsightsInputBody: Swift.Equatable {
    public let statusFilter: DevOpsGuruClientTypes.ListInsightsStatusFilter?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
}

extension ListInsightsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case statusFilter = "StatusFilter"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusFilterDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ListInsightsStatusFilter.self, forKey: .statusFilter)
        statusFilter = statusFilterDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DevOpsGuruClientTypes.ListInsightsOngoingStatusFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightType.self, forKey: .type)
        type = typeDecoded
    }
}

extension DevOpsGuruClientTypes.ListInsightsOngoingStatusFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInsightsOngoingStatusFilter(type: \(Swift.String(describing: type)))"}
}

extension DevOpsGuruClientTypes {
    ///
    ///       	Used to filter for insights that have the status ONGOING.
    ///
    public struct ListInsightsOngoingStatusFilter: Swift.Equatable {
        ///
        ///    		Use to filter for either REACTIVE or PROACTIVE insights.
        ///    	
        /// This member is required.
        public var type: DevOpsGuruClientTypes.InsightType?

        public init (
            type: DevOpsGuruClientTypes.InsightType? = nil
        )
        {
            self.type = type
        }
    }

}

extension ListInsightsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInsightsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInsightsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInsightsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInsightsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), proactiveInsights: \(Swift.String(describing: proactiveInsights)), reactiveInsights: \(Swift.String(describing: reactiveInsights)))"}
}

extension ListInsightsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInsightsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.proactiveInsights = output.proactiveInsights
            self.reactiveInsights = output.reactiveInsights
        } else {
            self.nextToken = nil
            self.proactiveInsights = nil
            self.reactiveInsights = nil
        }
    }
}

public struct ListInsightsOutputResponse: Swift.Equatable {
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If there are no more pages, this value is null.
    public var nextToken: Swift.String?
    ///
    /// 			The returned list of proactive insights.
    /// 		
    public var proactiveInsights: [DevOpsGuruClientTypes.ProactiveInsightSummary]?
    ///
    /// 			The returned list of reactive insights.	
    /// 		
    public var reactiveInsights: [DevOpsGuruClientTypes.ReactiveInsightSummary]?

    public init (
        nextToken: Swift.String? = nil,
        proactiveInsights: [DevOpsGuruClientTypes.ProactiveInsightSummary]? = nil,
        reactiveInsights: [DevOpsGuruClientTypes.ReactiveInsightSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.proactiveInsights = proactiveInsights
        self.reactiveInsights = reactiveInsights
    }
}

struct ListInsightsOutputResponseBody: Swift.Equatable {
    public let proactiveInsights: [DevOpsGuruClientTypes.ProactiveInsightSummary]?
    public let reactiveInsights: [DevOpsGuruClientTypes.ReactiveInsightSummary]?
    public let nextToken: Swift.String?
}

extension ListInsightsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case proactiveInsights = "ProactiveInsights"
        case reactiveInsights = "ReactiveInsights"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proactiveInsightsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.ProactiveInsightSummary?].self, forKey: .proactiveInsights)
        var proactiveInsightsDecoded0:[DevOpsGuruClientTypes.ProactiveInsightSummary]? = nil
        if let proactiveInsightsContainer = proactiveInsightsContainer {
            proactiveInsightsDecoded0 = [DevOpsGuruClientTypes.ProactiveInsightSummary]()
            for structure0 in proactiveInsightsContainer {
                if let structure0 = structure0 {
                    proactiveInsightsDecoded0?.append(structure0)
                }
            }
        }
        proactiveInsights = proactiveInsightsDecoded0
        let reactiveInsightsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.ReactiveInsightSummary?].self, forKey: .reactiveInsights)
        var reactiveInsightsDecoded0:[DevOpsGuruClientTypes.ReactiveInsightSummary]? = nil
        if let reactiveInsightsContainer = reactiveInsightsContainer {
            reactiveInsightsDecoded0 = [DevOpsGuruClientTypes.ReactiveInsightSummary]()
            for structure0 in reactiveInsightsContainer {
                if let structure0 = structure0 {
                    reactiveInsightsDecoded0?.append(structure0)
                }
            }
        }
        reactiveInsights = reactiveInsightsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DevOpsGuruClientTypes.ListInsightsStatusFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case any = "Any"
        case closed = "Closed"
        case ongoing = "Ongoing"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let any = any {
            try encodeContainer.encode(any, forKey: .any)
        }
        if let closed = closed {
            try encodeContainer.encode(closed, forKey: .closed)
        }
        if let ongoing = ongoing {
            try encodeContainer.encode(ongoing, forKey: .ongoing)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ongoingDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ListInsightsOngoingStatusFilter.self, forKey: .ongoing)
        ongoing = ongoingDecoded
        let closedDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ListInsightsClosedStatusFilter.self, forKey: .closed)
        closed = closedDecoded
        let anyDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ListInsightsAnyStatusFilter.self, forKey: .any)
        any = anyDecoded
    }
}

extension DevOpsGuruClientTypes.ListInsightsStatusFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInsightsStatusFilter(any: \(Swift.String(describing: any)), closed: \(Swift.String(describing: closed)), ongoing: \(Swift.String(describing: ongoing)))"}
}

extension DevOpsGuruClientTypes {
    ///
    ///       	A filter used by ListInsights to specify which insights to return.
    ///
    public struct ListInsightsStatusFilter: Swift.Equatable {
        ///
        ///    		A ListInsightsAnyStatusFilter that specifies insights of any status
        ///    		that are either REACTIVE or PROACTIVE.
        ///    	
        public var any: DevOpsGuruClientTypes.ListInsightsAnyStatusFilter?
        ///
        ///    		A ListInsightsClosedStatusFilter that specifies closed insights that are
        ///    		either REACTIVE or PROACTIVE.
        ///    	
        public var closed: DevOpsGuruClientTypes.ListInsightsClosedStatusFilter?
        ///
        ///       	A ListInsightsAnyStatusFilter that specifies ongoing insights
        ///       	that are either REACTIVE or PROACTIVE.
        ///
        public var ongoing: DevOpsGuruClientTypes.ListInsightsOngoingStatusFilter?

        public init (
            any: DevOpsGuruClientTypes.ListInsightsAnyStatusFilter? = nil,
            closed: DevOpsGuruClientTypes.ListInsightsClosedStatusFilter? = nil,
            ongoing: DevOpsGuruClientTypes.ListInsightsOngoingStatusFilter? = nil
        )
        {
            self.any = any
            self.closed = closed
            self.ongoing = ongoing
        }
    }

}

public struct ListNotificationChannelsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNotificationChannelsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListNotificationChannelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNotificationChannelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListNotificationChannelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListNotificationChannelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNotificationChannelsOutputError>
}

extension ListNotificationChannelsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListNotificationChannelsInput(nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListNotificationChannelsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListNotificationChannelsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNotificationChannelsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListNotificationChannelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNotificationChannelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListNotificationChannelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListNotificationChannelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNotificationChannelsOutputError>
}

public struct ListNotificationChannelsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNotificationChannelsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListNotificationChannelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNotificationChannelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListNotificationChannelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListNotificationChannelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNotificationChannelsOutputError>
}

public struct ListNotificationChannelsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListNotificationChannelsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListNotificationChannelsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListNotificationChannelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/channels"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListNotificationChannelsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListNotificationChannelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListNotificationChannelsOutputError>
}

public struct ListNotificationChannelsInput: Swift.Equatable {
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If this value is null, it retrieves the first page.
    public var nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

struct ListNotificationChannelsInputBody: Swift.Equatable {
    public let nextToken: Swift.String?
}

extension ListNotificationChannelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListNotificationChannelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListNotificationChannelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListNotificationChannelsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListNotificationChannelsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListNotificationChannelsOutputResponse(channels: \(Swift.String(describing: channels)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListNotificationChannelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListNotificationChannelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.channels = output.channels
            self.nextToken = output.nextToken
        } else {
            self.channels = nil
            self.nextToken = nil
        }
    }
}

public struct ListNotificationChannelsOutputResponse: Swift.Equatable {
    ///
    ///    		An array that contains the requested notification channels.
    ///    	
    public var channels: [DevOpsGuruClientTypes.NotificationChannel]?
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If there are no more pages, this value is null.
    public var nextToken: Swift.String?

    public init (
        channels: [DevOpsGuruClientTypes.NotificationChannel]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.channels = channels
        self.nextToken = nextToken
    }
}

struct ListNotificationChannelsOutputResponseBody: Swift.Equatable {
    public let channels: [DevOpsGuruClientTypes.NotificationChannel]?
    public let nextToken: Swift.String?
}

extension ListNotificationChannelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channels = "Channels"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.NotificationChannel?].self, forKey: .channels)
        var channelsDecoded0:[DevOpsGuruClientTypes.NotificationChannel]? = nil
        if let channelsContainer = channelsContainer {
            channelsDecoded0 = [DevOpsGuruClientTypes.NotificationChannel]()
            for structure0 in channelsContainer {
                if let structure0 = structure0 {
                    channelsDecoded0?.append(structure0)
                }
            }
        }
        channels = channelsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListRecommendationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRecommendationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRecommendationsOutputError>
}

extension ListRecommendationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRecommendationsInput(insightId: \(Swift.String(describing: insightId)), locale: \(Swift.String(describing: locale)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListRecommendationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightId = "InsightId"
        case locale = "Locale"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let insightId = insightId {
            try encodeContainer.encode(insightId, forKey: .insightId)
        }
        if let locale = locale {
            try encodeContainer.encode(locale.rawValue, forKey: .locale)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListRecommendationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRecommendationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRecommendationsOutputError>
}

public struct ListRecommendationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRecommendationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRecommendationsOutputError>
}

public struct ListRecommendationsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRecommendationsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListRecommendationsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/recommendations"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListRecommendationsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRecommendationsOutputError>
}

public struct ListRecommendationsInput: Swift.Equatable {
    ///
    /// 			The ID of the requested insight.
    /// 		
    /// This member is required.
    public var insightId: Swift.String?
    /// A locale that specifies the language to use for recommendations.
    public var locale: DevOpsGuruClientTypes.Locale?
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If this value is null, it retrieves the first page.
    public var nextToken: Swift.String?

    public init (
        insightId: Swift.String? = nil,
        locale: DevOpsGuruClientTypes.Locale? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.insightId = insightId
        self.locale = locale
        self.nextToken = nextToken
    }
}

struct ListRecommendationsInputBody: Swift.Equatable {
    public let insightId: Swift.String?
    public let nextToken: Swift.String?
    public let locale: DevOpsGuruClientTypes.Locale?
}

extension ListRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightId = "InsightId"
        case locale = "Locale"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .insightId)
        insightId = insightIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let localeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.Locale.self, forKey: .locale)
        locale = localeDecoded
    }
}

extension ListRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRecommendationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRecommendationsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), recommendations: \(Swift.String(describing: recommendations)))"}
}

extension ListRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.recommendations = output.recommendations
        } else {
            self.nextToken = nil
            self.recommendations = nil
        }
    }
}

public struct ListRecommendationsOutputResponse: Swift.Equatable {
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If there are no more pages, this value is null.
    public var nextToken: Swift.String?
    ///
    ///    		An array of the requested recommendations.
    ///    	
    public var recommendations: [DevOpsGuruClientTypes.Recommendation]?

    public init (
        nextToken: Swift.String? = nil,
        recommendations: [DevOpsGuruClientTypes.Recommendation]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendations = recommendations
    }
}

struct ListRecommendationsOutputResponseBody: Swift.Equatable {
    public let recommendations: [DevOpsGuruClientTypes.Recommendation]?
    public let nextToken: Swift.String?
}

extension ListRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case recommendations = "Recommendations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.Recommendation?].self, forKey: .recommendations)
        var recommendationsDecoded0:[DevOpsGuruClientTypes.Recommendation]? = nil
        if let recommendationsContainer = recommendationsContainer {
            recommendationsDecoded0 = [DevOpsGuruClientTypes.Recommendation]()
            for structure0 in recommendationsContainer {
                if let structure0 = structure0 {
                    recommendationsDecoded0?.append(structure0)
                }
            }
        }
        recommendations = recommendationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DevOpsGuruClientTypes {
    public enum Locale: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deDe
        case enGb
        case enUs
        case esEs
        case frFr
        case itIt
        case jaJp
        case koKr
        case ptBr
        case zhCn
        case zhTw
        case sdkUnknown(Swift.String)

        public static var allCases: [Locale] {
            return [
                .deDe,
                .enGb,
                .enUs,
                .esEs,
                .frFr,
                .itIt,
                .jaJp,
                .koKr,
                .ptBr,
                .zhCn,
                .zhTw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deDe: return "DE_DE"
            case .enGb: return "EN_GB"
            case .enUs: return "EN_US"
            case .esEs: return "ES_ES"
            case .frFr: return "FR_FR"
            case .itIt: return "IT_IT"
            case .jaJp: return "JA_JP"
            case .koKr: return "KO_KR"
            case .ptBr: return "PT_BR"
            case .zhCn: return "ZH_CN"
            case .zhTw: return "ZH_TW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Locale(rawValue: rawValue) ?? Locale.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes.NotificationChannel: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case config = "Config"
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let config = config {
            try encodeContainer.encode(config, forKey: .config)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let configDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.NotificationChannelConfig.self, forKey: .config)
        config = configDecoded
    }
}

extension DevOpsGuruClientTypes.NotificationChannel: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotificationChannel(config: \(Swift.String(describing: config)), id: \(Swift.String(describing: id)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about a notification channel. A notification channel is used to notify you when DevOps Guru creates an insight.
    /// 			The one
    ///       	supported notification channel is Amazon Simple Notification Service (Amazon SNS).
    /// 		
    /// 		
    /// 		       If you use an Amazon SNS topic in another account, you must attach a policy to it that grants DevOps Guru permission
    /// 				to it notifications. DevOps Guru adds the required policy on your behalf to send notifications using Amazon SNS in your account.
    /// 				For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-required-permissions.html">Permissions
    /// 				for cross account Amazon SNS topics.
    /// 				     If you use an Amazon SNS topic that is encrypted by an AWS Key Management Service customer-managed key (CMK), then you must add permissions
    /// 				to the CMK. For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-kms-permissions.html">Permissions for
    /// 				AWS KMS–encrypted Amazon SNS topics.
    public struct NotificationChannel: Swift.Equatable {
        ///
        /// 			A NotificationChannelConfig object that contains information about configured notification channels.
        /// 		
        public var config: DevOpsGuruClientTypes.NotificationChannelConfig?
        ///
        /// 			The ID of a notification channel.
        /// 		
        public var id: Swift.String?

        public init (
            config: DevOpsGuruClientTypes.NotificationChannelConfig? = nil,
            id: Swift.String? = nil
        )
        {
            self.config = config
            self.id = id
        }
    }

}

extension DevOpsGuruClientTypes.NotificationChannelConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sns = "Sns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sns = sns {
            try encodeContainer.encode(sns, forKey: .sns)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snsDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.SnsChannelConfig.self, forKey: .sns)
        sns = snsDecoded
    }
}

extension DevOpsGuruClientTypes.NotificationChannelConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotificationChannelConfig(sns: \(Swift.String(describing: sns)))"}
}

extension DevOpsGuruClientTypes {
    ///  Information about notification channels you have configured with DevOps Guru.
    /// 			The one
    ///       	supported notification channel is Amazon Simple Notification Service (Amazon SNS).
    public struct NotificationChannelConfig: Swift.Equatable {
        ///
        /// 			Information about a notification channel configured in DevOps Guru to send notifications when insights are created.
        /// 		
        /// 		
        /// 		       If you use an Amazon SNS topic in another account, you must attach a policy to it that grants DevOps Guru permission
        /// 				to it notifications. DevOps Guru adds the required policy on your behalf to send notifications using Amazon SNS in your account.
        /// 				For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-required-permissions.html">Permissions
        /// 				for cross account Amazon SNS topics.
        /// 				     If you use an Amazon SNS topic that is encrypted by an AWS Key Management Service customer-managed key (CMK), then you must add permissions
        /// 				to the CMK. For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-kms-permissions.html">Permissions for
        /// 				AWS KMS–encrypted Amazon SNS topics.
        /// This member is required.
        public var sns: DevOpsGuruClientTypes.SnsChannelConfig?

        public init (
            sns: DevOpsGuruClientTypes.SnsChannelConfig? = nil
        )
        {
            self.sns = sns
        }
    }

}

extension DevOpsGuruClientTypes.OpsCenterIntegration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case optInStatus = "OptInStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let optInStatus = optInStatus {
            try encodeContainer.encode(optInStatus.rawValue, forKey: .optInStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optInStatusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.OptInStatus.self, forKey: .optInStatus)
        optInStatus = optInStatusDecoded
    }
}

extension DevOpsGuruClientTypes.OpsCenterIntegration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OpsCenterIntegration(optInStatus: \(Swift.String(describing: optInStatus)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about whether DevOps Guru is configured to create an OpsItem in AWS Systems Manager OpsCenter for each created insight.
    /// 		
    public struct OpsCenterIntegration: Swift.Equatable {
        ///
        /// 			Specifies if DevOps Guru is enabled to create an AWS Systems Manager OpsItem for each created insight.
        /// 		
        public var optInStatus: DevOpsGuruClientTypes.OptInStatus?

        public init (
            optInStatus: DevOpsGuruClientTypes.OptInStatus? = nil
        )
        {
            self.optInStatus = optInStatus
        }
    }

}

extension DevOpsGuruClientTypes.OpsCenterIntegrationConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case optInStatus = "OptInStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let optInStatus = optInStatus {
            try encodeContainer.encode(optInStatus.rawValue, forKey: .optInStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optInStatusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.OptInStatus.self, forKey: .optInStatus)
        optInStatus = optInStatusDecoded
    }
}

extension DevOpsGuruClientTypes.OpsCenterIntegrationConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OpsCenterIntegrationConfig(optInStatus: \(Swift.String(describing: optInStatus)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about whether DevOps Guru is configured to create an OpsItem in AWS Systems Manager OpsCenter for each created insight.
    /// 		
    public struct OpsCenterIntegrationConfig: Swift.Equatable {
        ///
        /// 			Specifies if DevOps Guru is enabled to create an AWS Systems Manager OpsItem for each created insight.
        /// 		
        public var optInStatus: DevOpsGuruClientTypes.OptInStatus?

        public init (
            optInStatus: DevOpsGuruClientTypes.OptInStatus? = nil
        )
        {
            self.optInStatus = optInStatus
        }
    }

}

extension DevOpsGuruClientTypes {
    ///
    /// 			Specifies if DevOps Guru is enabled to create an AWS Systems Manager OpsItem for each created insight.
    /// 		
    public enum OptInStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [OptInStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OptInStatus(rawValue: rawValue) ?? OptInStatus.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes.PredictionTimeRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension DevOpsGuruClientTypes.PredictionTimeRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PredictionTimeRange(endTime: \(Swift.String(describing: endTime)), startTime: \(Swift.String(describing: startTime)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			The time range during which anomalous behavior in a proactive anomaly or an insight is expected to occur.
    /// 		
    public struct PredictionTimeRange: Swift.Equatable {
        ///
        /// 			The time when the behavior in a proactive insight is expected to end.
        /// 		
        public var endTime: ClientRuntime.Date?
        ///
        /// 			The time range during which a metric limit is expected to be exceeded. This applies to proactive insights only.
        /// 		
        /// This member is required.
        public var startTime: ClientRuntime.Date?

        public init (
            endTime: ClientRuntime.Date? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension DevOpsGuruClientTypes.ProactiveAnomaly: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyReportedTimeRange = "AnomalyReportedTimeRange"
        case anomalyTimeRange = "AnomalyTimeRange"
        case associatedInsightId = "AssociatedInsightId"
        case id = "Id"
        case limit = "Limit"
        case predictionTimeRange = "PredictionTimeRange"
        case resourceCollection = "ResourceCollection"
        case severity = "Severity"
        case sourceDetails = "SourceDetails"
        case status = "Status"
        case updateTime = "UpdateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyReportedTimeRange = anomalyReportedTimeRange {
            try encodeContainer.encode(anomalyReportedTimeRange, forKey: .anomalyReportedTimeRange)
        }
        if let anomalyTimeRange = anomalyTimeRange {
            try encodeContainer.encode(anomalyTimeRange, forKey: .anomalyTimeRange)
        }
        if let associatedInsightId = associatedInsightId {
            try encodeContainer.encode(associatedInsightId, forKey: .associatedInsightId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let predictionTimeRange = predictionTimeRange {
            try encodeContainer.encode(predictionTimeRange, forKey: .predictionTimeRange)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let sourceDetails = sourceDetails {
            try encodeContainer.encode(sourceDetails, forKey: .sourceDetails)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updateTime = updateTime {
            try encodeContainer.encode(updateTime.timeIntervalSince1970, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let severityDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalySeverity.self, forKey: .severity)
        severity = severityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyStatus.self, forKey: .status)
        status = statusDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let anomalyTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyTimeRange.self, forKey: .anomalyTimeRange)
        anomalyTimeRange = anomalyTimeRangeDecoded
        let anomalyReportedTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyReportedTimeRange.self, forKey: .anomalyReportedTimeRange)
        anomalyReportedTimeRange = anomalyReportedTimeRangeDecoded
        let predictionTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.PredictionTimeRange.self, forKey: .predictionTimeRange)
        predictionTimeRange = predictionTimeRangeDecoded
        let sourceDetailsDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalySourceDetails.self, forKey: .sourceDetails)
        sourceDetails = sourceDetailsDecoded
        let associatedInsightIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedInsightId)
        associatedInsightId = associatedInsightIdDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DevOpsGuruClientTypes.ProactiveAnomaly: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProactiveAnomaly(anomalyReportedTimeRange: \(Swift.String(describing: anomalyReportedTimeRange)), anomalyTimeRange: \(Swift.String(describing: anomalyTimeRange)), associatedInsightId: \(Swift.String(describing: associatedInsightId)), id: \(Swift.String(describing: id)), limit: \(Swift.String(describing: limit)), predictionTimeRange: \(Swift.String(describing: predictionTimeRange)), resourceCollection: \(Swift.String(describing: resourceCollection)), severity: \(Swift.String(describing: severity)), sourceDetails: \(Swift.String(describing: sourceDetails)), status: \(Swift.String(describing: status)), updateTime: \(Swift.String(describing: updateTime)))"}
}

extension DevOpsGuruClientTypes {
    /// Information about an anomaly. This object is returned by ListAnomalies.
    public struct ProactiveAnomaly: Swift.Equatable {
        ///
        /// 			A AnomalyReportedTimeRange object that specifies the time range between when the anomaly is opened and the time when it is closed.
        /// 		
        public var anomalyReportedTimeRange: DevOpsGuruClientTypes.AnomalyReportedTimeRange?
        ///
        /// 			A time range that specifies when the observed unusual behavior in an anomaly started and ended. This is different from
        /// 			AnomalyReportedTimeRange, which specifies the time range when DevOps Guru opens and then closes
        /// 			an anomaly.
        /// 		
        public var anomalyTimeRange: DevOpsGuruClientTypes.AnomalyTimeRange?
        ///
        /// 			The ID of the insight that contains this anomaly. An insight is composed of related anomalies.
        /// 		
        public var associatedInsightId: Swift.String?
        ///
        /// 			The ID of a proactive anomaly.
        /// 		
        public var id: Swift.String?
        ///
        /// 			A threshold that was exceeded by behavior in analyzed resources. Exceeding this
        /// 			threshold is related to the anomalous behavior that generated this anomaly.
        /// 		
        public var limit: Swift.Double?
        ///
        /// 			The time range during which anomalous behavior in a proactive anomaly or an insight is expected to occur.
        /// 		
        public var predictionTimeRange: DevOpsGuruClientTypes.PredictionTimeRange?
        ///
        /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
        ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resourceCollection: DevOpsGuruClientTypes.ResourceCollection?
        ///
        /// 			The severity of a proactive anomaly.
        /// 		
        public var severity: DevOpsGuruClientTypes.AnomalySeverity?
        ///
        /// 			Details about the source of the analyzed operational data that triggered the anomaly. The one supported source is Amazon CloudWatch metrics.
        /// 		
        public var sourceDetails: DevOpsGuruClientTypes.AnomalySourceDetails?
        ///
        /// 			The status of a proactive anomaly.
        /// 		
        public var status: DevOpsGuruClientTypes.AnomalyStatus?
        ///
        /// 			The time of the anomaly's most recent update.
        /// 		
        public var updateTime: ClientRuntime.Date?

        public init (
            anomalyReportedTimeRange: DevOpsGuruClientTypes.AnomalyReportedTimeRange? = nil,
            anomalyTimeRange: DevOpsGuruClientTypes.AnomalyTimeRange? = nil,
            associatedInsightId: Swift.String? = nil,
            id: Swift.String? = nil,
            limit: Swift.Double? = nil,
            predictionTimeRange: DevOpsGuruClientTypes.PredictionTimeRange? = nil,
            resourceCollection: DevOpsGuruClientTypes.ResourceCollection? = nil,
            severity: DevOpsGuruClientTypes.AnomalySeverity? = nil,
            sourceDetails: DevOpsGuruClientTypes.AnomalySourceDetails? = nil,
            status: DevOpsGuruClientTypes.AnomalyStatus? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.anomalyReportedTimeRange = anomalyReportedTimeRange
            self.anomalyTimeRange = anomalyTimeRange
            self.associatedInsightId = associatedInsightId
            self.id = id
            self.limit = limit
            self.predictionTimeRange = predictionTimeRange
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.sourceDetails = sourceDetails
            self.status = status
            self.updateTime = updateTime
        }
    }

}

extension DevOpsGuruClientTypes.ProactiveAnomalySummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyReportedTimeRange = "AnomalyReportedTimeRange"
        case anomalyTimeRange = "AnomalyTimeRange"
        case associatedInsightId = "AssociatedInsightId"
        case id = "Id"
        case limit = "Limit"
        case predictionTimeRange = "PredictionTimeRange"
        case resourceCollection = "ResourceCollection"
        case severity = "Severity"
        case sourceDetails = "SourceDetails"
        case status = "Status"
        case updateTime = "UpdateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyReportedTimeRange = anomalyReportedTimeRange {
            try encodeContainer.encode(anomalyReportedTimeRange, forKey: .anomalyReportedTimeRange)
        }
        if let anomalyTimeRange = anomalyTimeRange {
            try encodeContainer.encode(anomalyTimeRange, forKey: .anomalyTimeRange)
        }
        if let associatedInsightId = associatedInsightId {
            try encodeContainer.encode(associatedInsightId, forKey: .associatedInsightId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let predictionTimeRange = predictionTimeRange {
            try encodeContainer.encode(predictionTimeRange, forKey: .predictionTimeRange)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let sourceDetails = sourceDetails {
            try encodeContainer.encode(sourceDetails, forKey: .sourceDetails)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updateTime = updateTime {
            try encodeContainer.encode(updateTime.timeIntervalSince1970, forKey: .updateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let severityDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalySeverity.self, forKey: .severity)
        severity = severityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyStatus.self, forKey: .status)
        status = statusDecoded
        let updateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updateTime)
        updateTime = updateTimeDecoded
        let anomalyTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyTimeRange.self, forKey: .anomalyTimeRange)
        anomalyTimeRange = anomalyTimeRangeDecoded
        let anomalyReportedTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyReportedTimeRange.self, forKey: .anomalyReportedTimeRange)
        anomalyReportedTimeRange = anomalyReportedTimeRangeDecoded
        let predictionTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.PredictionTimeRange.self, forKey: .predictionTimeRange)
        predictionTimeRange = predictionTimeRangeDecoded
        let sourceDetailsDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalySourceDetails.self, forKey: .sourceDetails)
        sourceDetails = sourceDetailsDecoded
        let associatedInsightIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedInsightId)
        associatedInsightId = associatedInsightIdDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DevOpsGuruClientTypes.ProactiveAnomalySummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProactiveAnomalySummary(anomalyReportedTimeRange: \(Swift.String(describing: anomalyReportedTimeRange)), anomalyTimeRange: \(Swift.String(describing: anomalyTimeRange)), associatedInsightId: \(Swift.String(describing: associatedInsightId)), id: \(Swift.String(describing: id)), limit: \(Swift.String(describing: limit)), predictionTimeRange: \(Swift.String(describing: predictionTimeRange)), resourceCollection: \(Swift.String(describing: resourceCollection)), severity: \(Swift.String(describing: severity)), sourceDetails: \(Swift.String(describing: sourceDetails)), status: \(Swift.String(describing: status)), updateTime: \(Swift.String(describing: updateTime)))"}
}

extension DevOpsGuruClientTypes {
    /// Details about a proactive anomaly. This object is returned by
    /// 			DescribeAnomaly.
    ///
    public struct ProactiveAnomalySummary: Swift.Equatable {
        ///
        /// 			A AnomalyReportedTimeRange object that specifies the time range between when the anomaly is opened and the time when it is closed.
        /// 		
        public var anomalyReportedTimeRange: DevOpsGuruClientTypes.AnomalyReportedTimeRange?
        ///
        /// 			A time range that specifies when the observed unusual behavior in an anomaly started and ended. This is different from
        /// 			AnomalyReportedTimeRange, which specifies the time range when DevOps Guru opens and then closes
        /// 			an anomaly.
        /// 		
        public var anomalyTimeRange: DevOpsGuruClientTypes.AnomalyTimeRange?
        ///
        /// 			The ID of the insight that contains this anomaly. An insight is composed of related anomalies.
        /// 		
        public var associatedInsightId: Swift.String?
        /// The ID of the anomaly.
        public var id: Swift.String?
        ///
        /// 			A threshold that was exceeded by behavior in analyzed resources. Exceeding this
        /// 			threshold is related to the anomalous behavior that generated this anomaly.
        /// 		
        public var limit: Swift.Double?
        ///
        /// 			The time range during which anomalous behavior in a proactive anomaly or an insight is expected to occur.
        /// 		
        public var predictionTimeRange: DevOpsGuruClientTypes.PredictionTimeRange?
        ///
        /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
        ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resourceCollection: DevOpsGuruClientTypes.ResourceCollection?
        /// The severity of the anomaly.
        public var severity: DevOpsGuruClientTypes.AnomalySeverity?
        ///
        /// 			Details about the source of the analyzed operational data that triggered the anomaly. The one supported source is Amazon CloudWatch metrics.
        /// 		
        public var sourceDetails: DevOpsGuruClientTypes.AnomalySourceDetails?
        /// The status of the anomaly.
        public var status: DevOpsGuruClientTypes.AnomalyStatus?
        ///
        /// 			The time of the anomaly's most recent update.
        /// 		
        public var updateTime: ClientRuntime.Date?

        public init (
            anomalyReportedTimeRange: DevOpsGuruClientTypes.AnomalyReportedTimeRange? = nil,
            anomalyTimeRange: DevOpsGuruClientTypes.AnomalyTimeRange? = nil,
            associatedInsightId: Swift.String? = nil,
            id: Swift.String? = nil,
            limit: Swift.Double? = nil,
            predictionTimeRange: DevOpsGuruClientTypes.PredictionTimeRange? = nil,
            resourceCollection: DevOpsGuruClientTypes.ResourceCollection? = nil,
            severity: DevOpsGuruClientTypes.AnomalySeverity? = nil,
            sourceDetails: DevOpsGuruClientTypes.AnomalySourceDetails? = nil,
            status: DevOpsGuruClientTypes.AnomalyStatus? = nil,
            updateTime: ClientRuntime.Date? = nil
        )
        {
            self.anomalyReportedTimeRange = anomalyReportedTimeRange
            self.anomalyTimeRange = anomalyTimeRange
            self.associatedInsightId = associatedInsightId
            self.id = id
            self.limit = limit
            self.predictionTimeRange = predictionTimeRange
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.sourceDetails = sourceDetails
            self.status = status
            self.updateTime = updateTime
        }
    }

}

extension DevOpsGuruClientTypes.ProactiveInsight: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case insightTimeRange = "InsightTimeRange"
        case name = "Name"
        case predictionTimeRange = "PredictionTimeRange"
        case resourceCollection = "ResourceCollection"
        case severity = "Severity"
        case ssmOpsItemId = "SsmOpsItemId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let insightTimeRange = insightTimeRange {
            try encodeContainer.encode(insightTimeRange, forKey: .insightTimeRange)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let predictionTimeRange = predictionTimeRange {
            try encodeContainer.encode(predictionTimeRange, forKey: .predictionTimeRange)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let ssmOpsItemId = ssmOpsItemId {
            try encodeContainer.encode(ssmOpsItemId, forKey: .ssmOpsItemId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let severityDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightSeverity.self, forKey: .severity)
        severity = severityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightStatus.self, forKey: .status)
        status = statusDecoded
        let insightTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightTimeRange.self, forKey: .insightTimeRange)
        insightTimeRange = insightTimeRangeDecoded
        let predictionTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.PredictionTimeRange.self, forKey: .predictionTimeRange)
        predictionTimeRange = predictionTimeRangeDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let ssmOpsItemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ssmOpsItemId)
        ssmOpsItemId = ssmOpsItemIdDecoded
    }
}

extension DevOpsGuruClientTypes.ProactiveInsight: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProactiveInsight(id: \(Swift.String(describing: id)), insightTimeRange: \(Swift.String(describing: insightTimeRange)), name: \(Swift.String(describing: name)), predictionTimeRange: \(Swift.String(describing: predictionTimeRange)), resourceCollection: \(Swift.String(describing: resourceCollection)), severity: \(Swift.String(describing: severity)), ssmOpsItemId: \(Swift.String(describing: ssmOpsItemId)), status: \(Swift.String(describing: status)))"}
}

extension DevOpsGuruClientTypes {
    /// Details about a proactive insight. This object is returned by ListInsights.
    public struct ProactiveInsight: Swift.Equatable {
        /// The ID of the proactive insight.
        public var id: Swift.String?
        ///  A time ranged that specifies when the observed behavior in an insight started and
        /// 			ended.
        public var insightTimeRange: DevOpsGuruClientTypes.InsightTimeRange?
        /// The name of the proactive insight.
        public var name: Swift.String?
        ///
        /// 			The time range during which anomalous behavior in a proactive anomaly or an insight is expected to occur.
        /// 		
        public var predictionTimeRange: DevOpsGuruClientTypes.PredictionTimeRange?
        ///
        /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
        ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resourceCollection: DevOpsGuruClientTypes.ResourceCollection?
        /// The severity of the proactive insight.
        public var severity: DevOpsGuruClientTypes.InsightSeverity?
        ///
        /// 			The ID of the AWS System Manager OpsItem created for this insight. You must enable
        /// 			the creation of OpstItems insights before they are created for each insight.
        /// 		
        public var ssmOpsItemId: Swift.String?
        /// The status of the proactive insight.
        public var status: DevOpsGuruClientTypes.InsightStatus?

        public init (
            id: Swift.String? = nil,
            insightTimeRange: DevOpsGuruClientTypes.InsightTimeRange? = nil,
            name: Swift.String? = nil,
            predictionTimeRange: DevOpsGuruClientTypes.PredictionTimeRange? = nil,
            resourceCollection: DevOpsGuruClientTypes.ResourceCollection? = nil,
            severity: DevOpsGuruClientTypes.InsightSeverity? = nil,
            ssmOpsItemId: Swift.String? = nil,
            status: DevOpsGuruClientTypes.InsightStatus? = nil
        )
        {
            self.id = id
            self.insightTimeRange = insightTimeRange
            self.name = name
            self.predictionTimeRange = predictionTimeRange
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.ssmOpsItemId = ssmOpsItemId
            self.status = status
        }
    }

}

extension DevOpsGuruClientTypes.ProactiveInsightSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case insightTimeRange = "InsightTimeRange"
        case name = "Name"
        case predictionTimeRange = "PredictionTimeRange"
        case resourceCollection = "ResourceCollection"
        case serviceCollection = "ServiceCollection"
        case severity = "Severity"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let insightTimeRange = insightTimeRange {
            try encodeContainer.encode(insightTimeRange, forKey: .insightTimeRange)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let predictionTimeRange = predictionTimeRange {
            try encodeContainer.encode(predictionTimeRange, forKey: .predictionTimeRange)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let serviceCollection = serviceCollection {
            try encodeContainer.encode(serviceCollection, forKey: .serviceCollection)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let severityDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightSeverity.self, forKey: .severity)
        severity = severityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightStatus.self, forKey: .status)
        status = statusDecoded
        let insightTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightTimeRange.self, forKey: .insightTimeRange)
        insightTimeRange = insightTimeRangeDecoded
        let predictionTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.PredictionTimeRange.self, forKey: .predictionTimeRange)
        predictionTimeRange = predictionTimeRangeDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let serviceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ServiceCollection.self, forKey: .serviceCollection)
        serviceCollection = serviceCollectionDecoded
    }
}

extension DevOpsGuruClientTypes.ProactiveInsightSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProactiveInsightSummary(id: \(Swift.String(describing: id)), insightTimeRange: \(Swift.String(describing: insightTimeRange)), name: \(Swift.String(describing: name)), predictionTimeRange: \(Swift.String(describing: predictionTimeRange)), resourceCollection: \(Swift.String(describing: resourceCollection)), serviceCollection: \(Swift.String(describing: serviceCollection)), severity: \(Swift.String(describing: severity)), status: \(Swift.String(describing: status)))"}
}

extension DevOpsGuruClientTypes {
    /// Details about a proactive insight. This object is returned by
    /// 			DescribeInsight.
    ///
    public struct ProactiveInsightSummary: Swift.Equatable {
        /// The ID of the proactive insight.
        public var id: Swift.String?
        ///  A time ranged that specifies when the observed behavior in an insight started and
        /// 			ended.
        public var insightTimeRange: DevOpsGuruClientTypes.InsightTimeRange?
        /// The name of the proactive insight.
        public var name: Swift.String?
        ///
        /// 			The time range during which anomalous behavior in a proactive anomaly or an insight is expected to occur.
        /// 		
        public var predictionTimeRange: DevOpsGuruClientTypes.PredictionTimeRange?
        ///
        /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
        ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resourceCollection: DevOpsGuruClientTypes.ResourceCollection?
        /// A collection of the names of AWS services.
        public var serviceCollection: DevOpsGuruClientTypes.ServiceCollection?
        /// The severity of the proactive insight.
        public var severity: DevOpsGuruClientTypes.InsightSeverity?
        /// The status of the proactive insight.
        public var status: DevOpsGuruClientTypes.InsightStatus?

        public init (
            id: Swift.String? = nil,
            insightTimeRange: DevOpsGuruClientTypes.InsightTimeRange? = nil,
            name: Swift.String? = nil,
            predictionTimeRange: DevOpsGuruClientTypes.PredictionTimeRange? = nil,
            resourceCollection: DevOpsGuruClientTypes.ResourceCollection? = nil,
            serviceCollection: DevOpsGuruClientTypes.ServiceCollection? = nil,
            severity: DevOpsGuruClientTypes.InsightSeverity? = nil,
            status: DevOpsGuruClientTypes.InsightStatus? = nil
        )
        {
            self.id = id
            self.insightTimeRange = insightTimeRange
            self.name = name
            self.predictionTimeRange = predictionTimeRange
            self.resourceCollection = resourceCollection
            self.serviceCollection = serviceCollection
            self.severity = severity
            self.status = status
        }
    }

}

public struct PutFeedbackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutFeedbackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutFeedbackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutFeedbackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutFeedbackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutFeedbackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutFeedbackOutputError>
}

extension PutFeedbackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutFeedbackInput(insightFeedback: \(Swift.String(describing: insightFeedback)))"}
}

extension PutFeedbackInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightFeedback = "InsightFeedback"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let insightFeedback = insightFeedback {
            try encodeContainer.encode(insightFeedback, forKey: .insightFeedback)
        }
    }
}

public struct PutFeedbackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutFeedbackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutFeedbackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutFeedbackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutFeedbackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutFeedbackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutFeedbackOutputError>
}

public struct PutFeedbackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutFeedbackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutFeedbackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutFeedbackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutFeedbackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutFeedbackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutFeedbackOutputError>
}

public struct PutFeedbackInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutFeedbackInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: PutFeedbackInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutFeedbackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/feedback"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutFeedbackInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutFeedbackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutFeedbackOutputError>
}

public struct PutFeedbackInput: Swift.Equatable {
    ///
    ///    		The feedback from customers is about the recommendations in this insight.
    ///    	
    public var insightFeedback: DevOpsGuruClientTypes.InsightFeedback?

    public init (
        insightFeedback: DevOpsGuruClientTypes.InsightFeedback? = nil
    )
    {
        self.insightFeedback = insightFeedback
    }
}

struct PutFeedbackInputBody: Swift.Equatable {
    public let insightFeedback: DevOpsGuruClientTypes.InsightFeedback?
}

extension PutFeedbackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightFeedback = "InsightFeedback"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightFeedbackDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightFeedback.self, forKey: .insightFeedback)
        insightFeedback = insightFeedbackDecoded
    }
}

extension PutFeedbackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutFeedbackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutFeedbackOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutFeedbackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutFeedbackOutputResponse()"}
}

extension PutFeedbackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutFeedbackOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutFeedbackOutputResponseBody: Swift.Equatable {
}

extension PutFeedbackOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DevOpsGuruClientTypes.ReactiveAnomaly: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyReportedTimeRange = "AnomalyReportedTimeRange"
        case anomalyTimeRange = "AnomalyTimeRange"
        case associatedInsightId = "AssociatedInsightId"
        case id = "Id"
        case resourceCollection = "ResourceCollection"
        case severity = "Severity"
        case sourceDetails = "SourceDetails"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyReportedTimeRange = anomalyReportedTimeRange {
            try encodeContainer.encode(anomalyReportedTimeRange, forKey: .anomalyReportedTimeRange)
        }
        if let anomalyTimeRange = anomalyTimeRange {
            try encodeContainer.encode(anomalyTimeRange, forKey: .anomalyTimeRange)
        }
        if let associatedInsightId = associatedInsightId {
            try encodeContainer.encode(associatedInsightId, forKey: .associatedInsightId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let sourceDetails = sourceDetails {
            try encodeContainer.encode(sourceDetails, forKey: .sourceDetails)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let severityDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalySeverity.self, forKey: .severity)
        severity = severityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyStatus.self, forKey: .status)
        status = statusDecoded
        let anomalyTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyTimeRange.self, forKey: .anomalyTimeRange)
        anomalyTimeRange = anomalyTimeRangeDecoded
        let anomalyReportedTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyReportedTimeRange.self, forKey: .anomalyReportedTimeRange)
        anomalyReportedTimeRange = anomalyReportedTimeRangeDecoded
        let sourceDetailsDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalySourceDetails.self, forKey: .sourceDetails)
        sourceDetails = sourceDetailsDecoded
        let associatedInsightIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedInsightId)
        associatedInsightId = associatedInsightIdDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
    }
}

extension DevOpsGuruClientTypes.ReactiveAnomaly: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReactiveAnomaly(anomalyReportedTimeRange: \(Swift.String(describing: anomalyReportedTimeRange)), anomalyTimeRange: \(Swift.String(describing: anomalyTimeRange)), associatedInsightId: \(Swift.String(describing: associatedInsightId)), id: \(Swift.String(describing: id)), resourceCollection: \(Swift.String(describing: resourceCollection)), severity: \(Swift.String(describing: severity)), sourceDetails: \(Swift.String(describing: sourceDetails)), status: \(Swift.String(describing: status)))"}
}

extension DevOpsGuruClientTypes {
    /// Details about a reactive anomaly.  This object is returned by ListAnomalies.
    public struct ReactiveAnomaly: Swift.Equatable {
        ///
        /// 			A AnomalyReportedTimeRange object that specifies the time range between when the anomaly is opened and the time when it is closed.
        /// 		
        public var anomalyReportedTimeRange: DevOpsGuruClientTypes.AnomalyReportedTimeRange?
        ///
        /// 			A time range that specifies when the observed unusual behavior in an anomaly started and ended. This is different from
        /// 			AnomalyReportedTimeRange, which specifies the time range when DevOps Guru opens and then closes
        /// 			an anomaly.
        /// 		
        public var anomalyTimeRange: DevOpsGuruClientTypes.AnomalyTimeRange?
        ///
        /// 			The ID of the insight that contains this anomaly. An insight is composed of related anomalies.
        /// 		
        public var associatedInsightId: Swift.String?
        /// The ID of the reactive anomaly.
        public var id: Swift.String?
        ///
        /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
        ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resourceCollection: DevOpsGuruClientTypes.ResourceCollection?
        /// The severity of the anomaly.
        public var severity: DevOpsGuruClientTypes.AnomalySeverity?
        ///
        /// 			Details about the source of the analyzed operational data that triggered the anomaly. The one supported source is Amazon CloudWatch metrics.
        /// 		
        public var sourceDetails: DevOpsGuruClientTypes.AnomalySourceDetails?
        ///
        /// 			The status of the anomaly.
        /// 		
        public var status: DevOpsGuruClientTypes.AnomalyStatus?

        public init (
            anomalyReportedTimeRange: DevOpsGuruClientTypes.AnomalyReportedTimeRange? = nil,
            anomalyTimeRange: DevOpsGuruClientTypes.AnomalyTimeRange? = nil,
            associatedInsightId: Swift.String? = nil,
            id: Swift.String? = nil,
            resourceCollection: DevOpsGuruClientTypes.ResourceCollection? = nil,
            severity: DevOpsGuruClientTypes.AnomalySeverity? = nil,
            sourceDetails: DevOpsGuruClientTypes.AnomalySourceDetails? = nil,
            status: DevOpsGuruClientTypes.AnomalyStatus? = nil
        )
        {
            self.anomalyReportedTimeRange = anomalyReportedTimeRange
            self.anomalyTimeRange = anomalyTimeRange
            self.associatedInsightId = associatedInsightId
            self.id = id
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.sourceDetails = sourceDetails
            self.status = status
        }
    }

}

extension DevOpsGuruClientTypes.ReactiveAnomalySummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyReportedTimeRange = "AnomalyReportedTimeRange"
        case anomalyTimeRange = "AnomalyTimeRange"
        case associatedInsightId = "AssociatedInsightId"
        case id = "Id"
        case resourceCollection = "ResourceCollection"
        case severity = "Severity"
        case sourceDetails = "SourceDetails"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyReportedTimeRange = anomalyReportedTimeRange {
            try encodeContainer.encode(anomalyReportedTimeRange, forKey: .anomalyReportedTimeRange)
        }
        if let anomalyTimeRange = anomalyTimeRange {
            try encodeContainer.encode(anomalyTimeRange, forKey: .anomalyTimeRange)
        }
        if let associatedInsightId = associatedInsightId {
            try encodeContainer.encode(associatedInsightId, forKey: .associatedInsightId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let sourceDetails = sourceDetails {
            try encodeContainer.encode(sourceDetails, forKey: .sourceDetails)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let severityDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalySeverity.self, forKey: .severity)
        severity = severityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyStatus.self, forKey: .status)
        status = statusDecoded
        let anomalyTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyTimeRange.self, forKey: .anomalyTimeRange)
        anomalyTimeRange = anomalyTimeRangeDecoded
        let anomalyReportedTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalyReportedTimeRange.self, forKey: .anomalyReportedTimeRange)
        anomalyReportedTimeRange = anomalyReportedTimeRangeDecoded
        let sourceDetailsDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.AnomalySourceDetails.self, forKey: .sourceDetails)
        sourceDetails = sourceDetailsDecoded
        let associatedInsightIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associatedInsightId)
        associatedInsightId = associatedInsightIdDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
    }
}

extension DevOpsGuruClientTypes.ReactiveAnomalySummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReactiveAnomalySummary(anomalyReportedTimeRange: \(Swift.String(describing: anomalyReportedTimeRange)), anomalyTimeRange: \(Swift.String(describing: anomalyTimeRange)), associatedInsightId: \(Swift.String(describing: associatedInsightId)), id: \(Swift.String(describing: id)), resourceCollection: \(Swift.String(describing: resourceCollection)), severity: \(Swift.String(describing: severity)), sourceDetails: \(Swift.String(describing: sourceDetails)), status: \(Swift.String(describing: status)))"}
}

extension DevOpsGuruClientTypes {
    /// Details about a reactive anomaly. This object is returned by
    /// 			DescribeAnomaly.
    ///
    public struct ReactiveAnomalySummary: Swift.Equatable {
        ///
        /// 			A AnomalyReportedTimeRange object that specifies the time range between when the anomaly is opened and the time when it is closed.
        /// 		
        public var anomalyReportedTimeRange: DevOpsGuruClientTypes.AnomalyReportedTimeRange?
        ///
        /// 			A time range that specifies when the observed unusual behavior in an anomaly started and ended. This is different from
        /// 			AnomalyReportedTimeRange, which specifies the time range when DevOps Guru opens and then closes
        /// 			an anomaly.
        /// 		
        public var anomalyTimeRange: DevOpsGuruClientTypes.AnomalyTimeRange?
        ///
        /// 			The ID of the insight that contains this anomaly. An insight is composed of related anomalies.
        /// 		
        public var associatedInsightId: Swift.String?
        ///
        /// 			The ID of the reactive anomaly.
        /// 		
        public var id: Swift.String?
        ///
        /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
        ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resourceCollection: DevOpsGuruClientTypes.ResourceCollection?
        ///
        /// 			The severity of the reactive anomaly.			
        /// 		
        public var severity: DevOpsGuruClientTypes.AnomalySeverity?
        ///
        /// 			Details about the source of the analyzed operational data that triggered the anomaly. The one supported source is Amazon CloudWatch metrics.
        /// 		
        public var sourceDetails: DevOpsGuruClientTypes.AnomalySourceDetails?
        ///
        /// 			The status of the reactive anomaly.
        /// 		
        public var status: DevOpsGuruClientTypes.AnomalyStatus?

        public init (
            anomalyReportedTimeRange: DevOpsGuruClientTypes.AnomalyReportedTimeRange? = nil,
            anomalyTimeRange: DevOpsGuruClientTypes.AnomalyTimeRange? = nil,
            associatedInsightId: Swift.String? = nil,
            id: Swift.String? = nil,
            resourceCollection: DevOpsGuruClientTypes.ResourceCollection? = nil,
            severity: DevOpsGuruClientTypes.AnomalySeverity? = nil,
            sourceDetails: DevOpsGuruClientTypes.AnomalySourceDetails? = nil,
            status: DevOpsGuruClientTypes.AnomalyStatus? = nil
        )
        {
            self.anomalyReportedTimeRange = anomalyReportedTimeRange
            self.anomalyTimeRange = anomalyTimeRange
            self.associatedInsightId = associatedInsightId
            self.id = id
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.sourceDetails = sourceDetails
            self.status = status
        }
    }

}

extension DevOpsGuruClientTypes.ReactiveInsight: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case insightTimeRange = "InsightTimeRange"
        case name = "Name"
        case resourceCollection = "ResourceCollection"
        case severity = "Severity"
        case ssmOpsItemId = "SsmOpsItemId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let insightTimeRange = insightTimeRange {
            try encodeContainer.encode(insightTimeRange, forKey: .insightTimeRange)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let ssmOpsItemId = ssmOpsItemId {
            try encodeContainer.encode(ssmOpsItemId, forKey: .ssmOpsItemId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let severityDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightSeverity.self, forKey: .severity)
        severity = severityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightStatus.self, forKey: .status)
        status = statusDecoded
        let insightTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightTimeRange.self, forKey: .insightTimeRange)
        insightTimeRange = insightTimeRangeDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let ssmOpsItemIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ssmOpsItemId)
        ssmOpsItemId = ssmOpsItemIdDecoded
    }
}

extension DevOpsGuruClientTypes.ReactiveInsight: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReactiveInsight(id: \(Swift.String(describing: id)), insightTimeRange: \(Swift.String(describing: insightTimeRange)), name: \(Swift.String(describing: name)), resourceCollection: \(Swift.String(describing: resourceCollection)), severity: \(Swift.String(describing: severity)), ssmOpsItemId: \(Swift.String(describing: ssmOpsItemId)), status: \(Swift.String(describing: status)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about a reactive insight. This object is returned by ListInsights.
    /// 		
    public struct ReactiveInsight: Swift.Equatable {
        ///
        /// 			The ID of a reactive insight.
        /// 		
        public var id: Swift.String?
        ///  A time ranged that specifies when the observed behavior in an insight started and
        /// 			ended.
        public var insightTimeRange: DevOpsGuruClientTypes.InsightTimeRange?
        ///
        /// 			The name of a reactive insight.
        /// 		
        public var name: Swift.String?
        ///
        /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
        ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resourceCollection: DevOpsGuruClientTypes.ResourceCollection?
        ///
        /// 			The severity of a reactive insight.
        /// 		
        public var severity: DevOpsGuruClientTypes.InsightSeverity?
        ///
        /// 			The ID of the AWS System Manager OpsItem created for this insight. You must enable
        /// 			the creation of OpstItems insights before they are created for each insight.
        /// 		
        public var ssmOpsItemId: Swift.String?
        ///
        /// 			The status of a reactive insight.
        /// 		
        public var status: DevOpsGuruClientTypes.InsightStatus?

        public init (
            id: Swift.String? = nil,
            insightTimeRange: DevOpsGuruClientTypes.InsightTimeRange? = nil,
            name: Swift.String? = nil,
            resourceCollection: DevOpsGuruClientTypes.ResourceCollection? = nil,
            severity: DevOpsGuruClientTypes.InsightSeverity? = nil,
            ssmOpsItemId: Swift.String? = nil,
            status: DevOpsGuruClientTypes.InsightStatus? = nil
        )
        {
            self.id = id
            self.insightTimeRange = insightTimeRange
            self.name = name
            self.resourceCollection = resourceCollection
            self.severity = severity
            self.ssmOpsItemId = ssmOpsItemId
            self.status = status
        }
    }

}

extension DevOpsGuruClientTypes.ReactiveInsightSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case insightTimeRange = "InsightTimeRange"
        case name = "Name"
        case resourceCollection = "ResourceCollection"
        case serviceCollection = "ServiceCollection"
        case severity = "Severity"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let insightTimeRange = insightTimeRange {
            try encodeContainer.encode(insightTimeRange, forKey: .insightTimeRange)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let serviceCollection = serviceCollection {
            try encodeContainer.encode(serviceCollection, forKey: .serviceCollection)
        }
        if let severity = severity {
            try encodeContainer.encode(severity.rawValue, forKey: .severity)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let severityDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightSeverity.self, forKey: .severity)
        severity = severityDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightStatus.self, forKey: .status)
        status = statusDecoded
        let insightTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightTimeRange.self, forKey: .insightTimeRange)
        insightTimeRange = insightTimeRangeDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let serviceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ServiceCollection.self, forKey: .serviceCollection)
        serviceCollection = serviceCollectionDecoded
    }
}

extension DevOpsGuruClientTypes.ReactiveInsightSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReactiveInsightSummary(id: \(Swift.String(describing: id)), insightTimeRange: \(Swift.String(describing: insightTimeRange)), name: \(Swift.String(describing: name)), resourceCollection: \(Swift.String(describing: resourceCollection)), serviceCollection: \(Swift.String(describing: serviceCollection)), severity: \(Swift.String(describing: severity)), status: \(Swift.String(describing: status)))"}
}

extension DevOpsGuruClientTypes {
    ///  Information about a reactive insight. This object is returned by
    /// 				DescribeInsight.
    ///
    public struct ReactiveInsightSummary: Swift.Equatable {
        ///
        /// 			The ID of a reactive summary.
        /// 		
        public var id: Swift.String?
        ///  A time ranged that specifies when the observed behavior in an insight started and
        /// 			ended.
        public var insightTimeRange: DevOpsGuruClientTypes.InsightTimeRange?
        ///
        /// 			The name of a reactive insight.
        /// 		
        public var name: Swift.String?
        ///
        /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
        ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resourceCollection: DevOpsGuruClientTypes.ResourceCollection?
        /// A collection of the names of AWS services.
        public var serviceCollection: DevOpsGuruClientTypes.ServiceCollection?
        ///
        /// 			The severity of a reactive insight.
        /// 		
        public var severity: DevOpsGuruClientTypes.InsightSeverity?
        ///
        /// 			The status of a reactive insight.
        /// 		
        public var status: DevOpsGuruClientTypes.InsightStatus?

        public init (
            id: Swift.String? = nil,
            insightTimeRange: DevOpsGuruClientTypes.InsightTimeRange? = nil,
            name: Swift.String? = nil,
            resourceCollection: DevOpsGuruClientTypes.ResourceCollection? = nil,
            serviceCollection: DevOpsGuruClientTypes.ServiceCollection? = nil,
            severity: DevOpsGuruClientTypes.InsightSeverity? = nil,
            status: DevOpsGuruClientTypes.InsightStatus? = nil
        )
        {
            self.id = id
            self.insightTimeRange = insightTimeRange
            self.name = name
            self.resourceCollection = resourceCollection
            self.serviceCollection = serviceCollection
            self.severity = severity
            self.status = status
        }
    }

}

extension DevOpsGuruClientTypes.Recommendation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case link = "Link"
        case name = "Name"
        case reason = "Reason"
        case relatedAnomalies = "RelatedAnomalies"
        case relatedEvents = "RelatedEvents"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let link = link {
            try encodeContainer.encode(link, forKey: .link)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let relatedAnomalies = relatedAnomalies {
            var relatedAnomaliesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedAnomalies)
            for recommendationrelatedanomalies0 in relatedAnomalies {
                try relatedAnomaliesContainer.encode(recommendationrelatedanomalies0)
            }
        }
        if let relatedEvents = relatedEvents {
            var relatedEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedEvents)
            for recommendationrelatedevents0 in relatedEvents {
                try relatedEventsContainer.encode(recommendationrelatedevents0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let linkDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .link)
        link = linkDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
        let relatedEventsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.RecommendationRelatedEvent?].self, forKey: .relatedEvents)
        var relatedEventsDecoded0:[DevOpsGuruClientTypes.RecommendationRelatedEvent]? = nil
        if let relatedEventsContainer = relatedEventsContainer {
            relatedEventsDecoded0 = [DevOpsGuruClientTypes.RecommendationRelatedEvent]()
            for structure0 in relatedEventsContainer {
                if let structure0 = structure0 {
                    relatedEventsDecoded0?.append(structure0)
                }
            }
        }
        relatedEvents = relatedEventsDecoded0
        let relatedAnomaliesContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.RecommendationRelatedAnomaly?].self, forKey: .relatedAnomalies)
        var relatedAnomaliesDecoded0:[DevOpsGuruClientTypes.RecommendationRelatedAnomaly]? = nil
        if let relatedAnomaliesContainer = relatedAnomaliesContainer {
            relatedAnomaliesDecoded0 = [DevOpsGuruClientTypes.RecommendationRelatedAnomaly]()
            for structure0 in relatedAnomaliesContainer {
                if let structure0 = structure0 {
                    relatedAnomaliesDecoded0?.append(structure0)
                }
            }
        }
        relatedAnomalies = relatedAnomaliesDecoded0
    }
}

extension DevOpsGuruClientTypes.Recommendation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Recommendation(description: \(Swift.String(describing: description)), link: \(Swift.String(describing: link)), name: \(Swift.String(describing: name)), reason: \(Swift.String(describing: reason)), relatedAnomalies: \(Swift.String(describing: relatedAnomalies)), relatedEvents: \(Swift.String(describing: relatedEvents)))"}
}

extension DevOpsGuruClientTypes {
    ///  Recommendation information to help you remediate detected anomalous behavior that
    /// 			generated an insight.
    public struct Recommendation: Swift.Equatable {
        ///
        /// 			A description of the problem.
        /// 		
        public var description: Swift.String?
        ///
        /// 			A hyperlink to information to help you address the problem.
        /// 		
        public var link: Swift.String?
        ///
        /// 			The name of the recommendation.
        /// 		
        public var name: Swift.String?
        ///
        /// 			The reason DevOps Guru flagged the anomalous behavior as a problem.
        /// 		
        public var reason: Swift.String?
        ///
        /// 			Anomalies that are related to the problem. Use these Anomalies to learn more about what's happening and to help address the issue.
        /// 		
        public var relatedAnomalies: [DevOpsGuruClientTypes.RecommendationRelatedAnomaly]?
        ///
        /// 			Events that are related to the problem. Use these events to learn more about what's happening and to help address the issue.
        /// 		
        public var relatedEvents: [DevOpsGuruClientTypes.RecommendationRelatedEvent]?

        public init (
            description: Swift.String? = nil,
            link: Swift.String? = nil,
            name: Swift.String? = nil,
            reason: Swift.String? = nil,
            relatedAnomalies: [DevOpsGuruClientTypes.RecommendationRelatedAnomaly]? = nil,
            relatedEvents: [DevOpsGuruClientTypes.RecommendationRelatedEvent]? = nil
        )
        {
            self.description = description
            self.link = link
            self.name = name
            self.reason = reason
            self.relatedAnomalies = relatedAnomalies
            self.relatedEvents = relatedEvents
        }
    }

}

extension DevOpsGuruClientTypes.RecommendationRelatedAnomaly: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resources = "Resources"
        case sourceDetails = "SourceDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for recommendationrelatedanomalyresources0 in resources {
                try resourcesContainer.encode(recommendationrelatedanomalyresources0)
            }
        }
        if let sourceDetails = sourceDetails {
            var sourceDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceDetails)
            for relatedanomalysourcedetails0 in sourceDetails {
                try sourceDetailsContainer.encode(relatedanomalysourcedetails0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcesContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.RecommendationRelatedAnomalyResource?].self, forKey: .resources)
        var resourcesDecoded0:[DevOpsGuruClientTypes.RecommendationRelatedAnomalyResource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [DevOpsGuruClientTypes.RecommendationRelatedAnomalyResource]()
            for structure0 in resourcesContainer {
                if let structure0 = structure0 {
                    resourcesDecoded0?.append(structure0)
                }
            }
        }
        resources = resourcesDecoded0
        let sourceDetailsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.RecommendationRelatedAnomalySourceDetail?].self, forKey: .sourceDetails)
        var sourceDetailsDecoded0:[DevOpsGuruClientTypes.RecommendationRelatedAnomalySourceDetail]? = nil
        if let sourceDetailsContainer = sourceDetailsContainer {
            sourceDetailsDecoded0 = [DevOpsGuruClientTypes.RecommendationRelatedAnomalySourceDetail]()
            for structure0 in sourceDetailsContainer {
                if let structure0 = structure0 {
                    sourceDetailsDecoded0?.append(structure0)
                }
            }
        }
        sourceDetails = sourceDetailsDecoded0
    }
}

extension DevOpsGuruClientTypes.RecommendationRelatedAnomaly: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecommendationRelatedAnomaly(resources: \(Swift.String(describing: resources)), sourceDetails: \(Swift.String(describing: sourceDetails)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about an anomaly that is related to a recommendation.
    /// 		
    public struct RecommendationRelatedAnomaly: Swift.Equatable {
        ///
        /// 			An array of objects that represent resources in which DevOps Guru detected anomalous behavior. Each object contains the name
        /// 			and type of the resource.
        /// 		
        public var resources: [DevOpsGuruClientTypes.RecommendationRelatedAnomalyResource]?
        ///
        /// 			Information about where the anomalous behavior related the recommendation was found. For example, details in Amazon CloudWatch metrics.
        /// 		
        public var sourceDetails: [DevOpsGuruClientTypes.RecommendationRelatedAnomalySourceDetail]?

        public init (
            resources: [DevOpsGuruClientTypes.RecommendationRelatedAnomalyResource]? = nil,
            sourceDetails: [DevOpsGuruClientTypes.RecommendationRelatedAnomalySourceDetail]? = nil
        )
        {
            self.resources = resources
            self.sourceDetails = sourceDetails
        }
    }

}

extension DevOpsGuruClientTypes.RecommendationRelatedAnomalyResource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension DevOpsGuruClientTypes.RecommendationRelatedAnomalyResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecommendationRelatedAnomalyResource(name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about a resource in which DevOps Guru detected anomalous behavior.
    /// 		
    public struct RecommendationRelatedAnomalyResource: Swift.Equatable {
        ///
        /// 			The name of the resource.
        /// 		
        public var name: Swift.String?
        ///
        /// 			The type of the resource.
        /// 		
        public var type: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }

}

extension DevOpsGuruClientTypes.RecommendationRelatedAnomalySourceDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchMetrics = "CloudWatchMetrics"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchMetrics = cloudWatchMetrics {
            var cloudWatchMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cloudWatchMetrics)
            for recommendationrelatedcloudwatchmetricssourcedetails0 in cloudWatchMetrics {
                try cloudWatchMetricsContainer.encode(recommendationrelatedcloudwatchmetricssourcedetails0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchMetricsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.RecommendationRelatedCloudWatchMetricsSourceDetail?].self, forKey: .cloudWatchMetrics)
        var cloudWatchMetricsDecoded0:[DevOpsGuruClientTypes.RecommendationRelatedCloudWatchMetricsSourceDetail]? = nil
        if let cloudWatchMetricsContainer = cloudWatchMetricsContainer {
            cloudWatchMetricsDecoded0 = [DevOpsGuruClientTypes.RecommendationRelatedCloudWatchMetricsSourceDetail]()
            for structure0 in cloudWatchMetricsContainer {
                if let structure0 = structure0 {
                    cloudWatchMetricsDecoded0?.append(structure0)
                }
            }
        }
        cloudWatchMetrics = cloudWatchMetricsDecoded0
    }
}

extension DevOpsGuruClientTypes.RecommendationRelatedAnomalySourceDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecommendationRelatedAnomalySourceDetail(cloudWatchMetrics: \(Swift.String(describing: cloudWatchMetrics)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Contains an array of RecommendationRelatedCloudWatchMetricsSourceDetail objects that contain the name
    /// 			and namespace of an Amazon CloudWatch metric.
    /// 		
    public struct RecommendationRelatedAnomalySourceDetail: Swift.Equatable {
        ///  An array of CloudWatchMetricsDetail objects that contains information
        /// 			about the analyzed metrics that displayed anomalous behavior.
        public var cloudWatchMetrics: [DevOpsGuruClientTypes.RecommendationRelatedCloudWatchMetricsSourceDetail]?

        public init (
            cloudWatchMetrics: [DevOpsGuruClientTypes.RecommendationRelatedCloudWatchMetricsSourceDetail]? = nil
        )
        {
            self.cloudWatchMetrics = cloudWatchMetrics
        }
    }

}

extension DevOpsGuruClientTypes.RecommendationRelatedCloudWatchMetricsSourceDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricName = "MetricName"
        case namespace = "Namespace"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let metricName = metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
    }
}

extension DevOpsGuruClientTypes.RecommendationRelatedCloudWatchMetricsSourceDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecommendationRelatedCloudWatchMetricsSourceDetail(metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about an Amazon CloudWatch metric that is analyzed by DevOps Guru. It is one of many analyzed metrics
    /// 			that are used to generate insights.
    /// 		
    public struct RecommendationRelatedCloudWatchMetricsSourceDetail: Swift.Equatable {
        /// The name of the CloudWatch metric.
        public var metricName: Swift.String?
        /// The namespace of the CloudWatch metric. A namespace is a container for CloudWatch metrics.
        public var namespace: Swift.String?

        public init (
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.metricName = metricName
            self.namespace = namespace
        }
    }

}

extension DevOpsGuruClientTypes.RecommendationRelatedEvent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case resources = "Resources"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for recommendationrelatedeventresources0 in resources {
                try resourcesContainer.encode(recommendationrelatedeventresources0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourcesContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.RecommendationRelatedEventResource?].self, forKey: .resources)
        var resourcesDecoded0:[DevOpsGuruClientTypes.RecommendationRelatedEventResource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [DevOpsGuruClientTypes.RecommendationRelatedEventResource]()
            for structure0 in resourcesContainer {
                if let structure0 = structure0 {
                    resourcesDecoded0?.append(structure0)
                }
            }
        }
        resources = resourcesDecoded0
    }
}

extension DevOpsGuruClientTypes.RecommendationRelatedEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecommendationRelatedEvent(name: \(Swift.String(describing: name)), resources: \(Swift.String(describing: resources)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about an event that is related to a recommendation.
    /// 		
    public struct RecommendationRelatedEvent: Swift.Equatable {
        ///
        /// 			The name of the event. This corresponds to the Name field in an
        /// 			Event object.
        /// 		
        public var name: Swift.String?
        ///
        /// 			A ResourceCollection object that contains arrays of the names of AWS
        /// 			CloudFormation stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resources: [DevOpsGuruClientTypes.RecommendationRelatedEventResource]?

        public init (
            name: Swift.String? = nil,
            resources: [DevOpsGuruClientTypes.RecommendationRelatedEventResource]? = nil
        )
        {
            self.name = name
            self.resources = resources
        }
    }

}

extension DevOpsGuruClientTypes.RecommendationRelatedEventResource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension DevOpsGuruClientTypes.RecommendationRelatedEventResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecommendationRelatedEventResource(name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about an AWS resource that emitted and event that is related to a recommendation in an insight.
    /// 		
    public struct RecommendationRelatedEventResource: Swift.Equatable {
        ///
        /// 			The name of the resource that emitted the event. This corresponds to the Name field in an
        /// 			EventResource object.
        /// 		
        public var name: Swift.String?
        ///
        /// 			The type of the resource that emitted the event. This corresponds to the Type field in an
        /// 			EventResource object.
        /// 		
        public var type: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }

}

extension RemoveNotificationChannelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveNotificationChannelInput(id: \(Swift.String(describing: id)))"}
}

extension RemoveNotificationChannelInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct RemoveNotificationChannelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveNotificationChannelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveNotificationChannelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveNotificationChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveNotificationChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveNotificationChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveNotificationChannelOutputError>
}

public struct RemoveNotificationChannelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveNotificationChannelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveNotificationChannelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveNotificationChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveNotificationChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveNotificationChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveNotificationChannelOutputError>
}

public struct RemoveNotificationChannelInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveNotificationChannelInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: RemoveNotificationChannelInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveNotificationChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        guard let id = input.id else {
            return .failure(.client(ClientRuntime.ClientError.pathCreationFailed(("id is nil and needs a value for the path of this operation"))))
        }
        var urlPath = "/channels/\(id.urlPercentEncoding())"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = RemoveNotificationChannelInput
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveNotificationChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveNotificationChannelOutputError>
}

public struct RemoveNotificationChannelInput: Swift.Equatable {
    ///
    ///    		The ID of the notification channel to be removed.
    ///    	
    /// This member is required.
    public var id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct RemoveNotificationChannelInputBody: Swift.Equatable {
}

extension RemoveNotificationChannelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension RemoveNotificationChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveNotificationChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveNotificationChannelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveNotificationChannelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveNotificationChannelOutputResponse()"}
}

extension RemoveNotificationChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveNotificationChannelOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveNotificationChannelOutputResponseBody: Swift.Equatable {
}

extension RemoveNotificationChannelOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DevOpsGuruClientTypes.ResourceCollection: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudFormation = "CloudFormation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudFormation = cloudFormation {
            try encodeContainer.encode(cloudFormation, forKey: .cloudFormation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFormationDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CloudFormationCollection.self, forKey: .cloudFormation)
        cloudFormation = cloudFormationDecoded
    }
}

extension DevOpsGuruClientTypes.ResourceCollection: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceCollection(cloudFormation: \(Swift.String(describing: cloudFormation)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
    ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
    /// 		
    public struct ResourceCollection: Swift.Equatable {
        ///  An array of the names of AWS CloudFormation stacks. The stacks define AWS resources
        ///    		that DevOps Guru analyzes. You can specify up to 500 AWS CloudFormation stacks.
        ///    	
        public var cloudFormation: DevOpsGuruClientTypes.CloudFormationCollection?

        public init (
            cloudFormation: DevOpsGuruClientTypes.CloudFormationCollection? = nil
        )
        {
            self.cloudFormation = cloudFormation
        }
    }

}

extension DevOpsGuruClientTypes.ResourceCollectionFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudFormation = "CloudFormation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudFormation = cloudFormation {
            try encodeContainer.encode(cloudFormation, forKey: .cloudFormation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFormationDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CloudFormationCollectionFilter.self, forKey: .cloudFormation)
        cloudFormation = cloudFormationDecoded
    }
}

extension DevOpsGuruClientTypes.ResourceCollectionFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceCollectionFilter(cloudFormation: \(Swift.String(describing: cloudFormation)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about a filter used to specify which AWS resources are analyzed for anomalous behavior by DevOps Guru.
    /// 		
    public struct ResourceCollectionFilter: Swift.Equatable {
        ///
        /// 			Information about AWS CloudFormation stacks. You can use up to 500 stacks to specify which AWS resources in your account to analyze.
        /// 			For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacks.html">Stacks
        /// 			in the AWS CloudFormation User Guide.
        /// 		
        public var cloudFormation: DevOpsGuruClientTypes.CloudFormationCollectionFilter?

        public init (
            cloudFormation: DevOpsGuruClientTypes.CloudFormationCollectionFilter? = nil
        )
        {
            self.cloudFormation = cloudFormation
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum ResourceCollectionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsCloudFormation
        case awsService
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceCollectionType] {
            return [
                .awsCloudFormation,
                .awsService,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsCloudFormation: return "AWS_CLOUD_FORMATION"
            case .awsService: return "AWS_SERVICE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceCollectionType(rawValue: rawValue) ?? ResourceCollectionType.sdkUnknown(rawValue)
        }
    }
}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
        } else {
            self.message = nil
            self.resourceId = nil
            self.resourceType = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A requested resource could not be found
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?
    ///
    /// 			The ID of the AWS resource that could not be found.
    /// 		
    /// This member is required.
    public var resourceId: Swift.String?
    ///
    /// 			The type of the AWS resource that could not be found.
    /// 		
    /// This member is required.
    public var resourceType: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let resourceId: Swift.String?
    public let resourceType: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension DevOpsGuruClientTypes.SearchInsightsFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceCollection = "ResourceCollection"
        case serviceCollection = "ServiceCollection"
        case severities = "Severities"
        case statuses = "Statuses"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
        if let serviceCollection = serviceCollection {
            try encodeContainer.encode(serviceCollection, forKey: .serviceCollection)
        }
        if let severities = severities {
            var severitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .severities)
            for insightseverities0 in severities {
                try severitiesContainer.encode(insightseverities0.rawValue)
            }
        }
        if let statuses = statuses {
            var statusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statuses)
            for insightstatuses0 in statuses {
                try statusesContainer.encode(insightstatuses0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let severitiesContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.InsightSeverity?].self, forKey: .severities)
        var severitiesDecoded0:[DevOpsGuruClientTypes.InsightSeverity]? = nil
        if let severitiesContainer = severitiesContainer {
            severitiesDecoded0 = [DevOpsGuruClientTypes.InsightSeverity]()
            for string0 in severitiesContainer {
                if let string0 = string0 {
                    severitiesDecoded0?.append(string0)
                }
            }
        }
        severities = severitiesDecoded0
        let statusesContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.InsightStatus?].self, forKey: .statuses)
        var statusesDecoded0:[DevOpsGuruClientTypes.InsightStatus]? = nil
        if let statusesContainer = statusesContainer {
            statusesDecoded0 = [DevOpsGuruClientTypes.InsightStatus]()
            for string0 in statusesContainer {
                if let string0 = string0 {
                    statusesDecoded0?.append(string0)
                }
            }
        }
        statuses = statusesDecoded0
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ResourceCollection.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let serviceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ServiceCollection.self, forKey: .serviceCollection)
        serviceCollection = serviceCollectionDecoded
    }
}

extension DevOpsGuruClientTypes.SearchInsightsFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SearchInsightsFilters(resourceCollection: \(Swift.String(describing: resourceCollection)), serviceCollection: \(Swift.String(describing: serviceCollection)), severities: \(Swift.String(describing: severities)), statuses: \(Swift.String(describing: statuses)))"}
}

extension DevOpsGuruClientTypes {
    ///
    ///    		Specifies one or more severity values and one or more status values that are used to search
    ///    		for insights.
    ///    	
    public struct SearchInsightsFilters: Swift.Equatable {
        ///
        /// 			A collection of AWS resources supported by DevOps Guru. The one type of AWS resource collection supported is AWS CloudFormation stacks. DevOps Guru can be configured to analyze
        ///       	only the AWS resources that are defined in the stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var resourceCollection: DevOpsGuruClientTypes.ResourceCollection?
        /// A collection of the names of AWS services.
        public var serviceCollection: DevOpsGuruClientTypes.ServiceCollection?
        ///
        ///    		An array of severity values used to search for insights.
        ///    	
        public var severities: [DevOpsGuruClientTypes.InsightSeverity]?
        ///
        ///    		An array of status values used to search for insights.
        ///    	
        public var statuses: [DevOpsGuruClientTypes.InsightStatus]?

        public init (
            resourceCollection: DevOpsGuruClientTypes.ResourceCollection? = nil,
            serviceCollection: DevOpsGuruClientTypes.ServiceCollection? = nil,
            severities: [DevOpsGuruClientTypes.InsightSeverity]? = nil,
            statuses: [DevOpsGuruClientTypes.InsightStatus]? = nil
        )
        {
            self.resourceCollection = resourceCollection
            self.serviceCollection = serviceCollection
            self.severities = severities
            self.statuses = statuses
        }
    }

}

public struct SearchInsightsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SearchInsightsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SearchInsightsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SearchInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SearchInsightsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SearchInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SearchInsightsOutputError>
}

extension SearchInsightsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SearchInsightsInput(filters: \(Swift.String(describing: filters)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), startTimeRange: \(Swift.String(describing: startTimeRange)), type: \(Swift.String(describing: type)))"}
}

extension SearchInsightsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startTimeRange = "StartTimeRange"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTimeRange = startTimeRange {
            try encodeContainer.encode(startTimeRange, forKey: .startTimeRange)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct SearchInsightsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SearchInsightsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SearchInsightsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SearchInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SearchInsightsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SearchInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SearchInsightsOutputError>
}

public struct SearchInsightsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SearchInsightsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SearchInsightsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SearchInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SearchInsightsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SearchInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SearchInsightsOutputError>
}

public struct SearchInsightsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SearchInsightsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SearchInsightsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SearchInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/insights/search"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SearchInsightsInput
    public typealias MOutput = ClientRuntime.OperationOutput<SearchInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SearchInsightsOutputError>
}

public struct SearchInsightsInput: Swift.Equatable {
    ///
    ///    		A SearchInsightsFilters object that is used to set the severity and status filters on your insight search.
    ///    	
    public var filters: DevOpsGuruClientTypes.SearchInsightsFilters?
    /// The maximum number of results to return with a single call.
    /// 	To retrieve the remaining results, make another call with the returned nextToken value.
    public var maxResults: Swift.Int?
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If this value is null, it retrieves the first page.
    public var nextToken: Swift.String?
    ///
    ///    		The start of the time range passed in. Returned insights occurred after this time.
    ///    	
    /// This member is required.
    public var startTimeRange: DevOpsGuruClientTypes.StartTimeRange?
    ///
    ///    		The type of insights you are searching for (REACTIVE or PROACTIVE).
    ///    	
    /// This member is required.
    public var type: DevOpsGuruClientTypes.InsightType?

    public init (
        filters: DevOpsGuruClientTypes.SearchInsightsFilters? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startTimeRange: DevOpsGuruClientTypes.StartTimeRange? = nil,
        type: DevOpsGuruClientTypes.InsightType? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startTimeRange = startTimeRange
        self.type = type
    }
}

struct SearchInsightsInputBody: Swift.Equatable {
    public let startTimeRange: DevOpsGuruClientTypes.StartTimeRange?
    public let filters: DevOpsGuruClientTypes.SearchInsightsFilters?
    public let maxResults: Swift.Int?
    public let nextToken: Swift.String?
    public let type: DevOpsGuruClientTypes.InsightType?
}

extension SearchInsightsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case startTimeRange = "StartTimeRange"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeRangeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.StartTimeRange.self, forKey: .startTimeRange)
        startTimeRange = startTimeRangeDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.SearchInsightsFilters.self, forKey: .filters)
        filters = filtersDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.InsightType.self, forKey: .type)
        type = typeDecoded
    }
}

extension SearchInsightsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SearchInsightsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SearchInsightsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SearchInsightsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SearchInsightsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), proactiveInsights: \(Swift.String(describing: proactiveInsights)), reactiveInsights: \(Swift.String(describing: reactiveInsights)))"}
}

extension SearchInsightsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SearchInsightsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.proactiveInsights = output.proactiveInsights
            self.reactiveInsights = output.reactiveInsights
        } else {
            self.nextToken = nil
            self.proactiveInsights = nil
            self.reactiveInsights = nil
        }
    }
}

public struct SearchInsightsOutputResponse: Swift.Equatable {
    /// The pagination token to use to retrieve
    ///    the next page of results for this operation. If there are no more pages, this value is null.
    public var nextToken: Swift.String?
    ///
    /// 			The returned proactive insights.
    /// 		
    public var proactiveInsights: [DevOpsGuruClientTypes.ProactiveInsightSummary]?
    ///
    /// 			The returned reactive insights.
    /// 		
    public var reactiveInsights: [DevOpsGuruClientTypes.ReactiveInsightSummary]?

    public init (
        nextToken: Swift.String? = nil,
        proactiveInsights: [DevOpsGuruClientTypes.ProactiveInsightSummary]? = nil,
        reactiveInsights: [DevOpsGuruClientTypes.ReactiveInsightSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.proactiveInsights = proactiveInsights
        self.reactiveInsights = reactiveInsights
    }
}

struct SearchInsightsOutputResponseBody: Swift.Equatable {
    public let proactiveInsights: [DevOpsGuruClientTypes.ProactiveInsightSummary]?
    public let reactiveInsights: [DevOpsGuruClientTypes.ReactiveInsightSummary]?
    public let nextToken: Swift.String?
}

extension SearchInsightsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case proactiveInsights = "ProactiveInsights"
        case reactiveInsights = "ReactiveInsights"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let proactiveInsightsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.ProactiveInsightSummary?].self, forKey: .proactiveInsights)
        var proactiveInsightsDecoded0:[DevOpsGuruClientTypes.ProactiveInsightSummary]? = nil
        if let proactiveInsightsContainer = proactiveInsightsContainer {
            proactiveInsightsDecoded0 = [DevOpsGuruClientTypes.ProactiveInsightSummary]()
            for structure0 in proactiveInsightsContainer {
                if let structure0 = structure0 {
                    proactiveInsightsDecoded0?.append(structure0)
                }
            }
        }
        proactiveInsights = proactiveInsightsDecoded0
        let reactiveInsightsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.ReactiveInsightSummary?].self, forKey: .reactiveInsights)
        var reactiveInsightsDecoded0:[DevOpsGuruClientTypes.ReactiveInsightSummary]? = nil
        if let reactiveInsightsContainer = reactiveInsightsContainer {
            reactiveInsightsDecoded0 = [DevOpsGuruClientTypes.ReactiveInsightSummary]()
            for structure0 in reactiveInsightsContainer {
                if let structure0 = structure0 {
                    reactiveInsightsDecoded0?.append(structure0)
                }
            }
        }
        reactiveInsights = reactiveInsightsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DevOpsGuruClientTypes.ServiceCollection: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceNames = "ServiceNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let serviceNames = serviceNames {
            var serviceNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .serviceNames)
            for servicenames0 in serviceNames {
                try serviceNamesContainer.encode(servicenames0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNamesContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.ServiceName?].self, forKey: .serviceNames)
        var serviceNamesDecoded0:[DevOpsGuruClientTypes.ServiceName]? = nil
        if let serviceNamesContainer = serviceNamesContainer {
            serviceNamesDecoded0 = [DevOpsGuruClientTypes.ServiceName]()
            for string0 in serviceNamesContainer {
                if let string0 = string0 {
                    serviceNamesDecoded0?.append(string0)
                }
            }
        }
        serviceNames = serviceNamesDecoded0
    }
}

extension DevOpsGuruClientTypes.ServiceCollection: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceCollection(serviceNames: \(Swift.String(describing: serviceNames)))"}
}

extension DevOpsGuruClientTypes {
    /// A collection of the names of AWS services.
    public struct ServiceCollection: Swift.Equatable {
        /// An array of strings that each specifies the name of an AWS service.
        public var serviceNames: [DevOpsGuruClientTypes.ServiceName]?

        public init (
            serviceNames: [DevOpsGuruClientTypes.ServiceName]? = nil
        )
        {
            self.serviceNames = serviceNames
        }
    }

}

extension DevOpsGuruClientTypes.ServiceHealth: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insight = "Insight"
        case serviceName = "ServiceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let insight = insight {
            try encodeContainer.encode(insight, forKey: .insight)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName.rawValue, forKey: .serviceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceNameDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ServiceName.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let insightDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ServiceInsightHealth.self, forKey: .insight)
        insight = insightDecoded
    }
}

extension DevOpsGuruClientTypes.ServiceHealth: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceHealth(insight: \(Swift.String(describing: insight)), serviceName: \(Swift.String(describing: serviceName)))"}
}

extension DevOpsGuruClientTypes {
    /// Represents the health of an AWS service.
    public struct ServiceHealth: Swift.Equatable {
        /// Represents the health of an AWS service. This is a ServiceInsightHealth that
        /// 		contains the number of open proactive and reactive insights for this service.
        public var insight: DevOpsGuruClientTypes.ServiceInsightHealth?
        /// The name of the AWS service.
        public var serviceName: DevOpsGuruClientTypes.ServiceName?

        public init (
            insight: DevOpsGuruClientTypes.ServiceInsightHealth? = nil,
            serviceName: DevOpsGuruClientTypes.ServiceName? = nil
        )
        {
            self.insight = insight
            self.serviceName = serviceName
        }
    }

}

extension DevOpsGuruClientTypes.ServiceInsightHealth: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case openProactiveInsights = "OpenProactiveInsights"
        case openReactiveInsights = "OpenReactiveInsights"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if openProactiveInsights != 0 {
            try encodeContainer.encode(openProactiveInsights, forKey: .openProactiveInsights)
        }
        if openReactiveInsights != 0 {
            try encodeContainer.encode(openReactiveInsights, forKey: .openReactiveInsights)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let openProactiveInsightsDecoded = try containerValues.decode(Swift.Int.self, forKey: .openProactiveInsights)
        openProactiveInsights = openProactiveInsightsDecoded
        let openReactiveInsightsDecoded = try containerValues.decode(Swift.Int.self, forKey: .openReactiveInsights)
        openReactiveInsights = openReactiveInsightsDecoded
    }
}

extension DevOpsGuruClientTypes.ServiceInsightHealth: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceInsightHealth(openProactiveInsights: \(Swift.String(describing: openProactiveInsights)), openReactiveInsights: \(Swift.String(describing: openReactiveInsights)))"}
}

extension DevOpsGuruClientTypes {
    /// Contains the number of open proactive and reactive insights in an analyzed AWS service.
    public struct ServiceInsightHealth: Swift.Equatable {
        /// The number of open proactive insights in the AWS service
        public var openProactiveInsights: Swift.Int
        /// The number of open reactive insights in the AWS service
        public var openReactiveInsights: Swift.Int

        public init (
            openProactiveInsights: Swift.Int = 0,
            openReactiveInsights: Swift.Int = 0
        )
        {
            self.openProactiveInsights = openProactiveInsights
            self.openReactiveInsights = openReactiveInsights
        }
    }

}

extension DevOpsGuruClientTypes.ServiceIntegrationConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case opsCenter = "OpsCenter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let opsCenter = opsCenter {
            try encodeContainer.encode(opsCenter, forKey: .opsCenter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let opsCenterDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.OpsCenterIntegration.self, forKey: .opsCenter)
        opsCenter = opsCenterDecoded
    }
}

extension DevOpsGuruClientTypes.ServiceIntegrationConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceIntegrationConfig(opsCenter: \(Swift.String(describing: opsCenter)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about the integration of DevOps Guru with another AWS service, such as AWS Systems Manager.
    /// 		
    public struct ServiceIntegrationConfig: Swift.Equatable {
        ///
        /// 			Information about whether DevOps Guru is configured to create an OpsItem in AWS Systems Manager OpsCenter for each created insight.
        /// 		
        public var opsCenter: DevOpsGuruClientTypes.OpsCenterIntegration?

        public init (
            opsCenter: DevOpsGuruClientTypes.OpsCenterIntegration? = nil
        )
        {
            self.opsCenter = opsCenter
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum ServiceName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case apiGateway
        case applicationElb
        case autoScalingGroup
        case cloudFront
        case dynamoDb
        case ec2
        case ecs
        case eks
        case elasticBeanstalk
        case elastiCache
        case elb
        case es
        case kinesis
        case lambda
        case natGateway
        case networkElb
        case rds
        case redshift
        case route53
        case s3
        case sageMaker
        case sns
        case sqs
        case stepFunctions
        case swf
        case sdkUnknown(Swift.String)

        public static var allCases: [ServiceName] {
            return [
                .apiGateway,
                .applicationElb,
                .autoScalingGroup,
                .cloudFront,
                .dynamoDb,
                .ec2,
                .ecs,
                .eks,
                .elasticBeanstalk,
                .elastiCache,
                .elb,
                .es,
                .kinesis,
                .lambda,
                .natGateway,
                .networkElb,
                .rds,
                .redshift,
                .route53,
                .s3,
                .sageMaker,
                .sns,
                .sqs,
                .stepFunctions,
                .swf,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .apiGateway: return "API_GATEWAY"
            case .applicationElb: return "APPLICATION_ELB"
            case .autoScalingGroup: return "AUTO_SCALING_GROUP"
            case .cloudFront: return "CLOUD_FRONT"
            case .dynamoDb: return "DYNAMO_DB"
            case .ec2: return "EC2"
            case .ecs: return "ECS"
            case .eks: return "EKS"
            case .elasticBeanstalk: return "ELASTIC_BEANSTALK"
            case .elastiCache: return "ELASTI_CACHE"
            case .elb: return "ELB"
            case .es: return "ES"
            case .kinesis: return "KINESIS"
            case .lambda: return "LAMBDA"
            case .natGateway: return "NAT_GATEWAY"
            case .networkElb: return "NETWORK_ELB"
            case .rds: return "RDS"
            case .redshift: return "REDSHIFT"
            case .route53: return "ROUTE_53"
            case .s3: return "S3"
            case .sageMaker: return "SAGE_MAKER"
            case .sns: return "SNS"
            case .sqs: return "SQS"
            case .stepFunctions: return "STEP_FUNCTIONS"
            case .swf: return "SWF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServiceName(rawValue: rawValue) ?? ServiceName.sdkUnknown(rawValue)
        }
    }
}

extension ServiceQuotaExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceQuotaExceededException(message: \(Swift.String(describing: message)))"}
}

extension ServiceQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request contains a value that exceeds a maximum quota.
public struct ServiceQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DevOpsGuruClientTypes.ServiceResourceCost: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cost = "Cost"
        case count = "Count"
        case state = "State"
        case type = "Type"
        case unitCost = "UnitCost"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cost != 0.0 {
            try encodeContainer.encode(cost, forKey: .cost)
        }
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if unitCost != 0.0 {
            try encodeContainer.encode(unitCost, forKey: .unitCost)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CostEstimationServiceResourceState.self, forKey: .state)
        state = stateDecoded
        let countDecoded = try containerValues.decode(Swift.Int.self, forKey: .count)
        count = countDecoded
        let unitCostDecoded = try containerValues.decode(Swift.Double.self, forKey: .unitCost)
        unitCost = unitCostDecoded
        let costDecoded = try containerValues.decode(Swift.Double.self, forKey: .cost)
        cost = costDecoded
    }
}

extension DevOpsGuruClientTypes.ServiceResourceCost: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceResourceCost(cost: \(Swift.String(describing: cost)), count: \(Swift.String(describing: count)), state: \(Swift.String(describing: state)), type: \(Swift.String(describing: type)), unitCost: \(Swift.String(describing: unitCost)))"}
}

extension DevOpsGuruClientTypes {
    /// An object that contains information about the estimated monthly cost to
    /// 			analyze an AWS resource. For more information,
    /// 			see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html">Estimate your
    /// 			Amazon DevOps Guru costs and
    /// 			<a href="http://aws.amazon.com/devops-guru/pricing/">Amazon DevOps Guru pricing.
    public struct ServiceResourceCost: Swift.Equatable {
        /// The total estimated monthly cost to analyze the active resources for this resource.
        public var cost: Swift.Double
        /// The number of active resources analyzed for this service to create a monthly cost
        /// 			estimate.
        public var count: Swift.Int
        /// The state of the resource. The resource is ACTIVE if it produces metrics,
        /// 			events, or logs within an hour, otherwise it is INACTIVE. You pay for
        /// 			the number of active AWS resource hours analyzed for each resource. Inactive resources are
        /// 			not charged.
        /// 		
        public var state: DevOpsGuruClientTypes.CostEstimationServiceResourceState?
        /// The type of the AWS resource.
        public var type: Swift.String?
        /// The price per hour to analyze the resources in the service.
        /// 			For more information,
        /// 			see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/cost-estimate.html">Estimate your
        /// 			Amazon DevOps Guru costs and
        /// 			<a href="http://aws.amazon.com/devops-guru/pricing/">Amazon DevOps Guru pricing.
        public var unitCost: Swift.Double

        public init (
            cost: Swift.Double = 0.0,
            count: Swift.Int = 0,
            state: DevOpsGuruClientTypes.CostEstimationServiceResourceState? = nil,
            type: Swift.String? = nil,
            unitCost: Swift.Double = 0.0
        )
        {
            self.cost = cost
            self.count = count
            self.state = state
            self.type = type
            self.unitCost = unitCost
        }
    }

}

extension DevOpsGuruClientTypes.SnsChannelConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case topicArn = "TopicArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let topicArn = topicArn {
            try encodeContainer.encode(topicArn, forKey: .topicArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
    }
}

extension DevOpsGuruClientTypes.SnsChannelConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnsChannelConfig(topicArn: \(Swift.String(describing: topicArn)))"}
}

extension DevOpsGuruClientTypes {
    ///  Contains the Amazon Resource Name (ARN) of an Amazon Simple Notification Service topic.
    /// 		
    /// 		       If you use an Amazon SNS topic in another account, you must attach a policy to it that grants DevOps Guru permission
    /// 				to it notifications. DevOps Guru adds the required policy on your behalf to send notifications using Amazon SNS in your account.
    /// 				For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-required-permissions.html">Permissions
    /// 				for cross account Amazon SNS topics.
    /// 				     If you use an Amazon SNS topic that is encrypted by an AWS Key Management Service customer-managed key (CMK), then you must add permissions
    /// 				to the CMK. For more information, see <a href="https://docs.aws.amazon.com/devops-guru/latest/userguide/sns-kms-permissions.html">Permissions for
    /// 				AWS KMS–encrypted Amazon SNS topics.
    public struct SnsChannelConfig: Swift.Equatable {
        ///  The Amazon Resource Name (ARN) of an Amazon Simple Notification Service topic.
        public var topicArn: Swift.String?

        public init (
            topicArn: Swift.String? = nil
        )
        {
            self.topicArn = topicArn
        }
    }

}

public struct StartCostEstimationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartCostEstimationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartCostEstimationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartCostEstimationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartCostEstimationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartCostEstimationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartCostEstimationOutputError>
}

extension StartCostEstimationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartCostEstimationInput(clientToken: \(Swift.String(describing: clientToken)), resourceCollection: \(Swift.String(describing: resourceCollection)))"}
}

extension StartCostEstimationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case resourceCollection = "ResourceCollection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
    }
}

public struct StartCostEstimationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartCostEstimationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartCostEstimationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartCostEstimationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartCostEstimationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartCostEstimationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartCostEstimationOutputError>
}

public struct StartCostEstimationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartCostEstimationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartCostEstimationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartCostEstimationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartCostEstimationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartCostEstimationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartCostEstimationOutputError>
}

public struct StartCostEstimationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartCostEstimationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StartCostEstimationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartCostEstimationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/cost-estimation"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartCostEstimationInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartCostEstimationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartCostEstimationOutputError>
}

public struct StartCostEstimationInput: Swift.Equatable {
    /// The idempotency token used to identify each cost estimate request.
    public var clientToken: Swift.String?
    /// The collection of AWS resources used to create a monthly DevOps Guru cost estimate.
    /// This member is required.
    public var resourceCollection: DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter?

    public init (
        clientToken: Swift.String? = nil,
        resourceCollection: DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter? = nil
    )
    {
        self.clientToken = clientToken
        self.resourceCollection = resourceCollection
    }
}

struct StartCostEstimationInputBody: Swift.Equatable {
    public let resourceCollection: DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter?
    public let clientToken: Swift.String?
}

extension StartCostEstimationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case resourceCollection = "ResourceCollection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.CostEstimationResourceCollectionFilter.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension StartCostEstimationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartCostEstimationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartCostEstimationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartCostEstimationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartCostEstimationOutputResponse()"}
}

extension StartCostEstimationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartCostEstimationOutputResponse: Swift.Equatable {

    public init() {}
}

struct StartCostEstimationOutputResponseBody: Swift.Equatable {
}

extension StartCostEstimationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DevOpsGuruClientTypes.StartTimeRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromTime = "FromTime"
        case toTime = "ToTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fromTime = fromTime {
            try encodeContainer.encode(fromTime.timeIntervalSince1970, forKey: .fromTime)
        }
        if let toTime = toTime {
            try encodeContainer.encode(toTime.timeIntervalSince1970, forKey: .toTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .fromTime)
        fromTime = fromTimeDecoded
        let toTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .toTime)
        toTime = toTimeDecoded
    }
}

extension DevOpsGuruClientTypes.StartTimeRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartTimeRange(fromTime: \(Swift.String(describing: fromTime)), toTime: \(Swift.String(describing: toTime)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			A time range used to specify when the behavior of an insight or anomaly started.
    /// 		
    public struct StartTimeRange: Swift.Equatable {
        ///
        /// 			The start time of the time range.
        /// 		
        public var fromTime: ClientRuntime.Date?
        ///
        /// 			The end time of the time range.
        /// 		
        public var toTime: ClientRuntime.Date?

        public init (
            fromTime: ClientRuntime.Date? = nil,
            toTime: ClientRuntime.Date? = nil
        )
        {
            self.fromTime = fromTime
            self.toTime = toTime
        }
    }

}

extension ThrottlingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThrottlingException(message: \(Swift.String(describing: message)), quotaCode: \(Swift.String(describing: quotaCode)), retryAfterSeconds: \(Swift.String(describing: retryAfterSeconds)), serviceCode: \(Swift.String(describing: serviceCode)))"}
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if let retryAfterSecondsHeaderValue = httpResponse.headers.value(for: "Retry-After") {
            self.retryAfterSeconds = Swift.Int(retryAfterSecondsHeaderValue) ?? 0
        } else {
            self.retryAfterSeconds = 0
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.quotaCode = output.quotaCode
            self.serviceCode = output.serviceCode
        } else {
            self.message = nil
            self.quotaCode = nil
            self.serviceCode = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was denied due to a request throttling.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?
    ///
    /// 			The code of the quota that was exceeded, causing the throttling exception.
    /// 		
    public var quotaCode: Swift.String?
    ///
    /// 			The number of seconds after which the action that caused the throttling
    /// 			exception can be retried.
    /// 		
    public var retryAfterSeconds: Swift.Int
    ///
    /// 			The code of the service that caused the throttling exception.
    /// 		
    public var serviceCode: Swift.String?

    public init (
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        retryAfterSeconds: Swift.Int = 0,
        serviceCode: Swift.String? = nil
    )
    {
        self.message = message
        self.quotaCode = quotaCode
        self.retryAfterSeconds = retryAfterSeconds
        self.serviceCode = serviceCode
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let quotaCode: Swift.String?
    public let serviceCode: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case quotaCode = "QuotaCode"
        case serviceCode = "ServiceCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let quotaCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quotaCode)
        quotaCode = quotaCodeDecoded
        let serviceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceCode)
        serviceCode = serviceCodeDecoded
    }
}

extension DevOpsGuruClientTypes.UpdateCloudFormationCollectionFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackNames = "StackNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let stackNames = stackNames {
            var stackNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stackNames)
            for updatestacknames0 in stackNames {
                try stackNamesContainer.encode(updatestacknames0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .stackNames)
        var stackNamesDecoded0:[Swift.String]? = nil
        if let stackNamesContainer = stackNamesContainer {
            stackNamesDecoded0 = [Swift.String]()
            for string0 in stackNamesContainer {
                if let string0 = string0 {
                    stackNamesDecoded0?.append(string0)
                }
            }
        }
        stackNames = stackNamesDecoded0
    }
}

extension DevOpsGuruClientTypes.UpdateCloudFormationCollectionFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCloudFormationCollectionFilter(stackNames: \(Swift.String(describing: stackNames)))"}
}

extension DevOpsGuruClientTypes {
    ///  Contains the names of AWS CloudFormation stacks used to update a collection of stacks. You can specify up to 500 AWS CloudFormation stacks.
    public struct UpdateCloudFormationCollectionFilter: Swift.Equatable {
        ///
        /// 			An array of the names of the AWS CloudFormation stacks to update. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var stackNames: [Swift.String]?

        public init (
            stackNames: [Swift.String]? = nil
        )
        {
            self.stackNames = stackNames
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum UpdateResourceCollectionAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case add
        case remove
        case sdkUnknown(Swift.String)

        public static var allCases: [UpdateResourceCollectionAction] {
            return [
                .add,
                .remove,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .add: return "ADD"
            case .remove: return "REMOVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = UpdateResourceCollectionAction(rawValue: rawValue) ?? UpdateResourceCollectionAction.sdkUnknown(rawValue)
        }
    }
}

extension DevOpsGuruClientTypes.UpdateResourceCollectionFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudFormation = "CloudFormation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudFormation = cloudFormation {
            try encodeContainer.encode(cloudFormation, forKey: .cloudFormation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudFormationDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.UpdateCloudFormationCollectionFilter.self, forKey: .cloudFormation)
        cloudFormation = cloudFormationDecoded
    }
}

extension DevOpsGuruClientTypes.UpdateResourceCollectionFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateResourceCollectionFilter(cloudFormation: \(Swift.String(describing: cloudFormation)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Contains information used to update a collection of AWS resources.
    /// 		
    public struct UpdateResourceCollectionFilter: Swift.Equatable {
        ///
        /// 			An collection of AWS CloudFormation stacks. You can specify up to 500 AWS CloudFormation stacks.
        /// 		
        public var cloudFormation: DevOpsGuruClientTypes.UpdateCloudFormationCollectionFilter?

        public init (
            cloudFormation: DevOpsGuruClientTypes.UpdateCloudFormationCollectionFilter? = nil
        )
        {
            self.cloudFormation = cloudFormation
        }
    }

}

public struct UpdateResourceCollectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateResourceCollectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateResourceCollectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateResourceCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateResourceCollectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateResourceCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateResourceCollectionOutputError>
}

extension UpdateResourceCollectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateResourceCollectionInput(action: \(Swift.String(describing: action)), resourceCollection: \(Swift.String(describing: resourceCollection)))"}
}

extension UpdateResourceCollectionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case resourceCollection = "ResourceCollection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action.rawValue, forKey: .action)
        }
        if let resourceCollection = resourceCollection {
            try encodeContainer.encode(resourceCollection, forKey: .resourceCollection)
        }
    }
}

public struct UpdateResourceCollectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateResourceCollectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateResourceCollectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateResourceCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateResourceCollectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateResourceCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateResourceCollectionOutputError>
}

public struct UpdateResourceCollectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateResourceCollectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateResourceCollectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateResourceCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateResourceCollectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateResourceCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateResourceCollectionOutputError>
}

public struct UpdateResourceCollectionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateResourceCollectionInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateResourceCollectionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateResourceCollectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/resource-collections"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateResourceCollectionInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateResourceCollectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateResourceCollectionOutputError>
}

public struct UpdateResourceCollectionInput: Swift.Equatable {
    ///
    /// 			Specifies if the resource collection in the request is added or deleted to the resource collection.
    /// 		
    /// This member is required.
    public var action: DevOpsGuruClientTypes.UpdateResourceCollectionAction?
    ///
    /// 			Contains information used to update a collection of AWS resources.
    /// 		
    /// This member is required.
    public var resourceCollection: DevOpsGuruClientTypes.UpdateResourceCollectionFilter?

    public init (
        action: DevOpsGuruClientTypes.UpdateResourceCollectionAction? = nil,
        resourceCollection: DevOpsGuruClientTypes.UpdateResourceCollectionFilter? = nil
    )
    {
        self.action = action
        self.resourceCollection = resourceCollection
    }
}

struct UpdateResourceCollectionInputBody: Swift.Equatable {
    public let action: DevOpsGuruClientTypes.UpdateResourceCollectionAction?
    public let resourceCollection: DevOpsGuruClientTypes.UpdateResourceCollectionFilter?
}

extension UpdateResourceCollectionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case resourceCollection = "ResourceCollection"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.UpdateResourceCollectionAction.self, forKey: .action)
        action = actionDecoded
        let resourceCollectionDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.UpdateResourceCollectionFilter.self, forKey: .resourceCollection)
        resourceCollection = resourceCollectionDecoded
    }
}

extension UpdateResourceCollectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateResourceCollectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateResourceCollectionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateResourceCollectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateResourceCollectionOutputResponse()"}
}

extension UpdateResourceCollectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateResourceCollectionOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateResourceCollectionOutputResponseBody: Swift.Equatable {
}

extension UpdateResourceCollectionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DevOpsGuruClientTypes.UpdateServiceIntegrationConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case opsCenter = "OpsCenter"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let opsCenter = opsCenter {
            try encodeContainer.encode(opsCenter, forKey: .opsCenter)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let opsCenterDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.OpsCenterIntegrationConfig.self, forKey: .opsCenter)
        opsCenter = opsCenterDecoded
    }
}

extension DevOpsGuruClientTypes.UpdateServiceIntegrationConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServiceIntegrationConfig(opsCenter: \(Swift.String(describing: opsCenter)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			Information about updating the integration status of an AWS service, such as AWS Systems Manager, with DevOps Guru.
    /// 		
    public struct UpdateServiceIntegrationConfig: Swift.Equatable {
        ///
        /// 			Information about whether DevOps Guru is configured to create an OpsItem in AWS Systems Manager OpsCenter for each created insight.
        /// 		
        public var opsCenter: DevOpsGuruClientTypes.OpsCenterIntegrationConfig?

        public init (
            opsCenter: DevOpsGuruClientTypes.OpsCenterIntegrationConfig? = nil
        )
        {
            self.opsCenter = opsCenter
        }
    }

}

public struct UpdateServiceIntegrationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateServiceIntegrationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateServiceIntegrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateServiceIntegrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateServiceIntegrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateServiceIntegrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateServiceIntegrationOutputError>
}

extension UpdateServiceIntegrationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServiceIntegrationInput(serviceIntegration: \(Swift.String(describing: serviceIntegration)))"}
}

extension UpdateServiceIntegrationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceIntegration = "ServiceIntegration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let serviceIntegration = serviceIntegration {
            try encodeContainer.encode(serviceIntegration, forKey: .serviceIntegration)
        }
    }
}

public struct UpdateServiceIntegrationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateServiceIntegrationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateServiceIntegrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateServiceIntegrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateServiceIntegrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateServiceIntegrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateServiceIntegrationOutputError>
}

public struct UpdateServiceIntegrationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateServiceIntegrationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateServiceIntegrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateServiceIntegrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateServiceIntegrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateServiceIntegrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateServiceIntegrationOutputError>
}

public struct UpdateServiceIntegrationInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateServiceIntegrationInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateServiceIntegrationInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateServiceIntegrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/service-integrations"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateServiceIntegrationInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateServiceIntegrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateServiceIntegrationOutputError>
}

public struct UpdateServiceIntegrationInput: Swift.Equatable {
    ///
    /// 			An IntegratedServiceConfig object used to specify the integrated service you want to update, and whether you
    /// 			want to update it to enabled or disabled.
    /// 		
    /// This member is required.
    public var serviceIntegration: DevOpsGuruClientTypes.UpdateServiceIntegrationConfig?

    public init (
        serviceIntegration: DevOpsGuruClientTypes.UpdateServiceIntegrationConfig? = nil
    )
    {
        self.serviceIntegration = serviceIntegration
    }
}

struct UpdateServiceIntegrationInputBody: Swift.Equatable {
    public let serviceIntegration: DevOpsGuruClientTypes.UpdateServiceIntegrationConfig?
}

extension UpdateServiceIntegrationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serviceIntegration = "ServiceIntegration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serviceIntegrationDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.UpdateServiceIntegrationConfig.self, forKey: .serviceIntegration)
        serviceIntegration = serviceIntegrationDecoded
    }
}

extension UpdateServiceIntegrationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateServiceIntegrationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateServiceIntegrationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateServiceIntegrationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateServiceIntegrationOutputResponse()"}
}

extension UpdateServiceIntegrationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateServiceIntegrationOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateServiceIntegrationOutputResponseBody: Swift.Equatable {
}

extension UpdateServiceIntegrationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationException(fields: \(Swift.String(describing: fields)), message: \(Swift.String(describing: message)), reason: \(Swift.String(describing: reason)))"}
}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.fields = output.fields
            self.message = output.message
            self.reason = output.reason
        } else {
            self.fields = nil
            self.message = nil
            self.reason = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///
/// 			Contains information about data passed in to a field during a request that is not valid.
/// 		
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    ///
    /// 			An array of fields that are associated with the validation exception.
    /// 		
    public var fields: [DevOpsGuruClientTypes.ValidationExceptionField]?
    ///
    /// 			A message that describes the validation exception.
    /// 		
    /// This member is required.
    public var message: Swift.String?
    ///
    /// 			The reason the validation exception was thrown.
    /// 		
    public var reason: DevOpsGuruClientTypes.ValidationExceptionReason?

    public init (
        fields: [DevOpsGuruClientTypes.ValidationExceptionField]? = nil,
        message: Swift.String? = nil,
        reason: DevOpsGuruClientTypes.ValidationExceptionReason? = nil
    )
    {
        self.fields = fields
        self.message = message
        self.reason = reason
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let reason: DevOpsGuruClientTypes.ValidationExceptionReason?
    public let fields: [DevOpsGuruClientTypes.ValidationExceptionField]?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fields = "Fields"
        case message = "Message"
        case reason = "Reason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(DevOpsGuruClientTypes.ValidationExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([DevOpsGuruClientTypes.ValidationExceptionField?].self, forKey: .fields)
        var fieldsDecoded0:[DevOpsGuruClientTypes.ValidationExceptionField]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [DevOpsGuruClientTypes.ValidationExceptionField]()
            for structure0 in fieldsContainer {
                if let structure0 = structure0 {
                    fieldsDecoded0?.append(structure0)
                }
            }
        }
        fields = fieldsDecoded0
    }
}

extension DevOpsGuruClientTypes.ValidationExceptionField: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DevOpsGuruClientTypes.ValidationExceptionField: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationExceptionField(message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)))"}
}

extension DevOpsGuruClientTypes {
    ///
    /// 			The field associated with the validation exception.
    /// 		
    public struct ValidationExceptionField: Swift.Equatable {
        ///
        /// 			The message associated with the validation exception with information to help
        /// 			determine its cause.
        /// 		
        /// This member is required.
        public var message: Swift.String?
        ///
        /// 			The name of the field.
        /// 		
        /// This member is required.
        public var name: Swift.String?

        public init (
            message: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.message = message
            self.name = name
        }
    }

}

extension DevOpsGuruClientTypes {
    public enum ValidationExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cannotParse
        case fieldValidationFailed
        case other
        case unknownOperation
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .cannotParse,
                .fieldValidationFailed,
                .other,
                .unknownOperation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cannotParse: return "CANNOT_PARSE"
            case .fieldValidationFailed: return "FIELD_VALIDATION_FAILED"
            case .other: return "OTHER"
            case .unknownOperation: return "UNKNOWN_OPERATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ValidationExceptionReason(rawValue: rawValue) ?? ValidationExceptionReason.sdkUnknown(rawValue)
        }
    }
}
