// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRepositoryAssociationsOutputResponseBody: Equatable {
    public let repositoryAssociationSummaries: [RepositoryAssociationSummary]?
    public let nextToken: String?
}

extension ListRepositoryAssociationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case repositoryAssociationSummaries = "RepositoryAssociationSummaries"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let repositoryAssociationSummariesContainer = try containerValues.decodeIfPresent([RepositoryAssociationSummary?].self, forKey: .repositoryAssociationSummaries)
        var repositoryAssociationSummariesDecoded0:[RepositoryAssociationSummary]? = nil
        if let repositoryAssociationSummariesContainer = repositoryAssociationSummariesContainer {
            repositoryAssociationSummariesDecoded0 = [RepositoryAssociationSummary]()
            for structure0 in repositoryAssociationSummariesContainer {
                if let structure0 = structure0 {
                    repositoryAssociationSummariesDecoded0?.append(structure0)
                }
            }
        }
        repositoryAssociationSummaries = repositoryAssociationSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
