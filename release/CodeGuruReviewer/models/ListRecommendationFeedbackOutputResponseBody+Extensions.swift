// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListRecommendationFeedbackOutputResponseBody: Equatable {
    public let recommendationFeedbackSummaries: [RecommendationFeedbackSummary]?
    public let nextToken: String?
}

extension ListRecommendationFeedbackOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case nextToken = "NextToken"
        case recommendationFeedbackSummaries = "RecommendationFeedbackSummaries"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationFeedbackSummariesContainer = try containerValues.decodeIfPresent([RecommendationFeedbackSummary?].self, forKey: .recommendationFeedbackSummaries)
        var recommendationFeedbackSummariesDecoded0:[RecommendationFeedbackSummary]? = nil
        if let recommendationFeedbackSummariesContainer = recommendationFeedbackSummariesContainer {
            recommendationFeedbackSummariesDecoded0 = [RecommendationFeedbackSummary]()
            for structure0 in recommendationFeedbackSummariesContainer {
                if let structure0 = structure0 {
                    recommendationFeedbackSummariesDecoded0?.append(structure0)
                }
            }
        }
        recommendationFeedbackSummaries = recommendationFeedbackSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
