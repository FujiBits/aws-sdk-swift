// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension CodeGuruReviewerClient {
    /// <p>
    ///          Use to associate an AWS CodeCommit repository or a repostory managed by
    ///          AWS CodeStar Connections with Amazon CodeGuru Reviewer. When you associate a
    ///         repository, CodeGuru Reviewer reviews source code changes in the repository's pull requests and provides
    ///         automatic recommendations. You can view recommendations using the CodeGuru Reviewer console. For more information, see
    ///          <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/recommendations.html">Recommendations in
    ///             Amazon CodeGuru Reviewer</a> in the <i>Amazon CodeGuru Reviewer User Guide.</i>
    ///         </p>
    ///
    ///          <p>If you associate a CodeCommit repository, it must be in the same
    ///          AWS Region and AWS account where its CodeGuru Reviewer code reviews are configured.</p>
    ///
    ///          <p>Bitbucket and GitHub Enterprise Server repositories are managed by AWS CodeStar
    ///          Connections to connect to CodeGuru Reviewer. For more information, see <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/getting-started-associate-repository.html">Associate a repository</a> in
    ///          the <i>Amazon CodeGuru Reviewer User Guide.</i>
    ///          </p>
    ///
    ///          <note>
    ///             <p>
    ///             You cannot use the CodeGuru Reviewer SDK or the AWS CLI to associate a GitHub repository with Amazon CodeGuru Reviewer. To associate
    ///             a GitHub repository, use the console. For more information, see
    ///             <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/getting-started-with-guru.html">Getting
    ///             started with CodeGuru Reviewer</a> in the <i>CodeGuru Reviewer User Guide.</i>
    ///             </p>
    ///          </note>
    func associateRepository(input: AssociateRepositoryInput) async throws -> AssociateRepositoryOutputResponse
    {
        typealias associateRepositoryContinuation = CheckedContinuation<AssociateRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateRepositoryContinuation) in
            associateRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Use to create a code review with a <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReviewType.html">
    ///                <code>CodeReviewType</code>
    ///             </a>
    ///          of <code>RepositoryAnalysis</code>. This type of code review analyzes all code under a specified branch in an associated repository.
    ///          <code>PullRequest</code> code reviews are automatically triggered by a pull request so cannot be created using this method.
    ///       </p>
    func createCodeReview(input: CreateCodeReviewInput) async throws -> CreateCodeReviewOutputResponse
    {
        typealias createCodeReviewContinuation = CheckedContinuation<CreateCodeReviewOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createCodeReviewContinuation) in
            createCodeReview(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Returns the metadata associated with the code review along with its status.</p>
    func describeCodeReview(input: DescribeCodeReviewInput) async throws -> DescribeCodeReviewOutputResponse
    {
        typealias describeCodeReviewContinuation = CheckedContinuation<DescribeCodeReviewOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCodeReviewContinuation) in
            describeCodeReview(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Describes the customer feedback for a CodeGuru Reviewer recommendation.
    ///       </p>
    func describeRecommendationFeedback(input: DescribeRecommendationFeedbackInput) async throws -> DescribeRecommendationFeedbackOutputResponse
    {
        typealias describeRecommendationFeedbackContinuation = CheckedContinuation<DescribeRecommendationFeedbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRecommendationFeedbackContinuation) in
            describeRecommendationFeedback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Returns a <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html">
    ///                <code>RepositoryAssociation</code>
    ///             </a> object
    ///          that contains information about the requested repository association.
    ///       </p>
    func describeRepositoryAssociation(input: DescribeRepositoryAssociationInput) async throws -> DescribeRepositoryAssociationOutputResponse
    {
        typealias describeRepositoryAssociationContinuation = CheckedContinuation<DescribeRepositoryAssociationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRepositoryAssociationContinuation) in
            describeRepositoryAssociation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the association between Amazon CodeGuru Reviewer and a repository.</p>
    func disassociateRepository(input: DisassociateRepositoryInput) async throws -> DisassociateRepositoryOutputResponse
    {
        typealias disassociateRepositoryContinuation = CheckedContinuation<DisassociateRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateRepositoryContinuation) in
            disassociateRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Lists all the code reviews that the customer has created in the past 90 days.
    ///       </p>
    func listCodeReviews(input: ListCodeReviewsInput) async throws -> ListCodeReviewsOutputResponse
    {
        typealias listCodeReviewsContinuation = CheckedContinuation<ListCodeReviewsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCodeReviewsContinuation) in
            listCodeReviews(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Returns a list of
    ///          <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RecommendationFeedbackSummary.html">
    ///                <code>RecommendationFeedbackSummary</code>
    ///             </a>
    ///          objects that contain customer recommendation feedback for all CodeGuru Reviewer users.
    ///       </p>
    func listRecommendationFeedback(input: ListRecommendationFeedbackInput) async throws -> ListRecommendationFeedbackOutputResponse
    {
        typealias listRecommendationFeedbackContinuation = CheckedContinuation<ListRecommendationFeedbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRecommendationFeedbackContinuation) in
            listRecommendationFeedback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Returns the list of all recommendations for a completed code review.
    ///       </p>
    func listRecommendations(input: ListRecommendationsInput) async throws -> ListRecommendationsOutputResponse
    {
        typealias listRecommendationsContinuation = CheckedContinuation<ListRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRecommendationsContinuation) in
            listRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Returns a list of <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociationSummary.html">
    ///                <code>RepositoryAssociationSummary</code>
    ///             </a> objects that
    ///          contain summary information about a repository association. You can filter the returned list by
    ///          <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociationSummary.html#reviewer-Type-RepositoryAssociationSummary-ProviderType">
    ///                <code>ProviderType</code>
    ///             </a>,
    ///          <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociationSummary.html#reviewer-Type-RepositoryAssociationSummary-Name">
    ///                <code>Name</code>
    ///             </a>,
    ///          <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociationSummary.html#reviewer-Type-RepositoryAssociationSummary-State">
    ///                <code>State</code>
    ///             </a>, and
    ///          <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociationSummary.html#reviewer-Type-RepositoryAssociationSummary-Owner">
    ///                <code>Owner</code>
    ///             </a>.
    ///       </p>
    func listRepositoryAssociations(input: ListRepositoryAssociationsInput) async throws -> ListRepositoryAssociationsOutputResponse
    {
        typealias listRepositoryAssociationsContinuation = CheckedContinuation<ListRepositoryAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRepositoryAssociationsContinuation) in
            listRepositoryAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the list of tags associated with an associated repository resource.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Stores customer feedback for a CodeGuru Reviewer recommendation. When this API is called again with different reactions the previous feedback is overwritten.
    ///       </p>
    func putRecommendationFeedback(input: PutRecommendationFeedbackInput) async throws -> PutRecommendationFeedbackOutputResponse
    {
        typealias putRecommendationFeedbackContinuation = CheckedContinuation<PutRecommendationFeedbackOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putRecommendationFeedbackContinuation) in
            putRecommendationFeedback(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds one or more tags to an associated repository.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a tag from an associated repository.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
