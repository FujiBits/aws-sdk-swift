// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension WorkLinkClient {
    /// Specifies a domain to be associated to Amazon WorkLink.
    func associateDomain(input: AssociateDomainInput) async throws -> AssociateDomainOutputResponse
    {
        typealias associateDomainContinuation = CheckedContinuation<AssociateDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateDomainContinuation) in
            associateDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a website authorization provider with a specified fleet. This is used to authorize users against associated websites in the company network.
    func associateWebsiteAuthorizationProvider(input: AssociateWebsiteAuthorizationProviderInput) async throws -> AssociateWebsiteAuthorizationProviderOutputResponse
    {
        typealias associateWebsiteAuthorizationProviderContinuation = CheckedContinuation<AssociateWebsiteAuthorizationProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWebsiteAuthorizationProviderContinuation) in
            associateWebsiteAuthorizationProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Imports the root certificate of a certificate authority (CA) used to obtain TLS certificates used by associated websites within the company network.
    func associateWebsiteCertificateAuthority(input: AssociateWebsiteCertificateAuthorityInput) async throws -> AssociateWebsiteCertificateAuthorityOutputResponse
    {
        typealias associateWebsiteCertificateAuthorityContinuation = CheckedContinuation<AssociateWebsiteCertificateAuthorityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWebsiteCertificateAuthorityContinuation) in
            associateWebsiteCertificateAuthority(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a fleet. A fleet consists of resources and the configuration that delivers associated websites to authorized users who download and set up the Amazon WorkLink app.
    func createFleet(input: CreateFleetInput) async throws -> CreateFleetOutputResponse
    {
        typealias createFleetContinuation = CheckedContinuation<CreateFleetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFleetContinuation) in
            createFleet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a fleet. Prevents users from accessing previously associated websites.
    func deleteFleet(input: DeleteFleetInput) async throws -> DeleteFleetOutputResponse
    {
        typealias deleteFleetContinuation = CheckedContinuation<DeleteFleetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFleetContinuation) in
            deleteFleet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the configuration for delivering audit streams to the customer account.
    func describeAuditStreamConfiguration(input: DescribeAuditStreamConfigurationInput) async throws -> DescribeAuditStreamConfigurationOutputResponse
    {
        typealias describeAuditStreamConfigurationContinuation = CheckedContinuation<DescribeAuditStreamConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAuditStreamConfigurationContinuation) in
            describeAuditStreamConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the networking configuration to access the internal websites associated with the specified fleet.
    func describeCompanyNetworkConfiguration(input: DescribeCompanyNetworkConfigurationInput) async throws -> DescribeCompanyNetworkConfigurationOutputResponse
    {
        typealias describeCompanyNetworkConfigurationContinuation = CheckedContinuation<DescribeCompanyNetworkConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCompanyNetworkConfigurationContinuation) in
            describeCompanyNetworkConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides information about a user's device.
    func describeDevice(input: DescribeDeviceInput) async throws -> DescribeDeviceOutputResponse
    {
        typealias describeDeviceContinuation = CheckedContinuation<DescribeDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDeviceContinuation) in
            describeDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the device policy configuration for the specified fleet.
    func describeDevicePolicyConfiguration(input: DescribeDevicePolicyConfigurationInput) async throws -> DescribeDevicePolicyConfigurationOutputResponse
    {
        typealias describeDevicePolicyConfigurationContinuation = CheckedContinuation<DescribeDevicePolicyConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDevicePolicyConfigurationContinuation) in
            describeDevicePolicyConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides information about the domain.
    func describeDomain(input: DescribeDomainInput) async throws -> DescribeDomainOutputResponse
    {
        typealias describeDomainContinuation = CheckedContinuation<DescribeDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDomainContinuation) in
            describeDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides basic information for the specified fleet, excluding identity provider, networking, and device configuration details.
    func describeFleetMetadata(input: DescribeFleetMetadataInput) async throws -> DescribeFleetMetadataOutputResponse
    {
        typealias describeFleetMetadataContinuation = CheckedContinuation<DescribeFleetMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeFleetMetadataContinuation) in
            describeFleetMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the identity provider configuration of the specified fleet.
    func describeIdentityProviderConfiguration(input: DescribeIdentityProviderConfigurationInput) async throws -> DescribeIdentityProviderConfigurationOutputResponse
    {
        typealias describeIdentityProviderConfigurationContinuation = CheckedContinuation<DescribeIdentityProviderConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeIdentityProviderConfigurationContinuation) in
            describeIdentityProviderConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides information about the certificate authority.
    func describeWebsiteCertificateAuthority(input: DescribeWebsiteCertificateAuthorityInput) async throws -> DescribeWebsiteCertificateAuthorityOutputResponse
    {
        typealias describeWebsiteCertificateAuthorityContinuation = CheckedContinuation<DescribeWebsiteCertificateAuthorityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWebsiteCertificateAuthorityContinuation) in
            describeWebsiteCertificateAuthority(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a domain from Amazon WorkLink. End users lose the ability to access the domain with Amazon WorkLink.
    func disassociateDomain(input: DisassociateDomainInput) async throws -> DisassociateDomainOutputResponse
    {
        typealias disassociateDomainContinuation = CheckedContinuation<DisassociateDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateDomainContinuation) in
            disassociateDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a website authorization provider from a specified fleet. After the disassociation, users can't load any associated websites that require this authorization provider.
    func disassociateWebsiteAuthorizationProvider(input: DisassociateWebsiteAuthorizationProviderInput) async throws -> DisassociateWebsiteAuthorizationProviderOutputResponse
    {
        typealias disassociateWebsiteAuthorizationProviderContinuation = CheckedContinuation<DisassociateWebsiteAuthorizationProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWebsiteAuthorizationProviderContinuation) in
            disassociateWebsiteAuthorizationProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a certificate authority (CA).
    func disassociateWebsiteCertificateAuthority(input: DisassociateWebsiteCertificateAuthorityInput) async throws -> DisassociateWebsiteCertificateAuthorityOutputResponse
    {
        typealias disassociateWebsiteCertificateAuthorityContinuation = CheckedContinuation<DisassociateWebsiteCertificateAuthorityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWebsiteCertificateAuthorityContinuation) in
            disassociateWebsiteCertificateAuthority(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of devices registered with the specified fleet.
    func listDevices(input: ListDevicesInput) async throws -> ListDevicesOutputResponse
    {
        typealias listDevicesContinuation = CheckedContinuation<ListDevicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDevicesContinuation) in
            listDevices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of domains associated to a specified fleet.
    func listDomains(input: ListDomainsInput) async throws -> ListDomainsOutputResponse
    {
        typealias listDomainsContinuation = CheckedContinuation<ListDomainsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDomainsContinuation) in
            listDomains(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of fleets for the current account and Region.
    func listFleets(input: ListFleetsInput) async throws -> ListFleetsOutputResponse
    {
        typealias listFleetsContinuation = CheckedContinuation<ListFleetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFleetsContinuation) in
            listFleets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of tags for the specified resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of website authorization providers associated with a specified fleet.
    func listWebsiteAuthorizationProviders(input: ListWebsiteAuthorizationProvidersInput) async throws -> ListWebsiteAuthorizationProvidersOutputResponse
    {
        typealias listWebsiteAuthorizationProvidersContinuation = CheckedContinuation<ListWebsiteAuthorizationProvidersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWebsiteAuthorizationProvidersContinuation) in
            listWebsiteAuthorizationProviders(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of certificate authorities added for the current account and Region.
    func listWebsiteCertificateAuthorities(input: ListWebsiteCertificateAuthoritiesInput) async throws -> ListWebsiteCertificateAuthoritiesOutputResponse
    {
        typealias listWebsiteCertificateAuthoritiesContinuation = CheckedContinuation<ListWebsiteCertificateAuthoritiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWebsiteCertificateAuthoritiesContinuation) in
            listWebsiteCertificateAuthorities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Moves a domain to ACTIVE status if it was in the INACTIVE status.
    func restoreDomainAccess(input: RestoreDomainAccessInput) async throws -> RestoreDomainAccessOutputResponse
    {
        typealias restoreDomainAccessContinuation = CheckedContinuation<RestoreDomainAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: restoreDomainAccessContinuation) in
            restoreDomainAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Moves a domain to INACTIVE status if it was in the ACTIVE status.
    func revokeDomainAccess(input: RevokeDomainAccessInput) async throws -> RevokeDomainAccessOutputResponse
    {
        typealias revokeDomainAccessContinuation = CheckedContinuation<RevokeDomainAccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: revokeDomainAccessContinuation) in
            revokeDomainAccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Signs the user out from all of their devices. The user can sign in again if they have valid credentials.
    func signOutUser(input: SignOutUserInput) async throws -> SignOutUserOutputResponse
    {
        typealias signOutUserContinuation = CheckedContinuation<SignOutUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: signOutUserContinuation) in
            signOutUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or overwrites one or more tags for the specified resource, such as a fleet. Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes one or more tags from the specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the audit stream configuration for the fleet.
    func updateAuditStreamConfiguration(input: UpdateAuditStreamConfigurationInput) async throws -> UpdateAuditStreamConfigurationOutputResponse
    {
        typealias updateAuditStreamConfigurationContinuation = CheckedContinuation<UpdateAuditStreamConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAuditStreamConfigurationContinuation) in
            updateAuditStreamConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the company network configuration for the fleet.
    func updateCompanyNetworkConfiguration(input: UpdateCompanyNetworkConfigurationInput) async throws -> UpdateCompanyNetworkConfigurationOutputResponse
    {
        typealias updateCompanyNetworkConfigurationContinuation = CheckedContinuation<UpdateCompanyNetworkConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateCompanyNetworkConfigurationContinuation) in
            updateCompanyNetworkConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the device policy configuration for the fleet.
    func updateDevicePolicyConfiguration(input: UpdateDevicePolicyConfigurationInput) async throws -> UpdateDevicePolicyConfigurationOutputResponse
    {
        typealias updateDevicePolicyConfigurationContinuation = CheckedContinuation<UpdateDevicePolicyConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDevicePolicyConfigurationContinuation) in
            updateDevicePolicyConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates domain metadata, such as DisplayName.
    func updateDomainMetadata(input: UpdateDomainMetadataInput) async throws -> UpdateDomainMetadataOutputResponse
    {
        typealias updateDomainMetadataContinuation = CheckedContinuation<UpdateDomainMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDomainMetadataContinuation) in
            updateDomainMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates fleet metadata, such as DisplayName.
    func updateFleetMetadata(input: UpdateFleetMetadataInput) async throws -> UpdateFleetMetadataOutputResponse
    {
        typealias updateFleetMetadataContinuation = CheckedContinuation<UpdateFleetMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFleetMetadataContinuation) in
            updateFleetMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the identity provider configuration for the fleet.
    func updateIdentityProviderConfiguration(input: UpdateIdentityProviderConfigurationInput) async throws -> UpdateIdentityProviderConfigurationOutputResponse
    {
        typealias updateIdentityProviderConfigurationContinuation = CheckedContinuation<UpdateIdentityProviderConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIdentityProviderConfigurationContinuation) in
            updateIdentityProviderConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
