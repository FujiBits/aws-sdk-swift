// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UploadDocumentsInputHeadersMiddleware: Middleware {
    public let id: String = "UploadDocumentsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UploadDocumentsInput>,
                  next: H) -> Swift.Result<OperationOutput<UploadDocumentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let contentType = input.operationInput.contentType {
            input.builder.withHeader(name: "Content-Type", value: String(contentType.rawValue))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UploadDocumentsInput>
    public typealias MOutput = OperationOutput<UploadDocumentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UploadDocumentsOutputError>
}

public struct UploadDocumentsInputQueryItemMiddleware: Middleware {
    public let id: String = "UploadDocumentsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UploadDocumentsInput>,
                  next: H) -> Swift.Result<OperationOutput<UploadDocumentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(URLQueryItem(name: "format", value: "sdk"))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UploadDocumentsInput>
    public typealias MOutput = OperationOutput<UploadDocumentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UploadDocumentsOutputError>
}

public struct UploadDocumentsInputBodyMiddleware: Middleware {
    public let id: String = "UploadDocumentsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UploadDocumentsInput>,
                  next: H) -> Swift.Result<OperationOutput<UploadDocumentsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let documents = input.operationInput.documents {
            let data = documents
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UploadDocumentsInput>
    public typealias MOutput = OperationOutput<UploadDocumentsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UploadDocumentsOutputError>
}

extension UploadDocumentsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case documents
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let documents = documents {
            try encodeContainer.encode(documents.base64EncodedString(), forKey: .documents)
        }
    }
}
