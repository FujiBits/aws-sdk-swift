// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension RamClient {
    /// Accepts an invitation to a resource share from another AWS account.
    func acceptResourceShareInvitation(input: AcceptResourceShareInvitationInput) async throws -> AcceptResourceShareInvitationOutputResponse
    {
        typealias acceptResourceShareInvitationContinuation = CheckedContinuation<AcceptResourceShareInvitationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptResourceShareInvitationContinuation) in
            acceptResourceShareInvitation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates the specified resource share with the specified principals and resources.
    func associateResourceShare(input: AssociateResourceShareInput) async throws -> AssociateResourceShareOutputResponse
    {
        typealias associateResourceShareContinuation = CheckedContinuation<AssociateResourceShareOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateResourceShareContinuation) in
            associateResourceShare(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a permission with a resource share.
    func associateResourceSharePermission(input: AssociateResourceSharePermissionInput) async throws -> AssociateResourceSharePermissionOutputResponse
    {
        typealias associateResourceSharePermissionContinuation = CheckedContinuation<AssociateResourceSharePermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateResourceSharePermissionContinuation) in
            associateResourceSharePermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a resource share.
    func createResourceShare(input: CreateResourceShareInput) async throws -> CreateResourceShareOutputResponse
    {
        typealias createResourceShareContinuation = CheckedContinuation<CreateResourceShareOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createResourceShareContinuation) in
            createResourceShare(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified resource share.
    func deleteResourceShare(input: DeleteResourceShareInput) async throws -> DeleteResourceShareOutputResponse
    {
        typealias deleteResourceShareContinuation = CheckedContinuation<DeleteResourceShareOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteResourceShareContinuation) in
            deleteResourceShare(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates the specified principals or resources from the specified resource share.
    func disassociateResourceShare(input: DisassociateResourceShareInput) async throws -> DisassociateResourceShareOutputResponse
    {
        typealias disassociateResourceShareContinuation = CheckedContinuation<DisassociateResourceShareOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateResourceShareContinuation) in
            disassociateResourceShare(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates an AWS RAM permission from a resource share.
    func disassociateResourceSharePermission(input: DisassociateResourceSharePermissionInput) async throws -> DisassociateResourceSharePermissionOutputResponse
    {
        typealias disassociateResourceSharePermissionContinuation = CheckedContinuation<DisassociateResourceSharePermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateResourceSharePermissionContinuation) in
            disassociateResourceSharePermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables resource sharing within your AWS Organization.
    ///          The caller must be the master account for the AWS Organization.
    func enableSharingWithAwsOrganization(input: EnableSharingWithAwsOrganizationInput) async throws -> EnableSharingWithAwsOrganizationOutputResponse
    {
        typealias enableSharingWithAwsOrganizationContinuation = CheckedContinuation<EnableSharingWithAwsOrganizationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableSharingWithAwsOrganizationContinuation) in
            enableSharingWithAwsOrganization(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the contents of an AWS RAM permission in JSON format.
    func getPermission(input: GetPermissionInput) async throws -> GetPermissionOutputResponse
    {
        typealias getPermissionContinuation = CheckedContinuation<GetPermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPermissionContinuation) in
            getPermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the policies for the specified resources that you own and have shared.
    func getResourcePolicies(input: GetResourcePoliciesInput) async throws -> GetResourcePoliciesOutputResponse
    {
        typealias getResourcePoliciesContinuation = CheckedContinuation<GetResourcePoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourcePoliciesContinuation) in
            getResourcePolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the resources or principals for the resource shares that you own.
    func getResourceShareAssociations(input: GetResourceShareAssociationsInput) async throws -> GetResourceShareAssociationsOutputResponse
    {
        typealias getResourceShareAssociationsContinuation = CheckedContinuation<GetResourceShareAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourceShareAssociationsContinuation) in
            getResourceShareAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the invitations that you have received for resource shares.
    func getResourceShareInvitations(input: GetResourceShareInvitationsInput) async throws -> GetResourceShareInvitationsOutputResponse
    {
        typealias getResourceShareInvitationsContinuation = CheckedContinuation<GetResourceShareInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourceShareInvitationsContinuation) in
            getResourceShareInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the resource shares that you own or the resource shares that are shared with you.
    func getResourceShares(input: GetResourceSharesInput) async throws -> GetResourceSharesOutputResponse
    {
        typealias getResourceSharesContinuation = CheckedContinuation<GetResourceSharesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getResourceSharesContinuation) in
            getResourceShares(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the resources in a resource share that is shared with you but that the invitation is still pending for.
    func listPendingInvitationResources(input: ListPendingInvitationResourcesInput) async throws -> ListPendingInvitationResourcesOutputResponse
    {
        typealias listPendingInvitationResourcesContinuation = CheckedContinuation<ListPendingInvitationResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPendingInvitationResourcesContinuation) in
            listPendingInvitationResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the AWS RAM permissions.
    func listPermissions(input: ListPermissionsInput) async throws -> ListPermissionsOutputResponse
    {
        typealias listPermissionsContinuation = CheckedContinuation<ListPermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPermissionsContinuation) in
            listPermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the principals that you have shared resources with or that have shared resources
    /// 			with you.
    func listPrincipals(input: ListPrincipalsInput) async throws -> ListPrincipalsOutputResponse
    {
        typealias listPrincipalsContinuation = CheckedContinuation<ListPrincipalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPrincipalsContinuation) in
            listPrincipals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the AWS RAM permissions that are associated with a resource share.
    func listResourceSharePermissions(input: ListResourceSharePermissionsInput) async throws -> ListResourceSharePermissionsOutputResponse
    {
        typealias listResourceSharePermissionsContinuation = CheckedContinuation<ListResourceSharePermissionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourceSharePermissionsContinuation) in
            listResourceSharePermissions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the shareable resource types supported by AWS RAM.
    func listResourceTypes(input: ListResourceTypesInput) async throws -> ListResourceTypesOutputResponse
    {
        typealias listResourceTypesContinuation = CheckedContinuation<ListResourceTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourceTypesContinuation) in
            listResourceTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the resources that you added to a resource shares or the resources that are shared with you.
    func listResources(input: ListResourcesInput) async throws -> ListResourcesOutputResponse
    {
        typealias listResourcesContinuation = CheckedContinuation<ListResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourcesContinuation) in
            listResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Resource shares that were created by attaching a policy to a resource are visible only to
    /// 			the resource share owner, and the resource share cannot be modified in AWS RAM.
    ///     	
    ///     	    Use this API action to promote the resource share. When you promote the resource share,
    /// 			it becomes:
    ///     	
    ///
    ///     			        Visible to all principals that it is shared with.
    ///     		
    ///
    ///     			        Modifiable in AWS RAM.
    ///     		
    ///
    func promoteResourceShareCreatedFromPolicy(input: PromoteResourceShareCreatedFromPolicyInput) async throws -> PromoteResourceShareCreatedFromPolicyOutputResponse
    {
        typealias promoteResourceShareCreatedFromPolicyContinuation = CheckedContinuation<PromoteResourceShareCreatedFromPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: promoteResourceShareCreatedFromPolicyContinuation) in
            promoteResourceShareCreatedFromPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Rejects an invitation to a resource share from another AWS account.
    func rejectResourceShareInvitation(input: RejectResourceShareInvitationInput) async throws -> RejectResourceShareInvitationOutputResponse
    {
        typealias rejectResourceShareInvitationContinuation = CheckedContinuation<RejectResourceShareInvitationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rejectResourceShareInvitationContinuation) in
            rejectResourceShareInvitation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds the specified tags to the specified resource share that you own.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified tags from the specified resource share that you own.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified resource share that you own.
    func updateResourceShare(input: UpdateResourceShareInput) async throws -> UpdateResourceShareOutputResponse
    {
        typealias updateResourceShareContinuation = CheckedContinuation<UpdateResourceShareOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateResourceShareContinuation) in
            updateResourceShare(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
