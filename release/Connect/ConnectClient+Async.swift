// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ConnectClient {
    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Associates an approved origin to an Amazon Connect instance.</p>
    func associateApprovedOrigin(input: AssociateApprovedOriginInput) async throws -> AssociateApprovedOriginOutputResponse
    {
        typealias associateApprovedOriginContinuation = CheckedContinuation<AssociateApprovedOriginOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateApprovedOriginContinuation) in
            associateApprovedOrigin(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Associates a storage resource type for the first time. You can only associate one type of
    ///    storage configuration in a single call. This means, for example, that you can't define an
    ///    instance with multiple S3 buckets for storing chat transcripts.</p>
    ///          <p>This API does not create a resource that doesn't exist. It only associates it to the
    ///    instance. Ensure that the resource being specified in the storage configuration, like an S3
    ///    bucket, exists when being used for association.</p>
    func associateInstanceStorageConfig(input: AssociateInstanceStorageConfigInput) async throws -> AssociateInstanceStorageConfigOutputResponse
    {
        typealias associateInstanceStorageConfigContinuation = CheckedContinuation<AssociateInstanceStorageConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateInstanceStorageConfigContinuation) in
            associateInstanceStorageConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Allows the specified Amazon Connect instance to access the specified Lambda function.</p>
    func associateLambdaFunction(input: AssociateLambdaFunctionInput) async throws -> AssociateLambdaFunctionOutputResponse
    {
        typealias associateLambdaFunctionContinuation = CheckedContinuation<AssociateLambdaFunctionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateLambdaFunctionContinuation) in
            associateLambdaFunction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Allows the specified Amazon Connect instance to access the specified Amazon Lex bot.</p>
    func associateLexBot(input: AssociateLexBotInput) async throws -> AssociateLexBotOutputResponse
    {
        typealias associateLexBotContinuation = CheckedContinuation<AssociateLexBotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateLexBotContinuation) in
            associateLexBot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Associates a set of quick connects with a queue.</p>
    func associateQueueQuickConnects(input: AssociateQueueQuickConnectsInput) async throws -> AssociateQueueQuickConnectsOutputResponse
    {
        typealias associateQueueQuickConnectsContinuation = CheckedContinuation<AssociateQueueQuickConnectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateQueueQuickConnectsContinuation) in
            associateQueueQuickConnects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Associates a set of queues with a routing profile.</p>
    func associateRoutingProfileQueues(input: AssociateRoutingProfileQueuesInput) async throws -> AssociateRoutingProfileQueuesOutputResponse
    {
        typealias associateRoutingProfileQueuesContinuation = CheckedContinuation<AssociateRoutingProfileQueuesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateRoutingProfileQueuesContinuation) in
            associateRoutingProfileQueues(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Associates a security key to the instance.</p>
    func associateSecurityKey(input: AssociateSecurityKeyInput) async throws -> AssociateSecurityKeyOutputResponse
    {
        typealias associateSecurityKeyContinuation = CheckedContinuation<AssociateSecurityKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateSecurityKeyContinuation) in
            associateSecurityKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a contact flow for the specified Amazon Connect instance.</p>
    ///          <p>You can also create and update contact flows using the <a href="https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html">Amazon Connect
    ///    Flow language</a>.</p>
    func createContactFlow(input: CreateContactFlowInput) async throws -> CreateContactFlowOutputResponse
    {
        typealias createContactFlowContinuation = CheckedContinuation<CreateContactFlowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createContactFlowContinuation) in
            createContactFlow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Initiates an Amazon Connect instance with all the supported channels enabled. It does not attach any
    ///    storage, such as Amazon Simple Storage Service (Amazon S3) or Amazon Kinesis. It also does not
    ///    allow for any configurations on features, such as Contact Lens for Amazon Connect. </p>
    ///          <p>Amazon Connect enforces a limit on the total number of instances that you can create or delete in 30 days.
    /// If you exceed this limit, you will get an error message indicating there has been an excessive number of attempts at creating or deleting instances.
    /// You must wait 30 days before you can restart creating and deleting instances in your account.</p>
    func createInstance(input: CreateInstanceInput) async throws -> CreateInstanceOutputResponse
    {
        typealias createInstanceContinuation = CheckedContinuation<CreateInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createInstanceContinuation) in
            createInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Create an AppIntegration association with an Amazon Connect instance.</p>
    func createIntegrationAssociation(input: CreateIntegrationAssociationInput) async throws -> CreateIntegrationAssociationOutputResponse
    {
        typealias createIntegrationAssociationContinuation = CheckedContinuation<CreateIntegrationAssociationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIntegrationAssociationContinuation) in
            createIntegrationAssociation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Creates a new queue for the specified Amazon Connect instance.</p>
    func createQueue(input: CreateQueueInput) async throws -> CreateQueueOutputResponse
    {
        typealias createQueueContinuation = CheckedContinuation<CreateQueueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createQueueContinuation) in
            createQueue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Creates a quick connect for the specified Amazon Connect instance.</p>
    func createQuickConnect(input: CreateQuickConnectInput) async throws -> CreateQuickConnectOutputResponse
    {
        typealias createQuickConnectContinuation = CheckedContinuation<CreateQuickConnectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createQuickConnectContinuation) in
            createQuickConnect(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new routing profile.</p>
    func createRoutingProfile(input: CreateRoutingProfileInput) async throws -> CreateRoutingProfileOutputResponse
    {
        typealias createRoutingProfileContinuation = CheckedContinuation<CreateRoutingProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRoutingProfileContinuation) in
            createRoutingProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a use case for an AppIntegration association.</p>
    func createUseCase(input: CreateUseCaseInput) async throws -> CreateUseCaseOutputResponse
    {
        typealias createUseCaseContinuation = CheckedContinuation<CreateUseCaseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUseCaseContinuation) in
            createUseCase(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a user account for the specified Amazon Connect instance.</p>
    ///          <p>For information about how to create user accounts using the Amazon Connect console, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/user-management.html">Add Users</a> in
    ///    the <i>Amazon Connect Administrator Guide</i>.</p>
    func createUser(input: CreateUserInput) async throws -> CreateUserOutputResponse
    {
        typealias createUserContinuation = CheckedContinuation<CreateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserContinuation) in
            createUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new user hierarchy group.</p>
    func createUserHierarchyGroup(input: CreateUserHierarchyGroupInput) async throws -> CreateUserHierarchyGroupOutputResponse
    {
        typealias createUserHierarchyGroupContinuation = CheckedContinuation<CreateUserHierarchyGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserHierarchyGroupContinuation) in
            createUserHierarchyGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Deletes the Amazon Connect instance.</p>
    ///          <p>Amazon Connect enforces a limit on the total number of instances that you can create or delete in 30 days.
    /// If you exceed this limit, you will get an error message indicating there has been an excessive number of attempts at creating or deleting instances.
    /// You must wait 30 days before you can restart creating and deleting instances in your account.</p>
    func deleteInstance(input: DeleteInstanceInput) async throws -> DeleteInstanceOutputResponse
    {
        typealias deleteInstanceContinuation = CheckedContinuation<DeleteInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInstanceContinuation) in
            deleteInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an AppIntegration association from an Amazon Connect instance. The association must not have
    ///    any use cases associated with it.</p>
    func deleteIntegrationAssociation(input: DeleteIntegrationAssociationInput) async throws -> DeleteIntegrationAssociationOutputResponse
    {
        typealias deleteIntegrationAssociationContinuation = CheckedContinuation<DeleteIntegrationAssociationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIntegrationAssociationContinuation) in
            deleteIntegrationAssociation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Deletes a quick connect.</p>
    func deleteQuickConnect(input: DeleteQuickConnectInput) async throws -> DeleteQuickConnectOutputResponse
    {
        typealias deleteQuickConnectContinuation = CheckedContinuation<DeleteQuickConnectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteQuickConnectContinuation) in
            deleteQuickConnect(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a use case from an AppIntegration association.</p>
    func deleteUseCase(input: DeleteUseCaseInput) async throws -> DeleteUseCaseOutputResponse
    {
        typealias deleteUseCaseContinuation = CheckedContinuation<DeleteUseCaseOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUseCaseContinuation) in
            deleteUseCase(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a user account from the specified Amazon Connect instance.</p>
    ///          <p>For information about what happens to a user's data when their account is deleted, see
    ///     <a href="https://docs.aws.amazon.com/connect/latest/adminguide/delete-users.html">Delete Users from
    ///     Your Amazon Connect Instance</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    func deleteUser(input: DeleteUserInput) async throws -> DeleteUserOutputResponse
    {
        typealias deleteUserContinuation = CheckedContinuation<DeleteUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserContinuation) in
            deleteUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an existing user hierarchy group. It must not be associated with any agents or have
    ///    any active child groups.</p>
    func deleteUserHierarchyGroup(input: DeleteUserHierarchyGroupInput) async throws -> DeleteUserHierarchyGroupOutputResponse
    {
        typealias deleteUserHierarchyGroupContinuation = CheckedContinuation<DeleteUserHierarchyGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserHierarchyGroupContinuation) in
            deleteUserHierarchyGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the specified contact flow.</p>
    ///          <p>You can also create and update contact flows using the <a href="https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html">Amazon Connect
    ///    Flow language</a>.</p>
    func describeContactFlow(input: DescribeContactFlowInput) async throws -> DescribeContactFlowOutputResponse
    {
        typealias describeContactFlowContinuation = CheckedContinuation<DescribeContactFlowOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeContactFlowContinuation) in
            describeContactFlow(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Describes the hours of operation.</p>
    func describeHoursOfOperation(input: DescribeHoursOfOperationInput) async throws -> DescribeHoursOfOperationOutputResponse
    {
        typealias describeHoursOfOperationContinuation = CheckedContinuation<DescribeHoursOfOperationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeHoursOfOperationContinuation) in
            describeHoursOfOperation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Returns the current state of the specified instance identifier. It tracks the instance while
    ///    it is being created and returns an error status, if applicable. </p>
    ///          <p>If an instance is not created successfully, the instance status reason field returns details
    ///    relevant to the reason. The instance in a failed state is returned only for 24 hours after the
    ///    CreateInstance API was invoked.</p>
    func describeInstance(input: DescribeInstanceInput) async throws -> DescribeInstanceOutputResponse
    {
        typealias describeInstanceContinuation = CheckedContinuation<DescribeInstanceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInstanceContinuation) in
            describeInstance(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Describes the specified instance attribute.</p>
    func describeInstanceAttribute(input: DescribeInstanceAttributeInput) async throws -> DescribeInstanceAttributeOutputResponse
    {
        typealias describeInstanceAttributeContinuation = CheckedContinuation<DescribeInstanceAttributeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInstanceAttributeContinuation) in
            describeInstanceAttribute(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Retrieves the current storage configurations for the specified resource type, association
    ///    ID, and instance ID.</p>
    func describeInstanceStorageConfig(input: DescribeInstanceStorageConfigInput) async throws -> DescribeInstanceStorageConfigOutputResponse
    {
        typealias describeInstanceStorageConfigContinuation = CheckedContinuation<DescribeInstanceStorageConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInstanceStorageConfigContinuation) in
            describeInstanceStorageConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Describes the specified queue.</p>
    func describeQueue(input: DescribeQueueInput) async throws -> DescribeQueueOutputResponse
    {
        typealias describeQueueContinuation = CheckedContinuation<DescribeQueueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeQueueContinuation) in
            describeQueue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Describes the quick connect.</p>
    func describeQuickConnect(input: DescribeQuickConnectInput) async throws -> DescribeQuickConnectOutputResponse
    {
        typealias describeQuickConnectContinuation = CheckedContinuation<DescribeQuickConnectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeQuickConnectContinuation) in
            describeQuickConnect(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the specified routing profile.</p>
    func describeRoutingProfile(input: DescribeRoutingProfileInput) async throws -> DescribeRoutingProfileOutputResponse
    {
        typealias describeRoutingProfileContinuation = CheckedContinuation<DescribeRoutingProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRoutingProfileContinuation) in
            describeRoutingProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the specified user account. You can find the instance ID in the console (it’s the
    ///    final part of the ARN). The console does not display the user IDs. Instead, list the users and
    ///    note the IDs provided in the output.</p>
    func describeUser(input: DescribeUserInput) async throws -> DescribeUserOutputResponse
    {
        typealias describeUserContinuation = CheckedContinuation<DescribeUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserContinuation) in
            describeUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the specified hierarchy group.</p>
    func describeUserHierarchyGroup(input: DescribeUserHierarchyGroupInput) async throws -> DescribeUserHierarchyGroupOutputResponse
    {
        typealias describeUserHierarchyGroupContinuation = CheckedContinuation<DescribeUserHierarchyGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserHierarchyGroupContinuation) in
            describeUserHierarchyGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes the hierarchy structure of the specified Amazon Connect instance.</p>
    func describeUserHierarchyStructure(input: DescribeUserHierarchyStructureInput) async throws -> DescribeUserHierarchyStructureOutputResponse
    {
        typealias describeUserHierarchyStructureContinuation = CheckedContinuation<DescribeUserHierarchyStructureOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserHierarchyStructureContinuation) in
            describeUserHierarchyStructure(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Revokes access to integrated applications from Amazon Connect.</p>
    func disassociateApprovedOrigin(input: DisassociateApprovedOriginInput) async throws -> DisassociateApprovedOriginOutputResponse
    {
        typealias disassociateApprovedOriginContinuation = CheckedContinuation<DisassociateApprovedOriginOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateApprovedOriginContinuation) in
            disassociateApprovedOrigin(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Removes the storage type configurations for the specified resource type and association
    ///    ID.</p>
    func disassociateInstanceStorageConfig(input: DisassociateInstanceStorageConfigInput) async throws -> DisassociateInstanceStorageConfigOutputResponse
    {
        typealias disassociateInstanceStorageConfigContinuation = CheckedContinuation<DisassociateInstanceStorageConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateInstanceStorageConfigContinuation) in
            disassociateInstanceStorageConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Remove the Lambda function from the dropdown options available in the relevant contact flow
    ///    blocks.</p>
    func disassociateLambdaFunction(input: DisassociateLambdaFunctionInput) async throws -> DisassociateLambdaFunctionOutputResponse
    {
        typealias disassociateLambdaFunctionContinuation = CheckedContinuation<DisassociateLambdaFunctionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateLambdaFunctionContinuation) in
            disassociateLambdaFunction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Revokes authorization from the specified instance to access the specified Amazon Lex bot.</p>
    func disassociateLexBot(input: DisassociateLexBotInput) async throws -> DisassociateLexBotOutputResponse
    {
        typealias disassociateLexBotContinuation = CheckedContinuation<DisassociateLexBotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateLexBotContinuation) in
            disassociateLexBot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Disassociates a set of quick connects from a queue.</p>
    func disassociateQueueQuickConnects(input: DisassociateQueueQuickConnectsInput) async throws -> DisassociateQueueQuickConnectsOutputResponse
    {
        typealias disassociateQueueQuickConnectsContinuation = CheckedContinuation<DisassociateQueueQuickConnectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateQueueQuickConnectsContinuation) in
            disassociateQueueQuickConnects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disassociates a set of queues from a routing profile.</p>
    func disassociateRoutingProfileQueues(input: DisassociateRoutingProfileQueuesInput) async throws -> DisassociateRoutingProfileQueuesOutputResponse
    {
        typealias disassociateRoutingProfileQueuesContinuation = CheckedContinuation<DisassociateRoutingProfileQueuesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateRoutingProfileQueuesContinuation) in
            disassociateRoutingProfileQueues(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Deletes the specified security key.</p>
    func disassociateSecurityKey(input: DisassociateSecurityKeyInput) async throws -> DisassociateSecurityKeyOutputResponse
    {
        typealias disassociateSecurityKeyContinuation = CheckedContinuation<DisassociateSecurityKeyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateSecurityKeyContinuation) in
            disassociateSecurityKey(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the contact attributes for the specified contact.</p>
    func getContactAttributes(input: GetContactAttributesInput) async throws -> GetContactAttributesOutputResponse
    {
        typealias getContactAttributesContinuation = CheckedContinuation<GetContactAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContactAttributesContinuation) in
            getContactAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the real-time metric data from the specified Amazon Connect instance.</p>
    ///          <p>For a description of each metric, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-definitions.html">Real-time Metrics
    ///     Definitions</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    func getCurrentMetricData(input: GetCurrentMetricDataInput) async throws -> GetCurrentMetricDataOutputResponse
    {
        typealias getCurrentMetricDataContinuation = CheckedContinuation<GetCurrentMetricDataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getCurrentMetricDataContinuation) in
            getCurrentMetricData(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a token for federation.</p>
    ///          <note>
    ///             <p>This API doesn't support root users. If you try to invoke GetFederationToken with root
    ///     credentials, an error message similar to the following one appears: </p>
    ///             <p>
    ///                <code>Provided identity: Principal: .... User: .... cannot be used for federation with
    ///      Amazon Connect</code>
    ///             </p>
    ///          </note>
    func getFederationToken(input: GetFederationTokenInput) async throws -> GetFederationTokenOutputResponse
    {
        typealias getFederationTokenContinuation = CheckedContinuation<GetFederationTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFederationTokenContinuation) in
            getFederationToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets historical metric data from the specified Amazon Connect instance.</p>
    ///
    ///          <p>For a description of each historical metric, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics-definitions.html">Historical Metrics
    ///     Definitions</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    func getMetricData(input: GetMetricDataInput) async throws -> GetMetricDataOutputResponse
    {
        typealias getMetricDataContinuation = CheckedContinuation<GetMetricDataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMetricDataContinuation) in
            getMetricData(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Returns a paginated list of all approved origins associated with the instance.</p>
    func listApprovedOrigins(input: ListApprovedOriginsInput) async throws -> ListApprovedOriginsOutputResponse
    {
        typealias listApprovedOriginsContinuation = CheckedContinuation<ListApprovedOriginsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listApprovedOriginsContinuation) in
            listApprovedOrigins(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides information about the contact flows for the specified Amazon Connect instance.</p>
    ///          <p>You can also create and update contact flows using the <a href="https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html">Amazon Connect
    ///    Flow language</a>.</p>
    ///          <p>For more information about contact flows, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/concepts-contact-flows.html">Contact Flows</a> in the
    ///     <i>Amazon Connect Administrator Guide</i>.</p>
    func listContactFlows(input: ListContactFlowsInput) async throws -> ListContactFlowsOutputResponse
    {
        typealias listContactFlowsContinuation = CheckedContinuation<ListContactFlowsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listContactFlowsContinuation) in
            listContactFlows(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides information about the hours of operation for the specified Amazon Connect instance.</p>
    ///          <p>For more information about hours of operation, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/set-hours-operation.html">Set the Hours of Operation for a
    ///     Queue</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    func listHoursOfOperations(input: ListHoursOfOperationsInput) async throws -> ListHoursOfOperationsOutputResponse
    {
        typealias listHoursOfOperationsContinuation = CheckedContinuation<ListHoursOfOperationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listHoursOfOperationsContinuation) in
            listHoursOfOperations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Returns a paginated list of all attribute types for the given instance.</p>
    func listInstanceAttributes(input: ListInstanceAttributesInput) async throws -> ListInstanceAttributesOutputResponse
    {
        typealias listInstanceAttributesContinuation = CheckedContinuation<ListInstanceAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInstanceAttributesContinuation) in
            listInstanceAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///
    ///          <p>Returns a paginated list of storage configs for the identified instance and resource
    ///    type.</p>
    func listInstanceStorageConfigs(input: ListInstanceStorageConfigsInput) async throws -> ListInstanceStorageConfigsOutputResponse
    {
        typealias listInstanceStorageConfigsContinuation = CheckedContinuation<ListInstanceStorageConfigsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInstanceStorageConfigsContinuation) in
            listInstanceStorageConfigs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Return a list of instances which are in active state, creation-in-progress state, and failed
    ///    state. Instances that aren't successfully created (they are in a failed state) are returned only
    ///    for 24 hours after the CreateInstance API was invoked.</p>
    func listInstances(input: ListInstancesInput) async throws -> ListInstancesOutputResponse
    {
        typealias listInstancesContinuation = CheckedContinuation<ListInstancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInstancesContinuation) in
            listInstances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides summary information about the AppIntegration associations for the specified Amazon Connect
    ///    instance.</p>
    func listIntegrationAssociations(input: ListIntegrationAssociationsInput) async throws -> ListIntegrationAssociationsOutputResponse
    {
        typealias listIntegrationAssociationsContinuation = CheckedContinuation<ListIntegrationAssociationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIntegrationAssociationsContinuation) in
            listIntegrationAssociations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Returns a paginated list of all Lambda functions that display in the dropdown options in the
    ///    relevant contact flow blocks.</p>
    func listLambdaFunctions(input: ListLambdaFunctionsInput) async throws -> ListLambdaFunctionsOutputResponse
    {
        typealias listLambdaFunctionsContinuation = CheckedContinuation<ListLambdaFunctionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLambdaFunctionsContinuation) in
            listLambdaFunctions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Returns a paginated list of all the Amazon Lex bots currently associated with the
    ///    instance.</p>
    func listLexBots(input: ListLexBotsInput) async throws -> ListLexBotsOutputResponse
    {
        typealias listLexBotsContinuation = CheckedContinuation<ListLexBotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLexBotsContinuation) in
            listLexBots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides information about the phone numbers for the specified Amazon Connect instance. </p>
    ///          <p>For more information about phone numbers, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-center-phone-number.html">Set Up Phone Numbers for Your
    ///     Contact Center</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    func listPhoneNumbers(input: ListPhoneNumbersInput) async throws -> ListPhoneNumbersOutputResponse
    {
        typealias listPhoneNumbersContinuation = CheckedContinuation<ListPhoneNumbersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPhoneNumbersContinuation) in
            listPhoneNumbers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides information about the prompts for the specified Amazon Connect instance.</p>
    func listPrompts(input: ListPromptsInput) async throws -> ListPromptsOutputResponse
    {
        typealias listPromptsContinuation = CheckedContinuation<ListPromptsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPromptsContinuation) in
            listPrompts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Lists the quick connects associated with a queue.</p>
    func listQueueQuickConnects(input: ListQueueQuickConnectsInput) async throws -> ListQueueQuickConnectsOutputResponse
    {
        typealias listQueueQuickConnectsContinuation = CheckedContinuation<ListQueueQuickConnectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listQueueQuickConnectsContinuation) in
            listQueueQuickConnects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides information about the queues for the specified Amazon Connect instance.</p>
    ///          <p>If you do not specify a <code>QueueTypes</code>
    ///    parameter, both standard and agent queues are returned. This might cause an unexpected truncation
    ///    of results if you have more than 1000 agents and you limit the number of results of the API call
    ///    in code.</p>
    ///          <p>For more information about queues, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/concepts-queues-standard-and-agent.html">Queues: Standard and
    ///     Agent</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    func listQueues(input: ListQueuesInput) async throws -> ListQueuesOutputResponse
    {
        typealias listQueuesContinuation = CheckedContinuation<ListQueuesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listQueuesContinuation) in
            listQueues(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Provides information about the quick connects for the specified Amazon Connect instance. </p>
    func listQuickConnects(input: ListQuickConnectsInput) async throws -> ListQuickConnectsOutputResponse
    {
        typealias listQuickConnectsContinuation = CheckedContinuation<ListQuickConnectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listQuickConnectsContinuation) in
            listQuickConnects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the queues associated with a routing profile.</p>
    func listRoutingProfileQueues(input: ListRoutingProfileQueuesInput) async throws -> ListRoutingProfileQueuesOutputResponse
    {
        typealias listRoutingProfileQueuesContinuation = CheckedContinuation<ListRoutingProfileQueuesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRoutingProfileQueuesContinuation) in
            listRoutingProfileQueues(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides summary information about the routing profiles for the specified Amazon Connect
    ///    instance.</p>
    ///          <p>For more information about routing profiles, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing.html">Routing Profiles</a> and <a href="https://docs.aws.amazon.com/connect/latest/adminguide/routing-profiles.html">Create a Routing
    ///     Profile</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    func listRoutingProfiles(input: ListRoutingProfilesInput) async throws -> ListRoutingProfilesOutputResponse
    {
        typealias listRoutingProfilesContinuation = CheckedContinuation<ListRoutingProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRoutingProfilesContinuation) in
            listRoutingProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Returns a paginated list of all security keys associated with the instance.</p>
    func listSecurityKeys(input: ListSecurityKeysInput) async throws -> ListSecurityKeysOutputResponse
    {
        typealias listSecurityKeysContinuation = CheckedContinuation<ListSecurityKeysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSecurityKeysContinuation) in
            listSecurityKeys(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides summary information about the security profiles for the specified Amazon Connect
    ///    instance.</p>
    ///          <p>For more information about security profiles, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/connect-security-profiles.html">Security Profiles</a> in the
    ///     <i>Amazon Connect Administrator Guide</i>.</p>
    func listSecurityProfiles(input: ListSecurityProfilesInput) async throws -> ListSecurityProfilesOutputResponse
    {
        typealias listSecurityProfilesContinuation = CheckedContinuation<ListSecurityProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSecurityProfilesContinuation) in
            listSecurityProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the tags for the specified resource.</p>
    ///          <p>For sample policies that use tags, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/security_iam_id-based-policy-examples.html">Amazon Connect Identity-Based
    ///     Policy Examples</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the use cases. </p>
    func listUseCases(input: ListUseCasesInput) async throws -> ListUseCasesOutputResponse
    {
        typealias listUseCasesContinuation = CheckedContinuation<ListUseCasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUseCasesContinuation) in
            listUseCases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides summary information about the hierarchy groups for the specified Amazon Connect
    ///    instance.</p>
    ///          <p>For more information about agent hierarchies, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/agent-hierarchy.html">Set Up Agent Hierarchies</a> in the
    ///     <i>Amazon Connect Administrator Guide</i>.</p>
    func listUserHierarchyGroups(input: ListUserHierarchyGroupsInput) async throws -> ListUserHierarchyGroupsOutputResponse
    {
        typealias listUserHierarchyGroupsContinuation = CheckedContinuation<ListUserHierarchyGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUserHierarchyGroupsContinuation) in
            listUserHierarchyGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides summary information about the users for the specified Amazon Connect instance.</p>
    func listUsers(input: ListUsersInput) async throws -> ListUsersOutputResponse
    {
        typealias listUsersContinuation = CheckedContinuation<ListUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUsersContinuation) in
            listUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>When a contact is being recorded, and the recording has been suspended using
    ///    SuspendContactRecording, this API resumes recording the call.</p>
    ///
    ///          <p>Only voice recordings are supported at this time.</p>
    func resumeContactRecording(input: ResumeContactRecordingInput) async throws -> ResumeContactRecordingOutputResponse
    {
        typealias resumeContactRecordingContinuation = CheckedContinuation<ResumeContactRecordingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resumeContactRecordingContinuation) in
            resumeContactRecording(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Initiates a contact flow to start a new chat for the customer. Response of this API provides
    ///    a token required to obtain credentials from the <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html">CreateParticipantConnection</a> API in the Amazon Connect Participant Service.</p>
    ///
    ///          <p>When a new chat contact is successfully created, clients must subscribe to the participant’s
    ///    connection for the created chat within 5 minutes. This is achieved by invoking <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html">CreateParticipantConnection</a> with WEBSOCKET and CONNECTION_CREDENTIALS. </p>
    ///
    ///          <p>A 429 error occurs in two situations:</p>
    ///          <ul>
    ///             <li>
    ///                <p>API rate limit is exceeded. API TPS throttling returns a <code>TooManyRequests</code>
    ///      exception.</p>
    ///             </li>
    ///             <li>
    ///                <p>The <a href="https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html">quota for concurrent active
    ///       chats</a> is exceeded. Active chat throttling returns a
    ///       <code>LimitExceededException</code>.</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p>For more information about chat, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/chat.html">Chat</a> in the <i>Amazon Connect Administrator
    ///     Guide</i>.</p>
    func startChatContact(input: StartChatContactInput) async throws -> StartChatContactOutputResponse
    {
        typealias startChatContactContinuation = CheckedContinuation<StartChatContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startChatContactContinuation) in
            startChatContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Starts recording the contact when the agent joins the call. StartContactRecording is a
    ///    one-time action. For example, if you use StopContactRecording to stop recording an ongoing call,
    ///    you can't use StartContactRecording to restart it. For scenarios where the recording has started
    ///    and you want to suspend and resume it, such as when collecting sensitive information (for
    ///    example, a credit card number), use SuspendContactRecording and ResumeContactRecording.</p>
    ///          <p>You can use this API to override the recording behavior configured in the <a href="https://docs.aws.amazon.com/connect/latest/adminguide/set-recording-behavior.html">Set recording
    ///     behavior</a> block.</p>
    ///          <p>Only voice recordings are supported at this time.</p>
    func startContactRecording(input: StartContactRecordingInput) async throws -> StartContactRecordingOutputResponse
    {
        typealias startContactRecordingContinuation = CheckedContinuation<StartContactRecordingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startContactRecordingContinuation) in
            startContactRecording(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Places an outbound call to a contact, and then initiates the contact flow. It performs the
    ///    actions in the contact flow that's specified (in <code>ContactFlowId</code>).</p>
    ///
    ///          <p>Agents do not initiate the outbound API, which means that they do not dial the contact. If
    ///    the contact flow places an outbound call to a contact, and then puts the contact in queue, the
    ///    call is then routed to the agent, like any other inbound case.</p>
    ///
    ///          <p>There is a 60-second dialing timeout for this operation. If the call is not connected after
    ///    60 seconds, it fails.</p>
    ///          <note>
    ///             <p>UK numbers with a 447 prefix are not allowed by default. Before you can dial these UK
    ///     mobile numbers, you must submit a service quota increase request. For more information, see
    ///      <a href="https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html">Amazon Connect Service Quotas</a> in the <i>Amazon Connect Administrator Guide</i>. </p>
    ///          </note>
    func startOutboundVoiceContact(input: StartOutboundVoiceContactInput) async throws -> StartOutboundVoiceContactOutputResponse
    {
        typealias startOutboundVoiceContactContinuation = CheckedContinuation<StartOutboundVoiceContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startOutboundVoiceContactContinuation) in
            startOutboundVoiceContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Initiates a contact flow to start a new task.</p>
    func startTaskContact(input: StartTaskContactInput) async throws -> StartTaskContactOutputResponse
    {
        typealias startTaskContactContinuation = CheckedContinuation<StartTaskContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startTaskContactContinuation) in
            startTaskContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Ends the specified contact.</p>
    func stopContact(input: StopContactInput) async throws -> StopContactOutputResponse
    {
        typealias stopContactContinuation = CheckedContinuation<StopContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopContactContinuation) in
            stopContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Stops recording a call when a contact is being recorded. StopContactRecording is a one-time
    ///    action. If you use StopContactRecording to stop recording an ongoing call, you can't use
    ///    StartContactRecording to restart it. For scenarios where the recording has started and you want
    ///    to suspend it for sensitive information (for example, to collect a credit card number), and then
    ///    restart it, use SuspendContactRecording and ResumeContactRecording.</p>
    ///
    ///          <p>Only voice recordings are supported at this time.</p>
    func stopContactRecording(input: StopContactRecordingInput) async throws -> StopContactRecordingOutputResponse
    {
        typealias stopContactRecordingContinuation = CheckedContinuation<StopContactRecordingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopContactRecordingContinuation) in
            stopContactRecording(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>When a contact is being recorded, this API suspends recording the call. For example, you
    ///    might suspend the call recording while collecting sensitive information, such as a credit card
    ///    number. Then use ResumeContactRecording to restart recording. </p>
    ///          <p>The period of time that the recording is suspended is filled with silence in the final
    ///    recording. </p>
    ///          <p>Only voice recordings are supported at this time.</p>
    func suspendContactRecording(input: SuspendContactRecordingInput) async throws -> SuspendContactRecordingOutputResponse
    {
        typealias suspendContactRecordingContinuation = CheckedContinuation<SuspendContactRecordingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: suspendContactRecordingContinuation) in
            suspendContactRecording(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds the specified tags to the specified resource.</p>
    ///          <p>The supported resource types are users, routing profiles, queues, quick connects, and
    ///    contact flows.</p>
    ///          <p>For sample policies that use tags, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/security_iam_id-based-policy-examples.html">Amazon Connect Identity-Based
    ///     Policy Examples</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the specified tags from the specified resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates or updates
    ///    user-defined contact attributes
    ///    associated with the specified contact.</p>
    ///          <p>You can create or update user-defined attributes for both ongoing and completed contacts.
    ///    For example, while the call is active, you can update the customer's name or the reason the
    ///    customer called. You can add notes about steps that the agent took during the call that display
    ///    to the next agent that takes the call. You can also update attributes for a contact using data
    ///    from your CRM application and save the data with the contact in Amazon Connect. You could also flag calls
    ///    for additional analysis, such as legal review or to identify abusive callers.</p>
    ///          <p>Contact attributes are available in Amazon Connect for 24 months, and are then deleted. For
    ///    information about CTR retention and the maximum size of the CTR attributes section, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits">Feature
    ///     specifications</a> in the <i>Amazon Connect Administrator Guide</i>. </p>
    ///
    ///          <p>
    ///             <b>Important:</b> You cannot use the operation to update
    ///    attributes for contacts that occurred prior to the release of the API, which was September 12,
    ///    2018. You can update attributes only for contacts that started after the release of the API. If
    ///    you attempt to update attributes for a contact that occurred prior to the release of the API, a
    ///    400 error is returned. This applies also to queued callbacks that were initiated prior to the
    ///    release of the API but are still active in your instance.</p>
    func updateContactAttributes(input: UpdateContactAttributesInput) async throws -> UpdateContactAttributesOutputResponse
    {
        typealias updateContactAttributesContinuation = CheckedContinuation<UpdateContactAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateContactAttributesContinuation) in
            updateContactAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the specified contact flow.</p>
    ///          <p>You can also create and update contact flows using the <a href="https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html">Amazon Connect
    ///    Flow language</a>.</p>
    func updateContactFlowContent(input: UpdateContactFlowContentInput) async throws -> UpdateContactFlowContentOutputResponse
    {
        typealias updateContactFlowContentContinuation = CheckedContinuation<UpdateContactFlowContentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateContactFlowContentContinuation) in
            updateContactFlowContent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>The name of the contact flow.</p>
    ///          <p>You can also create and update contact flows using the <a href="https://docs.aws.amazon.com/connect/latest/adminguide/flow-language.html">Amazon Connect
    ///    Flow language</a>.</p>
    func updateContactFlowName(input: UpdateContactFlowNameInput) async throws -> UpdateContactFlowNameOutputResponse
    {
        typealias updateContactFlowNameContinuation = CheckedContinuation<UpdateContactFlowNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateContactFlowNameContinuation) in
            updateContactFlowName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Updates the value for the specified attribute type.</p>
    func updateInstanceAttribute(input: UpdateInstanceAttributeInput) async throws -> UpdateInstanceAttributeOutputResponse
    {
        typealias updateInstanceAttributeContinuation = CheckedContinuation<UpdateInstanceAttributeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateInstanceAttributeContinuation) in
            updateInstanceAttribute(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Updates an existing configuration for a resource type. This API is idempotent.</p>
    func updateInstanceStorageConfig(input: UpdateInstanceStorageConfigInput) async throws -> UpdateInstanceStorageConfigOutputResponse
    {
        typealias updateInstanceStorageConfigContinuation = CheckedContinuation<UpdateInstanceStorageConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateInstanceStorageConfigContinuation) in
            updateInstanceStorageConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Updates the hours of operation for the specified queue.</p>
    func updateQueueHoursOfOperation(input: UpdateQueueHoursOfOperationInput) async throws -> UpdateQueueHoursOfOperationOutputResponse
    {
        typealias updateQueueHoursOfOperationContinuation = CheckedContinuation<UpdateQueueHoursOfOperationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateQueueHoursOfOperationContinuation) in
            updateQueueHoursOfOperation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Updates the maximum number of contacts allowed in a queue before it is considered
    ///    full.</p>
    func updateQueueMaxContacts(input: UpdateQueueMaxContactsInput) async throws -> UpdateQueueMaxContactsOutputResponse
    {
        typealias updateQueueMaxContactsContinuation = CheckedContinuation<UpdateQueueMaxContactsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateQueueMaxContactsContinuation) in
            updateQueueMaxContacts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Updates the name and description of a queue. At least <code>Name</code> or <code>Description</code> must be provided.</p>
    func updateQueueName(input: UpdateQueueNameInput) async throws -> UpdateQueueNameOutputResponse
    {
        typealias updateQueueNameContinuation = CheckedContinuation<UpdateQueueNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateQueueNameContinuation) in
            updateQueueName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Updates the outbound caller ID name, number, and outbound whisper flow for a specified
    ///    queue.</p>
    func updateQueueOutboundCallerConfig(input: UpdateQueueOutboundCallerConfigInput) async throws -> UpdateQueueOutboundCallerConfigOutputResponse
    {
        typealias updateQueueOutboundCallerConfigContinuation = CheckedContinuation<UpdateQueueOutboundCallerConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateQueueOutboundCallerConfigContinuation) in
            updateQueueOutboundCallerConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Updates the status of the queue.</p>
    func updateQueueStatus(input: UpdateQueueStatusInput) async throws -> UpdateQueueStatusOutputResponse
    {
        typealias updateQueueStatusContinuation = CheckedContinuation<UpdateQueueStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateQueueStatusContinuation) in
            updateQueueStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Updates the configuration settings for the specified quick connect.</p>
    func updateQuickConnectConfig(input: UpdateQuickConnectConfigInput) async throws -> UpdateQuickConnectConfigOutputResponse
    {
        typealias updateQuickConnectConfigContinuation = CheckedContinuation<UpdateQuickConnectConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateQuickConnectConfigContinuation) in
            updateQuickConnectConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This API is in preview release for Amazon Connect and is subject to change.</p>
    ///          <p>Updates the name and description of a quick connect. The request accepts the following data in JSON format. At least <code>Name</code> or <code>Description</code> must be provided.</p>
    func updateQuickConnectName(input: UpdateQuickConnectNameInput) async throws -> UpdateQuickConnectNameOutputResponse
    {
        typealias updateQuickConnectNameContinuation = CheckedContinuation<UpdateQuickConnectNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateQuickConnectNameContinuation) in
            updateQuickConnectName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the channels that agents can handle in the Contact Control Panel (CCP) for a routing
    ///    profile.</p>
    func updateRoutingProfileConcurrency(input: UpdateRoutingProfileConcurrencyInput) async throws -> UpdateRoutingProfileConcurrencyOutputResponse
    {
        typealias updateRoutingProfileConcurrencyContinuation = CheckedContinuation<UpdateRoutingProfileConcurrencyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRoutingProfileConcurrencyContinuation) in
            updateRoutingProfileConcurrency(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the default outbound queue of a routing profile.</p>
    func updateRoutingProfileDefaultOutboundQueue(input: UpdateRoutingProfileDefaultOutboundQueueInput) async throws -> UpdateRoutingProfileDefaultOutboundQueueOutputResponse
    {
        typealias updateRoutingProfileDefaultOutboundQueueContinuation = CheckedContinuation<UpdateRoutingProfileDefaultOutboundQueueOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRoutingProfileDefaultOutboundQueueContinuation) in
            updateRoutingProfileDefaultOutboundQueue(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the name and description of a routing profile. The request accepts the following data in JSON format.
    ///    At least <code>Name</code> or <code>Description</code> must be provided.</p>
    func updateRoutingProfileName(input: UpdateRoutingProfileNameInput) async throws -> UpdateRoutingProfileNameOutputResponse
    {
        typealias updateRoutingProfileNameContinuation = CheckedContinuation<UpdateRoutingProfileNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRoutingProfileNameContinuation) in
            updateRoutingProfileName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the properties associated with a set of queues for a routing profile.</p>
    func updateRoutingProfileQueues(input: UpdateRoutingProfileQueuesInput) async throws -> UpdateRoutingProfileQueuesOutputResponse
    {
        typealias updateRoutingProfileQueuesContinuation = CheckedContinuation<UpdateRoutingProfileQueuesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRoutingProfileQueuesContinuation) in
            updateRoutingProfileQueues(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Assigns the specified hierarchy group to the specified user.</p>
    func updateUserHierarchy(input: UpdateUserHierarchyInput) async throws -> UpdateUserHierarchyOutputResponse
    {
        typealias updateUserHierarchyContinuation = CheckedContinuation<UpdateUserHierarchyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserHierarchyContinuation) in
            updateUserHierarchy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the name of the user hierarchy group. </p>
    func updateUserHierarchyGroupName(input: UpdateUserHierarchyGroupNameInput) async throws -> UpdateUserHierarchyGroupNameOutputResponse
    {
        typealias updateUserHierarchyGroupNameContinuation = CheckedContinuation<UpdateUserHierarchyGroupNameOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserHierarchyGroupNameContinuation) in
            updateUserHierarchyGroupName(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the user hierarchy structure: add, remove, and rename user hierarchy levels.</p>
    func updateUserHierarchyStructure(input: UpdateUserHierarchyStructureInput) async throws -> UpdateUserHierarchyStructureOutputResponse
    {
        typealias updateUserHierarchyStructureContinuation = CheckedContinuation<UpdateUserHierarchyStructureOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserHierarchyStructureContinuation) in
            updateUserHierarchyStructure(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the identity information for the specified user.</p>
    ///          <important>
    ///             <p>We strongly recommend limiting who has the ability to invoke
    ///      <code>UpdateUserIdentityInfo</code>. Someone with that ability can change the login credentials
    ///     of other users by changing their email address. This poses a security risk to your organization.
    ///     They can change the email address of a user to the attacker's email address, and then reset the
    ///     password through email. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html">Best Practices for
    ///      Security Profiles</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    ///          </important>
    func updateUserIdentityInfo(input: UpdateUserIdentityInfoInput) async throws -> UpdateUserIdentityInfoOutputResponse
    {
        typealias updateUserIdentityInfoContinuation = CheckedContinuation<UpdateUserIdentityInfoOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserIdentityInfoContinuation) in
            updateUserIdentityInfo(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the phone configuration settings for the specified user.</p>
    func updateUserPhoneConfig(input: UpdateUserPhoneConfigInput) async throws -> UpdateUserPhoneConfigOutputResponse
    {
        typealias updateUserPhoneConfigContinuation = CheckedContinuation<UpdateUserPhoneConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserPhoneConfigContinuation) in
            updateUserPhoneConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Assigns the specified routing profile to the specified user.</p>
    func updateUserRoutingProfile(input: UpdateUserRoutingProfileInput) async throws -> UpdateUserRoutingProfileOutputResponse
    {
        typealias updateUserRoutingProfileContinuation = CheckedContinuation<UpdateUserRoutingProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserRoutingProfileContinuation) in
            updateUserRoutingProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Assigns the specified security profiles to the specified user.</p>
    func updateUserSecurityProfiles(input: UpdateUserSecurityProfilesInput) async throws -> UpdateUserSecurityProfilesOutputResponse
    {
        typealias updateUserSecurityProfilesContinuation = CheckedContinuation<UpdateUserSecurityProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserSecurityProfilesContinuation) in
            updateUserSecurityProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
