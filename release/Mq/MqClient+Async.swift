// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension MqClient {
    /// Creates a broker. Note: This API is asynchronous.
    func createBroker(input: CreateBrokerInput) async throws -> CreateBrokerOutputResponse
    {
        typealias createBrokerContinuation = CheckedContinuation<CreateBrokerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBrokerContinuation) in
            createBroker(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).
    func createConfiguration(input: CreateConfigurationInput) async throws -> CreateConfigurationOutputResponse
    {
        typealias createConfigurationContinuation = CheckedContinuation<CreateConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConfigurationContinuation) in
            createConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Add a tag to a resource.
    func createTags(input: CreateTagsInput) async throws -> CreateTagsOutputResponse
    {
        typealias createTagsContinuation = CheckedContinuation<CreateTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTagsContinuation) in
            createTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an ActiveMQ user.
    func createUser(input: CreateUserInput) async throws -> CreateUserOutputResponse
    {
        typealias createUserContinuation = CheckedContinuation<CreateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserContinuation) in
            createUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a broker. Note: This API is asynchronous.
    func deleteBroker(input: DeleteBrokerInput) async throws -> DeleteBrokerOutputResponse
    {
        typealias deleteBrokerContinuation = CheckedContinuation<DeleteBrokerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBrokerContinuation) in
            deleteBroker(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a tag from a resource.
    func deleteTags(input: DeleteTagsInput) async throws -> DeleteTagsOutputResponse
    {
        typealias deleteTagsContinuation = CheckedContinuation<DeleteTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTagsContinuation) in
            deleteTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an ActiveMQ user.
    func deleteUser(input: DeleteUserInput) async throws -> DeleteUserOutputResponse
    {
        typealias deleteUserContinuation = CheckedContinuation<DeleteUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserContinuation) in
            deleteUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the specified broker.
    func describeBroker(input: DescribeBrokerInput) async throws -> DescribeBrokerOutputResponse
    {
        typealias describeBrokerContinuation = CheckedContinuation<DescribeBrokerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeBrokerContinuation) in
            describeBroker(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe available engine types and versions.
    func describeBrokerEngineTypes(input: DescribeBrokerEngineTypesInput) async throws -> DescribeBrokerEngineTypesOutputResponse
    {
        typealias describeBrokerEngineTypesContinuation = CheckedContinuation<DescribeBrokerEngineTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeBrokerEngineTypesContinuation) in
            describeBrokerEngineTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe available broker instance options.
    func describeBrokerInstanceOptions(input: DescribeBrokerInstanceOptionsInput) async throws -> DescribeBrokerInstanceOptionsOutputResponse
    {
        typealias describeBrokerInstanceOptionsContinuation = CheckedContinuation<DescribeBrokerInstanceOptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeBrokerInstanceOptionsContinuation) in
            describeBrokerInstanceOptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the specified configuration.
    func describeConfiguration(input: DescribeConfigurationInput) async throws -> DescribeConfigurationOutputResponse
    {
        typealias describeConfigurationContinuation = CheckedContinuation<DescribeConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeConfigurationContinuation) in
            describeConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the specified configuration revision for the specified configuration.
    func describeConfigurationRevision(input: DescribeConfigurationRevisionInput) async throws -> DescribeConfigurationRevisionOutputResponse
    {
        typealias describeConfigurationRevisionContinuation = CheckedContinuation<DescribeConfigurationRevisionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeConfigurationRevisionContinuation) in
            describeConfigurationRevision(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about an ActiveMQ user.
    func describeUser(input: DescribeUserInput) async throws -> DescribeUserOutputResponse
    {
        typealias describeUserContinuation = CheckedContinuation<DescribeUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserContinuation) in
            describeUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all brokers.
    func listBrokers(input: ListBrokersInput) async throws -> ListBrokersOutputResponse
    {
        typealias listBrokersContinuation = CheckedContinuation<ListBrokersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBrokersContinuation) in
            listBrokers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all revisions for the specified configuration.
    func listConfigurationRevisions(input: ListConfigurationRevisionsInput) async throws -> ListConfigurationRevisionsOutputResponse
    {
        typealias listConfigurationRevisionsContinuation = CheckedContinuation<ListConfigurationRevisionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConfigurationRevisionsContinuation) in
            listConfigurationRevisions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all configurations.
    func listConfigurations(input: ListConfigurationsInput) async throws -> ListConfigurationsOutputResponse
    {
        typealias listConfigurationsContinuation = CheckedContinuation<ListConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listConfigurationsContinuation) in
            listConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists tags for a resource.
    func listTags(input: ListTagsInput) async throws -> ListTagsOutputResponse
    {
        typealias listTagsContinuation = CheckedContinuation<ListTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsContinuation) in
            listTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of all ActiveMQ users.
    func listUsers(input: ListUsersInput) async throws -> ListUsersOutputResponse
    {
        typealias listUsersContinuation = CheckedContinuation<ListUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUsersContinuation) in
            listUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Reboots a broker. Note: This API is asynchronous.
    func rebootBroker(input: RebootBrokerInput) async throws -> RebootBrokerOutputResponse
    {
        typealias rebootBrokerContinuation = CheckedContinuation<RebootBrokerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rebootBrokerContinuation) in
            rebootBroker(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a pending configuration change to a broker.
    func updateBroker(input: UpdateBrokerInput) async throws -> UpdateBrokerOutputResponse
    {
        typealias updateBrokerContinuation = CheckedContinuation<UpdateBrokerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBrokerContinuation) in
            updateBroker(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified configuration.
    func updateConfiguration(input: UpdateConfigurationInput) async throws -> UpdateConfigurationOutputResponse
    {
        typealias updateConfigurationContinuation = CheckedContinuation<UpdateConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConfigurationContinuation) in
            updateConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the information for an ActiveMQ user.
    func updateUser(input: UpdateUserInput) async throws -> UpdateUserOutputResponse
    {
        typealias updateUserContinuation = CheckedContinuation<UpdateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserContinuation) in
            updateUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
