// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifyReplicationGroupShardConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyReplicationGroupShardConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>
    public typealias MOutput = OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationGroupShardConfigurationOutputError>
}

public struct ModifyReplicationGroupShardConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyReplicationGroupShardConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>
    public typealias MOutput = OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationGroupShardConfigurationOutputError>
}

public struct ModifyReplicationGroupShardConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "ModifyReplicationGroupShardConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyReplicationGroupShardConfigurationInput>
    public typealias MOutput = OperationOutput<ModifyReplicationGroupShardConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyReplicationGroupShardConfigurationOutputError>
}

extension ModifyReplicationGroupShardConfigurationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if nodeGroupCount != 0 {
            try container.encode(nodeGroupCount, forKey: Key("NodeGroupCount"))
        }
        if let nodeGroupsToRemove = nodeGroupsToRemove {
            var nodeGroupsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NodeGroupsToRemove"))
            for (index0, allowednodegroupid0) in nodeGroupsToRemove.enumerated() {
                try nodeGroupsToRemoveContainer.encode(allowednodegroupid0, forKey: Key("NodeGroupToRemove.\(index0.advanced(by: 1))"))
            }
        }
        if let nodeGroupsToRetain = nodeGroupsToRetain {
            var nodeGroupsToRetainContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("NodeGroupsToRetain"))
            for (index0, allowednodegroupid0) in nodeGroupsToRetain.enumerated() {
                try nodeGroupsToRetainContainer.encode(allowednodegroupid0, forKey: Key("NodeGroupToRetain.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        if let reshardingConfiguration = reshardingConfiguration {
            var reshardingConfigurationContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReshardingConfiguration"))
            for (index0, reshardingconfiguration0) in reshardingConfiguration.enumerated() {
                try reshardingConfigurationContainer.encode(reshardingconfiguration0, forKey: Key("ReshardingConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ModifyReplicationGroupShardConfiguration", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}
