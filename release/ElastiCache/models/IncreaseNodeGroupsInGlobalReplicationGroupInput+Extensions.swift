// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct IncreaseNodeGroupsInGlobalReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "IncreaseNodeGroupsInGlobalReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

public struct IncreaseNodeGroupsInGlobalReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "IncreaseNodeGroupsInGlobalReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

public struct IncreaseNodeGroupsInGlobalReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "IncreaseNodeGroupsInGlobalReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<IncreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

extension IncreaseNodeGroupsInGlobalReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if nodeGroupCount != 0 {
            try container.encode(nodeGroupCount, forKey: Key("NodeGroupCount"))
        }
        if let regionalConfigurations = regionalConfigurations {
            var regionalConfigurationsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("RegionalConfigurations"))
            for (index0, regionalconfiguration0) in regionalConfigurations.enumerated() {
                try regionalConfigurationsContainer.encode(regionalconfiguration0, forKey: Key("RegionalConfiguration.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("IncreaseNodeGroupsInGlobalReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}
