// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DecreaseNodeGroupsInGlobalReplicationGroupInputHeadersMiddleware: Middleware {
    public let id: String = "DecreaseNodeGroupsInGlobalReplicationGroupInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DecreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

public struct DecreaseNodeGroupsInGlobalReplicationGroupInputQueryItemMiddleware: Middleware {
    public let id: String = "DecreaseNodeGroupsInGlobalReplicationGroupInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DecreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

public struct DecreaseNodeGroupsInGlobalReplicationGroupInputBodyMiddleware: Middleware {
    public let id: String = "DecreaseNodeGroupsInGlobalReplicationGroupInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>,
                  next: H) -> Swift.Result<OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DecreaseNodeGroupsInGlobalReplicationGroupInput>
    public typealias MOutput = OperationOutput<DecreaseNodeGroupsInGlobalReplicationGroupOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DecreaseNodeGroupsInGlobalReplicationGroupOutputError>
}

extension DecreaseNodeGroupsInGlobalReplicationGroupInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let globalNodeGroupsToRemove = globalNodeGroupsToRemove {
            var globalNodeGroupsToRemoveContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("GlobalNodeGroupsToRemove"))
            for (index0, string0) in globalNodeGroupsToRemove.enumerated() {
                try globalNodeGroupsToRemoveContainer.encode(string0, forKey: Key("GlobalNodeGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let globalNodeGroupsToRetain = globalNodeGroupsToRetain {
            var globalNodeGroupsToRetainContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("GlobalNodeGroupsToRetain"))
            for (index0, string0) in globalNodeGroupsToRetain.enumerated() {
                try globalNodeGroupsToRetainContainer.encode(string0, forKey: Key("GlobalNodeGroupId.\(index0.advanced(by: 1))"))
            }
        }
        if let globalReplicationGroupId = globalReplicationGroupId {
            try container.encode(globalReplicationGroupId, forKey: Key("GlobalReplicationGroupId"))
        }
        if nodeGroupCount != 0 {
            try container.encode(nodeGroupCount, forKey: Key("NodeGroupCount"))
        }
        try container.encode("DecreaseNodeGroupsInGlobalReplicationGroup", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}
