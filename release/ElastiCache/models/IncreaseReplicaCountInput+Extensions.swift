// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct IncreaseReplicaCountInputHeadersMiddleware: Middleware {
    public let id: String = "IncreaseReplicaCountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseReplicaCountInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseReplicaCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseReplicaCountInput>
    public typealias MOutput = OperationOutput<IncreaseReplicaCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseReplicaCountOutputError>
}

public struct IncreaseReplicaCountInputQueryItemMiddleware: Middleware {
    public let id: String = "IncreaseReplicaCountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseReplicaCountInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseReplicaCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseReplicaCountInput>
    public typealias MOutput = OperationOutput<IncreaseReplicaCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseReplicaCountOutputError>
}

public struct IncreaseReplicaCountInputBodyMiddleware: Middleware {
    public let id: String = "IncreaseReplicaCountInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IncreaseReplicaCountInput>,
                  next: H) -> Swift.Result<OperationOutput<IncreaseReplicaCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IncreaseReplicaCountInput>
    public typealias MOutput = OperationOutput<IncreaseReplicaCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IncreaseReplicaCountOutputError>
}

extension IncreaseReplicaCountInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if applyImmediately != false {
            try container.encode(applyImmediately, forKey: Key("ApplyImmediately"))
        }
        if let newReplicaCount = newReplicaCount {
            try container.encode(newReplicaCount, forKey: Key("NewReplicaCount"))
        }
        if let replicaConfiguration = replicaConfiguration {
            var replicaConfigurationContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ReplicaConfiguration"))
            for (index0, configureshard0) in replicaConfiguration.enumerated() {
                try replicaConfigurationContainer.encode(configureshard0, forKey: Key("ConfigureShard.\(index0.advanced(by: 1))"))
            }
        }
        if let replicationGroupId = replicationGroupId {
            try container.encode(replicationGroupId, forKey: Key("ReplicationGroupId"))
        }
        try container.encode("IncreaseReplicaCount", forKey:Key("Action"))
        try container.encode("2015-02-02", forKey:Key("Version"))
    }
}
