// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AmplifyUiBuilderClient {
    /// Creates a new component for an Amplify app.
    func createComponent(input: CreateComponentInput) async throws -> CreateComponentOutputResponse
    {
        typealias createComponentContinuation = CheckedContinuation<CreateComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createComponentContinuation) in
            createComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a theme to apply to the components in an Amplify app.
    func createTheme(input: CreateThemeInput) async throws -> CreateThemeOutputResponse
    {
        typealias createThemeContinuation = CheckedContinuation<CreateThemeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createThemeContinuation) in
            createTheme(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a component from an Amplify app.
    func deleteComponent(input: DeleteComponentInput) async throws -> DeleteComponentOutputResponse
    {
        typealias deleteComponentContinuation = CheckedContinuation<DeleteComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteComponentContinuation) in
            deleteComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a theme from an Amplify app.
    func deleteTheme(input: DeleteThemeInput) async throws -> DeleteThemeOutputResponse
    {
        typealias deleteThemeContinuation = CheckedContinuation<DeleteThemeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteThemeContinuation) in
            deleteTheme(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Exchanges an access code for a token.
    func exchangeCodeForToken(input: ExchangeCodeForTokenInput) async throws -> ExchangeCodeForTokenOutputResponse
    {
        typealias exchangeCodeForTokenContinuation = CheckedContinuation<ExchangeCodeForTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exchangeCodeForTokenContinuation) in
            exchangeCodeForToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Exports component configurations to code that is ready to integrate into an Amplify app.
    func exportComponents(input: ExportComponentsInput) async throws -> ExportComponentsOutputResponse
    {
        typealias exportComponentsContinuation = CheckedContinuation<ExportComponentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportComponentsContinuation) in
            exportComponents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Exports theme configurations to code that is ready to integrate into an Amplify app.
    func exportThemes(input: ExportThemesInput) async throws -> ExportThemesOutputResponse
    {
        typealias exportThemesContinuation = CheckedContinuation<ExportThemesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportThemesContinuation) in
            exportThemes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns an existing component for an Amplify app.
    func getComponent(input: GetComponentInput) async throws -> GetComponentOutputResponse
    {
        typealias getComponentContinuation = CheckedContinuation<GetComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getComponentContinuation) in
            getComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns an existing theme for an Amplify app.
    func getTheme(input: GetThemeInput) async throws -> GetThemeOutputResponse
    {
        typealias getThemeContinuation = CheckedContinuation<GetThemeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getThemeContinuation) in
            getTheme(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of components for a specified Amplify app and backend environment.
    func listComponents(input: ListComponentsInput) async throws -> ListComponentsOutputResponse
    {
        typealias listComponentsContinuation = CheckedContinuation<ListComponentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listComponentsContinuation) in
            listComponents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of themes for a specified Amplify app and backend environment.
    func listThemes(input: ListThemesInput) async throws -> ListThemesOutputResponse
    {
        typealias listThemesContinuation = CheckedContinuation<ListThemesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listThemesContinuation) in
            listThemes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Refreshes a previously issued access token that might have expired.
    func refreshToken(input: RefreshTokenInput) async throws -> RefreshTokenOutputResponse
    {
        typealias refreshTokenContinuation = CheckedContinuation<RefreshTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: refreshTokenContinuation) in
            refreshToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing component.
    func updateComponent(input: UpdateComponentInput) async throws -> UpdateComponentOutputResponse
    {
        typealias updateComponentContinuation = CheckedContinuation<UpdateComponentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateComponentContinuation) in
            updateComponent(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing theme.
    func updateTheme(input: UpdateThemeInput) async throws -> UpdateThemeOutputResponse
    {
        typealias updateThemeContinuation = CheckedContinuation<UpdateThemeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateThemeContinuation) in
            updateTheme(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
