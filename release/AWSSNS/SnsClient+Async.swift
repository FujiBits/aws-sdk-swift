// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension SnsClient {
    /// Adds a statement to a topic's access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.
    func addPermission(input: AddPermissionInput) async throws -> AddPermissionOutputResponse
    {
        typealias addPermissionContinuation = CheckedContinuation<AddPermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addPermissionContinuation) in
            addPermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out. To resume sending messages, you can opt in the number by using the OptInPhoneNumber action.
    func checkIfPhoneNumberIsOptedOut(input: CheckIfPhoneNumberIsOptedOutInput) async throws -> CheckIfPhoneNumberIsOptedOutOutputResponse
    {
        typealias checkIfPhoneNumberIsOptedOutContinuation = CheckedContinuation<CheckIfPhoneNumberIsOptedOutOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: checkIfPhoneNumberIsOptedOutContinuation) in
            checkIfPhoneNumberIsOptedOut(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Verifies an endpoint owner's intent to receive messages by validating the token sent to the endpoint by an earlier Subscribe action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the AuthenticateOnUnsubscribe flag is set to "true".
    func confirmSubscription(input: ConfirmSubscriptionInput) async throws -> ConfirmSubscriptionOutputResponse
    {
        typealias confirmSubscriptionContinuation = CheckedContinuation<ConfirmSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: confirmSubscriptionContinuation) in
            confirmSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify PlatformPrincipal and PlatformCredential attributes when using the CreatePlatformApplication action. PlatformPrincipal and PlatformCredential are received from the notification service.
    ///
    /// * For ADM, PlatformPrincipal is client id and PlatformCredential is client secret.
    ///
    /// * For Baidu, PlatformPrincipal is API key and PlatformCredential is secret key.
    ///
    /// * For APNS and APNS_SANDBOX using certificate credentials, PlatformPrincipal is SSL certificate and PlatformCredential is private key.
    ///
    /// * For APNS and APNS_SANDBOX using token credentials, PlatformPrincipal is signing key ID and PlatformCredential is signing key.
    ///
    /// * For GCM (Firebase Cloud Messaging), there is no PlatformPrincipal and the PlatformCredential is API key.
    ///
    /// * For MPNS, PlatformPrincipal is TLS certificate and PlatformCredential is private key.
    ///
    /// * For WNS, PlatformPrincipal is Package Security Identifier and PlatformCredential is secret key.
    ///
    ///
    /// You can use the returned PlatformApplicationArn as an attribute for the CreatePlatformEndpoint action.
    func createPlatformApplication(input: CreatePlatformApplicationInput) async throws -> CreatePlatformApplicationOutputResponse
    {
        typealias createPlatformApplicationContinuation = CheckedContinuation<CreatePlatformApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPlatformApplicationContinuation) in
            createPlatformApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. CreatePlatformEndpoint requires the PlatformApplicationArn that is returned from CreatePlatformApplication. You can use the returned EndpointArn to send a message to a mobile app or by the Subscribe action for subscription to a topic. The CreatePlatformEndpoint action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint's ARN is returned without creating a new endpoint. For more information, see [Using Amazon SNS Mobile Push Notifications](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html). When using CreatePlatformEndpoint with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see [Creating an Amazon SNS Endpoint for Baidu](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePushBaiduEndpoint.html).
    func createPlatformEndpoint(input: CreatePlatformEndpointInput) async throws -> CreatePlatformEndpointOutputResponse
    {
        typealias createPlatformEndpointContinuation = CheckedContinuation<CreatePlatformEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPlatformEndpointContinuation) in
            createPlatformEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see [SMS sandbox](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) in the Amazon SNS Developer Guide.
    func createSMSSandboxPhoneNumber(input: CreateSMSSandboxPhoneNumberInput) async throws -> CreateSMSSandboxPhoneNumberOutputResponse
    {
        typealias createSMSSandboxPhoneNumberContinuation = CheckedContinuation<CreateSMSSandboxPhoneNumberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSMSSandboxPhoneNumberContinuation) in
            createSMSSandboxPhoneNumber(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see [Creating an Amazon SNS topic](https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html) in the Amazon SNS Developer Guide. This action is idempotent, so if the requester already owns a topic with the specified name, that topic's ARN is returned without creating a new topic.
    func createTopic(input: CreateTopicInput) async throws -> CreateTopicOutputResponse
    {
        typealias createTopicContinuation = CheckedContinuation<CreateTopicOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTopicContinuation) in
            createTopic(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see [Using Amazon SNS Mobile Push Notifications](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html). When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.
    func deleteEndpoint(input: DeleteEndpointInput) async throws -> DeleteEndpointOutputResponse
    {
        typealias deleteEndpointContinuation = CheckedContinuation<DeleteEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEndpointContinuation) in
            deleteEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see [Using Amazon SNS Mobile Push Notifications](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html).
    func deletePlatformApplication(input: DeletePlatformApplicationInput) async throws -> DeletePlatformApplicationOutputResponse
    {
        typealias deletePlatformApplicationContinuation = CheckedContinuation<DeletePlatformApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePlatformApplicationContinuation) in
            deletePlatformApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an Amazon Web Services account's verified or pending phone number from the SMS sandbox. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see [SMS sandbox](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) in the Amazon SNS Developer Guide.
    func deleteSMSSandboxPhoneNumber(input: DeleteSMSSandboxPhoneNumberInput) async throws -> DeleteSMSSandboxPhoneNumberOutputResponse
    {
        typealias deleteSMSSandboxPhoneNumberContinuation = CheckedContinuation<DeleteSMSSandboxPhoneNumberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSMSSandboxPhoneNumberContinuation) in
            deleteSMSSandboxPhoneNumber(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
    func deleteTopic(input: DeleteTopicInput) async throws -> DeleteTopicOutputResponse
    {
        typealias deleteTopicContinuation = CheckedContinuation<DeleteTopicOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTopicContinuation) in
            deleteTopic(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see [Using Amazon SNS Mobile Push Notifications](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html).
    func getEndpointAttributes(input: GetEndpointAttributesInput) async throws -> GetEndpointAttributesOutputResponse
    {
        typealias getEndpointAttributesContinuation = CheckedContinuation<GetEndpointAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEndpointAttributesContinuation) in
            getEndpointAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see [Using Amazon SNS Mobile Push Notifications](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html).
    func getPlatformApplicationAttributes(input: GetPlatformApplicationAttributesInput) async throws -> GetPlatformApplicationAttributesOutputResponse
    {
        typealias getPlatformApplicationAttributesContinuation = CheckedContinuation<GetPlatformApplicationAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPlatformApplicationAttributesContinuation) in
            getPlatformApplicationAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the settings for sending SMS messages from your Amazon Web Services account. These settings are set with the SetSMSAttributes action.
    func getSMSAttributes(input: GetSMSAttributesInput) async throws -> GetSMSAttributesOutputResponse
    {
        typealias getSMSAttributesContinuation = CheckedContinuation<GetSMSAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSMSAttributesContinuation) in
            getSMSAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see [SMS sandbox](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) in the Amazon SNS Developer Guide.
    func getSMSSandboxAccountStatus(input: GetSMSSandboxAccountStatusInput) async throws -> GetSMSSandboxAccountStatusOutputResponse
    {
        typealias getSMSSandboxAccountStatusContinuation = CheckedContinuation<GetSMSSandboxAccountStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSMSSandboxAccountStatusContinuation) in
            getSMSSandboxAccountStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns all of the properties of a subscription.
    func getSubscriptionAttributes(input: GetSubscriptionAttributesInput) async throws -> GetSubscriptionAttributesOutputResponse
    {
        typealias getSubscriptionAttributesContinuation = CheckedContinuation<GetSubscriptionAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSubscriptionAttributesContinuation) in
            getSubscriptionAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
    func getTopicAttributes(input: GetTopicAttributesInput) async throws -> GetTopicAttributesOutputResponse
    {
        typealias getTopicAttributesContinuation = CheckedContinuation<GetTopicAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTopicAttributesContinuation) in
            getTopicAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for ListEndpointsByPlatformApplication are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call ListEndpointsByPlatformApplication again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see [Using Amazon SNS Mobile Push Notifications](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html). This action is throttled at 30 transactions per second (TPS).
    func listEndpointsByPlatformApplication(input: ListEndpointsByPlatformApplicationInput) async throws -> ListEndpointsByPlatformApplicationOutputResponse
    {
        typealias listEndpointsByPlatformApplicationContinuation = CheckedContinuation<ListEndpointsByPlatformApplicationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEndpointsByPlatformApplicationContinuation) in
            listEndpointsByPlatformApplication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the calling Amazon Web Services account's dedicated origination numbers and their metadata. For more information about origination numbers, see [Origination numbers](https://docs.aws.amazon.com/sns/latest/dg/channels-sms-originating-identities-origination-numbers.html) in the Amazon SNS Developer Guide.
    func listOriginationNumbers(input: ListOriginationNumbersInput) async throws -> ListOriginationNumbersOutputResponse
    {
        typealias listOriginationNumbersContinuation = CheckedContinuation<ListOriginationNumbersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOriginationNumbersContinuation) in
            listOriginationNumbers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them. The results for ListPhoneNumbersOptedOut are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a NextToken string will be returned. To receive the next page, you call ListPhoneNumbersOptedOut again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null.
    func listPhoneNumbersOptedOut(input: ListPhoneNumbersOptedOutInput) async throws -> ListPhoneNumbersOptedOutOutputResponse
    {
        typealias listPhoneNumbersOptedOutContinuation = CheckedContinuation<ListPhoneNumbersOptedOutOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPhoneNumbersOptedOutContinuation) in
            listPhoneNumbersOptedOut(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for ListPlatformApplications are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call ListPlatformApplications using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see [Using Amazon SNS Mobile Push Notifications](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html). This action is throttled at 15 transactions per second (TPS).
    func listPlatformApplications(input: ListPlatformApplicationsInput) async throws -> ListPlatformApplicationsOutputResponse
    {
        typealias listPlatformApplicationsContinuation = CheckedContinuation<ListPlatformApplicationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPlatformApplicationsContinuation) in
            listPlatformApplications(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the calling Amazon Web Services account's current verified and pending destination phone numbers in the SMS sandbox. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see [SMS sandbox](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) in the Amazon SNS Developer Guide.
    func listSMSSandboxPhoneNumbers(input: ListSMSSandboxPhoneNumbersInput) async throws -> ListSMSSandboxPhoneNumbersOutputResponse
    {
        typealias listSMSSandboxPhoneNumbersContinuation = CheckedContinuation<ListSMSSandboxPhoneNumbersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSMSSandboxPhoneNumbersContinuation) in
            listSMSSandboxPhoneNumbers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the requester's subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a NextToken is also returned. Use the NextToken parameter in a new ListSubscriptions call to get further results. This action is throttled at 30 transactions per second (TPS).
    func listSubscriptions(input: ListSubscriptionsInput) async throws -> ListSubscriptionsOutputResponse
    {
        typealias listSubscriptionsContinuation = CheckedContinuation<ListSubscriptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSubscriptionsContinuation) in
            listSubscriptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a NextToken is also returned. Use the NextToken parameter in a new ListSubscriptionsByTopic call to get further results. This action is throttled at 30 transactions per second (TPS).
    func listSubscriptionsByTopic(input: ListSubscriptionsByTopicInput) async throws -> ListSubscriptionsByTopicOutputResponse
    {
        typealias listSubscriptionsByTopicContinuation = CheckedContinuation<ListSubscriptionsByTopicOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSubscriptionsByTopicContinuation) in
            listSubscriptionsByTopic(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all tags added to the specified Amazon SNS topic. For an overview, see [Amazon SNS Tags](https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html) in the Amazon Simple Notification Service Developer Guide.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the requester's topics. Each call returns a limited list of topics, up to 100. If there are more topics, a NextToken is also returned. Use the NextToken parameter in a new ListTopics call to get further results. This action is throttled at 30 transactions per second (TPS).
    func listTopics(input: ListTopicsInput) async throws -> ListTopicsOutputResponse
    {
        typealias listTopicsContinuation = CheckedContinuation<ListTopicsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTopicsContinuation) in
            listTopics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number. You can opt in a phone number only once every 30 days.
    func optInPhoneNumber(input: OptInPhoneNumberInput) async throws -> OptInPhoneNumberOutputResponse
    {
        typealias optInPhoneNumberContinuation = CheckedContinuation<OptInPhoneNumberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: optInPhoneNumberContinuation) in
            optInPhoneNumber(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the TargetArn). If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint. When a messageId is returned, the message is saved and Amazon SNS immediately deliverers it to subscribers. To use the Publish action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the CreatePlatformEndpoint action. For more information about formatting messages, see [Send Custom Platform-Specific Payloads in Messages to Mobile Devices](https://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-custommessage.html). You can publish messages only to topics and endpoints in the same Amazon Web Services Region.
    func publish(input: PublishInput) async throws -> PublishOutputResponse
    {
        typealias publishContinuation = CheckedContinuation<PublishOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: publishContinuation) in
            publish(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Publishes up to ten messages to the specified topic. This is a batch version of Publish. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes. The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of 200. The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). Some actions take lists of parameters. These lists are specified using the param.n notation. Values of n are integers starting from 1. For example, a parameter list with two elements looks like this: &AttributeName.1=first &AttributeName.2=second If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint. When a messageId is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.
    func publishBatch(input: PublishBatchInput) async throws -> PublishBatchOutputResponse
    {
        typealias publishBatchContinuation = CheckedContinuation<PublishBatchOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: publishBatchContinuation) in
            publishBatch(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a statement from a topic's access control policy.
    func removePermission(input: RemovePermissionInput) async throws -> RemovePermissionOutputResponse
    {
        typealias removePermissionContinuation = CheckedContinuation<RemovePermissionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removePermissionContinuation) in
            removePermission(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see [Using Amazon SNS Mobile Push Notifications](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html).
    func setEndpointAttributes(input: SetEndpointAttributesInput) async throws -> SetEndpointAttributesOutputResponse
    {
        typealias setEndpointAttributesContinuation = CheckedContinuation<SetEndpointAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setEndpointAttributesContinuation) in
            setEndpointAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see [Using Amazon SNS Mobile Push Notifications](https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html). For information on configuring attributes for message delivery status, see [Using Amazon SNS Application Attributes for Message Delivery Status](https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html).
    func setPlatformApplicationAttributes(input: SetPlatformApplicationAttributesInput) async throws -> SetPlatformApplicationAttributesOutputResponse
    {
        typealias setPlatformApplicationAttributesContinuation = CheckedContinuation<SetPlatformApplicationAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setPlatformApplicationAttributesContinuation) in
            setPlatformApplicationAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports. You can override some of these settings for a single message when you use the Publish action with the MessageAttributes.entry.N parameter. For more information, see [Publishing to a mobile phone](https://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html) in the Amazon SNS Developer Guide. To use this operation, you must grant the Amazon SNS service principal (sns.amazonaws.com) permission to perform the s3:ListBucket action.
    func setSMSAttributes(input: SetSMSAttributesInput) async throws -> SetSMSAttributesOutputResponse
    {
        typealias setSMSAttributesContinuation = CheckedContinuation<SetSMSAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setSMSAttributesContinuation) in
            setSMSAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows a subscription owner to set an attribute of the subscription to a new value.
    func setSubscriptionAttributes(input: SetSubscriptionAttributesInput) async throws -> SetSubscriptionAttributesOutputResponse
    {
        typealias setSubscriptionAttributesContinuation = CheckedContinuation<SetSubscriptionAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setSubscriptionAttributesContinuation) in
            setSubscriptionAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Allows a topic owner to set an attribute of the topic to a new value.
    func setTopicAttributes(input: SetTopicAttributesInput) async throws -> SetTopicAttributesOutputResponse
    {
        typealias setTopicAttributesContinuation = CheckedContinuation<SetTopicAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: setTopicAttributesContinuation) in
            setTopicAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the ConfirmSubscription action to confirm the subscription. You call the ConfirmSubscription action with the token from the subscription response. Confirmation tokens are valid for three days. This action is throttled at 100 transactions per second (TPS).
    func subscribe(input: SubscribeInput) async throws -> SubscribeOutputResponse
    {
        typealias subscribeContinuation = CheckedContinuation<SubscribeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: subscribeContinuation) in
            subscribe(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Add tags to the specified Amazon SNS topic. For an overview, see [Amazon SNS Tags](https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html) in the Amazon SNS Developer Guide. When you use topic tags, keep the following guidelines in mind:
    ///
    /// * Adding more than 50 tags to a topic isn't recommended.
    ///
    /// * Tags don't have any semantic meaning. Amazon SNS interprets tags as character strings.
    ///
    /// * Tags are case-sensitive.
    ///
    /// * A new tag with a key identical to that of an existing tag overwrites the existing tag.
    ///
    /// * Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a [technical support request](https://console.aws.amazon.com/support/home#/case/create?issueType=technical).
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic's owner can unsubscribe, and an Amazon Web Services signature is required. If the Unsubscribe call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the Unsubscribe request was unintended. This action is throttled at 100 transactions per second (TPS).
    func unsubscribe(input: UnsubscribeInput) async throws -> UnsubscribeOutputResponse
    {
        typealias unsubscribeContinuation = CheckedContinuation<UnsubscribeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: unsubscribeContinuation) in
            unsubscribe(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Remove tags from the specified Amazon SNS topic. For an overview, see [Amazon SNS Tags](https://docs.aws.amazon.com/sns/latest/dg/sns-tags.html) in the Amazon SNS Developer Guide.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see [SMS sandbox](https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html) in the Amazon SNS Developer Guide.
    func verifySMSSandboxPhoneNumber(input: VerifySMSSandboxPhoneNumberInput) async throws -> VerifySMSSandboxPhoneNumberOutputResponse
    {
        typealias verifySMSSandboxPhoneNumberContinuation = CheckedContinuation<VerifySMSSandboxPhoneNumberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: verifySMSSandboxPhoneNumberContinuation) in
            verifySMSSandboxPhoneNumber(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
