// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ChangeTagsForResourceInputHeadersMiddleware: Middleware {
    public let id: String = "ChangeTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ChangeTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ChangeTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ChangeTagsForResourceInput>
    public typealias MOutput = OperationOutput<ChangeTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ChangeTagsForResourceOutputError>
}

public struct ChangeTagsForResourceInputQueryItemMiddleware: Middleware {
    public let id: String = "ChangeTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ChangeTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ChangeTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ChangeTagsForResourceInput>
    public typealias MOutput = OperationOutput<ChangeTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ChangeTagsForResourceOutputError>
}

public struct ChangeTagsForResourceInputBodyMiddleware: Middleware {
    public let id: String = "ChangeTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ChangeTagsForResourceInput>,
                  next: H) -> Swift.Result<OperationOutput<ChangeTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ChangeTagsForResourceInput>
    public typealias MOutput = OperationOutput<ChangeTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ChangeTagsForResourceOutputError>
}

extension ChangeTagsForResourceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case addTags = "AddTags"
        case removeTagKeys = "RemoveTagKeys"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: Key("xmlns"))
        }
        if let addTags = addTags {
            var addTagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("addTags"))
            for tag0 in addTags {
                try addTagsContainer.encode(tag0, forKey: Key("Tag"))
            }
        }
        if let removeTagKeys = removeTagKeys {
            var removeTagKeysContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("removeTagKeys"))
            for tagkey0 in removeTagKeys {
                try removeTagKeysContainer.encode(tagkey0, forKey: Key("Key"))
            }
        }
    }
}
