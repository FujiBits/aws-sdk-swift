// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension Route53ClientTypes.AccountLimit: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if value != 0 {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.AccountLimitType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decode(Swift.Int.self, forKey: .value)
        value = valueDecoded
    }
}

extension Route53ClientTypes.AccountLimit: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountLimit(type: \(Swift.String(describing: type)), value: \(Swift.String(describing: value)))"}
}

extension Route53ClientTypes.AccountLimit: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains the type of limit that you specified in the request and the current value for that limit.</p>
    public struct AccountLimit: Swift.Equatable {
        /// <p>The limit that you requested. Valid values include the following:</p>
        /// 		       <ul>
        ///             <li>
        ///                <p>
        ///                   <b>MAX_HEALTH_CHECKS_BY_OWNER</b>: The maximum number of health checks that you can create
        /// 				using the current account.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>MAX_HOSTED_ZONES_BY_OWNER</b>: The maximum number of hosted zones that you can create
        /// 				using the current account.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>MAX_REUSABLE_DELEGATION_SETS_BY_OWNER</b>: The maximum number of reusable delegation sets
        /// 				that you can create using the current account.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>MAX_TRAFFIC_POLICIES_BY_OWNER</b>: The maximum number of traffic policies
        /// 				that you can create using the current account.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER</b>: The maximum number of traffic policy instances
        /// 				that you can create using the current account. (Traffic policy instances are referred to as traffic flow policy records in the
        /// 				Amazon Route 53 console.)</p>
        ///             </li>
        ///          </ul>
        public let type: Route53ClientTypes.AccountLimitType?
        /// <p>The current value for the limit that is specified by
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_AccountLimit.html#Route53-Type-AccountLimit-Type">Type</a>.</p>
        public let value: Swift.Int

        public init (
            type: Route53ClientTypes.AccountLimitType? = nil,
            value: Swift.Int = 0
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension Route53ClientTypes {
    public enum AccountLimitType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case maxHealthChecksByOwner
        case maxHostedZonesByOwner
        case maxReusableDelegationSetsByOwner
        case maxTrafficPoliciesByOwner
        case maxTrafficPolicyInstancesByOwner
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountLimitType] {
            return [
                .maxHealthChecksByOwner,
                .maxHostedZonesByOwner,
                .maxReusableDelegationSetsByOwner,
                .maxTrafficPoliciesByOwner,
                .maxTrafficPolicyInstancesByOwner,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .maxHealthChecksByOwner: return "MAX_HEALTH_CHECKS_BY_OWNER"
            case .maxHostedZonesByOwner: return "MAX_HOSTED_ZONES_BY_OWNER"
            case .maxReusableDelegationSetsByOwner: return "MAX_REUSABLE_DELEGATION_SETS_BY_OWNER"
            case .maxTrafficPoliciesByOwner: return "MAX_TRAFFIC_POLICIES_BY_OWNER"
            case .maxTrafficPolicyInstancesByOwner: return "MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccountLimitType(rawValue: rawValue) ?? AccountLimitType.sdkUnknown(rawValue)
        }
    }
}

extension ActivateKeySigningKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActivateKeySigningKeyInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)), name: \(Swift.String(describing: name)))"}
}

extension ActivateKeySigningKeyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ActivateKeySigningKeyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ActivateKeySigningKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ActivateKeySigningKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ActivateKeySigningKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ActivateKeySigningKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ActivateKeySigningKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ActivateKeySigningKeyOutputError>
}

public struct ActivateKeySigningKeyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ActivateKeySigningKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ActivateKeySigningKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ActivateKeySigningKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ActivateKeySigningKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ActivateKeySigningKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ActivateKeySigningKeyOutputError>
}

public struct ActivateKeySigningKeyInput: Swift.Equatable {
    /// <p>A unique string used to identify a hosted zone.</p>
    public let hostedZoneId: Swift.String?
    /// <p>A string used to identify a key-signing key (KSK). <code>Name</code> can include numbers, letters,  and underscores (_). <code>Name</code> must be unique for each key-signing key in the same
    /// 			hosted zone.</p>
    public let name: Swift.String?

    public init (
        hostedZoneId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.name = name
    }
}

struct ActivateKeySigningKeyInputBody: Swift.Equatable {
}

extension ActivateKeySigningKeyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ActivateKeySigningKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ActivateKeySigningKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeySigningKeyStatus" : self = .invalidKeySigningKeyStatus(try InvalidKeySigningKeyStatus(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSArn" : self = .invalidKMSArn(try InvalidKMSArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSigningStatus" : self = .invalidSigningStatus(try InvalidSigningStatus(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchKeySigningKey" : self = .noSuchKeySigningKey(try NoSuchKeySigningKey(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ActivateKeySigningKeyOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case invalidKeySigningKeyStatus(InvalidKeySigningKeyStatus)
    case invalidKMSArn(InvalidKMSArn)
    case invalidSigningStatus(InvalidSigningStatus)
    case noSuchKeySigningKey(NoSuchKeySigningKey)
    case unknown(UnknownAWSHttpServiceError)
}

extension ActivateKeySigningKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActivateKeySigningKeyOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)))"}
}

extension ActivateKeySigningKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ActivateKeySigningKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
        } else {
            self.changeInfo = nil
        }
    }
}

public struct ActivateKeySigningKeyOutputResponse: Swift.Equatable {
    /// <p>A complex type that describes change information about changes made to your hosted
    /// 			zone.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil
    )
    {
        self.changeInfo = changeInfo
    }
}

struct ActivateKeySigningKeyOutputResponseBody: Swift.Equatable {
    public let changeInfo: Route53ClientTypes.ChangeInfo?
}

extension ActivateKeySigningKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
    }
}

extension Route53ClientTypes.AlarmIdentifier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case region = "Region"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.CloudWatchRegion.self, forKey: .region)
        region = regionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension Route53ClientTypes.AlarmIdentifier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AlarmIdentifier(name: \(Swift.String(describing: name)), region: \(Swift.String(describing: region)))"}
}

extension Route53ClientTypes.AlarmIdentifier: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether
    /// 			the specified health check is healthy.</p>
    public struct AlarmIdentifier: Swift.Equatable {
        /// <p>The name of the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether this health check is healthy.</p>
        /// 		       <note>
        ///             <p>Route 53 supports CloudWatch alarms with the following features:</p>
        /// 			         <ul>
        ///                <li>
        ///                   <p>Standard-resolution metrics. High-resolution metrics aren't supported. For more information, see
        /// 					<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/publishingMetrics.html#high-resolution-metrics">High-Resolution Metrics</a>
        /// 					in the <i>Amazon CloudWatch User Guide</i>.</p>
        ///                </li>
        ///                <li>
        ///                   <p>Statistics: Average, Minimum, Maximum, Sum, and SampleCount. Extended statistics aren't supported.</p>
        ///                </li>
        ///             </ul>
        /// 		       </note>
        public let name: Swift.String?
        /// <p>For the CloudWatch alarm that you want Route 53 health checkers to use to determine whether this health check is healthy,
        /// 			the region that the alarm was created in.</p>
        /// 	        <p>For the current list of CloudWatch regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/cw_region.html">Amazon CloudWatch endpoints and quotas</a> in
        /// 			the <i>Amazon Web Services General Reference</i>.</p>
        public let region: Route53ClientTypes.CloudWatchRegion?

        public init (
            name: Swift.String? = nil,
            region: Route53ClientTypes.CloudWatchRegion? = nil
        )
        {
            self.name = name
            self.region = region
        }
    }

}

extension Route53ClientTypes.AliasTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dNSName = "DNSName"
        case evaluateTargetHealth = "EvaluateTargetHealth"
        case hostedZoneId = "HostedZoneId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let dNSName = dNSName {
            try container.encode(dNSName, forKey: ClientRuntime.Key("DNSName"))
        }
        if evaluateTargetHealth != false {
            try container.encode(evaluateTargetHealth, forKey: ClientRuntime.Key("EvaluateTargetHealth"))
        }
        if let hostedZoneId = hostedZoneId {
            try container.encode(hostedZoneId, forKey: ClientRuntime.Key("HostedZoneId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let dNSNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dNSName)
        dNSName = dNSNameDecoded
        let evaluateTargetHealthDecoded = try containerValues.decode(Swift.Bool.self, forKey: .evaluateTargetHealth)
        evaluateTargetHealth = evaluateTargetHealthDecoded
    }
}

extension Route53ClientTypes.AliasTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AliasTarget(dNSName: \(Swift.String(describing: dNSName)), evaluateTargetHealth: \(Swift.String(describing: evaluateTargetHealth)), hostedZoneId: \(Swift.String(describing: hostedZoneId)))"}
}

extension Route53ClientTypes.AliasTarget: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>
    ///             <i>Alias resource record sets only:</i> Information about the AWS resource, such as a CloudFront distribution or
    /// 			an Amazon S3 bucket, that you want to route traffic to.</p>
    /// 		       <p>When creating resource record sets for a private hosted zone, note the following:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>Creating geolocation alias resource record sets or latency alias resource record sets in a private hosted zone
    /// 					is unsupported.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>For information about creating failover resource record sets in a private hosted zone, see
    /// 					<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html">Configuring Failover in a Private Hosted Zone</a>.</p>
    /// 			         </li>
    ///          </ul>
    public struct AliasTarget: Swift.Equatable {
        /// <p>
        ///             <i>Alias resource record sets only:</i> The value that you specify depends on where you want to route queries:</p>
        /// 		       <dl>
        ///             <dt>Amazon API Gateway custom regional APIs and edge-optimized APIs</dt>
        ///             <dd>
        ///                <p>Specify the applicable domain name for your API. You can get the applicable value using the AWS CLI command
        /// 					<a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-domain-names.html">get-domain-names</a>:</p>
        /// 					          <ul>
        ///                   <li>
        ///                      <p>For regional APIs, specify the value of <code>regionalDomainName</code>.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>For edge-optimized APIs, specify the value of <code>distributionDomainName</code>. This is the name of the
        /// 							associated CloudFront distribution, such as <code>da1b2c3d4e5.cloudfront.net</code>.</p>
        ///                   </li>
        ///                </ul>
        /// 					          <note>
        /// 						            <p>The name of the record that you're creating must match a custom domain name for your API, such as
        /// 							<code>api.example.com</code>.</p>
        /// 					          </note>
        /// 				        </dd>
        ///             <dt>Amazon Virtual Private Cloud interface VPC endpoint</dt>
        ///             <dd>
        ///                <p>Enter the API endpoint for the interface endpoint, such as
        /// 					<code>vpce-123456789abcdef01-example-us-east-1a.elasticloadbalancing.us-east-1.vpce.amazonaws.com</code>. For edge-optimized APIs,
        /// 					this is the domain name for the corresponding CloudFront distribution. You can get the value of <code>DnsName</code> using the AWS CLI command
        /// 					<a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpc-endpoints.html">describe-vpc-endpoints</a>.</p>
        /// 				        </dd>
        ///             <dt>CloudFront distribution</dt>
        ///             <dd>
        ///                <p>Specify the domain name that CloudFront assigned when you created your distribution.</p>
        /// 					          <p>Your CloudFront distribution must include an alternate domain name that matches the name of the resource record set.
        /// 						For example, if the name of the resource record set is <i>acme.example.com</i>, your CloudFront distribution must
        /// 						include <i>acme.example.com</i> as one of the alternate domain names. For more information, see
        /// 						<a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html">Using Alternate Domain Names (CNAMEs)</a> in the
        /// 						<i>Amazon CloudFront Developer Guide</i>.</p>
        /// 					          <p>You can't create a resource record set in a private hosted zone to route traffic to a CloudFront distribution.</p>
        /// 					          <note>
        ///                   <p>For failover alias records, you can't specify a CloudFront distribution for both the primary and secondary records.
        /// 						A distribution must include an alternate domain name that matches the name of the record. However, the primary and secondary records
        /// 						have the same name, and you can't include the same alternate domain name in more than one distribution. </p>
        ///                </note>
        /// 				        </dd>
        ///             <dt>Elastic Beanstalk environment</dt>
        ///             <dd>
        /// 					          <p>If the domain name for your Elastic Beanstalk environment includes the region that you deployed the environment in,
        /// 						you can create an alias record that routes traffic to the environment. For example, the domain name
        /// 						<code>my-environment.<i>us-west-2</i>.elasticbeanstalk.com</code> is a regionalized domain name. </p>
        /// 					          <important>
        /// 						            <p>For environments that were created before early 2016, the domain name doesn't include the region. To route traffic
        /// 							to these environments, you must create a CNAME record instead of an alias record. Note that you can't create a
        /// 							CNAME record for the root domain name. For example, if your domain name is example.com, you can create a record
        /// 							that routes traffic for acme.example.com to your Elastic Beanstalk environment, but you can't create a record
        /// 							that routes traffic for example.com to your Elastic Beanstalk environment.</p>
        /// 					          </important>
        /// 					          <p>For Elastic Beanstalk environments that have regionalized subdomains, specify the <code>CNAME</code> attribute for the environment.
        /// 						You can use the following methods to get the value of the CNAME attribute:</p>
        /// 					          <ul>
        ///                   <li>
        /// 							              <p>
        ///                         <i>AWS Management Console</i>: For information about how to get the value by using the console,
        /// 								see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customdomains.html">Using Custom Domains with AWS Elastic Beanstalk</a> in the
        /// 								<i>AWS Elastic Beanstalk Developer Guide</i>.</p>
        /// 						            </li>
        ///                   <li>
        /// 							              <p>
        ///                         <i>Elastic Beanstalk API</i>: Use the <code>DescribeEnvironments</code> action to get
        /// 								the value of the <code>CNAME</code> attribute. For more information, see
        /// 								<a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_DescribeEnvironments.html">DescribeEnvironments</a>
        /// 								in the <i>AWS Elastic Beanstalk API Reference</i>.</p>
        /// 						            </li>
        ///                   <li>
        /// 							              <p>
        ///                         <i>AWS CLI</i>: Use the <code>describe-environments</code> command to get the value of the
        /// 								<code>CNAME</code> attribute. For more information, see
        /// 								<a href="https://docs.aws.amazon.com/cli/latest/reference/elasticbeanstalk/describe-environments.html">describe-environments</a> in the
        /// 								<i>AWS CLI Command Reference</i>.</p>
        /// 						            </li>
        ///                </ul>
        /// 				        </dd>
        ///             <dt>ELB load balancer</dt>
        ///             <dd>
        ///                <p>Specify the DNS name that is associated with the load balancer. Get the DNS name by using the AWS Management Console,
        /// 					the ELB API, or the AWS CLI. </p>
        /// 					          <ul>
        ///                   <li>
        /// 							              <p>
        ///                         <b>AWS Management Console</b>: Go to the EC2 page, choose <b>Load Balancers</b>
        /// 								in the navigation pane, choose the load balancer, choose the <b>Description</b> tab, and get the value
        /// 								of the <b>DNS name</b> field. </p>
        /// 							              <p>If you're routing traffic to a Classic Load Balancer, get the value that begins with <b>dualstack</b>.
        /// 								If you're routing traffic to another type of load balancer, get the value that applies to the record type, A or AAAA.</p>
        /// 						            </li>
        ///                   <li>
        /// 							              <p>
        ///                         <b>Elastic Load Balancing API</b>: Use <code>DescribeLoadBalancers</code> to get the value
        /// 								of <code>DNSName</code>. For more information, see the applicable guide:</p>
        /// 							              <ul>
        ///                         <li>
        ///                            <p>Classic Load Balancers:
        /// 									<a href="https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a>
        ///                            </p>
        ///                         </li>
        ///                         <li>
        ///                            <p>Application and Network Load Balancers:
        /// 									<a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a>
        ///                            </p>
        ///                         </li>
        ///                      </ul>
        /// 						            </li>
        ///                   <li>
        /// 							              <p>
        ///                         <b>AWS CLI</b>: Use <code>describe-load-balancers</code> to get the value of <code>DNSName</code>.
        /// 								For more information, see the applicable guide:</p>
        /// 							              <ul>
        ///                         <li>
        ///                            <p>Classic Load Balancers:
        /// 									<a href="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html">describe-load-balancers</a>
        ///                            </p>
        ///                         </li>
        ///                         <li>
        ///                            <p>Application and Network Load Balancers:
        /// 									<a href="http://docs.aws.amazon.com/cli/latest/reference/elbv2/describe-load-balancers.html">describe-load-balancers</a>
        ///                            </p>
        ///                         </li>
        ///                      </ul>
        /// 						            </li>
        ///                </ul>
        /// 				        </dd>
        ///             <dt>AWS Global Accelerator accelerator</dt>
        ///             <dd>
        ///                <p>Specify the DNS name for your accelerator:</p>
        /// 					          <ul>
        ///                   <li>
        ///                      <p>
        ///                         <b>Global Accelerator API:</b> To get the DNS name, use
        /// 							<a href="https://docs.aws.amazon.com/global-accelerator/latest/api/API_DescribeAccelerator.html">DescribeAccelerator</a>.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <b>AWS CLI:</b> To get the DNS name, use
        /// 							<a href="https://docs.aws.amazon.com/cli/latest/reference/globalaccelerator/describe-accelerator.html">describe-accelerator</a>.</p>
        ///                   </li>
        ///                </ul>
        /// 				        </dd>
        ///             <dt>Amazon S3 bucket that is configured as a static website</dt>
        ///             <dd>
        ///                <p>Specify the domain name of the Amazon S3 website endpoint that you created the bucket in, for example,
        /// 					<code>s3-website.us-east-2.amazonaws.com</code>. For more information about valid values, see the table
        /// 					<a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints">Amazon S3 Website Endpoints</a>
        /// 					in the <i>Amazon Web Services General Reference</i>. For more information about using S3 buckets for websites,
        /// 					see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/getting-started.html">Getting Started with Amazon Route 53</a>
        /// 					in the <i>Amazon Route 53 Developer Guide.</i>
        ///                </p>
        ///             </dd>
        ///             <dt>Another Route 53 resource record set</dt>
        ///             <dd>
        ///                <p>Specify the value of the <code>Name</code> element for a resource record set in the current hosted zone.</p>
        /// 					          <note>
        ///                   <p>If you're creating an alias record that has the same name as the hosted zone (known as the zone apex),
        /// 						you can't specify the domain name for a record for which the value of <code>Type</code> is <code>CNAME</code>. This is because
        /// 						the alias record must have the same type as the record that you're routing traffic to, and creating a CNAME record for the
        /// 						zone apex isn't supported even for an alias record.</p>
        ///                </note>
        /// 				        </dd>
        ///          </dl>
        public let dNSName: Swift.String?
        /// <p>
        ///             <i>Applies only to alias, failover alias, geolocation alias, latency alias, and weighted alias resource record sets:</i>
        /// 			When <code>EvaluateTargetHealth</code> is <code>true</code>, an alias resource record set inherits the health of the referenced AWS resource,
        /// 			such as an ELB load balancer or another resource record set in the hosted zone.</p>
        /// 		       <p>Note the following:</p>
        ///
        /// 		       <dl>
        ///             <dt>CloudFront distributions</dt>
        ///             <dd>
        ///                <p>You can't set <code>EvaluateTargetHealth</code> to <code>true</code> when the alias target is a
        /// 					CloudFront distribution.</p>
        ///             </dd>
        ///             <dt>Elastic Beanstalk environments that have regionalized subdomains</dt>
        ///             <dd>
        ///                <p>If you specify an Elastic Beanstalk environment in <code>DNSName</code> and the environment contains an ELB load balancer,
        /// 					Elastic Load Balancing routes queries only to the healthy Amazon EC2 instances that are registered with the load balancer. (An environment automatically
        /// 					contains an ELB load balancer if it includes more than one Amazon EC2 instance.) If you set <code>EvaluateTargetHealth</code> to
        /// 					<code>true</code> and either no Amazon EC2 instances are healthy or the load balancer itself is unhealthy,
        /// 					Route 53 routes queries to other available resources that are healthy, if any. </p>
        /// 					          <p>If the environment contains a single Amazon EC2 instance, there are no special requirements.</p>
        ///             </dd>
        ///             <dt>ELB load balancers</dt>
        ///             <dd>
        ///                <p>Health checking behavior depends on the type of load balancer:</p>
        /// 					          <ul>
        ///                   <li>
        ///                      <p>
        ///                         <b>Classic Load Balancers</b>: If you specify an ELB Classic Load Balancer in
        /// 							<code>DNSName</code>, Elastic Load Balancing routes queries only to the healthy Amazon EC2 instances that are registered with the load balancer.
        /// 							If you set <code>EvaluateTargetHealth</code> to <code>true</code> and either no EC2 instances are healthy or the
        /// 							load balancer itself is unhealthy, Route 53 routes queries to other resources.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <b>Application and Network Load Balancers</b>: If you specify an ELB
        /// 							Application or Network Load Balancer and you set <code>EvaluateTargetHealth</code> to <code>true</code>,
        /// 							Route 53 routes queries to the load balancer based on the health of the target groups that are associated with the load balancer:</p>
        /// 							              <ul>
        ///                         <li>
        ///                            <p>For an Application or Network Load Balancer to be considered healthy, every target group that contains targets
        /// 									must contain at least one healthy target. If any target group contains only unhealthy targets, the load balancer is considered
        /// 									unhealthy, and Route 53 routes queries to other resources.</p>
        ///                         </li>
        ///                         <li>
        ///                            <p>A target group that has no registered targets is considered unhealthy.</p>
        ///                         </li>
        ///                      </ul>
        /// 						            </li>
        ///                </ul>
        /// 					          <note>
        ///                   <p>When you create a load balancer, you configure settings for Elastic Load Balancing health checks; they're not Route 53 health checks, but
        /// 						they perform a similar function. Do not create Route 53 health checks for the EC2 instances that you register with an ELB load balancer. </p>
        ///                </note>
        /// 				        </dd>
        ///             <dt>S3 buckets</dt>
        ///             <dd>
        ///                <p>There are no special requirements for setting <code>EvaluateTargetHealth</code> to <code>true</code>
        /// 					when the alias target is an S3 bucket.</p>
        ///             </dd>
        ///             <dt>Other records in the same hosted zone</dt>
        ///             <dd>
        ///                <p>If the AWS resource that you specify in <code>DNSName</code> is a record or a group of records
        /// 					(for example, a group of weighted records) but is not another alias record, we recommend that you associate a health check
        /// 					with all of the records in the alias target. For more information, see
        /// 					<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-complex-configs.html#dns-failover-complex-configs-hc-omitting">What Happens When You Omit Health Checks?</a>
        /// 					in the <i>Amazon Route 53 Developer Guide</i>.</p>
        ///             </dd>
        ///          </dl>
        /// 		
        /// 		       <p>For more information and examples, see
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html">Amazon Route 53 Health Checks and DNS Failover</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
        public let evaluateTargetHealth: Swift.Bool
        /// <p>
        ///             <i>Alias resource records sets only</i>: The value used depends on where you want to route traffic:</p>
        /// 		       <dl>
        ///             <dt>Amazon API Gateway custom regional APIs and edge-optimized APIs</dt>
        ///             <dd>
        ///                <p>Specify the hosted zone ID for your API. You can get the applicable value using the AWS CLI command
        /// 					<a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-domain-names.html">get-domain-names</a>:</p>
        /// 					          <ul>
        ///                   <li>
        ///                      <p>For regional APIs, specify the value of <code>regionalHostedZoneId</code>.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>For edge-optimized APIs, specify the value of <code>distributionHostedZoneId</code>.</p>
        ///                   </li>
        ///                </ul>
        /// 				        </dd>
        ///             <dt>Amazon Virtual Private Cloud interface VPC endpoint</dt>
        ///             <dd>
        ///                <p>Specify the hosted zone ID for your interface endpoint. You can get the value of <code>HostedZoneId</code>
        /// 					using the AWS CLI command
        /// 					<a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpc-endpoints.html">describe-vpc-endpoints</a>.</p>
        /// 				        </dd>
        ///             <dt>CloudFront distribution</dt>
        ///             <dd>
        /// 					          <p>Specify <code>Z2FDTNDATAQYW2</code>.</p>
        /// 					          <note>
        /// 						            <p>Alias resource record sets for CloudFront can't be created in a private zone.</p>
        /// 					          </note>
        /// 				        </dd>
        ///             <dt>Elastic Beanstalk environment</dt>
        ///             <dd>
        /// 					          <p>Specify the hosted zone ID for the region that you created the environment in. The environment
        /// 						must have a regionalized subdomain. For a list of regions and the corresponding hosted zone IDs, see
        /// 					    <a href="https://docs.aws.amazon.com/general/latest/gr/elasticbeanstalk.html">AWS Elastic Beanstalk endpoints and quotas</a> in the
        /// 						 the <i>Amazon Web Services General Reference</i>.</p>
        /// 				        </dd>
        ///             <dt>ELB load balancer</dt>
        ///             <dd>
        /// 					          <p>Specify the value of the hosted zone ID for the load balancer. Use the following methods to get the
        /// 						hosted zone ID:</p>
        /// 					          <ul>
        ///                   <li>
        ///                      <p>
        ///                         <a href="https://docs.aws.amazon.com/general/latest/gr/elb.html">Elastic Load Balancing endpoints and quotas</a> topic in the <i>Amazon Web Services General Reference</i>:
        /// 							Use the value that corresponds with the region that you created your load balancer in. Note that there are
        /// 							separate columns for Application and Classic Load Balancers and for Network Load Balancers.</p>
        ///                   </li>
        ///                   <li>
        /// 							              <p>
        ///                         <b>AWS Management Console</b>: Go to the Amazon EC2 page, choose
        /// 								<b>Load Balancers</b> in the navigation pane, select the load balancer, and get the value of the
        /// 								<b>Hosted zone</b> field on the <b>Description</b> tab.</p>
        /// 						            </li>
        ///                   <li>
        /// 							              <p>
        ///                         <b>Elastic Load Balancing API</b>: Use <code>DescribeLoadBalancers</code> to get the
        /// 								applicable value. For more information, see the applicable guide:</p>
        /// 							              <ul>
        ///                         <li>
        ///                            <p>Classic Load Balancers: Use
        /// 									<a href="https://docs.aws.amazon.com/elasticloadbalancing/2012-06-01/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a>
        /// 									to get the value of <code>CanonicalHostedZoneNameId</code>.</p>
        ///                         </li>
        ///                         <li>
        ///                            <p>Application and Network Load Balancers: Use
        /// 									<a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html">DescribeLoadBalancers</a>
        /// 									to get the value of <code>CanonicalHostedZoneId</code>.</p>
        ///                         </li>
        ///                      </ul>
        /// 						            </li>
        ///                   <li>
        /// 							              <p>
        ///                         <b>AWS CLI</b>: Use <code>describe-load-balancers</code> to get the applicable value.
        /// 								For more information, see the applicable guide:</p>
        /// 							              <ul>
        ///                         <li>
        ///                            <p>Classic Load Balancers: Use
        /// 									<a href="http://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html">describe-load-balancers</a>
        /// 									to get the value of <code>CanonicalHostedZoneNameId</code>.</p>
        ///                         </li>
        ///                         <li>
        ///                            <p>Application and Network Load Balancers: Use
        /// 									<a href="http://docs.aws.amazon.com/cli/latest/reference/elbv2/describe-load-balancers.html">describe-load-balancers</a>
        /// 									to get the value of <code>CanonicalHostedZoneId</code>.</p>
        ///                         </li>
        ///                      </ul>
        /// 						            </li>
        ///                </ul>
        /// 				        </dd>
        ///             <dt>AWS Global Accelerator accelerator</dt>
        ///             <dd>
        ///                <p>Specify <code>Z2BJ6XQ5FK7U4H</code>.</p>
        ///             </dd>
        ///             <dt>An Amazon S3 bucket configured as a static website</dt>
        ///             <dd>
        /// 					          <p>Specify the hosted zone ID for the region that you created the bucket in. For more information about
        /// 						valid values, see the table
        /// 						<a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints">Amazon S3 Website Endpoints</a>
        /// 						in the <i>Amazon Web Services General Reference</i>.</p>
        /// 				        </dd>
        ///             <dt>Another Route 53 resource record set in your hosted zone</dt>
        ///             <dd>
        /// 					          <p>Specify the hosted zone ID of your hosted zone. (An alias resource record set
        /// 						can't reference a resource record set in a different hosted zone.)</p>
        /// 				        </dd>
        ///          </dl>
        public let hostedZoneId: Swift.String?

        public init (
            dNSName: Swift.String? = nil,
            evaluateTargetHealth: Swift.Bool = false,
            hostedZoneId: Swift.String? = nil
        )
        {
            self.dNSName = dNSName
            self.evaluateTargetHealth = evaluateTargetHealth
            self.hostedZoneId = hostedZoneId
        }
    }

}

public struct AssociateVPCWithHostedZoneInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateVPCWithHostedZoneInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateVPCWithHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateVPCWithHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateVPCWithHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateVPCWithHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateVPCWithHostedZoneOutputError>
}

extension AssociateVPCWithHostedZoneInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateVPCWithHostedZoneInput(comment: \(Swift.String(describing: comment)), hostedZoneId: \(Swift.String(describing: hostedZoneId)), vPC: \(Swift.String(describing: vPC)))"}
}

extension AssociateVPCWithHostedZoneInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension AssociateVPCWithHostedZoneInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case vPC = "VPC"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let comment = comment {
            try container.encode(comment, forKey: ClientRuntime.Key("Comment"))
        }
        if let vPC = vPC {
            try container.encode(vPC, forKey: ClientRuntime.Key("VPC"))
        }
    }
}

public struct AssociateVPCWithHostedZoneInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateVPCWithHostedZoneInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateVPCWithHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateVPCWithHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateVPCWithHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateVPCWithHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateVPCWithHostedZoneOutputError>
}

public struct AssociateVPCWithHostedZoneInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AssociateVPCWithHostedZoneInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AssociateVPCWithHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AssociateVPCWithHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AssociateVPCWithHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AssociateVPCWithHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AssociateVPCWithHostedZoneOutputError>
}

/// <p>A complex type that contains information about the request to associate a VPC with a private hosted zone.</p>
public struct AssociateVPCWithHostedZoneInput: Swift.Equatable {
    /// <p>
    ///             <i>Optional:</i> A comment about the association request.</p>
    public let comment: Swift.String?
    /// <p>The ID of the private hosted zone that you want to associate an Amazon VPC with.</p>
    /// 		       <p>Note that you can't associate a VPC with a hosted zone that doesn't have an existing VPC association.</p>
    public let hostedZoneId: Swift.String?
    /// <p>A complex type that contains information about the VPC that you want to associate with a private hosted zone.</p>
    public let vPC: Route53ClientTypes.VPC?

    public init (
        comment: Swift.String? = nil,
        hostedZoneId: Swift.String? = nil,
        vPC: Route53ClientTypes.VPC? = nil
    )
    {
        self.comment = comment
        self.hostedZoneId = hostedZoneId
        self.vPC = vPC
    }
}

struct AssociateVPCWithHostedZoneInputBody: Swift.Equatable {
    public let vPC: Route53ClientTypes.VPC?
    public let comment: Swift.String?
}

extension AssociateVPCWithHostedZoneInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case vPC = "VPC"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vPCDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.VPC.self, forKey: .vPC)
        vPC = vPCDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
    }
}

extension AssociateVPCWithHostedZoneOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension AssociateVPCWithHostedZoneOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingDomainExists" : self = .conflictingDomainExists(try ConflictingDomainExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCId" : self = .invalidVPCId(try InvalidVPCId(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitsExceeded" : self = .limitsExceeded(try LimitsExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotAuthorizedException" : self = .notAuthorizedException(try NotAuthorizedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PriorRequestNotComplete" : self = .priorRequestNotComplete(try PriorRequestNotComplete(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PublicZoneVPCAssociation" : self = .publicZoneVPCAssociation(try PublicZoneVPCAssociation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AssociateVPCWithHostedZoneOutputError: Swift.Error, Swift.Equatable {
    case conflictingDomainExists(ConflictingDomainExists)
    case invalidInput(InvalidInput)
    case invalidVPCId(InvalidVPCId)
    case limitsExceeded(LimitsExceeded)
    case noSuchHostedZone(NoSuchHostedZone)
    case notAuthorizedException(NotAuthorizedException)
    case priorRequestNotComplete(PriorRequestNotComplete)
    case publicZoneVPCAssociation(PublicZoneVPCAssociation)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateVPCWithHostedZoneOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssociateVPCWithHostedZoneOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)))"}
}

extension AssociateVPCWithHostedZoneOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AssociateVPCWithHostedZoneOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
        } else {
            self.changeInfo = nil
        }
    }
}

/// <p>A complex type that contains the response information for the <code>AssociateVPCWithHostedZone</code> request.</p>
public struct AssociateVPCWithHostedZoneOutputResponse: Swift.Equatable {
    /// <p>A complex type that describes the changes made to your hosted zone.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil
    )
    {
        self.changeInfo = changeInfo
    }
}

struct AssociateVPCWithHostedZoneOutputResponseBody: Swift.Equatable {
    public let changeInfo: Route53ClientTypes.ChangeInfo?
}

extension AssociateVPCWithHostedZoneOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
    }
}

extension Route53ClientTypes.Change: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case resourceRecordSet = "ResourceRecordSet"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let resourceRecordSet = resourceRecordSet {
            try container.encode(resourceRecordSet, forKey: ClientRuntime.Key("ResourceRecordSet"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let resourceRecordSetDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ResourceRecordSet.self, forKey: .resourceRecordSet)
        resourceRecordSet = resourceRecordSetDecoded
    }
}

extension Route53ClientTypes.Change: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Change(action: \(Swift.String(describing: action)), resourceRecordSet: \(Swift.String(describing: resourceRecordSet)))"}
}

extension Route53ClientTypes.Change: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>The information for each resource record set that you want to change.</p>
    public struct Change: Swift.Equatable {
        /// <p>The action to perform:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>
        ///                   <code>CREATE</code>: Creates a resource record set that has the specified values.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <code>DELETE</code>: Deletes a existing resource record set.</p>
        /// 				           <important>
        /// 					             <p>To delete the resource record set that is associated with a traffic policy instance, use
        /// 						<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_DeleteTrafficPolicyInstance.html">DeleteTrafficPolicyInstance</a>.
        /// 						Amazon Route 53 will delete the resource record set automatically. If you delete the resource record set by using
        /// 						<code>ChangeResourceRecordSets</code>, Route 53 doesn't automatically delete the traffic policy instance, and you'll continue
        /// 						to be charged for it even though it's no longer in use. </p>
        /// 				           </important>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <code>UPSERT</code>: If a resource record set doesn't already exist, Route 53 creates it.
        /// 					If a resource record set does exist, Route 53 updates it with the values in the request.</p>
        /// 			         </li>
        ///          </ul>
        public let action: Route53ClientTypes.ChangeAction?
        /// <p>Information about the resource record set to create, delete, or update.</p>
        public let resourceRecordSet: Route53ClientTypes.ResourceRecordSet?

        public init (
            action: Route53ClientTypes.ChangeAction? = nil,
            resourceRecordSet: Route53ClientTypes.ResourceRecordSet? = nil
        )
        {
            self.action = action
            self.resourceRecordSet = resourceRecordSet
        }
    }

}

extension Route53ClientTypes {
    public enum ChangeAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case create
        case delete
        case upsert
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeAction] {
            return [
                .create,
                .delete,
                .upsert,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .create: return "CREATE"
            case .delete: return "DELETE"
            case .upsert: return "UPSERT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeAction(rawValue: rawValue) ?? ChangeAction.sdkUnknown(rawValue)
        }
    }
}

extension Route53ClientTypes.ChangeBatch: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changes = "Changes"
        case comment = "Comment"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let changes = changes {
            var changesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Changes"))
            for change0 in changes {
                try changesContainer.encode(change0, forKey: ClientRuntime.Key("Change"))
            }
        }
        if let comment = comment {
            try container.encode(comment, forKey: ClientRuntime.Key("Comment"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
        if containerValues.contains(.changes) {
            struct KeyVal0{struct Change{}}
            let changesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Change>.CodingKeys.self, forKey: .changes)
            if let changesWrappedContainer = changesWrappedContainer {
                let changesContainer = try changesWrappedContainer.decodeIfPresent([Route53ClientTypes.Change].self, forKey: .member)
                var changesBuffer:[Route53ClientTypes.Change]? = nil
                if let changesContainer = changesContainer {
                    changesBuffer = [Route53ClientTypes.Change]()
                    for structureContainer0 in changesContainer {
                        changesBuffer?.append(structureContainer0)
                    }
                }
                changes = changesBuffer
            } else {
                changes = []
            }
        } else {
            changes = nil
        }
    }
}

extension Route53ClientTypes.ChangeBatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangeBatch(changes: \(Swift.String(describing: changes)), comment: \(Swift.String(describing: comment)))"}
}

extension Route53ClientTypes.ChangeBatch: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>The information for a change request.</p>
    public struct ChangeBatch: Swift.Equatable {
        /// <p>Information about the changes to make to the record sets.</p>
        public let changes: [Route53ClientTypes.Change]?
        /// <p>
        ///             <i>Optional:</i> Any comments you want to include about a change batch
        /// 			request.</p>
        public let comment: Swift.String?

        public init (
            changes: [Route53ClientTypes.Change]? = nil,
            comment: Swift.String? = nil
        )
        {
            self.changes = changes
            self.comment = comment
        }
    }

}

extension Route53ClientTypes.ChangeInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case id = "Id"
        case status = "Status"
        case submittedAt = "SubmittedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let comment = comment {
            try container.encode(comment, forKey: ClientRuntime.Key("Comment"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let submittedAt = submittedAt {
            try container.encode(ClientRuntime.TimestampWrapper(submittedAt, format: .dateTime), forKey: ClientRuntime.Key("SubmittedAt"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeStatus.self, forKey: .status)
        status = statusDecoded
        let submittedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .submittedAt)
        var submittedAtBuffer:ClientRuntime.Date? = nil
        if let submittedAtDecoded = submittedAtDecoded {
            submittedAtBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(submittedAtDecoded, format: .dateTime)
        }
        submittedAt = submittedAtBuffer
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
    }
}

extension Route53ClientTypes.ChangeInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangeInfo(comment: \(Swift.String(describing: comment)), id: \(Swift.String(describing: id)), status: \(Swift.String(describing: status)), submittedAt: \(Swift.String(describing: submittedAt)))"}
}

extension Route53ClientTypes.ChangeInfo: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that describes change information about changes made to your hosted
    /// 			zone.</p>
    public struct ChangeInfo: Swift.Equatable {
        /// <p>A complex type that describes change information about changes made to your hosted
        /// 			zone.</p>
        /// 		       <p>This element contains an ID that you use when performing a
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetChange.html">GetChange</a>
        /// 			action to get detailed information about the change.</p>
        public let comment: Swift.String?
        /// <p>The ID of the request.</p>
        public let id: Swift.String?
        /// <p>The current state of the request. <code>PENDING</code> indicates that this request has
        /// 			not yet been applied to all Amazon Route 53 DNS servers.</p>
        public let status: Route53ClientTypes.ChangeStatus?
        /// <p>The date and time that the change request was submitted in
        /// 			<a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601 format</a> and Coordinated Universal Time (UTC).
        /// 			For example, the value <code>2017-03-27T17:48:16.751Z</code> represents March 27, 2017 at 17:48:16.751 UTC.</p>
        public let submittedAt: ClientRuntime.Date?

        public init (
            comment: Swift.String? = nil,
            id: Swift.String? = nil,
            status: Route53ClientTypes.ChangeStatus? = nil,
            submittedAt: ClientRuntime.Date? = nil
        )
        {
            self.comment = comment
            self.id = id
            self.status = status
            self.submittedAt = submittedAt
        }
    }

}

public struct ChangeResourceRecordSetsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ChangeResourceRecordSetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ChangeResourceRecordSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ChangeResourceRecordSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ChangeResourceRecordSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ChangeResourceRecordSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ChangeResourceRecordSetsOutputError>
}

extension ChangeResourceRecordSetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangeResourceRecordSetsInput(changeBatch: \(Swift.String(describing: changeBatch)), hostedZoneId: \(Swift.String(describing: hostedZoneId)))"}
}

extension ChangeResourceRecordSetsInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension ChangeResourceRecordSetsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeBatch = "ChangeBatch"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let changeBatch = changeBatch {
            try container.encode(changeBatch, forKey: ClientRuntime.Key("ChangeBatch"))
        }
    }
}

public struct ChangeResourceRecordSetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ChangeResourceRecordSetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ChangeResourceRecordSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ChangeResourceRecordSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ChangeResourceRecordSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ChangeResourceRecordSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ChangeResourceRecordSetsOutputError>
}

public struct ChangeResourceRecordSetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ChangeResourceRecordSetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ChangeResourceRecordSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ChangeResourceRecordSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ChangeResourceRecordSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ChangeResourceRecordSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ChangeResourceRecordSetsOutputError>
}

/// <p>A complex type that contains change information for the resource record set.</p>
public struct ChangeResourceRecordSetsInput: Swift.Equatable {
    /// <p>A complex type that contains an optional comment and the <code>Changes</code> element.</p>
    public let changeBatch: Route53ClientTypes.ChangeBatch?
    /// <p>The ID of the hosted zone that contains the resource record sets that you want to change.</p>
    public let hostedZoneId: Swift.String?

    public init (
        changeBatch: Route53ClientTypes.ChangeBatch? = nil,
        hostedZoneId: Swift.String? = nil
    )
    {
        self.changeBatch = changeBatch
        self.hostedZoneId = hostedZoneId
    }
}

struct ChangeResourceRecordSetsInputBody: Swift.Equatable {
    public let changeBatch: Route53ClientTypes.ChangeBatch?
}

extension ChangeResourceRecordSetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeBatch = "ChangeBatch"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeBatchDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeBatch.self, forKey: .changeBatch)
        changeBatch = changeBatchDecoded
    }
}

extension ChangeResourceRecordSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ChangeResourceRecordSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidChangeBatch" : self = .invalidChangeBatch(try InvalidChangeBatch(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHealthCheck" : self = .noSuchHealthCheck(try NoSuchHealthCheck(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PriorRequestNotComplete" : self = .priorRequestNotComplete(try PriorRequestNotComplete(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ChangeResourceRecordSetsOutputError: Swift.Error, Swift.Equatable {
    case invalidChangeBatch(InvalidChangeBatch)
    case invalidInput(InvalidInput)
    case noSuchHealthCheck(NoSuchHealthCheck)
    case noSuchHostedZone(NoSuchHostedZone)
    case priorRequestNotComplete(PriorRequestNotComplete)
    case unknown(UnknownAWSHttpServiceError)
}

extension ChangeResourceRecordSetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangeResourceRecordSetsOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)))"}
}

extension ChangeResourceRecordSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ChangeResourceRecordSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
        } else {
            self.changeInfo = nil
        }
    }
}

/// <p>A complex type containing the response for the request.</p>
public struct ChangeResourceRecordSetsOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains information about changes made to your hosted zone.</p>
    /// 		       <p>This element contains an ID that you use when performing a
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetChange.html">GetChange</a>
    /// 			action to get detailed information about the change.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil
    )
    {
        self.changeInfo = changeInfo
    }
}

struct ChangeResourceRecordSetsOutputResponseBody: Swift.Equatable {
    public let changeInfo: Route53ClientTypes.ChangeInfo?
}

extension ChangeResourceRecordSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
    }
}

extension Route53ClientTypes {
    public enum ChangeStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case insync
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeStatus] {
            return [
                .insync,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .insync: return "INSYNC"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeStatus(rawValue: rawValue) ?? ChangeStatus.sdkUnknown(rawValue)
        }
    }
}

public struct ChangeTagsForResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ChangeTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ChangeTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ChangeTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ChangeTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ChangeTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ChangeTagsForResourceOutputError>
}

extension ChangeTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangeTagsForResourceInput(addTags: \(Swift.String(describing: addTags)), removeTagKeys: \(Swift.String(describing: removeTagKeys)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ChangeTagsForResourceInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension ChangeTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addTags = "AddTags"
        case removeTagKeys = "RemoveTagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let addTags = addTags {
            var addTagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AddTags"))
            for tag0 in addTags {
                try addTagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag"))
            }
        }
        if let removeTagKeys = removeTagKeys {
            var removeTagKeysContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RemoveTagKeys"))
            for tagkey0 in removeTagKeys {
                try removeTagKeysContainer.encode(tagkey0, forKey: ClientRuntime.Key("Key"))
            }
        }
    }
}

public struct ChangeTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ChangeTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ChangeTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ChangeTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ChangeTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ChangeTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ChangeTagsForResourceOutputError>
}

public struct ChangeTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ChangeTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ChangeTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ChangeTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ChangeTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ChangeTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ChangeTagsForResourceOutputError>
}

/// <p>A complex type that contains information about the tags that you want to add, edit, or delete.</p>
public struct ChangeTagsForResourceInput: Swift.Equatable {
    /// <p>A complex type that contains a list of the tags that you want to add to the specified health check or hosted zone and/or the tags
    /// 			that you want to edit <code>Value</code> for.</p>
    /// 		       <p>You can add a maximum of 10 tags to a health check or a hosted zone.</p>
    public let addTags: [Route53ClientTypes.Tag]?
    /// <p>A complex type that contains a list of the tags that you want to delete from the specified health check or hosted zone.
    /// 			You can specify up to 10 keys.</p>
    public let removeTagKeys: [Swift.String]?
    /// <p>The ID of the resource for which you want to add, change, or delete tags.</p>
    public let resourceId: Swift.String?
    /// <p>The type of the resource.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>The resource type for health checks is <code>healthcheck</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>The resource type for hosted zones is <code>hostedzone</code>.</p>
    ///             </li>
    ///          </ul>
    public let resourceType: Route53ClientTypes.TagResourceType?

    public init (
        addTags: [Route53ClientTypes.Tag]? = nil,
        removeTagKeys: [Swift.String]? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Route53ClientTypes.TagResourceType? = nil
    )
    {
        self.addTags = addTags
        self.removeTagKeys = removeTagKeys
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct ChangeTagsForResourceInputBody: Swift.Equatable {
    public let addTags: [Route53ClientTypes.Tag]?
    public let removeTagKeys: [Swift.String]?
}

extension ChangeTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addTags = "AddTags"
        case removeTagKeys = "RemoveTagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.addTags) {
            struct KeyVal0{struct Tag{}}
            let addTagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .addTags)
            if let addTagsWrappedContainer = addTagsWrappedContainer {
                let addTagsContainer = try addTagsWrappedContainer.decodeIfPresent([Route53ClientTypes.Tag].self, forKey: .member)
                var addTagsBuffer:[Route53ClientTypes.Tag]? = nil
                if let addTagsContainer = addTagsContainer {
                    addTagsBuffer = [Route53ClientTypes.Tag]()
                    for structureContainer0 in addTagsContainer {
                        addTagsBuffer?.append(structureContainer0)
                    }
                }
                addTags = addTagsBuffer
            } else {
                addTags = []
            }
        } else {
            addTags = nil
        }
        if containerValues.contains(.removeTagKeys) {
            struct KeyVal0{struct Key{}}
            let removeTagKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Key>.CodingKeys.self, forKey: .removeTagKeys)
            if let removeTagKeysWrappedContainer = removeTagKeysWrappedContainer {
                let removeTagKeysContainer = try removeTagKeysWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var removeTagKeysBuffer:[Swift.String]? = nil
                if let removeTagKeysContainer = removeTagKeysContainer {
                    removeTagKeysBuffer = [Swift.String]()
                    for stringContainer0 in removeTagKeysContainer {
                        removeTagKeysBuffer?.append(stringContainer0)
                    }
                }
                removeTagKeys = removeTagKeysBuffer
            } else {
                removeTagKeys = []
            }
        } else {
            removeTagKeys = nil
        }
    }
}

extension ChangeTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ChangeTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHealthCheck" : self = .noSuchHealthCheck(try NoSuchHealthCheck(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PriorRequestNotComplete" : self = .priorRequestNotComplete(try PriorRequestNotComplete(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ChangeTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchHealthCheck(NoSuchHealthCheck)
    case noSuchHostedZone(NoSuchHostedZone)
    case priorRequestNotComplete(PriorRequestNotComplete)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ChangeTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangeTagsForResourceOutputResponse()"}
}

extension ChangeTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>Empty response for the request.</p>
public struct ChangeTagsForResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct ChangeTagsForResourceOutputResponseBody: Swift.Equatable {
}

extension ChangeTagsForResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Route53ClientTypes.CloudWatchAlarmConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparisonOperator = "ComparisonOperator"
        case dimensions = "Dimensions"
        case evaluationPeriods = "EvaluationPeriods"
        case metricName = "MetricName"
        case namespace = "Namespace"
        case period = "Period"
        case statistic = "Statistic"
        case threshold = "Threshold"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let comparisonOperator = comparisonOperator {
            try container.encode(comparisonOperator, forKey: ClientRuntime.Key("ComparisonOperator"))
        }
        if let dimensions = dimensions {
            var dimensionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Dimensions"))
            for dimension0 in dimensions {
                try dimensionsContainer.encode(dimension0, forKey: ClientRuntime.Key("Dimension"))
            }
        }
        if let evaluationPeriods = evaluationPeriods {
            try container.encode(evaluationPeriods, forKey: ClientRuntime.Key("EvaluationPeriods"))
        }
        if let metricName = metricName {
            try container.encode(metricName, forKey: ClientRuntime.Key("MetricName"))
        }
        if let namespace = namespace {
            try container.encode(namespace, forKey: ClientRuntime.Key("Namespace"))
        }
        if let period = period {
            try container.encode(period, forKey: ClientRuntime.Key("Period"))
        }
        if let statistic = statistic {
            try container.encode(statistic, forKey: ClientRuntime.Key("Statistic"))
        }
        if let threshold = threshold {
            try container.encode(Swift.String(threshold), forKey: ClientRuntime.Key("Threshold"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationPeriodsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .evaluationPeriods)
        evaluationPeriods = evaluationPeriodsDecoded
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .threshold)
        threshold = thresholdDecoded
        let comparisonOperatorDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ComparisonOperator.self, forKey: .comparisonOperator)
        comparisonOperator = comparisonOperatorDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.Statistic.self, forKey: .statistic)
        statistic = statisticDecoded
        if containerValues.contains(.dimensions) {
            struct KeyVal0{struct Dimension{}}
            let dimensionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Dimension>.CodingKeys.self, forKey: .dimensions)
            if let dimensionsWrappedContainer = dimensionsWrappedContainer {
                let dimensionsContainer = try dimensionsWrappedContainer.decodeIfPresent([Route53ClientTypes.Dimension].self, forKey: .member)
                var dimensionsBuffer:[Route53ClientTypes.Dimension]? = nil
                if let dimensionsContainer = dimensionsContainer {
                    dimensionsBuffer = [Route53ClientTypes.Dimension]()
                    for structureContainer0 in dimensionsContainer {
                        dimensionsBuffer?.append(structureContainer0)
                    }
                }
                dimensions = dimensionsBuffer
            } else {
                dimensions = []
            }
        } else {
            dimensions = nil
        }
    }
}

extension Route53ClientTypes.CloudWatchAlarmConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CloudWatchAlarmConfiguration(comparisonOperator: \(Swift.String(describing: comparisonOperator)), dimensions: \(Swift.String(describing: dimensions)), evaluationPeriods: \(Swift.String(describing: evaluationPeriods)), metricName: \(Swift.String(describing: metricName)), namespace: \(Swift.String(describing: namespace)), period: \(Swift.String(describing: period)), statistic: \(Swift.String(describing: statistic)), threshold: \(Swift.String(describing: threshold)))"}
}

extension Route53ClientTypes.CloudWatchAlarmConfiguration: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains information about the CloudWatch alarm that Amazon Route 53 is monitoring for this health check.</p>
    public struct CloudWatchAlarmConfiguration: Swift.Equatable {
        /// <p>For the metric that the CloudWatch alarm is associated with, the arithmetic operation that is used for the comparison.</p>
        public let comparisonOperator: Route53ClientTypes.ComparisonOperator?
        /// <p>For the metric that the CloudWatch alarm is associated with, a complex type that contains information about the dimensions for the metric.
        /// 			For information, see
        /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html">Amazon CloudWatch Namespaces, Dimensions, and Metrics Reference</a>
        /// 			in the <i>Amazon CloudWatch User Guide</i>.</p>
        public let dimensions: [Route53ClientTypes.Dimension]?
        /// <p>For the metric that the CloudWatch alarm is associated with, the number of periods that the metric is compared to the threshold.</p>
        public let evaluationPeriods: Swift.Int?
        /// <p>The name of the CloudWatch metric that the alarm is associated with.</p>
        public let metricName: Swift.String?
        /// <p>The namespace of the metric that the alarm is associated with. For more information, see
        /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html">Amazon CloudWatch Namespaces, Dimensions, and Metrics Reference</a>
        /// 			in the <i>Amazon CloudWatch User Guide</i>.</p>
        public let namespace: Swift.String?
        /// <p>For the metric that the CloudWatch alarm is associated with, the duration of one evaluation period in seconds.</p>
        public let period: Swift.Int?
        /// <p>For the metric that the CloudWatch alarm is associated with, the statistic that is applied to the metric.</p>
        public let statistic: Route53ClientTypes.Statistic?
        /// <p>For the metric that the CloudWatch alarm is associated with, the value the metric is compared with.</p>
        public let threshold: Swift.Double?

        public init (
            comparisonOperator: Route53ClientTypes.ComparisonOperator? = nil,
            dimensions: [Route53ClientTypes.Dimension]? = nil,
            evaluationPeriods: Swift.Int? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            period: Swift.Int? = nil,
            statistic: Route53ClientTypes.Statistic? = nil,
            threshold: Swift.Double? = nil
        )
        {
            self.comparisonOperator = comparisonOperator
            self.dimensions = dimensions
            self.evaluationPeriods = evaluationPeriods
            self.metricName = metricName
            self.namespace = namespace
            self.period = period
            self.statistic = statistic
            self.threshold = threshold
        }
    }

}

extension Route53ClientTypes {
    public enum CloudWatchRegion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case afSouth1
        case apEast1
        case apNortheast1
        case apNortheast2
        case apNortheast3
        case apSouth1
        case apSoutheast1
        case apSoutheast2
        case caCentral1
        case cnNorth1
        case cnNorthwest1
        case euCentral1
        case euNorth1
        case euSouth1
        case euWest1
        case euWest2
        case euWest3
        case meSouth1
        case saEast1
        case usEast1
        case usEast2
        case usGovEast1
        case usGovWest1
        case usIsoEast1
        case usIsobEast1
        case usWest1
        case usWest2
        case sdkUnknown(Swift.String)

        public static var allCases: [CloudWatchRegion] {
            return [
                .afSouth1,
                .apEast1,
                .apNortheast1,
                .apNortheast2,
                .apNortheast3,
                .apSouth1,
                .apSoutheast1,
                .apSoutheast2,
                .caCentral1,
                .cnNorth1,
                .cnNorthwest1,
                .euCentral1,
                .euNorth1,
                .euSouth1,
                .euWest1,
                .euWest2,
                .euWest3,
                .meSouth1,
                .saEast1,
                .usEast1,
                .usEast2,
                .usGovEast1,
                .usGovWest1,
                .usIsoEast1,
                .usIsobEast1,
                .usWest1,
                .usWest2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .afSouth1: return "af-south-1"
            case .apEast1: return "ap-east-1"
            case .apNortheast1: return "ap-northeast-1"
            case .apNortheast2: return "ap-northeast-2"
            case .apNortheast3: return "ap-northeast-3"
            case .apSouth1: return "ap-south-1"
            case .apSoutheast1: return "ap-southeast-1"
            case .apSoutheast2: return "ap-southeast-2"
            case .caCentral1: return "ca-central-1"
            case .cnNorth1: return "cn-north-1"
            case .cnNorthwest1: return "cn-northwest-1"
            case .euCentral1: return "eu-central-1"
            case .euNorth1: return "eu-north-1"
            case .euSouth1: return "eu-south-1"
            case .euWest1: return "eu-west-1"
            case .euWest2: return "eu-west-2"
            case .euWest3: return "eu-west-3"
            case .meSouth1: return "me-south-1"
            case .saEast1: return "sa-east-1"
            case .usEast1: return "us-east-1"
            case .usEast2: return "us-east-2"
            case .usGovEast1: return "us-gov-east-1"
            case .usGovWest1: return "us-gov-west-1"
            case .usIsoEast1: return "us-iso-east-1"
            case .usIsobEast1: return "us-isob-east-1"
            case .usWest1: return "us-west-1"
            case .usWest2: return "us-west-2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CloudWatchRegion(rawValue: rawValue) ?? CloudWatchRegion.sdkUnknown(rawValue)
        }
    }
}

extension Route53ClientTypes {
    public enum ComparisonOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case greaterthanorequaltothreshold
        case greaterthanthreshold
        case lessthanorequaltothreshold
        case lessthanthreshold
        case sdkUnknown(Swift.String)

        public static var allCases: [ComparisonOperator] {
            return [
                .greaterthanorequaltothreshold,
                .greaterthanthreshold,
                .lessthanorequaltothreshold,
                .lessthanthreshold,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .greaterthanorequaltothreshold: return "GreaterThanOrEqualToThreshold"
            case .greaterthanthreshold: return "GreaterThanThreshold"
            case .lessthanorequaltothreshold: return "LessThanOrEqualToThreshold"
            case .lessthanthreshold: return "LessThanThreshold"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComparisonOperator(rawValue: rawValue) ?? ComparisonOperator.sdkUnknown(rawValue)
        }
    }
}

extension ConcurrentModification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConcurrentModification(message: \(Swift.String(describing: message)))"}
}

extension ConcurrentModification: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ConcurrentModificationBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Another user submitted a request to create, update, or delete the object at the same time that you did. Retry the request. </p>
public struct ConcurrentModification: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConcurrentModificationBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConcurrentModificationBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConflictingDomainExists: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictingDomainExists(message: \(Swift.String(describing: message)))"}
}

extension ConflictingDomainExists: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ConflictingDomainExistsBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The cause of this error depends on the operation that you're performing:</p>
/// 		       <ul>
///             <li>
///                <p>
///                   <b>Create a public hosted zone:</b> Two hosted zones that have the same name or that have a
/// 				parent/child relationship (example.com and test.example.com) can't have any common name servers. You tried to create a hosted zone
/// 				that has the same name as an existing hosted zone or that's the parent or child of an existing hosted zone, and you specified a
/// 				delegation set that shares one or more name servers with the existing hosted zone. For more information, see
/// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateReusableDelegationSet.html">CreateReusableDelegationSet</a>.</p>
/// 			         </li>
///             <li>
///                <p>
///                   <b>Create a private hosted zone:</b> A hosted zone with the specified name
/// 				already exists and is already associated with the Amazon VPC that you specified.</p>
///             </li>
///             <li>
///                <p>
///                   <b>Associate VPCs with a private hosted zone:</b> The VPC that you specified is
/// 				already associated with another hosted zone that has the same name.</p>
///             </li>
///          </ul>
public struct ConflictingDomainExists: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictingDomainExistsBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictingDomainExistsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConflictingTypes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictingTypes(message: \(Swift.String(describing: message)))"}
}

extension ConflictingTypes: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ConflictingTypesBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You tried to update a traffic policy instance by using a traffic policy version that has a different DNS type
/// 			than the current type for the instance. You specified the type in the JSON document in the <code>CreateTrafficPolicy</code> or
/// 			<code>CreateTrafficPolicyVersion</code>request. </p>
public struct ConflictingTypes: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictingTypesBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictingTypesBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CreateHealthCheckInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateHealthCheckInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateHealthCheckInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateHealthCheckOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateHealthCheckInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateHealthCheckOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateHealthCheckOutputError>
}

extension CreateHealthCheckInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateHealthCheckInput(callerReference: \(Swift.String(describing: callerReference)), healthCheckConfig: \(Swift.String(describing: healthCheckConfig)))"}
}

extension CreateHealthCheckInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension CreateHealthCheckInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case healthCheckConfig = "HealthCheckConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let callerReference = callerReference {
            try container.encode(callerReference, forKey: ClientRuntime.Key("CallerReference"))
        }
        if let healthCheckConfig = healthCheckConfig {
            try container.encode(healthCheckConfig, forKey: ClientRuntime.Key("HealthCheckConfig"))
        }
    }
}

public struct CreateHealthCheckInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateHealthCheckInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateHealthCheckInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateHealthCheckOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateHealthCheckInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateHealthCheckOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateHealthCheckOutputError>
}

public struct CreateHealthCheckInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateHealthCheckInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateHealthCheckInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateHealthCheckOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateHealthCheckInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateHealthCheckOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateHealthCheckOutputError>
}

/// <p>A complex type that contains the health check request information.</p>
public struct CreateHealthCheckInput: Swift.Equatable {
    /// <p>A unique string that identifies the request and that allows you to retry a failed <code>CreateHealthCheck</code> request
    /// 			without the risk of creating two identical health checks:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> and settings
    /// 				as a previous request, and if the health check doesn't exist, Amazon Route 53 creates the health check. If the health check does exist,
    /// 				Route 53 returns the settings for the existing health check.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as a deleted health check,
    /// 				regardless of the settings, Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you send a <code>CreateHealthCheck</code> request with the same <code>CallerReference</code> as an existing health check
    /// 				but with different settings, Route 53 returns a <code>HealthCheckAlreadyExists</code> error.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you send a <code>CreateHealthCheck</code> request with a unique <code>CallerReference</code> but settings identical to
    /// 				an existing health check, Route 53 creates the health check.</p>
    ///             </li>
    ///          </ul>
    public let callerReference: Swift.String?
    /// <p>A complex type that contains settings for a new health check.</p>
    public let healthCheckConfig: Route53ClientTypes.HealthCheckConfig?

    public init (
        callerReference: Swift.String? = nil,
        healthCheckConfig: Route53ClientTypes.HealthCheckConfig? = nil
    )
    {
        self.callerReference = callerReference
        self.healthCheckConfig = healthCheckConfig
    }
}

struct CreateHealthCheckInputBody: Swift.Equatable {
    public let callerReference: Swift.String?
    public let healthCheckConfig: Route53ClientTypes.HealthCheckConfig?
}

extension CreateHealthCheckInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case healthCheckConfig = "HealthCheckConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let callerReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callerReference)
        callerReference = callerReferenceDecoded
        let healthCheckConfigDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HealthCheckConfig.self, forKey: .healthCheckConfig)
        healthCheckConfig = healthCheckConfigDecoded
    }
}

extension CreateHealthCheckOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateHealthCheckOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "HealthCheckAlreadyExists" : self = .healthCheckAlreadyExists(try HealthCheckAlreadyExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyHealthChecks" : self = .tooManyHealthChecks(try TooManyHealthChecks(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateHealthCheckOutputError: Swift.Error, Swift.Equatable {
    case healthCheckAlreadyExists(HealthCheckAlreadyExists)
    case invalidInput(InvalidInput)
    case tooManyHealthChecks(TooManyHealthChecks)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateHealthCheckOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateHealthCheckOutputResponse(healthCheck: \(Swift.String(describing: healthCheck)), location: \(Swift.String(describing: location)))"}
}

extension CreateHealthCheckOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            self.location = locationHeaderValue
        } else {
            self.location = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateHealthCheckOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.healthCheck = output.healthCheck
        } else {
            self.healthCheck = nil
        }
    }
}

/// <p>A complex type containing the response information for the new health check.</p>
public struct CreateHealthCheckOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains identifying information about the health check.</p>
    public let healthCheck: Route53ClientTypes.HealthCheck?
    /// <p>The unique URL representing the new health check.</p>
    public let location: Swift.String?

    public init (
        healthCheck: Route53ClientTypes.HealthCheck? = nil,
        location: Swift.String? = nil
    )
    {
        self.healthCheck = healthCheck
        self.location = location
    }
}

struct CreateHealthCheckOutputResponseBody: Swift.Equatable {
    public let healthCheck: Route53ClientTypes.HealthCheck?
}

extension CreateHealthCheckOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheck = "HealthCheck"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthCheckDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HealthCheck.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
    }
}

public struct CreateHostedZoneInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateHostedZoneInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateHostedZoneOutputError>
}

extension CreateHostedZoneInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateHostedZoneInput(callerReference: \(Swift.String(describing: callerReference)), delegationSetId: \(Swift.String(describing: delegationSetId)), hostedZoneConfig: \(Swift.String(describing: hostedZoneConfig)), name: \(Swift.String(describing: name)), vPC: \(Swift.String(describing: vPC)))"}
}

extension CreateHostedZoneInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension CreateHostedZoneInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case delegationSetId = "DelegationSetId"
        case hostedZoneConfig = "HostedZoneConfig"
        case name = "Name"
        case vPC = "VPC"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let callerReference = callerReference {
            try container.encode(callerReference, forKey: ClientRuntime.Key("CallerReference"))
        }
        if let delegationSetId = delegationSetId {
            try container.encode(delegationSetId, forKey: ClientRuntime.Key("DelegationSetId"))
        }
        if let hostedZoneConfig = hostedZoneConfig {
            try container.encode(hostedZoneConfig, forKey: ClientRuntime.Key("HostedZoneConfig"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let vPC = vPC {
            try container.encode(vPC, forKey: ClientRuntime.Key("VPC"))
        }
    }
}

public struct CreateHostedZoneInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateHostedZoneInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateHostedZoneOutputError>
}

public struct CreateHostedZoneInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateHostedZoneInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateHostedZoneOutputError>
}

/// <p>A complex type that contains information about the request to create a public or private hosted zone.</p>
public struct CreateHostedZoneInput: Swift.Equatable {
    /// <p>A unique string that identifies the request and that allows failed <code>CreateHostedZone</code> requests to be retried without
    /// 			the risk of executing the operation twice. You must use a unique <code>CallerReference</code> string every time you submit a
    /// 			<code>CreateHostedZone</code> request. <code>CallerReference</code> can be any unique string, for example, a date/time stamp.</p>
    public let callerReference: Swift.String?
    /// <p>If you want to associate a reusable delegation set with this hosted zone, the ID that Amazon Route 53 assigned to the reusable delegation set
    /// 			when you created it. For more information about reusable delegation sets, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateReusableDelegationSet.html">CreateReusableDelegationSet</a>.</p>
    public let delegationSetId: Swift.String?
    /// <p>(Optional) A complex type that contains the following optional values:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>For public and private hosted zones, an optional comment</p>
    ///             </li>
    ///             <li>
    ///                <p>For private hosted zones, an optional <code>PrivateZone</code> element</p>
    ///             </li>
    ///          </ul>
    /// 		       <p>If you don't specify a comment or the <code>PrivateZone</code> element, omit <code>HostedZoneConfig</code> and
    /// 			the other elements.</p>
    public let hostedZoneConfig: Route53ClientTypes.HostedZoneConfig?
    /// <p>The name of the domain. Specify a fully qualified domain name, for example, <i>www.example.com</i>.
    /// 			The trailing dot is optional; Amazon Route 53 assumes that the domain name is fully qualified. This means that Route 53 treats
    /// 			<i>www.example.com</i> (without a trailing dot) and <i>www.example.com.</i> (with a trailing dot) as identical.</p>
    /// 		       <p>If you're creating a public hosted zone, this is the name you have registered with your DNS registrar. If your domain name
    /// 			is registered with a registrar other than Route 53, change the name servers for your domain to the set of <code>NameServers</code> that
    /// 			<code>CreateHostedZone</code> returns in <code>DelegationSet</code>.</p>
    public let name: Swift.String?
    /// <p>(Private hosted zones only) A complex type that contains information about the Amazon VPC that you're associating with this hosted zone.</p>
    /// 		       <p>You can specify only one Amazon VPC when you create a private hosted zone. To associate additional Amazon VPCs with the hosted zone,
    /// 			use <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_AssociateVPCWithHostedZone.html">AssociateVPCWithHostedZone</a>
    /// 			after you create a hosted zone.</p>
    public let vPC: Route53ClientTypes.VPC?

    public init (
        callerReference: Swift.String? = nil,
        delegationSetId: Swift.String? = nil,
        hostedZoneConfig: Route53ClientTypes.HostedZoneConfig? = nil,
        name: Swift.String? = nil,
        vPC: Route53ClientTypes.VPC? = nil
    )
    {
        self.callerReference = callerReference
        self.delegationSetId = delegationSetId
        self.hostedZoneConfig = hostedZoneConfig
        self.name = name
        self.vPC = vPC
    }
}

struct CreateHostedZoneInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let vPC: Route53ClientTypes.VPC?
    public let callerReference: Swift.String?
    public let hostedZoneConfig: Route53ClientTypes.HostedZoneConfig?
    public let delegationSetId: Swift.String?
}

extension CreateHostedZoneInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case delegationSetId = "DelegationSetId"
        case hostedZoneConfig = "HostedZoneConfig"
        case name = "Name"
        case vPC = "VPC"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let vPCDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.VPC.self, forKey: .vPC)
        vPC = vPCDecoded
        let callerReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callerReference)
        callerReference = callerReferenceDecoded
        let hostedZoneConfigDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HostedZoneConfig.self, forKey: .hostedZoneConfig)
        hostedZoneConfig = hostedZoneConfigDecoded
        let delegationSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .delegationSetId)
        delegationSetId = delegationSetIdDecoded
    }
}

extension CreateHostedZoneOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateHostedZoneOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingDomainExists" : self = .conflictingDomainExists(try ConflictingDomainExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DelegationSetNotAvailable" : self = .delegationSetNotAvailable(try DelegationSetNotAvailable(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DelegationSetNotReusable" : self = .delegationSetNotReusable(try DelegationSetNotReusable(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HostedZoneAlreadyExists" : self = .hostedZoneAlreadyExists(try HostedZoneAlreadyExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDomainName" : self = .invalidDomainName(try InvalidDomainName(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCId" : self = .invalidVPCId(try InvalidVPCId(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchDelegationSet" : self = .noSuchDelegationSet(try NoSuchDelegationSet(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyHostedZones" : self = .tooManyHostedZones(try TooManyHostedZones(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateHostedZoneOutputError: Swift.Error, Swift.Equatable {
    case conflictingDomainExists(ConflictingDomainExists)
    case delegationSetNotAvailable(DelegationSetNotAvailable)
    case delegationSetNotReusable(DelegationSetNotReusable)
    case hostedZoneAlreadyExists(HostedZoneAlreadyExists)
    case invalidDomainName(InvalidDomainName)
    case invalidInput(InvalidInput)
    case invalidVPCId(InvalidVPCId)
    case noSuchDelegationSet(NoSuchDelegationSet)
    case tooManyHostedZones(TooManyHostedZones)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateHostedZoneOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateHostedZoneOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)), delegationSet: \(Swift.String(describing: delegationSet)), hostedZone: \(Swift.String(describing: hostedZone)), location: \(Swift.String(describing: location)), vPC: \(Swift.String(describing: vPC)))"}
}

extension CreateHostedZoneOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            self.location = locationHeaderValue
        } else {
            self.location = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateHostedZoneOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
            self.delegationSet = output.delegationSet
            self.hostedZone = output.hostedZone
            self.vPC = output.vPC
        } else {
            self.changeInfo = nil
            self.delegationSet = nil
            self.hostedZone = nil
            self.vPC = nil
        }
    }
}

/// <p>A complex type containing the response information for the hosted zone.</p>
public struct CreateHostedZoneOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains information about the <code>CreateHostedZone</code> request.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?
    /// <p>A complex type that describes the name servers for this hosted zone.</p>
    public let delegationSet: Route53ClientTypes.DelegationSet?
    /// <p>A complex type that contains general information about the hosted zone.</p>
    public let hostedZone: Route53ClientTypes.HostedZone?
    /// <p>The unique URL representing the new hosted zone.</p>
    public let location: Swift.String?
    /// <p>A complex type that contains information about an Amazon VPC that you associated with this hosted zone.</p>
    public let vPC: Route53ClientTypes.VPC?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil,
        delegationSet: Route53ClientTypes.DelegationSet? = nil,
        hostedZone: Route53ClientTypes.HostedZone? = nil,
        location: Swift.String? = nil,
        vPC: Route53ClientTypes.VPC? = nil
    )
    {
        self.changeInfo = changeInfo
        self.delegationSet = delegationSet
        self.hostedZone = hostedZone
        self.location = location
        self.vPC = vPC
    }
}

struct CreateHostedZoneOutputResponseBody: Swift.Equatable {
    public let hostedZone: Route53ClientTypes.HostedZone?
    public let changeInfo: Route53ClientTypes.ChangeInfo?
    public let delegationSet: Route53ClientTypes.DelegationSet?
    public let vPC: Route53ClientTypes.VPC?
}

extension CreateHostedZoneOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
        case delegationSet = "DelegationSet"
        case hostedZone = "HostedZone"
        case vPC = "VPC"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HostedZone.self, forKey: .hostedZone)
        hostedZone = hostedZoneDecoded
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
        let delegationSetDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.DelegationSet.self, forKey: .delegationSet)
        delegationSet = delegationSetDecoded
        let vPCDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.VPC.self, forKey: .vPC)
        vPC = vPCDecoded
    }
}

public struct CreateKeySigningKeyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateKeySigningKeyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateKeySigningKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateKeySigningKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateKeySigningKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateKeySigningKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateKeySigningKeyOutputError>
}

extension CreateKeySigningKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateKeySigningKeyInput(callerReference: \(Swift.String(describing: callerReference)), hostedZoneId: \(Swift.String(describing: hostedZoneId)), keyManagementServiceArn: \(Swift.String(describing: keyManagementServiceArn)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)))"}
}

extension CreateKeySigningKeyInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension CreateKeySigningKeyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case hostedZoneId = "HostedZoneId"
        case keyManagementServiceArn = "KeyManagementServiceArn"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let callerReference = callerReference {
            try container.encode(callerReference, forKey: ClientRuntime.Key("CallerReference"))
        }
        if let hostedZoneId = hostedZoneId {
            try container.encode(hostedZoneId, forKey: ClientRuntime.Key("HostedZoneId"))
        }
        if let keyManagementServiceArn = keyManagementServiceArn {
            try container.encode(keyManagementServiceArn, forKey: ClientRuntime.Key("KeyManagementServiceArn"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }
}

public struct CreateKeySigningKeyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateKeySigningKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateKeySigningKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateKeySigningKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateKeySigningKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateKeySigningKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateKeySigningKeyOutputError>
}

public struct CreateKeySigningKeyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateKeySigningKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateKeySigningKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateKeySigningKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateKeySigningKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateKeySigningKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateKeySigningKeyOutputError>
}

public struct CreateKeySigningKeyInput: Swift.Equatable {
    /// <p>A unique string that identifies the request.</p>
    public let callerReference: Swift.String?
    /// <p>The unique string (ID) used to identify a hosted zone.</p>
    public let hostedZoneId: Swift.String?
    /// <p>The Amazon resource name (ARN) for a customer managed customer master key (CMK) in AWS Key Management Service (AWS KMS).
    /// 			The <code>KeyManagementServiceArn</code> must be unique for each key-signing key (KSK) in a single hosted zone.
    /// 			To see an example of <code>KeyManagementServiceArn</code> that grants the correct permissions for DNSSEC,
    /// 			scroll down to <b>Example</b>. </p>
    /// 		       <p>You must configure the customer managed CMK as follows:</p>
    /// 		       <dl>
    ///             <dt>Status</dt>
    ///             <dd>
    ///                <p>Enabled</p>
    ///             </dd>
    ///             <dt>Key spec</dt>
    ///             <dd>
    ///                <p>ECC_NIST_P256</p>
    ///             </dd>
    ///             <dt>Key usage</dt>
    ///             <dd>
    ///                <p>Sign and verify</p>
    ///             </dd>
    ///             <dt>Key policy</dt>
    ///             <dd>
    ///                <p>The key policy must give permission for the following actions:</p>
    /// 					          <ul>
    ///                   <li>
    ///                      <p>DescribeKey</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>GetPublicKey</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Sign</p>
    ///                   </li>
    ///                </ul>
    /// 					          <p>The key policy must also include the Amazon Route 53 service in the principal for your account.
    /// 						Specify the following:</p>
    /// 					          <ul>
    ///                   <li>
    ///                      <p>
    ///                         <code>"Service": "dnssec.route53.aws.amazonaws.com"</code>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    /// 				        </dd>
    ///          </dl>
    /// 		       <p>For more information about working with a customer managed CMK in AWS KMS, see
    /// 			<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html">AWS Key Management Service concepts</a>.</p>
    public let keyManagementServiceArn: Swift.String?
    /// <p>A string used to identify a key-signing key (KSK). <code>Name</code> can include numbers, letters,  and underscores (_). <code>Name</code> must be unique for each key-signing key in the same
    /// 			hosted zone.</p>
    public let name: Swift.String?
    /// <p>A string specifying the initial status of the key-signing key (KSK). You can set the value to <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    public let status: Swift.String?

    public init (
        callerReference: Swift.String? = nil,
        hostedZoneId: Swift.String? = nil,
        keyManagementServiceArn: Swift.String? = nil,
        name: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.callerReference = callerReference
        self.hostedZoneId = hostedZoneId
        self.keyManagementServiceArn = keyManagementServiceArn
        self.name = name
        self.status = status
    }
}

struct CreateKeySigningKeyInputBody: Swift.Equatable {
    public let callerReference: Swift.String?
    public let hostedZoneId: Swift.String?
    public let keyManagementServiceArn: Swift.String?
    public let name: Swift.String?
    public let status: Swift.String?
}

extension CreateKeySigningKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case hostedZoneId = "HostedZoneId"
        case keyManagementServiceArn = "KeyManagementServiceArn"
        case name = "Name"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let callerReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callerReference)
        callerReference = callerReferenceDecoded
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let keyManagementServiceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyManagementServiceArn)
        keyManagementServiceArn = keyManagementServiceArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension CreateKeySigningKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateKeySigningKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArgument" : self = .invalidArgument(try InvalidArgument(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeySigningKeyName" : self = .invalidKeySigningKeyName(try InvalidKeySigningKeyName(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeySigningKeyStatus" : self = .invalidKeySigningKeyStatus(try InvalidKeySigningKeyStatus(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSArn" : self = .invalidKMSArn(try InvalidKMSArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSigningStatus" : self = .invalidSigningStatus(try InvalidSigningStatus(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeySigningKeyAlreadyExists" : self = .keySigningKeyAlreadyExists(try KeySigningKeyAlreadyExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyKeySigningKeys" : self = .tooManyKeySigningKeys(try TooManyKeySigningKeys(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateKeySigningKeyOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case invalidArgument(InvalidArgument)
    case invalidInput(InvalidInput)
    case invalidKeySigningKeyName(InvalidKeySigningKeyName)
    case invalidKeySigningKeyStatus(InvalidKeySigningKeyStatus)
    case invalidKMSArn(InvalidKMSArn)
    case invalidSigningStatus(InvalidSigningStatus)
    case keySigningKeyAlreadyExists(KeySigningKeyAlreadyExists)
    case noSuchHostedZone(NoSuchHostedZone)
    case tooManyKeySigningKeys(TooManyKeySigningKeys)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateKeySigningKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateKeySigningKeyOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)), keySigningKey: \(Swift.String(describing: keySigningKey)), location: \(Swift.String(describing: location)))"}
}

extension CreateKeySigningKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            self.location = locationHeaderValue
        } else {
            self.location = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateKeySigningKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
            self.keySigningKey = output.keySigningKey
        } else {
            self.changeInfo = nil
            self.keySigningKey = nil
        }
    }
}

public struct CreateKeySigningKeyOutputResponse: Swift.Equatable {
    /// <p>A complex type that describes change information about changes made to your hosted
    /// 			zone.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?
    /// <p>The key-signing key (KSK) that the request creates.</p>
    public let keySigningKey: Route53ClientTypes.KeySigningKey?
    /// <p>The unique URL representing the new key-signing key (KSK).</p>
    public let location: Swift.String?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil,
        keySigningKey: Route53ClientTypes.KeySigningKey? = nil,
        location: Swift.String? = nil
    )
    {
        self.changeInfo = changeInfo
        self.keySigningKey = keySigningKey
        self.location = location
    }
}

struct CreateKeySigningKeyOutputResponseBody: Swift.Equatable {
    public let changeInfo: Route53ClientTypes.ChangeInfo?
    public let keySigningKey: Route53ClientTypes.KeySigningKey?
}

extension CreateKeySigningKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
        case keySigningKey = "KeySigningKey"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
        let keySigningKeyDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.KeySigningKey.self, forKey: .keySigningKey)
        keySigningKey = keySigningKeyDecoded
    }
}

public struct CreateQueryLoggingConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateQueryLoggingConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateQueryLoggingConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateQueryLoggingConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateQueryLoggingConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateQueryLoggingConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateQueryLoggingConfigOutputError>
}

extension CreateQueryLoggingConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateQueryLoggingConfigInput(cloudWatchLogsLogGroupArn: \(Swift.String(describing: cloudWatchLogsLogGroupArn)), hostedZoneId: \(Swift.String(describing: hostedZoneId)))"}
}

extension CreateQueryLoggingConfigInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension CreateQueryLoggingConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
        case hostedZoneId = "HostedZoneId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn {
            try container.encode(cloudWatchLogsLogGroupArn, forKey: ClientRuntime.Key("CloudWatchLogsLogGroupArn"))
        }
        if let hostedZoneId = hostedZoneId {
            try container.encode(hostedZoneId, forKey: ClientRuntime.Key("HostedZoneId"))
        }
    }
}

public struct CreateQueryLoggingConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateQueryLoggingConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateQueryLoggingConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateQueryLoggingConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateQueryLoggingConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateQueryLoggingConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateQueryLoggingConfigOutputError>
}

public struct CreateQueryLoggingConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateQueryLoggingConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateQueryLoggingConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateQueryLoggingConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateQueryLoggingConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateQueryLoggingConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateQueryLoggingConfigOutputError>
}

public struct CreateQueryLoggingConfigInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) for the log group that you want to Amazon Route 53 to send query logs to. This is the format
    /// 			of the ARN:</p>
    /// 		
    /// 		       <p>arn:aws:logs:<i>region</i>:<i>account-id</i>:log-group:<i>log_group_name</i>
    ///          </p>
    /// 		
    /// 		       <p>To get the ARN for a log group, you can use the CloudWatch console, the
    /// 			<a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeLogGroups.html">DescribeLogGroups</a> API action,
    /// 			the <a href="https://docs.aws.amazon.com/cli/latest/reference/logs/describe-log-groups.html">describe-log-groups</a> command,
    /// 			or the applicable command in one of the AWS SDKs.</p>
    public let cloudWatchLogsLogGroupArn: Swift.String?
    /// <p>The ID of the hosted zone that you want to log queries for. You can log queries only for public hosted zones.</p>
    public let hostedZoneId: Swift.String?

    public init (
        cloudWatchLogsLogGroupArn: Swift.String? = nil,
        hostedZoneId: Swift.String? = nil
    )
    {
        self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
        self.hostedZoneId = hostedZoneId
    }
}

struct CreateQueryLoggingConfigInputBody: Swift.Equatable {
    public let hostedZoneId: Swift.String?
    public let cloudWatchLogsLogGroupArn: Swift.String?
}

extension CreateQueryLoggingConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
        case hostedZoneId = "HostedZoneId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let cloudWatchLogsLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogsLogGroupArn)
        cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArnDecoded
    }
}

extension CreateQueryLoggingConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateQueryLoggingConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCloudWatchLogsResourcePolicy" : self = .insufficientCloudWatchLogsResourcePolicy(try InsufficientCloudWatchLogsResourcePolicy(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchCloudWatchLogsLogGroup" : self = .noSuchCloudWatchLogsLogGroup(try NoSuchCloudWatchLogsLogGroup(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "QueryLoggingConfigAlreadyExists" : self = .queryLoggingConfigAlreadyExists(try QueryLoggingConfigAlreadyExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateQueryLoggingConfigOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case insufficientCloudWatchLogsResourcePolicy(InsufficientCloudWatchLogsResourcePolicy)
    case invalidInput(InvalidInput)
    case noSuchCloudWatchLogsLogGroup(NoSuchCloudWatchLogsLogGroup)
    case noSuchHostedZone(NoSuchHostedZone)
    case queryLoggingConfigAlreadyExists(QueryLoggingConfigAlreadyExists)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateQueryLoggingConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateQueryLoggingConfigOutputResponse(location: \(Swift.String(describing: location)), queryLoggingConfig: \(Swift.String(describing: queryLoggingConfig)))"}
}

extension CreateQueryLoggingConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            self.location = locationHeaderValue
        } else {
            self.location = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateQueryLoggingConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.queryLoggingConfig = output.queryLoggingConfig
        } else {
            self.queryLoggingConfig = nil
        }
    }
}

public struct CreateQueryLoggingConfigOutputResponse: Swift.Equatable {
    /// <p>The unique URL representing the new query logging configuration.</p>
    public let location: Swift.String?
    /// <p>A complex type that contains the ID for a query logging configuration, the ID of the hosted zone that you want to
    /// 			log queries for, and the ARN for the log group that you want Amazon Route 53 to send query logs to.</p>
    public let queryLoggingConfig: Route53ClientTypes.QueryLoggingConfig?

    public init (
        location: Swift.String? = nil,
        queryLoggingConfig: Route53ClientTypes.QueryLoggingConfig? = nil
    )
    {
        self.location = location
        self.queryLoggingConfig = queryLoggingConfig
    }
}

struct CreateQueryLoggingConfigOutputResponseBody: Swift.Equatable {
    public let queryLoggingConfig: Route53ClientTypes.QueryLoggingConfig?
}

extension CreateQueryLoggingConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryLoggingConfig = "QueryLoggingConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryLoggingConfigDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.QueryLoggingConfig.self, forKey: .queryLoggingConfig)
        queryLoggingConfig = queryLoggingConfigDecoded
    }
}

public struct CreateReusableDelegationSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReusableDelegationSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReusableDelegationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReusableDelegationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReusableDelegationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReusableDelegationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReusableDelegationSetOutputError>
}

extension CreateReusableDelegationSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateReusableDelegationSetInput(callerReference: \(Swift.String(describing: callerReference)), hostedZoneId: \(Swift.String(describing: hostedZoneId)))"}
}

extension CreateReusableDelegationSetInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension CreateReusableDelegationSetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case hostedZoneId = "HostedZoneId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let callerReference = callerReference {
            try container.encode(callerReference, forKey: ClientRuntime.Key("CallerReference"))
        }
        if let hostedZoneId = hostedZoneId {
            try container.encode(hostedZoneId, forKey: ClientRuntime.Key("HostedZoneId"))
        }
    }
}

public struct CreateReusableDelegationSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReusableDelegationSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReusableDelegationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReusableDelegationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReusableDelegationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReusableDelegationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReusableDelegationSetOutputError>
}

public struct CreateReusableDelegationSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateReusableDelegationSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateReusableDelegationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateReusableDelegationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateReusableDelegationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateReusableDelegationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateReusableDelegationSetOutputError>
}

public struct CreateReusableDelegationSetInput: Swift.Equatable {
    /// <p>A unique string that identifies the request, and that allows you to retry failed
    /// 			<code>CreateReusableDelegationSet</code> requests without the risk of executing the
    /// 			operation twice. You must use a unique <code>CallerReference</code> string every time you
    /// 			submit a <code>CreateReusableDelegationSet</code> request. <code>CallerReference</code> can be
    /// 			any unique string, for example a date/time stamp.</p>
    public let callerReference: Swift.String?
    /// <p>If you want to mark the delegation set for an existing hosted zone as reusable, the ID
    /// 			for that hosted zone.</p>
    public let hostedZoneId: Swift.String?

    public init (
        callerReference: Swift.String? = nil,
        hostedZoneId: Swift.String? = nil
    )
    {
        self.callerReference = callerReference
        self.hostedZoneId = hostedZoneId
    }
}

struct CreateReusableDelegationSetInputBody: Swift.Equatable {
    public let callerReference: Swift.String?
    public let hostedZoneId: Swift.String?
}

extension CreateReusableDelegationSetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case hostedZoneId = "HostedZoneId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let callerReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callerReference)
        callerReference = callerReferenceDecoded
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
    }
}

extension CreateReusableDelegationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateReusableDelegationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DelegationSetAlreadyCreated" : self = .delegationSetAlreadyCreated(try DelegationSetAlreadyCreated(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DelegationSetAlreadyReusable" : self = .delegationSetAlreadyReusable(try DelegationSetAlreadyReusable(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DelegationSetNotAvailable" : self = .delegationSetNotAvailable(try DelegationSetNotAvailable(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HostedZoneNotFound" : self = .hostedZoneNotFound(try HostedZoneNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArgument" : self = .invalidArgument(try InvalidArgument(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitsExceeded" : self = .limitsExceeded(try LimitsExceeded(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateReusableDelegationSetOutputError: Swift.Error, Swift.Equatable {
    case delegationSetAlreadyCreated(DelegationSetAlreadyCreated)
    case delegationSetAlreadyReusable(DelegationSetAlreadyReusable)
    case delegationSetNotAvailable(DelegationSetNotAvailable)
    case hostedZoneNotFound(HostedZoneNotFound)
    case invalidArgument(InvalidArgument)
    case invalidInput(InvalidInput)
    case limitsExceeded(LimitsExceeded)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateReusableDelegationSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateReusableDelegationSetOutputResponse(delegationSet: \(Swift.String(describing: delegationSet)), location: \(Swift.String(describing: location)))"}
}

extension CreateReusableDelegationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            self.location = locationHeaderValue
        } else {
            self.location = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateReusableDelegationSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.delegationSet = output.delegationSet
        } else {
            self.delegationSet = nil
        }
    }
}

public struct CreateReusableDelegationSetOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains name server information.</p>
    public let delegationSet: Route53ClientTypes.DelegationSet?
    /// <p>The unique URL representing the new reusable delegation set.</p>
    public let location: Swift.String?

    public init (
        delegationSet: Route53ClientTypes.DelegationSet? = nil,
        location: Swift.String? = nil
    )
    {
        self.delegationSet = delegationSet
        self.location = location
    }
}

struct CreateReusableDelegationSetOutputResponseBody: Swift.Equatable {
    public let delegationSet: Route53ClientTypes.DelegationSet?
}

extension CreateReusableDelegationSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delegationSet = "DelegationSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let delegationSetDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.DelegationSet.self, forKey: .delegationSet)
        delegationSet = delegationSetDecoded
    }
}

public struct CreateTrafficPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrafficPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrafficPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrafficPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrafficPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrafficPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrafficPolicyOutputError>
}

extension CreateTrafficPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTrafficPolicyInput(comment: \(Swift.String(describing: comment)), document: \(Swift.String(describing: document)), name: \(Swift.String(describing: name)))"}
}

extension CreateTrafficPolicyInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension CreateTrafficPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case document = "Document"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let comment = comment {
            try container.encode(comment, forKey: ClientRuntime.Key("Comment"))
        }
        if let document = document {
            try container.encode(document, forKey: ClientRuntime.Key("Document"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
    }
}

public struct CreateTrafficPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrafficPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrafficPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrafficPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrafficPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrafficPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrafficPolicyOutputError>
}

public struct CreateTrafficPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrafficPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrafficPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrafficPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrafficPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrafficPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrafficPolicyOutputError>
}

/// <p>A complex type that contains information about the traffic policy that you want to create.</p>
public struct CreateTrafficPolicyInput: Swift.Equatable {
    /// <p>(Optional) Any comments that you want to include about the traffic policy.</p>
    public let comment: Swift.String?
    /// <p>The definition of this traffic policy in JSON format. For more information, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/api-policies-traffic-policy-document-format.html">Traffic Policy Document Format</a>.</p>
    public let document: Swift.String?
    /// <p>The name of the traffic policy.</p>
    public let name: Swift.String?

    public init (
        comment: Swift.String? = nil,
        document: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.comment = comment
        self.document = document
        self.name = name
    }
}

struct CreateTrafficPolicyInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let document: Swift.String?
    public let comment: Swift.String?
}

extension CreateTrafficPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case document = "Document"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let documentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .document)
        document = documentDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
    }
}

public struct CreateTrafficPolicyInstanceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrafficPolicyInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrafficPolicyInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrafficPolicyInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrafficPolicyInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrafficPolicyInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrafficPolicyInstanceOutputError>
}

extension CreateTrafficPolicyInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTrafficPolicyInstanceInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)), name: \(Swift.String(describing: name)), tTL: \(Swift.String(describing: tTL)), trafficPolicyId: \(Swift.String(describing: trafficPolicyId)), trafficPolicyVersion: \(Swift.String(describing: trafficPolicyVersion)))"}
}

extension CreateTrafficPolicyInstanceInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension CreateTrafficPolicyInstanceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZoneId = "HostedZoneId"
        case name = "Name"
        case tTL = "TTL"
        case trafficPolicyId = "TrafficPolicyId"
        case trafficPolicyVersion = "TrafficPolicyVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let hostedZoneId = hostedZoneId {
            try container.encode(hostedZoneId, forKey: ClientRuntime.Key("HostedZoneId"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let tTL = tTL {
            try container.encode(tTL, forKey: ClientRuntime.Key("TTL"))
        }
        if let trafficPolicyId = trafficPolicyId {
            try container.encode(trafficPolicyId, forKey: ClientRuntime.Key("TrafficPolicyId"))
        }
        if let trafficPolicyVersion = trafficPolicyVersion {
            try container.encode(trafficPolicyVersion, forKey: ClientRuntime.Key("TrafficPolicyVersion"))
        }
    }
}

public struct CreateTrafficPolicyInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrafficPolicyInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrafficPolicyInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrafficPolicyInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrafficPolicyInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrafficPolicyInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrafficPolicyInstanceOutputError>
}

public struct CreateTrafficPolicyInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrafficPolicyInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrafficPolicyInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrafficPolicyInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrafficPolicyInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrafficPolicyInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrafficPolicyInstanceOutputError>
}

/// <p>A complex type that contains information about the resource record sets that you want to create based on a specified traffic policy.</p>
public struct CreateTrafficPolicyInstanceInput: Swift.Equatable {
    /// <p>The ID of the hosted zone that you want Amazon Route 53 to create resource record sets in by using the configuration in a traffic policy.</p>
    public let hostedZoneId: Swift.String?
    /// <p>The domain name (such as example.com) or subdomain name (such as www.example.com) for which Amazon Route 53 responds to DNS queries by using
    /// 			the resource record sets that Route 53 creates for this traffic policy instance.</p>
    public let name: Swift.String?
    /// <p>(Optional) The TTL that you want Amazon Route 53 to assign to all of the resource record sets that it creates in the specified hosted zone.</p>
    public let tTL: Swift.Int?
    /// <p>The ID of the traffic policy that you want to use to create resource record sets in the specified hosted zone.</p>
    public let trafficPolicyId: Swift.String?
    /// <p>The version of the traffic policy that you want to use to create resource record sets in the specified hosted zone.</p>
    public let trafficPolicyVersion: Swift.Int?

    public init (
        hostedZoneId: Swift.String? = nil,
        name: Swift.String? = nil,
        tTL: Swift.Int? = nil,
        trafficPolicyId: Swift.String? = nil,
        trafficPolicyVersion: Swift.Int? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.name = name
        self.tTL = tTL
        self.trafficPolicyId = trafficPolicyId
        self.trafficPolicyVersion = trafficPolicyVersion
    }
}

struct CreateTrafficPolicyInstanceInputBody: Swift.Equatable {
    public let hostedZoneId: Swift.String?
    public let name: Swift.String?
    public let tTL: Swift.Int?
    public let trafficPolicyId: Swift.String?
    public let trafficPolicyVersion: Swift.Int?
}

extension CreateTrafficPolicyInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZoneId = "HostedZoneId"
        case name = "Name"
        case tTL = "TTL"
        case trafficPolicyId = "TrafficPolicyId"
        case trafficPolicyVersion = "TrafficPolicyVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let tTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tTL)
        tTL = tTLDecoded
        let trafficPolicyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficPolicyId)
        trafficPolicyId = trafficPolicyIdDecoded
        let trafficPolicyVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .trafficPolicyVersion)
        trafficPolicyVersion = trafficPolicyVersionDecoded
    }
}

extension CreateTrafficPolicyInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateTrafficPolicyInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicy" : self = .noSuchTrafficPolicy(try NoSuchTrafficPolicy(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTrafficPolicyInstances" : self = .tooManyTrafficPolicyInstances(try TooManyTrafficPolicyInstances(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TrafficPolicyInstanceAlreadyExists" : self = .trafficPolicyInstanceAlreadyExists(try TrafficPolicyInstanceAlreadyExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTrafficPolicyInstanceOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchHostedZone(NoSuchHostedZone)
    case noSuchTrafficPolicy(NoSuchTrafficPolicy)
    case tooManyTrafficPolicyInstances(TooManyTrafficPolicyInstances)
    case trafficPolicyInstanceAlreadyExists(TrafficPolicyInstanceAlreadyExists)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTrafficPolicyInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTrafficPolicyInstanceOutputResponse(location: \(Swift.String(describing: location)), trafficPolicyInstance: \(Swift.String(describing: trafficPolicyInstance)))"}
}

extension CreateTrafficPolicyInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            self.location = locationHeaderValue
        } else {
            self.location = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTrafficPolicyInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trafficPolicyInstance = output.trafficPolicyInstance
        } else {
            self.trafficPolicyInstance = nil
        }
    }
}

/// <p>A complex type that contains the response information for the <code>CreateTrafficPolicyInstance</code> request.</p>
public struct CreateTrafficPolicyInstanceOutputResponse: Swift.Equatable {
    /// <p>A unique URL that represents a new traffic policy instance.</p>
    public let location: Swift.String?
    /// <p>A complex type that contains settings for the new traffic policy instance.</p>
    public let trafficPolicyInstance: Route53ClientTypes.TrafficPolicyInstance?

    public init (
        location: Swift.String? = nil,
        trafficPolicyInstance: Route53ClientTypes.TrafficPolicyInstance? = nil
    )
    {
        self.location = location
        self.trafficPolicyInstance = trafficPolicyInstance
    }
}

struct CreateTrafficPolicyInstanceOutputResponseBody: Swift.Equatable {
    public let trafficPolicyInstance: Route53ClientTypes.TrafficPolicyInstance?
}

extension CreateTrafficPolicyInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trafficPolicyInstance = "TrafficPolicyInstance"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficPolicyInstanceDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.TrafficPolicyInstance.self, forKey: .trafficPolicyInstance)
        trafficPolicyInstance = trafficPolicyInstanceDecoded
    }
}

extension CreateTrafficPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateTrafficPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrafficPolicyDocument" : self = .invalidTrafficPolicyDocument(try InvalidTrafficPolicyDocument(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTrafficPolicies" : self = .tooManyTrafficPolicies(try TooManyTrafficPolicies(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TrafficPolicyAlreadyExists" : self = .trafficPolicyAlreadyExists(try TrafficPolicyAlreadyExists(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTrafficPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case invalidTrafficPolicyDocument(InvalidTrafficPolicyDocument)
    case tooManyTrafficPolicies(TooManyTrafficPolicies)
    case trafficPolicyAlreadyExists(TrafficPolicyAlreadyExists)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTrafficPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTrafficPolicyOutputResponse(location: \(Swift.String(describing: location)), trafficPolicy: \(Swift.String(describing: trafficPolicy)))"}
}

extension CreateTrafficPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            self.location = locationHeaderValue
        } else {
            self.location = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTrafficPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trafficPolicy = output.trafficPolicy
        } else {
            self.trafficPolicy = nil
        }
    }
}

/// <p>A complex type that contains the response information for the <code>CreateTrafficPolicy</code> request.</p>
public struct CreateTrafficPolicyOutputResponse: Swift.Equatable {
    /// <p>A unique URL that represents a new traffic policy.</p>
    public let location: Swift.String?
    /// <p>A complex type that contains settings for the new traffic policy.</p>
    public let trafficPolicy: Route53ClientTypes.TrafficPolicy?

    public init (
        location: Swift.String? = nil,
        trafficPolicy: Route53ClientTypes.TrafficPolicy? = nil
    )
    {
        self.location = location
        self.trafficPolicy = trafficPolicy
    }
}

struct CreateTrafficPolicyOutputResponseBody: Swift.Equatable {
    public let trafficPolicy: Route53ClientTypes.TrafficPolicy?
}

extension CreateTrafficPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trafficPolicy = "TrafficPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficPolicyDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.TrafficPolicy.self, forKey: .trafficPolicy)
        trafficPolicy = trafficPolicyDecoded
    }
}

public struct CreateTrafficPolicyVersionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrafficPolicyVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrafficPolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrafficPolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrafficPolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrafficPolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrafficPolicyVersionOutputError>
}

extension CreateTrafficPolicyVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTrafficPolicyVersionInput(comment: \(Swift.String(describing: comment)), document: \(Swift.String(describing: document)), id: \(Swift.String(describing: id)))"}
}

extension CreateTrafficPolicyVersionInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension CreateTrafficPolicyVersionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case document = "Document"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let comment = comment {
            try container.encode(comment, forKey: ClientRuntime.Key("Comment"))
        }
        if let document = document {
            try container.encode(document, forKey: ClientRuntime.Key("Document"))
        }
    }
}

public struct CreateTrafficPolicyVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrafficPolicyVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrafficPolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrafficPolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrafficPolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrafficPolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrafficPolicyVersionOutputError>
}

public struct CreateTrafficPolicyVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrafficPolicyVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrafficPolicyVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrafficPolicyVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrafficPolicyVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrafficPolicyVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrafficPolicyVersionOutputError>
}

/// <p>A complex type that contains information about the traffic policy that you want to create a new version for.</p>
public struct CreateTrafficPolicyVersionInput: Swift.Equatable {
    /// <p>The comment that you specified in the <code>CreateTrafficPolicyVersion</code> request, if any.</p>
    public let comment: Swift.String?
    /// <p>The definition of this version of the traffic policy, in JSON format. You specified the JSON in the <code>CreateTrafficPolicyVersion</code>
    /// 			request. For more information about the JSON format, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateTrafficPolicy.html">CreateTrafficPolicy</a>.</p>
    public let document: Swift.String?
    /// <p>The ID of the traffic policy for which you want to create a new version.</p>
    public let id: Swift.String?

    public init (
        comment: Swift.String? = nil,
        document: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.comment = comment
        self.document = document
        self.id = id
    }
}

struct CreateTrafficPolicyVersionInputBody: Swift.Equatable {
    public let document: Swift.String?
    public let comment: Swift.String?
}

extension CreateTrafficPolicyVersionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case document = "Document"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .document)
        document = documentDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
    }
}

extension CreateTrafficPolicyVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateTrafficPolicyVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTrafficPolicyDocument" : self = .invalidTrafficPolicyDocument(try InvalidTrafficPolicyDocument(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicy" : self = .noSuchTrafficPolicy(try NoSuchTrafficPolicy(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTrafficPolicyVersionsForCurrentPolicy" : self = .tooManyTrafficPolicyVersionsForCurrentPolicy(try TooManyTrafficPolicyVersionsForCurrentPolicy(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTrafficPolicyVersionOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case invalidInput(InvalidInput)
    case invalidTrafficPolicyDocument(InvalidTrafficPolicyDocument)
    case noSuchTrafficPolicy(NoSuchTrafficPolicy)
    case tooManyTrafficPolicyVersionsForCurrentPolicy(TooManyTrafficPolicyVersionsForCurrentPolicy)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTrafficPolicyVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTrafficPolicyVersionOutputResponse(location: \(Swift.String(describing: location)), trafficPolicy: \(Swift.String(describing: trafficPolicy)))"}
}

extension CreateTrafficPolicyVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if let locationHeaderValue = httpResponse.headers.value(for: "Location") {
            self.location = locationHeaderValue
        } else {
            self.location = nil
        }
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTrafficPolicyVersionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trafficPolicy = output.trafficPolicy
        } else {
            self.trafficPolicy = nil
        }
    }
}

/// <p>A complex type that contains the response information for the <code>CreateTrafficPolicyVersion</code> request.</p>
public struct CreateTrafficPolicyVersionOutputResponse: Swift.Equatable {
    /// <p>A unique URL that represents a new traffic policy version.</p>
    public let location: Swift.String?
    /// <p>A complex type that contains settings for the new version of the traffic policy.</p>
    public let trafficPolicy: Route53ClientTypes.TrafficPolicy?

    public init (
        location: Swift.String? = nil,
        trafficPolicy: Route53ClientTypes.TrafficPolicy? = nil
    )
    {
        self.location = location
        self.trafficPolicy = trafficPolicy
    }
}

struct CreateTrafficPolicyVersionOutputResponseBody: Swift.Equatable {
    public let trafficPolicy: Route53ClientTypes.TrafficPolicy?
}

extension CreateTrafficPolicyVersionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trafficPolicy = "TrafficPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficPolicyDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.TrafficPolicy.self, forKey: .trafficPolicy)
        trafficPolicy = trafficPolicyDecoded
    }
}

public struct CreateVPCAssociationAuthorizationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVPCAssociationAuthorizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVPCAssociationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVPCAssociationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVPCAssociationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVPCAssociationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVPCAssociationAuthorizationOutputError>
}

extension CreateVPCAssociationAuthorizationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVPCAssociationAuthorizationInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)), vPC: \(Swift.String(describing: vPC)))"}
}

extension CreateVPCAssociationAuthorizationInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension CreateVPCAssociationAuthorizationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vPC = "VPC"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let vPC = vPC {
            try container.encode(vPC, forKey: ClientRuntime.Key("VPC"))
        }
    }
}

public struct CreateVPCAssociationAuthorizationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVPCAssociationAuthorizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVPCAssociationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVPCAssociationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVPCAssociationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVPCAssociationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVPCAssociationAuthorizationOutputError>
}

public struct CreateVPCAssociationAuthorizationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVPCAssociationAuthorizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVPCAssociationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVPCAssociationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVPCAssociationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVPCAssociationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVPCAssociationAuthorizationOutputError>
}

/// <p>A complex type that contains information about the request to authorize associating a VPC with your private hosted zone.
/// 			Authorization is only required when a private hosted zone and a VPC were created by using different accounts.</p>
public struct CreateVPCAssociationAuthorizationInput: Swift.Equatable {
    /// <p>The ID of the private hosted zone that you want to authorize associating a VPC with.</p>
    public let hostedZoneId: Swift.String?
    /// <p>A complex type that contains the VPC ID and region for the VPC that you want to authorize associating
    /// 			with your hosted zone.</p>
    public let vPC: Route53ClientTypes.VPC?

    public init (
        hostedZoneId: Swift.String? = nil,
        vPC: Route53ClientTypes.VPC? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.vPC = vPC
    }
}

struct CreateVPCAssociationAuthorizationInputBody: Swift.Equatable {
    public let vPC: Route53ClientTypes.VPC?
}

extension CreateVPCAssociationAuthorizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vPC = "VPC"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vPCDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.VPC.self, forKey: .vPC)
        vPC = vPCDecoded
    }
}

extension CreateVPCAssociationAuthorizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateVPCAssociationAuthorizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCId" : self = .invalidVPCId(try InvalidVPCId(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyVPCAssociationAuthorizations" : self = .tooManyVPCAssociationAuthorizations(try TooManyVPCAssociationAuthorizations(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVPCAssociationAuthorizationOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case invalidInput(InvalidInput)
    case invalidVPCId(InvalidVPCId)
    case noSuchHostedZone(NoSuchHostedZone)
    case tooManyVPCAssociationAuthorizations(TooManyVPCAssociationAuthorizations)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVPCAssociationAuthorizationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVPCAssociationAuthorizationOutputResponse(hostedZoneId: \(Swift.String(describing: hostedZoneId)), vPC: \(Swift.String(describing: vPC)))"}
}

extension CreateVPCAssociationAuthorizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateVPCAssociationAuthorizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hostedZoneId = output.hostedZoneId
            self.vPC = output.vPC
        } else {
            self.hostedZoneId = nil
            self.vPC = nil
        }
    }
}

/// <p>A complex type that contains the response information from a <code>CreateVPCAssociationAuthorization</code> request.</p>
public struct CreateVPCAssociationAuthorizationOutputResponse: Swift.Equatable {
    /// <p>The ID of the hosted zone that you authorized associating a VPC with.</p>
    public let hostedZoneId: Swift.String?
    /// <p>The VPC that you authorized associating with a hosted zone.</p>
    public let vPC: Route53ClientTypes.VPC?

    public init (
        hostedZoneId: Swift.String? = nil,
        vPC: Route53ClientTypes.VPC? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.vPC = vPC
    }
}

struct CreateVPCAssociationAuthorizationOutputResponseBody: Swift.Equatable {
    public let hostedZoneId: Swift.String?
    public let vPC: Route53ClientTypes.VPC?
}

extension CreateVPCAssociationAuthorizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZoneId = "HostedZoneId"
        case vPC = "VPC"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let vPCDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.VPC.self, forKey: .vPC)
        vPC = vPCDecoded
    }
}

extension DNSSECNotFound: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DNSSECNotFound(message: \(Swift.String(describing: message)))"}
}

extension DNSSECNotFound: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<DNSSECNotFoundBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The hosted zone doesn't have any DNSSEC resources.</p>
public struct DNSSECNotFound: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DNSSECNotFoundBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DNSSECNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.DNSSECStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serveSignature = "ServeSignature"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let serveSignature = serveSignature {
            try container.encode(serveSignature, forKey: ClientRuntime.Key("ServeSignature"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serveSignatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serveSignature)
        serveSignature = serveSignatureDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
    }
}

extension Route53ClientTypes.DNSSECStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DNSSECStatus(serveSignature: \(Swift.String(describing: serveSignature)), statusMessage: \(Swift.String(describing: statusMessage)))"}
}

extension Route53ClientTypes.DNSSECStatus: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A string repesenting the status of DNSSEC signing.</p>
    public struct DNSSECStatus: Swift.Equatable {
        /// <p>A string that represents the current hosted zone signing status.</p>
        /// 		       <p>Status can have one of the following values:</p>
        /// 		       <dl>
        ///             <dt>SIGNING</dt>
        ///             <dd>
        ///                <p>DNSSEC signing is enabled for the hosted zone.</p>
        ///             </dd>
        ///             <dt>NOT_SIGNING</dt>
        ///             <dd>
        ///                <p>DNSSEC signing is not enabled for the hosted zone.</p>
        ///             </dd>
        ///             <dt>DELETING</dt>
        ///             <dd>
        ///                <p>DNSSEC signing is in the process of being removed for the hosted zone.</p>
        ///             </dd>
        ///             <dt>ACTION_NEEDED</dt>
        ///             <dd>
        ///                <p>There is a problem with signing in the hosted zone that requires you to take action to resolve.
        /// 					For example, the customer managed customer master key (CMK) might have been deleted, or the
        /// 					permissions for the customer managed CMK might have been changed.</p>
        ///             </dd>
        ///             <dt>INTERNAL_FAILURE</dt>
        ///             <dd>
        ///                <p>There was an error during a request. Before you can continue to work with DNSSEC
        /// 					signing, including with key-signing keys (KSKs), you must correct the problem by enabling or
        /// 					disabling DNSSEC signing for the hosted zone.</p>
        ///             </dd>
        ///          </dl>
        public let serveSignature: Swift.String?
        /// <p>The status message provided for the following DNSSEC signing status: <code>INTERNAL_FAILURE</code>. The status message
        /// 			includes information about what the problem might be and steps that you can take to correct the issue.</p>
        public let statusMessage: Swift.String?

        public init (
            serveSignature: Swift.String? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.serveSignature = serveSignature
            self.statusMessage = statusMessage
        }
    }

}

extension DeactivateKeySigningKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeactivateKeySigningKeyInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)), name: \(Swift.String(describing: name)))"}
}

extension DeactivateKeySigningKeyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeactivateKeySigningKeyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeactivateKeySigningKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeactivateKeySigningKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeactivateKeySigningKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeactivateKeySigningKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeactivateKeySigningKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeactivateKeySigningKeyOutputError>
}

public struct DeactivateKeySigningKeyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeactivateKeySigningKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeactivateKeySigningKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeactivateKeySigningKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeactivateKeySigningKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeactivateKeySigningKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeactivateKeySigningKeyOutputError>
}

public struct DeactivateKeySigningKeyInput: Swift.Equatable {
    /// <p>A unique string used to identify a hosted zone.</p>
    public let hostedZoneId: Swift.String?
    /// <p>A string used to identify a key-signing key (KSK).</p>
    public let name: Swift.String?

    public init (
        hostedZoneId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.name = name
    }
}

struct DeactivateKeySigningKeyInputBody: Swift.Equatable {
}

extension DeactivateKeySigningKeyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeactivateKeySigningKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeactivateKeySigningKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeySigningKeyStatus" : self = .invalidKeySigningKeyStatus(try InvalidKeySigningKeyStatus(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSigningStatus" : self = .invalidSigningStatus(try InvalidSigningStatus(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeySigningKeyInParentDSRecord" : self = .keySigningKeyInParentDSRecord(try KeySigningKeyInParentDSRecord(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeySigningKeyInUse" : self = .keySigningKeyInUse(try KeySigningKeyInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchKeySigningKey" : self = .noSuchKeySigningKey(try NoSuchKeySigningKey(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeactivateKeySigningKeyOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case invalidKeySigningKeyStatus(InvalidKeySigningKeyStatus)
    case invalidSigningStatus(InvalidSigningStatus)
    case keySigningKeyInParentDSRecord(KeySigningKeyInParentDSRecord)
    case keySigningKeyInUse(KeySigningKeyInUse)
    case noSuchKeySigningKey(NoSuchKeySigningKey)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeactivateKeySigningKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeactivateKeySigningKeyOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)))"}
}

extension DeactivateKeySigningKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeactivateKeySigningKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
        } else {
            self.changeInfo = nil
        }
    }
}

public struct DeactivateKeySigningKeyOutputResponse: Swift.Equatable {
    /// <p>A complex type that describes change information about changes made to your hosted
    /// 			zone.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil
    )
    {
        self.changeInfo = changeInfo
    }
}

struct DeactivateKeySigningKeyOutputResponseBody: Swift.Equatable {
    public let changeInfo: Route53ClientTypes.ChangeInfo?
}

extension DeactivateKeySigningKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
    }
}

extension Route53ClientTypes.DelegationSet: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case id = "Id"
        case nameServers = "NameServers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let callerReference = callerReference {
            try container.encode(callerReference, forKey: ClientRuntime.Key("CallerReference"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let nameServers = nameServers {
            var nameServersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NameServers"))
            for dnsname0 in nameServers {
                try nameServersContainer.encode(dnsname0, forKey: ClientRuntime.Key("NameServer"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let callerReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callerReference)
        callerReference = callerReferenceDecoded
        if containerValues.contains(.nameServers) {
            struct KeyVal0{struct NameServer{}}
            let nameServersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.NameServer>.CodingKeys.self, forKey: .nameServers)
            if let nameServersWrappedContainer = nameServersWrappedContainer {
                let nameServersContainer = try nameServersWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var nameServersBuffer:[Swift.String]? = nil
                if let nameServersContainer = nameServersContainer {
                    nameServersBuffer = [Swift.String]()
                    for stringContainer0 in nameServersContainer {
                        nameServersBuffer?.append(stringContainer0)
                    }
                }
                nameServers = nameServersBuffer
            } else {
                nameServers = []
            }
        } else {
            nameServers = nil
        }
    }
}

extension Route53ClientTypes.DelegationSet: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DelegationSet(callerReference: \(Swift.String(describing: callerReference)), id: \(Swift.String(describing: id)), nameServers: \(Swift.String(describing: nameServers)))"}
}

extension Route53ClientTypes.DelegationSet: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that lists the name servers in a delegation set, as well as the <code>CallerReference</code> and the <code>ID</code>
    /// 			for the delegation set.</p>
    public struct DelegationSet: Swift.Equatable {
        /// <p>The value that you specified for <code>CallerReference</code> when you created the reusable delegation set.</p>
        public let callerReference: Swift.String?
        /// <p>The ID that Amazon Route 53 assigns to a reusable delegation set.</p>
        public let id: Swift.String?
        /// <p>A complex type that contains a list of the authoritative name servers for a hosted zone or for a reusable delegation set.</p>
        public let nameServers: [Swift.String]?

        public init (
            callerReference: Swift.String? = nil,
            id: Swift.String? = nil,
            nameServers: [Swift.String]? = nil
        )
        {
            self.callerReference = callerReference
            self.id = id
            self.nameServers = nameServers
        }
    }

}

extension DelegationSetAlreadyCreated: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DelegationSetAlreadyCreated(message: \(Swift.String(describing: message)))"}
}

extension DelegationSetAlreadyCreated: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<DelegationSetAlreadyCreatedBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A delegation set with the same owner and caller reference combination has already been created.</p>
public struct DelegationSetAlreadyCreated: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DelegationSetAlreadyCreatedBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DelegationSetAlreadyCreatedBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DelegationSetAlreadyReusable: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DelegationSetAlreadyReusable(message: \(Swift.String(describing: message)))"}
}

extension DelegationSetAlreadyReusable: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<DelegationSetAlreadyReusableBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified delegation set has already been marked as reusable.</p>
public struct DelegationSetAlreadyReusable: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DelegationSetAlreadyReusableBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DelegationSetAlreadyReusableBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DelegationSetInUse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DelegationSetInUse(message: \(Swift.String(describing: message)))"}
}

extension DelegationSetInUse: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<DelegationSetInUseBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified delegation contains associated hosted zones which must be deleted before the reusable delegation set
/// 			can be deleted.</p>
public struct DelegationSetInUse: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DelegationSetInUseBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DelegationSetInUseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DelegationSetNotAvailable: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DelegationSetNotAvailable(message: \(Swift.String(describing: message)))"}
}

extension DelegationSetNotAvailable: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<DelegationSetNotAvailableBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You can create a hosted zone that has the same name as an existing hosted zone (example.com is common), but there is a
/// 			limit to the number of hosted zones that have the same name. If you get this error, Amazon Route 53 has reached that limit. If you own
/// 			the domain name and Route 53 generates this error, contact Customer Support.</p>
public struct DelegationSetNotAvailable: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DelegationSetNotAvailableBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DelegationSetNotAvailableBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DelegationSetNotReusable: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DelegationSetNotReusable(message: \(Swift.String(describing: message)))"}
}

extension DelegationSetNotReusable: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<DelegationSetNotReusableBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A reusable delegation set with the specified ID does not exist.</p>
public struct DelegationSetNotReusable: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct DelegationSetNotReusableBody: Swift.Equatable {
    public let message: Swift.String?
}

extension DelegationSetNotReusableBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DeleteHealthCheckInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteHealthCheckInput(healthCheckId: \(Swift.String(describing: healthCheckId)))"}
}

extension DeleteHealthCheckInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteHealthCheckInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteHealthCheckInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteHealthCheckInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteHealthCheckOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteHealthCheckInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteHealthCheckOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteHealthCheckOutputError>
}

public struct DeleteHealthCheckInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteHealthCheckInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteHealthCheckInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteHealthCheckOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteHealthCheckInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteHealthCheckOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteHealthCheckOutputError>
}

/// <p>This action deletes a health check.</p>
public struct DeleteHealthCheckInput: Swift.Equatable {
    /// <p>The ID of the health check that you want to delete.</p>
    public let healthCheckId: Swift.String?

    public init (
        healthCheckId: Swift.String? = nil
    )
    {
        self.healthCheckId = healthCheckId
    }
}

struct DeleteHealthCheckInputBody: Swift.Equatable {
}

extension DeleteHealthCheckInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteHealthCheckOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteHealthCheckOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "HealthCheckInUse" : self = .healthCheckInUse(try HealthCheckInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHealthCheck" : self = .noSuchHealthCheck(try NoSuchHealthCheck(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteHealthCheckOutputError: Swift.Error, Swift.Equatable {
    case healthCheckInUse(HealthCheckInUse)
    case invalidInput(InvalidInput)
    case noSuchHealthCheck(NoSuchHealthCheck)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteHealthCheckOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteHealthCheckOutputResponse()"}
}

extension DeleteHealthCheckOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element.</p>
public struct DeleteHealthCheckOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteHealthCheckOutputResponseBody: Swift.Equatable {
}

extension DeleteHealthCheckOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteHostedZoneInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteHostedZoneInput(id: \(Swift.String(describing: id)))"}
}

extension DeleteHostedZoneInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteHostedZoneInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteHostedZoneInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteHostedZoneOutputError>
}

public struct DeleteHostedZoneInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteHostedZoneInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteHostedZoneOutputError>
}

/// <p>A request to delete a hosted zone.</p>
public struct DeleteHostedZoneInput: Swift.Equatable {
    /// <p>The ID of the hosted zone you want to delete.</p>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct DeleteHostedZoneInputBody: Swift.Equatable {
}

extension DeleteHostedZoneInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteHostedZoneOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteHostedZoneOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "HostedZoneNotEmpty" : self = .hostedZoneNotEmpty(try HostedZoneNotEmpty(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDomainName" : self = .invalidDomainName(try InvalidDomainName(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PriorRequestNotComplete" : self = .priorRequestNotComplete(try PriorRequestNotComplete(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteHostedZoneOutputError: Swift.Error, Swift.Equatable {
    case hostedZoneNotEmpty(HostedZoneNotEmpty)
    case invalidDomainName(InvalidDomainName)
    case invalidInput(InvalidInput)
    case noSuchHostedZone(NoSuchHostedZone)
    case priorRequestNotComplete(PriorRequestNotComplete)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteHostedZoneOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteHostedZoneOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)))"}
}

extension DeleteHostedZoneOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteHostedZoneOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
        } else {
            self.changeInfo = nil
        }
    }
}

/// <p>A complex type that contains the response to a <code>DeleteHostedZone</code> request.</p>
public struct DeleteHostedZoneOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains the ID, the status, and the date and time of a request to delete a hosted zone.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil
    )
    {
        self.changeInfo = changeInfo
    }
}

struct DeleteHostedZoneOutputResponseBody: Swift.Equatable {
    public let changeInfo: Route53ClientTypes.ChangeInfo?
}

extension DeleteHostedZoneOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
    }
}

extension DeleteKeySigningKeyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteKeySigningKeyInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)), name: \(Swift.String(describing: name)))"}
}

extension DeleteKeySigningKeyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteKeySigningKeyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteKeySigningKeyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteKeySigningKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteKeySigningKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteKeySigningKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteKeySigningKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteKeySigningKeyOutputError>
}

public struct DeleteKeySigningKeyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteKeySigningKeyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteKeySigningKeyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteKeySigningKeyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteKeySigningKeyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteKeySigningKeyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteKeySigningKeyOutputError>
}

public struct DeleteKeySigningKeyInput: Swift.Equatable {
    /// <p>A unique string used to identify a hosted zone.</p>
    public let hostedZoneId: Swift.String?
    /// <p>A string used to identify a key-signing key (KSK).</p>
    public let name: Swift.String?

    public init (
        hostedZoneId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.name = name
    }
}

struct DeleteKeySigningKeyInputBody: Swift.Equatable {
}

extension DeleteKeySigningKeyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteKeySigningKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteKeySigningKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeySigningKeyStatus" : self = .invalidKeySigningKeyStatus(try InvalidKeySigningKeyStatus(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSArn" : self = .invalidKMSArn(try InvalidKMSArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSigningStatus" : self = .invalidSigningStatus(try InvalidSigningStatus(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchKeySigningKey" : self = .noSuchKeySigningKey(try NoSuchKeySigningKey(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteKeySigningKeyOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case invalidKeySigningKeyStatus(InvalidKeySigningKeyStatus)
    case invalidKMSArn(InvalidKMSArn)
    case invalidSigningStatus(InvalidSigningStatus)
    case noSuchKeySigningKey(NoSuchKeySigningKey)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteKeySigningKeyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteKeySigningKeyOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)))"}
}

extension DeleteKeySigningKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteKeySigningKeyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
        } else {
            self.changeInfo = nil
        }
    }
}

public struct DeleteKeySigningKeyOutputResponse: Swift.Equatable {
    /// <p>A complex type that describes change information about changes made to your hosted
    /// 			zone.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil
    )
    {
        self.changeInfo = changeInfo
    }
}

struct DeleteKeySigningKeyOutputResponseBody: Swift.Equatable {
    public let changeInfo: Route53ClientTypes.ChangeInfo?
}

extension DeleteKeySigningKeyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
    }
}

extension DeleteQueryLoggingConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteQueryLoggingConfigInput(id: \(Swift.String(describing: id)))"}
}

extension DeleteQueryLoggingConfigInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteQueryLoggingConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteQueryLoggingConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteQueryLoggingConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteQueryLoggingConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteQueryLoggingConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteQueryLoggingConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteQueryLoggingConfigOutputError>
}

public struct DeleteQueryLoggingConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteQueryLoggingConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteQueryLoggingConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteQueryLoggingConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteQueryLoggingConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteQueryLoggingConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteQueryLoggingConfigOutputError>
}

public struct DeleteQueryLoggingConfigInput: Swift.Equatable {
    /// <p>The ID of the configuration that you want to delete. </p>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct DeleteQueryLoggingConfigInputBody: Swift.Equatable {
}

extension DeleteQueryLoggingConfigInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteQueryLoggingConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteQueryLoggingConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchQueryLoggingConfig" : self = .noSuchQueryLoggingConfig(try NoSuchQueryLoggingConfig(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteQueryLoggingConfigOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case invalidInput(InvalidInput)
    case noSuchQueryLoggingConfig(NoSuchQueryLoggingConfig)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteQueryLoggingConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteQueryLoggingConfigOutputResponse()"}
}

extension DeleteQueryLoggingConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteQueryLoggingConfigOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteQueryLoggingConfigOutputResponseBody: Swift.Equatable {
}

extension DeleteQueryLoggingConfigOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteReusableDelegationSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReusableDelegationSetInput(id: \(Swift.String(describing: id)))"}
}

extension DeleteReusableDelegationSetInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteReusableDelegationSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReusableDelegationSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReusableDelegationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReusableDelegationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReusableDelegationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReusableDelegationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReusableDelegationSetOutputError>
}

public struct DeleteReusableDelegationSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteReusableDelegationSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteReusableDelegationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteReusableDelegationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteReusableDelegationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteReusableDelegationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteReusableDelegationSetOutputError>
}

/// <p>A request to delete a reusable delegation set.</p>
public struct DeleteReusableDelegationSetInput: Swift.Equatable {
    /// <p>The ID of the reusable delegation set that you want to delete.</p>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct DeleteReusableDelegationSetInputBody: Swift.Equatable {
}

extension DeleteReusableDelegationSetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteReusableDelegationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteReusableDelegationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DelegationSetInUse" : self = .delegationSetInUse(try DelegationSetInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DelegationSetNotReusable" : self = .delegationSetNotReusable(try DelegationSetNotReusable(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchDelegationSet" : self = .noSuchDelegationSet(try NoSuchDelegationSet(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteReusableDelegationSetOutputError: Swift.Error, Swift.Equatable {
    case delegationSetInUse(DelegationSetInUse)
    case delegationSetNotReusable(DelegationSetNotReusable)
    case invalidInput(InvalidInput)
    case noSuchDelegationSet(NoSuchDelegationSet)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteReusableDelegationSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteReusableDelegationSetOutputResponse()"}
}

extension DeleteReusableDelegationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element.</p>
public struct DeleteReusableDelegationSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteReusableDelegationSetOutputResponseBody: Swift.Equatable {
}

extension DeleteReusableDelegationSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteTrafficPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTrafficPolicyInput(id: \(Swift.String(describing: id)), version: \(Swift.String(describing: version)))"}
}

extension DeleteTrafficPolicyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteTrafficPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTrafficPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTrafficPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTrafficPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTrafficPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTrafficPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTrafficPolicyOutputError>
}

public struct DeleteTrafficPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTrafficPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTrafficPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTrafficPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTrafficPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTrafficPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTrafficPolicyOutputError>
}

/// <p>A request to delete a specified traffic policy version.</p>
public struct DeleteTrafficPolicyInput: Swift.Equatable {
    /// <p>The ID of the traffic policy that you want to delete.</p>
    public let id: Swift.String?
    /// <p>The version number of the traffic policy that you want to delete.</p>
    public let version: Swift.Int?

    public init (
        id: Swift.String? = nil,
        version: Swift.Int? = nil
    )
    {
        self.id = id
        self.version = version
    }
}

struct DeleteTrafficPolicyInputBody: Swift.Equatable {
}

extension DeleteTrafficPolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteTrafficPolicyInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTrafficPolicyInstanceInput(id: \(Swift.String(describing: id)))"}
}

extension DeleteTrafficPolicyInstanceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteTrafficPolicyInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTrafficPolicyInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTrafficPolicyInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTrafficPolicyInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTrafficPolicyInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTrafficPolicyInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTrafficPolicyInstanceOutputError>
}

public struct DeleteTrafficPolicyInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTrafficPolicyInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTrafficPolicyInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTrafficPolicyInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTrafficPolicyInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTrafficPolicyInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTrafficPolicyInstanceOutputError>
}

/// <p>A request to delete a specified traffic policy instance.</p>
public struct DeleteTrafficPolicyInstanceInput: Swift.Equatable {
    /// <p>The ID of the traffic policy instance that you want to delete. </p>
    /// 		       <important>
    /// 			         <p>When you delete a traffic policy instance, Amazon Route 53 also deletes all of the resource record sets that were created when you created
    /// 				the traffic policy instance.</p>
    /// 		       </important>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct DeleteTrafficPolicyInstanceInputBody: Swift.Equatable {
}

extension DeleteTrafficPolicyInstanceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteTrafficPolicyInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteTrafficPolicyInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicyInstance" : self = .noSuchTrafficPolicyInstance(try NoSuchTrafficPolicyInstance(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PriorRequestNotComplete" : self = .priorRequestNotComplete(try PriorRequestNotComplete(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTrafficPolicyInstanceOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchTrafficPolicyInstance(NoSuchTrafficPolicyInstance)
    case priorRequestNotComplete(PriorRequestNotComplete)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTrafficPolicyInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTrafficPolicyInstanceOutputResponse()"}
}

extension DeleteTrafficPolicyInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element.</p>
public struct DeleteTrafficPolicyInstanceOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteTrafficPolicyInstanceOutputResponseBody: Swift.Equatable {
}

extension DeleteTrafficPolicyInstanceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteTrafficPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteTrafficPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicy" : self = .noSuchTrafficPolicy(try NoSuchTrafficPolicy(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TrafficPolicyInUse" : self = .trafficPolicyInUse(try TrafficPolicyInUse(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTrafficPolicyOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case invalidInput(InvalidInput)
    case noSuchTrafficPolicy(NoSuchTrafficPolicy)
    case trafficPolicyInUse(TrafficPolicyInUse)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTrafficPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTrafficPolicyOutputResponse()"}
}

extension DeleteTrafficPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>An empty element.</p>
public struct DeleteTrafficPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteTrafficPolicyOutputResponseBody: Swift.Equatable {
}

extension DeleteTrafficPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteVPCAssociationAuthorizationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVPCAssociationAuthorizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVPCAssociationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVPCAssociationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVPCAssociationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVPCAssociationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVPCAssociationAuthorizationOutputError>
}

extension DeleteVPCAssociationAuthorizationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVPCAssociationAuthorizationInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)), vPC: \(Swift.String(describing: vPC)))"}
}

extension DeleteVPCAssociationAuthorizationInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension DeleteVPCAssociationAuthorizationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vPC = "VPC"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let vPC = vPC {
            try container.encode(vPC, forKey: ClientRuntime.Key("VPC"))
        }
    }
}

public struct DeleteVPCAssociationAuthorizationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVPCAssociationAuthorizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVPCAssociationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVPCAssociationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVPCAssociationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVPCAssociationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVPCAssociationAuthorizationOutputError>
}

public struct DeleteVPCAssociationAuthorizationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVPCAssociationAuthorizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVPCAssociationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVPCAssociationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVPCAssociationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVPCAssociationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVPCAssociationAuthorizationOutputError>
}

/// <p>A complex type that contains information about the request to remove authorization to associate a VPC
/// 			that was created by one AWS account with a hosted zone that was created with a different AWS account. </p>
public struct DeleteVPCAssociationAuthorizationInput: Swift.Equatable {
    /// <p>When removing authorization to associate a VPC that was created by one AWS account with a hosted zone
    /// 			that was created with a different AWS account, the ID of the hosted zone.</p>
    public let hostedZoneId: Swift.String?
    /// <p>When removing authorization to associate a VPC that was created by one AWS account with a hosted zone
    /// 			that was created with a different AWS account, a complex type that includes the ID and region of the VPC.</p>
    public let vPC: Route53ClientTypes.VPC?

    public init (
        hostedZoneId: Swift.String? = nil,
        vPC: Route53ClientTypes.VPC? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.vPC = vPC
    }
}

struct DeleteVPCAssociationAuthorizationInputBody: Swift.Equatable {
    public let vPC: Route53ClientTypes.VPC?
}

extension DeleteVPCAssociationAuthorizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vPC = "VPC"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vPCDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.VPC.self, forKey: .vPC)
        vPC = vPCDecoded
    }
}

extension DeleteVPCAssociationAuthorizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteVPCAssociationAuthorizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCId" : self = .invalidVPCId(try InvalidVPCId(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VPCAssociationAuthorizationNotFound" : self = .vPCAssociationAuthorizationNotFound(try VPCAssociationAuthorizationNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVPCAssociationAuthorizationOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case invalidInput(InvalidInput)
    case invalidVPCId(InvalidVPCId)
    case noSuchHostedZone(NoSuchHostedZone)
    case vPCAssociationAuthorizationNotFound(VPCAssociationAuthorizationNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVPCAssociationAuthorizationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVPCAssociationAuthorizationOutputResponse()"}
}

extension DeleteVPCAssociationAuthorizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>Empty response for the request.</p>
public struct DeleteVPCAssociationAuthorizationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteVPCAssociationAuthorizationOutputResponseBody: Swift.Equatable {
}

extension DeleteVPCAssociationAuthorizationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension Route53ClientTypes.Dimension: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Route53ClientTypes.Dimension: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Dimension(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension Route53ClientTypes.Dimension: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>For the metric that the CloudWatch alarm is associated with, a complex type that contains information about one dimension.</p>
    public struct Dimension: Swift.Equatable {
        /// <p>For the metric that the CloudWatch alarm is associated with, the name of one dimension.</p>
        public let name: Swift.String?
        /// <p>For the metric that the CloudWatch alarm is associated with, the value of one dimension.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension DisableHostedZoneDNSSECInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableHostedZoneDNSSECInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)))"}
}

extension DisableHostedZoneDNSSECInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DisableHostedZoneDNSSECInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableHostedZoneDNSSECInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableHostedZoneDNSSECInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableHostedZoneDNSSECOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableHostedZoneDNSSECInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableHostedZoneDNSSECOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableHostedZoneDNSSECOutputError>
}

public struct DisableHostedZoneDNSSECInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableHostedZoneDNSSECInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableHostedZoneDNSSECInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableHostedZoneDNSSECOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableHostedZoneDNSSECInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableHostedZoneDNSSECOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableHostedZoneDNSSECOutputError>
}

public struct DisableHostedZoneDNSSECInput: Swift.Equatable {
    /// <p>A unique string used to identify a hosted zone.</p>
    public let hostedZoneId: Swift.String?

    public init (
        hostedZoneId: Swift.String? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
    }
}

struct DisableHostedZoneDNSSECInputBody: Swift.Equatable {
}

extension DisableHostedZoneDNSSECInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisableHostedZoneDNSSECOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisableHostedZoneDNSSECOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DNSSECNotFound" : self = .dNSSECNotFound(try DNSSECNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArgument" : self = .invalidArgument(try InvalidArgument(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeySigningKeyStatus" : self = .invalidKeySigningKeyStatus(try InvalidKeySigningKeyStatus(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSArn" : self = .invalidKMSArn(try InvalidKMSArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeySigningKeyInParentDSRecord" : self = .keySigningKeyInParentDSRecord(try KeySigningKeyInParentDSRecord(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableHostedZoneDNSSECOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case dNSSECNotFound(DNSSECNotFound)
    case invalidArgument(InvalidArgument)
    case invalidKeySigningKeyStatus(InvalidKeySigningKeyStatus)
    case invalidKMSArn(InvalidKMSArn)
    case keySigningKeyInParentDSRecord(KeySigningKeyInParentDSRecord)
    case noSuchHostedZone(NoSuchHostedZone)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableHostedZoneDNSSECOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableHostedZoneDNSSECOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)))"}
}

extension DisableHostedZoneDNSSECOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisableHostedZoneDNSSECOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
        } else {
            self.changeInfo = nil
        }
    }
}

public struct DisableHostedZoneDNSSECOutputResponse: Swift.Equatable {
    /// <p>A complex type that describes change information about changes made to your hosted
    /// 			zone.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil
    )
    {
        self.changeInfo = changeInfo
    }
}

struct DisableHostedZoneDNSSECOutputResponseBody: Swift.Equatable {
    public let changeInfo: Route53ClientTypes.ChangeInfo?
}

extension DisableHostedZoneDNSSECOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
    }
}

public struct DisassociateVPCFromHostedZoneInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateVPCFromHostedZoneInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateVPCFromHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateVPCFromHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateVPCFromHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateVPCFromHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateVPCFromHostedZoneOutputError>
}

extension DisassociateVPCFromHostedZoneInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateVPCFromHostedZoneInput(comment: \(Swift.String(describing: comment)), hostedZoneId: \(Swift.String(describing: hostedZoneId)), vPC: \(Swift.String(describing: vPC)))"}
}

extension DisassociateVPCFromHostedZoneInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension DisassociateVPCFromHostedZoneInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case vPC = "VPC"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let comment = comment {
            try container.encode(comment, forKey: ClientRuntime.Key("Comment"))
        }
        if let vPC = vPC {
            try container.encode(vPC, forKey: ClientRuntime.Key("VPC"))
        }
    }
}

public struct DisassociateVPCFromHostedZoneInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateVPCFromHostedZoneInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateVPCFromHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateVPCFromHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateVPCFromHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateVPCFromHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateVPCFromHostedZoneOutputError>
}

public struct DisassociateVPCFromHostedZoneInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateVPCFromHostedZoneInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateVPCFromHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateVPCFromHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateVPCFromHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateVPCFromHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateVPCFromHostedZoneOutputError>
}

/// <p>A complex type that contains information about the VPC that you want to disassociate from a
/// 			specified private hosted zone.</p>
public struct DisassociateVPCFromHostedZoneInput: Swift.Equatable {
    /// <p>
    ///             <i>Optional:</i> A comment about the disassociation request.</p>
    public let comment: Swift.String?
    /// <p>The ID of the private hosted zone that you want to disassociate a VPC from.</p>
    public let hostedZoneId: Swift.String?
    /// <p>A complex type that contains information about the VPC that you're disassociating
    /// 			from the specified hosted zone.</p>
    public let vPC: Route53ClientTypes.VPC?

    public init (
        comment: Swift.String? = nil,
        hostedZoneId: Swift.String? = nil,
        vPC: Route53ClientTypes.VPC? = nil
    )
    {
        self.comment = comment
        self.hostedZoneId = hostedZoneId
        self.vPC = vPC
    }
}

struct DisassociateVPCFromHostedZoneInputBody: Swift.Equatable {
    public let vPC: Route53ClientTypes.VPC?
    public let comment: Swift.String?
}

extension DisassociateVPCFromHostedZoneInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case vPC = "VPC"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vPCDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.VPC.self, forKey: .vPC)
        vPC = vPCDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
    }
}

extension DisassociateVPCFromHostedZoneOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DisassociateVPCFromHostedZoneOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidVPCId" : self = .invalidVPCId(try InvalidVPCId(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LastVPCAssociation" : self = .lastVPCAssociation(try LastVPCAssociation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "VPCAssociationNotFound" : self = .vPCAssociationNotFound(try VPCAssociationNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateVPCFromHostedZoneOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case invalidVPCId(InvalidVPCId)
    case lastVPCAssociation(LastVPCAssociation)
    case noSuchHostedZone(NoSuchHostedZone)
    case vPCAssociationNotFound(VPCAssociationNotFound)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateVPCFromHostedZoneOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateVPCFromHostedZoneOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)))"}
}

extension DisassociateVPCFromHostedZoneOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DisassociateVPCFromHostedZoneOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
        } else {
            self.changeInfo = nil
        }
    }
}

/// <p>A complex type that contains the response information for the disassociate request.</p>
public struct DisassociateVPCFromHostedZoneOutputResponse: Swift.Equatable {
    /// <p>A complex type that describes the changes made to the specified private hosted zone.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil
    )
    {
        self.changeInfo = changeInfo
    }
}

struct DisassociateVPCFromHostedZoneOutputResponseBody: Swift.Equatable {
    public let changeInfo: Route53ClientTypes.ChangeInfo?
}

extension DisassociateVPCFromHostedZoneOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
    }
}

extension EnableHostedZoneDNSSECInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableHostedZoneDNSSECInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)))"}
}

extension EnableHostedZoneDNSSECInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct EnableHostedZoneDNSSECInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableHostedZoneDNSSECInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableHostedZoneDNSSECInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableHostedZoneDNSSECOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableHostedZoneDNSSECInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableHostedZoneDNSSECOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableHostedZoneDNSSECOutputError>
}

public struct EnableHostedZoneDNSSECInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableHostedZoneDNSSECInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableHostedZoneDNSSECInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableHostedZoneDNSSECOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableHostedZoneDNSSECInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableHostedZoneDNSSECOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableHostedZoneDNSSECOutputError>
}

public struct EnableHostedZoneDNSSECInput: Swift.Equatable {
    /// <p>A unique string used to identify a hosted zone.</p>
    public let hostedZoneId: Swift.String?

    public init (
        hostedZoneId: Swift.String? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
    }
}

struct EnableHostedZoneDNSSECInputBody: Swift.Equatable {
}

extension EnableHostedZoneDNSSECInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension EnableHostedZoneDNSSECOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EnableHostedZoneDNSSECOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DNSSECNotFound" : self = .dNSSECNotFound(try DNSSECNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "HostedZonePartiallyDelegated" : self = .hostedZonePartiallyDelegated(try HostedZonePartiallyDelegated(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidArgument" : self = .invalidArgument(try InvalidArgument(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKeySigningKeyStatus" : self = .invalidKeySigningKeyStatus(try InvalidKeySigningKeyStatus(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidKMSArn" : self = .invalidKMSArn(try InvalidKMSArn(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "KeySigningKeyWithActiveStatusNotFound" : self = .keySigningKeyWithActiveStatusNotFound(try KeySigningKeyWithActiveStatusNotFound(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableHostedZoneDNSSECOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case dNSSECNotFound(DNSSECNotFound)
    case hostedZonePartiallyDelegated(HostedZonePartiallyDelegated)
    case invalidArgument(InvalidArgument)
    case invalidKeySigningKeyStatus(InvalidKeySigningKeyStatus)
    case invalidKMSArn(InvalidKMSArn)
    case keySigningKeyWithActiveStatusNotFound(KeySigningKeyWithActiveStatusNotFound)
    case noSuchHostedZone(NoSuchHostedZone)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableHostedZoneDNSSECOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableHostedZoneDNSSECOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)))"}
}

extension EnableHostedZoneDNSSECOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EnableHostedZoneDNSSECOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
        } else {
            self.changeInfo = nil
        }
    }
}

public struct EnableHostedZoneDNSSECOutputResponse: Swift.Equatable {
    /// <p>A complex type that describes change information about changes made to your hosted
    /// 			zone.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil
    )
    {
        self.changeInfo = changeInfo
    }
}

struct EnableHostedZoneDNSSECOutputResponseBody: Swift.Equatable {
    public let changeInfo: Route53ClientTypes.ChangeInfo?
}

extension EnableHostedZoneDNSSECOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
    }
}

extension Route53ClientTypes.GeoLocation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continentCode = "ContinentCode"
        case countryCode = "CountryCode"
        case subdivisionCode = "SubdivisionCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let continentCode = continentCode {
            try container.encode(continentCode, forKey: ClientRuntime.Key("ContinentCode"))
        }
        if let countryCode = countryCode {
            try container.encode(countryCode, forKey: ClientRuntime.Key("CountryCode"))
        }
        if let subdivisionCode = subdivisionCode {
            try container.encode(subdivisionCode, forKey: ClientRuntime.Key("SubdivisionCode"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continentCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continentCode)
        continentCode = continentCodeDecoded
        let countryCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .countryCode)
        countryCode = countryCodeDecoded
        let subdivisionCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdivisionCode)
        subdivisionCode = subdivisionCodeDecoded
    }
}

extension Route53ClientTypes.GeoLocation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GeoLocation(continentCode: \(Swift.String(describing: continentCode)), countryCode: \(Swift.String(describing: countryCode)), subdivisionCode: \(Swift.String(describing: subdivisionCode)))"}
}

extension Route53ClientTypes.GeoLocation: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains information about a geographic location.</p>
    public struct GeoLocation: Swift.Equatable {
        /// <p>The two-letter code for the continent.</p>
        /// 		       <p>Amazon Route 53 supports the following continent codes:</p>
        /// 		       <ul>
        ///             <li>
        ///                <p>
        ///                   <b>AF</b>: Africa</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>AN</b>: Antarctica</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>AS</b>: Asia</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>EU</b>: Europe</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>OC</b>: Oceania</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>NA</b>: North America</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>SA</b>: South America</p>
        ///             </li>
        ///          </ul>
        /// 		       <p>Constraint: Specifying <code>ContinentCode</code> with either <code>CountryCode</code> or <code>SubdivisionCode</code> returns an
        /// 			<code>InvalidInput</code> error.</p>
        public let continentCode: Swift.String?
        /// <p>For geolocation resource record sets, the two-letter code for a country.</p>
        /// 		       <p>Amazon Route 53 uses the two-letter country codes that are specified in
        /// 			<a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO standard 3166-1 alpha-2</a>.</p>
        public let countryCode: Swift.String?
        /// <p>For geolocation resource record sets, the two-letter code for a state of the United States.
        /// 			Route 53 doesn't support any other values for <code>SubdivisionCode</code>. For a list of state abbreviations, see
        /// 			<a href="https://pe.usps.com/text/pub28/28apb.htm">Appendix B: Two–Letter State and Possession Abbreviations</a>
        /// 			on the United States Postal Service website. </p>
        /// 		       <p>If you specify <code>subdivisioncode</code>, you must also specify <code>US</code> for <code>CountryCode</code>. </p>
        public let subdivisionCode: Swift.String?

        public init (
            continentCode: Swift.String? = nil,
            countryCode: Swift.String? = nil,
            subdivisionCode: Swift.String? = nil
        )
        {
            self.continentCode = continentCode
            self.countryCode = countryCode
            self.subdivisionCode = subdivisionCode
        }
    }

}

extension Route53ClientTypes.GeoLocationDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case continentCode = "ContinentCode"
        case continentName = "ContinentName"
        case countryCode = "CountryCode"
        case countryName = "CountryName"
        case subdivisionCode = "SubdivisionCode"
        case subdivisionName = "SubdivisionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let continentCode = continentCode {
            try container.encode(continentCode, forKey: ClientRuntime.Key("ContinentCode"))
        }
        if let continentName = continentName {
            try container.encode(continentName, forKey: ClientRuntime.Key("ContinentName"))
        }
        if let countryCode = countryCode {
            try container.encode(countryCode, forKey: ClientRuntime.Key("CountryCode"))
        }
        if let countryName = countryName {
            try container.encode(countryName, forKey: ClientRuntime.Key("CountryName"))
        }
        if let subdivisionCode = subdivisionCode {
            try container.encode(subdivisionCode, forKey: ClientRuntime.Key("SubdivisionCode"))
        }
        if let subdivisionName = subdivisionName {
            try container.encode(subdivisionName, forKey: ClientRuntime.Key("SubdivisionName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let continentCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continentCode)
        continentCode = continentCodeDecoded
        let continentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .continentName)
        continentName = continentNameDecoded
        let countryCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .countryCode)
        countryCode = countryCodeDecoded
        let countryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .countryName)
        countryName = countryNameDecoded
        let subdivisionCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdivisionCode)
        subdivisionCode = subdivisionCodeDecoded
        let subdivisionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdivisionName)
        subdivisionName = subdivisionNameDecoded
    }
}

extension Route53ClientTypes.GeoLocationDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GeoLocationDetails(continentCode: \(Swift.String(describing: continentCode)), continentName: \(Swift.String(describing: continentName)), countryCode: \(Swift.String(describing: countryCode)), countryName: \(Swift.String(describing: countryName)), subdivisionCode: \(Swift.String(describing: subdivisionCode)), subdivisionName: \(Swift.String(describing: subdivisionName)))"}
}

extension Route53ClientTypes.GeoLocationDetails: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains the codes and full continent, country, and subdivision names for the specified <code>geolocation</code> code.</p>
    public struct GeoLocationDetails: Swift.Equatable {
        /// <p>The two-letter code for the continent.</p>
        public let continentCode: Swift.String?
        /// <p>The full name of the continent.</p>
        public let continentName: Swift.String?
        /// <p>The two-letter code for the country.</p>
        public let countryCode: Swift.String?
        /// <p>The name of the country.</p>
        public let countryName: Swift.String?
        /// <p>The code for the subdivision, such as a particular state within the United States. For a list of US state abbreviations, see <a href="https://pe.usps.com/text/pub28/28apb.htm">Appendix B: Two–Letter State and Possession Abbreviations</a>  on the United States Postal Service website. For a list of all supported subdivision codes, use the <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListGeoLocations.html">ListGeoLocations</a> API.</p>
        public let subdivisionCode: Swift.String?
        /// <p>The full name of the subdivision. Route 53 currently supports only states in the United States.</p>
        public let subdivisionName: Swift.String?

        public init (
            continentCode: Swift.String? = nil,
            continentName: Swift.String? = nil,
            countryCode: Swift.String? = nil,
            countryName: Swift.String? = nil,
            subdivisionCode: Swift.String? = nil,
            subdivisionName: Swift.String? = nil
        )
        {
            self.continentCode = continentCode
            self.continentName = continentName
            self.countryCode = countryCode
            self.countryName = countryName
            self.subdivisionCode = subdivisionCode
            self.subdivisionName = subdivisionName
        }
    }

}

extension GetAccountLimitInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountLimitInput(type: \(Swift.String(describing: type)))"}
}

extension GetAccountLimitInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetAccountLimitInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAccountLimitInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAccountLimitInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAccountLimitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAccountLimitInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAccountLimitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAccountLimitOutputError>
}

public struct GetAccountLimitInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAccountLimitInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAccountLimitInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAccountLimitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAccountLimitInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAccountLimitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAccountLimitOutputError>
}

/// <p>A complex type that contains information about the request to create a hosted zone.</p>
public struct GetAccountLimitInput: Swift.Equatable {
    /// <p>The limit that you want to get. Valid values include the following:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <b>MAX_HEALTH_CHECKS_BY_OWNER</b>: The maximum number of health checks that you can create
    /// 				using the current account.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>MAX_HOSTED_ZONES_BY_OWNER</b>: The maximum number of hosted zones that you can create
    /// 				using the current account.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>MAX_REUSABLE_DELEGATION_SETS_BY_OWNER</b>: The maximum number of reusable delegation sets
    /// 				that you can create using the current account.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>MAX_TRAFFIC_POLICIES_BY_OWNER</b>: The maximum number of traffic policies
    /// 				that you can create using the current account.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>MAX_TRAFFIC_POLICY_INSTANCES_BY_OWNER</b>: The maximum number of traffic policy instances
    /// 				that you can create using the current account. (Traffic policy instances are referred to as traffic flow policy records in the
    /// 				Amazon Route 53 console.)</p>
    ///             </li>
    ///          </ul>
    public let type: Route53ClientTypes.AccountLimitType?

    public init (
        type: Route53ClientTypes.AccountLimitType? = nil
    )
    {
        self.type = type
    }
}

struct GetAccountLimitInputBody: Swift.Equatable {
}

extension GetAccountLimitInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetAccountLimitOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetAccountLimitOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAccountLimitOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccountLimitOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountLimitOutputResponse(count: \(Swift.String(describing: count)), limit: \(Swift.String(describing: limit)))"}
}

extension GetAccountLimitOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAccountLimitOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.count = output.count
            self.limit = output.limit
        } else {
            self.count = 0
            self.limit = nil
        }
    }
}

/// <p>A complex type that contains the requested limit. </p>
public struct GetAccountLimitOutputResponse: Swift.Equatable {
    /// <p>The current number of entities that you have created of the specified type. For example, if you specified
    /// 			<code>MAX_HEALTH_CHECKS_BY_OWNER</code> for the value of <code>Type</code> in the request, the value of <code>Count</code>
    /// 			is the current number of health checks that you have created using the current account.</p>
    public let count: Swift.Int
    /// <p>The current setting for the specified limit. For example, if you specified <code>MAX_HEALTH_CHECKS_BY_OWNER</code> for the value of
    /// 			<code>Type</code> in the request, the value of <code>Limit</code> is the maximum number of health checks that you can create
    /// 			using the current account.</p>
    public let limit: Route53ClientTypes.AccountLimit?

    public init (
        count: Swift.Int = 0,
        limit: Route53ClientTypes.AccountLimit? = nil
    )
    {
        self.count = count
        self.limit = limit
    }
}

struct GetAccountLimitOutputResponseBody: Swift.Equatable {
    public let limit: Route53ClientTypes.AccountLimit?
    public let count: Swift.Int
}

extension GetAccountLimitOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case limit = "Limit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.AccountLimit.self, forKey: .limit)
        limit = limitDecoded
        let countDecoded = try containerValues.decode(Swift.Int.self, forKey: .count)
        count = countDecoded
    }
}

extension GetChangeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetChangeInput(id: \(Swift.String(describing: id)))"}
}

extension GetChangeInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetChangeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetChangeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetChangeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetChangeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetChangeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetChangeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetChangeOutputError>
}

public struct GetChangeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetChangeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetChangeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetChangeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetChangeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetChangeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetChangeOutputError>
}

/// <p>The input for a GetChange request.</p>
public struct GetChangeInput: Swift.Equatable {
    /// <p>The ID of the change batch request. The value that you specify here is the value that <code>ChangeResourceRecordSets</code>
    /// 			returned in the <code>Id</code> element when you submitted the request.</p>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct GetChangeInputBody: Swift.Equatable {
}

extension GetChangeInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetChangeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetChangeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchChange" : self = .noSuchChange(try NoSuchChange(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetChangeOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchChange(NoSuchChange)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetChangeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetChangeOutputResponse(changeInfo: \(Swift.String(describing: changeInfo)))"}
}

extension GetChangeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetChangeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.changeInfo = output.changeInfo
        } else {
            self.changeInfo = nil
        }
    }
}

/// <p>A complex type that contains the <code>ChangeInfo</code> element.</p>
public struct GetChangeOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains information about the specified change batch.</p>
    public let changeInfo: Route53ClientTypes.ChangeInfo?

    public init (
        changeInfo: Route53ClientTypes.ChangeInfo? = nil
    )
    {
        self.changeInfo = changeInfo
    }
}

struct GetChangeOutputResponseBody: Swift.Equatable {
    public let changeInfo: Route53ClientTypes.ChangeInfo?
}

extension GetChangeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeInfo = "ChangeInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let changeInfoDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ChangeInfo.self, forKey: .changeInfo)
        changeInfo = changeInfoDecoded
    }
}

extension GetCheckerIpRangesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCheckerIpRangesInput()"}
}

extension GetCheckerIpRangesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetCheckerIpRangesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCheckerIpRangesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCheckerIpRangesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCheckerIpRangesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCheckerIpRangesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCheckerIpRangesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCheckerIpRangesOutputError>
}

public struct GetCheckerIpRangesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCheckerIpRangesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCheckerIpRangesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCheckerIpRangesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCheckerIpRangesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCheckerIpRangesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCheckerIpRangesOutputError>
}

/// <p>Empty request.</p>
public struct GetCheckerIpRangesInput: Swift.Equatable {

    public init() {}
}

struct GetCheckerIpRangesInputBody: Swift.Equatable {
}

extension GetCheckerIpRangesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCheckerIpRangesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetCheckerIpRangesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCheckerIpRangesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCheckerIpRangesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCheckerIpRangesOutputResponse(checkerIpRanges: \(Swift.String(describing: checkerIpRanges)))"}
}

extension GetCheckerIpRangesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCheckerIpRangesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.checkerIpRanges = output.checkerIpRanges
        } else {
            self.checkerIpRanges = nil
        }
    }
}

/// <p>A complex type that contains the <code>CheckerIpRanges</code> element.</p>
public struct GetCheckerIpRangesOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains sorted list of IP ranges in CIDR format for Amazon Route 53 health
    /// 			checkers.</p>
    public let checkerIpRanges: [Swift.String]?

    public init (
        checkerIpRanges: [Swift.String]? = nil
    )
    {
        self.checkerIpRanges = checkerIpRanges
    }
}

struct GetCheckerIpRangesOutputResponseBody: Swift.Equatable {
    public let checkerIpRanges: [Swift.String]?
}

extension GetCheckerIpRangesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkerIpRanges = "CheckerIpRanges"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.checkerIpRanges) {
            struct KeyVal0{struct member{}}
            let checkerIpRangesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .checkerIpRanges)
            if let checkerIpRangesWrappedContainer = checkerIpRangesWrappedContainer {
                let checkerIpRangesContainer = try checkerIpRangesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var checkerIpRangesBuffer:[Swift.String]? = nil
                if let checkerIpRangesContainer = checkerIpRangesContainer {
                    checkerIpRangesBuffer = [Swift.String]()
                    for stringContainer0 in checkerIpRangesContainer {
                        checkerIpRangesBuffer?.append(stringContainer0)
                    }
                }
                checkerIpRanges = checkerIpRangesBuffer
            } else {
                checkerIpRanges = []
            }
        } else {
            checkerIpRanges = nil
        }
    }
}

extension GetDNSSECInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDNSSECInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)))"}
}

extension GetDNSSECInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetDNSSECInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDNSSECInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDNSSECInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDNSSECOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDNSSECInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDNSSECOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDNSSECOutputError>
}

public struct GetDNSSECInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDNSSECInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDNSSECInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDNSSECOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDNSSECInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDNSSECOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDNSSECOutputError>
}

public struct GetDNSSECInput: Swift.Equatable {
    /// <p>A unique string used to identify a hosted zone.</p>
    public let hostedZoneId: Swift.String?

    public init (
        hostedZoneId: Swift.String? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
    }
}

struct GetDNSSECInputBody: Swift.Equatable {
}

extension GetDNSSECInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDNSSECOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetDNSSECOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArgument" : self = .invalidArgument(try InvalidArgument(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDNSSECOutputError: Swift.Error, Swift.Equatable {
    case invalidArgument(InvalidArgument)
    case noSuchHostedZone(NoSuchHostedZone)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDNSSECOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDNSSECOutputResponse(keySigningKeys: \(Swift.String(describing: keySigningKeys)), status: \(Swift.String(describing: status)))"}
}

extension GetDNSSECOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDNSSECOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.keySigningKeys = output.keySigningKeys
            self.status = output.status
        } else {
            self.keySigningKeys = nil
            self.status = nil
        }
    }
}

public struct GetDNSSECOutputResponse: Swift.Equatable {
    /// <p>The key-signing keys (KSKs) in your account.</p>
    public let keySigningKeys: [Route53ClientTypes.KeySigningKey]?
    /// <p>A string repesenting the status of DNSSEC.</p>
    public let status: Route53ClientTypes.DNSSECStatus?

    public init (
        keySigningKeys: [Route53ClientTypes.KeySigningKey]? = nil,
        status: Route53ClientTypes.DNSSECStatus? = nil
    )
    {
        self.keySigningKeys = keySigningKeys
        self.status = status
    }
}

struct GetDNSSECOutputResponseBody: Swift.Equatable {
    public let status: Route53ClientTypes.DNSSECStatus?
    public let keySigningKeys: [Route53ClientTypes.KeySigningKey]?
}

extension GetDNSSECOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keySigningKeys = "KeySigningKeys"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.DNSSECStatus.self, forKey: .status)
        status = statusDecoded
        if containerValues.contains(.keySigningKeys) {
            struct KeyVal0{struct member{}}
            let keySigningKeysWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .keySigningKeys)
            if let keySigningKeysWrappedContainer = keySigningKeysWrappedContainer {
                let keySigningKeysContainer = try keySigningKeysWrappedContainer.decodeIfPresent([Route53ClientTypes.KeySigningKey].self, forKey: .member)
                var keySigningKeysBuffer:[Route53ClientTypes.KeySigningKey]? = nil
                if let keySigningKeysContainer = keySigningKeysContainer {
                    keySigningKeysBuffer = [Route53ClientTypes.KeySigningKey]()
                    for structureContainer0 in keySigningKeysContainer {
                        keySigningKeysBuffer?.append(structureContainer0)
                    }
                }
                keySigningKeys = keySigningKeysBuffer
            } else {
                keySigningKeys = []
            }
        } else {
            keySigningKeys = nil
        }
    }
}

extension GetGeoLocationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetGeoLocationInput(continentCode: \(Swift.String(describing: continentCode)), countryCode: \(Swift.String(describing: countryCode)), subdivisionCode: \(Swift.String(describing: subdivisionCode)))"}
}

extension GetGeoLocationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetGeoLocationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetGeoLocationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetGeoLocationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetGeoLocationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetGeoLocationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetGeoLocationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetGeoLocationOutputError>
}

public struct GetGeoLocationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetGeoLocationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetGeoLocationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetGeoLocationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let continentCode = input.operationInput.continentCode {
            let continentCodeQueryItem = ClientRuntime.URLQueryItem(name: "continentcode".urlPercentEncoding(), value: Swift.String(continentCode).urlPercentEncoding())
            input.builder.withQueryItem(continentCodeQueryItem)
        }
        if let countryCode = input.operationInput.countryCode {
            let countryCodeQueryItem = ClientRuntime.URLQueryItem(name: "countrycode".urlPercentEncoding(), value: Swift.String(countryCode).urlPercentEncoding())
            input.builder.withQueryItem(countryCodeQueryItem)
        }
        if let subdivisionCode = input.operationInput.subdivisionCode {
            let subdivisionCodeQueryItem = ClientRuntime.URLQueryItem(name: "subdivisioncode".urlPercentEncoding(), value: Swift.String(subdivisionCode).urlPercentEncoding())
            input.builder.withQueryItem(subdivisionCodeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetGeoLocationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetGeoLocationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetGeoLocationOutputError>
}

/// <p>A request for information about whether a specified geographic location is supported for Amazon Route 53 geolocation resource record sets.</p>
public struct GetGeoLocationInput: Swift.Equatable {
    /// <p>For geolocation resource record sets, a two-letter abbreviation that identifies a continent. Amazon Route 53 supports the following continent codes:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <b>AF</b>: Africa</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>AN</b>: Antarctica</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>AS</b>: Asia</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>EU</b>: Europe</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>OC</b>: Oceania</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>NA</b>: North America</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>SA</b>: South America</p>
    ///             </li>
    ///          </ul>
    public let continentCode: Swift.String?
    /// <p>Amazon Route 53 uses the two-letter country codes that are specified in
    /// 			<a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO standard 3166-1 alpha-2</a>.</p>
    public let countryCode: Swift.String?
    /// <p>The code for the subdivision, such as a particular state within the United States. For a list of US state abbreviations, see <a href="https://pe.usps.com/text/pub28/28apb.htm">Appendix B: Two–Letter State and Possession Abbreviations</a>  on the United States Postal Service website. For a list of all supported subdivision codes, use the <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListGeoLocations.html">ListGeoLocations</a> API.</p>
    public let subdivisionCode: Swift.String?

    public init (
        continentCode: Swift.String? = nil,
        countryCode: Swift.String? = nil,
        subdivisionCode: Swift.String? = nil
    )
    {
        self.continentCode = continentCode
        self.countryCode = countryCode
        self.subdivisionCode = subdivisionCode
    }
}

struct GetGeoLocationInputBody: Swift.Equatable {
}

extension GetGeoLocationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetGeoLocationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetGeoLocationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchGeoLocation" : self = .noSuchGeoLocation(try NoSuchGeoLocation(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetGeoLocationOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchGeoLocation(NoSuchGeoLocation)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetGeoLocationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetGeoLocationOutputResponse(geoLocationDetails: \(Swift.String(describing: geoLocationDetails)))"}
}

extension GetGeoLocationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetGeoLocationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.geoLocationDetails = output.geoLocationDetails
        } else {
            self.geoLocationDetails = nil
        }
    }
}

/// <p>A complex type that contains the response information for the specified geolocation code.</p>
public struct GetGeoLocationOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains the codes and full continent, country, and subdivision names for the specified geolocation code.</p>
    public let geoLocationDetails: Route53ClientTypes.GeoLocationDetails?

    public init (
        geoLocationDetails: Route53ClientTypes.GeoLocationDetails? = nil
    )
    {
        self.geoLocationDetails = geoLocationDetails
    }
}

struct GetGeoLocationOutputResponseBody: Swift.Equatable {
    public let geoLocationDetails: Route53ClientTypes.GeoLocationDetails?
}

extension GetGeoLocationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case geoLocationDetails = "GeoLocationDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let geoLocationDetailsDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.GeoLocationDetails.self, forKey: .geoLocationDetails)
        geoLocationDetails = geoLocationDetailsDecoded
    }
}

extension GetHealthCheckCountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHealthCheckCountInput()"}
}

extension GetHealthCheckCountInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetHealthCheckCountInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHealthCheckCountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHealthCheckCountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHealthCheckCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHealthCheckCountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHealthCheckCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHealthCheckCountOutputError>
}

public struct GetHealthCheckCountInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHealthCheckCountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHealthCheckCountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHealthCheckCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHealthCheckCountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHealthCheckCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHealthCheckCountOutputError>
}

/// <p>A request for the number of health checks that are associated with the current AWS account.</p>
public struct GetHealthCheckCountInput: Swift.Equatable {

    public init() {}
}

struct GetHealthCheckCountInputBody: Swift.Equatable {
}

extension GetHealthCheckCountInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetHealthCheckCountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetHealthCheckCountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetHealthCheckCountOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetHealthCheckCountOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHealthCheckCountOutputResponse(healthCheckCount: \(Swift.String(describing: healthCheckCount)))"}
}

extension GetHealthCheckCountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetHealthCheckCountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.healthCheckCount = output.healthCheckCount
        } else {
            self.healthCheckCount = nil
        }
    }
}

/// <p>A complex type that contains the response to a <code>GetHealthCheckCount</code> request.</p>
public struct GetHealthCheckCountOutputResponse: Swift.Equatable {
    /// <p>The number of health checks associated with the current AWS account.</p>
    public let healthCheckCount: Swift.Int?

    public init (
        healthCheckCount: Swift.Int? = nil
    )
    {
        self.healthCheckCount = healthCheckCount
    }
}

struct GetHealthCheckCountOutputResponseBody: Swift.Equatable {
    public let healthCheckCount: Swift.Int?
}

extension GetHealthCheckCountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckCount = "HealthCheckCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthCheckCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckCount)
        healthCheckCount = healthCheckCountDecoded
    }
}

extension GetHealthCheckInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHealthCheckInput(healthCheckId: \(Swift.String(describing: healthCheckId)))"}
}

extension GetHealthCheckInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetHealthCheckInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHealthCheckInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHealthCheckInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHealthCheckOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHealthCheckInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHealthCheckOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHealthCheckOutputError>
}

public struct GetHealthCheckInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHealthCheckInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHealthCheckInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHealthCheckOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHealthCheckInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHealthCheckOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHealthCheckOutputError>
}

/// <p>A request to get information about a specified health check. </p>
public struct GetHealthCheckInput: Swift.Equatable {
    /// <p>The identifier that Amazon Route 53 assigned to the health check when you created it. When you add or update a resource record set,
    /// 			you use this value to specify which health check to use. The value can be up to 64 characters long.</p>
    public let healthCheckId: Swift.String?

    public init (
        healthCheckId: Swift.String? = nil
    )
    {
        self.healthCheckId = healthCheckId
    }
}

struct GetHealthCheckInputBody: Swift.Equatable {
}

extension GetHealthCheckInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetHealthCheckLastFailureReasonInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHealthCheckLastFailureReasonInput(healthCheckId: \(Swift.String(describing: healthCheckId)))"}
}

extension GetHealthCheckLastFailureReasonInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetHealthCheckLastFailureReasonInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHealthCheckLastFailureReasonInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHealthCheckLastFailureReasonInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHealthCheckLastFailureReasonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHealthCheckLastFailureReasonInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHealthCheckLastFailureReasonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHealthCheckLastFailureReasonOutputError>
}

public struct GetHealthCheckLastFailureReasonInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHealthCheckLastFailureReasonInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHealthCheckLastFailureReasonInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHealthCheckLastFailureReasonOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHealthCheckLastFailureReasonInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHealthCheckLastFailureReasonOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHealthCheckLastFailureReasonOutputError>
}

/// <p>A request for the reason that a health check failed most recently.</p>
public struct GetHealthCheckLastFailureReasonInput: Swift.Equatable {
    /// <p>The ID for the health check for which you want the last failure reason. When you created the health check,
    /// 			<code>CreateHealthCheck</code> returned the ID in the response, in the <code>HealthCheckId</code> element.</p>
    /// 		       <note>
    ///             <p>If you want to get the last failure reason for a calculated health check, you must use the Amazon Route 53 console or the
    /// 			CloudWatch console. You can't use <code>GetHealthCheckLastFailureReason</code> for a calculated health check.</p>
    ///          </note>
    public let healthCheckId: Swift.String?

    public init (
        healthCheckId: Swift.String? = nil
    )
    {
        self.healthCheckId = healthCheckId
    }
}

struct GetHealthCheckLastFailureReasonInputBody: Swift.Equatable {
}

extension GetHealthCheckLastFailureReasonInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetHealthCheckLastFailureReasonOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetHealthCheckLastFailureReasonOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHealthCheck" : self = .noSuchHealthCheck(try NoSuchHealthCheck(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetHealthCheckLastFailureReasonOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchHealthCheck(NoSuchHealthCheck)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetHealthCheckLastFailureReasonOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHealthCheckLastFailureReasonOutputResponse(healthCheckObservations: \(Swift.String(describing: healthCheckObservations)))"}
}

extension GetHealthCheckLastFailureReasonOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetHealthCheckLastFailureReasonOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.healthCheckObservations = output.healthCheckObservations
        } else {
            self.healthCheckObservations = nil
        }
    }
}

/// <p>A complex type that contains the response to a <code>GetHealthCheckLastFailureReason</code> request.</p>
public struct GetHealthCheckLastFailureReasonOutputResponse: Swift.Equatable {
    /// <p>A list that contains one <code>Observation</code> element for each Amazon Route 53 health checker that is reporting a last failure reason. </p>
    public let healthCheckObservations: [Route53ClientTypes.HealthCheckObservation]?

    public init (
        healthCheckObservations: [Route53ClientTypes.HealthCheckObservation]? = nil
    )
    {
        self.healthCheckObservations = healthCheckObservations
    }
}

struct GetHealthCheckLastFailureReasonOutputResponseBody: Swift.Equatable {
    public let healthCheckObservations: [Route53ClientTypes.HealthCheckObservation]?
}

extension GetHealthCheckLastFailureReasonOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckObservations = "HealthCheckObservations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.healthCheckObservations) {
            struct KeyVal0{struct HealthCheckObservation{}}
            let healthCheckObservationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HealthCheckObservation>.CodingKeys.self, forKey: .healthCheckObservations)
            if let healthCheckObservationsWrappedContainer = healthCheckObservationsWrappedContainer {
                let healthCheckObservationsContainer = try healthCheckObservationsWrappedContainer.decodeIfPresent([Route53ClientTypes.HealthCheckObservation].self, forKey: .member)
                var healthCheckObservationsBuffer:[Route53ClientTypes.HealthCheckObservation]? = nil
                if let healthCheckObservationsContainer = healthCheckObservationsContainer {
                    healthCheckObservationsBuffer = [Route53ClientTypes.HealthCheckObservation]()
                    for structureContainer0 in healthCheckObservationsContainer {
                        healthCheckObservationsBuffer?.append(structureContainer0)
                    }
                }
                healthCheckObservations = healthCheckObservationsBuffer
            } else {
                healthCheckObservations = []
            }
        } else {
            healthCheckObservations = nil
        }
    }
}

extension GetHealthCheckOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetHealthCheckOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IncompatibleVersion" : self = .incompatibleVersion(try IncompatibleVersion(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHealthCheck" : self = .noSuchHealthCheck(try NoSuchHealthCheck(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetHealthCheckOutputError: Swift.Error, Swift.Equatable {
    case incompatibleVersion(IncompatibleVersion)
    case invalidInput(InvalidInput)
    case noSuchHealthCheck(NoSuchHealthCheck)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetHealthCheckOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHealthCheckOutputResponse(healthCheck: \(Swift.String(describing: healthCheck)))"}
}

extension GetHealthCheckOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetHealthCheckOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.healthCheck = output.healthCheck
        } else {
            self.healthCheck = nil
        }
    }
}

/// <p>A complex type that contains the response to a <code>GetHealthCheck</code> request.</p>
public struct GetHealthCheckOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains information about one health check that is associated with
    /// 			the current AWS account.</p>
    public let healthCheck: Route53ClientTypes.HealthCheck?

    public init (
        healthCheck: Route53ClientTypes.HealthCheck? = nil
    )
    {
        self.healthCheck = healthCheck
    }
}

struct GetHealthCheckOutputResponseBody: Swift.Equatable {
    public let healthCheck: Route53ClientTypes.HealthCheck?
}

extension GetHealthCheckOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheck = "HealthCheck"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthCheckDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HealthCheck.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
    }
}

extension GetHealthCheckStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHealthCheckStatusInput(healthCheckId: \(Swift.String(describing: healthCheckId)))"}
}

extension GetHealthCheckStatusInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetHealthCheckStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHealthCheckStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHealthCheckStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHealthCheckStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHealthCheckStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHealthCheckStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHealthCheckStatusOutputError>
}

public struct GetHealthCheckStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHealthCheckStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHealthCheckStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHealthCheckStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHealthCheckStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHealthCheckStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHealthCheckStatusOutputError>
}

/// <p>A request to get the status for a health check.</p>
public struct GetHealthCheckStatusInput: Swift.Equatable {
    /// <p>The ID for the health check that you want the current status for. When you created the health check,
    /// 			<code>CreateHealthCheck</code> returned the ID in the response, in the <code>HealthCheckId</code> element.</p>
    /// 		       <note>
    ///             <p>If you want to check the status of a calculated health check, you must use the Amazon Route 53 console or the CloudWatch console.
    /// 			You can't use <code>GetHealthCheckStatus</code> to get the status of a calculated health check.</p>
    ///          </note>
    public let healthCheckId: Swift.String?

    public init (
        healthCheckId: Swift.String? = nil
    )
    {
        self.healthCheckId = healthCheckId
    }
}

struct GetHealthCheckStatusInputBody: Swift.Equatable {
}

extension GetHealthCheckStatusInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetHealthCheckStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetHealthCheckStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHealthCheck" : self = .noSuchHealthCheck(try NoSuchHealthCheck(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetHealthCheckStatusOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchHealthCheck(NoSuchHealthCheck)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetHealthCheckStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHealthCheckStatusOutputResponse(healthCheckObservations: \(Swift.String(describing: healthCheckObservations)))"}
}

extension GetHealthCheckStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetHealthCheckStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.healthCheckObservations = output.healthCheckObservations
        } else {
            self.healthCheckObservations = nil
        }
    }
}

/// <p>A complex type that contains the response to a <code>GetHealthCheck</code>
/// 			request.</p>
public struct GetHealthCheckStatusOutputResponse: Swift.Equatable {
    /// <p>A list that contains one <code>HealthCheckObservation</code> element for each Amazon Route 53 health checker that is reporting a status
    /// 			about the health check endpoint.</p>
    public let healthCheckObservations: [Route53ClientTypes.HealthCheckObservation]?

    public init (
        healthCheckObservations: [Route53ClientTypes.HealthCheckObservation]? = nil
    )
    {
        self.healthCheckObservations = healthCheckObservations
    }
}

struct GetHealthCheckStatusOutputResponseBody: Swift.Equatable {
    public let healthCheckObservations: [Route53ClientTypes.HealthCheckObservation]?
}

extension GetHealthCheckStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckObservations = "HealthCheckObservations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.healthCheckObservations) {
            struct KeyVal0{struct HealthCheckObservation{}}
            let healthCheckObservationsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HealthCheckObservation>.CodingKeys.self, forKey: .healthCheckObservations)
            if let healthCheckObservationsWrappedContainer = healthCheckObservationsWrappedContainer {
                let healthCheckObservationsContainer = try healthCheckObservationsWrappedContainer.decodeIfPresent([Route53ClientTypes.HealthCheckObservation].self, forKey: .member)
                var healthCheckObservationsBuffer:[Route53ClientTypes.HealthCheckObservation]? = nil
                if let healthCheckObservationsContainer = healthCheckObservationsContainer {
                    healthCheckObservationsBuffer = [Route53ClientTypes.HealthCheckObservation]()
                    for structureContainer0 in healthCheckObservationsContainer {
                        healthCheckObservationsBuffer?.append(structureContainer0)
                    }
                }
                healthCheckObservations = healthCheckObservationsBuffer
            } else {
                healthCheckObservations = []
            }
        } else {
            healthCheckObservations = nil
        }
    }
}

extension GetHostedZoneCountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHostedZoneCountInput()"}
}

extension GetHostedZoneCountInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetHostedZoneCountInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHostedZoneCountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHostedZoneCountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHostedZoneCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHostedZoneCountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHostedZoneCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHostedZoneCountOutputError>
}

public struct GetHostedZoneCountInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHostedZoneCountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHostedZoneCountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHostedZoneCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHostedZoneCountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHostedZoneCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHostedZoneCountOutputError>
}

/// <p>A request to retrieve a count of all the hosted zones that are associated with the current AWS account.</p>
public struct GetHostedZoneCountInput: Swift.Equatable {

    public init() {}
}

struct GetHostedZoneCountInputBody: Swift.Equatable {
}

extension GetHostedZoneCountInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetHostedZoneCountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetHostedZoneCountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetHostedZoneCountOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetHostedZoneCountOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHostedZoneCountOutputResponse(hostedZoneCount: \(Swift.String(describing: hostedZoneCount)))"}
}

extension GetHostedZoneCountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetHostedZoneCountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hostedZoneCount = output.hostedZoneCount
        } else {
            self.hostedZoneCount = nil
        }
    }
}

/// <p>A complex type that contains the response to a <code>GetHostedZoneCount</code> request.</p>
public struct GetHostedZoneCountOutputResponse: Swift.Equatable {
    /// <p>The total number of public and private hosted zones that are associated with the current AWS account.</p>
    public let hostedZoneCount: Swift.Int?

    public init (
        hostedZoneCount: Swift.Int? = nil
    )
    {
        self.hostedZoneCount = hostedZoneCount
    }
}

struct GetHostedZoneCountOutputResponseBody: Swift.Equatable {
    public let hostedZoneCount: Swift.Int?
}

extension GetHostedZoneCountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZoneCount = "HostedZoneCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .hostedZoneCount)
        hostedZoneCount = hostedZoneCountDecoded
    }
}

extension GetHostedZoneInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHostedZoneInput(id: \(Swift.String(describing: id)))"}
}

extension GetHostedZoneInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetHostedZoneInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHostedZoneInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHostedZoneOutputError>
}

public struct GetHostedZoneInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHostedZoneInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHostedZoneOutputError>
}

/// <p>A request to get information about a specified hosted zone. </p>
public struct GetHostedZoneInput: Swift.Equatable {
    /// <p>The ID of the hosted zone that you want to get information about.</p>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct GetHostedZoneInputBody: Swift.Equatable {
}

extension GetHostedZoneInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetHostedZoneLimitInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHostedZoneLimitInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)), type: \(Swift.String(describing: type)))"}
}

extension GetHostedZoneLimitInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetHostedZoneLimitInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHostedZoneLimitInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHostedZoneLimitInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHostedZoneLimitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHostedZoneLimitInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHostedZoneLimitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHostedZoneLimitOutputError>
}

public struct GetHostedZoneLimitInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetHostedZoneLimitInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetHostedZoneLimitInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetHostedZoneLimitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetHostedZoneLimitInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetHostedZoneLimitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetHostedZoneLimitOutputError>
}

/// <p>A complex type that contains information about the request to create a hosted zone.</p>
public struct GetHostedZoneLimitInput: Swift.Equatable {
    /// <p>The ID of the hosted zone that you want to get a limit for.</p>
    public let hostedZoneId: Swift.String?
    /// <p>The limit that you want to get. Valid values include the following:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <b>MAX_RRSETS_BY_ZONE</b>: The maximum number of records that you can create
    /// 				in the specified hosted zone.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>MAX_VPCS_ASSOCIATED_BY_ZONE</b>: The maximum number of Amazon VPCs that you can
    /// 				associate with the specified private hosted zone.</p>
    ///             </li>
    ///          </ul>
    public let type: Route53ClientTypes.HostedZoneLimitType?

    public init (
        hostedZoneId: Swift.String? = nil,
        type: Route53ClientTypes.HostedZoneLimitType? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.type = type
    }
}

struct GetHostedZoneLimitInputBody: Swift.Equatable {
}

extension GetHostedZoneLimitInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetHostedZoneLimitOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetHostedZoneLimitOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "HostedZoneNotPrivate" : self = .hostedZoneNotPrivate(try HostedZoneNotPrivate(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetHostedZoneLimitOutputError: Swift.Error, Swift.Equatable {
    case hostedZoneNotPrivate(HostedZoneNotPrivate)
    case invalidInput(InvalidInput)
    case noSuchHostedZone(NoSuchHostedZone)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetHostedZoneLimitOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHostedZoneLimitOutputResponse(count: \(Swift.String(describing: count)), limit: \(Swift.String(describing: limit)))"}
}

extension GetHostedZoneLimitOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetHostedZoneLimitOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.count = output.count
            self.limit = output.limit
        } else {
            self.count = 0
            self.limit = nil
        }
    }
}

/// <p>A complex type that contains the requested limit. </p>
public struct GetHostedZoneLimitOutputResponse: Swift.Equatable {
    /// <p>The current number of entities that you have created of the specified type. For example, if you specified
    /// 			<code>MAX_RRSETS_BY_ZONE</code> for the value of <code>Type</code> in the request, the value of <code>Count</code>
    /// 			is the current number of records that you have created in the specified hosted zone.</p>
    public let count: Swift.Int
    /// <p>The current setting for the specified limit. For example, if you specified <code>MAX_RRSETS_BY_ZONE</code> for the value of
    /// 			<code>Type</code> in the request, the value of <code>Limit</code> is the maximum number of records that you can create
    /// 			in the specified hosted zone.</p>
    public let limit: Route53ClientTypes.HostedZoneLimit?

    public init (
        count: Swift.Int = 0,
        limit: Route53ClientTypes.HostedZoneLimit? = nil
    )
    {
        self.count = count
        self.limit = limit
    }
}

struct GetHostedZoneLimitOutputResponseBody: Swift.Equatable {
    public let limit: Route53ClientTypes.HostedZoneLimit?
    public let count: Swift.Int
}

extension GetHostedZoneLimitOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case limit = "Limit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HostedZoneLimit.self, forKey: .limit)
        limit = limitDecoded
        let countDecoded = try containerValues.decode(Swift.Int.self, forKey: .count)
        count = countDecoded
    }
}

extension GetHostedZoneOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetHostedZoneOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetHostedZoneOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchHostedZone(NoSuchHostedZone)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetHostedZoneOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetHostedZoneOutputResponse(delegationSet: \(Swift.String(describing: delegationSet)), hostedZone: \(Swift.String(describing: hostedZone)), vPCs: \(Swift.String(describing: vPCs)))"}
}

extension GetHostedZoneOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetHostedZoneOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.delegationSet = output.delegationSet
            self.hostedZone = output.hostedZone
            self.vPCs = output.vPCs
        } else {
            self.delegationSet = nil
            self.hostedZone = nil
            self.vPCs = nil
        }
    }
}

/// <p>A complex type that contain the response to a <code>GetHostedZone</code> request.</p>
public struct GetHostedZoneOutputResponse: Swift.Equatable {
    /// <p>A complex type that lists the Amazon Route 53 name servers for the specified hosted zone.</p>
    public let delegationSet: Route53ClientTypes.DelegationSet?
    /// <p>A complex type that contains general information about the specified hosted zone.</p>
    public let hostedZone: Route53ClientTypes.HostedZone?
    /// <p>A complex type that contains information about the VPCs that are associated with the specified hosted zone.</p>
    public let vPCs: [Route53ClientTypes.VPC]?

    public init (
        delegationSet: Route53ClientTypes.DelegationSet? = nil,
        hostedZone: Route53ClientTypes.HostedZone? = nil,
        vPCs: [Route53ClientTypes.VPC]? = nil
    )
    {
        self.delegationSet = delegationSet
        self.hostedZone = hostedZone
        self.vPCs = vPCs
    }
}

struct GetHostedZoneOutputResponseBody: Swift.Equatable {
    public let hostedZone: Route53ClientTypes.HostedZone?
    public let delegationSet: Route53ClientTypes.DelegationSet?
    public let vPCs: [Route53ClientTypes.VPC]?
}

extension GetHostedZoneOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delegationSet = "DelegationSet"
        case hostedZone = "HostedZone"
        case vPCs = "VPCs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HostedZone.self, forKey: .hostedZone)
        hostedZone = hostedZoneDecoded
        let delegationSetDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.DelegationSet.self, forKey: .delegationSet)
        delegationSet = delegationSetDecoded
        if containerValues.contains(.vPCs) {
            struct KeyVal0{struct VPC{}}
            let vPCsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VPC>.CodingKeys.self, forKey: .vPCs)
            if let vPCsWrappedContainer = vPCsWrappedContainer {
                let vPCsContainer = try vPCsWrappedContainer.decodeIfPresent([Route53ClientTypes.VPC].self, forKey: .member)
                var vPCsBuffer:[Route53ClientTypes.VPC]? = nil
                if let vPCsContainer = vPCsContainer {
                    vPCsBuffer = [Route53ClientTypes.VPC]()
                    for structureContainer0 in vPCsContainer {
                        vPCsBuffer?.append(structureContainer0)
                    }
                }
                vPCs = vPCsBuffer
            } else {
                vPCs = []
            }
        } else {
            vPCs = nil
        }
    }
}

extension GetQueryLoggingConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetQueryLoggingConfigInput(id: \(Swift.String(describing: id)))"}
}

extension GetQueryLoggingConfigInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetQueryLoggingConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetQueryLoggingConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetQueryLoggingConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetQueryLoggingConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetQueryLoggingConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetQueryLoggingConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetQueryLoggingConfigOutputError>
}

public struct GetQueryLoggingConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetQueryLoggingConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetQueryLoggingConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetQueryLoggingConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetQueryLoggingConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetQueryLoggingConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetQueryLoggingConfigOutputError>
}

public struct GetQueryLoggingConfigInput: Swift.Equatable {
    /// <p>The ID of the configuration for DNS query logging that you want to get information about.</p>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct GetQueryLoggingConfigInputBody: Swift.Equatable {
}

extension GetQueryLoggingConfigInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetQueryLoggingConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetQueryLoggingConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchQueryLoggingConfig" : self = .noSuchQueryLoggingConfig(try NoSuchQueryLoggingConfig(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetQueryLoggingConfigOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchQueryLoggingConfig(NoSuchQueryLoggingConfig)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetQueryLoggingConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetQueryLoggingConfigOutputResponse(queryLoggingConfig: \(Swift.String(describing: queryLoggingConfig)))"}
}

extension GetQueryLoggingConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetQueryLoggingConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.queryLoggingConfig = output.queryLoggingConfig
        } else {
            self.queryLoggingConfig = nil
        }
    }
}

public struct GetQueryLoggingConfigOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains information about the query logging configuration that you specified in a
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetQueryLoggingConfig.html">GetQueryLoggingConfig</a> request.</p>
    public let queryLoggingConfig: Route53ClientTypes.QueryLoggingConfig?

    public init (
        queryLoggingConfig: Route53ClientTypes.QueryLoggingConfig? = nil
    )
    {
        self.queryLoggingConfig = queryLoggingConfig
    }
}

struct GetQueryLoggingConfigOutputResponseBody: Swift.Equatable {
    public let queryLoggingConfig: Route53ClientTypes.QueryLoggingConfig?
}

extension GetQueryLoggingConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryLoggingConfig = "QueryLoggingConfig"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryLoggingConfigDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.QueryLoggingConfig.self, forKey: .queryLoggingConfig)
        queryLoggingConfig = queryLoggingConfigDecoded
    }
}

extension GetReusableDelegationSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetReusableDelegationSetInput(id: \(Swift.String(describing: id)))"}
}

extension GetReusableDelegationSetInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetReusableDelegationSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetReusableDelegationSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetReusableDelegationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetReusableDelegationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetReusableDelegationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetReusableDelegationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetReusableDelegationSetOutputError>
}

public struct GetReusableDelegationSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetReusableDelegationSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetReusableDelegationSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetReusableDelegationSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetReusableDelegationSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetReusableDelegationSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetReusableDelegationSetOutputError>
}

/// <p>A request to get information about a specified reusable delegation set.</p>
public struct GetReusableDelegationSetInput: Swift.Equatable {
    /// <p>The ID of the reusable delegation set that you want to get a list of name servers for.</p>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct GetReusableDelegationSetInputBody: Swift.Equatable {
}

extension GetReusableDelegationSetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetReusableDelegationSetLimitInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetReusableDelegationSetLimitInput(delegationSetId: \(Swift.String(describing: delegationSetId)), type: \(Swift.String(describing: type)))"}
}

extension GetReusableDelegationSetLimitInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetReusableDelegationSetLimitInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetReusableDelegationSetLimitInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetReusableDelegationSetLimitInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetReusableDelegationSetLimitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetReusableDelegationSetLimitInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetReusableDelegationSetLimitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetReusableDelegationSetLimitOutputError>
}

public struct GetReusableDelegationSetLimitInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetReusableDelegationSetLimitInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetReusableDelegationSetLimitInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetReusableDelegationSetLimitOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetReusableDelegationSetLimitInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetReusableDelegationSetLimitOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetReusableDelegationSetLimitOutputError>
}

/// <p>A complex type that contains information about the request to create a hosted zone.</p>
public struct GetReusableDelegationSetLimitInput: Swift.Equatable {
    /// <p>The ID of the delegation set that you want to get the limit for.</p>
    public let delegationSetId: Swift.String?
    /// <p>Specify <code>MAX_ZONES_BY_REUSABLE_DELEGATION_SET</code> to get the maximum number of hosted zones that you can associate
    /// 			with the specified reusable delegation set.</p>
    public let type: Route53ClientTypes.ReusableDelegationSetLimitType?

    public init (
        delegationSetId: Swift.String? = nil,
        type: Route53ClientTypes.ReusableDelegationSetLimitType? = nil
    )
    {
        self.delegationSetId = delegationSetId
        self.type = type
    }
}

struct GetReusableDelegationSetLimitInputBody: Swift.Equatable {
}

extension GetReusableDelegationSetLimitInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetReusableDelegationSetLimitOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetReusableDelegationSetLimitOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchDelegationSet" : self = .noSuchDelegationSet(try NoSuchDelegationSet(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetReusableDelegationSetLimitOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchDelegationSet(NoSuchDelegationSet)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetReusableDelegationSetLimitOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetReusableDelegationSetLimitOutputResponse(count: \(Swift.String(describing: count)), limit: \(Swift.String(describing: limit)))"}
}

extension GetReusableDelegationSetLimitOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetReusableDelegationSetLimitOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.count = output.count
            self.limit = output.limit
        } else {
            self.count = 0
            self.limit = nil
        }
    }
}

/// <p>A complex type that contains the requested limit. </p>
public struct GetReusableDelegationSetLimitOutputResponse: Swift.Equatable {
    /// <p>The current number of hosted zones that you can associate with the specified reusable delegation set.</p>
    public let count: Swift.Int
    /// <p>The current setting for the limit on hosted zones that you can associate with the specified reusable delegation set.</p>
    public let limit: Route53ClientTypes.ReusableDelegationSetLimit?

    public init (
        count: Swift.Int = 0,
        limit: Route53ClientTypes.ReusableDelegationSetLimit? = nil
    )
    {
        self.count = count
        self.limit = limit
    }
}

struct GetReusableDelegationSetLimitOutputResponseBody: Swift.Equatable {
    public let limit: Route53ClientTypes.ReusableDelegationSetLimit?
    public let count: Swift.Int
}

extension GetReusableDelegationSetLimitOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case limit = "Limit"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ReusableDelegationSetLimit.self, forKey: .limit)
        limit = limitDecoded
        let countDecoded = try containerValues.decode(Swift.Int.self, forKey: .count)
        count = countDecoded
    }
}

extension GetReusableDelegationSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetReusableDelegationSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DelegationSetNotReusable" : self = .delegationSetNotReusable(try DelegationSetNotReusable(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchDelegationSet" : self = .noSuchDelegationSet(try NoSuchDelegationSet(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetReusableDelegationSetOutputError: Swift.Error, Swift.Equatable {
    case delegationSetNotReusable(DelegationSetNotReusable)
    case invalidInput(InvalidInput)
    case noSuchDelegationSet(NoSuchDelegationSet)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetReusableDelegationSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetReusableDelegationSetOutputResponse(delegationSet: \(Swift.String(describing: delegationSet)))"}
}

extension GetReusableDelegationSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetReusableDelegationSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.delegationSet = output.delegationSet
        } else {
            self.delegationSet = nil
        }
    }
}

/// <p>A complex type that contains the response to the <code>GetReusableDelegationSet</code> request.</p>
public struct GetReusableDelegationSetOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains information about the reusable delegation set.</p>
    public let delegationSet: Route53ClientTypes.DelegationSet?

    public init (
        delegationSet: Route53ClientTypes.DelegationSet? = nil
    )
    {
        self.delegationSet = delegationSet
    }
}

struct GetReusableDelegationSetOutputResponseBody: Swift.Equatable {
    public let delegationSet: Route53ClientTypes.DelegationSet?
}

extension GetReusableDelegationSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delegationSet = "DelegationSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let delegationSetDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.DelegationSet.self, forKey: .delegationSet)
        delegationSet = delegationSetDecoded
    }
}

extension GetTrafficPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTrafficPolicyInput(id: \(Swift.String(describing: id)), version: \(Swift.String(describing: version)))"}
}

extension GetTrafficPolicyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetTrafficPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTrafficPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTrafficPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTrafficPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTrafficPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTrafficPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTrafficPolicyOutputError>
}

public struct GetTrafficPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTrafficPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTrafficPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTrafficPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTrafficPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTrafficPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTrafficPolicyOutputError>
}

/// <p>Gets information about a specific traffic policy version.</p>
public struct GetTrafficPolicyInput: Swift.Equatable {
    /// <p>The ID of the traffic policy that you want to get information about.</p>
    public let id: Swift.String?
    /// <p>The version number of the traffic policy that you want to get information about.</p>
    public let version: Swift.Int?

    public init (
        id: Swift.String? = nil,
        version: Swift.Int? = nil
    )
    {
        self.id = id
        self.version = version
    }
}

struct GetTrafficPolicyInputBody: Swift.Equatable {
}

extension GetTrafficPolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetTrafficPolicyInstanceCountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTrafficPolicyInstanceCountInput()"}
}

extension GetTrafficPolicyInstanceCountInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetTrafficPolicyInstanceCountInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTrafficPolicyInstanceCountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTrafficPolicyInstanceCountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTrafficPolicyInstanceCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTrafficPolicyInstanceCountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTrafficPolicyInstanceCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTrafficPolicyInstanceCountOutputError>
}

public struct GetTrafficPolicyInstanceCountInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTrafficPolicyInstanceCountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTrafficPolicyInstanceCountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTrafficPolicyInstanceCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTrafficPolicyInstanceCountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTrafficPolicyInstanceCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTrafficPolicyInstanceCountOutputError>
}

/// <p>Request to get the number of traffic policy instances that are associated with the current AWS account.</p>
public struct GetTrafficPolicyInstanceCountInput: Swift.Equatable {

    public init() {}
}

struct GetTrafficPolicyInstanceCountInputBody: Swift.Equatable {
}

extension GetTrafficPolicyInstanceCountInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetTrafficPolicyInstanceCountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetTrafficPolicyInstanceCountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTrafficPolicyInstanceCountOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTrafficPolicyInstanceCountOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTrafficPolicyInstanceCountOutputResponse(trafficPolicyInstanceCount: \(Swift.String(describing: trafficPolicyInstanceCount)))"}
}

extension GetTrafficPolicyInstanceCountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTrafficPolicyInstanceCountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trafficPolicyInstanceCount = output.trafficPolicyInstanceCount
        } else {
            self.trafficPolicyInstanceCount = nil
        }
    }
}

/// <p>A complex type that contains information about the resource record sets that Amazon Route 53 created based on a specified traffic policy.</p>
public struct GetTrafficPolicyInstanceCountOutputResponse: Swift.Equatable {
    /// <p>The number of traffic policy instances that are associated with the current AWS account.</p>
    public let trafficPolicyInstanceCount: Swift.Int?

    public init (
        trafficPolicyInstanceCount: Swift.Int? = nil
    )
    {
        self.trafficPolicyInstanceCount = trafficPolicyInstanceCount
    }
}

struct GetTrafficPolicyInstanceCountOutputResponseBody: Swift.Equatable {
    public let trafficPolicyInstanceCount: Swift.Int?
}

extension GetTrafficPolicyInstanceCountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trafficPolicyInstanceCount = "TrafficPolicyInstanceCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficPolicyInstanceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .trafficPolicyInstanceCount)
        trafficPolicyInstanceCount = trafficPolicyInstanceCountDecoded
    }
}

extension GetTrafficPolicyInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTrafficPolicyInstanceInput(id: \(Swift.String(describing: id)))"}
}

extension GetTrafficPolicyInstanceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetTrafficPolicyInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTrafficPolicyInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTrafficPolicyInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTrafficPolicyInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTrafficPolicyInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTrafficPolicyInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTrafficPolicyInstanceOutputError>
}

public struct GetTrafficPolicyInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTrafficPolicyInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTrafficPolicyInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTrafficPolicyInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTrafficPolicyInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTrafficPolicyInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTrafficPolicyInstanceOutputError>
}

/// <p>Gets information about a specified traffic policy instance.</p>
public struct GetTrafficPolicyInstanceInput: Swift.Equatable {
    /// <p>The ID of the traffic policy instance that you want to get information about.</p>
    public let id: Swift.String?

    public init (
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct GetTrafficPolicyInstanceInputBody: Swift.Equatable {
}

extension GetTrafficPolicyInstanceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetTrafficPolicyInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetTrafficPolicyInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicyInstance" : self = .noSuchTrafficPolicyInstance(try NoSuchTrafficPolicyInstance(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTrafficPolicyInstanceOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchTrafficPolicyInstance(NoSuchTrafficPolicyInstance)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTrafficPolicyInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTrafficPolicyInstanceOutputResponse(trafficPolicyInstance: \(Swift.String(describing: trafficPolicyInstance)))"}
}

extension GetTrafficPolicyInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTrafficPolicyInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trafficPolicyInstance = output.trafficPolicyInstance
        } else {
            self.trafficPolicyInstance = nil
        }
    }
}

/// <p>A complex type that contains information about the resource record sets that Amazon Route 53 created based on a specified traffic policy.</p>
public struct GetTrafficPolicyInstanceOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains settings for the traffic policy instance.</p>
    public let trafficPolicyInstance: Route53ClientTypes.TrafficPolicyInstance?

    public init (
        trafficPolicyInstance: Route53ClientTypes.TrafficPolicyInstance? = nil
    )
    {
        self.trafficPolicyInstance = trafficPolicyInstance
    }
}

struct GetTrafficPolicyInstanceOutputResponseBody: Swift.Equatable {
    public let trafficPolicyInstance: Route53ClientTypes.TrafficPolicyInstance?
}

extension GetTrafficPolicyInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trafficPolicyInstance = "TrafficPolicyInstance"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficPolicyInstanceDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.TrafficPolicyInstance.self, forKey: .trafficPolicyInstance)
        trafficPolicyInstance = trafficPolicyInstanceDecoded
    }
}

extension GetTrafficPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetTrafficPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicy" : self = .noSuchTrafficPolicy(try NoSuchTrafficPolicy(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTrafficPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchTrafficPolicy(NoSuchTrafficPolicy)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTrafficPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTrafficPolicyOutputResponse(trafficPolicy: \(Swift.String(describing: trafficPolicy)))"}
}

extension GetTrafficPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTrafficPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trafficPolicy = output.trafficPolicy
        } else {
            self.trafficPolicy = nil
        }
    }
}

/// <p>A complex type that contains the response information for the request.</p>
public struct GetTrafficPolicyOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains settings for the specified traffic policy.</p>
    public let trafficPolicy: Route53ClientTypes.TrafficPolicy?

    public init (
        trafficPolicy: Route53ClientTypes.TrafficPolicy? = nil
    )
    {
        self.trafficPolicy = trafficPolicy
    }
}

struct GetTrafficPolicyOutputResponseBody: Swift.Equatable {
    public let trafficPolicy: Route53ClientTypes.TrafficPolicy?
}

extension GetTrafficPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trafficPolicy = "TrafficPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficPolicyDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.TrafficPolicy.self, forKey: .trafficPolicy)
        trafficPolicy = trafficPolicyDecoded
    }
}

extension Route53ClientTypes.HealthCheck: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case cloudWatchAlarmConfiguration = "CloudWatchAlarmConfiguration"
        case healthCheckConfig = "HealthCheckConfig"
        case healthCheckVersion = "HealthCheckVersion"
        case id = "Id"
        case linkedService = "LinkedService"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let callerReference = callerReference {
            try container.encode(callerReference, forKey: ClientRuntime.Key("CallerReference"))
        }
        if let cloudWatchAlarmConfiguration = cloudWatchAlarmConfiguration {
            try container.encode(cloudWatchAlarmConfiguration, forKey: ClientRuntime.Key("CloudWatchAlarmConfiguration"))
        }
        if let healthCheckConfig = healthCheckConfig {
            try container.encode(healthCheckConfig, forKey: ClientRuntime.Key("HealthCheckConfig"))
        }
        if let healthCheckVersion = healthCheckVersion {
            try container.encode(healthCheckVersion, forKey: ClientRuntime.Key("HealthCheckVersion"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let linkedService = linkedService {
            try container.encode(linkedService, forKey: ClientRuntime.Key("LinkedService"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let callerReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callerReference)
        callerReference = callerReferenceDecoded
        let linkedServiceDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.LinkedService.self, forKey: .linkedService)
        linkedService = linkedServiceDecoded
        let healthCheckConfigDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HealthCheckConfig.self, forKey: .healthCheckConfig)
        healthCheckConfig = healthCheckConfigDecoded
        let healthCheckVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckVersion)
        healthCheckVersion = healthCheckVersionDecoded
        let cloudWatchAlarmConfigurationDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.CloudWatchAlarmConfiguration.self, forKey: .cloudWatchAlarmConfiguration)
        cloudWatchAlarmConfiguration = cloudWatchAlarmConfigurationDecoded
    }
}

extension Route53ClientTypes.HealthCheck: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HealthCheck(callerReference: \(Swift.String(describing: callerReference)), cloudWatchAlarmConfiguration: \(Swift.String(describing: cloudWatchAlarmConfiguration)), healthCheckConfig: \(Swift.String(describing: healthCheckConfig)), healthCheckVersion: \(Swift.String(describing: healthCheckVersion)), id: \(Swift.String(describing: id)), linkedService: \(Swift.String(describing: linkedService)))"}
}

extension Route53ClientTypes.HealthCheck: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains information about one health check that is associated with the current AWS account.</p>
    public struct HealthCheck: Swift.Equatable {
        /// <p>A unique string that you specified when you created the health check.</p>
        public let callerReference: Swift.String?
        /// <p>A complex type that contains information about the CloudWatch alarm that Amazon Route 53 is monitoring for this health check.</p>
        public let cloudWatchAlarmConfiguration: Route53ClientTypes.CloudWatchAlarmConfiguration?
        /// <p>A complex type that contains detailed information about one health check.</p>
        public let healthCheckConfig: Route53ClientTypes.HealthCheckConfig?
        /// <p>The version of the health check. You can optionally pass this value in a call to <code>UpdateHealthCheck</code> to prevent overwriting
        /// 			another change to the health check.</p>
        public let healthCheckVersion: Swift.Int?
        /// <p>The identifier that Amazon Route 53 assigned to the health check when you created it. When you add or update a resource record set, you use
        /// 			this value to specify which health check to use. The value can be up to 64 characters long. </p>
        public let id: Swift.String?
        /// <p>If the health check was created by another service, the service that created the health check. When a health check is created
        /// 			by another service, you can't edit or delete it using Amazon Route 53. </p>
        public let linkedService: Route53ClientTypes.LinkedService?

        public init (
            callerReference: Swift.String? = nil,
            cloudWatchAlarmConfiguration: Route53ClientTypes.CloudWatchAlarmConfiguration? = nil,
            healthCheckConfig: Route53ClientTypes.HealthCheckConfig? = nil,
            healthCheckVersion: Swift.Int? = nil,
            id: Swift.String? = nil,
            linkedService: Route53ClientTypes.LinkedService? = nil
        )
        {
            self.callerReference = callerReference
            self.cloudWatchAlarmConfiguration = cloudWatchAlarmConfiguration
            self.healthCheckConfig = healthCheckConfig
            self.healthCheckVersion = healthCheckVersion
            self.id = id
            self.linkedService = linkedService
        }
    }

}

extension HealthCheckAlreadyExists: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HealthCheckAlreadyExists(message: \(Swift.String(describing: message)))"}
}

extension HealthCheckAlreadyExists: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<HealthCheckAlreadyExistsBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p> The health check you're attempting to create already exists. Amazon Route 53 returns this error when you submit a request that
/// 			has the following values:</p>
/// 		       <ul>
///             <li>
///                <p>The same value for <code>CallerReference</code> as an existing health check, and one or more values that differ
/// 				from the existing health check that has the same caller reference.</p>
///             </li>
///             <li>
///                <p>The same value for <code>CallerReference</code> as a health check that you created and later deleted,
/// 				regardless of the other settings in the request.</p>
///             </li>
///          </ul>
public struct HealthCheckAlreadyExists: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct HealthCheckAlreadyExistsBody: Swift.Equatable {
    public let message: Swift.String?
}

extension HealthCheckAlreadyExistsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.HealthCheckConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmIdentifier = "AlarmIdentifier"
        case childHealthChecks = "ChildHealthChecks"
        case disabled = "Disabled"
        case enableSNI = "EnableSNI"
        case failureThreshold = "FailureThreshold"
        case fullyQualifiedDomainName = "FullyQualifiedDomainName"
        case healthThreshold = "HealthThreshold"
        case iPAddress = "IPAddress"
        case insufficientDataHealthStatus = "InsufficientDataHealthStatus"
        case inverted = "Inverted"
        case measureLatency = "MeasureLatency"
        case port = "Port"
        case regions = "Regions"
        case requestInterval = "RequestInterval"
        case resourcePath = "ResourcePath"
        case searchString = "SearchString"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let alarmIdentifier = alarmIdentifier {
            try container.encode(alarmIdentifier, forKey: ClientRuntime.Key("AlarmIdentifier"))
        }
        if let childHealthChecks = childHealthChecks {
            var childHealthChecksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ChildHealthChecks"))
            for healthcheckid0 in childHealthChecks {
                try childHealthChecksContainer.encode(healthcheckid0, forKey: ClientRuntime.Key("ChildHealthCheck"))
            }
        }
        if let disabled = disabled {
            try container.encode(disabled, forKey: ClientRuntime.Key("Disabled"))
        }
        if let enableSNI = enableSNI {
            try container.encode(enableSNI, forKey: ClientRuntime.Key("EnableSNI"))
        }
        if let failureThreshold = failureThreshold {
            try container.encode(failureThreshold, forKey: ClientRuntime.Key("FailureThreshold"))
        }
        if let fullyQualifiedDomainName = fullyQualifiedDomainName {
            try container.encode(fullyQualifiedDomainName, forKey: ClientRuntime.Key("FullyQualifiedDomainName"))
        }
        if let healthThreshold = healthThreshold {
            try container.encode(healthThreshold, forKey: ClientRuntime.Key("HealthThreshold"))
        }
        if let iPAddress = iPAddress {
            try container.encode(iPAddress, forKey: ClientRuntime.Key("IPAddress"))
        }
        if let insufficientDataHealthStatus = insufficientDataHealthStatus {
            try container.encode(insufficientDataHealthStatus, forKey: ClientRuntime.Key("InsufficientDataHealthStatus"))
        }
        if let inverted = inverted {
            try container.encode(inverted, forKey: ClientRuntime.Key("Inverted"))
        }
        if let measureLatency = measureLatency {
            try container.encode(measureLatency, forKey: ClientRuntime.Key("MeasureLatency"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let regions = regions {
            var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
            for healthcheckregion0 in regions {
                try regionsContainer.encode(healthcheckregion0, forKey: ClientRuntime.Key("Region"))
            }
        }
        if let requestInterval = requestInterval {
            try container.encode(requestInterval, forKey: ClientRuntime.Key("RequestInterval"))
        }
        if let resourcePath = resourcePath {
            try container.encode(resourcePath, forKey: ClientRuntime.Key("ResourcePath"))
        }
        if let searchString = searchString {
            try container.encode(searchString, forKey: ClientRuntime.Key("SearchString"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iPAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iPAddress)
        iPAddress = iPAddressDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HealthCheckType.self, forKey: .type)
        type = typeDecoded
        let resourcePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePath)
        resourcePath = resourcePathDecoded
        let fullyQualifiedDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fullyQualifiedDomainName)
        fullyQualifiedDomainName = fullyQualifiedDomainNameDecoded
        let searchStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .searchString)
        searchString = searchStringDecoded
        let requestIntervalDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .requestInterval)
        requestInterval = requestIntervalDecoded
        let failureThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failureThreshold)
        failureThreshold = failureThresholdDecoded
        let measureLatencyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .measureLatency)
        measureLatency = measureLatencyDecoded
        let invertedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .inverted)
        inverted = invertedDecoded
        let disabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disabled)
        disabled = disabledDecoded
        let healthThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthThreshold)
        healthThreshold = healthThresholdDecoded
        if containerValues.contains(.childHealthChecks) {
            struct KeyVal0{struct ChildHealthCheck{}}
            let childHealthChecksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ChildHealthCheck>.CodingKeys.self, forKey: .childHealthChecks)
            if let childHealthChecksWrappedContainer = childHealthChecksWrappedContainer {
                let childHealthChecksContainer = try childHealthChecksWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var childHealthChecksBuffer:[Swift.String]? = nil
                if let childHealthChecksContainer = childHealthChecksContainer {
                    childHealthChecksBuffer = [Swift.String]()
                    for stringContainer0 in childHealthChecksContainer {
                        childHealthChecksBuffer?.append(stringContainer0)
                    }
                }
                childHealthChecks = childHealthChecksBuffer
            } else {
                childHealthChecks = []
            }
        } else {
            childHealthChecks = nil
        }
        let enableSNIDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableSNI)
        enableSNI = enableSNIDecoded
        if containerValues.contains(.regions) {
            struct KeyVal0{struct Region{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Region>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([Route53ClientTypes.HealthCheckRegion].self, forKey: .member)
                var regionsBuffer:[Route53ClientTypes.HealthCheckRegion]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [Route53ClientTypes.HealthCheckRegion]()
                    for stringContainer0 in regionsContainer {
                        regionsBuffer?.append(stringContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
        let alarmIdentifierDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.AlarmIdentifier.self, forKey: .alarmIdentifier)
        alarmIdentifier = alarmIdentifierDecoded
        let insufficientDataHealthStatusDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.InsufficientDataHealthStatus.self, forKey: .insufficientDataHealthStatus)
        insufficientDataHealthStatus = insufficientDataHealthStatusDecoded
    }
}

extension Route53ClientTypes.HealthCheckConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HealthCheckConfig(alarmIdentifier: \(Swift.String(describing: alarmIdentifier)), childHealthChecks: \(Swift.String(describing: childHealthChecks)), disabled: \(Swift.String(describing: disabled)), enableSNI: \(Swift.String(describing: enableSNI)), failureThreshold: \(Swift.String(describing: failureThreshold)), fullyQualifiedDomainName: \(Swift.String(describing: fullyQualifiedDomainName)), healthThreshold: \(Swift.String(describing: healthThreshold)), iPAddress: \(Swift.String(describing: iPAddress)), insufficientDataHealthStatus: \(Swift.String(describing: insufficientDataHealthStatus)), inverted: \(Swift.String(describing: inverted)), measureLatency: \(Swift.String(describing: measureLatency)), port: \(Swift.String(describing: port)), regions: \(Swift.String(describing: regions)), requestInterval: \(Swift.String(describing: requestInterval)), resourcePath: \(Swift.String(describing: resourcePath)), searchString: \(Swift.String(describing: searchString)), type: \(Swift.String(describing: type)))"}
}

extension Route53ClientTypes.HealthCheckConfig: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains information about the health check.</p>
    public struct HealthCheckConfig: Swift.Equatable {
        /// <p>A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether
        /// 			the specified health check is healthy.</p>
        public let alarmIdentifier: Route53ClientTypes.AlarmIdentifier?
        /// <p>(CALCULATED Health Checks Only) A complex type that contains one <code>ChildHealthCheck</code> element for each health check that
        /// 			you want to associate with a <code>CALCULATED</code> health check.</p>
        public let childHealthChecks: [Swift.String]?
        /// <p>Stops Route 53 from performing health checks. When you disable a health check, here's what happens:</p>
        /// 		       <ul>
        ///             <li>
        ///                <p>
        ///                   <b>Health checks that check the health of endpoints:</b>
        /// 				Route 53 stops submitting requests to your application, server, or other resource.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>Calculated health checks:</b>
        /// 				Route 53 stops aggregating the status of the referenced health checks.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>Health checks that monitor CloudWatch alarms:</b>
        /// 				Route 53 stops monitoring the corresponding CloudWatch metrics.</p>
        ///             </li>
        ///          </ul>
        /// 		
        /// 		       <p>After you disable a health check, Route 53 considers the status of the health check to always be healthy. If you configured DNS failover,
        /// 			Route 53 continues to route traffic to the corresponding resources. If you want to stop routing traffic to a resource, change the value of
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_UpdateHealthCheck.html#Route53-UpdateHealthCheck-request-Inverted">Inverted</a>.
        /// 		</p>
        /// 		
        /// 		       <p>Charges for a health check still apply when the health check is disabled. For more information, see
        /// 			<a href="http://aws.amazon.com/route53/pricing/">Amazon Route 53 Pricing</a>.</p>
        public let disabled: Swift.Bool?
        /// <p>Specify whether you want Amazon Route 53 to send the value of <code>FullyQualifiedDomainName</code> to the endpoint in the <code>client_hello</code>
        /// 			message during TLS negotiation. This allows the endpoint to respond to <code>HTTPS</code> health check requests with the applicable
        /// 			SSL/TLS certificate.</p>
        /// 		       <p>Some endpoints require that <code>HTTPS</code> requests include the host name in the <code>client_hello</code> message. If you don't
        /// 			enable SNI, the status of the health check will be <code>SSL alert handshake_failure</code>. A health check can also have that status for
        /// 			other reasons. If SNI is enabled and you're still getting the error, check the SSL/TLS configuration on your endpoint and confirm that
        /// 			your certificate is valid.</p>
        /// 		       <p>The SSL/TLS certificate on your endpoint includes a domain name in the <code>Common Name</code> field and possibly several more in the
        /// 			<code>Subject Alternative Names</code> field. One of the domain names in the certificate should match the value that you specify for
        /// 			<code>FullyQualifiedDomainName</code>. If the endpoint responds to the <code>client_hello</code> message with a certificate that does not
        /// 			include the domain name that you specified in <code>FullyQualifiedDomainName</code>, a health checker will retry the handshake. In the
        /// 			second attempt, the health checker will omit <code>FullyQualifiedDomainName</code> from the <code>client_hello</code> message.</p>
        public let enableSNI: Swift.Bool?
        /// <p>The number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint
        /// 			from unhealthy to healthy or vice versa. For more information, see
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html">How Amazon Route 53 Determines Whether an Endpoint Is Healthy</a>
        /// 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
        /// 		       <p>If you don't specify a value for <code>FailureThreshold</code>, the default value is three health checks.</p>
        public let failureThreshold: Swift.Int?
        /// <p>Amazon Route 53 behavior depends on whether you specify a value for <code>IPAddress</code>.</p>
        /// 		
        /// 		       <p>
        ///             <b>If you specify a value for</b>
        ///             <code>IPAddress</code>:</p>
        /// 		       <p>Amazon Route 53 sends health check requests to the specified IPv4 or IPv6 address and passes the value of <code>FullyQualifiedDomainName</code>
        /// 			in the <code>Host</code> header for all health checks except TCP health checks. This is typically the fully qualified DNS name of the endpoint
        /// 			on which you want Route 53 to perform health checks.</p>
        /// 		       <p>When Route 53 checks the health of an endpoint, here is how it constructs the <code>Host</code> header:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>If you specify a value of <code>80</code> for <code>Port</code> and <code>HTTP</code> or <code>HTTP_STR_MATCH</code> for
        /// 					<code>Type</code>, Route 53 passes the value of <code>FullyQualifiedDomainName</code> to the endpoint in the Host header. </p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>If you specify a value of <code>443</code> for <code>Port</code> and <code>HTTPS</code> or <code>HTTPS_STR_MATCH</code> for
        /// 					<code>Type</code>, Route 53 passes the value of <code>FullyQualifiedDomainName</code> to the endpoint in the <code>Host</code> header.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>If you specify another value for <code>Port</code> and any value except <code>TCP</code> for <code>Type</code>, Route 53 passes
        /// 					<code>FullyQualifiedDomainName:Port</code> to the endpoint in the <code>Host</code> header.</p>
        /// 			         </li>
        ///          </ul>
        /// 		       <p>If you don't specify a value for <code>FullyQualifiedDomainName</code>, Route 53 substitutes the value of <code>IPAddress</code> in the
        /// 			<code>Host</code> header in each of the preceding cases.</p>
        /// 		
        /// 		       <p>
        ///             <b>If you don't specify a value for <code>IPAddress</code>
        ///             </b>:</p>
        /// 		       <p>Route 53 sends a DNS request to the domain that you specify for <code>FullyQualifiedDomainName</code> at the interval that you specify for
        /// 			<code>RequestInterval</code>. Using an IPv4 address that DNS returns, Route 53 then checks the health of the endpoint.</p>
        /// 		       <note>
        ///             <p>If you don't specify a value for <code>IPAddress</code>, Route 53 uses only IPv4 to send health checks to the endpoint. If there's
        /// 			no resource record set with a type of A for the name that you specify for <code>FullyQualifiedDomainName</code>, the health check fails with a
        /// 			"DNS resolution failed" error.</p>
        ///          </note>
        /// 		       <p>If you want to check the health of weighted, latency, or failover resource record sets and you choose to specify the endpoint only by
        /// 			<code>FullyQualifiedDomainName</code>, we recommend that you create a separate health check for each endpoint. For example, create a
        /// 			health check for each HTTP server that is serving content for www.example.com. For the value of <code>FullyQualifiedDomainName</code>,
        /// 			specify the domain name of the server (such as us-east-2-www.example.com), not the name of the resource record sets (www.example.com).</p>
        /// 		       <important>
        /// 			         <p>In this configuration, if you create a health check for which the value of <code>FullyQualifiedDomainName</code> matches the name of the
        /// 				resource record sets and you then associate the health check with those resource record sets, health check results will be unpredictable.</p>
        /// 		       </important>
        /// 		       <p>In addition, if the value that you specify for <code>Type</code> is <code>HTTP</code>, <code>HTTPS</code>, <code>HTTP_STR_MATCH</code>, or
        /// 			<code>HTTPS_STR_MATCH</code>, Route 53 passes the value of <code>FullyQualifiedDomainName</code> in the <code>Host</code> header, as it does when you
        /// 			specify a value for <code>IPAddress</code>. If the value of <code>Type</code> is <code>TCP</code>, Route 53 doesn't pass a <code>Host</code> header.</p>
        public let fullyQualifiedDomainName: Swift.String?
        /// <p>The number of child health checks that are associated with a <code>CALCULATED</code> health check that Amazon Route 53 must consider healthy for the
        /// 			<code>CALCULATED</code> health check to be considered healthy. To specify the child health checks that you want to associate with a
        /// 			<code>CALCULATED</code> health check, use the
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_UpdateHealthCheck.html#Route53-UpdateHealthCheck-request-ChildHealthChecks">ChildHealthChecks</a>
        /// 			element.</p>
        /// 		       <p>Note the following:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>If you specify a number greater than the number of child health checks, Route 53 always considers this health check to be unhealthy.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>If you specify <code>0</code>, Route 53 always considers this health check to be healthy.</p>
        /// 			         </li>
        ///          </ul>
        public let healthThreshold: Swift.Int?
        /// <p>The IPv4 or IPv6 IP address of the endpoint that you want Amazon Route 53 to perform health checks on. If you don't specify a value for
        /// 			<code>IPAddress</code>, Route 53 sends a DNS request to resolve the domain name that you specify in <code>FullyQualifiedDomainName</code>
        /// 			at the interval that you specify in <code>RequestInterval</code>. Using an IP address returned by DNS, Route 53 then checks the health
        /// 			of the endpoint.</p>
        ///
        /// 		       <p>Use one of the following formats for the value of <code>IPAddress</code>: </p>
        /// 		       <ul>
        ///             <li>
        ///                <p>
        ///                   <b>IPv4 address</b>: four values between 0 and 255, separated by periods (.),
        /// 				for example, <code>192.0.2.44</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>IPv6 address</b>: eight groups of four hexadecimal values, separated by colons (:),
        /// 				for example, <code>2001:0db8:85a3:0000:0000:abcd:0001:2345</code>. You can also shorten IPv6 addresses as described in RFC 5952,
        /// 				for example, <code>2001:db8:85a3::abcd:1:2345</code>.</p>
        ///             </li>
        ///          </ul>
        /// 		       <p>If the endpoint is an EC2 instance, we recommend that you create an Elastic IP address, associate it with your EC2 instance, and
        /// 			specify the Elastic IP address for <code>IPAddress</code>. This ensures that the IP address of your instance will never change.</p>
        /// 		       <p>For more information, see
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_UpdateHealthCheck.html#Route53-UpdateHealthCheck-request-FullyQualifiedDomainName">FullyQualifiedDomainName</a>.
        /// 		</p>
        /// 		       <p>Constraints: Route 53 can't check the health of endpoints for which the IP address is in local, private, non-routable, or
        /// 			multicast ranges. For more information about IP addresses for which you can't create health checks, see the following
        /// 			documents:</p>
        /// 		       <ul>
        ///             <li>
        ///                <p>
        ///                   <a href="https://tools.ietf.org/html/rfc5735">RFC 5735, Special Use IPv4 Addresses</a>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <a href="https://tools.ietf.org/html/rfc6598">RFC 6598, IANA-Reserved IPv4 Prefix for Shared Address Space</a>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <a href="https://tools.ietf.org/html/rfc5156">RFC 5156, Special-Use IPv6 Addresses</a>
        ///                </p>
        ///             </li>
        ///          </ul>
        /// 		       <p>When the value of <code>Type</code> is <code>CALCULATED</code> or <code>CLOUDWATCH_METRIC</code>, omit <code>IPAddress</code>.</p>
        public let iPAddress: Swift.String?
        /// <p>When CloudWatch has insufficient data about the metric to determine the alarm state, the status that you want Amazon Route 53 to assign to the health check:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>
        ///                   <code>Healthy</code>: Route 53 considers the health check to be healthy.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <code>Unhealthy</code>: Route 53 considers the health check to be unhealthy.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <code>LastKnownStatus</code>: Route 53 uses the status of the health check from the last time that CloudWatch had sufficient data
        /// 					to determine the alarm state. For new health checks that have no last known status, the default status for the health check is
        /// 					healthy.</p>
        /// 			         </li>
        ///          </ul>
        public let insufficientDataHealthStatus: Route53ClientTypes.InsufficientDataHealthStatus?
        /// <p>Specify whether you want Amazon Route 53 to invert the status of a health check, for example, to consider a health check unhealthy when it
        /// 			otherwise would be considered healthy.</p>
        public let inverted: Swift.Bool?
        /// <p>Specify whether you want Amazon Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint, and to
        /// 			display CloudWatch latency graphs on the <b>Health Checks</b> page in the Route 53 console.</p>
        /// 		       <important>
        /// 			         <p>You can't change the value of <code>MeasureLatency</code> after you create a health check.</p>
        /// 		       </important>
        public let measureLatency: Swift.Bool?
        /// <p>The port on the endpoint that you want Amazon Route 53 to perform health checks on.</p>
        /// 		       <note>
        /// 			         <p>Don't specify a value for <code>Port</code> when you specify a value for <code>Type</code> of <code>CLOUDWATCH_METRIC</code> or
        /// 				<code>CALCULATED</code>.</p>
        /// 		       </note>
        public let port: Swift.Int?
        /// <p>A complex type that contains one <code>Region</code> element for each region from which you want Amazon Route 53 health checkers to check the
        /// 			specified endpoint.</p>
        /// 		       <p>If you don't specify any regions, Route 53 health checkers automatically performs checks from all of the regions that are listed under
        /// 			<b>Valid Values</b>.</p>
        /// 		       <p>If you update a health check to remove a region that has been performing health checks, Route 53 will briefly continue to perform checks
        /// 			from that region to ensure that some health checkers are always checking the endpoint (for example, if you replace three regions with
        /// 			four different regions). </p>
        public let regions: [Route53ClientTypes.HealthCheckRegion]?
        /// <p>The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next
        /// 			health check request. Each Route 53 health checker makes requests at this interval.</p>
        /// 		       <important>
        /// 			         <p>You can't change the value of <code>RequestInterval</code> after you create a health check.</p>
        /// 		       </important>
        /// 		       <p>If you don't specify a value for <code>RequestInterval</code>, the default value is <code>30</code> seconds.</p>
        public let requestInterval: Swift.Int?
        /// <p>The path, if any, that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint
        /// 			will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, for example, the file /docs/route53-health-check.html.
        /// 			You can also include query string parameters, for example, <code>/welcome.html?language=jp&login=y</code>.
        /// 		</p>
        public let resourcePath: Swift.String?
        /// <p>If the value of Type is <code>HTTP_STR_MATCH</code> or <code>HTTPS_STR_MATCH</code>, the string that you want Amazon Route 53 to search for in the
        /// 			response body from the specified resource. If the string appears in the response body, Route 53 considers the resource healthy.</p>
        /// 		       <p>Route 53 considers case when searching for <code>SearchString</code> in the response body. </p>
        public let searchString: Swift.String?
        /// <p>The type of health check that you want to create, which indicates how Amazon Route 53 determines whether an endpoint is healthy.</p>
        /// 		       <important>
        /// 			         <p>You can't change the value of <code>Type</code> after you create a health check.</p>
        /// 		       </important>
        /// 		       <p>You can create the following types of health checks:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>
        ///                   <b>HTTP</b>: Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request
        /// 					and waits for an HTTP status code of 200 or greater and less than 400.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>HTTPS</b>: Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request
        /// 					and waits for an HTTP status code of 200 or greater and less than 400.</p>
        /// 				           <important>
        /// 					             <p>If you specify <code>HTTPS</code> for the value of <code>Type</code>, the endpoint must support TLS v1.0 or later.</p>
        /// 				           </important>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>HTTP_STR_MATCH</b>: Route 53 tries to establish a TCP connection. If successful, Route 53 submits an
        /// 					HTTP request and searches the first 5,120 bytes of the response body for the string that you specify in <code>SearchString</code>.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>HTTPS_STR_MATCH</b>: Route 53 tries to establish a TCP connection. If successful, Route 53 submits an
        /// 					<code>HTTPS</code> request and searches the first 5,120 bytes of the response body for the string that you specify in <code>SearchString</code>.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>TCP</b>: Route 53 tries to establish a TCP connection.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>CLOUDWATCH_METRIC</b>: The health check is associated with a CloudWatch alarm. If the state of the alarm is
        /// 					<code>OK</code>, the health check is considered healthy. If the state is <code>ALARM</code>, the health check is considered unhealthy.
        /// 					If CloudWatch doesn't have sufficient data to determine whether the state is <code>OK</code> or <code>ALARM</code>, the health check status
        /// 					depends on the setting for <code>InsufficientDataHealthStatus</code>: <code>Healthy</code>, <code>Unhealthy</code>, or
        /// 					<code>LastKnownStatus</code>. </p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>CALCULATED</b>: For health checks that monitor the status of other health checks, Route 53 adds up
        /// 					the number of health checks that Route 53 health checkers consider to be healthy and compares that number with the value of
        /// 					<code>HealthThreshold</code>. </p>
        /// 			         </li>
        ///          </ul>
        /// 		       <p>For more information, see
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html">How Route 53
        /// 			Determines Whether an Endpoint Is Healthy</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
        public let type: Route53ClientTypes.HealthCheckType?

        public init (
            alarmIdentifier: Route53ClientTypes.AlarmIdentifier? = nil,
            childHealthChecks: [Swift.String]? = nil,
            disabled: Swift.Bool? = nil,
            enableSNI: Swift.Bool? = nil,
            failureThreshold: Swift.Int? = nil,
            fullyQualifiedDomainName: Swift.String? = nil,
            healthThreshold: Swift.Int? = nil,
            iPAddress: Swift.String? = nil,
            insufficientDataHealthStatus: Route53ClientTypes.InsufficientDataHealthStatus? = nil,
            inverted: Swift.Bool? = nil,
            measureLatency: Swift.Bool? = nil,
            port: Swift.Int? = nil,
            regions: [Route53ClientTypes.HealthCheckRegion]? = nil,
            requestInterval: Swift.Int? = nil,
            resourcePath: Swift.String? = nil,
            searchString: Swift.String? = nil,
            type: Route53ClientTypes.HealthCheckType? = nil
        )
        {
            self.alarmIdentifier = alarmIdentifier
            self.childHealthChecks = childHealthChecks
            self.disabled = disabled
            self.enableSNI = enableSNI
            self.failureThreshold = failureThreshold
            self.fullyQualifiedDomainName = fullyQualifiedDomainName
            self.healthThreshold = healthThreshold
            self.iPAddress = iPAddress
            self.insufficientDataHealthStatus = insufficientDataHealthStatus
            self.inverted = inverted
            self.measureLatency = measureLatency
            self.port = port
            self.regions = regions
            self.requestInterval = requestInterval
            self.resourcePath = resourcePath
            self.searchString = searchString
            self.type = type
        }
    }

}

extension HealthCheckInUse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HealthCheckInUse(message: \(Swift.String(describing: message)))"}
}

extension HealthCheckInUse: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<HealthCheckInUseBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This error code is not in use.</p>
@available(*, deprecated)
public struct HealthCheckInUse: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct HealthCheckInUseBody: Swift.Equatable {
    public let message: Swift.String?
}

extension HealthCheckInUseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.HealthCheckObservation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iPAddress = "IPAddress"
        case region = "Region"
        case statusReport = "StatusReport"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let iPAddress = iPAddress {
            try container.encode(iPAddress, forKey: ClientRuntime.Key("IPAddress"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let statusReport = statusReport {
            try container.encode(statusReport, forKey: ClientRuntime.Key("StatusReport"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HealthCheckRegion.self, forKey: .region)
        region = regionDecoded
        let iPAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iPAddress)
        iPAddress = iPAddressDecoded
        let statusReportDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.StatusReport.self, forKey: .statusReport)
        statusReport = statusReportDecoded
    }
}

extension Route53ClientTypes.HealthCheckObservation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HealthCheckObservation(iPAddress: \(Swift.String(describing: iPAddress)), region: \(Swift.String(describing: region)), statusReport: \(Swift.String(describing: statusReport)))"}
}

extension Route53ClientTypes.HealthCheckObservation: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains the last failure reason as reported by one Amazon Route 53 health checker.</p>
    public struct HealthCheckObservation: Swift.Equatable {
        /// <p>The IP address of the Amazon Route 53 health checker that provided the failure reason in <code>StatusReport</code>.</p>
        public let iPAddress: Swift.String?
        /// <p>The region of the Amazon Route 53 health checker that provided the status in <code>StatusReport</code>.</p>
        public let region: Route53ClientTypes.HealthCheckRegion?
        /// <p>A complex type that contains the last failure reason as reported by one Amazon Route 53 health checker and the time of the failed health check.</p>
        public let statusReport: Route53ClientTypes.StatusReport?

        public init (
            iPAddress: Swift.String? = nil,
            region: Route53ClientTypes.HealthCheckRegion? = nil,
            statusReport: Route53ClientTypes.StatusReport? = nil
        )
        {
            self.iPAddress = iPAddress
            self.region = region
            self.statusReport = statusReport
        }
    }

}

extension Route53ClientTypes {
    public enum HealthCheckRegion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case apNortheast1
        case apSoutheast1
        case apSoutheast2
        case euWest1
        case saEast1
        case usEast1
        case usWest1
        case usWest2
        case sdkUnknown(Swift.String)

        public static var allCases: [HealthCheckRegion] {
            return [
                .apNortheast1,
                .apSoutheast1,
                .apSoutheast2,
                .euWest1,
                .saEast1,
                .usEast1,
                .usWest1,
                .usWest2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .apNortheast1: return "ap-northeast-1"
            case .apSoutheast1: return "ap-southeast-1"
            case .apSoutheast2: return "ap-southeast-2"
            case .euWest1: return "eu-west-1"
            case .saEast1: return "sa-east-1"
            case .usEast1: return "us-east-1"
            case .usWest1: return "us-west-1"
            case .usWest2: return "us-west-2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HealthCheckRegion(rawValue: rawValue) ?? HealthCheckRegion.sdkUnknown(rawValue)
        }
    }
}

extension Route53ClientTypes {
    public enum HealthCheckType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case calculated
        case cloudwatchMetric
        case http
        case https
        case httpsStrMatch
        case httpStrMatch
        case tcp
        case sdkUnknown(Swift.String)

        public static var allCases: [HealthCheckType] {
            return [
                .calculated,
                .cloudwatchMetric,
                .http,
                .https,
                .httpsStrMatch,
                .httpStrMatch,
                .tcp,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .calculated: return "CALCULATED"
            case .cloudwatchMetric: return "CLOUDWATCH_METRIC"
            case .http: return "HTTP"
            case .https: return "HTTPS"
            case .httpsStrMatch: return "HTTPS_STR_MATCH"
            case .httpStrMatch: return "HTTP_STR_MATCH"
            case .tcp: return "TCP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HealthCheckType(rawValue: rawValue) ?? HealthCheckType.sdkUnknown(rawValue)
        }
    }
}

extension HealthCheckVersionMismatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HealthCheckVersionMismatch(message: \(Swift.String(describing: message)))"}
}

extension HealthCheckVersionMismatch: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<HealthCheckVersionMismatchBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The value of <code>HealthCheckVersion</code> in the request doesn't match the value of <code>HealthCheckVersion</code>
/// 			in the health check.</p>
public struct HealthCheckVersionMismatch: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct HealthCheckVersionMismatchBody: Swift.Equatable {
    public let message: Swift.String?
}

extension HealthCheckVersionMismatchBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.HostedZone: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callerReference = "CallerReference"
        case config = "Config"
        case id = "Id"
        case linkedService = "LinkedService"
        case name = "Name"
        case resourceRecordSetCount = "ResourceRecordSetCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let callerReference = callerReference {
            try container.encode(callerReference, forKey: ClientRuntime.Key("CallerReference"))
        }
        if let config = config {
            try container.encode(config, forKey: ClientRuntime.Key("Config"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let linkedService = linkedService {
            try container.encode(linkedService, forKey: ClientRuntime.Key("LinkedService"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let resourceRecordSetCount = resourceRecordSetCount {
            try container.encode(resourceRecordSetCount, forKey: ClientRuntime.Key("ResourceRecordSetCount"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let callerReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callerReference)
        callerReference = callerReferenceDecoded
        let configDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HostedZoneConfig.self, forKey: .config)
        config = configDecoded
        let resourceRecordSetCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .resourceRecordSetCount)
        resourceRecordSetCount = resourceRecordSetCountDecoded
        let linkedServiceDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.LinkedService.self, forKey: .linkedService)
        linkedService = linkedServiceDecoded
    }
}

extension Route53ClientTypes.HostedZone: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HostedZone(callerReference: \(Swift.String(describing: callerReference)), config: \(Swift.String(describing: config)), id: \(Swift.String(describing: id)), linkedService: \(Swift.String(describing: linkedService)), name: \(Swift.String(describing: name)), resourceRecordSetCount: \(Swift.String(describing: resourceRecordSetCount)))"}
}

extension Route53ClientTypes.HostedZone: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains general information about the hosted zone.</p>
    public struct HostedZone: Swift.Equatable {
        /// <p>The value that you specified for <code>CallerReference</code> when you created the
        /// 			hosted zone.</p>
        public let callerReference: Swift.String?
        /// <p>A complex type that includes the <code>Comment</code> and <code>PrivateZone</code>
        /// 			elements. If you omitted the <code>HostedZoneConfig</code> and <code>Comment</code> elements
        /// 			from the request, the <code>Config</code> and <code>Comment</code> elements don't appear in
        /// 			the response.</p>
        public let config: Route53ClientTypes.HostedZoneConfig?
        /// <p>The ID that Amazon Route 53 assigned to the hosted zone when you created it.</p>
        public let id: Swift.String?
        /// <p>If the hosted zone was created by another service, the service that created the hosted zone. When a hosted zone is created
        /// 			by another service, you can't edit or delete it using Route 53. </p>
        public let linkedService: Route53ClientTypes.LinkedService?
        /// <p>The name of the domain. For public hosted zones, this is the name that you have
        /// 			registered with your DNS registrar.</p>
        /// 		       <p>For information about how to specify characters other than <code>a-z</code>,
        /// 			<code>0-9</code>, and <code>-</code> (hyphen) and how to specify internationalized domain names, see
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateHostedZone.html">CreateHostedZone</a>.</p>
        public let name: Swift.String?
        /// <p>The number of resource record sets in the hosted zone.</p>
        public let resourceRecordSetCount: Swift.Int?

        public init (
            callerReference: Swift.String? = nil,
            config: Route53ClientTypes.HostedZoneConfig? = nil,
            id: Swift.String? = nil,
            linkedService: Route53ClientTypes.LinkedService? = nil,
            name: Swift.String? = nil,
            resourceRecordSetCount: Swift.Int? = nil
        )
        {
            self.callerReference = callerReference
            self.config = config
            self.id = id
            self.linkedService = linkedService
            self.name = name
            self.resourceRecordSetCount = resourceRecordSetCount
        }
    }

}

extension HostedZoneAlreadyExists: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HostedZoneAlreadyExists(message: \(Swift.String(describing: message)))"}
}

extension HostedZoneAlreadyExists: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<HostedZoneAlreadyExistsBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The hosted zone you're trying to create already exists. Amazon Route 53 returns this error when a hosted zone has already been created
/// 			with the specified <code>CallerReference</code>.</p>
public struct HostedZoneAlreadyExists: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct HostedZoneAlreadyExistsBody: Swift.Equatable {
    public let message: Swift.String?
}

extension HostedZoneAlreadyExistsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.HostedZoneConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case privateZone = "PrivateZone"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let comment = comment {
            try container.encode(comment, forKey: ClientRuntime.Key("Comment"))
        }
        if privateZone != false {
            try container.encode(privateZone, forKey: ClientRuntime.Key("PrivateZone"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
        let privateZoneDecoded = try containerValues.decode(Swift.Bool.self, forKey: .privateZone)
        privateZone = privateZoneDecoded
    }
}

extension Route53ClientTypes.HostedZoneConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HostedZoneConfig(comment: \(Swift.String(describing: comment)), privateZone: \(Swift.String(describing: privateZone)))"}
}

extension Route53ClientTypes.HostedZoneConfig: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains an optional comment about your hosted zone. If you don't
    /// 			want to specify a comment, omit both the <code>HostedZoneConfig</code> and
    /// 			<code>Comment</code> elements.</p>
    public struct HostedZoneConfig: Swift.Equatable {
        /// <p>Any comments that you want to include about the hosted zone.</p>
        public let comment: Swift.String?
        /// <p>A value that indicates whether this is a private hosted zone.</p>
        public let privateZone: Swift.Bool

        public init (
            comment: Swift.String? = nil,
            privateZone: Swift.Bool = false
        )
        {
            self.comment = comment
            self.privateZone = privateZone
        }
    }

}

extension Route53ClientTypes.HostedZoneLimit: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if value != 0 {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HostedZoneLimitType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decode(Swift.Int.self, forKey: .value)
        value = valueDecoded
    }
}

extension Route53ClientTypes.HostedZoneLimit: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HostedZoneLimit(type: \(Swift.String(describing: type)), value: \(Swift.String(describing: value)))"}
}

extension Route53ClientTypes.HostedZoneLimit: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains the type of limit that you specified in the request and the current value for that limit.</p>
    public struct HostedZoneLimit: Swift.Equatable {
        /// <p>The limit that you requested. Valid values include the following:</p>
        /// 		       <ul>
        ///             <li>
        ///                <p>
        ///                   <b>MAX_RRSETS_BY_ZONE</b>: The maximum number of records that you can create
        /// 				in the specified hosted zone.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <b>MAX_VPCS_ASSOCIATED_BY_ZONE</b>: The maximum number of Amazon VPCs that you can
        /// 				associate with the specified private hosted zone.</p>
        ///             </li>
        ///          </ul>
        public let type: Route53ClientTypes.HostedZoneLimitType?
        /// <p>The current value for the limit that is specified by <code>Type</code>.</p>
        public let value: Swift.Int

        public init (
            type: Route53ClientTypes.HostedZoneLimitType? = nil,
            value: Swift.Int = 0
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension Route53ClientTypes {
    public enum HostedZoneLimitType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case maxRrsetsByZone
        case maxVpcsAssociatedByZone
        case sdkUnknown(Swift.String)

        public static var allCases: [HostedZoneLimitType] {
            return [
                .maxRrsetsByZone,
                .maxVpcsAssociatedByZone,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .maxRrsetsByZone: return "MAX_RRSETS_BY_ZONE"
            case .maxVpcsAssociatedByZone: return "MAX_VPCS_ASSOCIATED_BY_ZONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HostedZoneLimitType(rawValue: rawValue) ?? HostedZoneLimitType.sdkUnknown(rawValue)
        }
    }
}

extension HostedZoneNotEmpty: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HostedZoneNotEmpty(message: \(Swift.String(describing: message)))"}
}

extension HostedZoneNotEmpty: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<HostedZoneNotEmptyBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The hosted zone contains resource records that are not SOA or NS records.</p>
public struct HostedZoneNotEmpty: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct HostedZoneNotEmptyBody: Swift.Equatable {
    public let message: Swift.String?
}

extension HostedZoneNotEmptyBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension HostedZoneNotFound: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HostedZoneNotFound(message: \(Swift.String(describing: message)))"}
}

extension HostedZoneNotFound: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<HostedZoneNotFoundBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified HostedZone can't be found.</p>
public struct HostedZoneNotFound: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct HostedZoneNotFoundBody: Swift.Equatable {
    public let message: Swift.String?
}

extension HostedZoneNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension HostedZoneNotPrivate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HostedZoneNotPrivate(message: \(Swift.String(describing: message)))"}
}

extension HostedZoneNotPrivate: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<HostedZoneNotPrivateBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified hosted zone is a public hosted zone, not a private hosted zone.</p>
public struct HostedZoneNotPrivate: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct HostedZoneNotPrivateBody: Swift.Equatable {
    public let message: Swift.String?
}

extension HostedZoneNotPrivateBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.HostedZoneOwner: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case owningAccount = "OwningAccount"
        case owningService = "OwningService"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let owningAccount = owningAccount {
            try container.encode(owningAccount, forKey: ClientRuntime.Key("OwningAccount"))
        }
        if let owningService = owningService {
            try container.encode(owningService, forKey: ClientRuntime.Key("OwningService"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let owningAccountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owningAccount)
        owningAccount = owningAccountDecoded
        let owningServiceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owningService)
        owningService = owningServiceDecoded
    }
}

extension Route53ClientTypes.HostedZoneOwner: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HostedZoneOwner(owningAccount: \(Swift.String(describing: owningAccount)), owningService: \(Swift.String(describing: owningService)))"}
}

extension Route53ClientTypes.HostedZoneOwner: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that identifies a hosted zone that a specified Amazon VPC is associated with and the owner of the hosted zone.
    /// 			If there is a value for <code>OwningAccount</code>, there is no value for <code>OwningService</code>, and vice versa. </p>
    public struct HostedZoneOwner: Swift.Equatable {
        /// <p>If the hosted zone was created by an AWS account, or was created by an AWS service that creates hosted zones using the current account,
        /// 			<code>OwningAccount</code> contains the account ID of that account. For example, when you use AWS Cloud Map to create a hosted zone, Cloud Map
        /// 			creates the hosted zone using the current AWS account. </p>
        public let owningAccount: Swift.String?
        /// <p>If an AWS service uses its own account to create a hosted zone and associate the specified VPC with that hosted zone, <code>OwningService</code>
        /// 			contains an abbreviation that identifies the service. For example, if Amazon Elastic File System (Amazon EFS) created a hosted zone and
        /// 			associated a VPC with the hosted zone, the value of <code>OwningService</code> is <code>efs.amazonaws.com</code>.</p>
        public let owningService: Swift.String?

        public init (
            owningAccount: Swift.String? = nil,
            owningService: Swift.String? = nil
        )
        {
            self.owningAccount = owningAccount
            self.owningService = owningService
        }
    }

}

extension HostedZonePartiallyDelegated: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HostedZonePartiallyDelegated(message: \(Swift.String(describing: message)))"}
}

extension HostedZonePartiallyDelegated: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<HostedZonePartiallyDelegatedBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The hosted zone nameservers don't match the parent nameservers. The hosted zone and parent must have the same nameservers.</p>
public struct HostedZonePartiallyDelegated: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct HostedZonePartiallyDelegatedBody: Swift.Equatable {
    public let message: Swift.String?
}

extension HostedZonePartiallyDelegatedBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.HostedZoneSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZoneId = "HostedZoneId"
        case name = "Name"
        case owner = "Owner"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let hostedZoneId = hostedZoneId {
            try container.encode(hostedZoneId, forKey: ClientRuntime.Key("HostedZoneId"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let owner = owner {
            try container.encode(owner, forKey: ClientRuntime.Key("Owner"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HostedZoneOwner.self, forKey: .owner)
        owner = ownerDecoded
    }
}

extension Route53ClientTypes.HostedZoneSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "HostedZoneSummary(hostedZoneId: \(Swift.String(describing: hostedZoneId)), name: \(Swift.String(describing: name)), owner: \(Swift.String(describing: owner)))"}
}

extension Route53ClientTypes.HostedZoneSummary: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>In the response to a <code>ListHostedZonesByVPC</code> request, the <code>HostedZoneSummaries</code> element contains one
    /// 			<code>HostedZoneSummary</code> element for each hosted zone that the specified Amazon VPC is associated with.
    /// 			Each <code>HostedZoneSummary</code> element contains the hosted zone name and ID, and information about who owns the hosted zone.</p>
    public struct HostedZoneSummary: Swift.Equatable {
        /// <p>The Route 53 hosted zone ID of a private hosted zone that the specified VPC is associated with.</p>
        public let hostedZoneId: Swift.String?
        /// <p>The name of the private hosted zone, such as <code>example.com</code>.</p>
        public let name: Swift.String?
        /// <p>The owner of a private hosted zone that the specified VPC is associated with. The owner can be either an AWS account or
        /// 			an AWS service.</p>
        public let owner: Route53ClientTypes.HostedZoneOwner?

        public init (
            hostedZoneId: Swift.String? = nil,
            name: Swift.String? = nil,
            owner: Route53ClientTypes.HostedZoneOwner? = nil
        )
        {
            self.hostedZoneId = hostedZoneId
            self.name = name
            self.owner = owner
        }
    }

}

extension IncompatibleVersion: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IncompatibleVersion(message: \(Swift.String(describing: message)))"}
}

extension IncompatibleVersion: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<IncompatibleVersionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The resource you're trying to access is unsupported on this Amazon Route 53 endpoint.</p>
public struct IncompatibleVersion: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct IncompatibleVersionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension IncompatibleVersionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InsufficientCloudWatchLogsResourcePolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsufficientCloudWatchLogsResourcePolicy(message: \(Swift.String(describing: message)))"}
}

extension InsufficientCloudWatchLogsResourcePolicy: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InsufficientCloudWatchLogsResourcePolicyBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Amazon Route 53 doesn't have the permissions required to create log streams and send query logs to log streams. Possible causes
/// 			include the following:</p>
/// 		       <ul>
///             <li>
///                <p>There is no resource policy that specifies the log group ARN in the value for <code>Resource</code>.</p>
///             </li>
///             <li>
///                <p>The resource policy that includes the log group ARN in the value for <code>Resource</code> doesn't have the
/// 				necessary permissions.</p>
///             </li>
///             <li>
///                <p>The resource policy hasn't finished propagating yet.</p>
///             </li>
///          </ul>
public struct InsufficientCloudWatchLogsResourcePolicy: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InsufficientCloudWatchLogsResourcePolicyBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InsufficientCloudWatchLogsResourcePolicyBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes {
    public enum InsufficientDataHealthStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case healthy
        case lastknownstatus
        case unhealthy
        case sdkUnknown(Swift.String)

        public static var allCases: [InsufficientDataHealthStatus] {
            return [
                .healthy,
                .lastknownstatus,
                .unhealthy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .healthy: return "Healthy"
            case .lastknownstatus: return "LastKnownStatus"
            case .unhealthy: return "Unhealthy"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InsufficientDataHealthStatus(rawValue: rawValue) ?? InsufficientDataHealthStatus.sdkUnknown(rawValue)
        }
    }
}

extension InvalidArgument: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidArgument(message: \(Swift.String(describing: message)))"}
}

extension InvalidArgument: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidArgumentBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Parameter name is not valid.</p>
public struct InvalidArgument: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidArgumentBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidArgumentBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidChangeBatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidChangeBatch(message: \(Swift.String(describing: message)), messages: \(Swift.String(describing: messages)))"}
}

extension InvalidChangeBatch: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidChangeBatchBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
            self.messages = output.error.messages
        } else {
            self.message = nil
            self.messages = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This exception contains a list of messages that might contain one or more error messages. Each error message indicates
/// 			one error in the change batch.</p>
public struct InvalidChangeBatch: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// <p></p>
    public var messages: [Swift.String]?

    public init (
        message: Swift.String? = nil,
        messages: [Swift.String]? = nil
    )
    {
        self.message = message
        self.messages = messages
    }
}

struct InvalidChangeBatchBody: Swift.Equatable {
    public let messages: [Swift.String]?
    public let message: Swift.String?
}

extension InvalidChangeBatchBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case messages
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.messages) {
            struct KeyVal0{struct Message{}}
            let messagesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Message>.CodingKeys.self, forKey: .messages)
            if let messagesWrappedContainer = messagesWrappedContainer {
                let messagesContainer = try messagesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var messagesBuffer:[Swift.String]? = nil
                if let messagesContainer = messagesContainer {
                    messagesBuffer = [Swift.String]()
                    for stringContainer0 in messagesContainer {
                        messagesBuffer?.append(stringContainer0)
                    }
                }
                messages = messagesBuffer
            } else {
                messages = []
            }
        } else {
            messages = nil
        }
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDomainName: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidDomainName(message: \(Swift.String(describing: message)))"}
}

extension InvalidDomainName: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidDomainNameBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified domain name is not valid.</p>
public struct InvalidDomainName: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDomainNameBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidDomainNameBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidInput(message: \(Swift.String(describing: message)))"}
}

extension InvalidInput: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidInputBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The input is not valid.</p>
public struct InvalidInput: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidInputBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidKMSArn: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidKMSArn(message: \(Swift.String(describing: message)))"}
}

extension InvalidKMSArn: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidKMSArnBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The KeyManagementServiceArn that you specified isn't valid to use with DNSSEC signing.</p>
public struct InvalidKMSArn: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidKMSArnBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidKMSArnBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidKeySigningKeyName: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidKeySigningKeyName(message: \(Swift.String(describing: message)))"}
}

extension InvalidKeySigningKeyName: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidKeySigningKeyNameBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The key-signing key (KSK) name that you specified isn't a valid name.</p>
public struct InvalidKeySigningKeyName: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidKeySigningKeyNameBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidKeySigningKeyNameBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidKeySigningKeyStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidKeySigningKeyStatus(message: \(Swift.String(describing: message)))"}
}

extension InvalidKeySigningKeyStatus: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidKeySigningKeyStatusBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The key-signing key (KSK) status isn't valid or another KSK has the status <code>INTERNAL_FAILURE</code>.</p>
public struct InvalidKeySigningKeyStatus: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidKeySigningKeyStatusBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidKeySigningKeyStatusBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidPaginationToken: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidPaginationToken(message: \(Swift.String(describing: message)))"}
}

extension InvalidPaginationToken: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidPaginationTokenBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The value that you specified to get the second or subsequent page of results is invalid.</p>
public struct InvalidPaginationToken: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidPaginationTokenBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidPaginationTokenBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSigningStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidSigningStatus(message: \(Swift.String(describing: message)))"}
}

extension InvalidSigningStatus: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidSigningStatusBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Your hosted zone status isn't valid for this operation. In the hosted zone, change the status to enable <code>DNSSEC</code>
/// 			or disable <code>DNSSEC</code>.</p>
public struct InvalidSigningStatus: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSigningStatusBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidSigningStatusBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTrafficPolicyDocument: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidTrafficPolicyDocument(message: \(Swift.String(describing: message)))"}
}

extension InvalidTrafficPolicyDocument: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidTrafficPolicyDocumentBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The format of the traffic policy document that you specified in the <code>Document</code> element is not valid.</p>
public struct InvalidTrafficPolicyDocument: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTrafficPolicyDocumentBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidTrafficPolicyDocumentBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidVPCId: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidVPCId(message: \(Swift.String(describing: message)))"}
}

extension InvalidVPCId: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidVPCIdBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The VPC ID that you specified either isn't a valid ID or the current account is not authorized to access this VPC.</p>
public struct InvalidVPCId: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidVPCIdBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidVPCIdBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.KeySigningKey: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDate = "CreatedDate"
        case dNSKEYRecord = "DNSKEYRecord"
        case dSRecord = "DSRecord"
        case digestAlgorithmMnemonic = "DigestAlgorithmMnemonic"
        case digestAlgorithmType = "DigestAlgorithmType"
        case digestValue = "DigestValue"
        case flag = "Flag"
        case keyTag = "KeyTag"
        case kmsArn = "KmsArn"
        case lastModifiedDate = "LastModifiedDate"
        case name = "Name"
        case publicKey = "PublicKey"
        case signingAlgorithmMnemonic = "SigningAlgorithmMnemonic"
        case signingAlgorithmType = "SigningAlgorithmType"
        case status = "Status"
        case statusMessage = "StatusMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let createdDate = createdDate {
            try container.encode(ClientRuntime.TimestampWrapper(createdDate, format: .dateTime), forKey: ClientRuntime.Key("CreatedDate"))
        }
        if let dNSKEYRecord = dNSKEYRecord {
            try container.encode(dNSKEYRecord, forKey: ClientRuntime.Key("DNSKEYRecord"))
        }
        if let dSRecord = dSRecord {
            try container.encode(dSRecord, forKey: ClientRuntime.Key("DSRecord"))
        }
        if let digestAlgorithmMnemonic = digestAlgorithmMnemonic {
            try container.encode(digestAlgorithmMnemonic, forKey: ClientRuntime.Key("DigestAlgorithmMnemonic"))
        }
        if digestAlgorithmType != 0 {
            try container.encode(digestAlgorithmType, forKey: ClientRuntime.Key("DigestAlgorithmType"))
        }
        if let digestValue = digestValue {
            try container.encode(digestValue, forKey: ClientRuntime.Key("DigestValue"))
        }
        if flag != 0 {
            try container.encode(flag, forKey: ClientRuntime.Key("Flag"))
        }
        if keyTag != 0 {
            try container.encode(keyTag, forKey: ClientRuntime.Key("KeyTag"))
        }
        if let kmsArn = kmsArn {
            try container.encode(kmsArn, forKey: ClientRuntime.Key("KmsArn"))
        }
        if let lastModifiedDate = lastModifiedDate {
            try container.encode(ClientRuntime.TimestampWrapper(lastModifiedDate, format: .dateTime), forKey: ClientRuntime.Key("LastModifiedDate"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let publicKey = publicKey {
            try container.encode(publicKey, forKey: ClientRuntime.Key("PublicKey"))
        }
        if let signingAlgorithmMnemonic = signingAlgorithmMnemonic {
            try container.encode(signingAlgorithmMnemonic, forKey: ClientRuntime.Key("SigningAlgorithmMnemonic"))
        }
        if signingAlgorithmType != 0 {
            try container.encode(signingAlgorithmType, forKey: ClientRuntime.Key("SigningAlgorithmType"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let kmsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsArn)
        kmsArn = kmsArnDecoded
        let flagDecoded = try containerValues.decode(Swift.Int.self, forKey: .flag)
        flag = flagDecoded
        let signingAlgorithmMnemonicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signingAlgorithmMnemonic)
        signingAlgorithmMnemonic = signingAlgorithmMnemonicDecoded
        let signingAlgorithmTypeDecoded = try containerValues.decode(Swift.Int.self, forKey: .signingAlgorithmType)
        signingAlgorithmType = signingAlgorithmTypeDecoded
        let digestAlgorithmMnemonicDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .digestAlgorithmMnemonic)
        digestAlgorithmMnemonic = digestAlgorithmMnemonicDecoded
        let digestAlgorithmTypeDecoded = try containerValues.decode(Swift.Int.self, forKey: .digestAlgorithmType)
        digestAlgorithmType = digestAlgorithmTypeDecoded
        let keyTagDecoded = try containerValues.decode(Swift.Int.self, forKey: .keyTag)
        keyTag = keyTagDecoded
        let digestValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .digestValue)
        digestValue = digestValueDecoded
        let publicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicKey)
        publicKey = publicKeyDecoded
        let dSRecordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dSRecord)
        dSRecord = dSRecordDecoded
        let dNSKEYRecordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dNSKEYRecord)
        dNSKEYRecord = dNSKEYRecordDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let statusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusMessage)
        statusMessage = statusMessageDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdDate)
        var createdDateBuffer:ClientRuntime.Date? = nil
        if let createdDateDecoded = createdDateDecoded {
            createdDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(createdDateDecoded, format: .dateTime)
        }
        createdDate = createdDateBuffer
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedDate)
        var lastModifiedDateBuffer:ClientRuntime.Date? = nil
        if let lastModifiedDateDecoded = lastModifiedDateDecoded {
            lastModifiedDateBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastModifiedDateDecoded, format: .dateTime)
        }
        lastModifiedDate = lastModifiedDateBuffer
    }
}

extension Route53ClientTypes.KeySigningKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeySigningKey(createdDate: \(Swift.String(describing: createdDate)), dNSKEYRecord: \(Swift.String(describing: dNSKEYRecord)), dSRecord: \(Swift.String(describing: dSRecord)), digestAlgorithmMnemonic: \(Swift.String(describing: digestAlgorithmMnemonic)), digestAlgorithmType: \(Swift.String(describing: digestAlgorithmType)), digestValue: \(Swift.String(describing: digestValue)), flag: \(Swift.String(describing: flag)), keyTag: \(Swift.String(describing: keyTag)), kmsArn: \(Swift.String(describing: kmsArn)), lastModifiedDate: \(Swift.String(describing: lastModifiedDate)), name: \(Swift.String(describing: name)), publicKey: \(Swift.String(describing: publicKey)), signingAlgorithmMnemonic: \(Swift.String(describing: signingAlgorithmMnemonic)), signingAlgorithmType: \(Swift.String(describing: signingAlgorithmType)), status: \(Swift.String(describing: status)), statusMessage: \(Swift.String(describing: statusMessage)))"}
}

extension Route53ClientTypes.KeySigningKey: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A key-signing key (KSK) is a complex type that represents a public/private key pair. The private key is used to generate
    /// 		a digital signature for the zone signing key (ZSK). The public key is stored in the DNS and is used to authenticate the ZSK.
    /// 		A KSK is always associated with a hosted zone; it cannot exist by itself.</p>
    public struct KeySigningKey: Swift.Equatable {
        /// <p>The date when the key-signing key (KSK) was created.</p>
        public let createdDate: ClientRuntime.Date?
        /// <p>A string that represents a DNSKEY record.</p>
        public let dNSKEYRecord: Swift.String?
        /// <p>A string that represents a delegation signer (DS) record.</p>
        public let dSRecord: Swift.String?
        /// <p>A string used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by
        /// 			<a href="https://tools.ietf.org/html/rfc8624#section-3.3">RFC-8624 Section 3.3</a>.
        /// 		</p>
        public let digestAlgorithmMnemonic: Swift.String?
        /// <p>An integer used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by
        /// 			<a href="https://tools.ietf.org/html/rfc8624#section-3.3">RFC-8624 Section 3.3</a>.</p>
        public let digestAlgorithmType: Swift.Int
        /// <p>A cryptographic digest of a DNSKEY resource record (RR). DNSKEY records are used to publish the public key that resolvers
        /// 			can use to verify DNSSEC signatures that are used to secure certain kinds of information provided by the DNS system.</p>
        public let digestValue: Swift.String?
        /// <p>An integer that specifies how the key is used. For key-signing key (KSK), this value is always 257.</p>
        public let flag: Swift.Int
        /// <p>An integer used to identify the DNSSEC record for the domain name. The process used to calculate the value is described in
        /// 			<a href="https://tools.ietf.org/rfc/rfc4034.txt">RFC-4034 Appendix B</a>.</p>
        public let keyTag: Swift.Int
        /// <p>The Amazon resource name (ARN) used to identify the customer managed customer master key (CMK) in AWS Key Management Service (AWS KMS).
        /// 			The <code>KmsArn</code> must be unique for each key-signing key (KSK) in a single hosted zone.</p>
        /// 		       <p>You must configure the CMK as follows:</p>
        /// 		       <dl>
        ///             <dt>Status</dt>
        ///             <dd>
        ///                <p>Enabled</p>
        ///             </dd>
        ///             <dt>Key spec</dt>
        ///             <dd>
        ///                <p>ECC_NIST_P256</p>
        ///             </dd>
        ///             <dt>Key usage</dt>
        ///             <dd>
        ///                <p>Sign and verify</p>
        ///             </dd>
        ///             <dt>Key policy</dt>
        ///             <dd>
        ///                <p>The key policy must give permission for the following actions:</p>
        /// 				           <ul>
        ///                   <li>
        ///                      <p>DescribeKey</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>GetPublicKey</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>Sign</p>
        ///                   </li>
        ///                </ul>
        /// 					          <p>The key policy must also include the Amazon Route 53 service in the principal for your account.
        /// 						Specify the following:</p>
        /// 					          <ul>
        ///                   <li>
        ///                      <p>
        ///                         <code>"Service": "api-service.dnssec.route53.aws.internal"</code>
        ///                      </p>
        ///                   </li>
        ///                </ul>
        /// 				        </dd>
        ///          </dl>
        /// 		       <p>For more information about working with the customer managed CMK in AWS KMS, see
        /// 			<a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html">AWS Key Management Service concepts</a>.</p>
        public let kmsArn: Swift.String?
        /// <p>The last time that the key-signing key (KSK) was changed.</p>
        public let lastModifiedDate: ClientRuntime.Date?
        /// <p>A string used to identify a key-signing key (KSK). <code>Name</code> can include numbers, letters,  and underscores (_). <code>Name</code> must be unique for each key-signing key in the same
        /// 			hosted zone.</p>
        public let name: Swift.String?
        /// <p>The public key, represented as a Base64 encoding, as required by <a href="https://tools.ietf.org/rfc/rfc4034.txt">
        /// 			RFC-4034 Page 5</a>.</p>
        public let publicKey: Swift.String?
        /// <p>A string used to represent the signing algorithm. This value must follow the guidelines provided by
        /// 			<a href="https://tools.ietf.org/html/rfc8624#section-3.1">RFC-8624 Section 3.1</a>.
        /// 		</p>
        public let signingAlgorithmMnemonic: Swift.String?
        /// <p>An integer used to represent the signing algorithm. This value must follow the guidelines provided by
        /// 			<a href="https://tools.ietf.org/html/rfc8624#section-3.1">RFC-8624 Section 3.1</a>.
        /// 		</p>
        public let signingAlgorithmType: Swift.Int
        /// <p>A string that represents the current key-signing key (KSK) status.</p>
        /// 		       <p>Status can have one of the following values:</p>
        /// 		       <dl>
        ///             <dt>ACTIVE</dt>
        ///             <dd>
        ///                <p>The KSK is being used for signing.</p>
        ///             </dd>
        ///             <dt>INACTIVE</dt>
        ///             <dd>
        ///                <p>The KSK is not being used for signing.</p>
        ///             </dd>
        ///             <dt>DELETING</dt>
        ///             <dd>
        ///                <p>The KSK is in the process of being deleted.</p>
        ///             </dd>
        ///             <dt>ACTION_NEEDED</dt>
        ///             <dd>
        ///                <p>There is a problem with the KSK that requires you to take action to resolve.
        /// 				For example, the customer managed customer master key (CMK) might have been deleted, or the
        /// 				permissions for the customer managed CMK might have been changed.</p>
        ///             </dd>
        ///             <dt>INTERNAL_FAILURE</dt>
        ///             <dd>
        ///                <p>There was an error during a request. Before you can continue to work with DNSSEC
        /// 					signing, including actions that involve this KSK, you must correct the problem. For example,
        /// 					you may need to activate or deactivate the KSK.</p>
        ///             </dd>
        ///          </dl>
        public let status: Swift.String?
        /// <p>The status message provided for the following key-signing key (KSK) statuses: <code>ACTION_NEEDED</code> or
        /// 			<code>INTERNAL_FAILURE</code>. The status message includes information about what the problem might be and steps
        /// 			that you can take to correct the issue.</p>
        public let statusMessage: Swift.String?

        public init (
            createdDate: ClientRuntime.Date? = nil,
            dNSKEYRecord: Swift.String? = nil,
            dSRecord: Swift.String? = nil,
            digestAlgorithmMnemonic: Swift.String? = nil,
            digestAlgorithmType: Swift.Int = 0,
            digestValue: Swift.String? = nil,
            flag: Swift.Int = 0,
            keyTag: Swift.Int = 0,
            kmsArn: Swift.String? = nil,
            lastModifiedDate: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            publicKey: Swift.String? = nil,
            signingAlgorithmMnemonic: Swift.String? = nil,
            signingAlgorithmType: Swift.Int = 0,
            status: Swift.String? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.createdDate = createdDate
            self.dNSKEYRecord = dNSKEYRecord
            self.dSRecord = dSRecord
            self.digestAlgorithmMnemonic = digestAlgorithmMnemonic
            self.digestAlgorithmType = digestAlgorithmType
            self.digestValue = digestValue
            self.flag = flag
            self.keyTag = keyTag
            self.kmsArn = kmsArn
            self.lastModifiedDate = lastModifiedDate
            self.name = name
            self.publicKey = publicKey
            self.signingAlgorithmMnemonic = signingAlgorithmMnemonic
            self.signingAlgorithmType = signingAlgorithmType
            self.status = status
            self.statusMessage = statusMessage
        }
    }

}

extension KeySigningKeyAlreadyExists: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeySigningKeyAlreadyExists(message: \(Swift.String(describing: message)))"}
}

extension KeySigningKeyAlreadyExists: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<KeySigningKeyAlreadyExistsBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You've already created a key-signing key (KSK) with this name or with the same customer managed customer master key (CMK) ARN.</p>
public struct KeySigningKeyAlreadyExists: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct KeySigningKeyAlreadyExistsBody: Swift.Equatable {
    public let message: Swift.String?
}

extension KeySigningKeyAlreadyExistsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KeySigningKeyInParentDSRecord: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeySigningKeyInParentDSRecord(message: \(Swift.String(describing: message)))"}
}

extension KeySigningKeyInParentDSRecord: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<KeySigningKeyInParentDSRecordBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The key-signing key (KSK) is specified in a parent DS record.</p>
public struct KeySigningKeyInParentDSRecord: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct KeySigningKeyInParentDSRecordBody: Swift.Equatable {
    public let message: Swift.String?
}

extension KeySigningKeyInParentDSRecordBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KeySigningKeyInUse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeySigningKeyInUse(message: \(Swift.String(describing: message)))"}
}

extension KeySigningKeyInUse: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<KeySigningKeyInUseBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The key-signing key (KSK) that you specified can't be deactivated because it's the only KSK for a
/// 		currently-enabled DNSSEC. Disable DNSSEC signing, or add or enable another KSK.</p>
public struct KeySigningKeyInUse: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct KeySigningKeyInUseBody: Swift.Equatable {
    public let message: Swift.String?
}

extension KeySigningKeyInUseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension KeySigningKeyWithActiveStatusNotFound: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeySigningKeyWithActiveStatusNotFound(message: \(Swift.String(describing: message)))"}
}

extension KeySigningKeyWithActiveStatusNotFound: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<KeySigningKeyWithActiveStatusNotFoundBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A key-signing key (KSK) with <code>ACTIVE</code> status wasn't found.</p>
public struct KeySigningKeyWithActiveStatusNotFound: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct KeySigningKeyWithActiveStatusNotFoundBody: Swift.Equatable {
    public let message: Swift.String?
}

extension KeySigningKeyWithActiveStatusNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LastVPCAssociation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LastVPCAssociation(message: \(Swift.String(describing: message)))"}
}

extension LastVPCAssociation: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<LastVPCAssociationBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The VPC that you're trying to disassociate from the private hosted zone is the last VPC that is associated with
/// 			the hosted zone. Amazon Route 53 doesn't support disassociating the last VPC from a hosted zone.</p>
public struct LastVPCAssociation: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LastVPCAssociationBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LastVPCAssociationBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitsExceeded: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitsExceeded(message: \(Swift.String(describing: message)))"}
}

extension LimitsExceeded: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<LimitsExceededBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This operation can't be completed either because the current account has reached the limit on reusable delegation sets
/// 			that it can create or because you've reached the limit on the number of Amazon VPCs that you can associate with a private hosted zone.
/// 			To get the current limit on the number of reusable delegation sets, see
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetAccountLimit.html">GetAccountLimit</a>.
/// 			To get the current limit on the number of Amazon VPCs that you can associate with a private hosted zone, see
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetHostedZoneLimit.html">GetHostedZoneLimit</a>.
/// 			To request a higher limit, <a href="http://aws.amazon.com/route53-request">create a case</a> with the AWS Support Center.</p>
public struct LimitsExceeded: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitsExceededBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitsExceededBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.LinkedService: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case servicePrincipal = "ServicePrincipal"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let servicePrincipal = servicePrincipal {
            try container.encode(servicePrincipal, forKey: ClientRuntime.Key("ServicePrincipal"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .servicePrincipal)
        servicePrincipal = servicePrincipalDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension Route53ClientTypes.LinkedService: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LinkedService(description: \(Swift.String(describing: description)), servicePrincipal: \(Swift.String(describing: servicePrincipal)))"}
}

extension Route53ClientTypes.LinkedService: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>If a health check or hosted zone was created by another service, <code>LinkedService</code> is a complex type that
    /// 			describes the service that created the resource. When a resource is created by another service, you can't edit or delete it using Amazon Route 53. </p>
    public struct LinkedService: Swift.Equatable {
        /// <p>If the health check or hosted zone was created by another service, an optional description that can be provided by the other service.
        /// 			When a resource is created by another service, you can't edit or delete it using Amazon Route 53. </p>
        public let description: Swift.String?
        /// <p>If the health check or hosted zone was created by another service, the service that created the resource. When a resource is created
        /// 			by another service, you can't edit or delete it using Amazon Route 53. </p>
        public let servicePrincipal: Swift.String?

        public init (
            description: Swift.String? = nil,
            servicePrincipal: Swift.String? = nil
        )
        {
            self.description = description
            self.servicePrincipal = servicePrincipal
        }
    }

}

extension ListGeoLocationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListGeoLocationsInput(maxItems: \(Swift.String(describing: maxItems)), startContinentCode: \(Swift.String(describing: startContinentCode)), startCountryCode: \(Swift.String(describing: startCountryCode)), startSubdivisionCode: \(Swift.String(describing: startSubdivisionCode)))"}
}

extension ListGeoLocationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListGeoLocationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListGeoLocationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListGeoLocationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListGeoLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListGeoLocationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListGeoLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListGeoLocationsOutputError>
}

public struct ListGeoLocationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListGeoLocationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListGeoLocationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListGeoLocationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let startContinentCode = input.operationInput.startContinentCode {
            let startContinentCodeQueryItem = ClientRuntime.URLQueryItem(name: "startcontinentcode".urlPercentEncoding(), value: Swift.String(startContinentCode).urlPercentEncoding())
            input.builder.withQueryItem(startContinentCodeQueryItem)
        }
        if let startCountryCode = input.operationInput.startCountryCode {
            let startCountryCodeQueryItem = ClientRuntime.URLQueryItem(name: "startcountrycode".urlPercentEncoding(), value: Swift.String(startCountryCode).urlPercentEncoding())
            input.builder.withQueryItem(startCountryCodeQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        if let startSubdivisionCode = input.operationInput.startSubdivisionCode {
            let startSubdivisionCodeQueryItem = ClientRuntime.URLQueryItem(name: "startsubdivisioncode".urlPercentEncoding(), value: Swift.String(startSubdivisionCode).urlPercentEncoding())
            input.builder.withQueryItem(startSubdivisionCodeQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListGeoLocationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListGeoLocationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListGeoLocationsOutputError>
}

/// <p>A request to get a list of geographic locations that Amazon Route 53 supports for geolocation resource record sets. </p>
public struct ListGeoLocationsInput: Swift.Equatable {
    /// <p>(Optional) The maximum number of geolocations to be included in the response body for this request. If more than <code>maxitems</code>
    /// 			geolocations remain to be listed, then the value of the <code>IsTruncated</code> element in the response is <code>true</code>.</p>
    public let maxItems: Swift.Int?
    /// <p>The code for the continent with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already
    /// 			returned a page or more of results, if <code>IsTruncated</code> is true, and if <code>NextContinentCode</code> from the previous
    /// 			response has a value, enter that value in <code>startcontinentcode</code> to return the next page of results.</p>
    /// 		       <p>Include <code>startcontinentcode</code> only if you want to list continents. Don't include <code>startcontinentcode</code>
    /// 			when you're listing countries or countries with their subdivisions.</p>
    public let startContinentCode: Swift.String?
    /// <p>The code for the country with which you want to start listing locations that Amazon Route 53 supports for geolocation. If Route 53 has already
    /// 			returned a page or more of results, if <code>IsTruncated</code> is <code>true</code>, and if <code>NextCountryCode</code> from the
    /// 			previous response has a value, enter that value in <code>startcountrycode</code> to return the next page of results.</p>
    public let startCountryCode: Swift.String?
    /// <p>The code for the state of the United States with which you want to start listing locations that Amazon Route 53 supports
    /// 			for geolocation. If Route 53 has already returned a page or more of results, if <code>IsTruncated</code> is <code>true</code>, and if
    /// 			<code>NextSubdivisionCode</code> from the previous response has a value, enter that value in <code>startsubdivisioncode</code>
    /// 			to return the next page of results.</p>
    /// 		       <p>To list subdivisions (U.S. states), you must include both <code>startcountrycode</code> and <code>startsubdivisioncode</code>.</p>
    public let startSubdivisionCode: Swift.String?

    public init (
        maxItems: Swift.Int? = nil,
        startContinentCode: Swift.String? = nil,
        startCountryCode: Swift.String? = nil,
        startSubdivisionCode: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.startContinentCode = startContinentCode
        self.startCountryCode = startCountryCode
        self.startSubdivisionCode = startSubdivisionCode
    }
}

struct ListGeoLocationsInputBody: Swift.Equatable {
}

extension ListGeoLocationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListGeoLocationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListGeoLocationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListGeoLocationsOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListGeoLocationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListGeoLocationsOutputResponse(geoLocationDetailsList: \(Swift.String(describing: geoLocationDetailsList)), isTruncated: \(Swift.String(describing: isTruncated)), maxItems: \(Swift.String(describing: maxItems)), nextContinentCode: \(Swift.String(describing: nextContinentCode)), nextCountryCode: \(Swift.String(describing: nextCountryCode)), nextSubdivisionCode: \(Swift.String(describing: nextSubdivisionCode)))"}
}

extension ListGeoLocationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListGeoLocationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.geoLocationDetailsList = output.geoLocationDetailsList
            self.isTruncated = output.isTruncated
            self.maxItems = output.maxItems
            self.nextContinentCode = output.nextContinentCode
            self.nextCountryCode = output.nextCountryCode
            self.nextSubdivisionCode = output.nextSubdivisionCode
        } else {
            self.geoLocationDetailsList = nil
            self.isTruncated = false
            self.maxItems = nil
            self.nextContinentCode = nil
            self.nextCountryCode = nil
            self.nextSubdivisionCode = nil
        }
    }
}

/// <p>A complex type containing the response information for the request.</p>
public struct ListGeoLocationsOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains one <code>GeoLocationDetails</code> element for each location that Amazon Route 53 supports for geolocation.</p>
    public let geoLocationDetailsList: [Route53ClientTypes.GeoLocationDetails]?
    /// <p>A value that indicates whether more locations remain to be listed after the last location in this response. If so, the value of
    /// 			<code>IsTruncated</code> is <code>true</code>. To get more values, submit another request and include the values of <code>NextContinentCode</code>,
    /// 			<code>NextCountryCode</code>, and <code>NextSubdivisionCode</code> in the <code>startcontinentcode</code>, <code>startcountrycode</code>, and
    /// 			<code>startsubdivisioncode</code>, as applicable.</p>
    public let isTruncated: Swift.Bool
    /// <p>The value that you specified for <code>MaxItems</code> in the request.</p>
    public let maxItems: Swift.Int?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, you can make a follow-up request to display more locations. Enter the value of
    /// 			<code>NextContinentCode</code> in the <code>startcontinentcode</code> parameter in another <code>ListGeoLocations</code> request.</p>
    public let nextContinentCode: Swift.String?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, you can make a follow-up request to display more locations. Enter the value of
    /// 			<code>NextCountryCode</code> in the <code>startcountrycode</code> parameter in another <code>ListGeoLocations</code> request.</p>
    public let nextCountryCode: Swift.String?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, you can make a follow-up request to display more locations. Enter the value of
    /// 			<code>NextSubdivisionCode</code> in the <code>startsubdivisioncode</code> parameter in another <code>ListGeoLocations</code> request.</p>
    public let nextSubdivisionCode: Swift.String?

    public init (
        geoLocationDetailsList: [Route53ClientTypes.GeoLocationDetails]? = nil,
        isTruncated: Swift.Bool = false,
        maxItems: Swift.Int? = nil,
        nextContinentCode: Swift.String? = nil,
        nextCountryCode: Swift.String? = nil,
        nextSubdivisionCode: Swift.String? = nil
    )
    {
        self.geoLocationDetailsList = geoLocationDetailsList
        self.isTruncated = isTruncated
        self.maxItems = maxItems
        self.nextContinentCode = nextContinentCode
        self.nextCountryCode = nextCountryCode
        self.nextSubdivisionCode = nextSubdivisionCode
    }
}

struct ListGeoLocationsOutputResponseBody: Swift.Equatable {
    public let geoLocationDetailsList: [Route53ClientTypes.GeoLocationDetails]?
    public let isTruncated: Swift.Bool
    public let nextContinentCode: Swift.String?
    public let nextCountryCode: Swift.String?
    public let nextSubdivisionCode: Swift.String?
    public let maxItems: Swift.Int?
}

extension ListGeoLocationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case geoLocationDetailsList = "GeoLocationDetailsList"
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case nextContinentCode = "NextContinentCode"
        case nextCountryCode = "NextCountryCode"
        case nextSubdivisionCode = "NextSubdivisionCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.geoLocationDetailsList) {
            struct KeyVal0{struct GeoLocationDetails{}}
            let geoLocationDetailsListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.GeoLocationDetails>.CodingKeys.self, forKey: .geoLocationDetailsList)
            if let geoLocationDetailsListWrappedContainer = geoLocationDetailsListWrappedContainer {
                let geoLocationDetailsListContainer = try geoLocationDetailsListWrappedContainer.decodeIfPresent([Route53ClientTypes.GeoLocationDetails].self, forKey: .member)
                var geoLocationDetailsListBuffer:[Route53ClientTypes.GeoLocationDetails]? = nil
                if let geoLocationDetailsListContainer = geoLocationDetailsListContainer {
                    geoLocationDetailsListBuffer = [Route53ClientTypes.GeoLocationDetails]()
                    for structureContainer0 in geoLocationDetailsListContainer {
                        geoLocationDetailsListBuffer?.append(structureContainer0)
                    }
                }
                geoLocationDetailsList = geoLocationDetailsListBuffer
            } else {
                geoLocationDetailsList = []
            }
        } else {
            geoLocationDetailsList = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextContinentCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextContinentCode)
        nextContinentCode = nextContinentCodeDecoded
        let nextCountryCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextCountryCode)
        nextCountryCode = nextCountryCodeDecoded
        let nextSubdivisionCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextSubdivisionCode)
        nextSubdivisionCode = nextSubdivisionCodeDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListHealthChecksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListHealthChecksInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)))"}
}

extension ListHealthChecksInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListHealthChecksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListHealthChecksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListHealthChecksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListHealthChecksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListHealthChecksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListHealthChecksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListHealthChecksOutputError>
}

public struct ListHealthChecksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListHealthChecksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListHealthChecksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListHealthChecksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListHealthChecksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListHealthChecksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListHealthChecksOutputError>
}

/// <p>A request to retrieve a list of the health checks that are associated with the current AWS account.</p>
public struct ListHealthChecksInput: Swift.Equatable {
    /// <p>If the value of <code>IsTruncated</code> in the previous response was <code>true</code>, you have more health checks. To get another group,
    /// 			submit another <code>ListHealthChecks</code> request. </p>
    /// 		       <p>For the value of <code>marker</code>, specify the value of <code>NextMarker</code> from the previous response,
    /// 			which is the ID of the first health check that Amazon Route 53 will return if you submit another request.</p>
    /// 		       <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more health checks to get.</p>
    public let marker: Swift.String?
    /// <p>The maximum number of health checks that you want <code>ListHealthChecks</code> to return in response to the current request.
    /// 			Amazon Route 53 returns a maximum of 100 items. If you set <code>MaxItems</code> to a value greater than 100, Route 53 returns only the first 100 health checks. </p>
    public let maxItems: Swift.Int?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

struct ListHealthChecksInputBody: Swift.Equatable {
}

extension ListHealthChecksInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListHealthChecksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListHealthChecksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IncompatibleVersion" : self = .incompatibleVersion(try IncompatibleVersion(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListHealthChecksOutputError: Swift.Error, Swift.Equatable {
    case incompatibleVersion(IncompatibleVersion)
    case invalidInput(InvalidInput)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHealthChecksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListHealthChecksOutputResponse(healthChecks: \(Swift.String(describing: healthChecks)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), nextMarker: \(Swift.String(describing: nextMarker)))"}
}

extension ListHealthChecksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListHealthChecksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.healthChecks = output.healthChecks
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.maxItems = output.maxItems
            self.nextMarker = output.nextMarker
        } else {
            self.healthChecks = nil
            self.isTruncated = false
            self.marker = nil
            self.maxItems = nil
            self.nextMarker = nil
        }
    }
}

/// <p>A complex type that contains the response to a <code>ListHealthChecks</code> request.</p>
public struct ListHealthChecksOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains one <code>HealthCheck</code> element for each health check that is associated with the current
    /// 			AWS account.</p>
    public let healthChecks: [Route53ClientTypes.HealthCheck]?
    /// <p>A flag that indicates whether there are more health checks to be listed. If the response was truncated, you can get the next group of
    /// 			health checks by submitting another <code>ListHealthChecks</code> request and specifying the value of <code>NextMarker</code> in the
    /// 			<code>marker</code> parameter.</p>
    public let isTruncated: Swift.Bool
    /// <p>For the second and subsequent calls to <code>ListHealthChecks</code>, <code>Marker</code> is the value that you specified for the
    /// 			<code>marker</code> parameter in the previous request.</p>
    public let marker: Swift.String?
    /// <p>The value that you specified for the <code>maxitems</code> parameter in the call to <code>ListHealthChecks</code> that produced the
    /// 			current response.</p>
    public let maxItems: Swift.Int?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, the value of <code>NextMarker</code> identifies the first health check that Amazon Route 53
    /// 			returns if you submit another <code>ListHealthChecks</code> request and specify the value of <code>NextMarker</code> in
    /// 			the <code>marker</code> parameter.</p>
    public let nextMarker: Swift.String?

    public init (
        healthChecks: [Route53ClientTypes.HealthCheck]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.healthChecks = healthChecks
        self.isTruncated = isTruncated
        self.marker = marker
        self.maxItems = maxItems
        self.nextMarker = nextMarker
    }
}

struct ListHealthChecksOutputResponseBody: Swift.Equatable {
    public let healthChecks: [Route53ClientTypes.HealthCheck]?
    public let marker: Swift.String?
    public let isTruncated: Swift.Bool
    public let nextMarker: Swift.String?
    public let maxItems: Swift.Int?
}

extension ListHealthChecksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthChecks = "HealthChecks"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case maxItems = "MaxItems"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.healthChecks) {
            struct KeyVal0{struct HealthCheck{}}
            let healthChecksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HealthCheck>.CodingKeys.self, forKey: .healthChecks)
            if let healthChecksWrappedContainer = healthChecksWrappedContainer {
                let healthChecksContainer = try healthChecksWrappedContainer.decodeIfPresent([Route53ClientTypes.HealthCheck].self, forKey: .member)
                var healthChecksBuffer:[Route53ClientTypes.HealthCheck]? = nil
                if let healthChecksContainer = healthChecksContainer {
                    healthChecksBuffer = [Route53ClientTypes.HealthCheck]()
                    for structureContainer0 in healthChecksContainer {
                        healthChecksBuffer?.append(structureContainer0)
                    }
                }
                healthChecks = healthChecksBuffer
            } else {
                healthChecks = []
            }
        } else {
            healthChecks = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListHostedZonesByNameInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListHostedZonesByNameInput(dNSName: \(Swift.String(describing: dNSName)), hostedZoneId: \(Swift.String(describing: hostedZoneId)), maxItems: \(Swift.String(describing: maxItems)))"}
}

extension ListHostedZonesByNameInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListHostedZonesByNameInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListHostedZonesByNameInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListHostedZonesByNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListHostedZonesByNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListHostedZonesByNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListHostedZonesByNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListHostedZonesByNameOutputError>
}

public struct ListHostedZonesByNameInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListHostedZonesByNameInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListHostedZonesByNameInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListHostedZonesByNameOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let hostedZoneId = input.operationInput.hostedZoneId {
            let hostedZoneIdQueryItem = ClientRuntime.URLQueryItem(name: "hostedzoneid".urlPercentEncoding(), value: Swift.String(hostedZoneId).urlPercentEncoding())
            input.builder.withQueryItem(hostedZoneIdQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        if let dNSName = input.operationInput.dNSName {
            let dNSNameQueryItem = ClientRuntime.URLQueryItem(name: "dnsname".urlPercentEncoding(), value: Swift.String(dNSName).urlPercentEncoding())
            input.builder.withQueryItem(dNSNameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListHostedZonesByNameInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListHostedZonesByNameOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListHostedZonesByNameOutputError>
}

/// <p>Retrieves a list of the public and private hosted zones that are associated with the current AWS account in ASCII order by domain
/// 			name. </p>
public struct ListHostedZonesByNameInput: Swift.Equatable {
    /// <p>(Optional) For your first request to <code>ListHostedZonesByName</code>, include the <code>dnsname</code> parameter only if you want to
    /// 			specify the name of the first hosted zone in the response. If you don't include the <code>dnsname</code> parameter, Amazon Route 53 returns all of
    /// 			the hosted zones that were created by the current AWS account, in ASCII order. For subsequent requests, include both <code>dnsname</code> and
    /// 			<code>hostedzoneid</code> parameters. For <code>dnsname</code>, specify the value of <code>NextDNSName</code> from the previous response.</p>
    public let dNSName: Swift.String?
    /// <p>(Optional) For your first request to <code>ListHostedZonesByName</code>, do not include the <code>hostedzoneid</code> parameter.</p>
    /// 		       <p>If you have more hosted zones than the value of <code>maxitems</code>, <code>ListHostedZonesByName</code> returns only the first
    /// 			<code>maxitems</code> hosted zones. To get the next group of <code>maxitems</code> hosted zones, submit another request to
    /// 			<code>ListHostedZonesByName</code> and include both <code>dnsname</code> and <code>hostedzoneid</code> parameters. For the value of
    /// 			<code>hostedzoneid</code>, specify the value of the <code>NextHostedZoneId</code> element from the previous response.</p>
    public let hostedZoneId: Swift.String?
    /// <p>The maximum number of hosted zones to be included in the response body for this request. If you have more than <code>maxitems</code>
    /// 			hosted zones, then the value of the <code>IsTruncated</code> element in the response is true, and the values of <code>NextDNSName</code> and
    /// 			<code>NextHostedZoneId</code> specify the first hosted zone in the next group of <code>maxitems</code> hosted zones. </p>
    public let maxItems: Swift.Int?

    public init (
        dNSName: Swift.String? = nil,
        hostedZoneId: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.dNSName = dNSName
        self.hostedZoneId = hostedZoneId
        self.maxItems = maxItems
    }
}

struct ListHostedZonesByNameInputBody: Swift.Equatable {
}

extension ListHostedZonesByNameInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListHostedZonesByNameOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListHostedZonesByNameOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidDomainName" : self = .invalidDomainName(try InvalidDomainName(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListHostedZonesByNameOutputError: Swift.Error, Swift.Equatable {
    case invalidDomainName(InvalidDomainName)
    case invalidInput(InvalidInput)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHostedZonesByNameOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListHostedZonesByNameOutputResponse(dNSName: \(Swift.String(describing: dNSName)), hostedZoneId: \(Swift.String(describing: hostedZoneId)), hostedZones: \(Swift.String(describing: hostedZones)), isTruncated: \(Swift.String(describing: isTruncated)), maxItems: \(Swift.String(describing: maxItems)), nextDNSName: \(Swift.String(describing: nextDNSName)), nextHostedZoneId: \(Swift.String(describing: nextHostedZoneId)))"}
}

extension ListHostedZonesByNameOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListHostedZonesByNameOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dNSName = output.dNSName
            self.hostedZoneId = output.hostedZoneId
            self.hostedZones = output.hostedZones
            self.isTruncated = output.isTruncated
            self.maxItems = output.maxItems
            self.nextDNSName = output.nextDNSName
            self.nextHostedZoneId = output.nextHostedZoneId
        } else {
            self.dNSName = nil
            self.hostedZoneId = nil
            self.hostedZones = nil
            self.isTruncated = false
            self.maxItems = nil
            self.nextDNSName = nil
            self.nextHostedZoneId = nil
        }
    }
}

/// <p>A complex type that contains the response information for the request.</p>
public struct ListHostedZonesByNameOutputResponse: Swift.Equatable {
    /// <p>For the second and subsequent calls to <code>ListHostedZonesByName</code>, <code>DNSName</code> is the value that you specified for the
    /// 			<code>dnsname</code> parameter in the request that produced the current response.</p>
    public let dNSName: Swift.String?
    /// <p>The ID that Amazon Route 53 assigned to the hosted zone when you created it.</p>
    public let hostedZoneId: Swift.String?
    /// <p>A complex type that contains general information about the hosted zone.</p>
    public let hostedZones: [Route53ClientTypes.HostedZone]?
    /// <p>A flag that indicates whether there are more hosted zones to be listed. If the response was truncated, you can get the next group of
    /// 			<code>maxitems</code> hosted zones by calling <code>ListHostedZonesByName</code> again and specifying the values of <code>NextDNSName</code> and
    /// 			<code>NextHostedZoneId</code> elements in the <code>dnsname</code> and <code>hostedzoneid</code> parameters.</p>
    public let isTruncated: Swift.Bool
    /// <p>The value that you specified for the <code>maxitems</code> parameter in the call to <code>ListHostedZonesByName</code> that produced the
    /// 			current response.</p>
    public let maxItems: Swift.Int?
    /// <p>If <code>IsTruncated</code> is true, the value of <code>NextDNSName</code> is the name of the first hosted zone in the next group of
    /// 			<code>maxitems</code> hosted zones. Call <code>ListHostedZonesByName</code> again and specify the value of <code>NextDNSName</code>
    /// 			and <code>NextHostedZoneId</code> in the <code>dnsname</code> and <code>hostedzoneid</code> parameters, respectively.</p>
    /// 		       <p>This element is present only if <code>IsTruncated</code> is <code>true</code>.</p>
    public let nextDNSName: Swift.String?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, the value of <code>NextHostedZoneId</code> identifies the first hosted zone in the
    /// 			next group of <code>maxitems</code> hosted zones. Call <code>ListHostedZonesByName</code> again and specify the value of <code>NextDNSName</code>
    /// 			and <code>NextHostedZoneId</code> in the <code>dnsname</code> and <code>hostedzoneid</code> parameters, respectively.</p>
    /// 		       <p>This element is present only if <code>IsTruncated</code> is <code>true</code>.</p>
    public let nextHostedZoneId: Swift.String?

    public init (
        dNSName: Swift.String? = nil,
        hostedZoneId: Swift.String? = nil,
        hostedZones: [Route53ClientTypes.HostedZone]? = nil,
        isTruncated: Swift.Bool = false,
        maxItems: Swift.Int? = nil,
        nextDNSName: Swift.String? = nil,
        nextHostedZoneId: Swift.String? = nil
    )
    {
        self.dNSName = dNSName
        self.hostedZoneId = hostedZoneId
        self.hostedZones = hostedZones
        self.isTruncated = isTruncated
        self.maxItems = maxItems
        self.nextDNSName = nextDNSName
        self.nextHostedZoneId = nextHostedZoneId
    }
}

struct ListHostedZonesByNameOutputResponseBody: Swift.Equatable {
    public let hostedZones: [Route53ClientTypes.HostedZone]?
    public let dNSName: Swift.String?
    public let hostedZoneId: Swift.String?
    public let isTruncated: Swift.Bool
    public let nextDNSName: Swift.String?
    public let nextHostedZoneId: Swift.String?
    public let maxItems: Swift.Int?
}

extension ListHostedZonesByNameOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dNSName = "DNSName"
        case hostedZoneId = "HostedZoneId"
        case hostedZones = "HostedZones"
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case nextDNSName = "NextDNSName"
        case nextHostedZoneId = "NextHostedZoneId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.hostedZones) {
            struct KeyVal0{struct HostedZone{}}
            let hostedZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HostedZone>.CodingKeys.self, forKey: .hostedZones)
            if let hostedZonesWrappedContainer = hostedZonesWrappedContainer {
                let hostedZonesContainer = try hostedZonesWrappedContainer.decodeIfPresent([Route53ClientTypes.HostedZone].self, forKey: .member)
                var hostedZonesBuffer:[Route53ClientTypes.HostedZone]? = nil
                if let hostedZonesContainer = hostedZonesContainer {
                    hostedZonesBuffer = [Route53ClientTypes.HostedZone]()
                    for structureContainer0 in hostedZonesContainer {
                        hostedZonesBuffer?.append(structureContainer0)
                    }
                }
                hostedZones = hostedZonesBuffer
            } else {
                hostedZones = []
            }
        } else {
            hostedZones = nil
        }
        let dNSNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dNSName)
        dNSName = dNSNameDecoded
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextDNSNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextDNSName)
        nextDNSName = nextDNSNameDecoded
        let nextHostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextHostedZoneId)
        nextHostedZoneId = nextHostedZoneIdDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListHostedZonesByVPCInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListHostedZonesByVPCInput(maxItems: \(Swift.String(describing: maxItems)), nextToken: \(Swift.String(describing: nextToken)), vPCId: \(Swift.String(describing: vPCId)), vPCRegion: \(Swift.String(describing: vPCRegion)))"}
}

extension ListHostedZonesByVPCInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListHostedZonesByVPCInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListHostedZonesByVPCInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListHostedZonesByVPCInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListHostedZonesByVPCOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListHostedZonesByVPCInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListHostedZonesByVPCOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListHostedZonesByVPCOutputError>
}

public struct ListHostedZonesByVPCInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListHostedZonesByVPCInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListHostedZonesByVPCInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListHostedZonesByVPCOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let vPCRegion = input.operationInput.vPCRegion {
            let vPCRegionQueryItem = ClientRuntime.URLQueryItem(name: "vpcregion".urlPercentEncoding(), value: Swift.String(vPCRegion.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(vPCRegionQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nexttoken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let vPCId = input.operationInput.vPCId {
            let vPCIdQueryItem = ClientRuntime.URLQueryItem(name: "vpcid".urlPercentEncoding(), value: Swift.String(vPCId).urlPercentEncoding())
            input.builder.withQueryItem(vPCIdQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListHostedZonesByVPCInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListHostedZonesByVPCOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListHostedZonesByVPCOutputError>
}

/// <p>Lists all the private hosted zones that a specified VPC is associated with, regardless of which AWS account created the hosted zones.</p>
public struct ListHostedZonesByVPCInput: Swift.Equatable {
    /// <p>(Optional) The maximum number of hosted zones that you want Amazon Route 53 to return. If the specified VPC is associated with
    /// 			more than <code>MaxItems</code> hosted zones, the response includes a <code>NextToken</code> element. <code>NextToken</code> contains
    /// 			an encrypted token that identifies the first hosted zone that Route 53 will return if you submit another request.</p>
    public let maxItems: Swift.Int?
    /// <p>If the previous response included a <code>NextToken</code> element, the specified VPC is associated with more hosted zones.
    /// 			To get more hosted zones, submit another <code>ListHostedZonesByVPC</code> request. </p>
    /// 		       <p>For the value of <code>NextToken</code>, specify the value of <code>NextToken</code> from the previous response.</p>
    /// 		       <p>If the previous response didn't include a <code>NextToken</code> element, there are no more hosted zones to get.</p>
    public let nextToken: Swift.String?
    /// <p>The ID of the Amazon VPC that you want to list hosted zones for.</p>
    public let vPCId: Swift.String?
    /// <p>For the Amazon VPC that you specified for <code>VPCId</code>, the AWS Region that you created the VPC in. </p>
    public let vPCRegion: Route53ClientTypes.VPCRegion?

    public init (
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        vPCId: Swift.String? = nil,
        vPCRegion: Route53ClientTypes.VPCRegion? = nil
    )
    {
        self.maxItems = maxItems
        self.nextToken = nextToken
        self.vPCId = vPCId
        self.vPCRegion = vPCRegion
    }
}

struct ListHostedZonesByVPCInputBody: Swift.Equatable {
}

extension ListHostedZonesByVPCInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListHostedZonesByVPCOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListHostedZonesByVPCOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationToken" : self = .invalidPaginationToken(try InvalidPaginationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListHostedZonesByVPCOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case invalidPaginationToken(InvalidPaginationToken)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHostedZonesByVPCOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListHostedZonesByVPCOutputResponse(hostedZoneSummaries: \(Swift.String(describing: hostedZoneSummaries)), maxItems: \(Swift.String(describing: maxItems)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListHostedZonesByVPCOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListHostedZonesByVPCOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hostedZoneSummaries = output.hostedZoneSummaries
            self.maxItems = output.maxItems
            self.nextToken = output.nextToken
        } else {
            self.hostedZoneSummaries = nil
            self.maxItems = nil
            self.nextToken = nil
        }
    }
}

public struct ListHostedZonesByVPCOutputResponse: Swift.Equatable {
    /// <p>A list that contains one <code>HostedZoneSummary</code> element for each hosted zone that the specified Amazon VPC is associated with.
    /// 			Each <code>HostedZoneSummary</code> element contains the hosted zone name and ID, and information about who owns the hosted zone.</p>
    public let hostedZoneSummaries: [Route53ClientTypes.HostedZoneSummary]?
    /// <p>The value that you specified for <code>MaxItems</code> in the most recent <code>ListHostedZonesByVPC</code> request.</p>
    public let maxItems: Swift.Int?
    /// <p>The value that you specified for <code>NextToken</code> in the most recent <code>ListHostedZonesByVPC</code> request.</p>
    public let nextToken: Swift.String?

    public init (
        hostedZoneSummaries: [Route53ClientTypes.HostedZoneSummary]? = nil,
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.hostedZoneSummaries = hostedZoneSummaries
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

struct ListHostedZonesByVPCOutputResponseBody: Swift.Equatable {
    public let hostedZoneSummaries: [Route53ClientTypes.HostedZoneSummary]?
    public let maxItems: Swift.Int?
    public let nextToken: Swift.String?
}

extension ListHostedZonesByVPCOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZoneSummaries = "HostedZoneSummaries"
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.hostedZoneSummaries) {
            struct KeyVal0{struct HostedZoneSummary{}}
            let hostedZoneSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HostedZoneSummary>.CodingKeys.self, forKey: .hostedZoneSummaries)
            if let hostedZoneSummariesWrappedContainer = hostedZoneSummariesWrappedContainer {
                let hostedZoneSummariesContainer = try hostedZoneSummariesWrappedContainer.decodeIfPresent([Route53ClientTypes.HostedZoneSummary].self, forKey: .member)
                var hostedZoneSummariesBuffer:[Route53ClientTypes.HostedZoneSummary]? = nil
                if let hostedZoneSummariesContainer = hostedZoneSummariesContainer {
                    hostedZoneSummariesBuffer = [Route53ClientTypes.HostedZoneSummary]()
                    for structureContainer0 in hostedZoneSummariesContainer {
                        hostedZoneSummariesBuffer?.append(structureContainer0)
                    }
                }
                hostedZoneSummaries = hostedZoneSummariesBuffer
            } else {
                hostedZoneSummaries = []
            }
        } else {
            hostedZoneSummaries = nil
        }
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListHostedZonesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListHostedZonesInput(delegationSetId: \(Swift.String(describing: delegationSetId)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)))"}
}

extension ListHostedZonesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListHostedZonesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListHostedZonesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListHostedZonesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListHostedZonesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListHostedZonesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListHostedZonesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListHostedZonesOutputError>
}

public struct ListHostedZonesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListHostedZonesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListHostedZonesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListHostedZonesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let delegationSetId = input.operationInput.delegationSetId {
            let delegationSetIdQueryItem = ClientRuntime.URLQueryItem(name: "delegationsetid".urlPercentEncoding(), value: Swift.String(delegationSetId).urlPercentEncoding())
            input.builder.withQueryItem(delegationSetIdQueryItem)
        }
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListHostedZonesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListHostedZonesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListHostedZonesOutputError>
}

/// <p>A request to retrieve a list of the public and private hosted zones that are associated with the current AWS account.</p>
public struct ListHostedZonesInput: Swift.Equatable {
    /// <p>If you're using reusable delegation sets and you want to list all of the hosted zones that are associated
    /// 			with a reusable delegation set, specify the ID of that reusable delegation set. </p>
    public let delegationSetId: Swift.String?
    /// <p>If the value of <code>IsTruncated</code> in the previous response was <code>true</code>, you have more hosted zones.
    /// 			To get more hosted zones, submit another <code>ListHostedZones</code> request. </p>
    /// 		       <p>For the value of <code>marker</code>, specify the value of <code>NextMarker</code> from the previous response,
    /// 			which is the ID of the first hosted zone that Amazon Route 53 will return if you submit another request.</p>
    /// 		       <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more hosted zones to get.</p>
    public let marker: Swift.String?
    /// <p>(Optional) The maximum number of hosted zones that you want Amazon Route 53 to return. If you have more than <code>maxitems</code>
    /// 			hosted zones, the value of <code>IsTruncated</code> in the response is <code>true</code>, and the value of <code>NextMarker</code>
    /// 			is the hosted zone ID of the first hosted zone that Route 53 will return if you submit another request.</p>
    public let maxItems: Swift.Int?

    public init (
        delegationSetId: Swift.String? = nil,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.delegationSetId = delegationSetId
        self.marker = marker
        self.maxItems = maxItems
    }
}

struct ListHostedZonesInputBody: Swift.Equatable {
}

extension ListHostedZonesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListHostedZonesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListHostedZonesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DelegationSetNotReusable" : self = .delegationSetNotReusable(try DelegationSetNotReusable(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchDelegationSet" : self = .noSuchDelegationSet(try NoSuchDelegationSet(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListHostedZonesOutputError: Swift.Error, Swift.Equatable {
    case delegationSetNotReusable(DelegationSetNotReusable)
    case invalidInput(InvalidInput)
    case noSuchDelegationSet(NoSuchDelegationSet)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListHostedZonesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListHostedZonesOutputResponse(hostedZones: \(Swift.String(describing: hostedZones)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), nextMarker: \(Swift.String(describing: nextMarker)))"}
}

extension ListHostedZonesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListHostedZonesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hostedZones = output.hostedZones
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.maxItems = output.maxItems
            self.nextMarker = output.nextMarker
        } else {
            self.hostedZones = nil
            self.isTruncated = false
            self.marker = nil
            self.maxItems = nil
            self.nextMarker = nil
        }
    }
}

public struct ListHostedZonesOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains general information about the hosted zone.</p>
    public let hostedZones: [Route53ClientTypes.HostedZone]?
    /// <p>A flag indicating whether there are more hosted zones to be listed. If the response was truncated, you can get more hosted zones
    /// 			by submitting another <code>ListHostedZones</code> request and specifying the value of <code>NextMarker</code> in the
    /// 			<code>marker</code> parameter.</p>
    public let isTruncated: Swift.Bool
    /// <p>For the second and subsequent calls to <code>ListHostedZones</code>, <code>Marker</code> is the value that you specified for the
    /// 			<code>marker</code> parameter in the request that produced the current response.</p>
    public let marker: Swift.String?
    /// <p>The value that you specified for the <code>maxitems</code> parameter in the call to <code>ListHostedZones</code> that
    /// 			produced the current response.</p>
    public let maxItems: Swift.Int?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, the value of <code>NextMarker</code> identifies the first hosted zone in the next group
    /// 			of hosted zones. Submit another <code>ListHostedZones</code> request, and specify the value of <code>NextMarker</code> from the response in the
    /// 			<code>marker</code> parameter.</p>
    /// 		       <p>This element is present only if <code>IsTruncated</code> is <code>true</code>.</p>
    public let nextMarker: Swift.String?

    public init (
        hostedZones: [Route53ClientTypes.HostedZone]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.hostedZones = hostedZones
        self.isTruncated = isTruncated
        self.marker = marker
        self.maxItems = maxItems
        self.nextMarker = nextMarker
    }
}

struct ListHostedZonesOutputResponseBody: Swift.Equatable {
    public let hostedZones: [Route53ClientTypes.HostedZone]?
    public let marker: Swift.String?
    public let isTruncated: Swift.Bool
    public let nextMarker: Swift.String?
    public let maxItems: Swift.Int?
}

extension ListHostedZonesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZones = "HostedZones"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case maxItems = "MaxItems"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.hostedZones) {
            struct KeyVal0{struct HostedZone{}}
            let hostedZonesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.HostedZone>.CodingKeys.self, forKey: .hostedZones)
            if let hostedZonesWrappedContainer = hostedZonesWrappedContainer {
                let hostedZonesContainer = try hostedZonesWrappedContainer.decodeIfPresent([Route53ClientTypes.HostedZone].self, forKey: .member)
                var hostedZonesBuffer:[Route53ClientTypes.HostedZone]? = nil
                if let hostedZonesContainer = hostedZonesContainer {
                    hostedZonesBuffer = [Route53ClientTypes.HostedZone]()
                    for structureContainer0 in hostedZonesContainer {
                        hostedZonesBuffer?.append(structureContainer0)
                    }
                }
                hostedZones = hostedZonesBuffer
            } else {
                hostedZones = []
            }
        } else {
            hostedZones = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListQueryLoggingConfigsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListQueryLoggingConfigsInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListQueryLoggingConfigsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListQueryLoggingConfigsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListQueryLoggingConfigsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListQueryLoggingConfigsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListQueryLoggingConfigsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListQueryLoggingConfigsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListQueryLoggingConfigsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListQueryLoggingConfigsOutputError>
}

public struct ListQueryLoggingConfigsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListQueryLoggingConfigsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListQueryLoggingConfigsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListQueryLoggingConfigsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nexttoken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let hostedZoneId = input.operationInput.hostedZoneId {
            let hostedZoneIdQueryItem = ClientRuntime.URLQueryItem(name: "hostedzoneid".urlPercentEncoding(), value: Swift.String(hostedZoneId).urlPercentEncoding())
            input.builder.withQueryItem(hostedZoneIdQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxresults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListQueryLoggingConfigsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListQueryLoggingConfigsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListQueryLoggingConfigsOutputError>
}

public struct ListQueryLoggingConfigsInput: Swift.Equatable {
    /// <p>(Optional) If you want to list the query logging configuration that is associated with a hosted zone, specify the ID in
    /// 			<code>HostedZoneId</code>. </p>
    /// 		       <p>If you don't specify a hosted zone ID, <code>ListQueryLoggingConfigs</code> returns all of the configurations
    /// 			that are associated with the current AWS account.</p>
    public let hostedZoneId: Swift.String?
    /// <p>(Optional) The maximum number of query logging configurations that you want Amazon Route 53 to return in response to the current request.
    /// 			If the current AWS account has more than <code>MaxResults</code> configurations, use the value of
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListQueryLoggingConfigs.html#API_ListQueryLoggingConfigs_RequestSyntax">NextToken</a>
    /// 			in the response to get the next page of results.</p>
    /// 		       <p>If you don't specify a value for <code>MaxResults</code>, Route 53 returns up to 100 configurations.</p>
    public let maxResults: Swift.Int?
    /// <p>(Optional) If the current AWS account has more than <code>MaxResults</code> query logging configurations, use <code>NextToken</code>
    /// 			to get the second and subsequent pages of results.</p>
    /// 		       <p>For the first <code>ListQueryLoggingConfigs</code> request, omit this value.</p>
    /// 		       <p>For the second and subsequent requests, get the value of <code>NextToken</code> from the previous response and specify that value
    /// 			for <code>NextToken</code> in the request.</p>
    public let nextToken: Swift.String?

    public init (
        hostedZoneId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListQueryLoggingConfigsInputBody: Swift.Equatable {
}

extension ListQueryLoggingConfigsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListQueryLoggingConfigsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListQueryLoggingConfigsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationToken" : self = .invalidPaginationToken(try InvalidPaginationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListQueryLoggingConfigsOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case invalidPaginationToken(InvalidPaginationToken)
    case noSuchHostedZone(NoSuchHostedZone)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListQueryLoggingConfigsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListQueryLoggingConfigsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), queryLoggingConfigs: \(Swift.String(describing: queryLoggingConfigs)))"}
}

extension ListQueryLoggingConfigsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListQueryLoggingConfigsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queryLoggingConfigs = output.queryLoggingConfigs
        } else {
            self.nextToken = nil
            self.queryLoggingConfigs = nil
        }
    }
}

public struct ListQueryLoggingConfigsOutputResponse: Swift.Equatable {
    /// <p>If a response includes the last of the query logging configurations that are associated with the current AWS account,
    /// 			<code>NextToken</code> doesn't appear in the response.</p>
    /// 		       <p>If a response doesn't include the last of the configurations, you can get more configurations by submitting another
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_ListQueryLoggingConfigs.html">ListQueryLoggingConfigs</a>
    /// 			request. Get the value of <code>NextToken</code> that Amazon Route 53 returned in the previous response and include it in
    /// 			<code>NextToken</code> in the next request.</p>
    public let nextToken: Swift.String?
    /// <p>An array that contains one
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_QueryLoggingConfig.html">QueryLoggingConfig</a> element
    /// 			for each configuration for DNS query logging that is associated with the current AWS account.</p>
    public let queryLoggingConfigs: [Route53ClientTypes.QueryLoggingConfig]?

    public init (
        nextToken: Swift.String? = nil,
        queryLoggingConfigs: [Route53ClientTypes.QueryLoggingConfig]? = nil
    )
    {
        self.nextToken = nextToken
        self.queryLoggingConfigs = queryLoggingConfigs
    }
}

struct ListQueryLoggingConfigsOutputResponseBody: Swift.Equatable {
    public let queryLoggingConfigs: [Route53ClientTypes.QueryLoggingConfig]?
    public let nextToken: Swift.String?
}

extension ListQueryLoggingConfigsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case queryLoggingConfigs = "QueryLoggingConfigs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.queryLoggingConfigs) {
            struct KeyVal0{struct QueryLoggingConfig{}}
            let queryLoggingConfigsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.QueryLoggingConfig>.CodingKeys.self, forKey: .queryLoggingConfigs)
            if let queryLoggingConfigsWrappedContainer = queryLoggingConfigsWrappedContainer {
                let queryLoggingConfigsContainer = try queryLoggingConfigsWrappedContainer.decodeIfPresent([Route53ClientTypes.QueryLoggingConfig].self, forKey: .member)
                var queryLoggingConfigsBuffer:[Route53ClientTypes.QueryLoggingConfig]? = nil
                if let queryLoggingConfigsContainer = queryLoggingConfigsContainer {
                    queryLoggingConfigsBuffer = [Route53ClientTypes.QueryLoggingConfig]()
                    for structureContainer0 in queryLoggingConfigsContainer {
                        queryLoggingConfigsBuffer?.append(structureContainer0)
                    }
                }
                queryLoggingConfigs = queryLoggingConfigsBuffer
            } else {
                queryLoggingConfigs = []
            }
        } else {
            queryLoggingConfigs = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListResourceRecordSetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListResourceRecordSetsInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)), maxItems: \(Swift.String(describing: maxItems)), startRecordIdentifier: \(Swift.String(describing: startRecordIdentifier)), startRecordName: \(Swift.String(describing: startRecordName)), startRecordType: \(Swift.String(describing: startRecordType)))"}
}

extension ListResourceRecordSetsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListResourceRecordSetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListResourceRecordSetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListResourceRecordSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListResourceRecordSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListResourceRecordSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListResourceRecordSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListResourceRecordSetsOutputError>
}

public struct ListResourceRecordSetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListResourceRecordSetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListResourceRecordSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListResourceRecordSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let startRecordType = input.operationInput.startRecordType {
            let startRecordTypeQueryItem = ClientRuntime.URLQueryItem(name: "type".urlPercentEncoding(), value: Swift.String(startRecordType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(startRecordTypeQueryItem)
        }
        if let startRecordIdentifier = input.operationInput.startRecordIdentifier {
            let startRecordIdentifierQueryItem = ClientRuntime.URLQueryItem(name: "identifier".urlPercentEncoding(), value: Swift.String(startRecordIdentifier).urlPercentEncoding())
            input.builder.withQueryItem(startRecordIdentifierQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        if let startRecordName = input.operationInput.startRecordName {
            let startRecordNameQueryItem = ClientRuntime.URLQueryItem(name: "name".urlPercentEncoding(), value: Swift.String(startRecordName).urlPercentEncoding())
            input.builder.withQueryItem(startRecordNameQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListResourceRecordSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListResourceRecordSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListResourceRecordSetsOutputError>
}

/// <p>A request for the resource record sets that are associated with a specified hosted zone.</p>
public struct ListResourceRecordSetsInput: Swift.Equatable {
    /// <p>The ID of the hosted zone that contains the resource record sets that you want to list.</p>
    public let hostedZoneId: Swift.String?
    /// <p>(Optional) The maximum number of resource records sets to include in the response body for this request. If the response includes
    /// 			more than <code>maxitems</code> resource record sets, the value of the <code>IsTruncated</code> element in the response is <code>true</code>,
    /// 			and the values of the <code>NextRecordName</code> and <code>NextRecordType</code> elements in the response identify the first
    /// 			resource record set in the next group of <code>maxitems</code> resource record sets.</p>
    public let maxItems: Swift.Int?
    /// <p>
    ///             <i>Resource record sets that have a routing policy other than simple:</i> If results were truncated for a given DNS name and type,
    /// 			specify the value of <code>NextRecordIdentifier</code> from the previous response to get the next resource record set that has the current
    /// 			DNS name and type.</p>
    public let startRecordIdentifier: Swift.String?
    /// <p>The first name in the lexicographic ordering of resource record sets that you want to list.
    /// 			If the specified record name doesn't exist, the results begin with the first resource record set that has a name
    /// 			greater than the value of <code>name</code>.</p>
    public let startRecordName: Swift.String?
    /// <p>The type of resource record set to begin the record listing from.</p>
    /// 		       <p>Valid values for basic resource record sets: <code>A</code> | <code>AAAA</code> | <code>CAA</code> | <code>CNAME</code> | <code>MX</code> |
    /// 			<code>NAPTR</code> | <code>NS</code> | <code>PTR</code> | <code>SOA</code> | <code>SPF</code> | <code>SRV</code> | <code>TXT</code>
    ///          </p>
    /// 		       <p>Values for weighted, latency, geolocation, and failover resource record sets: <code>A</code> | <code>AAAA</code> | <code>CAA</code> | <code>CNAME</code> |
    /// 			<code>MX</code> | <code>NAPTR</code> | <code>PTR</code> | <code>SPF</code> | <code>SRV</code> | <code>TXT</code>
    ///          </p>
    /// 		       <p>Values for alias resource record sets: </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <b>API Gateway custom regional API or edge-optimized API</b>: A</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>CloudFront distribution</b>: A or AAAA</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Elastic Beanstalk environment that has a regionalized subdomain</b>: A</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Elastic Load Balancing load balancer</b>: A | AAAA</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>S3 bucket</b>: A</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>VPC interface VPC endpoint</b>: A</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Another resource record set in this hosted zone:</b> The type of the resource record set
    /// 				that the alias references.</p>
    ///             </li>
    ///          </ul>
    /// 		       <p>Constraint: Specifying <code>type</code> without specifying <code>name</code> returns an <code>InvalidInput</code> error.</p>
    public let startRecordType: Route53ClientTypes.RRType?

    public init (
        hostedZoneId: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        startRecordIdentifier: Swift.String? = nil,
        startRecordName: Swift.String? = nil,
        startRecordType: Route53ClientTypes.RRType? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.maxItems = maxItems
        self.startRecordIdentifier = startRecordIdentifier
        self.startRecordName = startRecordName
        self.startRecordType = startRecordType
    }
}

struct ListResourceRecordSetsInputBody: Swift.Equatable {
}

extension ListResourceRecordSetsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListResourceRecordSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListResourceRecordSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListResourceRecordSetsOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchHostedZone(NoSuchHostedZone)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListResourceRecordSetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListResourceRecordSetsOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), maxItems: \(Swift.String(describing: maxItems)), nextRecordIdentifier: \(Swift.String(describing: nextRecordIdentifier)), nextRecordName: \(Swift.String(describing: nextRecordName)), nextRecordType: \(Swift.String(describing: nextRecordType)), resourceRecordSets: \(Swift.String(describing: resourceRecordSets)))"}
}

extension ListResourceRecordSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListResourceRecordSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.maxItems = output.maxItems
            self.nextRecordIdentifier = output.nextRecordIdentifier
            self.nextRecordName = output.nextRecordName
            self.nextRecordType = output.nextRecordType
            self.resourceRecordSets = output.resourceRecordSets
        } else {
            self.isTruncated = false
            self.maxItems = nil
            self.nextRecordIdentifier = nil
            self.nextRecordName = nil
            self.nextRecordType = nil
            self.resourceRecordSets = nil
        }
    }
}

/// <p>A complex type that contains list information for the resource record set.</p>
public struct ListResourceRecordSetsOutputResponse: Swift.Equatable {
    /// <p>A flag that indicates whether more resource record sets remain to be listed. If your results were truncated, you can make a
    /// 			follow-up pagination request by using the <code>NextRecordName</code> element.</p>
    public let isTruncated: Swift.Bool
    /// <p>The maximum number of records you requested.</p>
    public let maxItems: Swift.Int?
    /// <p>
    ///             <i>Resource record sets that have a routing policy other than simple:</i> If results were truncated for a given
    /// 			DNS name and type, the value of <code>SetIdentifier</code> for the next resource record set that has the current DNS name and type.</p>
    /// 		       <p>For information about routing policies, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html">Choosing a Routing Policy</a>
    /// 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
    public let nextRecordIdentifier: Swift.String?
    /// <p>If the results were truncated, the name of the next record in the list.</p>
    /// 		       <p>This element is present only if <code>IsTruncated</code> is true. </p>
    public let nextRecordName: Swift.String?
    /// <p>If the results were truncated, the type of the next record in the list.</p>
    /// 		       <p>This element is present only if <code>IsTruncated</code> is true. </p>
    public let nextRecordType: Route53ClientTypes.RRType?
    /// <p>Information about multiple resource record sets.</p>
    public let resourceRecordSets: [Route53ClientTypes.ResourceRecordSet]?

    public init (
        isTruncated: Swift.Bool = false,
        maxItems: Swift.Int? = nil,
        nextRecordIdentifier: Swift.String? = nil,
        nextRecordName: Swift.String? = nil,
        nextRecordType: Route53ClientTypes.RRType? = nil,
        resourceRecordSets: [Route53ClientTypes.ResourceRecordSet]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.maxItems = maxItems
        self.nextRecordIdentifier = nextRecordIdentifier
        self.nextRecordName = nextRecordName
        self.nextRecordType = nextRecordType
        self.resourceRecordSets = resourceRecordSets
    }
}

struct ListResourceRecordSetsOutputResponseBody: Swift.Equatable {
    public let resourceRecordSets: [Route53ClientTypes.ResourceRecordSet]?
    public let isTruncated: Swift.Bool
    public let nextRecordName: Swift.String?
    public let nextRecordType: Route53ClientTypes.RRType?
    public let nextRecordIdentifier: Swift.String?
    public let maxItems: Swift.Int?
}

extension ListResourceRecordSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case nextRecordIdentifier = "NextRecordIdentifier"
        case nextRecordName = "NextRecordName"
        case nextRecordType = "NextRecordType"
        case resourceRecordSets = "ResourceRecordSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.resourceRecordSets) {
            struct KeyVal0{struct ResourceRecordSet{}}
            let resourceRecordSetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ResourceRecordSet>.CodingKeys.self, forKey: .resourceRecordSets)
            if let resourceRecordSetsWrappedContainer = resourceRecordSetsWrappedContainer {
                let resourceRecordSetsContainer = try resourceRecordSetsWrappedContainer.decodeIfPresent([Route53ClientTypes.ResourceRecordSet].self, forKey: .member)
                var resourceRecordSetsBuffer:[Route53ClientTypes.ResourceRecordSet]? = nil
                if let resourceRecordSetsContainer = resourceRecordSetsContainer {
                    resourceRecordSetsBuffer = [Route53ClientTypes.ResourceRecordSet]()
                    for structureContainer0 in resourceRecordSetsContainer {
                        resourceRecordSetsBuffer?.append(structureContainer0)
                    }
                }
                resourceRecordSets = resourceRecordSetsBuffer
            } else {
                resourceRecordSets = []
            }
        } else {
            resourceRecordSets = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextRecordNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextRecordName)
        nextRecordName = nextRecordNameDecoded
        let nextRecordTypeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .nextRecordType)
        nextRecordType = nextRecordTypeDecoded
        let nextRecordIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextRecordIdentifier)
        nextRecordIdentifier = nextRecordIdentifierDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListReusableDelegationSetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReusableDelegationSetsInput(marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)))"}
}

extension ListReusableDelegationSetsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListReusableDelegationSetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReusableDelegationSetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReusableDelegationSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReusableDelegationSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReusableDelegationSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReusableDelegationSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReusableDelegationSetsOutputError>
}

public struct ListReusableDelegationSetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListReusableDelegationSetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListReusableDelegationSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListReusableDelegationSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let marker = input.operationInput.marker {
            let markerQueryItem = ClientRuntime.URLQueryItem(name: "marker".urlPercentEncoding(), value: Swift.String(marker).urlPercentEncoding())
            input.builder.withQueryItem(markerQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListReusableDelegationSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListReusableDelegationSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListReusableDelegationSetsOutputError>
}

/// <p>A request to get a list of the reusable delegation sets that are associated with the current AWS account.</p>
public struct ListReusableDelegationSetsInput: Swift.Equatable {
    /// <p>If the value of <code>IsTruncated</code> in the previous response was <code>true</code>, you have more reusable delegation sets.
    /// 			To get another group, submit another <code>ListReusableDelegationSets</code> request. </p>
    /// 		       <p>For the value of <code>marker</code>, specify the value of <code>NextMarker</code> from the previous response,
    /// 			which is the ID of the first reusable delegation set that Amazon Route 53 will return if you submit another request.</p>
    /// 		       <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more reusable delegation sets to get.</p>
    public let marker: Swift.String?
    /// <p>The number of reusable delegation sets that you want Amazon Route 53 to return in the response to this request. If you specify a value
    /// 			greater than 100, Route 53 returns only the first 100 reusable delegation sets.</p>
    public let maxItems: Swift.Int?

    public init (
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil
    )
    {
        self.marker = marker
        self.maxItems = maxItems
    }
}

struct ListReusableDelegationSetsInputBody: Swift.Equatable {
}

extension ListReusableDelegationSetsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListReusableDelegationSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListReusableDelegationSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListReusableDelegationSetsOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListReusableDelegationSetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListReusableDelegationSetsOutputResponse(delegationSets: \(Swift.String(describing: delegationSets)), isTruncated: \(Swift.String(describing: isTruncated)), marker: \(Swift.String(describing: marker)), maxItems: \(Swift.String(describing: maxItems)), nextMarker: \(Swift.String(describing: nextMarker)))"}
}

extension ListReusableDelegationSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListReusableDelegationSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.delegationSets = output.delegationSets
            self.isTruncated = output.isTruncated
            self.marker = output.marker
            self.maxItems = output.maxItems
            self.nextMarker = output.nextMarker
        } else {
            self.delegationSets = nil
            self.isTruncated = false
            self.marker = nil
            self.maxItems = nil
            self.nextMarker = nil
        }
    }
}

/// <p>A complex type that contains information about the reusable delegation sets that are associated with the current AWS account.</p>
public struct ListReusableDelegationSetsOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains one <code>DelegationSet</code> element for each reusable delegation set that was created
    /// 			by the current AWS account.</p>
    public let delegationSets: [Route53ClientTypes.DelegationSet]?
    /// <p>A flag that indicates whether there are more reusable delegation sets to be listed.</p>
    public let isTruncated: Swift.Bool
    /// <p>For the second and subsequent calls to <code>ListReusableDelegationSets</code>, <code>Marker</code> is the value that you specified
    /// 			for the <code>marker</code> parameter in the request that produced the current response.</p>
    public let marker: Swift.String?
    /// <p>The value that you specified for the <code>maxitems</code> parameter in the call to <code>ListReusableDelegationSets</code> that
    /// 			produced the current response.</p>
    public let maxItems: Swift.Int?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, the value of <code>NextMarker</code> identifies the next reusable delegation set
    /// 			that Amazon Route 53 will return if you submit another <code>ListReusableDelegationSets</code> request and specify the value of <code>NextMarker</code>
    /// 			in the <code>marker</code> parameter.</p>
    public let nextMarker: Swift.String?

    public init (
        delegationSets: [Route53ClientTypes.DelegationSet]? = nil,
        isTruncated: Swift.Bool = false,
        marker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        nextMarker: Swift.String? = nil
    )
    {
        self.delegationSets = delegationSets
        self.isTruncated = isTruncated
        self.marker = marker
        self.maxItems = maxItems
        self.nextMarker = nextMarker
    }
}

struct ListReusableDelegationSetsOutputResponseBody: Swift.Equatable {
    public let delegationSets: [Route53ClientTypes.DelegationSet]?
    public let marker: Swift.String?
    public let isTruncated: Swift.Bool
    public let nextMarker: Swift.String?
    public let maxItems: Swift.Int?
}

extension ListReusableDelegationSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delegationSets = "DelegationSets"
        case isTruncated = "IsTruncated"
        case marker = "Marker"
        case maxItems = "MaxItems"
        case nextMarker = "NextMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.delegationSets) {
            struct KeyVal0{struct DelegationSet{}}
            let delegationSetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.DelegationSet>.CodingKeys.self, forKey: .delegationSets)
            if let delegationSetsWrappedContainer = delegationSetsWrappedContainer {
                let delegationSetsContainer = try delegationSetsWrappedContainer.decodeIfPresent([Route53ClientTypes.DelegationSet].self, forKey: .member)
                var delegationSetsBuffer:[Route53ClientTypes.DelegationSet]? = nil
                if let delegationSetsContainer = delegationSetsContainer {
                    delegationSetsBuffer = [Route53ClientTypes.DelegationSet]()
                    for structureContainer0 in delegationSetsContainer {
                        delegationSetsBuffer?.append(structureContainer0)
                    }
                }
                delegationSets = delegationSetsBuffer
            } else {
                delegationSets = []
            }
        } else {
            delegationSets = nil
        }
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let nextMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMarker)
        nextMarker = nextMarkerDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

/// <p>A complex type containing information about a request for a list of the tags that are associated with an individual resource.</p>
public struct ListTagsForResourceInput: Swift.Equatable {
    /// <p>The ID of the resource for which you want to retrieve tags.</p>
    public let resourceId: Swift.String?
    /// <p>The type of the resource.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>The resource type for health checks is <code>healthcheck</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>The resource type for hosted zones is <code>hostedzone</code>.</p>
    ///             </li>
    ///          </ul>
    public let resourceType: Route53ClientTypes.TagResourceType?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: Route53ClientTypes.TagResourceType? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHealthCheck" : self = .noSuchHealthCheck(try NoSuchHealthCheck(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PriorRequestNotComplete" : self = .priorRequestNotComplete(try PriorRequestNotComplete(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchHealthCheck(NoSuchHealthCheck)
    case noSuchHostedZone(NoSuchHostedZone)
    case priorRequestNotComplete(PriorRequestNotComplete)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(resourceTagSet: \(Swift.String(describing: resourceTagSet)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceTagSet = output.resourceTagSet
        } else {
            self.resourceTagSet = nil
        }
    }
}

/// <p>A complex type that contains information about the health checks or hosted zones for which you want to list tags.</p>
public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// <p>A <code>ResourceTagSet</code> containing tags associated with the specified resource.</p>
    public let resourceTagSet: Route53ClientTypes.ResourceTagSet?

    public init (
        resourceTagSet: Route53ClientTypes.ResourceTagSet? = nil
    )
    {
        self.resourceTagSet = resourceTagSet
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let resourceTagSet: Route53ClientTypes.ResourceTagSet?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceTagSet = "ResourceTagSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTagSetDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ResourceTagSet.self, forKey: .resourceTagSet)
        resourceTagSet = resourceTagSetDecoded
    }
}

public struct ListTagsForResourcesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourcesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourcesOutputError>
}

extension ListTagsForResourcesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourcesInput(resourceIds: \(Swift.String(describing: resourceIds)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ListTagsForResourcesInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension ListTagsForResourcesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceIds = "ResourceIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIds"))
            for tagresourceid0 in resourceIds {
                try resourceIdsContainer.encode(tagresourceid0, forKey: ClientRuntime.Key("ResourceId"))
            }
        }
    }
}

public struct ListTagsForResourcesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourcesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourcesOutputError>
}

public struct ListTagsForResourcesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourcesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourcesOutputError>
}

/// <p>A complex type that contains information about the health checks or hosted zones for which you want to list tags.</p>
public struct ListTagsForResourcesInput: Swift.Equatable {
    /// <p>A complex type that contains the ResourceId element for each resource for which you want to get a list of tags.</p>
    public let resourceIds: [Swift.String]?
    /// <p>The type of the resources.</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>The resource type for health checks is <code>healthcheck</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>The resource type for hosted zones is <code>hostedzone</code>.</p>
    ///             </li>
    ///          </ul>
    public let resourceType: Route53ClientTypes.TagResourceType?

    public init (
        resourceIds: [Swift.String]? = nil,
        resourceType: Route53ClientTypes.TagResourceType? = nil
    )
    {
        self.resourceIds = resourceIds
        self.resourceType = resourceType
    }
}

struct ListTagsForResourcesInputBody: Swift.Equatable {
    public let resourceIds: [Swift.String]?
}

extension ListTagsForResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceIds = "ResourceIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.resourceIds) {
            struct KeyVal0{struct ResourceId{}}
            let resourceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ResourceId>.CodingKeys.self, forKey: .resourceIds)
            if let resourceIdsWrappedContainer = resourceIdsWrappedContainer {
                let resourceIdsContainer = try resourceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceIdsBuffer:[Swift.String]? = nil
                if let resourceIdsContainer = resourceIdsContainer {
                    resourceIdsBuffer = [Swift.String]()
                    for stringContainer0 in resourceIdsContainer {
                        resourceIdsBuffer?.append(stringContainer0)
                    }
                }
                resourceIds = resourceIdsBuffer
            } else {
                resourceIds = []
            }
        } else {
            resourceIds = nil
        }
    }
}

extension ListTagsForResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTagsForResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHealthCheck" : self = .noSuchHealthCheck(try NoSuchHealthCheck(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PriorRequestNotComplete" : self = .priorRequestNotComplete(try PriorRequestNotComplete(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourcesOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchHealthCheck(NoSuchHealthCheck)
    case noSuchHostedZone(NoSuchHostedZone)
    case priorRequestNotComplete(PriorRequestNotComplete)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourcesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourcesOutputResponse(resourceTagSets: \(Swift.String(describing: resourceTagSets)))"}
}

extension ListTagsForResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceTagSets = output.resourceTagSets
        } else {
            self.resourceTagSets = nil
        }
    }
}

/// <p>A complex type containing tags for the specified resources.</p>
public struct ListTagsForResourcesOutputResponse: Swift.Equatable {
    /// <p>A list of <code>ResourceTagSet</code>s containing tags associated with the specified resources.</p>
    public let resourceTagSets: [Route53ClientTypes.ResourceTagSet]?

    public init (
        resourceTagSets: [Route53ClientTypes.ResourceTagSet]? = nil
    )
    {
        self.resourceTagSets = resourceTagSets
    }
}

struct ListTagsForResourcesOutputResponseBody: Swift.Equatable {
    public let resourceTagSets: [Route53ClientTypes.ResourceTagSet]?
}

extension ListTagsForResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceTagSets = "ResourceTagSets"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.resourceTagSets) {
            struct KeyVal0{struct ResourceTagSet{}}
            let resourceTagSetsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ResourceTagSet>.CodingKeys.self, forKey: .resourceTagSets)
            if let resourceTagSetsWrappedContainer = resourceTagSetsWrappedContainer {
                let resourceTagSetsContainer = try resourceTagSetsWrappedContainer.decodeIfPresent([Route53ClientTypes.ResourceTagSet].self, forKey: .member)
                var resourceTagSetsBuffer:[Route53ClientTypes.ResourceTagSet]? = nil
                if let resourceTagSetsContainer = resourceTagSetsContainer {
                    resourceTagSetsBuffer = [Route53ClientTypes.ResourceTagSet]()
                    for structureContainer0 in resourceTagSetsContainer {
                        resourceTagSetsBuffer?.append(structureContainer0)
                    }
                }
                resourceTagSets = resourceTagSetsBuffer
            } else {
                resourceTagSets = []
            }
        } else {
            resourceTagSets = nil
        }
    }
}

extension ListTrafficPoliciesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTrafficPoliciesInput(maxItems: \(Swift.String(describing: maxItems)), trafficPolicyIdMarker: \(Swift.String(describing: trafficPolicyIdMarker)))"}
}

extension ListTrafficPoliciesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTrafficPoliciesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTrafficPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTrafficPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTrafficPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTrafficPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTrafficPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTrafficPoliciesOutputError>
}

public struct ListTrafficPoliciesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTrafficPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTrafficPoliciesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTrafficPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let trafficPolicyIdMarker = input.operationInput.trafficPolicyIdMarker {
            let trafficPolicyIdMarkerQueryItem = ClientRuntime.URLQueryItem(name: "trafficpolicyid".urlPercentEncoding(), value: Swift.String(trafficPolicyIdMarker).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyIdMarkerQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTrafficPoliciesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTrafficPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTrafficPoliciesOutputError>
}

/// <p>A complex type that contains the information about the request to list the traffic policies that are associated
/// 			with the current AWS account.</p>
public struct ListTrafficPoliciesInput: Swift.Equatable {
    /// <p>(Optional) The maximum number of traffic policies that you want Amazon Route 53 to return in response to this request. If you have more than
    /// 			<code>MaxItems</code> traffic policies, the value of <code>IsTruncated</code> in the response is <code>true</code>, and the
    /// 			value of <code>TrafficPolicyIdMarker</code> is the ID of the first traffic policy that Route 53 will return if you submit
    /// 			another request.</p>
    public let maxItems: Swift.Int?
    /// <p>(Conditional) For your first request to <code>ListTrafficPolicies</code>, don't include the <code>TrafficPolicyIdMarker</code> parameter.</p>
    /// 		       <p>If you have more traffic policies than the value of <code>MaxItems</code>, <code>ListTrafficPolicies</code> returns only the first
    /// 			<code>MaxItems</code> traffic policies. To get the next group of policies, submit another request to <code>ListTrafficPolicies</code>.
    /// 			For the value of <code>TrafficPolicyIdMarker</code>, specify the value of <code>TrafficPolicyIdMarker</code> that was returned in the
    /// 			previous response.</p>
    public let trafficPolicyIdMarker: Swift.String?

    public init (
        maxItems: Swift.Int? = nil,
        trafficPolicyIdMarker: Swift.String? = nil
    )
    {
        self.maxItems = maxItems
        self.trafficPolicyIdMarker = trafficPolicyIdMarker
    }
}

struct ListTrafficPoliciesInputBody: Swift.Equatable {
}

extension ListTrafficPoliciesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTrafficPoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTrafficPoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTrafficPoliciesOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTrafficPoliciesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTrafficPoliciesOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), maxItems: \(Swift.String(describing: maxItems)), trafficPolicyIdMarker: \(Swift.String(describing: trafficPolicyIdMarker)), trafficPolicySummaries: \(Swift.String(describing: trafficPolicySummaries)))"}
}

extension ListTrafficPoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTrafficPoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.maxItems = output.maxItems
            self.trafficPolicyIdMarker = output.trafficPolicyIdMarker
            self.trafficPolicySummaries = output.trafficPolicySummaries
        } else {
            self.isTruncated = false
            self.maxItems = nil
            self.trafficPolicyIdMarker = nil
            self.trafficPolicySummaries = nil
        }
    }
}

/// <p>A complex type that contains the response information for the request.</p>
public struct ListTrafficPoliciesOutputResponse: Swift.Equatable {
    /// <p>A flag that indicates whether there are more traffic policies to be listed. If the response was truncated, you can get the next group of
    /// 			traffic policies by submitting another <code>ListTrafficPolicies</code> request and specifying the value of <code>TrafficPolicyIdMarker</code>
    /// 			in the <code>TrafficPolicyIdMarker</code> request parameter.</p>
    public let isTruncated: Swift.Bool
    /// <p>The value that you specified for the <code>MaxItems</code> parameter in the <code>ListTrafficPolicies</code> request that produced
    /// 			the current response.</p>
    public let maxItems: Swift.Int?
    /// <p>If the value of <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyIdMarker</code> is the ID of the first traffic policy
    /// 			in the next group of <code>MaxItems</code> traffic policies.</p>
    public let trafficPolicyIdMarker: Swift.String?
    /// <p>A list that contains one <code>TrafficPolicySummary</code> element for each traffic policy that was created by the current AWS account.</p>
    public let trafficPolicySummaries: [Route53ClientTypes.TrafficPolicySummary]?

    public init (
        isTruncated: Swift.Bool = false,
        maxItems: Swift.Int? = nil,
        trafficPolicyIdMarker: Swift.String? = nil,
        trafficPolicySummaries: [Route53ClientTypes.TrafficPolicySummary]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.maxItems = maxItems
        self.trafficPolicyIdMarker = trafficPolicyIdMarker
        self.trafficPolicySummaries = trafficPolicySummaries
    }
}

struct ListTrafficPoliciesOutputResponseBody: Swift.Equatable {
    public let trafficPolicySummaries: [Route53ClientTypes.TrafficPolicySummary]?
    public let isTruncated: Swift.Bool
    public let trafficPolicyIdMarker: Swift.String?
    public let maxItems: Swift.Int?
}

extension ListTrafficPoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case trafficPolicyIdMarker = "TrafficPolicyIdMarker"
        case trafficPolicySummaries = "TrafficPolicySummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficPolicySummaries) {
            struct KeyVal0{struct TrafficPolicySummary{}}
            let trafficPolicySummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TrafficPolicySummary>.CodingKeys.self, forKey: .trafficPolicySummaries)
            if let trafficPolicySummariesWrappedContainer = trafficPolicySummariesWrappedContainer {
                let trafficPolicySummariesContainer = try trafficPolicySummariesWrappedContainer.decodeIfPresent([Route53ClientTypes.TrafficPolicySummary].self, forKey: .member)
                var trafficPolicySummariesBuffer:[Route53ClientTypes.TrafficPolicySummary]? = nil
                if let trafficPolicySummariesContainer = trafficPolicySummariesContainer {
                    trafficPolicySummariesBuffer = [Route53ClientTypes.TrafficPolicySummary]()
                    for structureContainer0 in trafficPolicySummariesContainer {
                        trafficPolicySummariesBuffer?.append(structureContainer0)
                    }
                }
                trafficPolicySummaries = trafficPolicySummariesBuffer
            } else {
                trafficPolicySummaries = []
            }
        } else {
            trafficPolicySummaries = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let trafficPolicyIdMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficPolicyIdMarker)
        trafficPolicyIdMarker = trafficPolicyIdMarkerDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListTrafficPolicyInstancesByHostedZoneInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTrafficPolicyInstancesByHostedZoneInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)), maxItems: \(Swift.String(describing: maxItems)), trafficPolicyInstanceNameMarker: \(Swift.String(describing: trafficPolicyInstanceNameMarker)), trafficPolicyInstanceTypeMarker: \(Swift.String(describing: trafficPolicyInstanceTypeMarker)))"}
}

extension ListTrafficPolicyInstancesByHostedZoneInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTrafficPolicyInstancesByHostedZoneInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTrafficPolicyInstancesByHostedZoneInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesByHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTrafficPolicyInstancesByHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesByHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTrafficPolicyInstancesByHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTrafficPolicyInstancesByHostedZoneOutputError>
}

public struct ListTrafficPolicyInstancesByHostedZoneInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTrafficPolicyInstancesByHostedZoneInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesByHostedZoneInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTrafficPolicyInstancesByHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let trafficPolicyInstanceNameMarker = input.operationInput.trafficPolicyInstanceNameMarker {
            let trafficPolicyInstanceNameMarkerQueryItem = ClientRuntime.URLQueryItem(name: "trafficpolicyinstancename".urlPercentEncoding(), value: Swift.String(trafficPolicyInstanceNameMarker).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyInstanceNameMarkerQueryItem)
        }
        if let hostedZoneId = input.operationInput.hostedZoneId {
            let hostedZoneIdQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(hostedZoneId).urlPercentEncoding())
            input.builder.withQueryItem(hostedZoneIdQueryItem)
        }
        if let trafficPolicyInstanceTypeMarker = input.operationInput.trafficPolicyInstanceTypeMarker {
            let trafficPolicyInstanceTypeMarkerQueryItem = ClientRuntime.URLQueryItem(name: "trafficpolicyinstancetype".urlPercentEncoding(), value: Swift.String(trafficPolicyInstanceTypeMarker.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyInstanceTypeMarkerQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesByHostedZoneInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTrafficPolicyInstancesByHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTrafficPolicyInstancesByHostedZoneOutputError>
}

/// <p>A request for the traffic policy instances that you created in a specified hosted zone.</p>
public struct ListTrafficPolicyInstancesByHostedZoneInput: Swift.Equatable {
    /// <p>The ID of the hosted zone that you want to list traffic policy instances for.</p>
    public let hostedZoneId: Swift.String?
    /// <p>The maximum number of traffic policy instances to be included in the response body for this request. If you have more than
    /// 			<code>MaxItems</code> traffic policy instances, the value of the <code>IsTruncated</code> element in the response is <code>true</code>,
    /// 			and the values of <code>HostedZoneIdMarker</code>, <code>TrafficPolicyInstanceNameMarker</code>, and <code>TrafficPolicyInstanceTypeMarker</code>
    /// 			represent the first traffic policy instance that Amazon Route 53 will return if you submit another request.</p>
    public let maxItems: Swift.Int?
    /// <p>If the value of <code>IsTruncated</code> in the previous response is true, you have more traffic policy instances.
    /// 			To get more traffic policy instances, submit another <code>ListTrafficPolicyInstances</code> request. For the value of <code>trafficpolicyinstancename</code>,
    /// 			specify the value of <code>TrafficPolicyInstanceNameMarker</code> from the previous response, which is the name of the first traffic policy instance
    /// 			in the next group of traffic policy instances.</p>
    /// 		       <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more traffic policy instances to get.</p>
    public let trafficPolicyInstanceNameMarker: Swift.String?
    /// <p>If the value of <code>IsTruncated</code> in the previous response is true, you have more traffic policy instances.
    /// 			To get more traffic policy instances, submit another <code>ListTrafficPolicyInstances</code> request. For the value of <code>trafficpolicyinstancetype</code>,
    /// 			specify the value of <code>TrafficPolicyInstanceTypeMarker</code> from the previous response, which is the type of the first traffic policy instance
    /// 			in the next group of traffic policy instances.</p>
    /// 		       <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more traffic policy instances to get.</p>
    public let trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType?

    public init (
        hostedZoneId: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        trafficPolicyInstanceNameMarker: Swift.String? = nil,
        trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.maxItems = maxItems
        self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
        self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
    }
}

struct ListTrafficPolicyInstancesByHostedZoneInputBody: Swift.Equatable {
}

extension ListTrafficPolicyInstancesByHostedZoneInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTrafficPolicyInstancesByHostedZoneOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTrafficPolicyInstancesByHostedZoneOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicyInstance" : self = .noSuchTrafficPolicyInstance(try NoSuchTrafficPolicyInstance(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTrafficPolicyInstancesByHostedZoneOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchHostedZone(NoSuchHostedZone)
    case noSuchTrafficPolicyInstance(NoSuchTrafficPolicyInstance)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTrafficPolicyInstancesByHostedZoneOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTrafficPolicyInstancesByHostedZoneOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), maxItems: \(Swift.String(describing: maxItems)), trafficPolicyInstanceNameMarker: \(Swift.String(describing: trafficPolicyInstanceNameMarker)), trafficPolicyInstanceTypeMarker: \(Swift.String(describing: trafficPolicyInstanceTypeMarker)), trafficPolicyInstances: \(Swift.String(describing: trafficPolicyInstances)))"}
}

extension ListTrafficPolicyInstancesByHostedZoneOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTrafficPolicyInstancesByHostedZoneOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.maxItems = output.maxItems
            self.trafficPolicyInstanceNameMarker = output.trafficPolicyInstanceNameMarker
            self.trafficPolicyInstanceTypeMarker = output.trafficPolicyInstanceTypeMarker
            self.trafficPolicyInstances = output.trafficPolicyInstances
        } else {
            self.isTruncated = false
            self.maxItems = nil
            self.trafficPolicyInstanceNameMarker = nil
            self.trafficPolicyInstanceTypeMarker = nil
            self.trafficPolicyInstances = nil
        }
    }
}

/// <p>A complex type that contains the response information for the request.</p>
public struct ListTrafficPolicyInstancesByHostedZoneOutputResponse: Swift.Equatable {
    /// <p>A flag that indicates whether there are more traffic policy instances to be listed. If the response was truncated, you can get the
    /// 			next group of traffic policy instances by submitting another <code>ListTrafficPolicyInstancesByHostedZone</code> request and specifying
    /// 			the values of <code>HostedZoneIdMarker</code>, <code>TrafficPolicyInstanceNameMarker</code>, and <code>TrafficPolicyInstanceTypeMarker</code>
    /// 			in the corresponding request parameters.</p>
    public let isTruncated: Swift.Bool
    /// <p>The value that you specified for the <code>MaxItems</code> parameter in the <code>ListTrafficPolicyInstancesByHostedZone</code> request
    /// 			that produced the current response.</p>
    public let maxItems: Swift.Int?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyInstanceNameMarker</code> is the name of the first traffic policy
    /// 			instance in the next group of traffic policy instances.</p>
    public let trafficPolicyInstanceNameMarker: Swift.String?
    /// <p>If <code>IsTruncated</code> is true, <code>TrafficPolicyInstanceTypeMarker</code> is the DNS type of the resource record sets that are
    /// 			associated with the first traffic policy instance in the next group of traffic policy instances.</p>
    public let trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType?
    /// <p>A list that contains one <code>TrafficPolicyInstance</code> element for each traffic policy instance that matches the elements in the request. </p>
    public let trafficPolicyInstances: [Route53ClientTypes.TrafficPolicyInstance]?

    public init (
        isTruncated: Swift.Bool = false,
        maxItems: Swift.Int? = nil,
        trafficPolicyInstanceNameMarker: Swift.String? = nil,
        trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType? = nil,
        trafficPolicyInstances: [Route53ClientTypes.TrafficPolicyInstance]? = nil
    )
    {
        self.isTruncated = isTruncated
        self.maxItems = maxItems
        self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
        self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
        self.trafficPolicyInstances = trafficPolicyInstances
    }
}

struct ListTrafficPolicyInstancesByHostedZoneOutputResponseBody: Swift.Equatable {
    public let trafficPolicyInstances: [Route53ClientTypes.TrafficPolicyInstance]?
    public let trafficPolicyInstanceNameMarker: Swift.String?
    public let trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType?
    public let isTruncated: Swift.Bool
    public let maxItems: Swift.Int?
}

extension ListTrafficPolicyInstancesByHostedZoneOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case trafficPolicyInstanceNameMarker = "TrafficPolicyInstanceNameMarker"
        case trafficPolicyInstanceTypeMarker = "TrafficPolicyInstanceTypeMarker"
        case trafficPolicyInstances = "TrafficPolicyInstances"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficPolicyInstances) {
            struct KeyVal0{struct TrafficPolicyInstance{}}
            let trafficPolicyInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TrafficPolicyInstance>.CodingKeys.self, forKey: .trafficPolicyInstances)
            if let trafficPolicyInstancesWrappedContainer = trafficPolicyInstancesWrappedContainer {
                let trafficPolicyInstancesContainer = try trafficPolicyInstancesWrappedContainer.decodeIfPresent([Route53ClientTypes.TrafficPolicyInstance].self, forKey: .member)
                var trafficPolicyInstancesBuffer:[Route53ClientTypes.TrafficPolicyInstance]? = nil
                if let trafficPolicyInstancesContainer = trafficPolicyInstancesContainer {
                    trafficPolicyInstancesBuffer = [Route53ClientTypes.TrafficPolicyInstance]()
                    for structureContainer0 in trafficPolicyInstancesContainer {
                        trafficPolicyInstancesBuffer?.append(structureContainer0)
                    }
                }
                trafficPolicyInstances = trafficPolicyInstancesBuffer
            } else {
                trafficPolicyInstances = []
            }
        } else {
            trafficPolicyInstances = nil
        }
        let trafficPolicyInstanceNameMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficPolicyInstanceNameMarker)
        trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarkerDecoded
        let trafficPolicyInstanceTypeMarkerDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .trafficPolicyInstanceTypeMarker)
        trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarkerDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListTrafficPolicyInstancesByPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTrafficPolicyInstancesByPolicyInput(hostedZoneIdMarker: \(Swift.String(describing: hostedZoneIdMarker)), maxItems: \(Swift.String(describing: maxItems)), trafficPolicyId: \(Swift.String(describing: trafficPolicyId)), trafficPolicyInstanceNameMarker: \(Swift.String(describing: trafficPolicyInstanceNameMarker)), trafficPolicyInstanceTypeMarker: \(Swift.String(describing: trafficPolicyInstanceTypeMarker)), trafficPolicyVersion: \(Swift.String(describing: trafficPolicyVersion)))"}
}

extension ListTrafficPolicyInstancesByPolicyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTrafficPolicyInstancesByPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTrafficPolicyInstancesByPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesByPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTrafficPolicyInstancesByPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesByPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTrafficPolicyInstancesByPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTrafficPolicyInstancesByPolicyOutputError>
}

public struct ListTrafficPolicyInstancesByPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTrafficPolicyInstancesByPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesByPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTrafficPolicyInstancesByPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let trafficPolicyInstanceNameMarker = input.operationInput.trafficPolicyInstanceNameMarker {
            let trafficPolicyInstanceNameMarkerQueryItem = ClientRuntime.URLQueryItem(name: "trafficpolicyinstancename".urlPercentEncoding(), value: Swift.String(trafficPolicyInstanceNameMarker).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyInstanceNameMarkerQueryItem)
        }
        if let trafficPolicyId = input.operationInput.trafficPolicyId {
            let trafficPolicyIdQueryItem = ClientRuntime.URLQueryItem(name: "id".urlPercentEncoding(), value: Swift.String(trafficPolicyId).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyIdQueryItem)
        }
        if let trafficPolicyInstanceTypeMarker = input.operationInput.trafficPolicyInstanceTypeMarker {
            let trafficPolicyInstanceTypeMarkerQueryItem = ClientRuntime.URLQueryItem(name: "trafficpolicyinstancetype".urlPercentEncoding(), value: Swift.String(trafficPolicyInstanceTypeMarker.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyInstanceTypeMarkerQueryItem)
        }
        if let hostedZoneIdMarker = input.operationInput.hostedZoneIdMarker {
            let hostedZoneIdMarkerQueryItem = ClientRuntime.URLQueryItem(name: "hostedzoneid".urlPercentEncoding(), value: Swift.String(hostedZoneIdMarker).urlPercentEncoding())
            input.builder.withQueryItem(hostedZoneIdMarkerQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        if let trafficPolicyVersion = input.operationInput.trafficPolicyVersion {
            let trafficPolicyVersionQueryItem = ClientRuntime.URLQueryItem(name: "version".urlPercentEncoding(), value: Swift.String(trafficPolicyVersion).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyVersionQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesByPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTrafficPolicyInstancesByPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTrafficPolicyInstancesByPolicyOutputError>
}

/// <p>A complex type that contains the information about the request to list your traffic policy instances.</p>
public struct ListTrafficPolicyInstancesByPolicyInput: Swift.Equatable {
    /// <p>If the value of <code>IsTruncated</code> in the previous response was <code>true</code>, you have more traffic policy instances.
    /// 			To get more traffic policy instances, submit another <code>ListTrafficPolicyInstancesByPolicy</code> request. </p>
    /// 		       <p>For the value of <code>hostedzoneid</code>, specify the value of <code>HostedZoneIdMarker</code> from the previous response,
    /// 			which is the hosted zone ID of the first traffic policy instance that Amazon Route 53 will return if you submit another request.</p>
    /// 		       <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more traffic policy instances to get.</p>
    public let hostedZoneIdMarker: Swift.String?
    /// <p>The maximum number of traffic policy instances to be included in the response body for this request. If you have more than
    /// 			<code>MaxItems</code> traffic policy instances, the value of the <code>IsTruncated</code> element in the response is <code>true</code>,
    /// 			and the values of <code>HostedZoneIdMarker</code>, <code>TrafficPolicyInstanceNameMarker</code>, and <code>TrafficPolicyInstanceTypeMarker</code>
    /// 			represent the first traffic policy instance that Amazon Route 53 will return if you submit another request.</p>
    public let maxItems: Swift.Int?
    /// <p>The ID of the traffic policy for which you want to list traffic policy instances.</p>
    public let trafficPolicyId: Swift.String?
    /// <p>If the value of <code>IsTruncated</code> in the previous response was <code>true</code>, you have more traffic policy instances.
    /// 			To get more traffic policy instances, submit another <code>ListTrafficPolicyInstancesByPolicy</code> request.</p>
    /// 		       <p>For the value of <code>trafficpolicyinstancename</code>, specify the value of <code>TrafficPolicyInstanceNameMarker</code>
    /// 			from the previous response, which is the name of the first traffic policy instance that Amazon Route 53 will return if you submit another request.</p>
    /// 		       <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more traffic policy instances to get.</p>
    public let trafficPolicyInstanceNameMarker: Swift.String?
    /// <p>If the value of <code>IsTruncated</code> in the previous response was <code>true</code>, you have more traffic policy instances.
    /// 			To get more traffic policy instances, submit another <code>ListTrafficPolicyInstancesByPolicy</code> request.</p>
    /// 		       <p>For the value of <code>trafficpolicyinstancetype</code>, specify the value of <code>TrafficPolicyInstanceTypeMarker</code>
    /// 			from the previous response, which is the name of the first traffic policy instance that Amazon Route 53 will return if you submit another request.</p>
    /// 		       <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more traffic policy instances to get.</p>
    public let trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType?
    /// <p>The version of the traffic policy for which you want to list traffic policy instances. The version must be associated with the
    /// 			traffic policy that is specified by <code>TrafficPolicyId</code>.</p>
    public let trafficPolicyVersion: Swift.Int?

    public init (
        hostedZoneIdMarker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        trafficPolicyId: Swift.String? = nil,
        trafficPolicyInstanceNameMarker: Swift.String? = nil,
        trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType? = nil,
        trafficPolicyVersion: Swift.Int? = nil
    )
    {
        self.hostedZoneIdMarker = hostedZoneIdMarker
        self.maxItems = maxItems
        self.trafficPolicyId = trafficPolicyId
        self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
        self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
        self.trafficPolicyVersion = trafficPolicyVersion
    }
}

struct ListTrafficPolicyInstancesByPolicyInputBody: Swift.Equatable {
}

extension ListTrafficPolicyInstancesByPolicyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTrafficPolicyInstancesByPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTrafficPolicyInstancesByPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicy" : self = .noSuchTrafficPolicy(try NoSuchTrafficPolicy(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicyInstance" : self = .noSuchTrafficPolicyInstance(try NoSuchTrafficPolicyInstance(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTrafficPolicyInstancesByPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchTrafficPolicy(NoSuchTrafficPolicy)
    case noSuchTrafficPolicyInstance(NoSuchTrafficPolicyInstance)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTrafficPolicyInstancesByPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTrafficPolicyInstancesByPolicyOutputResponse(hostedZoneIdMarker: \(Swift.String(describing: hostedZoneIdMarker)), isTruncated: \(Swift.String(describing: isTruncated)), maxItems: \(Swift.String(describing: maxItems)), trafficPolicyInstanceNameMarker: \(Swift.String(describing: trafficPolicyInstanceNameMarker)), trafficPolicyInstanceTypeMarker: \(Swift.String(describing: trafficPolicyInstanceTypeMarker)), trafficPolicyInstances: \(Swift.String(describing: trafficPolicyInstances)))"}
}

extension ListTrafficPolicyInstancesByPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTrafficPolicyInstancesByPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hostedZoneIdMarker = output.hostedZoneIdMarker
            self.isTruncated = output.isTruncated
            self.maxItems = output.maxItems
            self.trafficPolicyInstanceNameMarker = output.trafficPolicyInstanceNameMarker
            self.trafficPolicyInstanceTypeMarker = output.trafficPolicyInstanceTypeMarker
            self.trafficPolicyInstances = output.trafficPolicyInstances
        } else {
            self.hostedZoneIdMarker = nil
            self.isTruncated = false
            self.maxItems = nil
            self.trafficPolicyInstanceNameMarker = nil
            self.trafficPolicyInstanceTypeMarker = nil
            self.trafficPolicyInstances = nil
        }
    }
}

/// <p>A complex type that contains the response information for the request.</p>
public struct ListTrafficPolicyInstancesByPolicyOutputResponse: Swift.Equatable {
    /// <p>If <code>IsTruncated</code> is <code>true</code>, <code>HostedZoneIdMarker</code> is the ID of the hosted zone of the first
    /// 			traffic policy instance in the next group of traffic policy instances.</p>
    public let hostedZoneIdMarker: Swift.String?
    /// <p>A flag that indicates whether there are more traffic policy instances to be listed. If the response was truncated, you can get the next group of
    /// 			traffic policy instances by calling <code>ListTrafficPolicyInstancesByPolicy</code> again and specifying the values of the <code>HostedZoneIdMarker</code>,
    /// 			<code>TrafficPolicyInstanceNameMarker</code>, and <code>TrafficPolicyInstanceTypeMarker</code> elements in the corresponding request parameters.</p>
    public let isTruncated: Swift.Bool
    /// <p>The value that you specified for the <code>MaxItems</code> parameter in the call to <code>ListTrafficPolicyInstancesByPolicy</code> that produced
    /// 			the current response.</p>
    public let maxItems: Swift.Int?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyInstanceNameMarker</code> is the name of the first traffic policy instance
    /// 			in the next group of <code>MaxItems</code> traffic policy instances.</p>
    public let trafficPolicyInstanceNameMarker: Swift.String?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyInstanceTypeMarker</code> is the DNS type of the resource record sets
    /// 			that are associated with the first traffic policy instance in the next group of <code>MaxItems</code> traffic policy instances.</p>
    public let trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType?
    /// <p>A list that contains one <code>TrafficPolicyInstance</code> element for each traffic policy instance that matches the elements in the request.</p>
    public let trafficPolicyInstances: [Route53ClientTypes.TrafficPolicyInstance]?

    public init (
        hostedZoneIdMarker: Swift.String? = nil,
        isTruncated: Swift.Bool = false,
        maxItems: Swift.Int? = nil,
        trafficPolicyInstanceNameMarker: Swift.String? = nil,
        trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType? = nil,
        trafficPolicyInstances: [Route53ClientTypes.TrafficPolicyInstance]? = nil
    )
    {
        self.hostedZoneIdMarker = hostedZoneIdMarker
        self.isTruncated = isTruncated
        self.maxItems = maxItems
        self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
        self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
        self.trafficPolicyInstances = trafficPolicyInstances
    }
}

struct ListTrafficPolicyInstancesByPolicyOutputResponseBody: Swift.Equatable {
    public let trafficPolicyInstances: [Route53ClientTypes.TrafficPolicyInstance]?
    public let hostedZoneIdMarker: Swift.String?
    public let trafficPolicyInstanceNameMarker: Swift.String?
    public let trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType?
    public let isTruncated: Swift.Bool
    public let maxItems: Swift.Int?
}

extension ListTrafficPolicyInstancesByPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZoneIdMarker = "HostedZoneIdMarker"
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case trafficPolicyInstanceNameMarker = "TrafficPolicyInstanceNameMarker"
        case trafficPolicyInstanceTypeMarker = "TrafficPolicyInstanceTypeMarker"
        case trafficPolicyInstances = "TrafficPolicyInstances"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficPolicyInstances) {
            struct KeyVal0{struct TrafficPolicyInstance{}}
            let trafficPolicyInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TrafficPolicyInstance>.CodingKeys.self, forKey: .trafficPolicyInstances)
            if let trafficPolicyInstancesWrappedContainer = trafficPolicyInstancesWrappedContainer {
                let trafficPolicyInstancesContainer = try trafficPolicyInstancesWrappedContainer.decodeIfPresent([Route53ClientTypes.TrafficPolicyInstance].self, forKey: .member)
                var trafficPolicyInstancesBuffer:[Route53ClientTypes.TrafficPolicyInstance]? = nil
                if let trafficPolicyInstancesContainer = trafficPolicyInstancesContainer {
                    trafficPolicyInstancesBuffer = [Route53ClientTypes.TrafficPolicyInstance]()
                    for structureContainer0 in trafficPolicyInstancesContainer {
                        trafficPolicyInstancesBuffer?.append(structureContainer0)
                    }
                }
                trafficPolicyInstances = trafficPolicyInstancesBuffer
            } else {
                trafficPolicyInstances = []
            }
        } else {
            trafficPolicyInstances = nil
        }
        let hostedZoneIdMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneIdMarker)
        hostedZoneIdMarker = hostedZoneIdMarkerDecoded
        let trafficPolicyInstanceNameMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficPolicyInstanceNameMarker)
        trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarkerDecoded
        let trafficPolicyInstanceTypeMarkerDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .trafficPolicyInstanceTypeMarker)
        trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarkerDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListTrafficPolicyInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTrafficPolicyInstancesInput(hostedZoneIdMarker: \(Swift.String(describing: hostedZoneIdMarker)), maxItems: \(Swift.String(describing: maxItems)), trafficPolicyInstanceNameMarker: \(Swift.String(describing: trafficPolicyInstanceNameMarker)), trafficPolicyInstanceTypeMarker: \(Swift.String(describing: trafficPolicyInstanceTypeMarker)))"}
}

extension ListTrafficPolicyInstancesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTrafficPolicyInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTrafficPolicyInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTrafficPolicyInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTrafficPolicyInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTrafficPolicyInstancesOutputError>
}

public struct ListTrafficPolicyInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTrafficPolicyInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTrafficPolicyInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let trafficPolicyInstanceNameMarker = input.operationInput.trafficPolicyInstanceNameMarker {
            let trafficPolicyInstanceNameMarkerQueryItem = ClientRuntime.URLQueryItem(name: "trafficpolicyinstancename".urlPercentEncoding(), value: Swift.String(trafficPolicyInstanceNameMarker).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyInstanceNameMarkerQueryItem)
        }
        if let trafficPolicyInstanceTypeMarker = input.operationInput.trafficPolicyInstanceTypeMarker {
            let trafficPolicyInstanceTypeMarkerQueryItem = ClientRuntime.URLQueryItem(name: "trafficpolicyinstancetype".urlPercentEncoding(), value: Swift.String(trafficPolicyInstanceTypeMarker.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyInstanceTypeMarkerQueryItem)
        }
        if let hostedZoneIdMarker = input.operationInput.hostedZoneIdMarker {
            let hostedZoneIdMarkerQueryItem = ClientRuntime.URLQueryItem(name: "hostedzoneid".urlPercentEncoding(), value: Swift.String(hostedZoneIdMarker).urlPercentEncoding())
            input.builder.withQueryItem(hostedZoneIdMarkerQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTrafficPolicyInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTrafficPolicyInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTrafficPolicyInstancesOutputError>
}

/// <p>A request to get information about the traffic policy instances that you created by using the current AWS account.</p>
public struct ListTrafficPolicyInstancesInput: Swift.Equatable {
    /// <p>If the value of <code>IsTruncated</code> in the previous response was <code>true</code>, you have more traffic policy instances.
    /// 			To get more traffic policy instances, submit another <code>ListTrafficPolicyInstances</code> request. For the value of <code>HostedZoneId</code>,
    /// 			specify the value of <code>HostedZoneIdMarker</code> from the previous response, which is the hosted zone ID of the first traffic policy instance
    /// 			in the next group of traffic policy instances.</p>
    /// 		       <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more traffic policy instances to get.</p>
    public let hostedZoneIdMarker: Swift.String?
    /// <p>The maximum number of traffic policy instances that you want Amazon Route 53 to return in response to a <code>ListTrafficPolicyInstances</code> request.
    /// 			If you have more than <code>MaxItems</code> traffic policy instances, the value of the <code>IsTruncated</code> element in the response is
    /// 			<code>true</code>, and the values of <code>HostedZoneIdMarker</code>, <code>TrafficPolicyInstanceNameMarker</code>, and
    /// 			<code>TrafficPolicyInstanceTypeMarker</code> represent the first traffic policy instance in the next group of <code>MaxItems</code>
    /// 			traffic policy instances.</p>
    public let maxItems: Swift.Int?
    /// <p>If the value of <code>IsTruncated</code> in the previous response was <code>true</code>, you have more traffic policy instances.
    /// 			To get more traffic policy instances, submit another <code>ListTrafficPolicyInstances</code> request. For the value of <code>trafficpolicyinstancename</code>,
    /// 			specify the value of <code>TrafficPolicyInstanceNameMarker</code> from the previous response, which is the name of the first traffic policy instance
    /// 			in the next group of traffic policy instances.</p>
    /// 		       <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more traffic policy instances to get.</p>
    public let trafficPolicyInstanceNameMarker: Swift.String?
    /// <p>If the value of <code>IsTruncated</code> in the previous response was <code>true</code>, you have more traffic policy instances.
    /// 			To get more traffic policy instances, submit another <code>ListTrafficPolicyInstances</code> request. For the value of <code>trafficpolicyinstancetype</code>,
    /// 			specify the value of <code>TrafficPolicyInstanceTypeMarker</code> from the previous response, which is the type of the first traffic policy instance
    /// 			in the next group of traffic policy instances.</p>
    /// 		       <p>If the value of <code>IsTruncated</code> in the previous response was <code>false</code>, there are no more traffic policy instances to get.</p>
    public let trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType?

    public init (
        hostedZoneIdMarker: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        trafficPolicyInstanceNameMarker: Swift.String? = nil,
        trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType? = nil
    )
    {
        self.hostedZoneIdMarker = hostedZoneIdMarker
        self.maxItems = maxItems
        self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
        self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
    }
}

struct ListTrafficPolicyInstancesInputBody: Swift.Equatable {
}

extension ListTrafficPolicyInstancesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTrafficPolicyInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTrafficPolicyInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicyInstance" : self = .noSuchTrafficPolicyInstance(try NoSuchTrafficPolicyInstance(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTrafficPolicyInstancesOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchTrafficPolicyInstance(NoSuchTrafficPolicyInstance)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTrafficPolicyInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTrafficPolicyInstancesOutputResponse(hostedZoneIdMarker: \(Swift.String(describing: hostedZoneIdMarker)), isTruncated: \(Swift.String(describing: isTruncated)), maxItems: \(Swift.String(describing: maxItems)), trafficPolicyInstanceNameMarker: \(Swift.String(describing: trafficPolicyInstanceNameMarker)), trafficPolicyInstanceTypeMarker: \(Swift.String(describing: trafficPolicyInstanceTypeMarker)), trafficPolicyInstances: \(Swift.String(describing: trafficPolicyInstances)))"}
}

extension ListTrafficPolicyInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTrafficPolicyInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hostedZoneIdMarker = output.hostedZoneIdMarker
            self.isTruncated = output.isTruncated
            self.maxItems = output.maxItems
            self.trafficPolicyInstanceNameMarker = output.trafficPolicyInstanceNameMarker
            self.trafficPolicyInstanceTypeMarker = output.trafficPolicyInstanceTypeMarker
            self.trafficPolicyInstances = output.trafficPolicyInstances
        } else {
            self.hostedZoneIdMarker = nil
            self.isTruncated = false
            self.maxItems = nil
            self.trafficPolicyInstanceNameMarker = nil
            self.trafficPolicyInstanceTypeMarker = nil
            self.trafficPolicyInstances = nil
        }
    }
}

/// <p>A complex type that contains the response information for the request.</p>
public struct ListTrafficPolicyInstancesOutputResponse: Swift.Equatable {
    /// <p>If <code>IsTruncated</code> is <code>true</code>, <code>HostedZoneIdMarker</code> is the ID of the hosted zone of the first
    /// 			traffic policy instance that Route 53 will return if you submit another <code>ListTrafficPolicyInstances</code> request. </p>
    public let hostedZoneIdMarker: Swift.String?
    /// <p>A flag that indicates whether there are more traffic policy instances to be listed. If the response was truncated, you can get more
    /// 			traffic policy instances by calling <code>ListTrafficPolicyInstances</code> again and specifying the values of the
    /// 			<code>HostedZoneIdMarker</code>, <code>TrafficPolicyInstanceNameMarker</code>, and <code>TrafficPolicyInstanceTypeMarker</code>
    /// 			in the corresponding request parameters.</p>
    public let isTruncated: Swift.Bool
    /// <p>The value that you specified for the <code>MaxItems</code> parameter in the call to <code>ListTrafficPolicyInstances</code>
    /// 			that produced the current response.</p>
    public let maxItems: Swift.Int?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyInstanceNameMarker</code> is the name of the first traffic policy
    /// 			instance that Route 53 will return if you submit another <code>ListTrafficPolicyInstances</code> request. </p>
    public let trafficPolicyInstanceNameMarker: Swift.String?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyInstanceTypeMarker</code> is the DNS type of the resource record sets
    /// 			that are associated with the first traffic policy instance that Amazon Route 53 will return if you submit another <code>ListTrafficPolicyInstances</code> request. </p>
    public let trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType?
    /// <p>A list that contains one <code>TrafficPolicyInstance</code> element for each traffic policy instance that matches the elements
    /// 			in the request.</p>
    public let trafficPolicyInstances: [Route53ClientTypes.TrafficPolicyInstance]?

    public init (
        hostedZoneIdMarker: Swift.String? = nil,
        isTruncated: Swift.Bool = false,
        maxItems: Swift.Int? = nil,
        trafficPolicyInstanceNameMarker: Swift.String? = nil,
        trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType? = nil,
        trafficPolicyInstances: [Route53ClientTypes.TrafficPolicyInstance]? = nil
    )
    {
        self.hostedZoneIdMarker = hostedZoneIdMarker
        self.isTruncated = isTruncated
        self.maxItems = maxItems
        self.trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarker
        self.trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarker
        self.trafficPolicyInstances = trafficPolicyInstances
    }
}

struct ListTrafficPolicyInstancesOutputResponseBody: Swift.Equatable {
    public let trafficPolicyInstances: [Route53ClientTypes.TrafficPolicyInstance]?
    public let hostedZoneIdMarker: Swift.String?
    public let trafficPolicyInstanceNameMarker: Swift.String?
    public let trafficPolicyInstanceTypeMarker: Route53ClientTypes.RRType?
    public let isTruncated: Swift.Bool
    public let maxItems: Swift.Int?
}

extension ListTrafficPolicyInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZoneIdMarker = "HostedZoneIdMarker"
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case trafficPolicyInstanceNameMarker = "TrafficPolicyInstanceNameMarker"
        case trafficPolicyInstanceTypeMarker = "TrafficPolicyInstanceTypeMarker"
        case trafficPolicyInstances = "TrafficPolicyInstances"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficPolicyInstances) {
            struct KeyVal0{struct TrafficPolicyInstance{}}
            let trafficPolicyInstancesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TrafficPolicyInstance>.CodingKeys.self, forKey: .trafficPolicyInstances)
            if let trafficPolicyInstancesWrappedContainer = trafficPolicyInstancesWrappedContainer {
                let trafficPolicyInstancesContainer = try trafficPolicyInstancesWrappedContainer.decodeIfPresent([Route53ClientTypes.TrafficPolicyInstance].self, forKey: .member)
                var trafficPolicyInstancesBuffer:[Route53ClientTypes.TrafficPolicyInstance]? = nil
                if let trafficPolicyInstancesContainer = trafficPolicyInstancesContainer {
                    trafficPolicyInstancesBuffer = [Route53ClientTypes.TrafficPolicyInstance]()
                    for structureContainer0 in trafficPolicyInstancesContainer {
                        trafficPolicyInstancesBuffer?.append(structureContainer0)
                    }
                }
                trafficPolicyInstances = trafficPolicyInstancesBuffer
            } else {
                trafficPolicyInstances = []
            }
        } else {
            trafficPolicyInstances = nil
        }
        let hostedZoneIdMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneIdMarker)
        hostedZoneIdMarker = hostedZoneIdMarkerDecoded
        let trafficPolicyInstanceNameMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficPolicyInstanceNameMarker)
        trafficPolicyInstanceNameMarker = trafficPolicyInstanceNameMarkerDecoded
        let trafficPolicyInstanceTypeMarkerDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .trafficPolicyInstanceTypeMarker)
        trafficPolicyInstanceTypeMarker = trafficPolicyInstanceTypeMarkerDecoded
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListTrafficPolicyVersionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTrafficPolicyVersionsInput(id: \(Swift.String(describing: id)), maxItems: \(Swift.String(describing: maxItems)), trafficPolicyVersionMarker: \(Swift.String(describing: trafficPolicyVersionMarker)))"}
}

extension ListTrafficPolicyVersionsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTrafficPolicyVersionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTrafficPolicyVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTrafficPolicyVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTrafficPolicyVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTrafficPolicyVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTrafficPolicyVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTrafficPolicyVersionsOutputError>
}

public struct ListTrafficPolicyVersionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTrafficPolicyVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTrafficPolicyVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTrafficPolicyVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let trafficPolicyVersionMarker = input.operationInput.trafficPolicyVersionMarker {
            let trafficPolicyVersionMarkerQueryItem = ClientRuntime.URLQueryItem(name: "trafficpolicyversion".urlPercentEncoding(), value: Swift.String(trafficPolicyVersionMarker).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyVersionMarkerQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = ClientRuntime.URLQueryItem(name: "maxitems".urlPercentEncoding(), value: Swift.String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTrafficPolicyVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTrafficPolicyVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTrafficPolicyVersionsOutputError>
}

/// <p>A complex type that contains the information about the request to list your traffic
/// 			policies.</p>
public struct ListTrafficPolicyVersionsInput: Swift.Equatable {
    /// <p>Specify the value of <code>Id</code> of the traffic policy for which you want to list all versions.</p>
    public let id: Swift.String?
    /// <p>The maximum number of traffic policy versions that you want Amazon Route 53 to include in the response body for this request. If the specified
    /// 			traffic policy has more than <code>MaxItems</code> versions, the value of <code>IsTruncated</code> in the response is <code>true</code>,
    /// 			and the value of the <code>TrafficPolicyVersionMarker</code> element is the ID of the first version that Route 53 will return if you submit
    /// 			another request.</p>
    public let maxItems: Swift.Int?
    /// <p>For your first request to <code>ListTrafficPolicyVersions</code>, don't include the <code>TrafficPolicyVersionMarker</code> parameter.</p>
    /// 		       <p>If you have more traffic policy versions than the value of <code>MaxItems</code>, <code>ListTrafficPolicyVersions</code> returns only
    /// 			the first group of <code>MaxItems</code> versions. To get more traffic policy versions, submit another <code>ListTrafficPolicyVersions</code>
    /// 			request. For the value of <code>TrafficPolicyVersionMarker</code>, specify the value of <code>TrafficPolicyVersionMarker</code> in the previous
    /// 			response.</p>
    public let trafficPolicyVersionMarker: Swift.String?

    public init (
        id: Swift.String? = nil,
        maxItems: Swift.Int? = nil,
        trafficPolicyVersionMarker: Swift.String? = nil
    )
    {
        self.id = id
        self.maxItems = maxItems
        self.trafficPolicyVersionMarker = trafficPolicyVersionMarker
    }
}

struct ListTrafficPolicyVersionsInputBody: Swift.Equatable {
}

extension ListTrafficPolicyVersionsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTrafficPolicyVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTrafficPolicyVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicy" : self = .noSuchTrafficPolicy(try NoSuchTrafficPolicy(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTrafficPolicyVersionsOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchTrafficPolicy(NoSuchTrafficPolicy)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTrafficPolicyVersionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTrafficPolicyVersionsOutputResponse(isTruncated: \(Swift.String(describing: isTruncated)), maxItems: \(Swift.String(describing: maxItems)), trafficPolicies: \(Swift.String(describing: trafficPolicies)), trafficPolicyVersionMarker: \(Swift.String(describing: trafficPolicyVersionMarker)))"}
}

extension ListTrafficPolicyVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTrafficPolicyVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.isTruncated = output.isTruncated
            self.maxItems = output.maxItems
            self.trafficPolicies = output.trafficPolicies
            self.trafficPolicyVersionMarker = output.trafficPolicyVersionMarker
        } else {
            self.isTruncated = false
            self.maxItems = nil
            self.trafficPolicies = nil
            self.trafficPolicyVersionMarker = nil
        }
    }
}

/// <p>A complex type that contains the response information for the request.</p>
public struct ListTrafficPolicyVersionsOutputResponse: Swift.Equatable {
    /// <p>A flag that indicates whether there are more traffic policies to be listed. If the response was truncated, you can get the next group of
    /// 			traffic policies by submitting another <code>ListTrafficPolicyVersions</code> request and specifying the value of <code>NextMarker</code>
    /// 			in the <code>marker</code> parameter.</p>
    public let isTruncated: Swift.Bool
    /// <p>The value that you specified for the <code>maxitems</code> parameter in the <code>ListTrafficPolicyVersions</code> request that produced
    /// 			the current response.</p>
    public let maxItems: Swift.Int?
    /// <p>A list that contains one <code>TrafficPolicy</code> element for each traffic policy
    /// 			version that is associated with the specified traffic policy.</p>
    public let trafficPolicies: [Route53ClientTypes.TrafficPolicy]?
    /// <p>If <code>IsTruncated</code> is <code>true</code>, the value of <code>TrafficPolicyVersionMarker</code> identifies the first traffic policy
    /// 			that Amazon Route 53 will return if you submit another request. Call <code>ListTrafficPolicyVersions</code> again and specify the value of
    /// 			<code>TrafficPolicyVersionMarker</code> in the <code>TrafficPolicyVersionMarker</code> request parameter.</p>
    /// 		       <p>This element is present only if <code>IsTruncated</code> is <code>true</code>.</p>
    public let trafficPolicyVersionMarker: Swift.String?

    public init (
        isTruncated: Swift.Bool = false,
        maxItems: Swift.Int? = nil,
        trafficPolicies: [Route53ClientTypes.TrafficPolicy]? = nil,
        trafficPolicyVersionMarker: Swift.String? = nil
    )
    {
        self.isTruncated = isTruncated
        self.maxItems = maxItems
        self.trafficPolicies = trafficPolicies
        self.trafficPolicyVersionMarker = trafficPolicyVersionMarker
    }
}

struct ListTrafficPolicyVersionsOutputResponseBody: Swift.Equatable {
    public let trafficPolicies: [Route53ClientTypes.TrafficPolicy]?
    public let isTruncated: Swift.Bool
    public let trafficPolicyVersionMarker: Swift.String?
    public let maxItems: Swift.Int?
}

extension ListTrafficPolicyVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case isTruncated = "IsTruncated"
        case maxItems = "MaxItems"
        case trafficPolicies = "TrafficPolicies"
        case trafficPolicyVersionMarker = "TrafficPolicyVersionMarker"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.trafficPolicies) {
            struct KeyVal0{struct TrafficPolicy{}}
            let trafficPoliciesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.TrafficPolicy>.CodingKeys.self, forKey: .trafficPolicies)
            if let trafficPoliciesWrappedContainer = trafficPoliciesWrappedContainer {
                let trafficPoliciesContainer = try trafficPoliciesWrappedContainer.decodeIfPresent([Route53ClientTypes.TrafficPolicy].self, forKey: .member)
                var trafficPoliciesBuffer:[Route53ClientTypes.TrafficPolicy]? = nil
                if let trafficPoliciesContainer = trafficPoliciesContainer {
                    trafficPoliciesBuffer = [Route53ClientTypes.TrafficPolicy]()
                    for structureContainer0 in trafficPoliciesContainer {
                        trafficPoliciesBuffer?.append(structureContainer0)
                    }
                }
                trafficPolicies = trafficPoliciesBuffer
            } else {
                trafficPolicies = []
            }
        } else {
            trafficPolicies = nil
        }
        let isTruncatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isTruncated)
        isTruncated = isTruncatedDecoded
        let trafficPolicyVersionMarkerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficPolicyVersionMarker)
        trafficPolicyVersionMarker = trafficPolicyVersionMarkerDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListVPCAssociationAuthorizationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVPCAssociationAuthorizationsInput(hostedZoneId: \(Swift.String(describing: hostedZoneId)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListVPCAssociationAuthorizationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListVPCAssociationAuthorizationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVPCAssociationAuthorizationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVPCAssociationAuthorizationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVPCAssociationAuthorizationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVPCAssociationAuthorizationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVPCAssociationAuthorizationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVPCAssociationAuthorizationsOutputError>
}

public struct ListVPCAssociationAuthorizationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVPCAssociationAuthorizationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVPCAssociationAuthorizationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVPCAssociationAuthorizationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "nexttoken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if let maxResults = input.operationInput.maxResults {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "maxresults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVPCAssociationAuthorizationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVPCAssociationAuthorizationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVPCAssociationAuthorizationsOutputError>
}

/// <p>A complex type that contains information about that can be associated with your hosted zone.</p>
public struct ListVPCAssociationAuthorizationsInput: Swift.Equatable {
    /// <p>The ID of the hosted zone for which you want a list of VPCs that can be associated with the hosted zone.</p>
    public let hostedZoneId: Swift.String?
    /// <p>
    ///             <i>Optional</i>: An integer that specifies the maximum number of VPCs that you want Amazon Route 53 to return.
    /// 			If you don't specify a value for <code>MaxResults</code>, Route 53 returns up to 50 VPCs per page.</p>
    public let maxResults: Swift.Int?
    /// <p>
    ///             <i>Optional</i>: If a response includes a <code>NextToken</code> element, there are more VPCs
    /// 			that can be associated with the specified hosted zone. To get the next page of results, submit another request,
    /// 			and include the value of <code>NextToken</code> from the response in the <code>nexttoken</code> parameter
    /// 			in another <code>ListVPCAssociationAuthorizations</code> request.</p>
    public let nextToken: Swift.String?

    public init (
        hostedZoneId: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListVPCAssociationAuthorizationsInputBody: Swift.Equatable {
}

extension ListVPCAssociationAuthorizationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVPCAssociationAuthorizationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListVPCAssociationAuthorizationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPaginationToken" : self = .invalidPaginationToken(try InvalidPaginationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVPCAssociationAuthorizationsOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case invalidPaginationToken(InvalidPaginationToken)
    case noSuchHostedZone(NoSuchHostedZone)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVPCAssociationAuthorizationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVPCAssociationAuthorizationsOutputResponse(hostedZoneId: \(Swift.String(describing: hostedZoneId)), nextToken: \(Swift.String(describing: nextToken)), vPCs: \(Swift.String(describing: vPCs)))"}
}

extension ListVPCAssociationAuthorizationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListVPCAssociationAuthorizationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hostedZoneId = output.hostedZoneId
            self.nextToken = output.nextToken
            self.vPCs = output.vPCs
        } else {
            self.hostedZoneId = nil
            self.nextToken = nil
            self.vPCs = nil
        }
    }
}

/// <p>A complex type that contains the response information for the request.</p>
public struct ListVPCAssociationAuthorizationsOutputResponse: Swift.Equatable {
    /// <p>The ID of the hosted zone that you can associate the listed VPCs with.</p>
    public let hostedZoneId: Swift.String?
    /// <p>When the response includes a <code>NextToken</code> element, there are more VPCs that can be associated
    /// 			with the specified hosted zone. To get the next page of VPCs, submit another <code>ListVPCAssociationAuthorizations</code> request,
    /// 			and include the value of the <code>NextToken</code> element from the response in the <code>nexttoken</code> request parameter.</p>
    public let nextToken: Swift.String?
    /// <p>The list of VPCs that are authorized to be associated with the specified hosted zone.</p>
    public let vPCs: [Route53ClientTypes.VPC]?

    public init (
        hostedZoneId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        vPCs: [Route53ClientTypes.VPC]? = nil
    )
    {
        self.hostedZoneId = hostedZoneId
        self.nextToken = nextToken
        self.vPCs = vPCs
    }
}

struct ListVPCAssociationAuthorizationsOutputResponseBody: Swift.Equatable {
    public let hostedZoneId: Swift.String?
    public let nextToken: Swift.String?
    public let vPCs: [Route53ClientTypes.VPC]?
}

extension ListVPCAssociationAuthorizationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZoneId = "HostedZoneId"
        case nextToken = "NextToken"
        case vPCs = "VPCs"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        if containerValues.contains(.vPCs) {
            struct KeyVal0{struct VPC{}}
            let vPCsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.VPC>.CodingKeys.self, forKey: .vPCs)
            if let vPCsWrappedContainer = vPCsWrappedContainer {
                let vPCsContainer = try vPCsWrappedContainer.decodeIfPresent([Route53ClientTypes.VPC].self, forKey: .member)
                var vPCsBuffer:[Route53ClientTypes.VPC]? = nil
                if let vPCsContainer = vPCsContainer {
                    vPCsBuffer = [Route53ClientTypes.VPC]()
                    for structureContainer0 in vPCsContainer {
                        vPCsBuffer?.append(structureContainer0)
                    }
                }
                vPCs = vPCsBuffer
            } else {
                vPCs = []
            }
        } else {
            vPCs = nil
        }
    }
}

extension NoSuchChange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchChange(message: \(Swift.String(describing: message)))"}
}

extension NoSuchChange: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NoSuchChangeBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A change with the specified change ID does not exist.</p>
public struct NoSuchChange: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchChangeBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchChangeBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchCloudWatchLogsLogGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchCloudWatchLogsLogGroup(message: \(Swift.String(describing: message)))"}
}

extension NoSuchCloudWatchLogsLogGroup: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NoSuchCloudWatchLogsLogGroupBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>There is no CloudWatch Logs log group with the specified ARN.</p>
public struct NoSuchCloudWatchLogsLogGroup: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchCloudWatchLogsLogGroupBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchCloudWatchLogsLogGroupBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchDelegationSet: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchDelegationSet(message: \(Swift.String(describing: message)))"}
}

extension NoSuchDelegationSet: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NoSuchDelegationSetBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A reusable delegation set with the specified ID does not exist.</p>
public struct NoSuchDelegationSet: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchDelegationSetBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchDelegationSetBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchGeoLocation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchGeoLocation(message: \(Swift.String(describing: message)))"}
}

extension NoSuchGeoLocation: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NoSuchGeoLocationBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Amazon Route 53 doesn't support the specified geographic location. For a list of supported geolocation codes, see the
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GeoLocation.html">GeoLocation</a> data type.</p>
public struct NoSuchGeoLocation: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchGeoLocationBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchGeoLocationBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchHealthCheck: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchHealthCheck(message: \(Swift.String(describing: message)))"}
}

extension NoSuchHealthCheck: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NoSuchHealthCheckBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>No health check exists with the specified ID.</p>
public struct NoSuchHealthCheck: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchHealthCheckBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchHealthCheckBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchHostedZone: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchHostedZone(message: \(Swift.String(describing: message)))"}
}

extension NoSuchHostedZone: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NoSuchHostedZoneBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>No hosted zone exists with the ID that you specified.</p>
public struct NoSuchHostedZone: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchHostedZoneBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchHostedZoneBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchKeySigningKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchKeySigningKey(message: \(Swift.String(describing: message)))"}
}

extension NoSuchKeySigningKey: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NoSuchKeySigningKeyBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified key-signing key (KSK) doesn't exist.</p>
public struct NoSuchKeySigningKey: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchKeySigningKeyBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchKeySigningKeyBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchQueryLoggingConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchQueryLoggingConfig(message: \(Swift.String(describing: message)))"}
}

extension NoSuchQueryLoggingConfig: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NoSuchQueryLoggingConfigBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>There is no DNS query logging configuration with the specified ID.</p>
public struct NoSuchQueryLoggingConfig: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchQueryLoggingConfigBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchQueryLoggingConfigBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchTrafficPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchTrafficPolicy(message: \(Swift.String(describing: message)))"}
}

extension NoSuchTrafficPolicy: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NoSuchTrafficPolicyBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>No traffic policy exists with the specified ID.</p>
public struct NoSuchTrafficPolicy: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchTrafficPolicyBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchTrafficPolicyBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchTrafficPolicyInstance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchTrafficPolicyInstance(message: \(Swift.String(describing: message)))"}
}

extension NoSuchTrafficPolicyInstance: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NoSuchTrafficPolicyInstanceBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>No traffic policy instance exists with the specified ID.</p>
public struct NoSuchTrafficPolicyInstance: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchTrafficPolicyInstanceBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchTrafficPolicyInstanceBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NotAuthorizedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotAuthorizedException(message: \(Swift.String(describing: message)))"}
}

extension NotAuthorizedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NotAuthorizedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Associating the specified VPC with the specified hosted zone has not been authorized.</p>
public struct NotAuthorizedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotAuthorizedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NotAuthorizedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PriorRequestNotComplete: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PriorRequestNotComplete(message: \(Swift.String(describing: message)))"}
}

extension PriorRequestNotComplete: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<PriorRequestNotCompleteBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>If Amazon Route 53 can't process a request before the next request arrives, it will reject
/// 			subsequent requests for the same hosted zone and return an <code>HTTP 400 error</code>
/// 			(<code>Bad request</code>). If Route 53 returns this error repeatedly for the same request, we
/// 			recommend that you wait, in intervals of increasing duration, before you try the request
/// 			again.</p>
public struct PriorRequestNotComplete: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PriorRequestNotCompleteBody: Swift.Equatable {
    public let message: Swift.String?
}

extension PriorRequestNotCompleteBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PublicZoneVPCAssociation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PublicZoneVPCAssociation(message: \(Swift.String(describing: message)))"}
}

extension PublicZoneVPCAssociation: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<PublicZoneVPCAssociationBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You're trying to associate a VPC with a public hosted zone. Amazon Route 53 doesn't support associating a
/// 			VPC with a public hosted zone.</p>
public struct PublicZoneVPCAssociation: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PublicZoneVPCAssociationBody: Swift.Equatable {
    public let message: Swift.String?
}

extension PublicZoneVPCAssociationBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.QueryLoggingConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
        case hostedZoneId = "HostedZoneId"
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn {
            try container.encode(cloudWatchLogsLogGroupArn, forKey: ClientRuntime.Key("CloudWatchLogsLogGroupArn"))
        }
        if let hostedZoneId = hostedZoneId {
            try container.encode(hostedZoneId, forKey: ClientRuntime.Key("HostedZoneId"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let cloudWatchLogsLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogsLogGroupArn)
        cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArnDecoded
    }
}

extension Route53ClientTypes.QueryLoggingConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueryLoggingConfig(cloudWatchLogsLogGroupArn: \(Swift.String(describing: cloudWatchLogsLogGroupArn)), hostedZoneId: \(Swift.String(describing: hostedZoneId)), id: \(Swift.String(describing: id)))"}
}

extension Route53ClientTypes.QueryLoggingConfig: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains information about a configuration for DNS query logging.</p>
    public struct QueryLoggingConfig: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the CloudWatch Logs log group that Amazon Route 53 is publishing logs to.</p>
        public let cloudWatchLogsLogGroupArn: Swift.String?
        /// <p>The ID of the hosted zone that CloudWatch Logs is logging queries for. </p>
        public let hostedZoneId: Swift.String?
        /// <p>The ID for a configuration for DNS query logging.</p>
        public let id: Swift.String?

        public init (
            cloudWatchLogsLogGroupArn: Swift.String? = nil,
            hostedZoneId: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.hostedZoneId = hostedZoneId
            self.id = id
        }
    }

}

extension QueryLoggingConfigAlreadyExists: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueryLoggingConfigAlreadyExists(message: \(Swift.String(describing: message)))"}
}

extension QueryLoggingConfigAlreadyExists: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<QueryLoggingConfigAlreadyExistsBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You can create only one query logging configuration for a hosted zone, and a query logging configuration already exists
/// 			for this hosted zone.</p>
public struct QueryLoggingConfigAlreadyExists: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct QueryLoggingConfigAlreadyExistsBody: Swift.Equatable {
    public let message: Swift.String?
}

extension QueryLoggingConfigAlreadyExistsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes {
    public enum RRType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case a
        case aaaa
        case caa
        case cname
        case ds
        case mx
        case naptr
        case ns
        case ptr
        case soa
        case spf
        case srv
        case txt
        case sdkUnknown(Swift.String)

        public static var allCases: [RRType] {
            return [
                .a,
                .aaaa,
                .caa,
                .cname,
                .ds,
                .mx,
                .naptr,
                .ns,
                .ptr,
                .soa,
                .spf,
                .srv,
                .txt,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .a: return "A"
            case .aaaa: return "AAAA"
            case .caa: return "CAA"
            case .cname: return "CNAME"
            case .ds: return "DS"
            case .mx: return "MX"
            case .naptr: return "NAPTR"
            case .ns: return "NS"
            case .ptr: return "PTR"
            case .soa: return "SOA"
            case .spf: return "SPF"
            case .srv: return "SRV"
            case .txt: return "TXT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RRType(rawValue: rawValue) ?? RRType.sdkUnknown(rawValue)
        }
    }
}

extension Route53ClientTypes {
    public enum ResettableElementName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case childhealthchecks
        case fullyqualifieddomainname
        case regions
        case resourcepath
        case sdkUnknown(Swift.String)

        public static var allCases: [ResettableElementName] {
            return [
                .childhealthchecks,
                .fullyqualifieddomainname,
                .regions,
                .resourcepath,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .childhealthchecks: return "ChildHealthChecks"
            case .fullyqualifieddomainname: return "FullyQualifiedDomainName"
            case .regions: return "Regions"
            case .resourcepath: return "ResourcePath"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResettableElementName(rawValue: rawValue) ?? ResettableElementName.sdkUnknown(rawValue)
        }
    }
}

extension Route53ClientTypes.ResourceRecord: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Route53ClientTypes.ResourceRecord: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceRecord(value: \(Swift.String(describing: value)))"}
}

extension Route53ClientTypes.ResourceRecord: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>Information specific to the resource record.</p>
    /// 		       <note>
    ///             <p>If you're creating an alias resource record set, omit <code>ResourceRecord</code>.</p>
    ///          </note>
    public struct ResourceRecord: Swift.Equatable {
        /// <p>The current or new DNS record value, not to exceed 4,000 characters. In the case of a <code>DELETE</code> action,
        /// 			if the current value does not match the actual value, an error is returned. For descriptions about how to format
        /// 			<code>Value</code> for different record types, see
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html">Supported DNS Resource Record Types</a>
        /// 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
        /// 		       <p>You can specify more than one value for all record types except <code>CNAME</code> and <code>SOA</code>. </p>
        /// 		       <note>
        /// 			         <p>If you're creating an alias resource record set, omit <code>Value</code>.</p>
        /// 		       </note>
        public let value: Swift.String?

        public init (
            value: Swift.String? = nil
        )
        {
            self.value = value
        }
    }

}

extension Route53ClientTypes.ResourceRecordSet: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aliasTarget = "AliasTarget"
        case failover = "Failover"
        case geoLocation = "GeoLocation"
        case healthCheckId = "HealthCheckId"
        case multiValueAnswer = "MultiValueAnswer"
        case name = "Name"
        case region = "Region"
        case resourceRecords = "ResourceRecords"
        case setIdentifier = "SetIdentifier"
        case tTL = "TTL"
        case trafficPolicyInstanceId = "TrafficPolicyInstanceId"
        case type = "Type"
        case weight = "Weight"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let aliasTarget = aliasTarget {
            try container.encode(aliasTarget, forKey: ClientRuntime.Key("AliasTarget"))
        }
        if let failover = failover {
            try container.encode(failover, forKey: ClientRuntime.Key("Failover"))
        }
        if let geoLocation = geoLocation {
            try container.encode(geoLocation, forKey: ClientRuntime.Key("GeoLocation"))
        }
        if let healthCheckId = healthCheckId {
            try container.encode(healthCheckId, forKey: ClientRuntime.Key("HealthCheckId"))
        }
        if let multiValueAnswer = multiValueAnswer {
            try container.encode(multiValueAnswer, forKey: ClientRuntime.Key("MultiValueAnswer"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let resourceRecords = resourceRecords {
            var resourceRecordsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceRecords"))
            for resourcerecord0 in resourceRecords {
                try resourceRecordsContainer.encode(resourcerecord0, forKey: ClientRuntime.Key("ResourceRecord"))
            }
        }
        if let setIdentifier = setIdentifier {
            try container.encode(setIdentifier, forKey: ClientRuntime.Key("SetIdentifier"))
        }
        if let tTL = tTL {
            try container.encode(tTL, forKey: ClientRuntime.Key("TTL"))
        }
        if let trafficPolicyInstanceId = trafficPolicyInstanceId {
            try container.encode(trafficPolicyInstanceId, forKey: ClientRuntime.Key("TrafficPolicyInstanceId"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let weight = weight {
            try container.encode(weight, forKey: ClientRuntime.Key("Weight"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .type)
        type = typeDecoded
        let setIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .setIdentifier)
        setIdentifier = setIdentifierDecoded
        let weightDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .weight)
        weight = weightDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ResourceRecordSetRegion.self, forKey: .region)
        region = regionDecoded
        let geoLocationDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.GeoLocation.self, forKey: .geoLocation)
        geoLocation = geoLocationDecoded
        let failoverDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ResourceRecordSetFailover.self, forKey: .failover)
        failover = failoverDecoded
        let multiValueAnswerDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .multiValueAnswer)
        multiValueAnswer = multiValueAnswerDecoded
        let tTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tTL)
        tTL = tTLDecoded
        if containerValues.contains(.resourceRecords) {
            struct KeyVal0{struct ResourceRecord{}}
            let resourceRecordsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ResourceRecord>.CodingKeys.self, forKey: .resourceRecords)
            if let resourceRecordsWrappedContainer = resourceRecordsWrappedContainer {
                let resourceRecordsContainer = try resourceRecordsWrappedContainer.decodeIfPresent([Route53ClientTypes.ResourceRecord].self, forKey: .member)
                var resourceRecordsBuffer:[Route53ClientTypes.ResourceRecord]? = nil
                if let resourceRecordsContainer = resourceRecordsContainer {
                    resourceRecordsBuffer = [Route53ClientTypes.ResourceRecord]()
                    for structureContainer0 in resourceRecordsContainer {
                        resourceRecordsBuffer?.append(structureContainer0)
                    }
                }
                resourceRecords = resourceRecordsBuffer
            } else {
                resourceRecords = []
            }
        } else {
            resourceRecords = nil
        }
        let aliasTargetDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.AliasTarget.self, forKey: .aliasTarget)
        aliasTarget = aliasTargetDecoded
        let healthCheckIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckId)
        healthCheckId = healthCheckIdDecoded
        let trafficPolicyInstanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficPolicyInstanceId)
        trafficPolicyInstanceId = trafficPolicyInstanceIdDecoded
    }
}

extension Route53ClientTypes.ResourceRecordSet: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceRecordSet(aliasTarget: \(Swift.String(describing: aliasTarget)), failover: \(Swift.String(describing: failover)), geoLocation: \(Swift.String(describing: geoLocation)), healthCheckId: \(Swift.String(describing: healthCheckId)), multiValueAnswer: \(Swift.String(describing: multiValueAnswer)), name: \(Swift.String(describing: name)), region: \(Swift.String(describing: region)), resourceRecords: \(Swift.String(describing: resourceRecords)), setIdentifier: \(Swift.String(describing: setIdentifier)), tTL: \(Swift.String(describing: tTL)), trafficPolicyInstanceId: \(Swift.String(describing: trafficPolicyInstanceId)), type: \(Swift.String(describing: type)), weight: \(Swift.String(describing: weight)))"}
}

extension Route53ClientTypes.ResourceRecordSet: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>Information about the resource record set to create or delete.</p>
    public struct ResourceRecordSet: Swift.Equatable {
        /// <p>
        ///             <i>Alias resource record sets only:</i> Information about the AWS resource, such as a CloudFront distribution or an
        /// 			Amazon S3 bucket, that you want to route traffic to. </p>
        /// 		       <p>If you're creating resource records sets for a private hosted zone, note the following:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>You can't create an alias resource record set in a private hosted zone to route traffic to a CloudFront distribution.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>Creating geolocation alias resource record sets or latency alias resource record sets in a private hosted zone is unsupported.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>For information about creating failover resource record sets in a private hosted zone, see
        /// 					<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html">Configuring Failover in a Private Hosted Zone</a> in the
        /// 					<i>Amazon Route 53 Developer Guide</i>.</p>
        /// 			         </li>
        ///          </ul>
        public let aliasTarget: Route53ClientTypes.AliasTarget?
        /// <p>
        ///             <i>Failover resource record sets only:</i> To configure failover, you add the <code>Failover</code> element to
        /// 			two resource record sets. For one resource record set, you specify <code>PRIMARY</code> as the value for <code>Failover</code>; for the other
        /// 			resource record set, you specify <code>SECONDARY</code>. In addition, you include the <code>HealthCheckId</code> element and specify the
        /// 			health check that you want Amazon Route 53 to perform for each resource record set.</p>
        /// 		       <p>Except where noted, the following failover behaviors assume that you have included the <code>HealthCheckId</code> element in both
        /// 			resource record sets:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>When the primary resource record set is healthy, Route 53 responds to DNS queries with the applicable value from the
        /// 					primary resource record set regardless of the health of the secondary resource record set.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>When the primary resource record set is unhealthy and the secondary resource record set is healthy, Route 53 responds to
        /// 					DNS queries with the applicable value from the secondary resource record set.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>When the secondary resource record set is unhealthy, Route 53 responds to DNS queries with the applicable value from the
        /// 					primary resource record set regardless of the health of the primary resource record set.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>If you omit the <code>HealthCheckId</code> element for the secondary resource record set, and if the primary resource record set
        /// 					is unhealthy, Route 53 always responds to DNS queries with the applicable value from the secondary resource record set. This is true
        /// 					regardless of the health of the associated endpoint.</p>
        /// 			         </li>
        ///          </ul>
        /// 		       <p>You can't create non-failover resource record sets that have the same values for the <code>Name</code> and <code>Type</code> elements
        /// 			as failover resource record sets.</p>
        /// 		       <p>For failover alias resource record sets, you must also include the <code>EvaluateTargetHealth</code> element and set the value to true.</p>
        /// 		       <p>For more information about configuring failover for Route 53, see the following topics in the <i>Amazon Route 53 Developer Guide</i>: </p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>
        ///                   <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html">Route 53 Health Checks and DNS Failover</a>
        ///                </p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html">Configuring Failover in a Private Hosted Zone</a>
        ///                </p>
        /// 			         </li>
        ///          </ul>
        public let failover: Route53ClientTypes.ResourceRecordSetFailover?
        /// <p>
        ///             <i>Geolocation resource record sets only:</i> A complex type that lets you control how Amazon Route 53 responds to DNS queries
        /// 			based on the geographic origin of the query. For example, if you want all queries from Africa to be routed to a web server with an IP address
        /// 			of <code>192.0.2.111</code>, create a resource record set with a <code>Type</code> of <code>A</code> and a <code>ContinentCode</code> of
        /// 			<code>AF</code>.</p>
        /// 		       <note>
        /// 			         <p>Although creating geolocation and geolocation alias resource record sets in a private hosted zone is allowed,
        /// 				it's not supported.</p>
        /// 		       </note>
        /// 		       <p>If you create separate resource record sets for overlapping geographic regions (for example, one resource record set for a continent and
        /// 			one for a country on the same continent), priority goes to the smallest geographic region. This allows you to route most queries for a
        /// 			continent to one resource and to route queries for a country on that continent to a different resource.</p>
        /// 		       <p>You can't create two geolocation resource record sets that specify the same geographic location.</p>
        /// 		       <p>The value <code>*</code> in the <code>CountryCode</code> element matches all geographic locations that aren't specified in other
        /// 			geolocation resource record sets that have the same values for the <code>Name</code> and <code>Type</code> elements.</p>
        /// 		       <important>
        /// 			         <p>Geolocation works by mapping IP addresses to locations. However, some IP addresses aren't mapped to geographic locations,
        /// 				so even if you create geolocation resource record sets that cover all seven continents, Route 53 will receive some DNS queries from locations
        /// 				that it can't identify. We recommend that you create a resource record set for which the value of <code>CountryCode</code> is <code>*</code>.
        /// 				Two groups of queries are routed to the resource that you specify in this record: queries that come from locations for which you haven't
        /// 				created geolocation resource record sets and queries from IP addresses that aren't mapped to a location. If you don't create a
        /// 				<code>*</code> resource record set, Route 53 returns a "no answer" response for queries from those locations.</p>
        /// 		       </important>
        /// 		       <p>You can't create non-geolocation resource record sets that have the same values for the <code>Name</code> and <code>Type</code> elements
        /// 			as geolocation resource record sets.</p>
        public let geoLocation: Route53ClientTypes.GeoLocation?
        /// <p>If you want Amazon Route 53 to return this resource record set in response to a DNS query only when the status of a
        /// 			health check is healthy, include the <code>HealthCheckId</code> element and specify the ID of the applicable health check.</p>
        /// 		       <p>Route 53 determines whether a resource record set is healthy based on one of the following:</p>
        /// 		       <ul>
        ///             <li>
        ///                <p>By periodically sending a request to the endpoint that is specified in the health check</p>
        ///             </li>
        ///             <li>
        ///                <p>By aggregating the status of a specified group of health checks (calculated health checks)</p>
        ///             </li>
        ///             <li>
        ///                <p>By determining the current state of a CloudWatch alarm (CloudWatch metric health checks)</p>
        ///             </li>
        ///          </ul>
        ///
        /// 		       <important>
        /// 			         <p>Route 53 doesn't check the health of the endpoint that is specified in the resource record set, for example, the endpoint
        /// 				specified by the IP address in the <code>Value</code> element. When you add a <code>HealthCheckId</code> element to a
        /// 				resource record set, Route 53 checks the health of the endpoint that you specified in the health check. </p>
        /// 		       </important>
        ///
        /// 		       <p>For more information, see the following topics in the <i>Amazon Route 53 Developer Guide</i>:</p>
        /// 		       <ul>
        ///             <li>
        ///                <p>
        ///                   <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html">How
        /// 				Amazon Route 53 Determines Whether an Endpoint Is Healthy</a>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover.html">Route 53 Health Checks and DNS Failover</a>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-private-hosted-zones.html">Configuring Failover in a Private Hosted Zone</a>
        ///                </p>
        ///             </li>
        ///          </ul>
        /// 		
        /// 		       <p>
        ///             <b>When to Specify HealthCheckId</b>
        ///          </p>
        /// 		       <p>Specifying a value for <code>HealthCheckId</code> is useful only when Route 53 is choosing between two or more resource record sets
        /// 			to respond to a DNS query, and you want Route 53 to base the choice in part on the status of a health check. Configuring health checks
        /// 			makes sense only in the following configurations:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>
        ///                   <b>Non-alias resource record sets</b>: You're checking the health of a group of non-alias
        /// 					resource record sets that have the same routing policy, name, and type (such as multiple weighted records named www.example.com
        /// 					with a type of A) and you specify health check IDs for all the resource record sets. </p>
        /// 				           <p>If the health check status for a resource record set is healthy, Route 53 includes the record among the records that it
        /// 					responds to DNS queries with.</p>
        /// 				           <p>If the health check status for a resource record set is unhealthy, Route 53 stops responding to DNS queries using the value
        /// 					for that resource record set.</p>
        /// 				           <p>If the health check status for all resource record sets in the group is unhealthy, Route 53 considers all resource record sets
        /// 					in the group healthy and responds to DNS queries accordingly. </p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>Alias resource record sets</b>: You specify the following settings:</p>
        /// 				           <ul>
        ///                   <li>
        ///                      <p>You set <code>EvaluateTargetHealth</code> to true for an alias resource record set in a group of
        /// 						resource record sets that have the same routing policy, name, and type (such as multiple weighted records named
        /// 						www.example.com with a type of A). </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>You configure the alias resource record set to route traffic to a non-alias resource record set
        /// 						in the same hosted zone.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>You specify a health check ID for the non-alias resource record set. </p>
        ///                   </li>
        ///                </ul>
        /// 				           <p>If the health check status is healthy, Route 53 considers the alias resource record set to be healthy and includes the
        /// 					alias record among the records that it responds to DNS queries with.</p>
        /// 				           <p>If the health check status is unhealthy, Route 53 stops responding to DNS queries using the alias resource record set.</p>
        /// 				           <note>
        /// 					             <p>The alias resource record set can also route traffic to a <i>group</i> of non-alias resource record sets
        /// 						that have the same routing policy, name, and type. In that configuration, associate health checks with all of the
        /// 						resource record sets in the group of non-alias resource record sets.</p>
        /// 				           </note>
        /// 			         </li>
        ///          </ul>
        /// 		
        /// 		       <p>
        ///             <b>Geolocation Routing</b>
        ///          </p>
        /// 		       <p>For geolocation resource record sets, if an endpoint is unhealthy, Route 53 looks for a resource record set for the larger, associated
        /// 			geographic region. For example, suppose you have resource record sets for a state in the United States, for the entire United States,
        /// 			for North America, and a resource record set that has <code>*</code> for <code>CountryCode</code> is <code>*</code>, which applies to
        /// 			all locations. If the endpoint for the state resource record set is unhealthy, Route 53 checks for healthy resource record sets in the
        /// 			following order until it finds a resource record set for which the endpoint is healthy:</p>
        /// 			      <ul>
        ///             <li>
        ///                <p>The United States</p>
        ///             </li>
        ///             <li>
        ///                <p>North America</p>
        ///             </li>
        ///             <li>
        ///                <p>The default resource record set</p>
        ///             </li>
        ///          </ul>
        /// 		
        /// 		       <p>
        ///             <b>Specifying the Health Check Endpoint by Domain Name</b>
        ///          </p>
        /// 		       <p>If your health checks specify the endpoint only by domain name, we recommend that you create a separate health check for each endpoint.
        /// 			For example, create a health check for each <code>HTTP</code> server that is serving content for <code>www.example.com</code>. For the
        /// 			value of <code>FullyQualifiedDomainName</code>, specify the domain name of the server (such as <code>us-east-2-www.example.com</code>),
        /// 			not the name of the resource record sets (<code>www.example.com</code>).</p>
        /// 		       <important>
        /// 			         <p>Health check results will be unpredictable if you do the following:</p>
        /// 			         <ul>
        ///                <li>
        ///                   <p>Create a health check that has the same value for <code>FullyQualifiedDomainName</code> as the name of a
        /// 					resource record set.</p>
        ///                </li>
        ///                <li>
        ///                   <p>Associate that health check with the resource record set.</p>
        ///                </li>
        ///             </ul>
        /// 		       </important>
        public let healthCheckId: Swift.String?
        /// <p>
        ///             <i>Multivalue answer resource record sets only</i>: To route traffic approximately randomly to multiple resources,
        /// 			such as web servers, create one multivalue answer record for each resource and specify <code>true</code> for <code>MultiValueAnswer</code>.
        /// 			Note the following:</p>
        /// 		       <ul>
        ///             <li>
        ///                <p>If you associate a health check with a multivalue answer resource record set, Amazon Route 53 responds to DNS queries
        /// 				with the corresponding IP address only when the health check is healthy.</p>
        ///             </li>
        ///             <li>
        ///                <p>If you don't associate a health check with a multivalue answer record, Route 53 always considers the record
        /// 				to be healthy.</p>
        ///             </li>
        ///             <li>
        ///                <p>Route 53 responds to DNS queries with up to eight healthy records; if you have eight or fewer healthy records,
        /// 				Route 53 responds to all DNS queries with all the healthy records.</p>
        ///             </li>
        ///             <li>
        ///                <p>If you have more than eight healthy records, Route 53 responds to different DNS resolvers with different combinations of
        /// 				healthy records.</p>
        ///             </li>
        ///             <li>
        ///                <p>When all records are unhealthy, Route 53 responds to DNS queries with up to eight unhealthy records.</p>
        ///             </li>
        ///             <li>
        ///                <p>If a resource becomes unavailable after a resolver caches a response, client software typically tries another
        /// 				of the IP addresses in the response.</p>
        ///             </li>
        ///          </ul>
        /// 		       <p>You can't create multivalue answer alias records.</p>
        public let multiValueAnswer: Swift.Bool?
        /// <p>For <code>ChangeResourceRecordSets</code> requests, the name of the record that you want to create, update, or delete.
        /// 			For <code>ListResourceRecordSets</code> responses, the name of a record in the specified hosted zone.</p>
        /// 		
        /// 		       <p>
        ///             <b>ChangeResourceRecordSets Only</b>
        ///          </p>
        /// 		       <p>Enter a fully qualified domain name, for example, <code>www.example.com</code>. You can optionally include a trailing dot.
        /// 			If you omit the trailing dot, Amazon Route 53 assumes that the domain name that you specify is fully qualified. This means that Route 53 treats
        /// 			<code>www.example.com</code> (without a trailing dot) and <code>www.example.com.</code> (with a trailing dot) as identical.</p>
        /// 		       <p>For information about how to specify characters other than <code>a-z</code>, <code>0-9</code>, and <code>-</code> (hyphen)
        /// 			and how to specify internationalized domain names, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DomainNameFormat.html">DNS Domain Name Format</a> in
        /// 			the <i>Amazon Route 53 Developer Guide</i>.</p>
        /// 		       <p>You can use the asterisk (*) wildcard to replace the leftmost label in a domain name, for example, <code>*.example.com</code>.
        /// 			Note the following:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>The * must replace the entire label. For example, you can't specify <code>*prod.example.com</code> or
        /// 					<code>prod*.example.com</code>.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>The * can't replace any of the middle labels, for example, marketing.*.example.com.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>If you include * in any position other than the leftmost label in a domain name, DNS treats it as an * character (ASCII 42),
        /// 					not as a wildcard.</p>
        /// 				           <important>
        /// 					             <p>You can't use the * wildcard for resource records sets that have a type of NS.</p>
        /// 				           </important>
        /// 			         </li>
        ///          </ul>
        /// 		       <p>You can use the * wildcard as the leftmost label in a domain name, for example, <code>*.example.com</code>. You can't use an *
        /// 			for one of the middle labels, for example, <code>marketing.*.example.com</code>. In addition, the * must replace the entire label; for
        /// 			example, you can't specify <code>prod*.example.com</code>.</p>
        public let name: Swift.String?
        /// <p>
        ///             <i>Latency-based resource record sets only:</i> The Amazon EC2 Region where you created the resource that this
        /// 			resource record set refers to. The resource typically is an AWS resource, such as an EC2 instance or an ELB load balancer, and is
        /// 			referred to by an IP address or a DNS domain name, depending on the record type.</p>
        /// 		       <note>
        /// 			         <p>Although creating latency and latency alias resource record sets in a private hosted zone is allowed,
        /// 				it's not supported.</p>
        /// 		       </note>
        /// 		       <p>When Amazon Route 53 receives a DNS query for a domain name and type for which you have created latency resource record sets, Route 53
        /// 			selects the latency resource record set that has the lowest latency between the end user and the associated Amazon EC2 Region. Route 53 then
        /// 			returns the value that is associated with the selected resource record set.</p>
        /// 		       <p>Note the following:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>You can only specify one <code>ResourceRecord</code> per latency resource record set.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>You can only create one latency resource record set for each Amazon EC2 Region.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>You aren't required to create latency resource record sets for all Amazon EC2 Regions. Route 53 will choose the region with the
        /// 					best latency from among the regions that you create latency resource record sets for.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>You can't create non-latency resource record sets that have the same values for the <code>Name</code> and <code>Type</code>
        /// 					elements as latency resource record sets.</p>
        /// 			         </li>
        ///          </ul>
        public let region: Route53ClientTypes.ResourceRecordSetRegion?
        /// <p>Information about the resource records to act upon.</p>
        /// 		       <note>
        ///             <p>If you're creating an alias resource record set, omit <code>ResourceRecords</code>.</p>
        ///          </note>
        public let resourceRecords: [Route53ClientTypes.ResourceRecord]?
        /// <p>
        ///             <i>Resource record sets that have a routing policy other than simple:</i> An identifier that differentiates among
        /// 			multiple resource record sets that have the same combination of name and type, such as multiple weighted resource record sets named
        /// 			acme.example.com that have a type of A. In a group of resource record sets that have the same name and type, the value of <code>SetIdentifier</code>
        /// 			must be unique for each resource record set. </p>
        /// 		       <p>For information about routing policies, see
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html">Choosing a Routing Policy</a>
        /// 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
        public let setIdentifier: Swift.String?
        /// <p>The resource record cache time to live (TTL), in seconds. Note the following:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>If you're creating or updating an alias resource record set, omit <code>TTL</code>. Amazon Route 53 uses the value of <code>TTL</code>
        /// 					for the alias target. </p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>If you're associating this resource record set with a health check (if you're adding a <code>HealthCheckId</code> element),
        /// 					we recommend that you specify a <code>TTL</code> of 60 seconds or less so clients respond quickly to changes in health status.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>All of the resource record sets in a group of weighted resource record sets must have the same value for <code>TTL</code>.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>If a group of weighted resource record sets includes one or more weighted alias resource record sets for which the
        /// 					alias target is an ELB load balancer, we recommend that you specify a <code>TTL</code> of 60 seconds for all of the
        /// 					non-alias weighted resource record sets that have the same name and type. Values other than 60 seconds (the TTL for
        /// 					load balancers) will change the effect of the values that you specify for <code>Weight</code>.</p>
        /// 			         </li>
        ///          </ul>
        public let tTL: Swift.Int?
        /// <p>When you create a traffic policy instance, Amazon Route 53 automatically creates a resource record set. <code>TrafficPolicyInstanceId</code> is the ID
        /// 			of the traffic policy instance that Route 53 created this resource record set for.</p>
        /// 		       <important>
        ///             <p>To delete the resource record set that is associated with a traffic policy instance, use <code>DeleteTrafficPolicyInstance</code>.
        /// 			Route 53 will delete the resource record set automatically. If you delete the resource record set by using <code>ChangeResourceRecordSets</code>,
        /// 			Route 53 doesn't automatically delete the traffic policy instance, and you'll continue to be charged for it even though it's no longer in use. </p>
        /// 		       </important>
        public let trafficPolicyInstanceId: Swift.String?
        /// <p>The DNS record type. For information about different record types and how data is encoded for them, see
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html">Supported DNS Resource Record Types</a>
        /// 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
        /// 		       <p>Valid values for basic resource record sets: <code>A</code> | <code>AAAA</code> | <code>CAA</code> | <code>CNAME</code> | <code>DS</code> |<code>MX</code> |
        /// 			<code>NAPTR</code> | <code>NS</code> | <code>PTR</code> | <code>SOA</code> | <code>SPF</code> | <code>SRV</code> | <code>TXT</code>
        ///          </p>
        /// 		       <p>Values for weighted, latency, geolocation, and failover resource record sets: <code>A</code> | <code>AAAA</code> | <code>CAA</code> |
        /// 			<code>CNAME</code> | <code>MX</code> | <code>NAPTR</code> | <code>PTR</code> | <code>SPF</code> | <code>SRV</code> | <code>TXT</code>.
        /// 			When creating a group of weighted, latency, geolocation, or failover resource record sets, specify the same value for all of the
        /// 			resource record sets in the group.</p>
        /// 		       <p>Valid values for multivalue answer resource record sets: <code>A</code> | <code>AAAA</code> | <code>MX</code> | <code>NAPTR</code> |
        /// 			<code>PTR</code> | <code>SPF</code> | <code>SRV</code> | <code>TXT</code>
        ///          </p>
        /// 		       <note>
        /// 			         <p>SPF records were formerly used to verify the identity of the sender of email messages. However, we no longer recommend that you create
        /// 				resource record sets for which the value of <code>Type</code> is <code>SPF</code>. RFC 7208, <i>Sender Policy Framework (SPF) for
        /// 				Authorizing Use of Domains in Email, Version 1</i>, has been updated to say, "...[I]ts existence and mechanism defined in [RFC4408]
        /// 				have led to some interoperability issues. Accordingly, its use is no longer appropriate for SPF version 1; implementations are not to
        /// 				use it." In RFC 7208, see section 14.1, <a href="http://tools.ietf.org/html/rfc7208#section-14.1">The SPF DNS Record Type</a>.</p>
        /// 		       </note>
        /// 		       <p>Values for alias resource record sets:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>
        ///                   <b>Amazon API Gateway custom regional APIs and edge-optimized APIs:</b>
        ///                   <code>A</code>
        ///                </p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>CloudFront distributions:</b>
        ///                   <code>A</code>
        ///                </p>
        /// 				           <p>If IPv6 is enabled for the distribution, create two resource record sets to route traffic to your distribution,
        /// 					one with a value of <code>A</code> and one with a value of <code>AAAA</code>. </p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>Amazon API Gateway environment that has a regionalized subdomain</b>: <code>A</code>
        ///                </p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>ELB load balancers:</b>
        ///                   <code>A</code> | <code>AAAA</code>
        ///                </p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>Amazon S3 buckets:</b>
        ///                   <code>A</code>
        ///                </p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>Amazon Virtual Private Cloud interface VPC endpoints</b>
        ///                   <code>A</code>
        ///                </p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>Another resource record set in this hosted zone:</b> Specify the type of the resource record set
        /// 					that you're creating the alias for. All values are supported except <code>NS</code> and <code>SOA</code>.</p>
        /// 				           <note>
        ///                   <p>If you're creating an alias record that has the same name as the hosted zone (known as the zone apex), you can't
        /// 					route traffic to a record for which the value of <code>Type</code> is <code>CNAME</code>. This is because the alias record
        /// 					must have the same type as the record you're routing traffic to, and creating a CNAME record for the zone apex
        /// 					isn't supported even for an alias record.</p>
        ///                </note>
        /// 			         </li>
        ///          </ul>
        public let type: Route53ClientTypes.RRType?
        /// <p>
        ///             <i>Weighted resource record sets only:</i> Among resource record sets that have the same combination of DNS name and type,
        /// 			a value that determines the proportion of DNS queries that Amazon Route 53 responds to using the current resource record set. Route 53 calculates the
        /// 			sum of the weights for the resource record sets that have the same combination of DNS name and type. Route 53 then responds to queries
        /// 			based on the ratio of a resource's weight to the total. Note the following:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>You must specify a value for the <code>Weight</code> element for every weighted resource record set.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>You can only specify one <code>ResourceRecord</code> per weighted resource record set.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>You can't create latency, failover, or geolocation resource record sets that have the same values for the
        /// 					<code>Name</code> and <code>Type</code> elements as weighted resource record sets.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>You can create a maximum of 100 weighted resource record sets that have the same values for the <code>Name</code> and
        /// 					<code>Type</code> elements.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>For weighted (but not weighted alias) resource record sets, if you set <code>Weight</code> to <code>0</code> for a
        /// 					resource record set, Route 53 never responds to queries with the applicable value for that resource record set. However, if you set
        /// 						<code>Weight</code> to <code>0</code> for all resource record sets that have the same combination of DNS name and type,
        /// 					traffic is routed to all resources with equal probability.</p>
        /// 				           <p>The effect of setting <code>Weight</code> to <code>0</code> is different when you associate health checks with weighted
        /// 					resource record sets. For more information, see
        /// 					<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html">Options for Configuring Route 53 Active-Active and Active-Passive Failover</a>
        /// 					in the <i>Amazon Route 53 Developer Guide</i>.</p>
        /// 			         </li>
        ///          </ul>
        public let weight: Swift.Int?

        public init (
            aliasTarget: Route53ClientTypes.AliasTarget? = nil,
            failover: Route53ClientTypes.ResourceRecordSetFailover? = nil,
            geoLocation: Route53ClientTypes.GeoLocation? = nil,
            healthCheckId: Swift.String? = nil,
            multiValueAnswer: Swift.Bool? = nil,
            name: Swift.String? = nil,
            region: Route53ClientTypes.ResourceRecordSetRegion? = nil,
            resourceRecords: [Route53ClientTypes.ResourceRecord]? = nil,
            setIdentifier: Swift.String? = nil,
            tTL: Swift.Int? = nil,
            trafficPolicyInstanceId: Swift.String? = nil,
            type: Route53ClientTypes.RRType? = nil,
            weight: Swift.Int? = nil
        )
        {
            self.aliasTarget = aliasTarget
            self.failover = failover
            self.geoLocation = geoLocation
            self.healthCheckId = healthCheckId
            self.multiValueAnswer = multiValueAnswer
            self.name = name
            self.region = region
            self.resourceRecords = resourceRecords
            self.setIdentifier = setIdentifier
            self.tTL = tTL
            self.trafficPolicyInstanceId = trafficPolicyInstanceId
            self.type = type
            self.weight = weight
        }
    }

}

extension Route53ClientTypes {
    public enum ResourceRecordSetFailover: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case primary
        case secondary
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceRecordSetFailover] {
            return [
                .primary,
                .secondary,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .primary: return "PRIMARY"
            case .secondary: return "SECONDARY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceRecordSetFailover(rawValue: rawValue) ?? ResourceRecordSetFailover.sdkUnknown(rawValue)
        }
    }
}

extension Route53ClientTypes {
    public enum ResourceRecordSetRegion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case afSouth1
        case apEast1
        case apNortheast1
        case apNortheast2
        case apNortheast3
        case apSouth1
        case apSoutheast1
        case apSoutheast2
        case caCentral1
        case cnNorth1
        case cnNorthwest1
        case euCentral1
        case euNorth1
        case euSouth1
        case euWest1
        case euWest2
        case euWest3
        case meSouth1
        case saEast1
        case usEast1
        case usEast2
        case usWest1
        case usWest2
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceRecordSetRegion] {
            return [
                .afSouth1,
                .apEast1,
                .apNortheast1,
                .apNortheast2,
                .apNortheast3,
                .apSouth1,
                .apSoutheast1,
                .apSoutheast2,
                .caCentral1,
                .cnNorth1,
                .cnNorthwest1,
                .euCentral1,
                .euNorth1,
                .euSouth1,
                .euWest1,
                .euWest2,
                .euWest3,
                .meSouth1,
                .saEast1,
                .usEast1,
                .usEast2,
                .usWest1,
                .usWest2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .afSouth1: return "af-south-1"
            case .apEast1: return "ap-east-1"
            case .apNortheast1: return "ap-northeast-1"
            case .apNortheast2: return "ap-northeast-2"
            case .apNortheast3: return "ap-northeast-3"
            case .apSouth1: return "ap-south-1"
            case .apSoutheast1: return "ap-southeast-1"
            case .apSoutheast2: return "ap-southeast-2"
            case .caCentral1: return "ca-central-1"
            case .cnNorth1: return "cn-north-1"
            case .cnNorthwest1: return "cn-northwest-1"
            case .euCentral1: return "eu-central-1"
            case .euNorth1: return "eu-north-1"
            case .euSouth1: return "eu-south-1"
            case .euWest1: return "eu-west-1"
            case .euWest2: return "eu-west-2"
            case .euWest3: return "eu-west-3"
            case .meSouth1: return "me-south-1"
            case .saEast1: return "sa-east-1"
            case .usEast1: return "us-east-1"
            case .usEast2: return "us-east-2"
            case .usWest1: return "us-west-1"
            case .usWest2: return "us-west-2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceRecordSetRegion(rawValue: rawValue) ?? ResourceRecordSetRegion.sdkUnknown(rawValue)
        }
    }
}

extension Route53ClientTypes.ResourceTagSet: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let resourceId = resourceId {
            try container.encode(resourceId, forKey: ClientRuntime.Key("ResourceId"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for tag0 in tags {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("Tag"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.TagResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct Tag{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Tag>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([Route53ClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[Route53ClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [Route53ClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
    }
}

extension Route53ClientTypes.ResourceTagSet: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceTagSet(resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)), tags: \(Swift.String(describing: tags)))"}
}

extension Route53ClientTypes.ResourceTagSet: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type containing a resource and its associated tags.</p>
    public struct ResourceTagSet: Swift.Equatable {
        /// <p>The ID for the specified resource.</p>
        public let resourceId: Swift.String?
        /// <p>The type of the resource.</p>
        /// 		       <ul>
        ///             <li>
        ///                <p>The resource type for health checks is <code>healthcheck</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>The resource type for hosted zones is <code>hostedzone</code>.</p>
        ///             </li>
        ///          </ul>
        public let resourceType: Route53ClientTypes.TagResourceType?
        /// <p>The tags associated with the specified resource.</p>
        public let tags: [Route53ClientTypes.Tag]?

        public init (
            resourceId: Swift.String? = nil,
            resourceType: Route53ClientTypes.TagResourceType? = nil,
            tags: [Route53ClientTypes.Tag]? = nil
        )
        {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.tags = tags
        }
    }

}

extension Route53ClientTypes.ReusableDelegationSetLimit: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if value != 0 {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.ReusableDelegationSetLimitType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decode(Swift.Int.self, forKey: .value)
        value = valueDecoded
    }
}

extension Route53ClientTypes.ReusableDelegationSetLimit: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReusableDelegationSetLimit(type: \(Swift.String(describing: type)), value: \(Swift.String(describing: value)))"}
}

extension Route53ClientTypes.ReusableDelegationSetLimit: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains the type of limit that you specified in the request and the current value for that limit.</p>
    public struct ReusableDelegationSetLimit: Swift.Equatable {
        /// <p>The limit that you requested: <code>MAX_ZONES_BY_REUSABLE_DELEGATION_SET</code>, the maximum number of hosted zones that you can associate
        /// 			with the specified reusable delegation set.</p>
        public let type: Route53ClientTypes.ReusableDelegationSetLimitType?
        /// <p>The current value for the <code>MAX_ZONES_BY_REUSABLE_DELEGATION_SET</code> limit.</p>
        public let value: Swift.Int

        public init (
            type: Route53ClientTypes.ReusableDelegationSetLimitType? = nil,
            value: Swift.Int = 0
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension Route53ClientTypes {
    public enum ReusableDelegationSetLimitType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case maxZonesByReusableDelegationSet
        case sdkUnknown(Swift.String)

        public static var allCases: [ReusableDelegationSetLimitType] {
            return [
                .maxZonesByReusableDelegationSet,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .maxZonesByReusableDelegationSet: return "MAX_ZONES_BY_REUSABLE_DELEGATION_SET"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReusableDelegationSetLimitType(rawValue: rawValue) ?? ReusableDelegationSetLimitType.sdkUnknown(rawValue)
        }
    }
}

extension Route53ClientTypes {
    public enum Statistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [Statistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Statistic(rawValue: rawValue) ?? Statistic.sdkUnknown(rawValue)
        }
    }
}

extension Route53ClientTypes.StatusReport: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case checkedTime = "CheckedTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let checkedTime = checkedTime {
            try container.encode(ClientRuntime.TimestampWrapper(checkedTime, format: .dateTime), forKey: ClientRuntime.Key("CheckedTime"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let checkedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .checkedTime)
        var checkedTimeBuffer:ClientRuntime.Date? = nil
        if let checkedTimeDecoded = checkedTimeDecoded {
            checkedTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(checkedTimeDecoded, format: .dateTime)
        }
        checkedTime = checkedTimeBuffer
    }
}

extension Route53ClientTypes.StatusReport: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StatusReport(checkedTime: \(Swift.String(describing: checkedTime)), status: \(Swift.String(describing: status)))"}
}

extension Route53ClientTypes.StatusReport: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains the status that one Amazon Route 53 health checker reports and the time of the health check.</p>
    public struct StatusReport: Swift.Equatable {
        /// <p>The date and time that the health checker performed the health check in
        /// 			<a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601 format</a> and Coordinated Universal Time (UTC).
        /// 			For example, the value <code>2017-03-27T17:48:16.751Z</code> represents March 27, 2017 at 17:48:16.751 UTC.</p>
        public let checkedTime: ClientRuntime.Date?
        /// <p>A description of the status of the health check endpoint as reported by one of the Amazon Route 53 health checkers.</p>
        public let status: Swift.String?

        public init (
            checkedTime: ClientRuntime.Date? = nil,
            status: Swift.String? = nil
        )
        {
            self.checkedTime = checkedTime
            self.status = status
        }
    }

}

extension Route53ClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension Route53ClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension Route53ClientTypes.Tag: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains information about a tag that you want to add or edit for the specified health check or hosted zone.</p>
    public struct Tag: Swift.Equatable {
        /// <p>The value of <code>Key</code> depends on the operation that you want to perform:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>
        ///                   <b>Add a tag to a health check or hosted zone</b>: <code>Key</code> is the name that you want to give the new tag.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>Edit a tag</b>: <code>Key</code> is the name of the tag that you want to change the <code>Value</code> for.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b> Delete a key</b>: <code>Key</code> is the name of the tag you want to remove.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>Give a name to a health check</b>: Edit the default <code>Name</code> tag. In the Amazon Route 53 console,
        /// 					the list of your health checks includes a <b>Name</b> column that lets you see the name that you've
        /// 					given to each health check.</p>
        /// 			         </li>
        ///          </ul>
        public let key: Swift.String?
        /// <p>The value of <code>Value</code> depends on the operation that you want to perform:</p>
        /// 		       <ul>
        ///             <li>
        /// 				           <p>
        ///                   <b>Add a tag to a health check or hosted zone</b>: <code>Value</code> is the value that you want to give
        /// 					the new tag.</p>
        /// 			         </li>
        ///             <li>
        /// 				           <p>
        ///                   <b>Edit a tag</b>: <code>Value</code> is the new value that you want to assign the tag.</p>
        /// 			         </li>
        ///          </ul>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension Route53ClientTypes {
    public enum TagResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case healthcheck
        case hostedzone
        case sdkUnknown(Swift.String)

        public static var allCases: [TagResourceType] {
            return [
                .healthcheck,
                .hostedzone,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .healthcheck: return "healthcheck"
            case .hostedzone: return "hostedzone"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TagResourceType(rawValue: rawValue) ?? TagResourceType.sdkUnknown(rawValue)
        }
    }
}

extension TestDNSAnswerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestDNSAnswerInput(eDNS0ClientSubnetIP: \(Swift.String(describing: eDNS0ClientSubnetIP)), eDNS0ClientSubnetMask: \(Swift.String(describing: eDNS0ClientSubnetMask)), hostedZoneId: \(Swift.String(describing: hostedZoneId)), recordName: \(Swift.String(describing: recordName)), recordType: \(Swift.String(describing: recordType)), resolverIP: \(Swift.String(describing: resolverIP)))"}
}

extension TestDNSAnswerInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct TestDNSAnswerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestDNSAnswerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestDNSAnswerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestDNSAnswerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestDNSAnswerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestDNSAnswerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestDNSAnswerOutputError>
}

public struct TestDNSAnswerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TestDNSAnswerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TestDNSAnswerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TestDNSAnswerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let recordName = input.operationInput.recordName {
            let recordNameQueryItem = ClientRuntime.URLQueryItem(name: "recordname".urlPercentEncoding(), value: Swift.String(recordName).urlPercentEncoding())
            input.builder.withQueryItem(recordNameQueryItem)
        }
        if let eDNS0ClientSubnetIP = input.operationInput.eDNS0ClientSubnetIP {
            let eDNS0ClientSubnetIPQueryItem = ClientRuntime.URLQueryItem(name: "edns0clientsubnetip".urlPercentEncoding(), value: Swift.String(eDNS0ClientSubnetIP).urlPercentEncoding())
            input.builder.withQueryItem(eDNS0ClientSubnetIPQueryItem)
        }
        if let recordType = input.operationInput.recordType {
            let recordTypeQueryItem = ClientRuntime.URLQueryItem(name: "recordtype".urlPercentEncoding(), value: Swift.String(recordType.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(recordTypeQueryItem)
        }
        if let hostedZoneId = input.operationInput.hostedZoneId {
            let hostedZoneIdQueryItem = ClientRuntime.URLQueryItem(name: "hostedzoneid".urlPercentEncoding(), value: Swift.String(hostedZoneId).urlPercentEncoding())
            input.builder.withQueryItem(hostedZoneIdQueryItem)
        }
        if let resolverIP = input.operationInput.resolverIP {
            let resolverIPQueryItem = ClientRuntime.URLQueryItem(name: "resolverip".urlPercentEncoding(), value: Swift.String(resolverIP).urlPercentEncoding())
            input.builder.withQueryItem(resolverIPQueryItem)
        }
        if let eDNS0ClientSubnetMask = input.operationInput.eDNS0ClientSubnetMask {
            let eDNS0ClientSubnetMaskQueryItem = ClientRuntime.URLQueryItem(name: "edns0clientsubnetmask".urlPercentEncoding(), value: Swift.String(eDNS0ClientSubnetMask).urlPercentEncoding())
            input.builder.withQueryItem(eDNS0ClientSubnetMaskQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TestDNSAnswerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TestDNSAnswerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TestDNSAnswerOutputError>
}

/// <p>Gets the value that Amazon Route 53 returns in response to a DNS request for a specified record name and type. You can optionally specify
/// 			the IP address of a DNS resolver, an EDNS0 client subnet IP address, and a subnet mask. </p>
public struct TestDNSAnswerInput: Swift.Equatable {
    /// <p>If the resolver that you specified for resolverip supports EDNS0, specify the IPv4 or IPv6 address of a client
    /// 			in the applicable location, for example, <code>192.0.2.44</code> or <code>2001:db8:85a3::8a2e:370:7334</code>.</p>
    public let eDNS0ClientSubnetIP: Swift.String?
    /// <p>If you specify an IP address for <code>edns0clientsubnetip</code>, you can optionally specify the number of bits of the IP address
    /// 			that you want the checking tool to include in the DNS query. For example, if you specify <code>192.0.2.44</code> for
    /// 			<code>edns0clientsubnetip</code> and <code>24</code> for <code>edns0clientsubnetmask</code>, the checking tool will simulate a request from
    /// 			192.0.2.0/24. The default value is 24 bits for IPv4 addresses and 64 bits for IPv6 addresses.</p>
    /// 		       <p>The range of valid values depends on whether <code>edns0clientsubnetip</code> is an IPv4 or an IPv6 address:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <b>IPv4</b>: Specify a value between 0 and 32</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>IPv6</b>: Specify a value between 0 and 128</p>
    ///             </li>
    ///          </ul>
    public let eDNS0ClientSubnetMask: Swift.String?
    /// <p>The ID of the hosted zone that you want Amazon Route 53 to simulate a query for.</p>
    public let hostedZoneId: Swift.String?
    /// <p>The name of the resource record set that you want Amazon Route 53 to simulate a query for.</p>
    public let recordName: Swift.String?
    /// <p>The type of the resource record set.</p>
    public let recordType: Route53ClientTypes.RRType?
    /// <p>If you want to simulate a request from a specific DNS resolver, specify the IP address for that resolver.
    /// 			If you omit this value, <code>TestDnsAnswer</code> uses the IP address of a DNS resolver in the AWS US East (N. Virginia) Region
    /// 			(<code>us-east-1</code>).</p>
    public let resolverIP: Swift.String?

    public init (
        eDNS0ClientSubnetIP: Swift.String? = nil,
        eDNS0ClientSubnetMask: Swift.String? = nil,
        hostedZoneId: Swift.String? = nil,
        recordName: Swift.String? = nil,
        recordType: Route53ClientTypes.RRType? = nil,
        resolverIP: Swift.String? = nil
    )
    {
        self.eDNS0ClientSubnetIP = eDNS0ClientSubnetIP
        self.eDNS0ClientSubnetMask = eDNS0ClientSubnetMask
        self.hostedZoneId = hostedZoneId
        self.recordName = recordName
        self.recordType = recordType
        self.resolverIP = resolverIP
    }
}

struct TestDNSAnswerInputBody: Swift.Equatable {
}

extension TestDNSAnswerInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension TestDNSAnswerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension TestDNSAnswerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TestDNSAnswerOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchHostedZone(NoSuchHostedZone)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestDNSAnswerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TestDNSAnswerOutputResponse(nameserver: \(Swift.String(describing: nameserver)), protocol: \(Swift.String(describing: `protocol`)), recordData: \(Swift.String(describing: recordData)), recordName: \(Swift.String(describing: recordName)), recordType: \(Swift.String(describing: recordType)), responseCode: \(Swift.String(describing: responseCode)))"}
}

extension TestDNSAnswerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TestDNSAnswerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.`protocol` = output.`protocol`
            self.nameserver = output.nameserver
            self.recordData = output.recordData
            self.recordName = output.recordName
            self.recordType = output.recordType
            self.responseCode = output.responseCode
        } else {
            self.nameserver = nil
            self.`protocol` = nil
            self.recordData = nil
            self.recordName = nil
            self.recordType = nil
            self.responseCode = nil
        }
    }
}

/// <p>A complex type that contains the response to a <code>TestDNSAnswer</code> request. </p>
public struct TestDNSAnswerOutputResponse: Swift.Equatable {
    /// <p>The protocol that Amazon Route 53 used to respond to the request, either <code>UDP</code> or <code>TCP</code>. </p>
    public let `protocol`: Swift.String?
    /// <p>The Amazon Route 53 name server used to respond to the request.</p>
    public let nameserver: Swift.String?
    /// <p>A list that contains values that Amazon Route 53 returned for this resource record set.</p>
    public let recordData: [Swift.String]?
    /// <p>The name of the resource record set that you submitted a request for.</p>
    public let recordName: Swift.String?
    /// <p>The type of the resource record set that you submitted a request for.</p>
    public let recordType: Route53ClientTypes.RRType?
    /// <p>A code that indicates whether the request is valid or not. The most common response code is <code>NOERROR</code>, meaning that
    /// 			the request is valid. If the response is not valid, Amazon Route 53 returns a response code that describes the error.
    /// 			For a list of possible response codes, see
    /// 			<a href="http://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6">DNS RCODES</a> on the IANA website. </p>
    public let responseCode: Swift.String?

    public init (
        `protocol`: Swift.String? = nil,
        nameserver: Swift.String? = nil,
        recordData: [Swift.String]? = nil,
        recordName: Swift.String? = nil,
        recordType: Route53ClientTypes.RRType? = nil,
        responseCode: Swift.String? = nil
    )
    {
        self.`protocol` = `protocol`
        self.nameserver = nameserver
        self.recordData = recordData
        self.recordName = recordName
        self.recordType = recordType
        self.responseCode = responseCode
    }
}

struct TestDNSAnswerOutputResponseBody: Swift.Equatable {
    public let nameserver: Swift.String?
    public let recordName: Swift.String?
    public let recordType: Route53ClientTypes.RRType?
    public let recordData: [Swift.String]?
    public let responseCode: Swift.String?
    public let `protocol`: Swift.String?
}

extension TestDNSAnswerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nameserver = "Nameserver"
        case `protocol` = "Protocol"
        case recordData = "RecordData"
        case recordName = "RecordName"
        case recordType = "RecordType"
        case responseCode = "ResponseCode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameserverDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nameserver)
        nameserver = nameserverDecoded
        let recordNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recordName)
        recordName = recordNameDecoded
        let recordTypeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .recordType)
        recordType = recordTypeDecoded
        if containerValues.contains(.recordData) {
            struct KeyVal0{struct RecordDataEntry{}}
            let recordDataWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.RecordDataEntry>.CodingKeys.self, forKey: .recordData)
            if let recordDataWrappedContainer = recordDataWrappedContainer {
                let recordDataContainer = try recordDataWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var recordDataBuffer:[Swift.String]? = nil
                if let recordDataContainer = recordDataContainer {
                    recordDataBuffer = [Swift.String]()
                    for stringContainer0 in recordDataContainer {
                        recordDataBuffer?.append(stringContainer0)
                    }
                }
                recordData = recordDataBuffer
            } else {
                recordData = []
            }
        } else {
            recordData = nil
        }
        let responseCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .responseCode)
        responseCode = responseCodeDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension ThrottlingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThrottlingException(message: \(Swift.String(describing: message)))"}
}

extension ThrottlingException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ThrottlingExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The limit on the number of requests per second was exceeded.</p>
public struct ThrottlingException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyHealthChecks: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyHealthChecks(message: \(Swift.String(describing: message)))"}
}

extension TooManyHealthChecks: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TooManyHealthChecksBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This health check can't be created because the current account has reached the limit on the number of active health checks.</p>
/// 		       <p>For information about default limits, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html">Limits</a>
/// 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
/// 		       <p>For information about how to get the current limit for an account, see
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetAccountLimit.html">GetAccountLimit</a>. To request a
/// 			higher limit, <a href="http://aws.amazon.com/route53-request">create a case</a> with the AWS Support Center.</p>
///
/// 		       <p>You have reached the maximum number of active health checks for an AWS account. To request a higher limit,
/// 			<a href="http://aws.amazon.com/route53-request">create a case</a> with the AWS Support Center.</p>
public struct TooManyHealthChecks: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyHealthChecksBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyHealthChecksBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyHostedZones: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyHostedZones(message: \(Swift.String(describing: message)))"}
}

extension TooManyHostedZones: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TooManyHostedZonesBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This operation can't be completed either because the current account has reached the limit on the number of hosted zones
/// 			or because you've reached the limit on the number of hosted zones that can be associated with a reusable delegation set.</p>
/// 		       <p>For information about default limits, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html">Limits</a>
/// 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
/// 		       <p>To get the current limit on hosted zones that can be created by an account, see
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetAccountLimit.html">GetAccountLimit</a>.</p>
/// 		       <p>To get the current limit on hosted zones that can be associated with a reusable delegation set, see
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetReusableDelegationSetLimit.html">GetReusableDelegationSetLimit</a>.</p>
/// 		       <p>To request a higher limit, <a href="http://aws.amazon.com/route53-request">create a case</a> with the AWS Support Center.</p>
public struct TooManyHostedZones: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyHostedZonesBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyHostedZonesBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyKeySigningKeys: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyKeySigningKeys(message: \(Swift.String(describing: message)))"}
}

extension TooManyKeySigningKeys: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TooManyKeySigningKeysBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You've reached the limit for the number of key-signing keys (KSKs). Remove at least one KSK, and then try again.</p>
public struct TooManyKeySigningKeys: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyKeySigningKeysBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyKeySigningKeysBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyTrafficPolicies: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyTrafficPolicies(message: \(Swift.String(describing: message)))"}
}

extension TooManyTrafficPolicies: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TooManyTrafficPoliciesBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This traffic policy can't be created because the current account has reached the limit on the number of traffic policies.</p>
/// 		       <p>For information about default limits, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html">Limits</a>
/// 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
/// 		       <p>To get the current limit for an account, see
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetAccountLimit.html">GetAccountLimit</a>.
/// 		</p>
/// 		       <p>To request a higher limit, <a href="http://aws.amazon.com/route53-request">create a case</a> with the AWS Support Center.</p>
public struct TooManyTrafficPolicies: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTrafficPoliciesBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyTrafficPoliciesBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyTrafficPolicyInstances: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyTrafficPolicyInstances(message: \(Swift.String(describing: message)))"}
}

extension TooManyTrafficPolicyInstances: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TooManyTrafficPolicyInstancesBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This traffic policy instance can't be created because the current account has reached the limit on the number of
/// 			traffic policy instances.</p>
/// 		       <p>For information about default limits, see
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html">Limits</a>
/// 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
/// 		       <p>For information about how to get the current limit for an account, see
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetAccountLimit.html">GetAccountLimit</a>.</p>
/// 		       <p>To request a higher limit, <a href="http://aws.amazon.com/route53-request">create a case</a> with the AWS Support Center.</p>
public struct TooManyTrafficPolicyInstances: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTrafficPolicyInstancesBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyTrafficPolicyInstancesBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyTrafficPolicyVersionsForCurrentPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyTrafficPolicyVersionsForCurrentPolicy(message: \(Swift.String(describing: message)))"}
}

extension TooManyTrafficPolicyVersionsForCurrentPolicy: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TooManyTrafficPolicyVersionsForCurrentPolicyBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>This traffic policy version can't be created because you've reached the limit of 1000 on the number of versions
/// 			that you can create for the current traffic policy.</p>
/// 		       <p>To create more traffic policy versions, you can use
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_GetTrafficPolicy.html">GetTrafficPolicy</a>
/// 			to get the traffic policy document for a specified traffic policy version, and then use
/// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateTrafficPolicy.html">CreateTrafficPolicy</a>
/// 			to create a new traffic policy using the traffic policy document.</p>
public struct TooManyTrafficPolicyVersionsForCurrentPolicy: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTrafficPolicyVersionsForCurrentPolicyBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyTrafficPolicyVersionsForCurrentPolicyBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyVPCAssociationAuthorizations: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyVPCAssociationAuthorizations(message: \(Swift.String(describing: message)))"}
}

extension TooManyVPCAssociationAuthorizations: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TooManyVPCAssociationAuthorizationsBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You've created the maximum number of authorizations that can be created for the specified hosted zone.
/// 			To authorize another VPC to be associated with the hosted zone, submit a <code>DeleteVPCAssociationAuthorization</code> request
/// 			to remove an existing authorization. To get a list of existing authorizations, submit a
/// 			<code>ListVPCAssociationAuthorizations</code> request.</p>
public struct TooManyVPCAssociationAuthorizations: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyVPCAssociationAuthorizationsBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyVPCAssociationAuthorizationsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.TrafficPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
        case document = "Document"
        case id = "Id"
        case name = "Name"
        case type = "Type"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let comment = comment {
            try container.encode(comment, forKey: ClientRuntime.Key("Comment"))
        }
        if let document = document {
            try container.encode(document, forKey: ClientRuntime.Key("Document"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let version = version {
            try container.encode(version, forKey: ClientRuntime.Key("Version"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .type)
        type = typeDecoded
        let documentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .document)
        document = documentDecoded
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
    }
}

extension Route53ClientTypes.TrafficPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrafficPolicy(comment: \(Swift.String(describing: comment)), document: \(Swift.String(describing: document)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)), version: \(Swift.String(describing: version)))"}
}

extension Route53ClientTypes.TrafficPolicy: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains settings for a traffic policy.</p>
    public struct TrafficPolicy: Swift.Equatable {
        /// <p>The comment that you specify in the <code>CreateTrafficPolicy</code> request, if any.</p>
        public let comment: Swift.String?
        /// <p>The definition of a traffic policy in JSON format. You specify the JSON document to use for a new
        /// 			traffic policy in the <code>CreateTrafficPolicy</code> request. For more information about the JSON format, see
        /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/api-policies-traffic-policy-document-format.html">Traffic Policy Document Format</a>.</p>
        public let document: Swift.String?
        /// <p>The ID that Amazon Route 53 assigned to a traffic policy when you created it.</p>
        public let id: Swift.String?
        /// <p>The name that you specified when you created the traffic policy.</p>
        public let name: Swift.String?
        /// <p>The DNS type of the resource record sets that Amazon Route 53 creates when you use a traffic policy
        /// 			to create a traffic policy instance.</p>
        public let type: Route53ClientTypes.RRType?
        /// <p>The version number that Amazon Route 53 assigns to a traffic policy. For a new traffic policy,
        /// 			the value of <code>Version</code> is always 1.</p>
        public let version: Swift.Int?

        public init (
            comment: Swift.String? = nil,
            document: Swift.String? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil,
            type: Route53ClientTypes.RRType? = nil,
            version: Swift.Int? = nil
        )
        {
            self.comment = comment
            self.document = document
            self.id = id
            self.name = name
            self.type = type
            self.version = version
        }
    }

}

extension TrafficPolicyAlreadyExists: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrafficPolicyAlreadyExists(message: \(Swift.String(describing: message)))"}
}

extension TrafficPolicyAlreadyExists: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TrafficPolicyAlreadyExistsBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A traffic policy that has the same value for <code>Name</code> already exists.</p>
public struct TrafficPolicyAlreadyExists: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TrafficPolicyAlreadyExistsBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TrafficPolicyAlreadyExistsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TrafficPolicyInUse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrafficPolicyInUse(message: \(Swift.String(describing: message)))"}
}

extension TrafficPolicyInUse: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TrafficPolicyInUseBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>One or more traffic policy instances were created by using the specified traffic policy.</p>
public struct TrafficPolicyInUse: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TrafficPolicyInUseBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TrafficPolicyInUseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.TrafficPolicyInstance: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZoneId = "HostedZoneId"
        case id = "Id"
        case message = "Message"
        case name = "Name"
        case state = "State"
        case tTL = "TTL"
        case trafficPolicyId = "TrafficPolicyId"
        case trafficPolicyType = "TrafficPolicyType"
        case trafficPolicyVersion = "TrafficPolicyVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let hostedZoneId = hostedZoneId {
            try container.encode(hostedZoneId, forKey: ClientRuntime.Key("HostedZoneId"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let message = message {
            try container.encode(message, forKey: ClientRuntime.Key("Message"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let state = state {
            try container.encode(state, forKey: ClientRuntime.Key("State"))
        }
        if let tTL = tTL {
            try container.encode(tTL, forKey: ClientRuntime.Key("TTL"))
        }
        if let trafficPolicyId = trafficPolicyId {
            try container.encode(trafficPolicyId, forKey: ClientRuntime.Key("TrafficPolicyId"))
        }
        if let trafficPolicyType = trafficPolicyType {
            try container.encode(trafficPolicyType, forKey: ClientRuntime.Key("TrafficPolicyType"))
        }
        if let trafficPolicyVersion = trafficPolicyVersion {
            try container.encode(trafficPolicyVersion, forKey: ClientRuntime.Key("TrafficPolicyVersion"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let tTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tTL)
        tTL = tTLDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let trafficPolicyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficPolicyId)
        trafficPolicyId = trafficPolicyIdDecoded
        let trafficPolicyVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .trafficPolicyVersion)
        trafficPolicyVersion = trafficPolicyVersionDecoded
        let trafficPolicyTypeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .trafficPolicyType)
        trafficPolicyType = trafficPolicyTypeDecoded
    }
}

extension Route53ClientTypes.TrafficPolicyInstance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrafficPolicyInstance(hostedZoneId: \(Swift.String(describing: hostedZoneId)), id: \(Swift.String(describing: id)), message: \(Swift.String(describing: message)), name: \(Swift.String(describing: name)), state: \(Swift.String(describing: state)), tTL: \(Swift.String(describing: tTL)), trafficPolicyId: \(Swift.String(describing: trafficPolicyId)), trafficPolicyType: \(Swift.String(describing: trafficPolicyType)), trafficPolicyVersion: \(Swift.String(describing: trafficPolicyVersion)))"}
}

extension Route53ClientTypes.TrafficPolicyInstance: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains settings for the new traffic policy instance.</p>
    public struct TrafficPolicyInstance: Swift.Equatable {
        /// <p>The ID of the hosted zone that Amazon Route 53 created resource record sets in.</p>
        public let hostedZoneId: Swift.String?
        /// <p>The ID that Amazon Route 53 assigned to the new traffic policy instance.</p>
        public let id: Swift.String?
        /// <p>If <code>State</code> is <code>Failed</code>, an explanation of the reason for the failure. If <code>State</code> is another value,
        /// 			<code>Message</code> is empty.</p>
        public let message: Swift.String?
        /// <p>The DNS name, such as www.example.com, for which Amazon Route 53 responds to queries by using the
        /// 			resource record sets that are associated with this traffic policy instance. </p>
        public let name: Swift.String?
        /// <p>The value of <code>State</code> is one of the following values:</p>
        /// 		       <dl>
        ///             <dt>Applied</dt>
        ///             <dd>
        ///                <p>Amazon Route 53 has finished creating resource record sets, and changes have propagated to all Route 53 edge locations.</p>
        ///             </dd>
        ///             <dt>Creating</dt>
        ///             <dd>
        ///                <p>Route 53 is creating the resource record sets. Use <code>GetTrafficPolicyInstance</code> to confirm that the
        /// 					<code>CreateTrafficPolicyInstance</code> request completed successfully.</p>
        ///             </dd>
        ///             <dt>Failed</dt>
        ///             <dd>
        ///                <p>Route 53 wasn't able to create or update the resource record sets. When the value of <code>State</code> is <code>Failed</code>,
        /// 					see <code>Message</code> for an explanation of what caused the request to fail.</p>
        ///             </dd>
        ///          </dl>
        public let state: Swift.String?
        /// <p>The TTL that Amazon Route 53 assigned to all of the resource record sets that it created in the specified hosted zone.</p>
        public let tTL: Swift.Int?
        /// <p>The ID of the traffic policy that Amazon Route 53 used to create resource record sets in the specified hosted zone.</p>
        public let trafficPolicyId: Swift.String?
        /// <p>The DNS type that Amazon Route 53 assigned to all of the resource record sets that it created for this traffic policy instance. </p>
        public let trafficPolicyType: Route53ClientTypes.RRType?
        /// <p>The version of the traffic policy that Amazon Route 53 used to create resource record sets in the specified hosted zone.</p>
        public let trafficPolicyVersion: Swift.Int?

        public init (
            hostedZoneId: Swift.String? = nil,
            id: Swift.String? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            state: Swift.String? = nil,
            tTL: Swift.Int? = nil,
            trafficPolicyId: Swift.String? = nil,
            trafficPolicyType: Route53ClientTypes.RRType? = nil,
            trafficPolicyVersion: Swift.Int? = nil
        )
        {
            self.hostedZoneId = hostedZoneId
            self.id = id
            self.message = message
            self.name = name
            self.state = state
            self.tTL = tTL
            self.trafficPolicyId = trafficPolicyId
            self.trafficPolicyType = trafficPolicyType
            self.trafficPolicyVersion = trafficPolicyVersion
        }
    }

}

extension TrafficPolicyInstanceAlreadyExists: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrafficPolicyInstanceAlreadyExists(message: \(Swift.String(describing: message)))"}
}

extension TrafficPolicyInstanceAlreadyExists: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TrafficPolicyInstanceAlreadyExistsBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>There is already a traffic policy instance with the specified ID.</p>
public struct TrafficPolicyInstanceAlreadyExists: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TrafficPolicyInstanceAlreadyExistsBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TrafficPolicyInstanceAlreadyExistsBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes.TrafficPolicySummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case latestVersion = "LatestVersion"
        case name = "Name"
        case trafficPolicyCount = "TrafficPolicyCount"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let id = id {
            try container.encode(id, forKey: ClientRuntime.Key("Id"))
        }
        if let latestVersion = latestVersion {
            try container.encode(latestVersion, forKey: ClientRuntime.Key("LatestVersion"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let trafficPolicyCount = trafficPolicyCount {
            try container.encode(trafficPolicyCount, forKey: ClientRuntime.Key("TrafficPolicyCount"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.RRType.self, forKey: .type)
        type = typeDecoded
        let latestVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .latestVersion)
        latestVersion = latestVersionDecoded
        let trafficPolicyCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .trafficPolicyCount)
        trafficPolicyCount = trafficPolicyCountDecoded
    }
}

extension Route53ClientTypes.TrafficPolicySummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TrafficPolicySummary(id: \(Swift.String(describing: id)), latestVersion: \(Swift.String(describing: latestVersion)), name: \(Swift.String(describing: name)), trafficPolicyCount: \(Swift.String(describing: trafficPolicyCount)), type: \(Swift.String(describing: type)))"}
}

extension Route53ClientTypes.TrafficPolicySummary: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>A complex type that contains information about the latest version of one traffic policy
    /// 			that is associated with the current AWS account.</p>
    public struct TrafficPolicySummary: Swift.Equatable {
        /// <p>The ID that Amazon Route 53 assigned to the traffic policy when you created it.</p>
        public let id: Swift.String?
        /// <p>The version number of the latest version of the traffic policy.</p>
        public let latestVersion: Swift.Int?
        /// <p>The name that you specified for the traffic policy when you created it.</p>
        public let name: Swift.String?
        /// <p>The number of traffic policies that are associated with the current AWS account.</p>
        public let trafficPolicyCount: Swift.Int?
        /// <p>The DNS type of the resource record sets that Amazon Route 53 creates when you use a traffic policy
        /// 			to create a traffic policy instance.</p>
        public let type: Route53ClientTypes.RRType?

        public init (
            id: Swift.String? = nil,
            latestVersion: Swift.Int? = nil,
            name: Swift.String? = nil,
            trafficPolicyCount: Swift.Int? = nil,
            type: Route53ClientTypes.RRType? = nil
        )
        {
            self.id = id
            self.latestVersion = latestVersion
            self.name = name
            self.trafficPolicyCount = trafficPolicyCount
            self.type = type
        }
    }

}

public struct UpdateHealthCheckInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateHealthCheckInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateHealthCheckInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateHealthCheckOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateHealthCheckInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateHealthCheckOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateHealthCheckOutputError>
}

extension UpdateHealthCheckInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateHealthCheckInput(alarmIdentifier: \(Swift.String(describing: alarmIdentifier)), childHealthChecks: \(Swift.String(describing: childHealthChecks)), disabled: \(Swift.String(describing: disabled)), enableSNI: \(Swift.String(describing: enableSNI)), failureThreshold: \(Swift.String(describing: failureThreshold)), fullyQualifiedDomainName: \(Swift.String(describing: fullyQualifiedDomainName)), healthCheckId: \(Swift.String(describing: healthCheckId)), healthCheckVersion: \(Swift.String(describing: healthCheckVersion)), healthThreshold: \(Swift.String(describing: healthThreshold)), iPAddress: \(Swift.String(describing: iPAddress)), insufficientDataHealthStatus: \(Swift.String(describing: insufficientDataHealthStatus)), inverted: \(Swift.String(describing: inverted)), port: \(Swift.String(describing: port)), regions: \(Swift.String(describing: regions)), resetElements: \(Swift.String(describing: resetElements)), resourcePath: \(Swift.String(describing: resourcePath)), searchString: \(Swift.String(describing: searchString)))"}
}

extension UpdateHealthCheckInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension UpdateHealthCheckInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmIdentifier = "AlarmIdentifier"
        case childHealthChecks = "ChildHealthChecks"
        case disabled = "Disabled"
        case enableSNI = "EnableSNI"
        case failureThreshold = "FailureThreshold"
        case fullyQualifiedDomainName = "FullyQualifiedDomainName"
        case healthCheckVersion = "HealthCheckVersion"
        case healthThreshold = "HealthThreshold"
        case iPAddress = "IPAddress"
        case insufficientDataHealthStatus = "InsufficientDataHealthStatus"
        case inverted = "Inverted"
        case port = "Port"
        case regions = "Regions"
        case resetElements = "ResetElements"
        case resourcePath = "ResourcePath"
        case searchString = "SearchString"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let alarmIdentifier = alarmIdentifier {
            try container.encode(alarmIdentifier, forKey: ClientRuntime.Key("AlarmIdentifier"))
        }
        if let childHealthChecks = childHealthChecks {
            var childHealthChecksContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ChildHealthChecks"))
            for healthcheckid0 in childHealthChecks {
                try childHealthChecksContainer.encode(healthcheckid0, forKey: ClientRuntime.Key("ChildHealthCheck"))
            }
        }
        if let disabled = disabled {
            try container.encode(disabled, forKey: ClientRuntime.Key("Disabled"))
        }
        if let enableSNI = enableSNI {
            try container.encode(enableSNI, forKey: ClientRuntime.Key("EnableSNI"))
        }
        if let failureThreshold = failureThreshold {
            try container.encode(failureThreshold, forKey: ClientRuntime.Key("FailureThreshold"))
        }
        if let fullyQualifiedDomainName = fullyQualifiedDomainName {
            try container.encode(fullyQualifiedDomainName, forKey: ClientRuntime.Key("FullyQualifiedDomainName"))
        }
        if let healthCheckVersion = healthCheckVersion {
            try container.encode(healthCheckVersion, forKey: ClientRuntime.Key("HealthCheckVersion"))
        }
        if let healthThreshold = healthThreshold {
            try container.encode(healthThreshold, forKey: ClientRuntime.Key("HealthThreshold"))
        }
        if let iPAddress = iPAddress {
            try container.encode(iPAddress, forKey: ClientRuntime.Key("IPAddress"))
        }
        if let insufficientDataHealthStatus = insufficientDataHealthStatus {
            try container.encode(insufficientDataHealthStatus, forKey: ClientRuntime.Key("InsufficientDataHealthStatus"))
        }
        if let inverted = inverted {
            try container.encode(inverted, forKey: ClientRuntime.Key("Inverted"))
        }
        if let port = port {
            try container.encode(port, forKey: ClientRuntime.Key("Port"))
        }
        if let regions = regions {
            var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
            for healthcheckregion0 in regions {
                try regionsContainer.encode(healthcheckregion0, forKey: ClientRuntime.Key("Region"))
            }
        }
        if let resetElements = resetElements {
            var resetElementsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResetElements"))
            for resettableelementname0 in resetElements {
                try resetElementsContainer.encode(resettableelementname0, forKey: ClientRuntime.Key("ResettableElementName"))
            }
        }
        if let resourcePath = resourcePath {
            try container.encode(resourcePath, forKey: ClientRuntime.Key("ResourcePath"))
        }
        if let searchString = searchString {
            try container.encode(searchString, forKey: ClientRuntime.Key("SearchString"))
        }
    }
}

public struct UpdateHealthCheckInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateHealthCheckInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateHealthCheckInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateHealthCheckOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateHealthCheckInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateHealthCheckOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateHealthCheckOutputError>
}

public struct UpdateHealthCheckInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateHealthCheckInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateHealthCheckInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateHealthCheckOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateHealthCheckInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateHealthCheckOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateHealthCheckOutputError>
}

/// <p>A complex type that contains information about a request to update a health check.</p>
public struct UpdateHealthCheckInput: Swift.Equatable {
    /// <p>A complex type that identifies the CloudWatch alarm that you want Amazon Route 53 health checkers to use to determine whether
    /// 			the specified health check is healthy.</p>
    public let alarmIdentifier: Route53ClientTypes.AlarmIdentifier?
    /// <p>A complex type that contains one <code>ChildHealthCheck</code> element for each health check that you want to associate with a
    /// 			<code>CALCULATED</code> health check.</p>
    public let childHealthChecks: [Swift.String]?
    /// <p>Stops Route 53 from performing health checks. When you disable a health check, here's what happens:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <b>Health checks that check the health of endpoints:</b>
    /// 				Route 53 stops submitting requests to your application, server, or other resource.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Calculated health checks:</b>
    /// 				Route 53 stops aggregating the status of the referenced health checks.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>Health checks that monitor CloudWatch alarms:</b>
    /// 				Route 53 stops monitoring the corresponding CloudWatch metrics.</p>
    ///             </li>
    ///          </ul>
    /// 			
    /// 		       <p>After you disable a health check, Route 53 considers the status of the health check to always be healthy. If you configured DNS failover,
    /// 			Route 53 continues to route traffic to the corresponding resources. If you want to stop routing traffic to a resource, change the value of
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_UpdateHealthCheck.html#Route53-UpdateHealthCheck-request-Inverted">Inverted</a>.
    /// 		</p>
    /// 		
    /// 		       <p>Charges for a health check still apply when the health check is disabled. For more information, see
    /// 			<a href="http://aws.amazon.com/route53/pricing/">Amazon Route 53 Pricing</a>.</p>
    public let disabled: Swift.Bool?
    /// <p>Specify whether you want Amazon Route 53 to send the value of <code>FullyQualifiedDomainName</code> to the endpoint in the <code>client_hello</code>
    /// 			message during <code>TLS</code> negotiation. This allows the endpoint to respond to <code>HTTPS</code> health check requests with the applicable
    /// 			SSL/TLS certificate.</p>
    /// 		       <p>Some endpoints require that HTTPS requests include the host name in the <code>client_hello</code> message. If you don't enable SNI,
    /// 			the status of the health check will be SSL alert <code>handshake_failure</code>. A health check can also have that status for other reasons.
    /// 			If SNI is enabled and you're still getting the error, check the SSL/TLS configuration on your endpoint and confirm that your certificate is valid.</p>
    /// 		       <p>The SSL/TLS certificate on your endpoint includes a domain name in the <code>Common Name</code> field and possibly several more
    /// 			in the <code>Subject Alternative Names</code> field. One of the domain names in the certificate should match the value that you specify for
    /// 			<code>FullyQualifiedDomainName</code>. If the endpoint responds to the <code>client_hello</code> message with a certificate that does not
    /// 			include the domain name that you specified in <code>FullyQualifiedDomainName</code>, a health checker will retry the handshake. In the
    /// 			second attempt, the health checker will omit <code>FullyQualifiedDomainName</code> from the <code>client_hello</code> message.</p>
    public let enableSNI: Swift.Bool?
    /// <p>The number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint
    /// 			from unhealthy to healthy or vice versa. For more information, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-determining-health-of-endpoints.html">How Amazon Route 53 Determines Whether an Endpoint Is Healthy</a>
    /// 			in the <i>Amazon Route 53 Developer Guide</i>.</p>
    /// 		       <p>If you don't specify a value for <code>FailureThreshold</code>, the default value is three health checks.</p>
    public let failureThreshold: Swift.Int?
    /// <p>Amazon Route 53 behavior depends on whether you specify a value for <code>IPAddress</code>.</p>
    /// 		
    /// 		       <note>
    ///             <p>If a health check already has a value for <code>IPAddress</code>, you can change the value. However, you can't update an
    /// 			existing health check to add or remove the value of <code>IPAddress</code>. </p>
    ///          </note>
    /// 		
    /// 		       <p>
    ///             <b>If you specify a value for</b>
    ///             <code>IPAddress</code>:</p>
    /// 		       <p>Route 53 sends health check requests to the specified IPv4 or IPv6 address and passes the value of <code>FullyQualifiedDomainName</code>
    /// 			in the <code>Host</code> header for all health checks except TCP health checks. This is typically the fully qualified DNS name of the endpoint
    /// 			on which you want Route 53 to perform health checks.</p>
    /// 		       <p>When Route 53 checks the health of an endpoint, here is how it constructs the <code>Host</code> header:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>If you specify a value of <code>80</code> for <code>Port</code> and <code>HTTP</code> or <code>HTTP_STR_MATCH</code> for
    /// 					<code>Type</code>, Route 53 passes the value of <code>FullyQualifiedDomainName</code> to the endpoint in the <code>Host</code> header.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>If you specify a value of <code>443</code> for <code>Port</code> and <code>HTTPS</code> or <code>HTTPS_STR_MATCH</code> for
    /// 					<code>Type</code>, Route 53 passes the value of <code>FullyQualifiedDomainName</code> to the endpoint in the <code>Host</code> header.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>If you specify another value for <code>Port</code> and any value except <code>TCP</code> for <code>Type</code>, Route 53 passes
    /// 					<i>
    ///                      <code>FullyQualifiedDomainName</code>:<code>Port</code>
    ///                   </i> to the endpoint in the <code>Host</code> header.</p>
    /// 			         </li>
    ///          </ul>
    /// 		       <p>If you don't specify a value for <code>FullyQualifiedDomainName</code>, Route 53 substitutes the value of <code>IPAddress</code>
    /// 			in the <code>Host</code> header in each of the above cases.</p>
    /// 		
    /// 		       <p>
    ///             <b>If you don't specify a value for</b>
    ///             <code>IPAddress</code>:</p>
    /// 		       <p>If you don't specify a value for <code>IPAddress</code>, Route 53 sends a DNS request to the domain that you specify in
    /// 			<code>FullyQualifiedDomainName</code> at the interval you specify in <code>RequestInterval</code>. Using an IPv4 address that is
    /// 			returned by DNS, Route 53 then checks the health of the endpoint.</p>
    /// 		       <note>
    ///             <p>If you don't specify a value for <code>IPAddress</code>, Route 53 uses only IPv4 to send health checks to the endpoint.
    /// 			If there's no resource record set with a type of A for the name that you specify for <code>FullyQualifiedDomainName</code>,
    /// 			the health check fails with a "DNS resolution failed" error.</p>
    ///          </note>
    /// 		       <p>If you want to check the health of weighted, latency, or failover resource record sets and you choose to specify the endpoint only by
    /// 			<code>FullyQualifiedDomainName</code>, we recommend that you create a separate health check for each endpoint. For example, create a
    /// 			health check for each HTTP server that is serving content for www.example.com. For the value of <code>FullyQualifiedDomainName</code>,
    /// 			specify the domain name of the server (such as <code>us-east-2-www.example.com</code>), not the name of the resource record sets (www.example.com).</p>
    /// 		       <important>
    /// 			         <p>In this configuration, if the value of <code>FullyQualifiedDomainName</code> matches the name of the resource record sets and
    /// 				you then associate the health check with those resource record sets, health check results will be unpredictable.</p>
    /// 		       </important>
    /// 		       <p>In addition, if the value of <code>Type</code> is <code>HTTP</code>, <code>HTTPS</code>, <code>HTTP_STR_MATCH</code>, or
    /// 			<code>HTTPS_STR_MATCH</code>, Route 53 passes the value of <code>FullyQualifiedDomainName</code> in the <code>Host</code> header, as it does
    /// 			when you specify a value for <code>IPAddress</code>. If the value of <code>Type</code> is <code>TCP</code>, Route 53 doesn't pass a
    /// 			<code>Host</code> header.</p>
    public let fullyQualifiedDomainName: Swift.String?
    /// <p>The ID for the health check for which you want detailed information. When you created the health check,
    /// 			<code>CreateHealthCheck</code> returned the ID in the response, in the <code>HealthCheckId</code> element.</p>
    public let healthCheckId: Swift.String?
    /// <p>A sequential counter that Amazon Route 53 sets to <code>1</code> when you create a health check and increments by 1 each time you
    /// 			update settings for the health check.</p>
    /// 		       <p>We recommend that you use <code>GetHealthCheck</code> or <code>ListHealthChecks</code> to get the current value of
    /// 			<code>HealthCheckVersion</code> for the health check that you want to update, and that you include that value in your
    /// 			<code>UpdateHealthCheck</code> request. This prevents Route 53 from overwriting an intervening update:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>If the value in the <code>UpdateHealthCheck</code> request matches the value of <code>HealthCheckVersion</code> in the
    /// 					health check, Route 53 updates the health check with the new settings.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>If the value of <code>HealthCheckVersion</code> in the health check is greater, the health check was changed after you
    /// 					got the version number. Route 53 does not update the health check, and it returns a <code>HealthCheckVersionMismatch</code> error.</p>
    /// 			         </li>
    ///          </ul>
    public let healthCheckVersion: Swift.Int?
    /// <p>The number of child health checks that are associated with a <code>CALCULATED</code> health that Amazon Route 53 must consider healthy for the
    /// 			<code>CALCULATED</code> health check to be considered healthy. To specify the child health checks that you want to associate with a
    /// 			<code>CALCULATED</code> health check, use the <code>ChildHealthChecks</code> and <code>ChildHealthCheck</code> elements.</p>
    /// 		       <p>Note the following:</p>
    /// 		       <ul>
    ///             <li>
    /// 				           <p>If you specify a number greater than the number of child health checks, Route 53 always considers this health check to be unhealthy.</p>
    /// 			         </li>
    ///             <li>
    /// 				           <p>If you specify <code>0</code>, Route 53 always considers this health check to be healthy.</p>
    /// 			         </li>
    ///          </ul>
    public let healthThreshold: Swift.Int?
    /// <p>The IPv4 or IPv6 IP address for the endpoint that you want Amazon Route 53 to perform health checks on. If you don't specify a value for
    /// 			<code>IPAddress</code>, Route 53 sends a DNS request to resolve the domain name that you specify in <code>FullyQualifiedDomainName</code>
    /// 			at the interval that you specify in <code>RequestInterval</code>. Using an IP address that is returned by DNS, Route 53 then
    /// 			checks the health of the endpoint.</p>
    /// 		       <p>Use one of the following formats for the value of <code>IPAddress</code>: </p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <b>IPv4 address</b>: four values between 0 and 255, separated by periods (.),
    /// 				for example, <code>192.0.2.44</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <b>IPv6 address</b>: eight groups of four hexadecimal values, separated by colons (:),
    /// 				for example, <code>2001:0db8:85a3:0000:0000:abcd:0001:2345</code>. You can also shorten IPv6 addresses as described in RFC 5952,
    /// 				for example, <code>2001:db8:85a3::abcd:1:2345</code>.</p>
    ///             </li>
    ///          </ul>
    /// 		       <p>If the endpoint is an EC2 instance, we recommend that you create an Elastic IP address, associate it with your EC2 instance, and
    /// 			specify the Elastic IP address for <code>IPAddress</code>. This ensures that the IP address of your instance never changes. For more information,
    /// 			see the applicable documentation:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>Linux: <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses (EIP)</a> in the
    /// 				<i>Amazon EC2 User Guide for Linux Instances</i>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>Windows: <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses (EIP)</a> in the
    /// 				<i>Amazon EC2 User Guide for Windows Instances</i>
    ///                </p>
    ///             </li>
    ///          </ul>
    /// 		       <note>
    ///             <p>If a health check already has a value for <code>IPAddress</code>, you can change the value. However, you can't update an
    /// 			existing health check to add or remove the value of <code>IPAddress</code>. </p>
    /// 		       </note>
    /// 		       <p>For more information, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_UpdateHealthCheck.html#Route53-UpdateHealthCheck-request-FullyQualifiedDomainName">FullyQualifiedDomainName</a>.
    /// 		</p>
    /// 		       <p>Constraints: Route 53 can't check the health of endpoints for which the IP address is in local, private, non-routable, or
    /// 			multicast ranges. For more information about IP addresses for which you can't create health checks, see the following
    /// 			documents:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <a href="https://tools.ietf.org/html/rfc5735">RFC 5735, Special Use IPv4 Addresses</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://tools.ietf.org/html/rfc6598">RFC 6598, IANA-Reserved IPv4 Prefix for Shared Address Space</a>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <a href="https://tools.ietf.org/html/rfc5156">RFC 5156, Special-Use IPv6 Addresses</a>
    ///                </p>
    ///             </li>
    ///          </ul>
    public let iPAddress: Swift.String?
    /// <p>When CloudWatch has insufficient data about the metric to determine the alarm state, the status that you want Amazon Route 53 to assign
    /// 			to the health check:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>Healthy</code>: Route 53 considers the health check to be healthy.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Unhealthy</code>: Route 53 considers the health check to be unhealthy.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>LastKnownStatus</code>: Route 53 uses the status of the health check from the last time CloudWatch had sufficient data
    /// 				to determine the alarm state. For new health checks that have no last known status, the default status for the health check is healthy.</p>
    ///             </li>
    ///          </ul>
    public let insufficientDataHealthStatus: Route53ClientTypes.InsufficientDataHealthStatus?
    /// <p>Specify whether you want Amazon Route 53 to invert the status of a health check, for example, to consider a health check unhealthy when it
    /// 			otherwise would be considered healthy.</p>
    public let inverted: Swift.Bool?
    /// <p>The port on the endpoint that you want Amazon Route 53 to perform health checks on.</p>
    /// 		       <note>
    /// 			         <p>Don't specify a value for <code>Port</code> when you specify a value for <code>Type</code> of <code>CLOUDWATCH_METRIC</code> or
    /// 				<code>CALCULATED</code>.</p>
    /// 		       </note>
    public let port: Swift.Int?
    /// <p>A complex type that contains one <code>Region</code> element for each region that you want Amazon Route 53 health checkers to check
    /// 			the specified endpoint from.</p>
    public let regions: [Route53ClientTypes.HealthCheckRegion]?
    /// <p>A complex type that contains one <code>ResettableElementName</code> element for each element that you want to reset to the default value.
    /// 			Valid values for <code>ResettableElementName</code> include the following:</p>
    /// 		       <ul>
    ///             <li>
    ///                <p>
    ///                   <code>ChildHealthChecks</code>: Amazon Route 53 resets
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html#Route53-Type-HealthCheckConfig-ChildHealthChecks">ChildHealthChecks</a>
    /// 				to null.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FullyQualifiedDomainName</code>: Route 53 resets
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_UpdateHealthCheck.html#Route53-UpdateHealthCheck-request-FullyQualifiedDomainName">FullyQualifiedDomainName</a>.
    /// 				to null.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>Regions</code>: Route 53 resets the
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html#Route53-Type-HealthCheckConfig-Regions">Regions</a>
    /// 				list to the default set of regions. </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>ResourcePath</code>: Route 53 resets
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html#Route53-Type-HealthCheckConfig-ResourcePath">ResourcePath</a>
    /// 				to null.</p>
    ///             </li>
    ///          </ul>
    public let resetElements: [Route53ClientTypes.ResettableElementName]?
    /// <p>The path that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint
    /// 			will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, for example the file /docs/route53-health-check.html.
    /// 			You can also include query string parameters, for example, <code>/welcome.html?language=jp&login=y</code>. </p>
    /// 		       <p>Specify this value only if you want to change it.</p>
    public let resourcePath: Swift.String?
    /// <p>If the value of <code>Type</code> is <code>HTTP_STR_MATCH</code> or <code>HTTPS_STR_MATCH</code>, the string that you want
    /// 			Amazon Route 53 to search for in the response body from the specified resource. If the string appears in the response body, Route 53 considers
    /// 			the resource healthy. (You can't change the value of <code>Type</code> when you update a health check.)</p>
    public let searchString: Swift.String?

    public init (
        alarmIdentifier: Route53ClientTypes.AlarmIdentifier? = nil,
        childHealthChecks: [Swift.String]? = nil,
        disabled: Swift.Bool? = nil,
        enableSNI: Swift.Bool? = nil,
        failureThreshold: Swift.Int? = nil,
        fullyQualifiedDomainName: Swift.String? = nil,
        healthCheckId: Swift.String? = nil,
        healthCheckVersion: Swift.Int? = nil,
        healthThreshold: Swift.Int? = nil,
        iPAddress: Swift.String? = nil,
        insufficientDataHealthStatus: Route53ClientTypes.InsufficientDataHealthStatus? = nil,
        inverted: Swift.Bool? = nil,
        port: Swift.Int? = nil,
        regions: [Route53ClientTypes.HealthCheckRegion]? = nil,
        resetElements: [Route53ClientTypes.ResettableElementName]? = nil,
        resourcePath: Swift.String? = nil,
        searchString: Swift.String? = nil
    )
    {
        self.alarmIdentifier = alarmIdentifier
        self.childHealthChecks = childHealthChecks
        self.disabled = disabled
        self.enableSNI = enableSNI
        self.failureThreshold = failureThreshold
        self.fullyQualifiedDomainName = fullyQualifiedDomainName
        self.healthCheckId = healthCheckId
        self.healthCheckVersion = healthCheckVersion
        self.healthThreshold = healthThreshold
        self.iPAddress = iPAddress
        self.insufficientDataHealthStatus = insufficientDataHealthStatus
        self.inverted = inverted
        self.port = port
        self.regions = regions
        self.resetElements = resetElements
        self.resourcePath = resourcePath
        self.searchString = searchString
    }
}

struct UpdateHealthCheckInputBody: Swift.Equatable {
    public let healthCheckVersion: Swift.Int?
    public let iPAddress: Swift.String?
    public let port: Swift.Int?
    public let resourcePath: Swift.String?
    public let fullyQualifiedDomainName: Swift.String?
    public let searchString: Swift.String?
    public let failureThreshold: Swift.Int?
    public let inverted: Swift.Bool?
    public let disabled: Swift.Bool?
    public let healthThreshold: Swift.Int?
    public let childHealthChecks: [Swift.String]?
    public let enableSNI: Swift.Bool?
    public let regions: [Route53ClientTypes.HealthCheckRegion]?
    public let alarmIdentifier: Route53ClientTypes.AlarmIdentifier?
    public let insufficientDataHealthStatus: Route53ClientTypes.InsufficientDataHealthStatus?
    public let resetElements: [Route53ClientTypes.ResettableElementName]?
}

extension UpdateHealthCheckInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alarmIdentifier = "AlarmIdentifier"
        case childHealthChecks = "ChildHealthChecks"
        case disabled = "Disabled"
        case enableSNI = "EnableSNI"
        case failureThreshold = "FailureThreshold"
        case fullyQualifiedDomainName = "FullyQualifiedDomainName"
        case healthCheckVersion = "HealthCheckVersion"
        case healthThreshold = "HealthThreshold"
        case iPAddress = "IPAddress"
        case insufficientDataHealthStatus = "InsufficientDataHealthStatus"
        case inverted = "Inverted"
        case port = "Port"
        case regions = "Regions"
        case resetElements = "ResetElements"
        case resourcePath = "ResourcePath"
        case searchString = "SearchString"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthCheckVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthCheckVersion)
        healthCheckVersion = healthCheckVersionDecoded
        let iPAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iPAddress)
        iPAddress = iPAddressDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
        let resourcePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePath)
        resourcePath = resourcePathDecoded
        let fullyQualifiedDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fullyQualifiedDomainName)
        fullyQualifiedDomainName = fullyQualifiedDomainNameDecoded
        let searchStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .searchString)
        searchString = searchStringDecoded
        let failureThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failureThreshold)
        failureThreshold = failureThresholdDecoded
        let invertedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .inverted)
        inverted = invertedDecoded
        let disabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disabled)
        disabled = disabledDecoded
        let healthThresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .healthThreshold)
        healthThreshold = healthThresholdDecoded
        if containerValues.contains(.childHealthChecks) {
            struct KeyVal0{struct ChildHealthCheck{}}
            let childHealthChecksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ChildHealthCheck>.CodingKeys.self, forKey: .childHealthChecks)
            if let childHealthChecksWrappedContainer = childHealthChecksWrappedContainer {
                let childHealthChecksContainer = try childHealthChecksWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var childHealthChecksBuffer:[Swift.String]? = nil
                if let childHealthChecksContainer = childHealthChecksContainer {
                    childHealthChecksBuffer = [Swift.String]()
                    for stringContainer0 in childHealthChecksContainer {
                        childHealthChecksBuffer?.append(stringContainer0)
                    }
                }
                childHealthChecks = childHealthChecksBuffer
            } else {
                childHealthChecks = []
            }
        } else {
            childHealthChecks = nil
        }
        let enableSNIDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableSNI)
        enableSNI = enableSNIDecoded
        if containerValues.contains(.regions) {
            struct KeyVal0{struct Region{}}
            let regionsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.Region>.CodingKeys.self, forKey: .regions)
            if let regionsWrappedContainer = regionsWrappedContainer {
                let regionsContainer = try regionsWrappedContainer.decodeIfPresent([Route53ClientTypes.HealthCheckRegion].self, forKey: .member)
                var regionsBuffer:[Route53ClientTypes.HealthCheckRegion]? = nil
                if let regionsContainer = regionsContainer {
                    regionsBuffer = [Route53ClientTypes.HealthCheckRegion]()
                    for stringContainer0 in regionsContainer {
                        regionsBuffer?.append(stringContainer0)
                    }
                }
                regions = regionsBuffer
            } else {
                regions = []
            }
        } else {
            regions = nil
        }
        let alarmIdentifierDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.AlarmIdentifier.self, forKey: .alarmIdentifier)
        alarmIdentifier = alarmIdentifierDecoded
        let insufficientDataHealthStatusDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.InsufficientDataHealthStatus.self, forKey: .insufficientDataHealthStatus)
        insufficientDataHealthStatus = insufficientDataHealthStatusDecoded
        if containerValues.contains(.resetElements) {
            struct KeyVal0{struct ResettableElementName{}}
            let resetElementsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.ResettableElementName>.CodingKeys.self, forKey: .resetElements)
            if let resetElementsWrappedContainer = resetElementsWrappedContainer {
                let resetElementsContainer = try resetElementsWrappedContainer.decodeIfPresent([Route53ClientTypes.ResettableElementName].self, forKey: .member)
                var resetElementsBuffer:[Route53ClientTypes.ResettableElementName]? = nil
                if let resetElementsContainer = resetElementsContainer {
                    resetElementsBuffer = [Route53ClientTypes.ResettableElementName]()
                    for stringContainer0 in resetElementsContainer {
                        resetElementsBuffer?.append(stringContainer0)
                    }
                }
                resetElements = resetElementsBuffer
            } else {
                resetElements = []
            }
        } else {
            resetElements = nil
        }
    }
}

extension UpdateHealthCheckOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateHealthCheckOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "HealthCheckVersionMismatch" : self = .healthCheckVersionMismatch(try HealthCheckVersionMismatch(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHealthCheck" : self = .noSuchHealthCheck(try NoSuchHealthCheck(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateHealthCheckOutputError: Swift.Error, Swift.Equatable {
    case healthCheckVersionMismatch(HealthCheckVersionMismatch)
    case invalidInput(InvalidInput)
    case noSuchHealthCheck(NoSuchHealthCheck)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateHealthCheckOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateHealthCheckOutputResponse(healthCheck: \(Swift.String(describing: healthCheck)))"}
}

extension UpdateHealthCheckOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateHealthCheckOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.healthCheck = output.healthCheck
        } else {
            self.healthCheck = nil
        }
    }
}

/// <p>A complex type that contains the response to the <code>UpdateHealthCheck</code> request.</p>
public struct UpdateHealthCheckOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains the response to an <code>UpdateHealthCheck</code> request.</p>
    public let healthCheck: Route53ClientTypes.HealthCheck?

    public init (
        healthCheck: Route53ClientTypes.HealthCheck? = nil
    )
    {
        self.healthCheck = healthCheck
    }
}

struct UpdateHealthCheckOutputResponseBody: Swift.Equatable {
    public let healthCheck: Route53ClientTypes.HealthCheck?
}

extension UpdateHealthCheckOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheck = "HealthCheck"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthCheckDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HealthCheck.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
    }
}

public struct UpdateHostedZoneCommentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateHostedZoneCommentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateHostedZoneCommentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateHostedZoneCommentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateHostedZoneCommentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateHostedZoneCommentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateHostedZoneCommentOutputError>
}

extension UpdateHostedZoneCommentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateHostedZoneCommentInput(comment: \(Swift.String(describing: comment)), id: \(Swift.String(describing: id)))"}
}

extension UpdateHostedZoneCommentInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension UpdateHostedZoneCommentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let comment = comment {
            try container.encode(comment, forKey: ClientRuntime.Key("Comment"))
        }
    }
}

public struct UpdateHostedZoneCommentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateHostedZoneCommentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateHostedZoneCommentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateHostedZoneCommentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateHostedZoneCommentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateHostedZoneCommentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateHostedZoneCommentOutputError>
}

public struct UpdateHostedZoneCommentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateHostedZoneCommentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateHostedZoneCommentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateHostedZoneCommentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateHostedZoneCommentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateHostedZoneCommentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateHostedZoneCommentOutputError>
}

/// <p>A request to update the comment for a hosted zone.</p>
public struct UpdateHostedZoneCommentInput: Swift.Equatable {
    /// <p>The new comment for the hosted zone. If you don't specify a value for <code>Comment</code>, Amazon Route 53 deletes the existing value of the
    /// 			<code>Comment</code> element, if any.</p>
    public let comment: Swift.String?
    /// <p>The ID for the hosted zone that you want to update the comment for.</p>
    public let id: Swift.String?

    public init (
        comment: Swift.String? = nil,
        id: Swift.String? = nil
    )
    {
        self.comment = comment
        self.id = id
    }
}

struct UpdateHostedZoneCommentInputBody: Swift.Equatable {
    public let comment: Swift.String?
}

extension UpdateHostedZoneCommentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
    }
}

extension UpdateHostedZoneCommentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateHostedZoneCommentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchHostedZone" : self = .noSuchHostedZone(try NoSuchHostedZone(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateHostedZoneCommentOutputError: Swift.Error, Swift.Equatable {
    case invalidInput(InvalidInput)
    case noSuchHostedZone(NoSuchHostedZone)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateHostedZoneCommentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateHostedZoneCommentOutputResponse(hostedZone: \(Swift.String(describing: hostedZone)))"}
}

extension UpdateHostedZoneCommentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateHostedZoneCommentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hostedZone = output.hostedZone
        } else {
            self.hostedZone = nil
        }
    }
}

/// <p>A complex type that contains the response to the <code>UpdateHostedZoneComment</code> request.</p>
public struct UpdateHostedZoneCommentOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains the response to the <code>UpdateHostedZoneComment</code> request.</p>
    public let hostedZone: Route53ClientTypes.HostedZone?

    public init (
        hostedZone: Route53ClientTypes.HostedZone? = nil
    )
    {
        self.hostedZone = hostedZone
    }
}

struct UpdateHostedZoneCommentOutputResponseBody: Swift.Equatable {
    public let hostedZone: Route53ClientTypes.HostedZone?
}

extension UpdateHostedZoneCommentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostedZone = "HostedZone"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostedZoneDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.HostedZone.self, forKey: .hostedZone)
        hostedZone = hostedZoneDecoded
    }
}

public struct UpdateTrafficPolicyCommentInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTrafficPolicyCommentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTrafficPolicyCommentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTrafficPolicyCommentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTrafficPolicyCommentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTrafficPolicyCommentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTrafficPolicyCommentOutputError>
}

extension UpdateTrafficPolicyCommentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTrafficPolicyCommentInput(comment: \(Swift.String(describing: comment)), id: \(Swift.String(describing: id)), version: \(Swift.String(describing: version)))"}
}

extension UpdateTrafficPolicyCommentInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension UpdateTrafficPolicyCommentInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let comment = comment {
            try container.encode(comment, forKey: ClientRuntime.Key("Comment"))
        }
    }
}

public struct UpdateTrafficPolicyCommentInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTrafficPolicyCommentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTrafficPolicyCommentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTrafficPolicyCommentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTrafficPolicyCommentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTrafficPolicyCommentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTrafficPolicyCommentOutputError>
}

public struct UpdateTrafficPolicyCommentInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTrafficPolicyCommentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTrafficPolicyCommentInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTrafficPolicyCommentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTrafficPolicyCommentInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTrafficPolicyCommentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTrafficPolicyCommentOutputError>
}

/// <p>A complex type that contains information about the traffic policy that you want to update the comment for.</p>
public struct UpdateTrafficPolicyCommentInput: Swift.Equatable {
    /// <p>The new comment for the specified traffic policy and version.</p>
    public let comment: Swift.String?
    /// <p>The value of <code>Id</code> for the traffic policy that you want to update the comment for.</p>
    public let id: Swift.String?
    /// <p>The value of <code>Version</code> for the traffic policy that you want to update the comment for.</p>
    public let version: Swift.Int?

    public init (
        comment: Swift.String? = nil,
        id: Swift.String? = nil,
        version: Swift.Int? = nil
    )
    {
        self.comment = comment
        self.id = id
        self.version = version
    }
}

struct UpdateTrafficPolicyCommentInputBody: Swift.Equatable {
    public let comment: Swift.String?
}

extension UpdateTrafficPolicyCommentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comment = "Comment"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let commentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .comment)
        comment = commentDecoded
    }
}

extension UpdateTrafficPolicyCommentOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateTrafficPolicyCommentOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConcurrentModification" : self = .concurrentModification(try ConcurrentModification(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicy" : self = .noSuchTrafficPolicy(try NoSuchTrafficPolicy(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTrafficPolicyCommentOutputError: Swift.Error, Swift.Equatable {
    case concurrentModification(ConcurrentModification)
    case invalidInput(InvalidInput)
    case noSuchTrafficPolicy(NoSuchTrafficPolicy)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTrafficPolicyCommentOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTrafficPolicyCommentOutputResponse(trafficPolicy: \(Swift.String(describing: trafficPolicy)))"}
}

extension UpdateTrafficPolicyCommentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateTrafficPolicyCommentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trafficPolicy = output.trafficPolicy
        } else {
            self.trafficPolicy = nil
        }
    }
}

/// <p>A complex type that contains the response information for the traffic policy.</p>
public struct UpdateTrafficPolicyCommentOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains settings for the specified traffic policy.</p>
    public let trafficPolicy: Route53ClientTypes.TrafficPolicy?

    public init (
        trafficPolicy: Route53ClientTypes.TrafficPolicy? = nil
    )
    {
        self.trafficPolicy = trafficPolicy
    }
}

struct UpdateTrafficPolicyCommentOutputResponseBody: Swift.Equatable {
    public let trafficPolicy: Route53ClientTypes.TrafficPolicy?
}

extension UpdateTrafficPolicyCommentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trafficPolicy = "TrafficPolicy"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficPolicyDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.TrafficPolicy.self, forKey: .trafficPolicy)
        trafficPolicy = trafficPolicyDecoded
    }
}

public struct UpdateTrafficPolicyInstanceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTrafficPolicyInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTrafficPolicyInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTrafficPolicyInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTrafficPolicyInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTrafficPolicyInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTrafficPolicyInstanceOutputError>
}

extension UpdateTrafficPolicyInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTrafficPolicyInstanceInput(id: \(Swift.String(describing: id)), tTL: \(Swift.String(describing: tTL)), trafficPolicyId: \(Swift.String(describing: trafficPolicyId)), trafficPolicyVersion: \(Swift.String(describing: trafficPolicyVersion)))"}
}

extension UpdateTrafficPolicyInstanceInput: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension UpdateTrafficPolicyInstanceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tTL = "TTL"
        case trafficPolicyId = "TrafficPolicyId"
        case trafficPolicyVersion = "TrafficPolicyVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let tTL = tTL {
            try container.encode(tTL, forKey: ClientRuntime.Key("TTL"))
        }
        if let trafficPolicyId = trafficPolicyId {
            try container.encode(trafficPolicyId, forKey: ClientRuntime.Key("TrafficPolicyId"))
        }
        if let trafficPolicyVersion = trafficPolicyVersion {
            try container.encode(trafficPolicyVersion, forKey: ClientRuntime.Key("TrafficPolicyVersion"))
        }
    }
}

public struct UpdateTrafficPolicyInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTrafficPolicyInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTrafficPolicyInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTrafficPolicyInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTrafficPolicyInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTrafficPolicyInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTrafficPolicyInstanceOutputError>
}

public struct UpdateTrafficPolicyInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTrafficPolicyInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTrafficPolicyInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTrafficPolicyInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTrafficPolicyInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTrafficPolicyInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTrafficPolicyInstanceOutputError>
}

/// <p>A complex type that contains information about the resource record sets that you want to update based on a specified traffic policy instance.</p>
public struct UpdateTrafficPolicyInstanceInput: Swift.Equatable {
    /// <p>The ID of the traffic policy instance that you want to update.</p>
    public let id: Swift.String?
    /// <p>The TTL that you want Amazon Route 53 to assign to all of the updated resource record sets.</p>
    public let tTL: Swift.Int?
    /// <p>The ID of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    public let trafficPolicyId: Swift.String?
    /// <p>The version of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    public let trafficPolicyVersion: Swift.Int?

    public init (
        id: Swift.String? = nil,
        tTL: Swift.Int? = nil,
        trafficPolicyId: Swift.String? = nil,
        trafficPolicyVersion: Swift.Int? = nil
    )
    {
        self.id = id
        self.tTL = tTL
        self.trafficPolicyId = trafficPolicyId
        self.trafficPolicyVersion = trafficPolicyVersion
    }
}

struct UpdateTrafficPolicyInstanceInputBody: Swift.Equatable {
    public let tTL: Swift.Int?
    public let trafficPolicyId: Swift.String?
    public let trafficPolicyVersion: Swift.Int?
}

extension UpdateTrafficPolicyInstanceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tTL = "TTL"
        case trafficPolicyId = "TrafficPolicyId"
        case trafficPolicyVersion = "TrafficPolicyVersion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tTLDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tTL)
        tTL = tTLDecoded
        let trafficPolicyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trafficPolicyId)
        trafficPolicyId = trafficPolicyIdDecoded
        let trafficPolicyVersionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .trafficPolicyVersion)
        trafficPolicyVersion = trafficPolicyVersionDecoded
    }
}

extension UpdateTrafficPolicyInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateTrafficPolicyInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConflictingTypes" : self = .conflictingTypes(try ConflictingTypes(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInput" : self = .invalidInput(try InvalidInput(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicy" : self = .noSuchTrafficPolicy(try NoSuchTrafficPolicy(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchTrafficPolicyInstance" : self = .noSuchTrafficPolicyInstance(try NoSuchTrafficPolicyInstance(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PriorRequestNotComplete" : self = .priorRequestNotComplete(try PriorRequestNotComplete(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTrafficPolicyInstanceOutputError: Swift.Error, Swift.Equatable {
    case conflictingTypes(ConflictingTypes)
    case invalidInput(InvalidInput)
    case noSuchTrafficPolicy(NoSuchTrafficPolicy)
    case noSuchTrafficPolicyInstance(NoSuchTrafficPolicyInstance)
    case priorRequestNotComplete(PriorRequestNotComplete)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTrafficPolicyInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTrafficPolicyInstanceOutputResponse(trafficPolicyInstance: \(Swift.String(describing: trafficPolicyInstance)))"}
}

extension UpdateTrafficPolicyInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateTrafficPolicyInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trafficPolicyInstance = output.trafficPolicyInstance
        } else {
            self.trafficPolicyInstance = nil
        }
    }
}

/// <p>A complex type that contains information about the resource record sets that Amazon Route 53
/// 			created based on a specified traffic policy.</p>
public struct UpdateTrafficPolicyInstanceOutputResponse: Swift.Equatable {
    /// <p>A complex type that contains settings for the updated traffic policy instance.</p>
    public let trafficPolicyInstance: Route53ClientTypes.TrafficPolicyInstance?

    public init (
        trafficPolicyInstance: Route53ClientTypes.TrafficPolicyInstance? = nil
    )
    {
        self.trafficPolicyInstance = trafficPolicyInstance
    }
}

struct UpdateTrafficPolicyInstanceOutputResponseBody: Swift.Equatable {
    public let trafficPolicyInstance: Route53ClientTypes.TrafficPolicyInstance?
}

extension UpdateTrafficPolicyInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trafficPolicyInstance = "TrafficPolicyInstance"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trafficPolicyInstanceDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.TrafficPolicyInstance.self, forKey: .trafficPolicyInstance)
        trafficPolicyInstance = trafficPolicyInstanceDecoded
    }
}

extension Route53ClientTypes.VPC: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vPCId = "VPCId"
        case vPCRegion = "VPCRegion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: ClientRuntime.Key("xmlns"))
        }
        if let vPCId = vPCId {
            try container.encode(vPCId, forKey: ClientRuntime.Key("VPCId"))
        }
        if let vPCRegion = vPCRegion {
            try container.encode(vPCRegion, forKey: ClientRuntime.Key("VPCRegion"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vPCRegionDecoded = try containerValues.decodeIfPresent(Route53ClientTypes.VPCRegion.self, forKey: .vPCRegion)
        vPCRegion = vPCRegionDecoded
        let vPCIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vPCId)
        vPCId = vPCIdDecoded
    }
}

extension Route53ClientTypes.VPC: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VPC(vPCId: \(Swift.String(describing: vPCId)), vPCRegion: \(Swift.String(describing: vPCRegion)))"}
}

extension Route53ClientTypes.VPC: ClientRuntime.DynamicNodeEncoding {
    public static func nodeEncoding(for key: Swift.CodingKey) -> ClientRuntime.NodeEncoding {
        let xmlNamespaceValues = [
            "xmlns"
        ]
        if let key = key as? ClientRuntime.Key {
            if xmlNamespaceValues.contains(key.stringValue) {
                return .attribute
            }
        }
        return .element
    }
}

extension Route53ClientTypes {
    /// <p>(Private hosted zones only) A complex type that contains information about an Amazon VPC.</p>
    public struct VPC: Swift.Equatable {
        /// <p>(Private hosted zones only) The ID of an Amazon VPC. </p>
        public let vPCId: Swift.String?
        /// <p>(Private hosted zones only) The region that an Amazon VPC was created in.</p>
        public let vPCRegion: Route53ClientTypes.VPCRegion?

        public init (
            vPCId: Swift.String? = nil,
            vPCRegion: Route53ClientTypes.VPCRegion? = nil
        )
        {
            self.vPCId = vPCId
            self.vPCRegion = vPCRegion
        }
    }

}

extension VPCAssociationAuthorizationNotFound: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VPCAssociationAuthorizationNotFound(message: \(Swift.String(describing: message)))"}
}

extension VPCAssociationAuthorizationNotFound: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<VPCAssociationAuthorizationNotFoundBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The VPC that you specified is not authorized to be associated with the hosted zone.</p>
public struct VPCAssociationAuthorizationNotFound: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p></p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct VPCAssociationAuthorizationNotFoundBody: Swift.Equatable {
    public let message: Swift.String?
}

extension VPCAssociationAuthorizationNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension VPCAssociationNotFound: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VPCAssociationNotFound(message: \(Swift.String(describing: message)))"}
}

extension VPCAssociationNotFound: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<VPCAssociationNotFoundBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified VPC and hosted zone are not currently associated.</p>
public struct VPCAssociationNotFound: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The specified VPC or hosted zone weren't found.</p>
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct VPCAssociationNotFoundBody: Swift.Equatable {
    public let message: Swift.String?
}

extension VPCAssociationNotFoundBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53ClientTypes {
    public enum VPCRegion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case afSouth1
        case apEast1
        case apNortheast1
        case apNortheast2
        case apNortheast3
        case apSouth1
        case apSoutheast1
        case apSoutheast2
        case caCentral1
        case cnNorth1
        case euCentral1
        case euNorth1
        case euSouth1
        case euWest1
        case euWest2
        case euWest3
        case meSouth1
        case saEast1
        case usEast1
        case usEast2
        case usGovEast1
        case usGovWest1
        case usIsoEast1
        case usIsobEast1
        case usWest1
        case usWest2
        case sdkUnknown(Swift.String)

        public static var allCases: [VPCRegion] {
            return [
                .afSouth1,
                .apEast1,
                .apNortheast1,
                .apNortheast2,
                .apNortheast3,
                .apSouth1,
                .apSoutheast1,
                .apSoutheast2,
                .caCentral1,
                .cnNorth1,
                .euCentral1,
                .euNorth1,
                .euSouth1,
                .euWest1,
                .euWest2,
                .euWest3,
                .meSouth1,
                .saEast1,
                .usEast1,
                .usEast2,
                .usGovEast1,
                .usGovWest1,
                .usIsoEast1,
                .usIsobEast1,
                .usWest1,
                .usWest2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .afSouth1: return "af-south-1"
            case .apEast1: return "ap-east-1"
            case .apNortheast1: return "ap-northeast-1"
            case .apNortheast2: return "ap-northeast-2"
            case .apNortheast3: return "ap-northeast-3"
            case .apSouth1: return "ap-south-1"
            case .apSoutheast1: return "ap-southeast-1"
            case .apSoutheast2: return "ap-southeast-2"
            case .caCentral1: return "ca-central-1"
            case .cnNorth1: return "cn-north-1"
            case .euCentral1: return "eu-central-1"
            case .euNorth1: return "eu-north-1"
            case .euSouth1: return "eu-south-1"
            case .euWest1: return "eu-west-1"
            case .euWest2: return "eu-west-2"
            case .euWest3: return "eu-west-3"
            case .meSouth1: return "me-south-1"
            case .saEast1: return "sa-east-1"
            case .usEast1: return "us-east-1"
            case .usEast2: return "us-east-2"
            case .usGovEast1: return "us-gov-east-1"
            case .usGovWest1: return "us-gov-west-1"
            case .usIsoEast1: return "us-iso-east-1"
            case .usIsobEast1: return "us-isob-east-1"
            case .usWest1: return "us-west-1"
            case .usWest2: return "us-west-2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VPCRegion(rawValue: rawValue) ?? VPCRegion.sdkUnknown(rawValue)
        }
    }
}
