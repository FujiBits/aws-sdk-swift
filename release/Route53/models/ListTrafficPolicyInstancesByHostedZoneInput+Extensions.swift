// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListTrafficPolicyInstancesByHostedZoneInputHeadersMiddleware: Middleware {
    public let id: String = "ListTrafficPolicyInstancesByHostedZoneInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTrafficPolicyInstancesByHostedZoneInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTrafficPolicyInstancesByHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTrafficPolicyInstancesByHostedZoneInput>
    public typealias MOutput = OperationOutput<ListTrafficPolicyInstancesByHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTrafficPolicyInstancesByHostedZoneOutputError>
}

public struct ListTrafficPolicyInstancesByHostedZoneInputQueryItemMiddleware: Middleware {
    public let id: String = "ListTrafficPolicyInstancesByHostedZoneInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListTrafficPolicyInstancesByHostedZoneInput>,
                  next: H) -> Swift.Result<OperationOutput<ListTrafficPolicyInstancesByHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let trafficPolicyInstanceNameMarker = input.operationInput.trafficPolicyInstanceNameMarker {
            let trafficPolicyInstanceNameMarkerQueryItem = URLQueryItem(name: "trafficpolicyinstancename".urlPercentEncoding(), value: String(trafficPolicyInstanceNameMarker).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyInstanceNameMarkerQueryItem)
        }
        if let hostedZoneId = input.operationInput.hostedZoneId {
            let hostedZoneIdQueryItem = URLQueryItem(name: "id".urlPercentEncoding(), value: String(hostedZoneId).urlPercentEncoding())
            input.builder.withQueryItem(hostedZoneIdQueryItem)
        }
        if let trafficPolicyInstanceTypeMarker = input.operationInput.trafficPolicyInstanceTypeMarker {
            let trafficPolicyInstanceTypeMarkerQueryItem = URLQueryItem(name: "trafficpolicyinstancetype".urlPercentEncoding(), value: String(trafficPolicyInstanceTypeMarker.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(trafficPolicyInstanceTypeMarkerQueryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let maxItemsQueryItem = URLQueryItem(name: "maxitems".urlPercentEncoding(), value: String(maxItems).urlPercentEncoding())
            input.builder.withQueryItem(maxItemsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListTrafficPolicyInstancesByHostedZoneInput>
    public typealias MOutput = OperationOutput<ListTrafficPolicyInstancesByHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListTrafficPolicyInstancesByHostedZoneOutputError>
}

extension ListTrafficPolicyInstancesByHostedZoneInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
