// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateHostedZoneInputHeadersMiddleware: Middleware {
    public let id: String = "CreateHostedZoneInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHostedZoneInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHostedZoneInput>
    public typealias MOutput = OperationOutput<CreateHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHostedZoneOutputError>
}

public struct CreateHostedZoneInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateHostedZoneInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHostedZoneInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHostedZoneInput>
    public typealias MOutput = OperationOutput<CreateHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHostedZoneOutputError>
}

public struct CreateHostedZoneInputBodyMiddleware: Middleware {
    public let id: String = "CreateHostedZoneInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHostedZoneInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHostedZoneOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHostedZoneInput>
    public typealias MOutput = OperationOutput<CreateHostedZoneOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHostedZoneOutputError>
}

extension CreateHostedZoneInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case callerReference = "CallerReference"
        case delegationSetId = "DelegationSetId"
        case hostedZoneConfig = "HostedZoneConfig"
        case name = "Name"
        case vPC = "VPC"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("https://route53.amazonaws.com/doc/2013-04-01/", forKey: Key("xmlns"))
        }
        if let callerReference = callerReference {
            try container.encode(callerReference, forKey: Key("callerReference"))
        }
        if let delegationSetId = delegationSetId {
            try container.encode(delegationSetId, forKey: Key("delegationSetId"))
        }
        if let hostedZoneConfig = hostedZoneConfig {
            try container.encode(hostedZoneConfig, forKey: Key("hostedZoneConfig"))
        }
        if let name = name {
            try container.encode(name, forKey: Key("name"))
        }
        if let vPC = vPC {
            try container.encode(vPC, forKey: Key("vPC"))
        }
    }
}
