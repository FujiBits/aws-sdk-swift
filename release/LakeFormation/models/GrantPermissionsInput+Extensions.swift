// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GrantPermissionsInputHeadersMiddleware: Middleware {
    public let id: String = "GrantPermissionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GrantPermissionsInput>,
                  next: H) -> Swift.Result<OperationOutput<GrantPermissionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GrantPermissionsInput>
    public typealias MOutput = OperationOutput<GrantPermissionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GrantPermissionsOutputError>
}

public struct GrantPermissionsInputQueryItemMiddleware: Middleware {
    public let id: String = "GrantPermissionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GrantPermissionsInput>,
                  next: H) -> Swift.Result<OperationOutput<GrantPermissionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GrantPermissionsInput>
    public typealias MOutput = OperationOutput<GrantPermissionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GrantPermissionsOutputError>
}

public struct GrantPermissionsInputBodyMiddleware: Middleware {
    public let id: String = "GrantPermissionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GrantPermissionsInput>,
                  next: H) -> Swift.Result<OperationOutput<GrantPermissionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GrantPermissionsInput>
    public typealias MOutput = OperationOutput<GrantPermissionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GrantPermissionsOutputError>
}

extension GrantPermissionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case catalogId = "CatalogId"
        case permissions = "Permissions"
        case permissionsWithGrantOption = "PermissionsWithGrantOption"
        case principal = "Principal"
        case resource = "Resource"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalogId = catalogId {
            try encodeContainer.encode(catalogId, forKey: .catalogId)
        }
        if let permissions = permissions {
            var permissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissions)
            for permissionlist0 in permissions {
                try permissionsContainer.encode(permissionlist0.rawValue)
            }
        }
        if let permissionsWithGrantOption = permissionsWithGrantOption {
            var permissionsWithGrantOptionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .permissionsWithGrantOption)
            for permissionlist0 in permissionsWithGrantOption {
                try permissionsWithGrantOptionContainer.encode(permissionlist0.rawValue)
            }
        }
        if let principal = principal {
            try encodeContainer.encode(principal, forKey: .principal)
        }
        if let resource = resource {
            try encodeContainer.encode(resource, forKey: .resource)
        }
    }
}
