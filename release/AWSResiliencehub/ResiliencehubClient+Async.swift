// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ResiliencehubClient {
    /// Adds the resource mapping for the draft application version.
    func addDraftAppVersionResourceMappings(input: AddDraftAppVersionResourceMappingsInput) async throws -> AddDraftAppVersionResourceMappingsOutputResponse
    {
        typealias addDraftAppVersionResourceMappingsContinuation = CheckedContinuation<AddDraftAppVersionResourceMappingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addDraftAppVersionResourceMappingsContinuation) in
            addDraftAppVersionResourceMappings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a Resilience Hub application. A Resilience Hub application is a collection of Amazon Web Services resources structured to prevent and recover Amazon Web Services application disruptions. To describe a Resilience Hub application, you provide an application name, resources from one or more–up to five–CloudFormation stacks, and an appropriate resiliency policy. After you create a Resilience Hub application, you publish it so that you can run a resiliency assessment on it. You can then use recommendations from the assessment to improve resiliency by running another assessment, comparing results, and then iterating the process until you achieve your goals for recovery time objective (RTO) and recovery point objective (RPO).
    func createApp(input: CreateAppInput) async throws -> CreateAppOutputResponse
    {
        typealias createAppContinuation = CheckedContinuation<CreateAppOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAppContinuation) in
            createApp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new recommendation template.
    func createRecommendationTemplate(input: CreateRecommendationTemplateInput) async throws -> CreateRecommendationTemplateOutputResponse
    {
        typealias createRecommendationTemplateContinuation = CheckedContinuation<CreateRecommendationTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRecommendationTemplateContinuation) in
            createRecommendationTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a resiliency policy for an application.
    func createResiliencyPolicy(input: CreateResiliencyPolicyInput) async throws -> CreateResiliencyPolicyOutputResponse
    {
        typealias createResiliencyPolicyContinuation = CheckedContinuation<CreateResiliencyPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createResiliencyPolicyContinuation) in
            createResiliencyPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an AWS Resilience Hub application. This is a destructive action that can't be undone.
    func deleteApp(input: DeleteAppInput) async throws -> DeleteAppOutputResponse
    {
        typealias deleteAppContinuation = CheckedContinuation<DeleteAppOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAppContinuation) in
            deleteApp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an AWS Resilience Hub application assessment. This is a destructive action that can't be undone.
    func deleteAppAssessment(input: DeleteAppAssessmentInput) async throws -> DeleteAppAssessmentOutputResponse
    {
        typealias deleteAppAssessmentContinuation = CheckedContinuation<DeleteAppAssessmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAppAssessmentContinuation) in
            deleteAppAssessment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a recommendation template. This is a destructive action that can't be undone.
    func deleteRecommendationTemplate(input: DeleteRecommendationTemplateInput) async throws -> DeleteRecommendationTemplateOutputResponse
    {
        typealias deleteRecommendationTemplateContinuation = CheckedContinuation<DeleteRecommendationTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRecommendationTemplateContinuation) in
            deleteRecommendationTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a resiliency policy. This is a destructive action that can't be undone.
    func deleteResiliencyPolicy(input: DeleteResiliencyPolicyInput) async throws -> DeleteResiliencyPolicyOutputResponse
    {
        typealias deleteResiliencyPolicyContinuation = CheckedContinuation<DeleteResiliencyPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteResiliencyPolicyContinuation) in
            deleteResiliencyPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an AWS Resilience Hub application.
    func describeApp(input: DescribeAppInput) async throws -> DescribeAppOutputResponse
    {
        typealias describeAppContinuation = CheckedContinuation<DescribeAppOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAppContinuation) in
            describeApp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an assessment for an AWS Resilience Hub application.
    func describeAppAssessment(input: DescribeAppAssessmentInput) async throws -> DescribeAppAssessmentOutputResponse
    {
        typealias describeAppAssessmentContinuation = CheckedContinuation<DescribeAppAssessmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAppAssessmentContinuation) in
            describeAppAssessment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the resolution status for the specified resolution identifier for an application version. If resolutionId is not specified, the current resolution status is returned.
    func describeAppVersionResourcesResolutionStatus(input: DescribeAppVersionResourcesResolutionStatusInput) async throws -> DescribeAppVersionResourcesResolutionStatusOutputResponse
    {
        typealias describeAppVersionResourcesResolutionStatusContinuation = CheckedContinuation<DescribeAppVersionResourcesResolutionStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAppVersionResourcesResolutionStatusContinuation) in
            describeAppVersionResourcesResolutionStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes details about an AWS Resilience Hub
    func describeAppVersionTemplate(input: DescribeAppVersionTemplateInput) async throws -> DescribeAppVersionTemplateOutputResponse
    {
        typealias describeAppVersionTemplateContinuation = CheckedContinuation<DescribeAppVersionTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAppVersionTemplateContinuation) in
            describeAppVersionTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the status of importing resources to an application version.
    func describeDraftAppVersionResourcesImportStatus(input: DescribeDraftAppVersionResourcesImportStatusInput) async throws -> DescribeDraftAppVersionResourcesImportStatusOutputResponse
    {
        typealias describeDraftAppVersionResourcesImportStatusContinuation = CheckedContinuation<DescribeDraftAppVersionResourcesImportStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDraftAppVersionResourcesImportStatusContinuation) in
            describeDraftAppVersionResourcesImportStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a specified resiliency policy for an AWS Resilience Hub application. The returned policy object includes creation time, data location constraints, the Amazon Resource Name (ARN) for the policy, tags, tier, and more.
    func describeResiliencyPolicy(input: DescribeResiliencyPolicyInput) async throws -> DescribeResiliencyPolicyOutputResponse
    {
        typealias describeResiliencyPolicyContinuation = CheckedContinuation<DescribeResiliencyPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeResiliencyPolicyContinuation) in
            describeResiliencyPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Imports resources from sources such as a CloudFormation stack, resource-groups, or application registry app to a draft application version.
    func importResourcesToDraftAppVersion(input: ImportResourcesToDraftAppVersionInput) async throws -> ImportResourcesToDraftAppVersionOutputResponse
    {
        typealias importResourcesToDraftAppVersionContinuation = CheckedContinuation<ImportResourcesToDraftAppVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: importResourcesToDraftAppVersionContinuation) in
            importResourcesToDraftAppVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the alarm recommendations for a AWS Resilience Hub application.
    func listAlarmRecommendations(input: ListAlarmRecommendationsInput) async throws -> ListAlarmRecommendationsOutputResponse
    {
        typealias listAlarmRecommendationsContinuation = CheckedContinuation<ListAlarmRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAlarmRecommendationsContinuation) in
            listAlarmRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the assessments for an AWS Resilience Hub application. You can use request parameters to refine the results for the response object.
    func listAppAssessments(input: ListAppAssessmentsInput) async throws -> ListAppAssessmentsOutputResponse
    {
        typealias listAppAssessmentsContinuation = CheckedContinuation<ListAppAssessmentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAppAssessmentsContinuation) in
            listAppAssessments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the compliances for an AWS Resilience Hub component.
    func listAppComponentCompliances(input: ListAppComponentCompliancesInput) async throws -> ListAppComponentCompliancesOutputResponse
    {
        typealias listAppComponentCompliancesContinuation = CheckedContinuation<ListAppComponentCompliancesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAppComponentCompliancesContinuation) in
            listAppComponentCompliances(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the recommendations for an AWS Resilience Hub component.
    func listAppComponentRecommendations(input: ListAppComponentRecommendationsInput) async throws -> ListAppComponentRecommendationsOutputResponse
    {
        typealias listAppComponentRecommendationsContinuation = CheckedContinuation<ListAppComponentRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAppComponentRecommendationsContinuation) in
            listAppComponentRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists how the resources in an application version are mapped/sourced from. Mappings can be physical resource identifiers, CloudFormation stacks, resource-groups, or an application registry app.
    func listAppVersionResourceMappings(input: ListAppVersionResourceMappingsInput) async throws -> ListAppVersionResourceMappingsOutputResponse
    {
        typealias listAppVersionResourceMappingsContinuation = CheckedContinuation<ListAppVersionResourceMappingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAppVersionResourceMappingsContinuation) in
            listAppVersionResourceMappings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all the resources in an application version.
    func listAppVersionResources(input: ListAppVersionResourcesInput) async throws -> ListAppVersionResourcesOutputResponse
    {
        typealias listAppVersionResourcesContinuation = CheckedContinuation<ListAppVersionResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAppVersionResourcesContinuation) in
            listAppVersionResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the different versions for the Resilience Hub applications.
    func listAppVersions(input: ListAppVersionsInput) async throws -> ListAppVersionsOutputResponse
    {
        typealias listAppVersionsContinuation = CheckedContinuation<ListAppVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAppVersionsContinuation) in
            listAppVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists your Resilience Hub applications.
    func listApps(input: ListAppsInput) async throws -> ListAppsOutputResponse
    {
        typealias listAppsContinuation = CheckedContinuation<ListAppsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAppsContinuation) in
            listApps(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the recommendation templates for the Resilience Hub applications.
    func listRecommendationTemplates(input: ListRecommendationTemplatesInput) async throws -> ListRecommendationTemplatesOutputResponse
    {
        typealias listRecommendationTemplatesContinuation = CheckedContinuation<ListRecommendationTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRecommendationTemplatesContinuation) in
            listRecommendationTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the resiliency policies for the Resilience Hub applications.
    func listResiliencyPolicies(input: ListResiliencyPoliciesInput) async throws -> ListResiliencyPoliciesOutputResponse
    {
        typealias listResiliencyPoliciesContinuation = CheckedContinuation<ListResiliencyPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResiliencyPoliciesContinuation) in
            listResiliencyPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the standard operating procedure (SOP) recommendations for the Resilience Hub applications.
    func listSopRecommendations(input: ListSopRecommendationsInput) async throws -> ListSopRecommendationsOutputResponse
    {
        typealias listSopRecommendationsContinuation = CheckedContinuation<ListSopRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSopRecommendationsContinuation) in
            listSopRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the suggested resiliency policies for the Resilience Hub applications.
    func listSuggestedResiliencyPolicies(input: ListSuggestedResiliencyPoliciesInput) async throws -> ListSuggestedResiliencyPoliciesOutputResponse
    {
        typealias listSuggestedResiliencyPoliciesContinuation = CheckedContinuation<ListSuggestedResiliencyPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSuggestedResiliencyPoliciesContinuation) in
            listSuggestedResiliencyPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags for your resources in your Resilience Hub applications.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the test recommendations for the Resilience Hub application.
    func listTestRecommendations(input: ListTestRecommendationsInput) async throws -> ListTestRecommendationsOutputResponse
    {
        typealias listTestRecommendationsContinuation = CheckedContinuation<ListTestRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTestRecommendationsContinuation) in
            listTestRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the resources that are not currently supported in AWS Resilience Hub. An unsupported resource is a resource that exists in the object that was used to create an app, but is not supported by Resilience Hub.
    func listUnsupportedAppVersionResources(input: ListUnsupportedAppVersionResourcesInput) async throws -> ListUnsupportedAppVersionResourcesOutputResponse
    {
        typealias listUnsupportedAppVersionResourcesContinuation = CheckedContinuation<ListUnsupportedAppVersionResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUnsupportedAppVersionResourcesContinuation) in
            listUnsupportedAppVersionResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Publishes a new version of a specific Resilience Hub application.
    func publishAppVersion(input: PublishAppVersionInput) async throws -> PublishAppVersionOutputResponse
    {
        typealias publishAppVersionContinuation = CheckedContinuation<PublishAppVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: publishAppVersionContinuation) in
            publishAppVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or updates the app template for a draft version of a Resilience Hub app.
    func putDraftAppVersionTemplate(input: PutDraftAppVersionTemplateInput) async throws -> PutDraftAppVersionTemplateOutputResponse
    {
        typealias putDraftAppVersionTemplateContinuation = CheckedContinuation<PutDraftAppVersionTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putDraftAppVersionTemplateContinuation) in
            putDraftAppVersionTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes resource mappings from a draft application version.
    func removeDraftAppVersionResourceMappings(input: RemoveDraftAppVersionResourceMappingsInput) async throws -> RemoveDraftAppVersionResourceMappingsOutputResponse
    {
        typealias removeDraftAppVersionResourceMappingsContinuation = CheckedContinuation<RemoveDraftAppVersionResourceMappingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeDraftAppVersionResourceMappingsContinuation) in
            removeDraftAppVersionResourceMappings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Resolves the resources for an application version.
    func resolveAppVersionResources(input: ResolveAppVersionResourcesInput) async throws -> ResolveAppVersionResourcesOutputResponse
    {
        typealias resolveAppVersionResourcesContinuation = CheckedContinuation<ResolveAppVersionResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resolveAppVersionResourcesContinuation) in
            resolveAppVersionResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new application assessment for an application.
    func startAppAssessment(input: StartAppAssessmentInput) async throws -> StartAppAssessmentOutputResponse
    {
        typealias startAppAssessmentContinuation = CheckedContinuation<StartAppAssessmentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startAppAssessmentContinuation) in
            startAppAssessment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Applies one or more tags to a resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes one or more tags from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an application.
    func updateApp(input: UpdateAppInput) async throws -> UpdateAppOutputResponse
    {
        typealias updateAppContinuation = CheckedContinuation<UpdateAppOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateAppContinuation) in
            updateApp(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a resiliency policy.
    func updateResiliencyPolicy(input: UpdateResiliencyPolicyInput) async throws -> UpdateResiliencyPolicyOutputResponse
    {
        typealias updateResiliencyPolicyContinuation = CheckedContinuation<UpdateResiliencyPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateResiliencyPolicyContinuation) in
            updateResiliencyPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
