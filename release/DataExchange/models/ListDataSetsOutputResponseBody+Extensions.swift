// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListDataSetsOutputResponseBody: Equatable {
    public let dataSets: [DataSetEntry]?
    public let nextToken: String?
}

extension ListDataSetsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case dataSets = "DataSets"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSetsContainer = try containerValues.decodeIfPresent([DataSetEntry?].self, forKey: .dataSets)
        var dataSetsDecoded0:[DataSetEntry]? = nil
        if let dataSetsContainer = dataSetsContainer {
            dataSetsDecoded0 = [DataSetEntry]()
            for structure0 in dataSetsContainer {
                if let structure0 = structure0 {
                    dataSetsDecoded0?.append(structure0)
                }
            }
        }
        dataSets = dataSetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
