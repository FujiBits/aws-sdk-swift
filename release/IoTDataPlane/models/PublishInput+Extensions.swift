// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PublishInputHeadersMiddleware: Middleware {
    public let id: String = "PublishInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PublishInput>,
                  next: H) -> Swift.Result<OperationOutput<PublishOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PublishInput>
    public typealias MOutput = OperationOutput<PublishOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PublishOutputError>
}

public struct PublishInputQueryItemMiddleware: Middleware {
    public let id: String = "PublishInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PublishInput>,
                  next: H) -> Swift.Result<OperationOutput<PublishOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        let qosQueryItem = URLQueryItem(name: "qos".urlPercentEncoding(), value: String(input.operationInput.qos).urlPercentEncoding())
        input.builder.withQueryItem(qosQueryItem)
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PublishInput>
    public typealias MOutput = OperationOutput<PublishOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PublishOutputError>
}

public struct PublishInputBodyMiddleware: Middleware {
    public let id: String = "PublishInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PublishInput>,
                  next: H) -> Swift.Result<OperationOutput<PublishOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let payload = input.operationInput.payload {
            let data = payload
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PublishInput>
    public typealias MOutput = OperationOutput<PublishOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PublishOutputError>
}

extension PublishInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case payload
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let payload = payload {
            try encodeContainer.encode(payload.base64EncodedString(), forKey: .payload)
        }
    }
}
