// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetRecommendationsInputHeadersMiddleware: Middleware {
    public let id: String = "GetRecommendationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetRecommendationsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetRecommendationsInput>
    public typealias MOutput = OperationOutput<GetRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetRecommendationsOutputError>
}

public struct GetRecommendationsInputQueryItemMiddleware: Middleware {
    public let id: String = "GetRecommendationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetRecommendationsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetRecommendationsInput>
    public typealias MOutput = OperationOutput<GetRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetRecommendationsOutputError>
}

public struct GetRecommendationsInputBodyMiddleware: Middleware {
    public let id: String = "GetRecommendationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetRecommendationsInput>,
                  next: H) -> Swift.Result<OperationOutput<GetRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetRecommendationsInput>
    public typealias MOutput = OperationOutput<GetRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetRecommendationsOutputError>
}

extension GetRecommendationsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case campaignArn
        case context
        case filterArn
        case filterValues
        case itemId
        case numResults
        case userId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let campaignArn = campaignArn {
            try encodeContainer.encode(campaignArn, forKey: .campaignArn)
        }
        if let context = context {
            var contextContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .context)
            for (dictKey0, context0) in context {
                try contextContainer.encode(context0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let filterArn = filterArn {
            try encodeContainer.encode(filterArn, forKey: .filterArn)
        }
        if let filterValues = filterValues {
            var filterValuesContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .filterValues)
            for (dictKey0, filtervalues0) in filterValues {
                try filterValuesContainer.encode(filtervalues0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let itemId = itemId {
            try encodeContainer.encode(itemId, forKey: .itemId)
        }
        if numResults != 0 {
            try encodeContainer.encode(numResults, forKey: .numResults)
        }
        if let userId = userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
    }
}
