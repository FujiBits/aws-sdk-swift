// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension PersonalizeRuntimeClient {
    /// <p>Re-ranks a list of recommended items for the given user. The first item in the list is
    ///       deemed the most likely item to be of interest to the user.</p>
    ///          <note>
    ///             <p>The solution backing the campaign must have been created using a recipe of type
    ///         PERSONALIZED_RANKING.</p>
    ///          </note>
    func getPersonalizedRanking(input: GetPersonalizedRankingInput) async throws -> GetPersonalizedRankingOutputResponse
    {
        typealias getPersonalizedRankingContinuation = CheckedContinuation<GetPersonalizedRankingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPersonalizedRankingContinuation) in
            getPersonalizedRanking(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of recommended items. The required input depends on the recipe type used to
    ///       create the solution backing the campaign, as follows:</p>
    ///          <ul>
    ///             <li>
    ///                <p>RELATED_ITEMS - <code>itemId</code> required, <code>userId</code> not used</p>
    ///             </li>
    ///             <li>
    ///                <p>USER_PERSONALIZATION - <code>itemId</code> optional, <code>userId</code>
    ///           required</p>
    ///             </li>
    ///          </ul>
    ///          <note>
    ///             <p>Campaigns that are backed by a solution created using a recipe of type
    ///         PERSONALIZED_RANKING use the  API.</p>
    ///          </note>
    func getRecommendations(input: GetRecommendationsInput) async throws -> GetRecommendationsOutputResponse
    {
        typealias getRecommendationsContinuation = CheckedContinuation<GetRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRecommendationsContinuation) in
            getRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
