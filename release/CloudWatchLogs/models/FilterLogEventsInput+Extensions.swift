// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct FilterLogEventsInputHeadersMiddleware: Middleware {
    public let id: String = "FilterLogEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<FilterLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<FilterLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<FilterLogEventsInput>
    public typealias MOutput = OperationOutput<FilterLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<FilterLogEventsOutputError>
}

public struct FilterLogEventsInputQueryItemMiddleware: Middleware {
    public let id: String = "FilterLogEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<FilterLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<FilterLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<FilterLogEventsInput>
    public typealias MOutput = OperationOutput<FilterLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<FilterLogEventsOutputError>
}

public struct FilterLogEventsInputBodyMiddleware: Middleware {
    public let id: String = "FilterLogEventsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<FilterLogEventsInput>,
                  next: H) -> Swift.Result<OperationOutput<FilterLogEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<FilterLogEventsInput>
    public typealias MOutput = OperationOutput<FilterLogEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<FilterLogEventsOutputError>
}

extension FilterLogEventsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case endTime
        case filterPattern
        case interleaved
        case limit
        case logGroupName
        case logStreamNamePrefix
        case logStreamNames
        case nextToken
        case startTime
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let filterPattern = filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let interleaved = interleaved {
            try encodeContainer.encode(interleaved, forKey: .interleaved)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamNamePrefix = logStreamNamePrefix {
            try encodeContainer.encode(logStreamNamePrefix, forKey: .logStreamNamePrefix)
        }
        if let logStreamNames = logStreamNames {
            var logStreamNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logStreamNames)
            for inputlogstreamnames0 in logStreamNames {
                try logStreamNamesContainer.encode(inputlogstreamnames0)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }
}
