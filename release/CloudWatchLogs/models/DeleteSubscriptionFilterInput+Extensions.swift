// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DeleteSubscriptionFilterInputHeadersMiddleware: Middleware {
    public let id: String = "DeleteSubscriptionFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSubscriptionFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSubscriptionFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSubscriptionFilterInput>
    public typealias MOutput = OperationOutput<DeleteSubscriptionFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSubscriptionFilterOutputError>
}

public struct DeleteSubscriptionFilterInputQueryItemMiddleware: Middleware {
    public let id: String = "DeleteSubscriptionFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSubscriptionFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSubscriptionFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSubscriptionFilterInput>
    public typealias MOutput = OperationOutput<DeleteSubscriptionFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSubscriptionFilterOutputError>
}

public struct DeleteSubscriptionFilterInputBodyMiddleware: Middleware {
    public let id: String = "DeleteSubscriptionFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeleteSubscriptionFilterInput>,
                  next: H) -> Swift.Result<OperationOutput<DeleteSubscriptionFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeleteSubscriptionFilterInput>
    public typealias MOutput = OperationOutput<DeleteSubscriptionFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeleteSubscriptionFilterOutputError>
}

extension DeleteSubscriptionFilterInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filterName
        case logGroupName
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterName = filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}
