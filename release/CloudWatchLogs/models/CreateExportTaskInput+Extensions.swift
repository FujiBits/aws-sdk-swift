// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateExportTaskInputHeadersMiddleware: Middleware {
    public let id: String = "CreateExportTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateExportTaskInput>
    public typealias MOutput = OperationOutput<CreateExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateExportTaskOutputError>
}

public struct CreateExportTaskInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateExportTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateExportTaskInput>
    public typealias MOutput = OperationOutput<CreateExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateExportTaskOutputError>
}

public struct CreateExportTaskInputBodyMiddleware: Middleware {
    public let id: String = "CreateExportTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateExportTaskInput>
    public typealias MOutput = OperationOutput<CreateExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateExportTaskOutputError>
}

extension CreateExportTaskInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case destination
        case destinationPrefix
        case from
        case logGroupName
        case logStreamNamePrefix
        case taskName
        case to
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationPrefix = destinationPrefix {
            try encodeContainer.encode(destinationPrefix, forKey: .destinationPrefix)
        }
        if let from = from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamNamePrefix = logStreamNamePrefix {
            try encodeContainer.encode(logStreamNamePrefix, forKey: .logStreamNamePrefix)
        }
        if let taskName = taskName {
            try encodeContainer.encode(taskName, forKey: .taskName)
        }
        if let to = to {
            try encodeContainer.encode(to, forKey: .to)
        }
    }
}
