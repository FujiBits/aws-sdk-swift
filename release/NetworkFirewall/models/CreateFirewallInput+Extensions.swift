// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateFirewallInputHeadersMiddleware: Middleware {
    public let id: String = "CreateFirewallInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFirewallInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFirewallOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFirewallInput>
    public typealias MOutput = OperationOutput<CreateFirewallOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFirewallOutputError>
}

public struct CreateFirewallInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateFirewallInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFirewallInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFirewallOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFirewallInput>
    public typealias MOutput = OperationOutput<CreateFirewallOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFirewallOutputError>
}

public struct CreateFirewallInputBodyMiddleware: Middleware {
    public let id: String = "CreateFirewallInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateFirewallInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateFirewallOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateFirewallInput>
    public typealias MOutput = OperationOutput<CreateFirewallOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateFirewallOutputError>
}

extension CreateFirewallInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case deleteProtection = "DeleteProtection"
        case description = "Description"
        case firewallName = "FirewallName"
        case firewallPolicyArn = "FirewallPolicyArn"
        case firewallPolicyChangeProtection = "FirewallPolicyChangeProtection"
        case subnetChangeProtection = "SubnetChangeProtection"
        case subnetMappings = "SubnetMappings"
        case tags = "Tags"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if deleteProtection != false {
            try encodeContainer.encode(deleteProtection, forKey: .deleteProtection)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let firewallName = firewallName {
            try encodeContainer.encode(firewallName, forKey: .firewallName)
        }
        if let firewallPolicyArn = firewallPolicyArn {
            try encodeContainer.encode(firewallPolicyArn, forKey: .firewallPolicyArn)
        }
        if firewallPolicyChangeProtection != false {
            try encodeContainer.encode(firewallPolicyChangeProtection, forKey: .firewallPolicyChangeProtection)
        }
        if subnetChangeProtection != false {
            try encodeContainer.encode(subnetChangeProtection, forKey: .subnetChangeProtection)
        }
        if let subnetMappings = subnetMappings {
            var subnetMappingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetMappings)
            for subnetmappings0 in subnetMappings {
                try subnetMappingsContainer.encode(subnetmappings0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }
}
