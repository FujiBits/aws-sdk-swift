// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension CodeartifactClient {
    /// <p>Adds an existing external connection to a repository. One external connection is allowed
    ///       per repository.</p>
    ///          <note>
    ///             <p>A repository can have one or more upstream repositories, or an external connection.</p>
    ///          </note>
    func associateExternalConnection(input: AssociateExternalConnectionInput) async throws -> AssociateExternalConnectionOutputResponse
    {
        typealias associateExternalConnectionContinuation = CheckedContinuation<AssociateExternalConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateExternalConnectionContinuation) in
            associateExternalConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Copies package versions from one repository to another repository in the same domain.
    ///       </p>
    ///          <note>
    ///             <p>
    ///         You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.
    ///       </p>
    ///          </note>
    func copyPackageVersions(input: CopyPackageVersionsInput) async throws -> CopyPackageVersionsOutputResponse
    {
        typealias copyPackageVersionsContinuation = CheckedContinuation<CopyPackageVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: copyPackageVersionsContinuation) in
            copyPackageVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Creates a domain. CodeArtifact <i>domains</i> make it easier to manage multiple repositories across an
    ///         organization. You can use a domain to apply permissions across many
    ///         repositories owned by different AWS accounts. An asset is stored only once
    ///         in a domain, even if it's in multiple repositories.
    ///     </p>
    ///
    ///          <p>Although you can have multiple domains, we recommend a single production domain that contains all
    ///         published artifacts so that your development teams can find and share packages. You can use a second
    ///         pre-production domain to test changes to the production domain configuration.
    ///       </p>
    func createDomain(input: CreateDomainInput) async throws -> CreateDomainOutputResponse
    {
        typealias createDomainContinuation = CheckedContinuation<CreateDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDomainContinuation) in
            createDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Creates a repository.
    ///       </p>
    func createRepository(input: CreateRepositoryInput) async throws -> CreateRepositoryOutputResponse
    {
        typealias createRepositoryContinuation = CheckedContinuation<CreateRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRepositoryContinuation) in
            createRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Deletes a domain. You cannot delete a domain that contains repositories. If you want to delete a domain
    ///          with repositories, first delete its repositories.
    ///       </p>
    func deleteDomain(input: DeleteDomainInput) async throws -> DeleteDomainOutputResponse
    {
        typealias deleteDomainContinuation = CheckedContinuation<DeleteDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDomainContinuation) in
            deleteDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Deletes the resource policy set on a domain.
    ///       </p>
    func deleteDomainPermissionsPolicy(input: DeleteDomainPermissionsPolicyInput) async throws -> DeleteDomainPermissionsPolicyOutputResponse
    {
        typealias deleteDomainPermissionsPolicyContinuation = CheckedContinuation<DeleteDomainPermissionsPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDomainPermissionsPolicyContinuation) in
            deleteDomainPermissionsPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Deletes one or more versions of a package. A deleted package version cannot be restored
    ///       in your repository. If you want to remove a package version from your repository and be able
    ///       to restore it later, set its status to <code>Archived</code>. Archived packages cannot be
    ///       downloaded from a repository and don't show up with list package APIs (for example,
    ///           <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListackageVersions</a>), but you can restore them using <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_UpdatePackageVersionsStatus.html">UpdatePackageVersionsStatus</a>. </p>
    func deletePackageVersions(input: DeletePackageVersionsInput) async throws -> DeletePackageVersionsOutputResponse
    {
        typealias deletePackageVersionsContinuation = CheckedContinuation<DeletePackageVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePackageVersionsContinuation) in
            deletePackageVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Deletes a repository.
    ///        </p>
    func deleteRepository(input: DeleteRepositoryInput) async throws -> DeleteRepositoryOutputResponse
    {
        typealias deleteRepositoryContinuation = CheckedContinuation<DeleteRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRepositoryContinuation) in
            deleteRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Deletes the resource policy that is set on a repository. After a resource policy is deleted, the
    ///         permissions allowed and denied by the deleted policy are removed. The effect of deleting a resource policy might not be immediate.
    ///       </p>
    ///          <important>
    ///             <p>
    ///          Use <code>DeleteRepositoryPermissionsPolicy</code> with caution. After a policy is deleted, AWS users, roles, and accounts lose permissions to perform
    ///          the repository actions granted by the deleted policy.
    ///        </p>
    ///          </important>
    func deleteRepositoryPermissionsPolicy(input: DeleteRepositoryPermissionsPolicyInput) async throws -> DeleteRepositoryPermissionsPolicyOutputResponse
    {
        typealias deleteRepositoryPermissionsPolicyContinuation = CheckedContinuation<DeleteRepositoryPermissionsPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRepositoryPermissionsPolicyContinuation) in
            deleteRepositoryPermissionsPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Returns a
    ///       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DomainDescription.html">DomainDescription</a>
    ///       object that contains information about the requested domain.
    ///      </p>
    func describeDomain(input: DescribeDomainInput) async throws -> DescribeDomainOutputResponse
    {
        typealias describeDomainContinuation = CheckedContinuation<DescribeDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDomainContinuation) in
            describeDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///        Returns a
    ///        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">PackageVersionDescription</a>
    ///        object that contains information about the requested package version.
    ///      </p>
    func describePackageVersion(input: DescribePackageVersionInput) async throws -> DescribePackageVersionOutputResponse
    {
        typealias describePackageVersionContinuation = CheckedContinuation<DescribePackageVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePackageVersionContinuation) in
            describePackageVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Returns a <code>RepositoryDescription</code> object that contains detailed information
    ///         about the requested repository.
    ///        </p>
    func describeRepository(input: DescribeRepositoryInput) async throws -> DescribeRepositoryOutputResponse
    {
        typealias describeRepositoryContinuation = CheckedContinuation<DescribeRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRepositoryContinuation) in
            describeRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Removes an existing external connection from a repository.
    ///     </p>
    func disassociateExternalConnection(input: DisassociateExternalConnectionInput) async throws -> DisassociateExternalConnectionOutputResponse
    {
        typealias disassociateExternalConnectionContinuation = CheckedContinuation<DisassociateExternalConnectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateExternalConnectionContinuation) in
            disassociateExternalConnection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Deletes the assets in package versions and sets the package versions' status to <code>Disposed</code>.
    ///       A disposed package version cannot be restored in your repository because its assets are deleted.
    ///     </p>
    ///
    ///          <p>
    ///       To view all disposed package versions in a repository, use <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html">ListPackageVersions</a> and set the
    ///       <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_ListPackageVersions.html#API_ListPackageVersions_RequestSyntax">status</a> parameter
    ///       to <code>Disposed</code>.
    ///     </p>
    ///
    ///          <p>
    ///       To view information about a disposed package version, use <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DescribePackageVersion.html">DescribePackageVersion</a>.
    ///     </p>
    func disposePackageVersions(input: DisposePackageVersionsInput) async throws -> DisposePackageVersionsOutputResponse
    {
        typealias disposePackageVersionsContinuation = CheckedContinuation<DisposePackageVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disposePackageVersionsContinuation) in
            disposePackageVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Generates a temporary authorization token for accessing repositories in the domain.
    ///         This API requires the <code>codeartifact:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code> permissions.
    ///         For more information about authorization tokens, see
    ///         <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/tokens-authentication.html">AWS CodeArtifact authentication and tokens</a>.
    ///       </p>
    ///          <note>
    ///             <p>CodeArtifact authorization tokens are valid for a period of 12 hours when created with the <code>login</code> command.
    ///          You can call <code>login</code> periodically to refresh the token. When
    ///          you create an authorization token with the <code>GetAuthorizationToken</code> API, you can set a custom authorization period,
    ///          up to a maximum of 12 hours, with the <code>durationSeconds</code> parameter.</p>
    ///             <p>The authorization period begins after <code>login</code>
    ///          or <code>GetAuthorizationToken</code> is called. If <code>login</code> or <code>GetAuthorizationToken</code> is called while
    ///          assuming a role, the token lifetime is independent of the maximum session duration
    ///          of the role. For example, if you call <code>sts assume-role</code> and specify a session duration of 15 minutes, then
    ///          generate a CodeArtifact authorization token, the token will be valid for the full authorization period
    ///          even though this is longer than the 15-minute session duration.</p>
    ///             <p>See
    ///          <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM Roles</a>
    ///          for more information on controlling session duration. </p>
    ///          </note>
    func getAuthorizationToken(input: GetAuthorizationTokenInput) async throws -> GetAuthorizationTokenOutputResponse
    {
        typealias getAuthorizationTokenContinuation = CheckedContinuation<GetAuthorizationTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAuthorizationTokenContinuation) in
            getAuthorizationToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Returns the resource policy attached to the specified domain.
    ///       </p>
    ///          <note>
    ///             <p>
    ///          The policy is a resource-based policy, not an identity-based policy. For more information, see
    ///          <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html">Identity-based policies
    ///            and resource-based policies </a> in the <i>AWS Identity and Access Management User Guide</i>.
    ///        </p>
    ///          </note>
    func getDomainPermissionsPolicy(input: GetDomainPermissionsPolicyInput) async throws -> GetDomainPermissionsPolicyOutputResponse
    {
        typealias getDomainPermissionsPolicyContinuation = CheckedContinuation<GetDomainPermissionsPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainPermissionsPolicyContinuation) in
            getDomainPermissionsPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Returns an asset (or file) that is in a package. For example, for a Maven package version, use
    ///       <code>GetPackageVersionAsset</code> to download a <code>JAR</code> file, a <code>POM</code> file,
    ///       or any other assets in the package version.
    ///     </p>
    func getPackageVersionAsset(input: GetPackageVersionAssetInput) async throws -> GetPackageVersionAssetOutputResponse
    {
        typealias getPackageVersionAssetContinuation = CheckedContinuation<GetPackageVersionAssetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPackageVersionAssetContinuation) in
            getPackageVersionAsset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Gets the readme file or descriptive text for a package version. For packages that do not contain a readme file, CodeArtifact
    ///          extracts a description from a metadata file. For example, from the <code><description></code> element in the
    ///         <code>pom.xml</code> file of a Maven package.
    ///       </p>
    ///          <p>
    ///        The returned text might contain formatting. For example, it might contain formatting for Markdown or reStructuredText.
    ///      </p>
    func getPackageVersionReadme(input: GetPackageVersionReadmeInput) async throws -> GetPackageVersionReadmeOutputResponse
    {
        typealias getPackageVersionReadmeContinuation = CheckedContinuation<GetPackageVersionReadmeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPackageVersionReadmeContinuation) in
            getPackageVersionReadme(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Returns the endpoint of a repository for a specific package format. A repository has one endpoint for each
    ///       package format:
    ///     </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>npm</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>pypi</code>
    ///                </p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>maven</code>
    ///                </p>
    ///             </li>
    ///          </ul>
    func getRepositoryEndpoint(input: GetRepositoryEndpointInput) async throws -> GetRepositoryEndpointOutputResponse
    {
        typealias getRepositoryEndpointContinuation = CheckedContinuation<GetRepositoryEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRepositoryEndpointContinuation) in
            getRepositoryEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Returns the resource policy that is set on a repository.
    ///       </p>
    func getRepositoryPermissionsPolicy(input: GetRepositoryPermissionsPolicyInput) async throws -> GetRepositoryPermissionsPolicyOutputResponse
    {
        typealias getRepositoryPermissionsPolicyContinuation = CheckedContinuation<GetRepositoryPermissionsPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRepositoryPermissionsPolicyContinuation) in
            getRepositoryPermissionsPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p> Returns a list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">DomainSummary</a> objects for all domains owned by the AWS account that makes
    ///       this call. Each returned <code>DomainSummary</code> object contains information about a
    ///       domain. </p>
    func listDomains(input: ListDomainsInput) async throws -> ListDomainsOutputResponse
    {
        typealias listDomainsContinuation = CheckedContinuation<ListDomainsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDomainsContinuation) in
            listDomains(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///        Returns a list of
    ///        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_AssetSummary.html">AssetSummary</a>
    ///        objects for assets in a package version.
    ///      </p>
    func listPackageVersionAssets(input: ListPackageVersionAssetsInput) async throws -> ListPackageVersionAssetsOutputResponse
    {
        typealias listPackageVersionAssetsContinuation = CheckedContinuation<ListPackageVersionAssetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPackageVersionAssetsContinuation) in
            listPackageVersionAssets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Returns the direct dependencies for a package version. The dependencies are returned as
    ///         <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDependency.html">PackageDependency</a>
    ///           objects. CodeArtifact extracts the dependencies for a package version from the metadata file for the package
    ///           format (for example, the <code>package.json</code> file for npm packages and the <code>pom.xml</code> file
    ///         for Maven). Any package version dependencies that are not listed in the configuration file are not returned.
    ///       </p>
    func listPackageVersionDependencies(input: ListPackageVersionDependenciesInput) async throws -> ListPackageVersionDependenciesOutputResponse
    {
        typealias listPackageVersionDependenciesContinuation = CheckedContinuation<ListPackageVersionDependenciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPackageVersionDependenciesContinuation) in
            listPackageVersionDependencies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Returns a list of
    ///         <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html">PackageVersionSummary</a>
    ///         objects for package versions in a repository that match the request parameters.
    ///       </p>
    func listPackageVersions(input: ListPackageVersionsInput) async throws -> ListPackageVersionsOutputResponse
    {
        typealias listPackageVersionsContinuation = CheckedContinuation<ListPackageVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPackageVersionsContinuation) in
            listPackageVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Returns a list of
    ///         <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageSummary.html">PackageSummary</a>
    ///         objects for packages in a repository that match the request parameters.
    ///       </p>
    func listPackages(input: ListPackagesInput) async throws -> ListPackagesOutputResponse
    {
        typealias listPackagesContinuation = CheckedContinuation<ListPackagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPackagesContinuation) in
            listPackages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///        Returns a list of
    ///        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html">RepositorySummary</a>
    ///        objects. Each <code>RepositorySummary</code> contains information about a repository in the specified AWS account and that matches the input
    ///        parameters.
    ///      </p>
    func listRepositories(input: ListRepositoriesInput) async throws -> ListRepositoriesOutputResponse
    {
        typealias listRepositoriesContinuation = CheckedContinuation<ListRepositoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRepositoriesContinuation) in
            listRepositories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///        Returns a list of
    ///        <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html">RepositorySummary</a>
    ///        objects. Each <code>RepositorySummary</code> contains information about a repository in the specified domain and that matches the input
    ///        parameters.
    ///      </p>
    func listRepositoriesInDomain(input: ListRepositoriesInDomainInput) async throws -> ListRepositoriesInDomainOutputResponse
    {
        typealias listRepositoriesInDomainContinuation = CheckedContinuation<ListRepositoriesInDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRepositoriesInDomainContinuation) in
            listRepositoriesInDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeArtifact.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Sets a resource policy on a domain that specifies permissions to access it.
    ///       </p>
    ///          <p>
    ///        When you call <code>PutDomainPermissionsPolicy</code>, the resource policy on the domain is ignored when evaluting permissions.
    ///        This ensures that the owner of a domain cannot lock themselves out of the domain, which would prevent them from being
    ///        able to update the resource policy.
    ///      </p>
    func putDomainPermissionsPolicy(input: PutDomainPermissionsPolicyInput) async throws -> PutDomainPermissionsPolicyOutputResponse
    {
        typealias putDomainPermissionsPolicyContinuation = CheckedContinuation<PutDomainPermissionsPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putDomainPermissionsPolicyContinuation) in
            putDomainPermissionsPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///         Sets the resource policy on a repository that specifies permissions to access it.
    ///       </p>
    ///          <p>
    ///        When you call <code>PutRepositoryPermissionsPolicy</code>, the resource policy on the repository is ignored when evaluting permissions.
    ///        This ensures that the owner of a repository cannot lock themselves out of the repository, which would prevent them from being
    ///        able to update the resource policy.
    ///      </p>
    func putRepositoryPermissionsPolicy(input: PutRepositoryPermissionsPolicyInput) async throws -> PutRepositoryPermissionsPolicyOutputResponse
    {
        typealias putRepositoryPermissionsPolicyContinuation = CheckedContinuation<PutRepositoryPermissionsPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putRepositoryPermissionsPolicyContinuation) in
            putRepositoryPermissionsPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds or updates tags for a resource in AWS CodeArtifact.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes tags from a resource in AWS CodeArtifact.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///       Updates the status of one or more versions of a package.
    ///     </p>
    func updatePackageVersionsStatus(input: UpdatePackageVersionsStatusInput) async throws -> UpdatePackageVersionsStatusOutputResponse
    {
        typealias updatePackageVersionsStatusContinuation = CheckedContinuation<UpdatePackageVersionsStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePackageVersionsStatusContinuation) in
            updatePackageVersionsStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>
    ///          Update the properties of a repository.
    ///        </p>
    func updateRepository(input: UpdateRepositoryInput) async throws -> UpdateRepositoryOutputResponse
    {
        typealias updateRepositoryContinuation = CheckedContinuation<UpdateRepositoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRepositoryContinuation) in
            updateRepository(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
