// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DeletePackageVersionsInputHeadersMiddleware: Middleware {
    public let id: String = "DeletePackageVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeletePackageVersionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DeletePackageVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeletePackageVersionsInput>
    public typealias MOutput = OperationOutput<DeletePackageVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeletePackageVersionsOutputError>
}

public struct DeletePackageVersionsInputQueryItemMiddleware: Middleware {
    public let id: String = "DeletePackageVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeletePackageVersionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DeletePackageVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let package = input.operationInput.package {
            let packageQueryItem = URLQueryItem(name: "package".urlPercentEncoding(), value: String(package).urlPercentEncoding())
            input.builder.withQueryItem(packageQueryItem)
        }
        if let domain = input.operationInput.domain {
            let domainQueryItem = URLQueryItem(name: "domain".urlPercentEncoding(), value: String(domain).urlPercentEncoding())
            input.builder.withQueryItem(domainQueryItem)
        }
        if let domainOwner = input.operationInput.domainOwner {
            let domainOwnerQueryItem = URLQueryItem(name: "domain-owner".urlPercentEncoding(), value: String(domainOwner).urlPercentEncoding())
            input.builder.withQueryItem(domainOwnerQueryItem)
        }
        if let format = input.operationInput.format {
            let formatQueryItem = URLQueryItem(name: "format".urlPercentEncoding(), value: String(format.rawValue).urlPercentEncoding())
            input.builder.withQueryItem(formatQueryItem)
        }
        if let namespace = input.operationInput.namespace {
            let namespaceQueryItem = URLQueryItem(name: "namespace".urlPercentEncoding(), value: String(namespace).urlPercentEncoding())
            input.builder.withQueryItem(namespaceQueryItem)
        }
        if let repository = input.operationInput.repository {
            let repositoryQueryItem = URLQueryItem(name: "repository".urlPercentEncoding(), value: String(repository).urlPercentEncoding())
            input.builder.withQueryItem(repositoryQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeletePackageVersionsInput>
    public typealias MOutput = OperationOutput<DeletePackageVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeletePackageVersionsOutputError>
}

public struct DeletePackageVersionsInputBodyMiddleware: Middleware {
    public let id: String = "DeletePackageVersionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DeletePackageVersionsInput>,
                  next: H) -> Swift.Result<OperationOutput<DeletePackageVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DeletePackageVersionsInput>
    public typealias MOutput = OperationOutput<DeletePackageVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DeletePackageVersionsOutputError>
}

extension DeletePackageVersionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case expectedStatus
        case versions
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expectedStatus = expectedStatus {
            try encodeContainer.encode(expectedStatus.rawValue, forKey: .expectedStatus)
        }
        if let versions = versions {
            var versionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .versions)
            for packageversionlist0 in versions {
                try versionsContainer.encode(packageversionlist0)
            }
        }
    }
}
