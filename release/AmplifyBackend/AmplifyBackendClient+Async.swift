// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AmplifyBackendClient {
    /// <p>This operation clones an existing backend.</p>
    func cloneBackend(input: CloneBackendInput) async throws -> CloneBackendOutputResponse
    {
        typealias cloneBackendContinuation = CheckedContinuation<CloneBackendOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cloneBackendContinuation) in
            cloneBackend(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>This operation creates a backend for an Amplify app. Backends are automatically created at the time of app creation.</p>
    func createBackend(input: CreateBackendInput) async throws -> CreateBackendOutputResponse
    {
        typealias createBackendContinuation = CheckedContinuation<CreateBackendOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackendContinuation) in
            createBackend(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new backend API resource.</p>
    func createBackendAPI(input: CreateBackendAPIInput) async throws -> CreateBackendAPIOutputResponse
    {
        typealias createBackendAPIContinuation = CheckedContinuation<CreateBackendAPIOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackendAPIContinuation) in
            createBackendAPI(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new backend authentication resource.</p>
    func createBackendAuth(input: CreateBackendAuthInput) async throws -> CreateBackendAuthOutputResponse
    {
        typealias createBackendAuthContinuation = CheckedContinuation<CreateBackendAuthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackendAuthContinuation) in
            createBackendAuth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a config object for a backend.</p>
    func createBackendConfig(input: CreateBackendConfigInput) async throws -> CreateBackendConfigOutputResponse
    {
        typealias createBackendConfigContinuation = CheckedContinuation<CreateBackendConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBackendConfigContinuation) in
            createBackendConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Generates a one-time challenge code to authenticate a user into your Amplify Admin UI.</p>
    func createToken(input: CreateTokenInput) async throws -> CreateTokenOutputResponse
    {
        typealias createTokenContinuation = CheckedContinuation<CreateTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTokenContinuation) in
            createToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes an existing environment from your Amplify project.</p>
    func deleteBackend(input: DeleteBackendInput) async throws -> DeleteBackendOutputResponse
    {
        typealias deleteBackendContinuation = CheckedContinuation<DeleteBackendOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackendContinuation) in
            deleteBackend(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an existing backend API resource.</p>
    func deleteBackendAPI(input: DeleteBackendAPIInput) async throws -> DeleteBackendAPIOutputResponse
    {
        typealias deleteBackendAPIContinuation = CheckedContinuation<DeleteBackendAPIOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackendAPIContinuation) in
            deleteBackendAPI(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an existing backend authentication resource.</p>
    func deleteBackendAuth(input: DeleteBackendAuthInput) async throws -> DeleteBackendAuthOutputResponse
    {
        typealias deleteBackendAuthContinuation = CheckedContinuation<DeleteBackendAuthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBackendAuthContinuation) in
            deleteBackendAuth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes the challenge token based on the given appId and sessionId.</p>
    func deleteToken(input: DeleteTokenInput) async throws -> DeleteTokenOutputResponse
    {
        typealias deleteTokenContinuation = CheckedContinuation<DeleteTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTokenContinuation) in
            deleteToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Generates a model schema for an existing backend API resource.</p>
    func generateBackendAPIModels(input: GenerateBackendAPIModelsInput) async throws -> GenerateBackendAPIModelsOutputResponse
    {
        typealias generateBackendAPIModelsContinuation = CheckedContinuation<GenerateBackendAPIModelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: generateBackendAPIModelsContinuation) in
            generateBackendAPIModels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Provides project-level details for your Amplify UI project.</p>
    func getBackend(input: GetBackendInput) async throws -> GetBackendOutputResponse
    {
        typealias getBackendContinuation = CheckedContinuation<GetBackendOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackendContinuation) in
            getBackend(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the details for a backend API.</p>
    func getBackendAPI(input: GetBackendAPIInput) async throws -> GetBackendAPIOutputResponse
    {
        typealias getBackendAPIContinuation = CheckedContinuation<GetBackendAPIOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackendAPIContinuation) in
            getBackendAPI(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Generates a model schema for existing backend API resource.</p>
    func getBackendAPIModels(input: GetBackendAPIModelsInput) async throws -> GetBackendAPIModelsOutputResponse
    {
        typealias getBackendAPIModelsContinuation = CheckedContinuation<GetBackendAPIModelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackendAPIModelsContinuation) in
            getBackendAPIModels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets backend auth details.</p>
    func getBackendAuth(input: GetBackendAuthInput) async throws -> GetBackendAuthOutputResponse
    {
        typealias getBackendAuthContinuation = CheckedContinuation<GetBackendAuthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackendAuthContinuation) in
            getBackendAuth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about a specific job.</p>
    func getBackendJob(input: GetBackendJobInput) async throws -> GetBackendJobOutputResponse
    {
        typealias getBackendJobContinuation = CheckedContinuation<GetBackendJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBackendJobContinuation) in
            getBackendJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the challenge token based on the given appId and sessionId.</p>
    func getToken(input: GetTokenInput) async throws -> GetTokenOutputResponse
    {
        typealias getTokenContinuation = CheckedContinuation<GetTokenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTokenContinuation) in
            getToken(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the jobs for the backend of an Amplify app.</p>
    func listBackendJobs(input: ListBackendJobsInput) async throws -> ListBackendJobsOutputResponse
    {
        typealias listBackendJobsContinuation = CheckedContinuation<ListBackendJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBackendJobsContinuation) in
            listBackendJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes all backend environments from your Amplify project.</p>
    func removeAllBackends(input: RemoveAllBackendsInput) async throws -> RemoveAllBackendsOutputResponse
    {
        typealias removeAllBackendsContinuation = CheckedContinuation<RemoveAllBackendsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeAllBackendsContinuation) in
            removeAllBackends(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the AWS resources that are required to access the Amplify Admin UI.</p>
    func removeBackendConfig(input: RemoveBackendConfigInput) async throws -> RemoveBackendConfigOutputResponse
    {
        typealias removeBackendConfigContinuation = CheckedContinuation<RemoveBackendConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeBackendConfigContinuation) in
            removeBackendConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing backend API resource.</p>
    func updateBackendAPI(input: UpdateBackendAPIInput) async throws -> UpdateBackendAPIOutputResponse
    {
        typealias updateBackendAPIContinuation = CheckedContinuation<UpdateBackendAPIOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBackendAPIContinuation) in
            updateBackendAPI(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates an existing backend authentication resource.</p>
    func updateBackendAuth(input: UpdateBackendAuthInput) async throws -> UpdateBackendAuthOutputResponse
    {
        typealias updateBackendAuthContinuation = CheckedContinuation<UpdateBackendAuthOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBackendAuthContinuation) in
            updateBackendAuth(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the AWS resources that are required to access the Amplify Admin UI.</p>
    func updateBackendConfig(input: UpdateBackendConfigInput) async throws -> UpdateBackendConfigOutputResponse
    {
        typealias updateBackendConfigContinuation = CheckedContinuation<UpdateBackendConfigOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBackendConfigContinuation) in
            updateBackendConfig(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a specific job.</p>
    func updateBackendJob(input: UpdateBackendJobInput) async throws -> UpdateBackendJobOutputResponse
    {
        typealias updateBackendJobContinuation = CheckedContinuation<UpdateBackendJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBackendJobContinuation) in
            updateBackendJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
