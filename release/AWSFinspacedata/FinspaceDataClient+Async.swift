// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension FinspaceDataClient {
    /// Creates a new Changeset in a FinSpace Dataset.
    func createChangeset(input: CreateChangesetInput) async throws -> CreateChangesetOutputResponse
    {
        typealias createChangesetContinuation = CheckedContinuation<CreateChangesetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChangesetContinuation) in
            createChangeset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a Dataview for a Dataset.
    func createDataView(input: CreateDataViewInput) async throws -> CreateDataViewOutputResponse
    {
        typealias createDataViewContinuation = CheckedContinuation<CreateDataViewOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDataViewContinuation) in
            createDataView(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new FinSpace Dataset.
    func createDataset(input: CreateDatasetInput) async throws -> CreateDatasetOutputResponse
    {
        typealias createDatasetContinuation = CheckedContinuation<CreateDatasetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDatasetContinuation) in
            createDataset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a FinSpace Dataset.
    func deleteDataset(input: DeleteDatasetInput) async throws -> DeleteDatasetOutputResponse
    {
        typealias deleteDatasetContinuation = CheckedContinuation<DeleteDatasetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDatasetContinuation) in
            deleteDataset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get information about a Changeset.
    func getChangeset(input: GetChangesetInput) async throws -> GetChangesetOutputResponse
    {
        typealias getChangesetContinuation = CheckedContinuation<GetChangesetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getChangesetContinuation) in
            getChangeset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about a Dataview.
    func getDataView(input: GetDataViewInput) async throws -> GetDataViewOutputResponse
    {
        typealias getDataViewContinuation = CheckedContinuation<GetDataViewOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDataViewContinuation) in
            getDataView(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a Dataset.
    func getDataset(input: GetDatasetInput) async throws -> GetDatasetOutputResponse
    {
        typealias getDatasetContinuation = CheckedContinuation<GetDatasetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDatasetContinuation) in
            getDataset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Request programmatic credentials to use with FinSpace SDK.
    func getProgrammaticAccessCredentials(input: GetProgrammaticAccessCredentialsInput) async throws -> GetProgrammaticAccessCredentialsOutputResponse
    {
        typealias getProgrammaticAccessCredentialsContinuation = CheckedContinuation<GetProgrammaticAccessCredentialsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getProgrammaticAccessCredentialsContinuation) in
            getProgrammaticAccessCredentials(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// A temporary Amazon S3 location, where you can copy your files from a source location to stage or use as a scratch space in FinSpace notebook.
    func getWorkingLocation(input: GetWorkingLocationInput) async throws -> GetWorkingLocationOutputResponse
    {
        typealias getWorkingLocationContinuation = CheckedContinuation<GetWorkingLocationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWorkingLocationContinuation) in
            getWorkingLocation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the FinSpace Changesets for a Dataset.
    func listChangesets(input: ListChangesetsInput) async throws -> ListChangesetsOutputResponse
    {
        typealias listChangesetsContinuation = CheckedContinuation<ListChangesetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChangesetsContinuation) in
            listChangesets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all available Dataviews for a Dataset.
    func listDataViews(input: ListDataViewsInput) async throws -> ListDataViewsOutputResponse
    {
        typealias listDataViewsContinuation = CheckedContinuation<ListDataViewsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDataViewsContinuation) in
            listDataViews(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all of the active Datasets that a user has access to.
    func listDatasets(input: ListDatasetsInput) async throws -> ListDatasetsOutputResponse
    {
        typealias listDatasetsContinuation = CheckedContinuation<ListDatasetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDatasetsContinuation) in
            listDatasets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a FinSpace Changeset.
    func updateChangeset(input: UpdateChangesetInput) async throws -> UpdateChangesetOutputResponse
    {
        typealias updateChangesetContinuation = CheckedContinuation<UpdateChangesetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateChangesetContinuation) in
            updateChangeset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a FinSpace Dataset.
    func updateDataset(input: UpdateDatasetInput) async throws -> UpdateDatasetOutputResponse
    {
        typealias updateDatasetContinuation = CheckedContinuation<UpdateDatasetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDatasetContinuation) in
            updateDataset(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
