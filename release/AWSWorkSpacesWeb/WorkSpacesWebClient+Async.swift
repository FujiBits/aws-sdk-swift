// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension WorkSpacesWebClient {
    /// Associates a browser settings resource with a web portal.
    func associateBrowserSettings(input: AssociateBrowserSettingsInput) async throws -> AssociateBrowserSettingsOutputResponse
    {
        typealias associateBrowserSettingsContinuation = CheckedContinuation<AssociateBrowserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateBrowserSettingsContinuation) in
            associateBrowserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a network settings resource with a web portal.
    func associateNetworkSettings(input: AssociateNetworkSettingsInput) async throws -> AssociateNetworkSettingsOutputResponse
    {
        typealias associateNetworkSettingsContinuation = CheckedContinuation<AssociateNetworkSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateNetworkSettingsContinuation) in
            associateNetworkSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a trust store with a web portal.
    func associateTrustStore(input: AssociateTrustStoreInput) async throws -> AssociateTrustStoreOutputResponse
    {
        typealias associateTrustStoreContinuation = CheckedContinuation<AssociateTrustStoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateTrustStoreContinuation) in
            associateTrustStore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a user settings resource with a web portal.
    func associateUserSettings(input: AssociateUserSettingsInput) async throws -> AssociateUserSettingsOutputResponse
    {
        typealias associateUserSettingsContinuation = CheckedContinuation<AssociateUserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateUserSettingsContinuation) in
            associateUserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a browser settings resource that can be associated with a web portal. Once associated with a web portal, browser settings control how the browser will behave once a user starts a streaming session for the web portal.
    func createBrowserSettings(input: CreateBrowserSettingsInput) async throws -> CreateBrowserSettingsOutputResponse
    {
        typealias createBrowserSettingsContinuation = CheckedContinuation<CreateBrowserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createBrowserSettingsContinuation) in
            createBrowserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an identity provider resource that is then associated with a web portal.
    func createIdentityProvider(input: CreateIdentityProviderInput) async throws -> CreateIdentityProviderOutputResponse
    {
        typealias createIdentityProviderContinuation = CheckedContinuation<CreateIdentityProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIdentityProviderContinuation) in
            createIdentityProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a network settings resource that can be associated with a web portal. Once associated with a web portal, network settings define how streaming instances will connect with your specified VPC.
    func createNetworkSettings(input: CreateNetworkSettingsInput) async throws -> CreateNetworkSettingsOutputResponse
    {
        typealias createNetworkSettingsContinuation = CheckedContinuation<CreateNetworkSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createNetworkSettingsContinuation) in
            createNetworkSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a web portal.
    func createPortal(input: CreatePortalInput) async throws -> CreatePortalOutputResponse
    {
        typealias createPortalContinuation = CheckedContinuation<CreatePortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPortalContinuation) in
            createPortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a trust store that can be associated with a web portal. A trust store contains certificate authority (CA) certificates. Once associated with a web portal, the browser in a streaming session will recognize certificates that have been issued using any of the CAs in the trust store. If your organization has internal websites that use certificates issued by private CAs, you should add the private CA certificate to the trust store.
    func createTrustStore(input: CreateTrustStoreInput) async throws -> CreateTrustStoreOutputResponse
    {
        typealias createTrustStoreContinuation = CheckedContinuation<CreateTrustStoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTrustStoreContinuation) in
            createTrustStore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a user settings resource that can be associated with a web portal. Once associated with a web portal, user settings control how users can transfer data between a streaming session and the their local devices.
    func createUserSettings(input: CreateUserSettingsInput) async throws -> CreateUserSettingsOutputResponse
    {
        typealias createUserSettingsContinuation = CheckedContinuation<CreateUserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserSettingsContinuation) in
            createUserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes browser settings.
    func deleteBrowserSettings(input: DeleteBrowserSettingsInput) async throws -> DeleteBrowserSettingsOutputResponse
    {
        typealias deleteBrowserSettingsContinuation = CheckedContinuation<DeleteBrowserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteBrowserSettingsContinuation) in
            deleteBrowserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the identity provider.
    func deleteIdentityProvider(input: DeleteIdentityProviderInput) async throws -> DeleteIdentityProviderOutputResponse
    {
        typealias deleteIdentityProviderContinuation = CheckedContinuation<DeleteIdentityProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIdentityProviderContinuation) in
            deleteIdentityProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes network settings.
    func deleteNetworkSettings(input: DeleteNetworkSettingsInput) async throws -> DeleteNetworkSettingsOutputResponse
    {
        typealias deleteNetworkSettingsContinuation = CheckedContinuation<DeleteNetworkSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteNetworkSettingsContinuation) in
            deleteNetworkSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a web portal.
    func deletePortal(input: DeletePortalInput) async throws -> DeletePortalOutputResponse
    {
        typealias deletePortalContinuation = CheckedContinuation<DeletePortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePortalContinuation) in
            deletePortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the trust store.
    func deleteTrustStore(input: DeleteTrustStoreInput) async throws -> DeleteTrustStoreOutputResponse
    {
        typealias deleteTrustStoreContinuation = CheckedContinuation<DeleteTrustStoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTrustStoreContinuation) in
            deleteTrustStore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes user settings.
    func deleteUserSettings(input: DeleteUserSettingsInput) async throws -> DeleteUserSettingsOutputResponse
    {
        typealias deleteUserSettingsContinuation = CheckedContinuation<DeleteUserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserSettingsContinuation) in
            deleteUserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates browser settings from a web portal.
    func disassociateBrowserSettings(input: DisassociateBrowserSettingsInput) async throws -> DisassociateBrowserSettingsOutputResponse
    {
        typealias disassociateBrowserSettingsContinuation = CheckedContinuation<DisassociateBrowserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateBrowserSettingsContinuation) in
            disassociateBrowserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates network settings from a web portal.
    func disassociateNetworkSettings(input: DisassociateNetworkSettingsInput) async throws -> DisassociateNetworkSettingsOutputResponse
    {
        typealias disassociateNetworkSettingsContinuation = CheckedContinuation<DisassociateNetworkSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateNetworkSettingsContinuation) in
            disassociateNetworkSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a trust store from a web portal.
    func disassociateTrustStore(input: DisassociateTrustStoreInput) async throws -> DisassociateTrustStoreOutputResponse
    {
        typealias disassociateTrustStoreContinuation = CheckedContinuation<DisassociateTrustStoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateTrustStoreContinuation) in
            disassociateTrustStore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates user settings from a web portal.
    func disassociateUserSettings(input: DisassociateUserSettingsInput) async throws -> DisassociateUserSettingsOutputResponse
    {
        typealias disassociateUserSettingsContinuation = CheckedContinuation<DisassociateUserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateUserSettingsContinuation) in
            disassociateUserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets browser settings.
    func getBrowserSettings(input: GetBrowserSettingsInput) async throws -> GetBrowserSettingsOutputResponse
    {
        typealias getBrowserSettingsContinuation = CheckedContinuation<GetBrowserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getBrowserSettingsContinuation) in
            getBrowserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the identity provider.
    func getIdentityProvider(input: GetIdentityProviderInput) async throws -> GetIdentityProviderOutputResponse
    {
        typealias getIdentityProviderContinuation = CheckedContinuation<GetIdentityProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIdentityProviderContinuation) in
            getIdentityProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the network settings.
    func getNetworkSettings(input: GetNetworkSettingsInput) async throws -> GetNetworkSettingsOutputResponse
    {
        typealias getNetworkSettingsContinuation = CheckedContinuation<GetNetworkSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNetworkSettingsContinuation) in
            getNetworkSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the web portal.
    func getPortal(input: GetPortalInput) async throws -> GetPortalOutputResponse
    {
        typealias getPortalContinuation = CheckedContinuation<GetPortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPortalContinuation) in
            getPortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the service provider metadata.
    func getPortalServiceProviderMetadata(input: GetPortalServiceProviderMetadataInput) async throws -> GetPortalServiceProviderMetadataOutputResponse
    {
        typealias getPortalServiceProviderMetadataContinuation = CheckedContinuation<GetPortalServiceProviderMetadataOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPortalServiceProviderMetadataContinuation) in
            getPortalServiceProviderMetadata(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the trust store.
    func getTrustStore(input: GetTrustStoreInput) async throws -> GetTrustStoreOutputResponse
    {
        typealias getTrustStoreContinuation = CheckedContinuation<GetTrustStoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTrustStoreContinuation) in
            getTrustStore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the trust store certificate.
    func getTrustStoreCertificate(input: GetTrustStoreCertificateInput) async throws -> GetTrustStoreCertificateOutputResponse
    {
        typealias getTrustStoreCertificateContinuation = CheckedContinuation<GetTrustStoreCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTrustStoreCertificateContinuation) in
            getTrustStoreCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets user settings.
    func getUserSettings(input: GetUserSettingsInput) async throws -> GetUserSettingsOutputResponse
    {
        typealias getUserSettingsContinuation = CheckedContinuation<GetUserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getUserSettingsContinuation) in
            getUserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of browser settings.
    func listBrowserSettings(input: ListBrowserSettingsInput) async throws -> ListBrowserSettingsOutputResponse
    {
        typealias listBrowserSettingsContinuation = CheckedContinuation<ListBrowserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBrowserSettingsContinuation) in
            listBrowserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of identity providers for a specific web portal.
    func listIdentityProviders(input: ListIdentityProvidersInput) async throws -> ListIdentityProvidersOutputResponse
    {
        typealias listIdentityProvidersContinuation = CheckedContinuation<ListIdentityProvidersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIdentityProvidersContinuation) in
            listIdentityProviders(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of network settings.
    func listNetworkSettings(input: ListNetworkSettingsInput) async throws -> ListNetworkSettingsOutputResponse
    {
        typealias listNetworkSettingsContinuation = CheckedContinuation<ListNetworkSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNetworkSettingsContinuation) in
            listNetworkSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list or web portals.
    func listPortals(input: ListPortalsInput) async throws -> ListPortalsOutputResponse
    {
        typealias listPortalsContinuation = CheckedContinuation<ListPortalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPortalsContinuation) in
            listPortals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of tags for a resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of trust store certificates.
    func listTrustStoreCertificates(input: ListTrustStoreCertificatesInput) async throws -> ListTrustStoreCertificatesOutputResponse
    {
        typealias listTrustStoreCertificatesContinuation = CheckedContinuation<ListTrustStoreCertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTrustStoreCertificatesContinuation) in
            listTrustStoreCertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of trust stores.
    func listTrustStores(input: ListTrustStoresInput) async throws -> ListTrustStoresOutputResponse
    {
        typealias listTrustStoresContinuation = CheckedContinuation<ListTrustStoresOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTrustStoresContinuation) in
            listTrustStores(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a list of user settings.
    func listUserSettings(input: ListUserSettingsInput) async throws -> ListUserSettingsOutputResponse
    {
        typealias listUserSettingsContinuation = CheckedContinuation<ListUserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUserSettingsContinuation) in
            listUserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or overwrites one or more tags for the specified resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes one or more tags from the specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates browser settings.
    func updateBrowserSettings(input: UpdateBrowserSettingsInput) async throws -> UpdateBrowserSettingsOutputResponse
    {
        typealias updateBrowserSettingsContinuation = CheckedContinuation<UpdateBrowserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateBrowserSettingsContinuation) in
            updateBrowserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the identity provider.
    func updateIdentityProvider(input: UpdateIdentityProviderInput) async throws -> UpdateIdentityProviderOutputResponse
    {
        typealias updateIdentityProviderContinuation = CheckedContinuation<UpdateIdentityProviderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIdentityProviderContinuation) in
            updateIdentityProvider(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates network settings.
    func updateNetworkSettings(input: UpdateNetworkSettingsInput) async throws -> UpdateNetworkSettingsOutputResponse
    {
        typealias updateNetworkSettingsContinuation = CheckedContinuation<UpdateNetworkSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateNetworkSettingsContinuation) in
            updateNetworkSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a web portal.
    func updatePortal(input: UpdatePortalInput) async throws -> UpdatePortalOutputResponse
    {
        typealias updatePortalContinuation = CheckedContinuation<UpdatePortalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePortalContinuation) in
            updatePortal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the trust store.
    func updateTrustStore(input: UpdateTrustStoreInput) async throws -> UpdateTrustStoreOutputResponse
    {
        typealias updateTrustStoreContinuation = CheckedContinuation<UpdateTrustStoreOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTrustStoreContinuation) in
            updateTrustStore(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the user settings.
    func updateUserSettings(input: UpdateUserSettingsInput) async throws -> UpdateUserSettingsOutputResponse
    {
        typealias updateUserSettingsContinuation = CheckedContinuation<UpdateUserSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserSettingsContinuation) in
            updateUserSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
