// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RecordHandlerProgressInputHeadersMiddleware: Middleware {
    public let id: String = "RecordHandlerProgressInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RecordHandlerProgressInput>,
                  next: H) -> Swift.Result<OperationOutput<RecordHandlerProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RecordHandlerProgressInput>
    public typealias MOutput = OperationOutput<RecordHandlerProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RecordHandlerProgressOutputError>
}

public struct RecordHandlerProgressInputQueryItemMiddleware: Middleware {
    public let id: String = "RecordHandlerProgressInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RecordHandlerProgressInput>,
                  next: H) -> Swift.Result<OperationOutput<RecordHandlerProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RecordHandlerProgressInput>
    public typealias MOutput = OperationOutput<RecordHandlerProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RecordHandlerProgressOutputError>
}

public struct RecordHandlerProgressInputBodyMiddleware: Middleware {
    public let id: String = "RecordHandlerProgressInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RecordHandlerProgressInput>,
                  next: H) -> Swift.Result<OperationOutput<RecordHandlerProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RecordHandlerProgressInput>
    public typealias MOutput = OperationOutput<RecordHandlerProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RecordHandlerProgressOutputError>
}

extension RecordHandlerProgressInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let bearerToken = bearerToken {
            try container.encode(bearerToken, forKey: Key("BearerToken"))
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: Key("ClientRequestToken"))
        }
        if let currentOperationStatus = currentOperationStatus {
            try container.encode(currentOperationStatus, forKey: Key("CurrentOperationStatus"))
        }
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: Key("ErrorCode"))
        }
        if let operationStatus = operationStatus {
            try container.encode(operationStatus, forKey: Key("OperationStatus"))
        }
        if let resourceModel = resourceModel {
            try container.encode(resourceModel, forKey: Key("ResourceModel"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: Key("StatusMessage"))
        }
        try container.encode("RecordHandlerProgress", forKey:Key("Action"))
        try container.encode("2010-05-15", forKey:Key("Version"))
    }
}
