// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension CloudFormationClientTypes.AccountGateResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AccountGateStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}

extension CloudFormationClientTypes.AccountGateResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountGateResult(status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)))"}
}

extension CloudFormationClientTypes {
    /// <p>Structure that contains the results of the account gate function which AWS
    ///          CloudFormation invokes, if present, before proceeding with a stack set operation in an
    ///          account and Region.</p>
    ///          <p>For each account and Region, AWS CloudFormation lets you specify a Lamdba function
    ///          that encapsulates any requirements that must be met before CloudFormation can proceed with
    ///          a stack set operation in that account and Region. CloudFormation invokes the function each
    ///          time a stack set operation is requested for that account and Region; if the function
    ///          returns <code>FAILED</code>, CloudFormation cancels the operation in that account and
    ///          Region, and sets the stack set operation result status for that account and Region to
    ///             <code>FAILED</code>. </p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-account-gating.html">Configuring a
    ///             target account gate</a>.</p>
    public struct AccountGateResult: Swift.Equatable {
        /// <p>The status of the account gate function.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>SUCCEEDED</code>: The account gate function has determined that the
        ///                account and Region passes any requirements for a stack set operation to occur. AWS
        ///                CloudFormation proceeds with the stack operation in that account and Region.
        ///             </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>FAILED</code>: The account gate function has determined that the account
        ///                and Region does not meet the requirements for a stack set operation to occur. AWS
        ///                CloudFormation cancels the stack set operation in that account and Region, and sets
        ///                the stack set operation result status for that account and Region to
        ///                   <code>FAILED</code>. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SKIPPED</code>: AWS CloudFormation has skipped calling the account gate
        ///                function for this account and Region, for one of the following reasons:</p>
        ///                <ul>
        ///                   <li>
        ///                      <p>An account gate function has not been specified for the account and
        ///                      Region. AWS CloudFormation proceeds with the stack set operation in this
        ///                      account and Region.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>The <code>AWSCloudFormationStackSetExecutionRole</code> of the stack set
        ///                      adminstration account lacks permissions to invoke the function. AWS
        ///                      CloudFormation proceeds with the stack set operation in this account and
        ///                      Region.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>Either no action is necessary, or no action is possible, on the stack.
        ///                      AWS CloudFormation skips the stack set operation in this account and
        ///                      Region.</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///          </ul>
        public let status: CloudFormationClientTypes.AccountGateStatus?
        /// <p>The reason for the account gate status assigned to this account and Region for the
        ///          stack set operation.</p>
        public let statusReason: Swift.String?

        public init (
            status: CloudFormationClientTypes.AccountGateStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum AccountGateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case skipped
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [AccountGateStatus] {
            return [
                .failed,
                .skipped,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .skipped: return "SKIPPED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccountGateStatus(rawValue: rawValue) ?? AccountGateStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.AccountLimit: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudFormationClientTypes.AccountLimit: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountLimit(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension CloudFormationClientTypes {
    /// <p>The AccountLimit data type. </p>
    ///          <p>CloudFormation has the following limits per account:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Number of concurrent resources</p>
    ///             </li>
    ///             <li>
    ///                <p>Number of stacks</p>
    ///             </li>
    ///             <li>
    ///                <p>Number of stack outputs</p>
    ///             </li>
    ///          </ul>
    ///          <p>For more information about these account limits, and other CloudFormation limits, see
    ///             <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html">AWS CloudFormation
    ///             Limits</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    public struct AccountLimit: Swift.Equatable {
        /// <p>The name of the account limit.</p>
        ///          <p>Values: <code>ConcurrentResourcesLimit</code> | <code>StackLimit</code> |
        ///             <code>StackOutputsLimit</code>
        ///          </p>
        public let name: Swift.String?
        /// <p>The value that is associated with the account limit name.</p>
        public let value: Swift.Int?

        public init (
            name: Swift.String? = nil,
            value: Swift.Int? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension AlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AlreadyExistsException(message: \(Swift.String(describing: message)))"}
}

extension AlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<AlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The resource with the name requested already exists.</p>
public struct AlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.AutoDeployment: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case retainStacksOnAccountRemoval = "RetainStacksOnAccountRemoval"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enabled = enabled {
            try container.encode(enabled, forKey: ClientRuntime.Key("Enabled"))
        }
        if let retainStacksOnAccountRemoval = retainStacksOnAccountRemoval {
            try container.encode(retainStacksOnAccountRemoval, forKey: ClientRuntime.Key("RetainStacksOnAccountRemoval"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let retainStacksOnAccountRemovalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .retainStacksOnAccountRemoval)
        retainStacksOnAccountRemoval = retainStacksOnAccountRemovalDecoded
    }
}

extension CloudFormationClientTypes.AutoDeployment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoDeployment(enabled: \(Swift.String(describing: enabled)), retainStacksOnAccountRemoval: \(Swift.String(describing: retainStacksOnAccountRemoval)))"}
}

extension CloudFormationClientTypes {
    /// <p>[Service-managed permissions] Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to a target organization or organizational unit (OU).</p>
    public struct AutoDeployment: Swift.Equatable {
        /// <p>If set to <code>true</code>, StackSets automatically deploys additional stack instances to AWS Organizations accounts that are added to a target organization or organizational unit (OU) in the specified Regions. If an account is removed from a target organization or OU, StackSets deletes stack instances from the account in the specified Regions.</p>
        public let enabled: Swift.Bool?
        /// <p>If set to <code>true</code>, stack resources are retained when an account is removed from a target organization or OU. If set to <code>false</code>, stack resources are deleted. Specify only if <code>Enabled</code> is set to <code>True</code>.</p>
        public let retainStacksOnAccountRemoval: Swift.Bool?

        public init (
            enabled: Swift.Bool? = nil,
            retainStacksOnAccountRemoval: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
            self.retainStacksOnAccountRemoval = retainStacksOnAccountRemoval
        }
    }

}

extension CFNRegistryException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CFNRegistryException(message: \(Swift.String(describing: message)))"}
}

extension CFNRegistryException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<CFNRegistryExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An error occurred during a CloudFormation registry operation.</p>
public struct CFNRegistryException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CFNRegistryExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension CFNRegistryExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes {
    public enum CallAs: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delegatedAdmin
        case `self`
        case sdkUnknown(Swift.String)

        public static var allCases: [CallAs] {
            return [
                .delegatedAdmin,
                .self,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delegatedAdmin: return "DELEGATED_ADMIN"
            case .self: return "SELF"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CallAs(rawValue: rawValue) ?? CallAs.sdkUnknown(rawValue)
        }
    }
}

public struct CancelUpdateStackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelUpdateStackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelUpdateStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelUpdateStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelUpdateStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelUpdateStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelUpdateStackOutputError>
}

extension CancelUpdateStackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelUpdateStackInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), stackName: \(Swift.String(describing: stackName)))"}
}

extension CancelUpdateStackInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("CancelUpdateStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CancelUpdateStackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelUpdateStackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelUpdateStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelUpdateStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelUpdateStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelUpdateStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelUpdateStackOutputError>
}

public struct CancelUpdateStackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelUpdateStackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelUpdateStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelUpdateStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelUpdateStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelUpdateStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelUpdateStackOutputError>
}

/// <p>The input for the <a>CancelUpdateStack</a> action.</p>
public struct CancelUpdateStackInput: Swift.Equatable {
    /// <p>A unique identifier for this <code>CancelUpdateStack</code> request. Specify this
    ///          token if you plan to retry requests so that AWS CloudFormation knows that you're not
    ///          attempting to cancel an update on a stack with the same name. You might retry
    ///          <code>CancelUpdateStack</code> requests to ensure that AWS CloudFormation successfully
    ///          received them.</p>
    public let clientRequestToken: Swift.String?
    /// <p>The name or the unique stack ID that is associated with the stack.</p>
    public let stackName: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.stackName = stackName
    }
}

extension CancelUpdateStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CancelUpdateStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelUpdateStackOutputError: Swift.Error, Swift.Equatable {
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelUpdateStackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelUpdateStackOutputResponse()"}
}

extension CancelUpdateStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelUpdateStackOutputResponse: Swift.Equatable {

    public init() {}
}

struct CancelUpdateStackOutputResponseBody: Swift.Equatable {
}

extension CancelUpdateStackOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CloudFormationClientTypes {
    public enum Capability: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case capabilityAutoExpand
        case capabilityIam
        case capabilityNamedIam
        case sdkUnknown(Swift.String)

        public static var allCases: [Capability] {
            return [
                .capabilityAutoExpand,
                .capabilityIam,
                .capabilityNamedIam,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .capabilityAutoExpand: return "CAPABILITY_AUTO_EXPAND"
            case .capabilityIam: return "CAPABILITY_IAM"
            case .capabilityNamedIam: return "CAPABILITY_NAMED_IAM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Capability(rawValue: rawValue) ?? Capability.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.Change: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceChange = "ResourceChange"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let resourceChange = resourceChange {
            try container.encode(resourceChange, forKey: ClientRuntime.Key("ResourceChange"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeType.self, forKey: .type)
        type = typeDecoded
        let resourceChangeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceChange.self, forKey: .resourceChange)
        resourceChange = resourceChangeDecoded
    }
}

extension CloudFormationClientTypes.Change: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Change(resourceChange: \(Swift.String(describing: resourceChange)), type: \(Swift.String(describing: type)))"}
}

extension CloudFormationClientTypes {
    /// <p>The <code>Change</code> structure describes the changes AWS CloudFormation will
    ///          perform if you execute the change set.</p>
    public struct Change: Swift.Equatable {
        /// <p>A <code>ResourceChange</code> structure that describes the resource and action that
        ///          AWS CloudFormation will perform.</p>
        public let resourceChange: CloudFormationClientTypes.ResourceChange?
        /// <p>The type of entity that AWS CloudFormation changes. Currently, the only entity type
        ///          is <code>Resource</code>.</p>
        public let type: CloudFormationClientTypes.ChangeType?

        public init (
            resourceChange: CloudFormationClientTypes.ResourceChange? = nil,
            type: CloudFormationClientTypes.ChangeType? = nil
        )
        {
            self.resourceChange = resourceChange
            self.type = type
        }
    }

}

extension CloudFormationClientTypes {
    public enum ChangeAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case add
        case `dynamic`
        case `import`
        case modify
        case remove
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeAction] {
            return [
                .add,
                .dynamic,
                .import,
                .modify,
                .remove,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .add: return "Add"
            case .dynamic: return "Dynamic"
            case .import: return "Import"
            case .modify: return "Modify"
            case .remove: return "Remove"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeAction(rawValue: rawValue) ?? ChangeAction.sdkUnknown(rawValue)
        }
    }
}

extension ChangeSetNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangeSetNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ChangeSetNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<ChangeSetNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified change set name or ID doesn't exit. To view valid change sets for a
///          stack, use the <code>ListChangeSets</code> action.</p>
public struct ChangeSetNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ChangeSetNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ChangeSetNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes {
    public enum ChangeSetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createInProgress
        case createPending
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case deletePending
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeSetStatus] {
            return [
                .createComplete,
                .createInProgress,
                .createPending,
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .deletePending,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createPending: return "CREATE_PENDING"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deletePending: return "DELETE_PENDING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeSetStatus(rawValue: rawValue) ?? ChangeSetStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ChangeSetSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case changeSetId = "ChangeSetId"
        case changeSetName = "ChangeSetName"
        case creationTime = "CreationTime"
        case description = "Description"
        case executionStatus = "ExecutionStatus"
        case includeNestedStacks = "IncludeNestedStacks"
        case parentChangeSetId = "ParentChangeSetId"
        case rootChangeSetId = "RootChangeSetId"
        case stackId = "StackId"
        case stackName = "StackName"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetId = changeSetId {
            try container.encode(changeSetId, forKey: ClientRuntime.Key("ChangeSetId"))
        }
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let creationTime = creationTime {
            try container.encode(ClientRuntime.TimestampWrapper(creationTime, format: .dateTime), forKey: ClientRuntime.Key("creationTime"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionStatus = executionStatus {
            try container.encode(executionStatus, forKey: ClientRuntime.Key("ExecutionStatus"))
        }
        if let includeNestedStacks = includeNestedStacks {
            try container.encode(includeNestedStacks, forKey: ClientRuntime.Key("IncludeNestedStacks"))
        }
        if let parentChangeSetId = parentChangeSetId {
            try container.encode(parentChangeSetId, forKey: ClientRuntime.Key("ParentChangeSetId"))
        }
        if let rootChangeSetId = rootChangeSetId {
            try container.encode(rootChangeSetId, forKey: ClientRuntime.Key("RootChangeSetId"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let executionStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ExecutionStatus.self, forKey: .executionStatus)
        executionStatus = executionStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSetStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        var creationTimeBuffer:ClientRuntime.Date? = nil
        if let creationTimeDecoded = creationTimeDecoded {
            creationTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationTimeDecoded, format: .dateTime)
        }
        creationTime = creationTimeBuffer
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let includeNestedStacksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeNestedStacks)
        includeNestedStacks = includeNestedStacksDecoded
        let parentChangeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentChangeSetId)
        parentChangeSetId = parentChangeSetIdDecoded
        let rootChangeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootChangeSetId)
        rootChangeSetId = rootChangeSetIdDecoded
    }
}

extension CloudFormationClientTypes.ChangeSetSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChangeSetSummary(changeSetId: \(Swift.String(describing: changeSetId)), changeSetName: \(Swift.String(describing: changeSetName)), creationTime: \(Swift.String(describing: creationTime)), description: \(Swift.String(describing: description)), executionStatus: \(Swift.String(describing: executionStatus)), includeNestedStacks: \(Swift.String(describing: includeNestedStacks)), parentChangeSetId: \(Swift.String(describing: parentChangeSetId)), rootChangeSetId: \(Swift.String(describing: rootChangeSetId)), stackId: \(Swift.String(describing: stackId)), stackName: \(Swift.String(describing: stackName)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)))"}
}

extension CloudFormationClientTypes {
    /// <p>The <code>ChangeSetSummary</code> structure describes a change set, its status, and
    ///          the stack with which it's associated.</p>
    public struct ChangeSetSummary: Swift.Equatable {
        /// <p>The ID of the change set.</p>
        public let changeSetId: Swift.String?
        /// <p>The name of the change set.</p>
        public let changeSetName: Swift.String?
        /// <p>The start time when the change set was created, in UTC.</p>
        public let creationTime: ClientRuntime.Date?
        /// <p>Descriptive information about the change set.</p>
        public let description: Swift.String?
        /// <p>If the change set execution status is <code>AVAILABLE</code>, you can execute the
        ///          change set. If you can’t execute the change set, the status indicates why. For example, a
        ///          change set might be in an <code>UNAVAILABLE</code> state because AWS CloudFormation is
        ///          still creating it or in an <code>OBSOLETE</code> state because the stack was already
        ///          updated.</p>
        public let executionStatus: CloudFormationClientTypes.ExecutionStatus?
        /// <p>Specifies the current setting of <code>IncludeNestedStacks</code> for the change
        ///          set.</p>
        public let includeNestedStacks: Swift.Bool?
        /// <p>The parent change set ID.</p>
        public let parentChangeSetId: Swift.String?
        /// <p>The root change set ID.</p>
        public let rootChangeSetId: Swift.String?
        /// <p>The ID of the stack with which the change set is associated.</p>
        public let stackId: Swift.String?
        /// <p>The name of the stack with which the change set is associated.</p>
        public let stackName: Swift.String?
        /// <p>The state of the change set, such as <code>CREATE_IN_PROGRESS</code>,
        ///             <code>CREATE_COMPLETE</code>, or <code>FAILED</code>.</p>
        public let status: CloudFormationClientTypes.ChangeSetStatus?
        /// <p>A description of the change set's status. For example, if your change set is in the
        ///             <code>FAILED</code> state, AWS CloudFormation shows the error message.</p>
        public let statusReason: Swift.String?

        public init (
            changeSetId: Swift.String? = nil,
            changeSetName: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            executionStatus: CloudFormationClientTypes.ExecutionStatus? = nil,
            includeNestedStacks: Swift.Bool? = nil,
            parentChangeSetId: Swift.String? = nil,
            rootChangeSetId: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            status: CloudFormationClientTypes.ChangeSetStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.changeSetId = changeSetId
            self.changeSetName = changeSetName
            self.creationTime = creationTime
            self.description = description
            self.executionStatus = executionStatus
            self.includeNestedStacks = includeNestedStacks
            self.parentChangeSetId = parentChangeSetId
            self.rootChangeSetId = rootChangeSetId
            self.stackId = stackId
            self.stackName = stackName
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum ChangeSetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case create
        case `import`
        case update
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeSetType] {
            return [
                .create,
                .import,
                .update,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .create: return "CREATE"
            case .import: return "IMPORT"
            case .update: return "UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeSetType(rawValue: rawValue) ?? ChangeSetType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ChangeSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case automatic
        case directmodification
        case parameterreference
        case resourceattribute
        case resourcereference
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeSource] {
            return [
                .automatic,
                .directmodification,
                .parameterreference,
                .resourceattribute,
                .resourcereference,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "Automatic"
            case .directmodification: return "DirectModification"
            case .parameterreference: return "ParameterReference"
            case .resourceattribute: return "ResourceAttribute"
            case .resourcereference: return "ResourceReference"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeSource(rawValue: rawValue) ?? ChangeSource.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ChangeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case resource
        case sdkUnknown(Swift.String)

        public static var allCases: [ChangeType] {
            return [
                .resource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .resource: return "Resource"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChangeType(rawValue: rawValue) ?? ChangeType.sdkUnknown(rawValue)
        }
    }
}

public struct ContinueUpdateRollbackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ContinueUpdateRollbackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ContinueUpdateRollbackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ContinueUpdateRollbackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ContinueUpdateRollbackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ContinueUpdateRollbackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ContinueUpdateRollbackOutputError>
}

extension ContinueUpdateRollbackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContinueUpdateRollbackInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), resourcesToSkip: \(Swift.String(describing: resourcesToSkip)), roleARN: \(Swift.String(describing: roleARN)), stackName: \(Swift.String(describing: stackName)))"}
}

extension ContinueUpdateRollbackInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let resourcesToSkip = resourcesToSkip {
            var resourcesToSkipContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourcesToSkip"))
            for (index0, resourcetoskip0) in resourcesToSkip.enumerated() {
                try resourcesToSkipContainer.encode(resourcetoskip0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ContinueUpdateRollback", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ContinueUpdateRollbackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ContinueUpdateRollbackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ContinueUpdateRollbackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ContinueUpdateRollbackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ContinueUpdateRollbackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ContinueUpdateRollbackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ContinueUpdateRollbackOutputError>
}

public struct ContinueUpdateRollbackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ContinueUpdateRollbackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ContinueUpdateRollbackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ContinueUpdateRollbackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ContinueUpdateRollbackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ContinueUpdateRollbackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ContinueUpdateRollbackOutputError>
}

/// <p>The input for the <a>ContinueUpdateRollback</a> action.</p>
public struct ContinueUpdateRollbackInput: Swift.Equatable {
    /// <p>A unique identifier for this <code>ContinueUpdateRollback</code> request. Specify
    ///          this token if you plan to retry requests so that AWS CloudFormation knows that you're not
    ///          attempting to continue the rollback to a stack with the same name. You might retry
    ///          <code>ContinueUpdateRollback</code> requests to ensure that AWS CloudFormation
    ///          successfully received them.</p>
    public let clientRequestToken: Swift.String?
    /// <p>A list of the logical IDs of the resources that AWS CloudFormation skips during the
    ///          continue update rollback operation. You can specify only resources that are in the
    ///             <code>UPDATE_FAILED</code> state because a rollback failed. You can't specify resources
    ///          that are in the <code>UPDATE_FAILED</code> state for other reasons, for example, because an
    ///          update was cancelled. To check why a resource update failed, use the <a>DescribeStackResources</a> action, and view the resource status reason. </p>
    ///          <important>
    ///             <p>Specify this property to skip rolling back resources that AWS CloudFormation can't
    ///             successfully roll back. We recommend that you <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed"> troubleshoot</a> resources before skipping them. AWS CloudFormation sets the
    ///             status of the specified resources to <code>UPDATE_COMPLETE</code> and continues to roll
    ///             back the stack. After the rollback is complete, the state of the skipped resources will
    ///             be inconsistent with the state of the resources in the stack template. Before performing
    ///             another stack update, you must update the stack or resources to be consistent with each
    ///             other. If you don't, subsequent stack updates might fail, and the stack will become
    ///             unrecoverable. </p>
    ///          </important>
    ///          <p>Specify the minimum number of resources required to successfully roll back your
    ///          stack. For example, a failed resource update might cause dependent resources to fail. In
    ///          this case, it might not be necessary to skip the dependent resources. </p>
    ///          <p>To skip resources that are part of nested stacks, use the following format:
    ///             <code>NestedStackName.ResourceLogicalID</code>. If you want to specify the logical ID of
    ///          a stack resource (<code>Type: AWS::CloudFormation::Stack</code>) in the
    ///             <code>ResourcesToSkip</code> list, then its corresponding embedded stack must be in one
    ///          of the following states: <code>DELETE_IN_PROGRESS</code>, <code>DELETE_COMPLETE</code>, or
    ///             <code>DELETE_FAILED</code>. </p>
    ///          <note>
    ///             <p>Don't confuse a child stack's name with its corresponding logical ID defined in
    ///             the parent stack. For an example of a continue update rollback operation with nested
    ///             stacks, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html#nested-stacks">Using ResourcesToSkip to recover a nested stacks hierarchy</a>. </p>
    ///          </note>
    public let resourcesToSkip: [Swift.String]?
    /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
    ///          that AWS CloudFormation assumes to roll back the stack. AWS CloudFormation uses the role's
    ///          credentials to make calls on your behalf. AWS CloudFormation always uses this role for all
    ///          future operations on the stack. As long as users have permission to operate on the stack,
    ///          AWS CloudFormation uses this role even if the users don't have permission to pass it.
    ///          Ensure that the role grants least privilege.</p>
    ///          <p>If you don't specify a value, AWS CloudFormation uses the role that was previously
    ///          associated with the stack. If no role is available, AWS CloudFormation uses a temporary
    ///          session that is generated from your user credentials.</p>
    public let roleARN: Swift.String?
    /// <p>The name or the unique ID of the stack that you want to continue rolling
    ///          back.</p>
    ///          <note>
    ///             <p>Don't specify the name of a nested stack (a stack that was created by using the
    ///                <code>AWS::CloudFormation::Stack</code> resource). Instead, use this operation on the
    ///             parent stack (the stack that contains the <code>AWS::CloudFormation::Stack</code>
    ///             resource).</p>
    ///          </note>
    public let stackName: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        resourcesToSkip: [Swift.String]? = nil,
        roleARN: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.resourcesToSkip = resourcesToSkip
        self.roleARN = roleARN
        self.stackName = stackName
    }
}

extension ContinueUpdateRollbackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ContinueUpdateRollbackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ContinueUpdateRollbackOutputError: Swift.Error, Swift.Equatable {
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ContinueUpdateRollbackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContinueUpdateRollbackOutputResponse()"}
}

extension ContinueUpdateRollbackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The output for a <a>ContinueUpdateRollback</a> action.</p>
public struct ContinueUpdateRollbackOutputResponse: Swift.Equatable {

    public init() {}
}

struct ContinueUpdateRollbackOutputResponseBody: Swift.Equatable {
}

extension ContinueUpdateRollbackOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateChangeSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateChangeSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateChangeSetOutputError>
}

extension CreateChangeSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateChangeSetInput(capabilities: \(Swift.String(describing: capabilities)), changeSetName: \(Swift.String(describing: changeSetName)), changeSetType: \(Swift.String(describing: changeSetType)), clientToken: \(Swift.String(describing: clientToken)), description: \(Swift.String(describing: description)), includeNestedStacks: \(Swift.String(describing: includeNestedStacks)), notificationARNs: \(Swift.String(describing: notificationARNs)), parameters: \(Swift.String(describing: parameters)), resourceTypes: \(Swift.String(describing: resourceTypes)), resourcesToImport: \(Swift.String(describing: resourcesToImport)), roleARN: \(Swift.String(describing: roleARN)), rollbackConfiguration: \(Swift.String(describing: rollbackConfiguration)), stackName: \(Swift.String(describing: stackName)), tags: \(Swift.String(describing: tags)), templateBody: \(Swift.String(describing: templateBody)), templateURL: \(Swift.String(describing: templateURL)), usePreviousTemplate: \(Swift.String(describing: usePreviousTemplate)))"}
}

extension CreateChangeSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
            for (index0, capability0) in capabilities.enumerated() {
                try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let changeSetType = changeSetType {
            try container.encode(changeSetType, forKey: ClientRuntime.Key("ChangeSetType"))
        }
        if let clientToken = clientToken {
            try container.encode(clientToken, forKey: ClientRuntime.Key("ClientToken"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let includeNestedStacks = includeNestedStacks {
            try container.encode(includeNestedStacks, forKey: ClientRuntime.Key("IncludeNestedStacks"))
        }
        if let notificationARNs = notificationARNs {
            var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
            for (index0, notificationarn0) in notificationARNs.enumerated() {
                try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourceTypes = resourceTypes {
            var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
            for (index0, resourcetype0) in resourceTypes.enumerated() {
                try resourceTypesContainer.encode(resourcetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourcesToImport = resourcesToImport {
            var resourcesToImportContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourcesToImport"))
            for (index0, resourcetoimport0) in resourcesToImport.enumerated() {
                try resourcesToImportContainer.encode(resourcetoimport0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let usePreviousTemplate = usePreviousTemplate {
            try container.encode(usePreviousTemplate, forKey: ClientRuntime.Key("UsePreviousTemplate"))
        }
        try container.encode("CreateChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateChangeSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateChangeSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateChangeSetOutputError>
}

public struct CreateChangeSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateChangeSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateChangeSetOutputError>
}

/// <p>The input for the <a>CreateChangeSet</a> action.</p>
public struct CreateChangeSetInput: Swift.Equatable {
    /// <p>In some cases, you must explicitly acknowledge that your stack template contains certain
    ///          capabilities in order for AWS CloudFormation to create the stack.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_IAM</code> and <code>CAPABILITY_NAMED_IAM</code>
    ///                </p>
    ///                <p>Some stack templates might include resources that can affect permissions in
    ///                your AWS account; for example, by creating new AWS Identity and Access Management
    ///                (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one
    ///                of these capabilities.</p>
    ///                <p>The following IAM resources require you to specify either the
    ///                   <code>CAPABILITY_IAM</code> or <code>CAPABILITY_NAMED_IAM</code>
    ///                capability.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>If you have IAM resources, you can specify either capability. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you have IAM resources with custom names, you <i>must</i>
    ///                      specify <code>CAPABILITY_NAMED_IAM</code>. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you don't specify either of these capabilities, AWS CloudFormation returns an
    ///                         <code>InsufficientCapabilities</code> error.</p>
    ///                   </li>
    ///                </ul>
    ///                <p>If your stack template contains these resources, we recommend that you review
    ///                all permissions associated with them and edit their permissions if
    ///                necessary.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html">
    ///                         AWS::IAM::AccessKey</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html">
    ///                         AWS::IAM::Group</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"> AWS::IAM::InstanceProfile</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html">
    ///                         AWS::IAM::Policy</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html">
    ///                         AWS::IAM::Role</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html">
    ///                         AWS::IAM::User</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"> AWS::IAM::UserToGroupAddition</a>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM
    ///                   Resources in AWS CloudFormation Templates</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_AUTO_EXPAND</code>
    ///                </p>
    ///                <p>Some template contain macros. Macros perform custom processing on templates; this
    ///                can include simple actions like find-and-replace operations, all the way to extensive
    ///                transformations of entire templates. Because of this, users typically create a change
    ///                set from the processed template, so that they can review the changes resulting from
    ///                the macros before actually creating the stack. If your stack template contains one or
    ///                more macros, and you choose to create a stack directly from the processed template,
    ///                without first reviewing the resulting changes in a change set, you must acknowledge
    ///                this capability. This includes the <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html">AWS::Include</a> and <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html">AWS::Serverless</a> transforms, which are macros hosted by AWS CloudFormation.</p>
    ///                <note>
    ///                   <p>This capacity does not apply to creating change sets, and specifying it when
    ///                   creating change sets has no effect.</p>
    ///                   <p>If you want to create
    ///                   a stack from a stack template that contains macros <i>and</i> nested
    ///                   stacks, you must create or update the stack directly from the template using the
    ///                      <a>CreateStack</a> or <a>UpdateStack</a> action, and
    ///                   specifying this capability.</p>
    ///                </note>
    ///                <p>For more information on macros, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html">Using AWS CloudFormation Macros to
    ///                   Perform Custom Processing on Templates</a>.</p>
    ///             </li>
    ///          </ul>
    public let capabilities: [CloudFormationClientTypes.Capability]?
    /// <p>The name of the change set. The name must be unique among all change sets that are
    ///          associated with the specified stack.</p>
    ///          <p>A change set name can contain only alphanumeric, case sensitive characters and
    ///          hyphens. It must start with an alphabetic character and cannot exceed 128
    ///          characters.</p>
    public let changeSetName: Swift.String?
    /// <p>The type of change set operation. To create a change set for a new stack, specify
    ///             <code>CREATE</code>. To create a change set for an existing stack, specify
    ///             <code>UPDATE</code>. To create a change set for an import operation, specify
    ///             <code>IMPORT</code>.</p>
    ///          <p>If you create a change set for a new stack, AWS Cloudformation creates a stack with a
    ///          unique stack ID, but no template or resources. The stack will be in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#d0e11995">
    ///                <code>REVIEW_IN_PROGRESS</code>
    ///             </a> state until you execute the change
    ///          set.</p>
    ///          <p>By default, AWS CloudFormation specifies <code>UPDATE</code>. You can't use the
    ///             <code>UPDATE</code> type to create a change set for a new stack or the
    ///             <code>CREATE</code> type to create a change set for an existing stack.</p>
    public let changeSetType: CloudFormationClientTypes.ChangeSetType?
    /// <p>A unique identifier for this <code>CreateChangeSet</code> request. Specify this token
    ///          if you plan to retry requests so that AWS CloudFormation knows that you're not attempting
    ///          to create another change set with the same name. You might retry
    ///             <code>CreateChangeSet</code> requests to ensure that AWS CloudFormation successfully
    ///          received them.</p>
    public let clientToken: Swift.String?
    /// <p>A description to help you identify this change set.</p>
    public let description: Swift.String?
    /// <p>Creates a change set for the all nested stacks specified in the template. The default
    ///          behavior of this action is set to <code>False</code>. To include nested sets in a change
    ///          set, specify <code>True</code>.</p>
    public let includeNestedStacks: Swift.Bool?
    /// <p>The Amazon Resource Names (ARNs) of Amazon Simple Notification Service (Amazon SNS)
    ///          topics that AWS CloudFormation associates with the stack. To remove all associated
    ///          notification topics, specify an empty list.</p>
    public let notificationARNs: [Swift.String]?
    /// <p>A list of <code>Parameter</code> structures that specify input parameters for the
    ///          change set. For more information, see the <a>Parameter</a> data type.</p>
    public let parameters: [CloudFormationClientTypes.Parameter]?
    /// <p>The template resource types that you have permissions to work with if you execute
    ///          this change set, such as <code>AWS::EC2::Instance</code>, <code>AWS::EC2::*</code>, or
    ///             <code>Custom::MyCustomInstance</code>.</p>
    ///          <p>If the list of resource types doesn't include a resource type that you're updating,
    ///          the stack update fails. By default, AWS CloudFormation grants permissions to all resource
    ///          types. AWS Identity and Access Management (IAM) uses this parameter for condition keys in
    ///          IAM policies for AWS CloudFormation. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html">Controlling Access with
    ///             AWS Identity and Access Management</a> in the AWS CloudFormation User
    ///          Guide.</p>
    public let resourceTypes: [Swift.String]?
    /// <p>The resources to import into your stack.</p>
    public let resourcesToImport: [CloudFormationClientTypes.ResourceToImport]?
    /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
    ///          that AWS CloudFormation assumes when executing the change set. AWS CloudFormation uses the
    ///          role's credentials to make calls on your behalf. AWS CloudFormation uses this role for all
    ///          future operations on the stack. As long as users have permission to operate on the stack,
    ///          AWS CloudFormation uses this role even if the users don't have permission to pass it.
    ///          Ensure that the role grants least privilege.</p>
    ///          <p>If you don't specify a value, AWS CloudFormation uses the role that was previously
    ///          associated with the stack. If no role is available, AWS CloudFormation uses a temporary
    ///          session that is generated from your user credentials.</p>
    public let roleARN: Swift.String?
    /// <p>The rollback triggers for AWS CloudFormation to monitor during stack creation and
    ///          updating operations, and for the specified monitoring period afterwards.</p>
    public let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// <p>The name or the unique ID of the stack for which you are creating a change set. AWS
    ///          CloudFormation generates the change set by comparing this stack's information with the
    ///          information that you submit, such as a modified template or different parameter input
    ///          values.</p>
    public let stackName: Swift.String?
    /// <p>Key-value pairs to associate with this stack. AWS CloudFormation also propagates
    ///          these tags to resources in the stack. You can specify a maximum of 50 tags.</p>
    public let tags: [CloudFormationClientTypes.Tag]?
    /// <p>A structure that contains the body of the revised template, with a minimum length of
    ///          1 byte and a maximum length of 51,200 bytes. AWS CloudFormation generates the change set by
    ///          comparing this template with the template of the stack that you specified.</p>
    ///          <p>Conditional: You must specify only <code>TemplateBody</code> or
    ///             <code>TemplateURL</code>.</p>
    public let templateBody: Swift.String?
    /// <p>The location of the file that contains the revised template. The URL must point to a
    ///          template (max size: 460,800 bytes) that is located in an S3 bucket or a Systems Manager
    ///          document. AWS CloudFormation generates the change set by comparing this template with the
    ///          stack that you specified.</p>
    ///          <p>Conditional: You must specify only <code>TemplateBody</code> or
    ///             <code>TemplateURL</code>.</p>
    public let templateURL: Swift.String?
    /// <p>Whether to reuse the template that is associated with the stack to create the change
    ///          set.</p>
    public let usePreviousTemplate: Swift.Bool?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        changeSetName: Swift.String? = nil,
        changeSetType: CloudFormationClientTypes.ChangeSetType? = nil,
        clientToken: Swift.String? = nil,
        description: Swift.String? = nil,
        includeNestedStacks: Swift.Bool? = nil,
        notificationARNs: [Swift.String]? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        resourceTypes: [Swift.String]? = nil,
        resourcesToImport: [CloudFormationClientTypes.ResourceToImport]? = nil,
        roleARN: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        stackName: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        usePreviousTemplate: Swift.Bool? = nil
    )
    {
        self.capabilities = capabilities
        self.changeSetName = changeSetName
        self.changeSetType = changeSetType
        self.clientToken = clientToken
        self.description = description
        self.includeNestedStacks = includeNestedStacks
        self.notificationARNs = notificationARNs
        self.parameters = parameters
        self.resourceTypes = resourceTypes
        self.resourcesToImport = resourcesToImport
        self.roleARN = roleARN
        self.rollbackConfiguration = rollbackConfiguration
        self.stackName = stackName
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.usePreviousTemplate = usePreviousTemplate
    }
}

extension CreateChangeSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateChangeSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCapabilitiesException" : self = .insufficientCapabilitiesException(try InsufficientCapabilitiesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateChangeSetOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case insufficientCapabilitiesException(InsufficientCapabilitiesException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateChangeSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateChangeSetOutputResponse(id: \(Swift.String(describing: id)), stackId: \(Swift.String(describing: stackId)))"}
}

extension CreateChangeSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateChangeSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.id = output.id
            self.stackId = output.stackId
        } else {
            self.id = nil
            self.stackId = nil
        }
    }
}

/// <p>The output for the <a>CreateChangeSet</a> action.</p>
public struct CreateChangeSetOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the change set.</p>
    public let id: Swift.String?
    /// <p>The unique ID of the stack.</p>
    public let stackId: Swift.String?

    public init (
        id: Swift.String? = nil,
        stackId: Swift.String? = nil
    )
    {
        self.id = id
        self.stackId = stackId
    }
}

struct CreateChangeSetOutputResponseBody: Swift.Equatable {
    public let id: Swift.String?
    public let stackId: Swift.String?
}

extension CreateChangeSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case stackId = "StackId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateChangeSetResult"))
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
    }
}

public struct CreateStackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStackOutputError>
}

extension CreateStackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateStackInput(capabilities: \(Swift.String(describing: capabilities)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), disableRollback: \(Swift.String(describing: disableRollback)), enableTerminationProtection: \(Swift.String(describing: enableTerminationProtection)), notificationARNs: \(Swift.String(describing: notificationARNs)), onFailure: \(Swift.String(describing: onFailure)), parameters: \(Swift.String(describing: parameters)), resourceTypes: \(Swift.String(describing: resourceTypes)), roleARN: \(Swift.String(describing: roleARN)), rollbackConfiguration: \(Swift.String(describing: rollbackConfiguration)), stackName: \(Swift.String(describing: stackName)), stackPolicyBody: \(Swift.String(describing: stackPolicyBody)), stackPolicyURL: \(Swift.String(describing: stackPolicyURL)), tags: \(Swift.String(describing: tags)), templateBody: \(Swift.String(describing: templateBody)), templateURL: \(Swift.String(describing: templateURL)), timeoutInMinutes: \(Swift.String(describing: timeoutInMinutes)))"}
}

extension CreateStackInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
            for (index0, capability0) in capabilities.enumerated() {
                try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let disableRollback = disableRollback {
            try container.encode(disableRollback, forKey: ClientRuntime.Key("DisableRollback"))
        }
        if let enableTerminationProtection = enableTerminationProtection {
            try container.encode(enableTerminationProtection, forKey: ClientRuntime.Key("EnableTerminationProtection"))
        }
        if let notificationARNs = notificationARNs {
            var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
            for (index0, notificationarn0) in notificationARNs.enumerated() {
                try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let onFailure = onFailure {
            try container.encode(onFailure, forKey: ClientRuntime.Key("OnFailure"))
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourceTypes = resourceTypes {
            var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
            for (index0, resourcetype0) in resourceTypes.enumerated() {
                try resourceTypesContainer.encode(resourcetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackPolicyBody = stackPolicyBody {
            try container.encode(stackPolicyBody, forKey: ClientRuntime.Key("StackPolicyBody"))
        }
        if let stackPolicyURL = stackPolicyURL {
            try container.encode(stackPolicyURL, forKey: ClientRuntime.Key("StackPolicyURL"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let timeoutInMinutes = timeoutInMinutes {
            try container.encode(timeoutInMinutes, forKey: ClientRuntime.Key("TimeoutInMinutes"))
        }
        try container.encode("CreateStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateStackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStackOutputError>
}

public struct CreateStackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStackOutputError>
}

/// <p>The input for <a>CreateStack</a> action.</p>
public struct CreateStackInput: Swift.Equatable {
    /// <p>In some cases, you must explicitly acknowledge that your stack template contains certain
    ///          capabilities in order for AWS CloudFormation to create the stack.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_IAM</code> and <code>CAPABILITY_NAMED_IAM</code>
    ///                </p>
    ///                <p>Some stack templates might include resources that can affect permissions in
    ///                your AWS account; for example, by creating new AWS Identity and Access Management
    ///                (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one
    ///                of these capabilities.</p>
    ///                <p>The following IAM resources require you to specify either the
    ///                   <code>CAPABILITY_IAM</code> or <code>CAPABILITY_NAMED_IAM</code>
    ///                capability.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>If you have IAM resources, you can specify either capability. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you have IAM resources with custom names, you <i>must</i>
    ///                      specify <code>CAPABILITY_NAMED_IAM</code>. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you don't specify either of these capabilities, AWS CloudFormation returns an
    ///                         <code>InsufficientCapabilities</code> error.</p>
    ///                   </li>
    ///                </ul>
    ///                <p>If your stack template contains these resources, we recommend that you review
    ///                all permissions associated with them and edit their permissions if
    ///                necessary.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html">
    ///                         AWS::IAM::AccessKey</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html">
    ///                         AWS::IAM::Group</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"> AWS::IAM::InstanceProfile</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html">
    ///                         AWS::IAM::Policy</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html">
    ///                         AWS::IAM::Role</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html">
    ///                         AWS::IAM::User</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"> AWS::IAM::UserToGroupAddition</a>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM
    ///                   Resources in AWS CloudFormation Templates</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_AUTO_EXPAND</code>
    ///                </p>
    ///                <p>Some template contain macros. Macros perform custom processing on templates; this
    ///                can include simple actions like find-and-replace operations, all the way to extensive
    ///                transformations of entire templates. Because of this, users typically create a change
    ///                set from the processed template, so that they can review the changes resulting from
    ///                the macros before actually creating the stack. If your stack template contains one or
    ///                more macros, and you choose to create a stack directly from the processed template,
    ///                without first reviewing the resulting changes in a change set, you must acknowledge
    ///                this capability. This includes the <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html">AWS::Include</a> and <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html">AWS::Serverless</a> transforms, which are macros hosted by AWS CloudFormation.</p>
    ///                <p>If you want to create a stack
    ///                from a stack template that contains macros <i>and</i> nested stacks,
    ///                you must create the stack directly from the template using this capability.</p>
    ///                <important>
    ///                   <p>You should only create stacks directly from a stack template that contains
    ///                   macros if you know what processing the macro performs.</p>
    ///                   <p>Each macro relies on an underlying Lambda service function for processing stack
    ///                   templates. Be aware that the Lambda function owner can update the function
    ///                   operation without AWS CloudFormation being notified.</p>
    ///                </important>
    ///                <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html">Using
    ///                   AWS CloudFormation Macros to Perform Custom Processing on
    ///                Templates</a>.</p>
    ///             </li>
    ///          </ul>
    public let capabilities: [CloudFormationClientTypes.Capability]?
    /// <p>A unique identifier for this <code>CreateStack</code> request. Specify this token if
    ///          you plan to retry requests so that AWS CloudFormation knows that you're not attempting to
    ///          create a stack with the same name. You might retry <code>CreateStack</code> requests to
    ///          ensure that AWS CloudFormation successfully received them.</p>
    ///          <p>All events triggered by a given stack operation are assigned the same client request
    ///          token, which you can use to track operations. For example, if you execute a
    ///          <code>CreateStack</code> operation with the token <code>token1</code>, then all the
    ///          <code>StackEvents</code> generated by that operation will have
    ///          <code>ClientRequestToken</code> set as <code>token1</code>.</p>
    ///          <p>In the console, stack operations display the client request token on the Events tab.
    ///          Stack operations that are initiated from the console use the token format
    ///          <i>Console-StackOperation-ID</i>, which helps you easily identify the
    ///          stack operation . For example, if you create a stack using the console, each stack event
    ///          would be assigned the same token in the following format:
    ///          <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>. </p>
    public let clientRequestToken: Swift.String?
    /// <p>Set to <code>true</code> to disable rollback of the stack if stack creation failed.
    ///          You can specify either <code>DisableRollback</code> or <code>OnFailure</code>, but not
    ///          both.</p>
    ///          <p>Default: <code>false</code>
    ///          </p>
    public let disableRollback: Swift.Bool?
    /// <p>Whether to enable termination protection on the specified stack. If a user attempts
    ///          to delete a stack with termination protection enabled, the operation fails and the stack
    ///          remains unchanged. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html">Protecting a Stack From Being
    ///             Deleted</a> in the <i>AWS CloudFormation User Guide</i>. Termination protection is
    ///          disabled on stacks by default. </p>
    ///          <p> For <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">nested stacks</a>,
    ///          termination protection is set on the root stack and cannot be changed directly on the
    ///          nested stack.</p>
    public let enableTerminationProtection: Swift.Bool?
    /// <p>The Simple Notification Service (SNS) topic ARNs to publish stack related events. You
    ///          can find your SNS topic ARNs using the SNS console or your Command Line Interface
    ///          (CLI).</p>
    public let notificationARNs: [Swift.String]?
    /// <p>Determines what action will be taken if stack creation fails. This must be one of:
    ///          DO_NOTHING, ROLLBACK, or DELETE. You can specify either <code>OnFailure</code> or
    ///             <code>DisableRollback</code>, but not both.</p>
    ///          <p>Default: <code>ROLLBACK</code>
    ///          </p>
    public let onFailure: CloudFormationClientTypes.OnFailure?
    /// <p>A list of <code>Parameter</code> structures that specify input parameters for the
    ///          stack. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data
    ///          type.</p>
    public let parameters: [CloudFormationClientTypes.Parameter]?
    /// <p>The template resource types that you have permissions to work with for this create
    ///          stack action, such as <code>AWS::EC2::Instance</code>, <code>AWS::EC2::*</code>, or
    ///             <code>Custom::MyCustomInstance</code>. Use the following syntax to describe template
    ///          resource types: <code>AWS::*</code> (for all AWS resource), <code>Custom::*</code> (for all
    ///          custom resources), <code>Custom::<i>logical_ID</i>
    ///             </code> (for a specific custom resource),
    ///             <code>AWS::<i>service_name</i>::*</code> (for all resources of a
    ///          particular AWS service), and
    ///                <code>AWS::<i>service_name</i>::<i>resource_logical_ID</i>
    ///             </code> (for a specific AWS resource).</p>
    ///          <p>If the list of resource types doesn't include a resource that you're creating, the
    ///          stack creation fails. By default, AWS CloudFormation grants permissions to all resource
    ///          types. AWS Identity and Access Management (IAM) uses this parameter for AWS
    ///          CloudFormation-specific condition keys in IAM policies. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html">Controlling Access with AWS Identity and Access Management</a>.</p>
    public let resourceTypes: [Swift.String]?
    /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
    ///          that AWS CloudFormation assumes to create the stack. AWS CloudFormation uses the role's
    ///          credentials to make calls on your behalf. AWS CloudFormation always uses this role for all
    ///          future operations on the stack. As long as users have permission to operate on the stack,
    ///          AWS CloudFormation uses this role even if the users don't have permission to pass it.
    ///          Ensure that the role grants least privilege.</p>
    ///          <p>If you don't specify a value, AWS CloudFormation uses the role that was previously
    ///          associated with the stack. If no role is available, AWS CloudFormation uses a temporary
    ///          session that is generated from your user credentials.</p>
    public let roleARN: Swift.String?
    /// <p>The rollback triggers for AWS CloudFormation to monitor during stack creation and
    ///          updating operations, and for the specified monitoring period afterwards.</p>
    public let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// <p>The name that is associated with the stack. The name must be unique in the Region in
    ///          which you are creating the stack.</p>
    ///          <note>
    ///             <p>A stack name can contain only alphanumeric characters (case sensitive) and
    ///             hyphens. It must start with an alphabetic character and cannot be longer than 128
    ///             characters.</p>
    ///          </note>
    public let stackName: Swift.String?
    /// <p>Structure containing the stack policy body. For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html"> Prevent Updates
    ///             to Stack Resources</a> in the <i>AWS CloudFormation User Guide</i>.
    ///          You can specify either the <code>StackPolicyBody</code> or the <code>StackPolicyURL</code>
    ///          parameter, but not both.</p>
    public let stackPolicyBody: Swift.String?
    /// <p>Location of a file containing the stack policy. The URL must point to a policy
    ///          (maximum size: 16 KB) located in an S3 bucket in the same
    ///          Region as the stack. You can specify either the <code>StackPolicyBody</code> or the
    ///             <code>StackPolicyURL</code> parameter, but not both.</p>
    public let stackPolicyURL: Swift.String?
    /// <p>Key-value pairs to associate with this stack. AWS CloudFormation also propagates
    ///          these tags to the resources created in the stack. A maximum number of 50 tags can be
    ///          specified.</p>
    public let tags: [CloudFormationClientTypes.Tag]?
    /// <p>Structure containing the template body with a minimum length of 1 byte and a maximum
    ///          length of 51,200 bytes. For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must specify either the <code>TemplateBody</code> or the
    ///             <code>TemplateURL</code> parameter, but not both.</p>
    public let templateBody: Swift.String?
    /// <p>Location of file containing the template body. The URL must point to a template (max
    ///          size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document.
    ///          For more information, go to the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must specify either the <code>TemplateBody</code> or the
    ///             <code>TemplateURL</code> parameter, but not both.</p>
    public let templateURL: Swift.String?
    /// <p>The amount of time that can pass before the stack status becomes CREATE_FAILED; if
    ///             <code>DisableRollback</code> is not set or is set to <code>false</code>, the stack will
    ///          be rolled back.</p>
    public let timeoutInMinutes: Swift.Int?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        clientRequestToken: Swift.String? = nil,
        disableRollback: Swift.Bool? = nil,
        enableTerminationProtection: Swift.Bool? = nil,
        notificationARNs: [Swift.String]? = nil,
        onFailure: CloudFormationClientTypes.OnFailure? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        resourceTypes: [Swift.String]? = nil,
        roleARN: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        stackName: Swift.String? = nil,
        stackPolicyBody: Swift.String? = nil,
        stackPolicyURL: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        timeoutInMinutes: Swift.Int? = nil
    )
    {
        self.capabilities = capabilities
        self.clientRequestToken = clientRequestToken
        self.disableRollback = disableRollback
        self.enableTerminationProtection = enableTerminationProtection
        self.notificationARNs = notificationARNs
        self.onFailure = onFailure
        self.parameters = parameters
        self.resourceTypes = resourceTypes
        self.roleARN = roleARN
        self.rollbackConfiguration = rollbackConfiguration
        self.stackName = stackName
        self.stackPolicyBody = stackPolicyBody
        self.stackPolicyURL = stackPolicyURL
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.timeoutInMinutes = timeoutInMinutes
    }
}

public struct CreateStackInstancesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStackInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStackInstancesOutputError>
}

extension CreateStackInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateStackInstancesInput(accounts: \(Swift.String(describing: accounts)), callAs: \(Swift.String(describing: callAs)), deploymentTargets: \(Swift.String(describing: deploymentTargets)), operationId: \(Swift.String(describing: operationId)), operationPreferences: \(Swift.String(describing: operationPreferences)), parameterOverrides: \(Swift.String(describing: parameterOverrides)), regions: \(Swift.String(describing: regions)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension CreateStackInstancesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
            for (index0, account0) in accounts.enumerated() {
                try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let parameterOverrides = parameterOverrides {
            var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
            for (index0, parameter0) in parameterOverrides.enumerated() {
                try parameterOverridesContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let regions = regions {
            var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
            for (index0, region0) in regions.enumerated() {
                try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("CreateStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateStackInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStackInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStackInstancesOutputError>
}

public struct CreateStackInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStackInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStackInstancesOutputError>
}

public struct CreateStackInstancesInput: Swift.Equatable {
    /// <p>[Self-managed permissions] The names of one or more AWS accounts that you want to create stack instances in the
    ///          specified Region(s) for.</p>
    ///          <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
    public let accounts: [Swift.String]?
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>[Service-managed permissions] The AWS Organizations accounts for which to create stack instances in the specified Regions.</p>
    ///          <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
    public let deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// <p>The unique identifier for this stack set operation. </p>
    ///          <p>The operation ID also functions as an idempotency token, to ensure that AWS
    ///          CloudFormation performs the stack set operation only once, even if you retry the request
    ///          multiple times. You might retry stack set operation requests to ensure that AWS
    ///          CloudFormation successfully received them.</p>
    ///          <p>If you don't specify an operation ID, the SDK generates one automatically. </p>
    ///          <p>Repeating this stack set operation with a new operation ID retries all stack
    ///          instances whose status is <code>OUTDATED</code>. </p>
    public var operationId: Swift.String?
    /// <p>Preferences for how AWS CloudFormation performs this stack set operation.</p>
    public let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// <p>A list of stack set parameters whose values you want to override in the selected
    ///          stack instances.</p>
    ///          <p>Any overridden parameter values will be applied to all stack instances in the
    ///          specified accounts and Regions. When specifying parameters and their values, be aware of
    ///          how AWS CloudFormation sets parameter values during stack instance operations:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To override the current value for a parameter, include the parameter and
    ///                specify its value.</p>
    ///             </li>
    ///             <li>
    ///                <p>To leave a parameter set to its present value, you can do one of the
    ///                following:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Do not include the parameter in the list.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Include the parameter and specify <code>UsePreviousValue</code> as
    ///                         <code>true</code>. (You cannot specify both a value and set
    ///                         <code>UsePreviousValue</code> to <code>true</code>.)</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>To set all overridden parameter back to the values specified in the stack set,
    ///                specify a parameter list but do not include any parameters.</p>
    ///             </li>
    ///             <li>
    ///                <p>To leave all parameters set to their present values, do not specify this
    ///                property at all.</p>
    ///             </li>
    ///          </ul>
    ///          <p>During stack set updates, any parameter values overridden for a stack instance are
    ///          not updated, but retain their overridden value.</p>
    ///          <p>You can only override the parameter <i>values</i> that are specified in
    ///          the stack set; to add or delete a parameter itself, use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html">UpdateStackSet</a> to update the stack set template.</p>
    public let parameterOverrides: [CloudFormationClientTypes.Parameter]?
    /// <p>The names of one or more Regions where you want to create stack instances using the
    ///          specified AWS account(s). </p>
    public let regions: [Swift.String]?
    /// <p>The name or unique ID of the stack set that you want to create stack instances
    ///          from.</p>
    public let stackSetName: Swift.String?

    public init (
        accounts: [Swift.String]? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        parameterOverrides: [CloudFormationClientTypes.Parameter]? = nil,
        regions: [Swift.String]? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.callAs = callAs
        self.deploymentTargets = deploymentTargets
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.parameterOverrides = parameterOverrides
        self.regions = regions
        self.stackSetName = stackSetName
    }
}

extension CreateStackInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateStackInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationIdAlreadyExistsException" : self = .operationIdAlreadyExistsException(try OperationIdAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StaleRequestException" : self = .staleRequestException(try StaleRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateStackInstancesOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case limitExceededException(LimitExceededException)
    case operationIdAlreadyExistsException(OperationIdAlreadyExistsException)
    case operationInProgressException(OperationInProgressException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case staleRequestException(StaleRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStackInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateStackInstancesOutputResponse(operationId: \(Swift.String(describing: operationId)))"}
}

extension CreateStackInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateStackInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operationId = output.operationId
        } else {
            self.operationId = nil
        }
    }
}

public struct CreateStackInstancesOutputResponse: Swift.Equatable {
    /// <p>The unique identifier for this stack set operation.</p>
    public let operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct CreateStackInstancesOutputResponseBody: Swift.Equatable {
    public let operationId: Swift.String?
}

extension CreateStackInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId = "OperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateStackInstancesResult"))
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension CreateStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AlreadyExistsException" : self = .alreadyExistsException(try AlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCapabilitiesException" : self = .insufficientCapabilitiesException(try InsufficientCapabilitiesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateStackOutputError: Swift.Error, Swift.Equatable {
    case alreadyExistsException(AlreadyExistsException)
    case insufficientCapabilitiesException(InsufficientCapabilitiesException)
    case limitExceededException(LimitExceededException)
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateStackOutputResponse(stackId: \(Swift.String(describing: stackId)))"}
}

extension CreateStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateStackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackId = output.stackId
        } else {
            self.stackId = nil
        }
    }
}

/// <p>The output for a <a>CreateStack</a> action.</p>
public struct CreateStackOutputResponse: Swift.Equatable {
    /// <p>Unique identifier of the stack.</p>
    public let stackId: Swift.String?

    public init (
        stackId: Swift.String? = nil
    )
    {
        self.stackId = stackId
    }
}

struct CreateStackOutputResponseBody: Swift.Equatable {
    public let stackId: Swift.String?
}

extension CreateStackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackId = "StackId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateStackResult"))
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
    }
}

public struct CreateStackSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStackSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStackSetOutputError>
}

extension CreateStackSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateStackSetInput(administrationRoleARN: \(Swift.String(describing: administrationRoleARN)), autoDeployment: \(Swift.String(describing: autoDeployment)), callAs: \(Swift.String(describing: callAs)), capabilities: \(Swift.String(describing: capabilities)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), description: \(Swift.String(describing: description)), executionRoleName: \(Swift.String(describing: executionRoleName)), parameters: \(Swift.String(describing: parameters)), permissionModel: \(Swift.String(describing: permissionModel)), stackSetName: \(Swift.String(describing: stackSetName)), tags: \(Swift.String(describing: tags)), templateBody: \(Swift.String(describing: templateBody)), templateURL: \(Swift.String(describing: templateURL)))"}
}

extension CreateStackSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let capabilities = capabilities {
            var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
            for (index0, capability0) in capabilities.enumerated() {
                try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("CreateStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct CreateStackSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStackSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStackSetOutputError>
}

public struct CreateStackSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateStackSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateStackSetOutputError>
}

public struct CreateStackSetInput: Swift.Equatable {
    /// <p>The Amazon Resource Number (ARN) of the IAM role to use to create this stack set. </p>
    ///          <p>Specify an IAM role only if you are using customized administrator roles to control
    ///          which users or groups can manage specific stack sets within the same administrator account.
    ///          For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html">Prerequisites:
    ///             Granting Permissions for Stack Set Operations</a> in the
    ///             <i>AWS CloudFormation User Guide</i>.</p>
    public let administrationRoleARN: Swift.String?
    /// <p>Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if <code>PermissionModel</code> is <code>SERVICE_MANAGED</code>.</p>
    public let autoDeployment: CloudFormationClientTypes.AutoDeployment?
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>To create a stack set with service-managed permissions while signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>To create a stack set with service-managed permissions while signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated admin in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Stack sets with service-managed permissions are created in the management account, including stack sets that are created by delegated administrators.</p>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>In some cases, you must explicitly acknowledge that your stack set template contains
    ///          certain capabilities in order for AWS CloudFormation to create the stack set and related stack
    ///          instances.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_IAM</code> and <code>CAPABILITY_NAMED_IAM</code>
    ///                </p>
    ///                <p>Some stack templates might include resources that can affect permissions in
    ///                your AWS account; for example, by creating new AWS Identity and Access Management
    ///                (IAM) users. For those stack sets, you must explicitly acknowledge this by specifying
    ///                one of these capabilities.</p>
    ///                <p>The following IAM resources require you to specify either the
    ///                   <code>CAPABILITY_IAM</code> or <code>CAPABILITY_NAMED_IAM</code>
    ///                capability.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>If you have IAM resources, you can specify either capability. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you have IAM resources with custom names, you <i>must</i>
    ///                      specify <code>CAPABILITY_NAMED_IAM</code>. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you don't specify either of these capabilities, AWS CloudFormation returns an
    ///                         <code>InsufficientCapabilities</code> error.</p>
    ///                   </li>
    ///                </ul>
    ///                <p>If your stack template contains these resources, we recommend that you review
    ///                all permissions associated with them and edit their permissions if
    ///                necessary.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html">
    ///                         AWS::IAM::AccessKey</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html">
    ///                         AWS::IAM::Group</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"> AWS::IAM::InstanceProfile</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html">
    ///                         AWS::IAM::Policy</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html">
    ///                         AWS::IAM::Role</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html">
    ///                         AWS::IAM::User</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"> AWS::IAM::UserToGroupAddition</a>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM
    ///                   Resources in AWS CloudFormation Templates</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_AUTO_EXPAND</code>
    ///                </p>
    ///                <p>Some templates reference macros. If your stack set template references one or more macros,
    ///                you must create the stack set directly from the processed template, without first
    ///                reviewing the resulting changes in a change set. To create the stack set directly, you must acknowledge this
    ///                capability. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html">Using AWS CloudFormation Macros to Perform Custom Processing on
    ///                Templates</a>.</p>
    ///                <important>
    ///                   <p>Stack sets with service-managed permissions
    ///                      do not currently support the use of macros in templates. (This includes
    ///                      the <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html">AWS::Include</a> and <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html">AWS::Serverless</a>
    ///                      transforms, which are macros hosted by AWS CloudFormation.) Even if you specify this
    ///                      capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will
    ///                      fail.</p>
    ///                </important>
    ///             </li>
    ///          </ul>
    public let capabilities: [CloudFormationClientTypes.Capability]?
    /// <p>A unique identifier for this <code>CreateStackSet</code> request. Specify this token
    ///          if you plan to retry requests so that AWS CloudFormation knows that you're not attempting
    ///          to create another stack set with the same name. You might retry <code>CreateStackSet</code>
    ///          requests to ensure that AWS CloudFormation successfully received them.</p>
    ///          <p>If you don't specify an operation ID, the SDK generates one automatically.
    ///       </p>
    public var clientRequestToken: Swift.String?
    /// <p>A description of the stack set. You can use the description to identify the stack
    ///          set's purpose or other important information.</p>
    public let description: Swift.String?
    /// <p>The name of the IAM execution role to use to create the stack set. If you do not specify
    ///          an execution role, AWS CloudFormation uses the <code>AWSCloudFormationStackSetExecutionRole</code> role
    ///          for the stack set operation.</p>
    ///          <p>Specify an IAM role only if you are using customized execution roles to control which
    ///          stack resources users and groups can include in their stack sets.
    ///
    ///       </p>
    public let executionRoleName: Swift.String?
    /// <p>The input parameters for the stack set template. </p>
    public let parameters: [CloudFormationClientTypes.Parameter]?
    /// <p>Describes how the IAM roles required for stack set operations are created. By default, <code>SELF-MANAGED</code> is specified.</p>
    ///          <ul>
    ///             <li>
    ///                <p>With <code>self-managed</code> permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html">Grant Self-Managed Stack Set Permissions</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>With <code>service-managed</code> permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by AWS Organizations. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html">Grant Service-Managed Stack Set Permissions</a>.</p>
    ///             </li>
    ///          </ul>
    public let permissionModel: CloudFormationClientTypes.PermissionModels?
    /// <p>The name to associate with the stack set. The name must be unique in the Region where
    ///          you create your stack set.</p>
    ///          <note>
    ///             <p>A stack name can contain only alphanumeric characters (case-sensitive) and
    ///             hyphens. It must start with an alphabetic character and can't be longer than 128
    ///             characters.</p>
    ///          </note>
    public let stackSetName: Swift.String?
    /// <p>The key-value pairs to associate with this stack set and the stacks created from it.
    ///          AWS CloudFormation also propagates these tags to supported resources that are created in
    ///          the stacks. A maximum number of 50 tags can be specified.</p>
    ///          <p>If you specify tags as part of a <code>CreateStackSet</code> action, AWS
    ///          CloudFormation checks to see if you have the required IAM permission to tag resources. If
    ///          you don't, the entire <code>CreateStackSet</code> action fails with an <code>access
    ///             denied</code> error, and the stack set is not created.</p>
    public let tags: [CloudFormationClientTypes.Tag]?
    /// <p>The structure that contains the template body, with a minimum length of 1 byte and a
    ///          maximum length of 51,200 bytes. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must specify either the TemplateBody or the TemplateURL parameter,
    ///          but not both.</p>
    public let templateBody: Swift.String?
    /// <p>The location of the file that contains the template body. The URL must point to a
    ///          template (maximum size: 460,800 bytes) that's located in an Amazon S3 bucket or a Systems
    ///          Manager document. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must specify either the TemplateBody or the TemplateURL parameter,
    ///          but not both.</p>
    public let templateURL: Swift.String?

    public init (
        administrationRoleARN: Swift.String? = nil,
        autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        clientRequestToken: Swift.String? = nil,
        description: Swift.String? = nil,
        executionRoleName: Swift.String? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
        stackSetName: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.administrationRoleARN = administrationRoleARN
        self.autoDeployment = autoDeployment
        self.callAs = callAs
        self.capabilities = capabilities
        self.clientRequestToken = clientRequestToken
        self.description = description
        self.executionRoleName = executionRoleName
        self.parameters = parameters
        self.permissionModel = permissionModel
        self.stackSetName = stackSetName
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
    }
}

extension CreateStackSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension CreateStackSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CreatedButModifiedException" : self = .createdButModifiedException(try CreatedButModifiedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NameAlreadyExistsException" : self = .nameAlreadyExistsException(try NameAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateStackSetOutputError: Swift.Error, Swift.Equatable {
    case createdButModifiedException(CreatedButModifiedException)
    case limitExceededException(LimitExceededException)
    case nameAlreadyExistsException(NameAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateStackSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateStackSetOutputResponse(stackSetId: \(Swift.String(describing: stackSetId)))"}
}

extension CreateStackSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateStackSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackSetId = output.stackSetId
        } else {
            self.stackSetId = nil
        }
    }
}

public struct CreateStackSetOutputResponse: Swift.Equatable {
    /// <p>The ID of the stack set that you're creating.</p>
    public let stackSetId: Swift.String?

    public init (
        stackSetId: Swift.String? = nil
    )
    {
        self.stackSetId = stackSetId
    }
}

struct CreateStackSetOutputResponseBody: Swift.Equatable {
    public let stackSetId: Swift.String?
}

extension CreateStackSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackSetId = "StackSetId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("CreateStackSetResult"))
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
    }
}

extension CreatedButModifiedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatedButModifiedException(message: \(Swift.String(describing: message)))"}
}

extension CreatedButModifiedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<CreatedButModifiedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified resource exists, but has been changed.</p>
public struct CreatedButModifiedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct CreatedButModifiedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension CreatedButModifiedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct DeleteChangeSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteChangeSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteChangeSetOutputError>
}

extension DeleteChangeSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteChangeSetInput(changeSetName: \(Swift.String(describing: changeSetName)), stackName: \(Swift.String(describing: stackName)))"}
}

extension DeleteChangeSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DeleteChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteChangeSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteChangeSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteChangeSetOutputError>
}

public struct DeleteChangeSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteChangeSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteChangeSetOutputError>
}

/// <p>The input for the <a>DeleteChangeSet</a> action.</p>
public struct DeleteChangeSetInput: Swift.Equatable {
    /// <p>The name or Amazon Resource Name (ARN) of the change set that you want to
    ///          delete.</p>
    public let changeSetName: Swift.String?
    /// <p>If you specified the name of a change set to delete, specify the stack name or ID
    ///          (ARN) that is associated with it.</p>
    public let stackName: Swift.String?

    public init (
        changeSetName: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.changeSetName = changeSetName
        self.stackName = stackName
    }
}

extension DeleteChangeSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteChangeSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidChangeSetStatusException" : self = .invalidChangeSetStatusException(try InvalidChangeSetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteChangeSetOutputError: Swift.Error, Swift.Equatable {
    case invalidChangeSetStatusException(InvalidChangeSetStatusException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteChangeSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteChangeSetOutputResponse()"}
}

extension DeleteChangeSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The output for the <a>DeleteChangeSet</a> action.</p>
public struct DeleteChangeSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteChangeSetOutputResponseBody: Swift.Equatable {
}

extension DeleteChangeSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteStackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStackOutputError>
}

extension DeleteStackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteStackInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), retainResources: \(Swift.String(describing: retainResources)), roleARN: \(Swift.String(describing: roleARN)), stackName: \(Swift.String(describing: stackName)))"}
}

extension DeleteStackInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let retainResources = retainResources {
            var retainResourcesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RetainResources"))
            for (index0, logicalresourceid0) in retainResources.enumerated() {
                try retainResourcesContainer.encode(logicalresourceid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DeleteStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteStackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStackOutputError>
}

public struct DeleteStackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStackOutputError>
}

/// <p>The input for <a>DeleteStack</a> action.</p>
public struct DeleteStackInput: Swift.Equatable {
    /// <p>A unique identifier for this <code>DeleteStack</code> request. Specify this token if
    ///          you plan to retry requests so that AWS CloudFormation knows that you're not attempting to
    ///          delete a stack with the same name. You might retry <code>DeleteStack</code> requests to
    ///          ensure that AWS CloudFormation successfully received them.</p>
    ///          <p>All events triggered by a given stack operation are assigned the same client request
    ///          token, which you can use to track operations. For example, if you execute a
    ///          <code>CreateStack</code> operation with the token <code>token1</code>, then all the
    ///          <code>StackEvents</code> generated by that operation will have
    ///          <code>ClientRequestToken</code> set as <code>token1</code>.</p>
    ///          <p>In the console, stack operations display the client request token on the Events tab.
    ///          Stack operations that are initiated from the console use the token format
    ///          <i>Console-StackOperation-ID</i>, which helps you easily identify the
    ///          stack operation . For example, if you create a stack using the console, each stack event
    ///          would be assigned the same token in the following format:
    ///          <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>. </p>
    public let clientRequestToken: Swift.String?
    /// <p>For stacks in the <code>DELETE_FAILED</code> state, a list of resource logical IDs
    ///          that are associated with the resources you want to retain. During deletion, AWS
    ///          CloudFormation deletes the stack but does not delete the retained resources.</p>
    ///          <p>Retaining resources is useful when you cannot delete a resource, such as a non-empty
    ///          S3 bucket, but you want to delete the stack.</p>
    public let retainResources: [Swift.String]?
    /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
    ///          that AWS CloudFormation assumes to delete the stack. AWS CloudFormation uses the role's
    ///          credentials to make calls on your behalf.</p>
    ///          <p>If you don't specify a value, AWS CloudFormation uses the role that was previously
    ///          associated with the stack. If no role is available, AWS CloudFormation uses a temporary
    ///          session that is generated from your user credentials.</p>
    public let roleARN: Swift.String?
    /// <p>The name or the unique stack ID that is associated with the stack.</p>
    public let stackName: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        retainResources: [Swift.String]? = nil,
        roleARN: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.retainResources = retainResources
        self.roleARN = roleARN
        self.stackName = stackName
    }
}

public struct DeleteStackInstancesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStackInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStackInstancesOutputError>
}

extension DeleteStackInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteStackInstancesInput(accounts: \(Swift.String(describing: accounts)), callAs: \(Swift.String(describing: callAs)), deploymentTargets: \(Swift.String(describing: deploymentTargets)), operationId: \(Swift.String(describing: operationId)), operationPreferences: \(Swift.String(describing: operationPreferences)), regions: \(Swift.String(describing: regions)), retainStacks: \(Swift.String(describing: retainStacks)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension DeleteStackInstancesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
            for (index0, account0) in accounts.enumerated() {
                try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let regions = regions {
            var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
            for (index0, region0) in regions.enumerated() {
                try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if retainStacks != false {
            try container.encode(retainStacks, forKey: ClientRuntime.Key("RetainStacks"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DeleteStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteStackInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStackInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStackInstancesOutputError>
}

public struct DeleteStackInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStackInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStackInstancesOutputError>
}

public struct DeleteStackInstancesInput: Swift.Equatable {
    /// <p>[Self-managed permissions] The names of the AWS accounts that you want to delete stack instances for.</p>
    ///          <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
    public let accounts: [Swift.String]?
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>[Service-managed permissions] The AWS Organizations accounts from which to delete stack instances.</p>
    ///          <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
    public let deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// <p>The unique identifier for this stack set operation. </p>
    ///          <p>If you don't specify an operation ID, the SDK generates one automatically. </p>
    ///          <p>The operation ID also functions as an idempotency token, to ensure that AWS
    ///          CloudFormation performs the stack set operation only once, even if you retry the request
    ///          multiple times. You can retry stack set operation requests to ensure that AWS
    ///          CloudFormation successfully received them.</p>
    ///          <p>Repeating this stack set operation with a new operation ID retries all stack
    ///          instances whose status is <code>OUTDATED</code>. </p>
    public var operationId: Swift.String?
    /// <p>Preferences for how AWS CloudFormation performs this stack set operation.</p>
    public let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// <p>The Regions where you want to delete stack set instances. </p>
    public let regions: [Swift.String]?
    /// <p>Removes the stack instances from the specified stack set, but doesn't delete the
    ///          stacks. You can't reassociate a retained stack or add an existing, saved stack to a new
    ///          stack set.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
    public let retainStacks: Swift.Bool
    /// <p>The name or unique ID of the stack set that you want to delete stack instances
    ///          for.</p>
    public let stackSetName: Swift.String?

    public init (
        accounts: [Swift.String]? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        regions: [Swift.String]? = nil,
        retainStacks: Swift.Bool = false,
        stackSetName: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.callAs = callAs
        self.deploymentTargets = deploymentTargets
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.regions = regions
        self.retainStacks = retainStacks
        self.stackSetName = stackSetName
    }
}

extension DeleteStackInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteStackInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationIdAlreadyExistsException" : self = .operationIdAlreadyExistsException(try OperationIdAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StaleRequestException" : self = .staleRequestException(try StaleRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteStackInstancesOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case operationIdAlreadyExistsException(OperationIdAlreadyExistsException)
    case operationInProgressException(OperationInProgressException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case staleRequestException(StaleRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStackInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteStackInstancesOutputResponse(operationId: \(Swift.String(describing: operationId)))"}
}

extension DeleteStackInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteStackInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operationId = output.operationId
        } else {
            self.operationId = nil
        }
    }
}

public struct DeleteStackInstancesOutputResponse: Swift.Equatable {
    /// <p>The unique identifier for this stack set operation.</p>
    public let operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct DeleteStackInstancesOutputResponseBody: Swift.Equatable {
    public let operationId: Swift.String?
}

extension DeleteStackInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId = "OperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DeleteStackInstancesResult"))
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension DeleteStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteStackOutputError: Swift.Error, Swift.Equatable {
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteStackOutputResponse()"}
}

extension DeleteStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStackOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteStackOutputResponseBody: Swift.Equatable {
}

extension DeleteStackOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteStackSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStackSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStackSetOutputError>
}

extension DeleteStackSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteStackSetInput(callAs: \(Swift.String(describing: callAs)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension DeleteStackSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DeleteStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeleteStackSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStackSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStackSetOutputError>
}

public struct DeleteStackSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStackSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStackSetOutputError>
}

public struct DeleteStackSetInput: Swift.Equatable {
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>The name or unique ID of the stack set that you're deleting. You can obtain this
    ///          value by running <a>ListStackSets</a>.</p>
    public let stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackSetName = stackSetName
    }
}

extension DeleteStackSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeleteStackSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotEmptyException" : self = .stackSetNotEmptyException(try StackSetNotEmptyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteStackSetOutputError: Swift.Error, Swift.Equatable {
    case operationInProgressException(OperationInProgressException)
    case stackSetNotEmptyException(StackSetNotEmptyException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStackSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteStackSetOutputResponse()"}
}

extension DeleteStackSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStackSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteStackSetOutputResponseBody: Swift.Equatable {
}

extension DeleteStackSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CloudFormationClientTypes.DeploymentTargets: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accounts = "Accounts"
        case accountsUrl = "AccountsUrl"
        case organizationalUnitIds = "OrganizationalUnitIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
            for (index0, account0) in accounts.enumerated() {
                try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let accountsUrl = accountsUrl {
            try container.encode(accountsUrl, forKey: ClientRuntime.Key("AccountsUrl"))
        }
        if let organizationalUnitIds = organizationalUnitIds {
            var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
            for (index0, organizationalunitid0) in organizationalUnitIds.enumerated() {
                try organizationalUnitIdsContainer.encode(organizationalunitid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.accounts) {
            struct KeyVal0{struct member{}}
            let accountsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accounts)
            if let accountsWrappedContainer = accountsWrappedContainer {
                let accountsContainer = try accountsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var accountsBuffer:[Swift.String]? = nil
                if let accountsContainer = accountsContainer {
                    accountsBuffer = [Swift.String]()
                    for stringContainer0 in accountsContainer {
                        accountsBuffer?.append(stringContainer0)
                    }
                }
                accounts = accountsBuffer
            } else {
                accounts = []
            }
        } else {
            accounts = nil
        }
        let accountsUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountsUrl)
        accountsUrl = accountsUrlDecoded
        if containerValues.contains(.organizationalUnitIds) {
            struct KeyVal0{struct member{}}
            let organizationalUnitIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .organizationalUnitIds)
            if let organizationalUnitIdsWrappedContainer = organizationalUnitIdsWrappedContainer {
                let organizationalUnitIdsContainer = try organizationalUnitIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var organizationalUnitIdsBuffer:[Swift.String]? = nil
                if let organizationalUnitIdsContainer = organizationalUnitIdsContainer {
                    organizationalUnitIdsBuffer = [Swift.String]()
                    for stringContainer0 in organizationalUnitIdsContainer {
                        organizationalUnitIdsBuffer?.append(stringContainer0)
                    }
                }
                organizationalUnitIds = organizationalUnitIdsBuffer
            } else {
                organizationalUnitIds = []
            }
        } else {
            organizationalUnitIds = nil
        }
    }
}

extension CloudFormationClientTypes.DeploymentTargets: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeploymentTargets(accounts: \(Swift.String(describing: accounts)), accountsUrl: \(Swift.String(describing: accountsUrl)), organizationalUnitIds: \(Swift.String(describing: organizationalUnitIds)))"}
}

extension CloudFormationClientTypes {
    /// <p>[Service-managed permissions] The AWS Organizations accounts to which StackSets deploys. StackSets does not deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization.</p>
    ///          <p>For update operations, you can specify either <code>Accounts</code> or <code>OrganizationalUnitIds</code>. For create and delete operations, specify <code>OrganizationalUnitIds</code>.</p>
    public struct DeploymentTargets: Swift.Equatable {
        /// <p>The names of one or more AWS accounts for which you want to deploy stack set updates.</p>
        public let accounts: [Swift.String]?
        /// <p>Returns the value of the AccountsUrl property.</p>
        public let accountsUrl: Swift.String?
        /// <p>The organization root ID or organizational unit (OU) IDs to which StackSets deploys.</p>
        public let organizationalUnitIds: [Swift.String]?

        public init (
            accounts: [Swift.String]? = nil,
            accountsUrl: Swift.String? = nil,
            organizationalUnitIds: [Swift.String]? = nil
        )
        {
            self.accounts = accounts
            self.accountsUrl = accountsUrl
            self.organizationalUnitIds = organizationalUnitIds
        }
    }

}

extension CloudFormationClientTypes {
    public enum DeprecatedStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deprecated
        case live
        case sdkUnknown(Swift.String)

        public static var allCases: [DeprecatedStatus] {
            return [
                .deprecated,
                .live,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deprecated: return "DEPRECATED"
            case .live: return "LIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeprecatedStatus(rawValue: rawValue) ?? DeprecatedStatus.sdkUnknown(rawValue)
        }
    }
}

public struct DeregisterTypeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterTypeOutputError>
}

extension DeregisterTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeregisterTypeInput(arn: \(Swift.String(describing: arn)), type: \(Swift.String(describing: type)), typeName: \(Swift.String(describing: typeName)), versionId: \(Swift.String(describing: versionId)))"}
}

extension DeregisterTypeInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("DeregisterType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DeregisterTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterTypeOutputError>
}

public struct DeregisterTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterTypeOutputError>
}

public struct DeregisterTypeInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let arn: Swift.String?
    /// <p>The kind of extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let type: CloudFormationClientTypes.RegistryType?
    /// <p>The name of the extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let typeName: Swift.String?
    /// <p>The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.</p>
    public let versionId: Swift.String?

    public init (
        arn: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.type = type
        self.typeName = typeName
        self.versionId = versionId
    }
}

extension DeregisterTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DeregisterTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeregisterTypeOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeNotFoundException(TypeNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeregisterTypeOutputResponse()"}
}

extension DeregisterTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterTypeOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeregisterTypeOutputResponseBody: Swift.Equatable {
}

extension DeregisterTypeOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeAccountLimitsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountLimitsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountLimitsOutputError>
}

extension DescribeAccountLimitsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAccountLimitsInput(nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAccountLimitsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("DescribeAccountLimits", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeAccountLimitsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountLimitsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountLimitsOutputError>
}

public struct DescribeAccountLimitsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAccountLimitsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAccountLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAccountLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAccountLimitsOutputError>
}

/// <p>The input for the <a>DescribeAccountLimits</a> action.</p>
public struct DescribeAccountLimitsInput: Swift.Equatable {
    /// <p>A string that identifies the next page of limits that you want to retrieve.</p>
    public let nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

extension DescribeAccountLimitsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeAccountLimitsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAccountLimitsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAccountLimitsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAccountLimitsOutputResponse(accountLimits: \(Swift.String(describing: accountLimits)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAccountLimitsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAccountLimitsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accountLimits = output.accountLimits
            self.nextToken = output.nextToken
        } else {
            self.accountLimits = nil
            self.nextToken = nil
        }
    }
}

/// <p>The output for the <a>DescribeAccountLimits</a> action.</p>
public struct DescribeAccountLimitsOutputResponse: Swift.Equatable {
    /// <p>An account limit structure that contain a list of AWS CloudFormation account limits
    ///          and their values.</p>
    public let accountLimits: [CloudFormationClientTypes.AccountLimit]?
    /// <p>If the output exceeds 1 MB in size, a string that identifies the next page of limits.
    ///          If no additional page exists, this value is null.</p>
    public let nextToken: Swift.String?

    public init (
        accountLimits: [CloudFormationClientTypes.AccountLimit]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountLimits = accountLimits
        self.nextToken = nextToken
    }
}

struct DescribeAccountLimitsOutputResponseBody: Swift.Equatable {
    public let accountLimits: [CloudFormationClientTypes.AccountLimit]?
    public let nextToken: Swift.String?
}

extension DescribeAccountLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountLimits = "AccountLimits"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeAccountLimitsResult"))
        if containerValues.contains(.accountLimits) {
            struct KeyVal0{struct member{}}
            let accountLimitsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .accountLimits)
            if let accountLimitsWrappedContainer = accountLimitsWrappedContainer {
                let accountLimitsContainer = try accountLimitsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.AccountLimit].self, forKey: .member)
                var accountLimitsBuffer:[CloudFormationClientTypes.AccountLimit]? = nil
                if let accountLimitsContainer = accountLimitsContainer {
                    accountLimitsBuffer = [CloudFormationClientTypes.AccountLimit]()
                    for structureContainer0 in accountLimitsContainer {
                        accountLimitsBuffer?.append(structureContainer0)
                    }
                }
                accountLimits = accountLimitsBuffer
            } else {
                accountLimits = []
            }
        } else {
            accountLimits = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeChangeSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeChangeSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeChangeSetOutputError>
}

extension DescribeChangeSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeChangeSetInput(changeSetName: \(Swift.String(describing: changeSetName)), nextToken: \(Swift.String(describing: nextToken)), stackName: \(Swift.String(describing: stackName)))"}
}

extension DescribeChangeSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeChangeSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeChangeSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeChangeSetOutputError>
}

public struct DescribeChangeSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeChangeSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeChangeSetOutputError>
}

/// <p>The input for the <a>DescribeChangeSet</a> action.</p>
public struct DescribeChangeSetInput: Swift.Equatable {
    /// <p>The name or Amazon Resource Name (ARN) of the change set that you want to
    ///          describe.</p>
    public let changeSetName: Swift.String?
    /// <p>A string (provided by the <a>DescribeChangeSet</a> response output) that
    ///          identifies the next page of information that you want to retrieve.</p>
    public let nextToken: Swift.String?
    /// <p>If you specified the name of a change set, specify the stack name or ID (ARN) of the
    ///          change set you want to describe.</p>
    public let stackName: Swift.String?

    public init (
        changeSetName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.changeSetName = changeSetName
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

extension DescribeChangeSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeChangeSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ChangeSetNotFoundException" : self = .changeSetNotFoundException(try ChangeSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeChangeSetOutputError: Swift.Error, Swift.Equatable {
    case changeSetNotFoundException(ChangeSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeChangeSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeChangeSetOutputResponse(capabilities: \(Swift.String(describing: capabilities)), changeSetId: \(Swift.String(describing: changeSetId)), changeSetName: \(Swift.String(describing: changeSetName)), changes: \(Swift.String(describing: changes)), creationTime: \(Swift.String(describing: creationTime)), description: \(Swift.String(describing: description)), executionStatus: \(Swift.String(describing: executionStatus)), includeNestedStacks: \(Swift.String(describing: includeNestedStacks)), nextToken: \(Swift.String(describing: nextToken)), notificationARNs: \(Swift.String(describing: notificationARNs)), parameters: \(Swift.String(describing: parameters)), parentChangeSetId: \(Swift.String(describing: parentChangeSetId)), rollbackConfiguration: \(Swift.String(describing: rollbackConfiguration)), rootChangeSetId: \(Swift.String(describing: rootChangeSetId)), stackId: \(Swift.String(describing: stackId)), stackName: \(Swift.String(describing: stackName)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)), tags: \(Swift.String(describing: tags)))"}
}

extension DescribeChangeSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeChangeSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capabilities = output.capabilities
            self.changeSetId = output.changeSetId
            self.changeSetName = output.changeSetName
            self.changes = output.changes
            self.creationTime = output.creationTime
            self.description = output.description
            self.executionStatus = output.executionStatus
            self.includeNestedStacks = output.includeNestedStacks
            self.nextToken = output.nextToken
            self.notificationARNs = output.notificationARNs
            self.parameters = output.parameters
            self.parentChangeSetId = output.parentChangeSetId
            self.rollbackConfiguration = output.rollbackConfiguration
            self.rootChangeSetId = output.rootChangeSetId
            self.stackId = output.stackId
            self.stackName = output.stackName
            self.status = output.status
            self.statusReason = output.statusReason
            self.tags = output.tags
        } else {
            self.capabilities = nil
            self.changeSetId = nil
            self.changeSetName = nil
            self.changes = nil
            self.creationTime = nil
            self.description = nil
            self.executionStatus = nil
            self.includeNestedStacks = nil
            self.nextToken = nil
            self.notificationARNs = nil
            self.parameters = nil
            self.parentChangeSetId = nil
            self.rollbackConfiguration = nil
            self.rootChangeSetId = nil
            self.stackId = nil
            self.stackName = nil
            self.status = nil
            self.statusReason = nil
            self.tags = nil
        }
    }
}

/// <p>The output for the <a>DescribeChangeSet</a> action.</p>
public struct DescribeChangeSetOutputResponse: Swift.Equatable {
    /// <p>If you execute the change set, the list of capabilities that were explicitly
    ///          acknowledged when the change set was created.</p>
    public let capabilities: [CloudFormationClientTypes.Capability]?
    /// <p>The ARN of the change set.</p>
    public let changeSetId: Swift.String?
    /// <p>The name of the change set.</p>
    public let changeSetName: Swift.String?
    /// <p>A list of <code>Change</code> structures that describes the resources AWS
    ///          CloudFormation changes if you execute the change set.</p>
    public let changes: [CloudFormationClientTypes.Change]?
    /// <p>The start time when the change set was created, in UTC.</p>
    public let creationTime: ClientRuntime.Date?
    /// <p>Information about the change set.</p>
    public let description: Swift.String?
    /// <p>If the change set execution status is <code>AVAILABLE</code>, you can execute the
    ///          change set. If you can’t execute the change set, the status indicates why. For example, a
    ///          change set might be in an <code>UNAVAILABLE</code> state because AWS CloudFormation is
    ///          still creating it or in an <code>OBSOLETE</code> state because the stack was already
    ///          updated.</p>
    public let executionStatus: CloudFormationClientTypes.ExecutionStatus?
    /// <p>Verifies if <code>IncludeNestedStacks</code> is set to <code>True</code>.</p>
    public let includeNestedStacks: Swift.Bool?
    /// <p>If the output exceeds 1 MB, a string that identifies the next page of changes. If
    ///          there is no additional page, this value is null.</p>
    public let nextToken: Swift.String?
    /// <p>The ARNs of the Amazon Simple Notification Service (Amazon SNS) topics that will be
    ///          associated with the stack if you execute the change set.</p>
    public let notificationARNs: [Swift.String]?
    /// <p>A list of <code>Parameter</code> structures that describes the input parameters and
    ///          their values used to create the change set. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data type.</p>
    public let parameters: [CloudFormationClientTypes.Parameter]?
    /// <p>Specifies the change set ID of the parent change set in the current nested change set hierarchy.</p>
    public let parentChangeSetId: Swift.String?
    /// <p>The rollback triggers for AWS CloudFormation to monitor during stack creation and
    ///          updating operations, and for the specified monitoring period afterwards.</p>
    public let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// <p>Specifies the change set ID of the root change set in the current nested change set hierarchy.</p>
    public let rootChangeSetId: Swift.String?
    /// <p>The ARN of the stack that is associated with the change set.</p>
    public let stackId: Swift.String?
    /// <p>The name of the stack that is associated with the change set.</p>
    public let stackName: Swift.String?
    /// <p>The current status of the change set, such as <code>CREATE_IN_PROGRESS</code>,
    ///             <code>CREATE_COMPLETE</code>, or <code>FAILED</code>.</p>
    public let status: CloudFormationClientTypes.ChangeSetStatus?
    /// <p>A description of the change set's status. For example, if your attempt to create a
    ///          change set failed, AWS CloudFormation shows the error message.</p>
    public let statusReason: Swift.String?
    /// <p>If you execute the change set, the tags that will be associated with the
    ///          stack.</p>
    public let tags: [CloudFormationClientTypes.Tag]?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        changeSetId: Swift.String? = nil,
        changeSetName: Swift.String? = nil,
        changes: [CloudFormationClientTypes.Change]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        description: Swift.String? = nil,
        executionStatus: CloudFormationClientTypes.ExecutionStatus? = nil,
        includeNestedStacks: Swift.Bool? = nil,
        nextToken: Swift.String? = nil,
        notificationARNs: [Swift.String]? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        parentChangeSetId: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        rootChangeSetId: Swift.String? = nil,
        stackId: Swift.String? = nil,
        stackName: Swift.String? = nil,
        status: CloudFormationClientTypes.ChangeSetStatus? = nil,
        statusReason: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil
    )
    {
        self.capabilities = capabilities
        self.changeSetId = changeSetId
        self.changeSetName = changeSetName
        self.changes = changes
        self.creationTime = creationTime
        self.description = description
        self.executionStatus = executionStatus
        self.includeNestedStacks = includeNestedStacks
        self.nextToken = nextToken
        self.notificationARNs = notificationARNs
        self.parameters = parameters
        self.parentChangeSetId = parentChangeSetId
        self.rollbackConfiguration = rollbackConfiguration
        self.rootChangeSetId = rootChangeSetId
        self.stackId = stackId
        self.stackName = stackName
        self.status = status
        self.statusReason = statusReason
        self.tags = tags
    }
}

struct DescribeChangeSetOutputResponseBody: Swift.Equatable {
    public let changeSetName: Swift.String?
    public let changeSetId: Swift.String?
    public let stackId: Swift.String?
    public let stackName: Swift.String?
    public let description: Swift.String?
    public let parameters: [CloudFormationClientTypes.Parameter]?
    public let creationTime: ClientRuntime.Date?
    public let executionStatus: CloudFormationClientTypes.ExecutionStatus?
    public let status: CloudFormationClientTypes.ChangeSetStatus?
    public let statusReason: Swift.String?
    public let notificationARNs: [Swift.String]?
    public let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    public let capabilities: [CloudFormationClientTypes.Capability]?
    public let tags: [CloudFormationClientTypes.Tag]?
    public let changes: [CloudFormationClientTypes.Change]?
    public let nextToken: Swift.String?
    public let includeNestedStacks: Swift.Bool?
    public let parentChangeSetId: Swift.String?
    public let rootChangeSetId: Swift.String?
}

extension DescribeChangeSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case changeSetId = "ChangeSetId"
        case changeSetName = "ChangeSetName"
        case changes = "Changes"
        case creationTime = "CreationTime"
        case description = "Description"
        case executionStatus = "ExecutionStatus"
        case includeNestedStacks = "IncludeNestedStacks"
        case nextToken = "NextToken"
        case notificationARNs = "NotificationARNs"
        case parameters = "Parameters"
        case parentChangeSetId = "ParentChangeSetId"
        case rollbackConfiguration = "RollbackConfiguration"
        case rootChangeSetId = "RootChangeSetId"
        case stackId = "StackId"
        case stackName = "StackName"
        case status = "Status"
        case statusReason = "StatusReason"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeChangeSetResult"))
        let changeSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetName)
        changeSetName = changeSetNameDecoded
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        var creationTimeBuffer:ClientRuntime.Date? = nil
        if let creationTimeDecoded = creationTimeDecoded {
            creationTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationTimeDecoded, format: .dateTime)
        }
        creationTime = creationTimeBuffer
        let executionStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ExecutionStatus.self, forKey: .executionStatus)
        executionStatus = executionStatusDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSetStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        if containerValues.contains(.notificationARNs) {
            struct KeyVal0{struct member{}}
            let notificationARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationARNs)
            if let notificationARNsWrappedContainer = notificationARNsWrappedContainer {
                let notificationARNsContainer = try notificationARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var notificationARNsBuffer:[Swift.String]? = nil
                if let notificationARNsContainer = notificationARNsContainer {
                    notificationARNsBuffer = [Swift.String]()
                    for stringContainer0 in notificationARNsContainer {
                        notificationARNsBuffer?.append(stringContainer0)
                    }
                }
                notificationARNs = notificationARNsBuffer
            } else {
                notificationARNs = []
            }
        } else {
            notificationARNs = nil
        }
        let rollbackConfigurationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RollbackConfiguration.self, forKey: .rollbackConfiguration)
        rollbackConfiguration = rollbackConfigurationDecoded
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for stringContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(stringContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        if containerValues.contains(.changes) {
            struct KeyVal0{struct member{}}
            let changesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .changes)
            if let changesWrappedContainer = changesWrappedContainer {
                let changesContainer = try changesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Change].self, forKey: .member)
                var changesBuffer:[CloudFormationClientTypes.Change]? = nil
                if let changesContainer = changesContainer {
                    changesBuffer = [CloudFormationClientTypes.Change]()
                    for structureContainer0 in changesContainer {
                        changesBuffer?.append(structureContainer0)
                    }
                }
                changes = changesBuffer
            } else {
                changes = []
            }
        } else {
            changes = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let includeNestedStacksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeNestedStacks)
        includeNestedStacks = includeNestedStacksDecoded
        let parentChangeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentChangeSetId)
        parentChangeSetId = parentChangeSetIdDecoded
        let rootChangeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootChangeSetId)
        rootChangeSetId = rootChangeSetIdDecoded
    }
}

public struct DescribeStackDriftDetectionStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackDriftDetectionStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackDriftDetectionStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackDriftDetectionStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackDriftDetectionStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackDriftDetectionStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackDriftDetectionStatusOutputError>
}

extension DescribeStackDriftDetectionStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackDriftDetectionStatusInput(stackDriftDetectionId: \(Swift.String(describing: stackDriftDetectionId)))"}
}

extension DescribeStackDriftDetectionStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let stackDriftDetectionId = stackDriftDetectionId {
            try container.encode(stackDriftDetectionId, forKey: ClientRuntime.Key("StackDriftDetectionId"))
        }
        try container.encode("DescribeStackDriftDetectionStatus", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeStackDriftDetectionStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackDriftDetectionStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackDriftDetectionStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackDriftDetectionStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackDriftDetectionStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackDriftDetectionStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackDriftDetectionStatusOutputError>
}

public struct DescribeStackDriftDetectionStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackDriftDetectionStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackDriftDetectionStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackDriftDetectionStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackDriftDetectionStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackDriftDetectionStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackDriftDetectionStatusOutputError>
}

public struct DescribeStackDriftDetectionStatusInput: Swift.Equatable {
    /// <p>The ID of the drift detection results of this operation. </p>
    ///          <p>AWS CloudFormation generates new results, with a new drift detection ID, each time this operation
    ///          is run. However, the number of drift results AWS CloudFormation retains for any given stack, and for how
    ///          long, may vary. </p>
    public let stackDriftDetectionId: Swift.String?

    public init (
        stackDriftDetectionId: Swift.String? = nil
    )
    {
        self.stackDriftDetectionId = stackDriftDetectionId
    }
}

extension DescribeStackDriftDetectionStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackDriftDetectionStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStackDriftDetectionStatusOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackDriftDetectionStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackDriftDetectionStatusOutputResponse(detectionStatus: \(Swift.String(describing: detectionStatus)), detectionStatusReason: \(Swift.String(describing: detectionStatusReason)), driftedStackResourceCount: \(Swift.String(describing: driftedStackResourceCount)), stackDriftDetectionId: \(Swift.String(describing: stackDriftDetectionId)), stackDriftStatus: \(Swift.String(describing: stackDriftStatus)), stackId: \(Swift.String(describing: stackId)), timestamp: \(Swift.String(describing: timestamp)))"}
}

extension DescribeStackDriftDetectionStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStackDriftDetectionStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.detectionStatus = output.detectionStatus
            self.detectionStatusReason = output.detectionStatusReason
            self.driftedStackResourceCount = output.driftedStackResourceCount
            self.stackDriftDetectionId = output.stackDriftDetectionId
            self.stackDriftStatus = output.stackDriftStatus
            self.stackId = output.stackId
            self.timestamp = output.timestamp
        } else {
            self.detectionStatus = nil
            self.detectionStatusReason = nil
            self.driftedStackResourceCount = nil
            self.stackDriftDetectionId = nil
            self.stackDriftStatus = nil
            self.stackId = nil
            self.timestamp = nil
        }
    }
}

public struct DescribeStackDriftDetectionStatusOutputResponse: Swift.Equatable {
    /// <p>The status of the stack drift detection operation.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DETECTION_COMPLETE</code>: The stack drift detection operation has
    ///                successfully completed for all resources in the stack that support drift detection.
    ///                (Resources that do not currently support stack detection remain unchecked.)</p>
    ///                <p>If you specified logical resource IDs for AWS CloudFormation to use as a filter for the
    ///                stack drift detection operation, only the resources with those logical IDs are
    ///                checked for drift.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DETECTION_FAILED</code>: The stack drift detection operation has failed
    ///                for at least one resource in the stack. Results will be available for resources on
    ///                which AWS CloudFormation successfully completed drift detection.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DETECTION_IN_PROGRESS</code>: The stack drift detection operation is
    ///                currently in progress.</p>
    ///             </li>
    ///          </ul>
    public let detectionStatus: CloudFormationClientTypes.StackDriftDetectionStatus?
    /// <p>The reason the stack drift detection operation has its current status.</p>
    public let detectionStatusReason: Swift.String?
    /// <p>Total number of stack resources that have drifted. This is NULL until the drift
    ///          detection operation reaches a status of <code>DETECTION_COMPLETE</code>. This value will be
    ///          0 for stacks whose drift status is <code>IN_SYNC</code>.</p>
    public let driftedStackResourceCount: Swift.Int?
    /// <p>The ID of the drift detection results of this operation. </p>
    ///          <p>AWS CloudFormation generates new results, with a new drift detection ID, each time this operation
    ///          is run. However, the number of reports AWS CloudFormation retains for any given stack, and for how long,
    ///          may vary.</p>
    public let stackDriftDetectionId: Swift.String?
    /// <p>Status of the stack's actual configuration compared to its expected configuration. </p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DRIFTED</code>: The stack differs from its expected template
    ///                configuration. A stack is considered to have drifted if one or more of its resources
    ///                have drifted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NOT_CHECKED</code>: AWS CloudFormation has not checked if the stack differs from its
    ///                expected template configuration.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IN_SYNC</code>: The stack's actual configuration matches its expected
    ///                template configuration.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>UNKNOWN</code>: This value is reserved for future use.</p>
    ///             </li>
    ///          </ul>
    public let stackDriftStatus: CloudFormationClientTypes.StackDriftStatus?
    /// <p>The ID of the stack.</p>
    public let stackId: Swift.String?
    /// <p>Time at which the stack drift detection operation was initiated.</p>
    public let timestamp: ClientRuntime.Date?

    public init (
        detectionStatus: CloudFormationClientTypes.StackDriftDetectionStatus? = nil,
        detectionStatusReason: Swift.String? = nil,
        driftedStackResourceCount: Swift.Int? = nil,
        stackDriftDetectionId: Swift.String? = nil,
        stackDriftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
        stackId: Swift.String? = nil,
        timestamp: ClientRuntime.Date? = nil
    )
    {
        self.detectionStatus = detectionStatus
        self.detectionStatusReason = detectionStatusReason
        self.driftedStackResourceCount = driftedStackResourceCount
        self.stackDriftDetectionId = stackDriftDetectionId
        self.stackDriftStatus = stackDriftStatus
        self.stackId = stackId
        self.timestamp = timestamp
    }
}

struct DescribeStackDriftDetectionStatusOutputResponseBody: Swift.Equatable {
    public let stackId: Swift.String?
    public let stackDriftDetectionId: Swift.String?
    public let stackDriftStatus: CloudFormationClientTypes.StackDriftStatus?
    public let detectionStatus: CloudFormationClientTypes.StackDriftDetectionStatus?
    public let detectionStatusReason: Swift.String?
    public let driftedStackResourceCount: Swift.Int?
    public let timestamp: ClientRuntime.Date?
}

extension DescribeStackDriftDetectionStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detectionStatus = "DetectionStatus"
        case detectionStatusReason = "DetectionStatusReason"
        case driftedStackResourceCount = "DriftedStackResourceCount"
        case stackDriftDetectionId = "StackDriftDetectionId"
        case stackDriftStatus = "StackDriftStatus"
        case stackId = "StackId"
        case timestamp = "Timestamp"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackDriftDetectionStatusResult"))
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackDriftDetectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackDriftDetectionId)
        stackDriftDetectionId = stackDriftDetectionIdDecoded
        let stackDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .stackDriftStatus)
        stackDriftStatus = stackDriftStatusDecoded
        let detectionStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftDetectionStatus.self, forKey: .detectionStatus)
        detectionStatus = detectionStatusDecoded
        let detectionStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectionStatusReason)
        detectionStatusReason = detectionStatusReasonDecoded
        let driftedStackResourceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .driftedStackResourceCount)
        driftedStackResourceCount = driftedStackResourceCountDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
    }
}

public struct DescribeStackEventsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackEventsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackEventsOutputError>
}

extension DescribeStackEventsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackEventsInput(nextToken: \(Swift.String(describing: nextToken)), stackName: \(Swift.String(describing: stackName)))"}
}

extension DescribeStackEventsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStackEvents", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeStackEventsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackEventsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackEventsOutputError>
}

public struct DescribeStackEventsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackEventsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackEventsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackEventsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackEventsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackEventsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackEventsOutputError>
}

/// <p>The input for <a>DescribeStackEvents</a> action.</p>
public struct DescribeStackEventsInput: Swift.Equatable {
    /// <p>A string that identifies the next page of events that you want to retrieve.</p>
    public let nextToken: Swift.String?
    /// <p>The name or the unique stack ID that is associated with the stack, which are not
    ///          always interchangeable:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Running stacks: You can specify either the stack's name or its unique stack
    ///                ID.</p>
    ///             </li>
    ///             <li>
    ///                <p>Deleted stacks: You must specify the unique stack ID.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Default: There is no default value.</p>
    public let stackName: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

extension DescribeStackEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStackEventsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackEventsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackEventsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), stackEvents: \(Swift.String(describing: stackEvents)))"}
}

extension DescribeStackEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStackEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.stackEvents = output.stackEvents
        } else {
            self.nextToken = nil
            self.stackEvents = nil
        }
    }
}

/// <p>The output for a <a>DescribeStackEvents</a> action.</p>
public struct DescribeStackEventsOutputResponse: Swift.Equatable {
    /// <p>If the output exceeds 1 MB in size, a string that identifies the next page of events.
    ///          If no additional page exists, this value is null.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>StackEvents</code> structures.</p>
    public let stackEvents: [CloudFormationClientTypes.StackEvent]?

    public init (
        nextToken: Swift.String? = nil,
        stackEvents: [CloudFormationClientTypes.StackEvent]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackEvents = stackEvents
    }
}

struct DescribeStackEventsOutputResponseBody: Swift.Equatable {
    public let stackEvents: [CloudFormationClientTypes.StackEvent]?
    public let nextToken: Swift.String?
}

extension DescribeStackEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackEvents = "StackEvents"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackEventsResult"))
        if containerValues.contains(.stackEvents) {
            struct KeyVal0{struct member{}}
            let stackEventsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackEvents)
            if let stackEventsWrappedContainer = stackEventsWrappedContainer {
                let stackEventsContainer = try stackEventsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackEvent].self, forKey: .member)
                var stackEventsBuffer:[CloudFormationClientTypes.StackEvent]? = nil
                if let stackEventsContainer = stackEventsContainer {
                    stackEventsBuffer = [CloudFormationClientTypes.StackEvent]()
                    for structureContainer0 in stackEventsContainer {
                        stackEventsBuffer?.append(structureContainer0)
                    }
                }
                stackEvents = stackEventsBuffer
            } else {
                stackEvents = []
            }
        } else {
            stackEvents = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeStackInstanceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackInstanceOutputError>
}

extension DescribeStackInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackInstanceInput(callAs: \(Swift.String(describing: callAs)), stackInstanceAccount: \(Swift.String(describing: stackInstanceAccount)), stackInstanceRegion: \(Swift.String(describing: stackInstanceRegion)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension DescribeStackInstanceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackInstanceAccount = stackInstanceAccount {
            try container.encode(stackInstanceAccount, forKey: ClientRuntime.Key("StackInstanceAccount"))
        }
        if let stackInstanceRegion = stackInstanceRegion {
            try container.encode(stackInstanceRegion, forKey: ClientRuntime.Key("StackInstanceRegion"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DescribeStackInstance", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeStackInstanceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackInstanceOutputError>
}

public struct DescribeStackInstanceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackInstanceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackInstanceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackInstanceOutputError>
}

public struct DescribeStackInstanceInput: Swift.Equatable {
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>The ID of an AWS account that's associated with this stack instance.</p>
    public let stackInstanceAccount: Swift.String?
    /// <p>The name of a Region that's associated with this stack instance.</p>
    public let stackInstanceRegion: Swift.String?
    /// <p>The name or the unique stack ID of the stack set that you want to get stack instance
    ///          information for.</p>
    public let stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackInstanceAccount: Swift.String? = nil,
        stackInstanceRegion: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackInstanceAccount = stackInstanceAccount
        self.stackInstanceRegion = stackInstanceRegion
        self.stackSetName = stackSetName
    }
}

extension DescribeStackInstanceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackInstanceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "StackInstanceNotFoundException" : self = .stackInstanceNotFoundException(try StackInstanceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStackInstanceOutputError: Swift.Error, Swift.Equatable {
    case stackInstanceNotFoundException(StackInstanceNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackInstanceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackInstanceOutputResponse(stackInstance: \(Swift.String(describing: stackInstance)))"}
}

extension DescribeStackInstanceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStackInstanceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackInstance = output.stackInstance
        } else {
            self.stackInstance = nil
        }
    }
}

public struct DescribeStackInstanceOutputResponse: Swift.Equatable {
    /// <p>The stack instance that matches the specified request parameters.</p>
    public let stackInstance: CloudFormationClientTypes.StackInstance?

    public init (
        stackInstance: CloudFormationClientTypes.StackInstance? = nil
    )
    {
        self.stackInstance = stackInstance
    }
}

struct DescribeStackInstanceOutputResponseBody: Swift.Equatable {
    public let stackInstance: CloudFormationClientTypes.StackInstance?
}

extension DescribeStackInstanceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackInstance = "StackInstance"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackInstanceResult"))
        let stackInstanceDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstance.self, forKey: .stackInstance)
        stackInstance = stackInstanceDecoded
    }
}

public struct DescribeStackResourceDriftsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackResourceDriftsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackResourceDriftsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackResourceDriftsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackResourceDriftsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackResourceDriftsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackResourceDriftsOutputError>
}

extension DescribeStackResourceDriftsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackResourceDriftsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), stackName: \(Swift.String(describing: stackName)), stackResourceDriftStatusFilters: \(Swift.String(describing: stackResourceDriftStatusFilters)))"}
}

extension DescribeStackResourceDriftsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackResourceDriftStatusFilters = stackResourceDriftStatusFilters {
            var stackResourceDriftStatusFiltersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackResourceDriftStatusFilters"))
            for (index0, stackresourcedriftstatus0) in stackResourceDriftStatusFilters.enumerated() {
                try stackResourceDriftStatusFiltersContainer.encode(stackresourcedriftstatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DescribeStackResourceDrifts", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeStackResourceDriftsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackResourceDriftsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackResourceDriftsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackResourceDriftsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackResourceDriftsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackResourceDriftsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackResourceDriftsOutputError>
}

public struct DescribeStackResourceDriftsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackResourceDriftsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackResourceDriftsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackResourceDriftsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackResourceDriftsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackResourceDriftsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackResourceDriftsOutputError>
}

public struct DescribeStackResourceDriftsInput: Swift.Equatable {
    /// <p>The maximum number of results to be returned with a single call. If the number of
    ///          available results exceeds this maximum, the response includes a <code>NextToken</code>
    ///          value that you can assign to the <code>NextToken</code> request parameter to get the next
    ///          set of results.</p>
    public let maxResults: Swift.Int?
    /// <p>A string that identifies the next page of stack resource drift results.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the stack for which you want drift information.</p>
    public let stackName: Swift.String?
    /// <p>The resource drift status values to use as filters for the resource drift results
    ///          returned.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>DELETED</code>: The resource differs from its expected template
    ///                configuration in that the resource has been deleted.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>MODIFIED</code>: One or more resource properties differ from their
    ///                expected template values.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IN_SYNC</code>: The resources's actual configuration matches its expected
    ///                template configuration.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NOT_CHECKED</code>: AWS CloudFormation does not currently return this value.</p>
    ///             </li>
    ///          </ul>
    public let stackResourceDriftStatusFilters: [CloudFormationClientTypes.StackResourceDriftStatus]?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil,
        stackResourceDriftStatusFilters: [CloudFormationClientTypes.StackResourceDriftStatus]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stackName = stackName
        self.stackResourceDriftStatusFilters = stackResourceDriftStatusFilters
    }
}

extension DescribeStackResourceDriftsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackResourceDriftsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStackResourceDriftsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackResourceDriftsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackResourceDriftsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), stackResourceDrifts: \(Swift.String(describing: stackResourceDrifts)))"}
}

extension DescribeStackResourceDriftsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStackResourceDriftsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.stackResourceDrifts = output.stackResourceDrifts
        } else {
            self.nextToken = nil
            self.stackResourceDrifts = nil
        }
    }
}

public struct DescribeStackResourceDriftsOutputResponse: Swift.Equatable {
    /// <p>If the request doesn't return all of the remaining results, <code>NextToken</code> is
    ///          set to a token. To retrieve the next set of results, call
    ///             <code>DescribeStackResourceDrifts</code> again and assign that token to the request
    ///          object's <code>NextToken</code> parameter. If the request returns all results,
    ///             <code>NextToken</code> is set to <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>Drift information for the resources that have been checked for drift in the specified
    ///          stack. This includes actual and expected configuration values for resources where AWS CloudFormation
    ///          detects drift.</p>
    ///          <p>For a given stack, there will be one <code>StackResourceDrift</code> for each stack
    ///          resource that has been checked for drift. Resources that have not yet been checked for
    ///          drift are not included. Resources that do not currently support drift detection are not
    ///          checked, and so not included. For a list of resources that support drift detection, see
    ///             <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html">Resources that Support Drift Detection</a>.</p>
    public let stackResourceDrifts: [CloudFormationClientTypes.StackResourceDrift]?

    public init (
        nextToken: Swift.String? = nil,
        stackResourceDrifts: [CloudFormationClientTypes.StackResourceDrift]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackResourceDrifts = stackResourceDrifts
    }
}

struct DescribeStackResourceDriftsOutputResponseBody: Swift.Equatable {
    public let stackResourceDrifts: [CloudFormationClientTypes.StackResourceDrift]?
    public let nextToken: Swift.String?
}

extension DescribeStackResourceDriftsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackResourceDrifts = "StackResourceDrifts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackResourceDriftsResult"))
        if containerValues.contains(.stackResourceDrifts) {
            struct KeyVal0{struct member{}}
            let stackResourceDriftsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackResourceDrifts)
            if let stackResourceDriftsWrappedContainer = stackResourceDriftsWrappedContainer {
                let stackResourceDriftsContainer = try stackResourceDriftsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackResourceDrift].self, forKey: .member)
                var stackResourceDriftsBuffer:[CloudFormationClientTypes.StackResourceDrift]? = nil
                if let stackResourceDriftsContainer = stackResourceDriftsContainer {
                    stackResourceDriftsBuffer = [CloudFormationClientTypes.StackResourceDrift]()
                    for structureContainer0 in stackResourceDriftsContainer {
                        stackResourceDriftsBuffer?.append(structureContainer0)
                    }
                }
                stackResourceDrifts = stackResourceDriftsBuffer
            } else {
                stackResourceDrifts = []
            }
        } else {
            stackResourceDrifts = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeStackResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackResourceOutputError>
}

extension DescribeStackResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackResourceInput(logicalResourceId: \(Swift.String(describing: logicalResourceId)), stackName: \(Swift.String(describing: stackName)))"}
}

extension DescribeStackResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStackResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeStackResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackResourceOutputError>
}

public struct DescribeStackResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackResourceOutputError>
}

/// <p>The input for <a>DescribeStackResource</a> action.</p>
public struct DescribeStackResourceInput: Swift.Equatable {
    /// <p>The logical name of the resource as specified in the template.</p>
    ///          <p>Default: There is no default value.</p>
    public let logicalResourceId: Swift.String?
    /// <p>The name or the unique stack ID that is associated with the stack, which are not
    ///          always interchangeable:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Running stacks: You can specify either the stack's name or its unique stack
    ///                ID.</p>
    ///             </li>
    ///             <li>
    ///                <p>Deleted stacks: You must specify the unique stack ID.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Default: There is no default value.</p>
    public let stackName: Swift.String?

    public init (
        logicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.stackName = stackName
    }
}

extension DescribeStackResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStackResourceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackResourceOutputResponse(stackResourceDetail: \(Swift.String(describing: stackResourceDetail)))"}
}

extension DescribeStackResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStackResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackResourceDetail = output.stackResourceDetail
        } else {
            self.stackResourceDetail = nil
        }
    }
}

/// <p>The output for a <a>DescribeStackResource</a> action.</p>
public struct DescribeStackResourceOutputResponse: Swift.Equatable {
    /// <p>A <code>StackResourceDetail</code> structure containing the description of the
    ///          specified resource in the specified stack.</p>
    public let stackResourceDetail: CloudFormationClientTypes.StackResourceDetail?

    public init (
        stackResourceDetail: CloudFormationClientTypes.StackResourceDetail? = nil
    )
    {
        self.stackResourceDetail = stackResourceDetail
    }
}

struct DescribeStackResourceOutputResponseBody: Swift.Equatable {
    public let stackResourceDetail: CloudFormationClientTypes.StackResourceDetail?
}

extension DescribeStackResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackResourceDetail = "StackResourceDetail"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackResourceResult"))
        let stackResourceDetailDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDetail.self, forKey: .stackResourceDetail)
        stackResourceDetail = stackResourceDetailDecoded
    }
}

public struct DescribeStackResourcesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackResourcesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackResourcesOutputError>
}

extension DescribeStackResourcesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackResourcesInput(logicalResourceId: \(Swift.String(describing: logicalResourceId)), physicalResourceId: \(Swift.String(describing: physicalResourceId)), stackName: \(Swift.String(describing: stackName)))"}
}

extension DescribeStackResourcesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStackResources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeStackResourcesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackResourcesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackResourcesOutputError>
}

public struct DescribeStackResourcesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackResourcesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackResourcesOutputError>
}

/// <p>The input for <a>DescribeStackResources</a> action.</p>
public struct DescribeStackResourcesInput: Swift.Equatable {
    /// <p>The logical name of the resource as specified in the template.</p>
    ///          <p>Default: There is no default value.</p>
    public let logicalResourceId: Swift.String?
    /// <p>The name or unique identifier that corresponds to a physical instance ID of a
    ///          resource supported by AWS CloudFormation.</p>
    ///          <p>For example, for an Amazon Elastic Compute Cloud (EC2) instance,
    ///             <code>PhysicalResourceId</code> corresponds to the <code>InstanceId</code>. You can pass
    ///          the EC2 <code>InstanceId</code> to <code>DescribeStackResources</code> to find which stack
    ///          the instance belongs to and what other resources are part of the stack.</p>
    ///          <p>Required: Conditional. If you do not specify <code>PhysicalResourceId</code>, you
    ///          must specify <code>StackName</code>.</p>
    ///          <p>Default: There is no default value.</p>
    public let physicalResourceId: Swift.String?
    /// <p>The name or the unique stack ID that is associated with the stack, which are not
    ///          always interchangeable:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Running stacks: You can specify either the stack's name or its unique stack
    ///                ID.</p>
    ///             </li>
    ///             <li>
    ///                <p>Deleted stacks: You must specify the unique stack ID.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Default: There is no default value.</p>
    ///          <p>Required: Conditional. If you do not specify <code>StackName</code>, you must specify
    ///             <code>PhysicalResourceId</code>.</p>
    public let stackName: Swift.String?

    public init (
        logicalResourceId: Swift.String? = nil,
        physicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.physicalResourceId = physicalResourceId
        self.stackName = stackName
    }
}

extension DescribeStackResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStackResourcesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackResourcesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackResourcesOutputResponse(stackResources: \(Swift.String(describing: stackResources)))"}
}

extension DescribeStackResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStackResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackResources = output.stackResources
        } else {
            self.stackResources = nil
        }
    }
}

/// <p>The output for a <a>DescribeStackResources</a> action.</p>
public struct DescribeStackResourcesOutputResponse: Swift.Equatable {
    /// <p>A list of <code>StackResource</code> structures.</p>
    public let stackResources: [CloudFormationClientTypes.StackResource]?

    public init (
        stackResources: [CloudFormationClientTypes.StackResource]? = nil
    )
    {
        self.stackResources = stackResources
    }
}

struct DescribeStackResourcesOutputResponseBody: Swift.Equatable {
    public let stackResources: [CloudFormationClientTypes.StackResource]?
}

extension DescribeStackResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackResources = "StackResources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackResourcesResult"))
        if containerValues.contains(.stackResources) {
            struct KeyVal0{struct member{}}
            let stackResourcesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackResources)
            if let stackResourcesWrappedContainer = stackResourcesWrappedContainer {
                let stackResourcesContainer = try stackResourcesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackResource].self, forKey: .member)
                var stackResourcesBuffer:[CloudFormationClientTypes.StackResource]? = nil
                if let stackResourcesContainer = stackResourcesContainer {
                    stackResourcesBuffer = [CloudFormationClientTypes.StackResource]()
                    for structureContainer0 in stackResourcesContainer {
                        stackResourcesBuffer?.append(structureContainer0)
                    }
                }
                stackResources = stackResourcesBuffer
            } else {
                stackResources = []
            }
        } else {
            stackResources = nil
        }
    }
}

public struct DescribeStackSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackSetOutputError>
}

extension DescribeStackSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackSetInput(callAs: \(Swift.String(describing: callAs)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension DescribeStackSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DescribeStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeStackSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackSetOutputError>
}

public struct DescribeStackSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackSetOutputError>
}

public struct DescribeStackSetInput: Swift.Equatable {
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>The name or unique ID of the stack set whose description you want.</p>
    public let stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackSetName = stackSetName
    }
}

public struct DescribeStackSetOperationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackSetOperationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackSetOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackSetOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackSetOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackSetOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackSetOperationOutputError>
}

extension DescribeStackSetOperationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackSetOperationInput(callAs: \(Swift.String(describing: callAs)), operationId: \(Swift.String(describing: operationId)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension DescribeStackSetOperationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DescribeStackSetOperation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeStackSetOperationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackSetOperationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackSetOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackSetOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackSetOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackSetOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackSetOperationOutputError>
}

public struct DescribeStackSetOperationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStackSetOperationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStackSetOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStackSetOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStackSetOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStackSetOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStackSetOperationOutputError>
}

public struct DescribeStackSetOperationInput: Swift.Equatable {
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>The unique ID of the stack set operation. </p>
    public let operationId: Swift.String?
    /// <p>The name or the unique stack ID of the stack set for the stack operation.</p>
    public let stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        operationId: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.operationId = operationId
        self.stackSetName = stackSetName
    }
}

extension DescribeStackSetOperationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackSetOperationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotFoundException" : self = .operationNotFoundException(try OperationNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStackSetOperationOutputError: Swift.Error, Swift.Equatable {
    case operationNotFoundException(OperationNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackSetOperationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackSetOperationOutputResponse(stackSetOperation: \(Swift.String(describing: stackSetOperation)))"}
}

extension DescribeStackSetOperationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStackSetOperationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackSetOperation = output.stackSetOperation
        } else {
            self.stackSetOperation = nil
        }
    }
}

public struct DescribeStackSetOperationOutputResponse: Swift.Equatable {
    /// <p>The specified stack set operation.</p>
    public let stackSetOperation: CloudFormationClientTypes.StackSetOperation?

    public init (
        stackSetOperation: CloudFormationClientTypes.StackSetOperation? = nil
    )
    {
        self.stackSetOperation = stackSetOperation
    }
}

struct DescribeStackSetOperationOutputResponseBody: Swift.Equatable {
    public let stackSetOperation: CloudFormationClientTypes.StackSetOperation?
}

extension DescribeStackSetOperationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackSetOperation = "StackSetOperation"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackSetOperationResult"))
        let stackSetOperationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperation.self, forKey: .stackSetOperation)
        stackSetOperation = stackSetOperationDecoded
    }
}

extension DescribeStackSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStackSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStackSetOutputError: Swift.Error, Swift.Equatable {
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStackSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStackSetOutputResponse(stackSet: \(Swift.String(describing: stackSet)))"}
}

extension DescribeStackSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStackSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackSet = output.stackSet
        } else {
            self.stackSet = nil
        }
    }
}

public struct DescribeStackSetOutputResponse: Swift.Equatable {
    /// <p>The specified stack set.</p>
    public let stackSet: CloudFormationClientTypes.StackSet?

    public init (
        stackSet: CloudFormationClientTypes.StackSet? = nil
    )
    {
        self.stackSet = stackSet
    }
}

struct DescribeStackSetOutputResponseBody: Swift.Equatable {
    public let stackSet: CloudFormationClientTypes.StackSet?
}

extension DescribeStackSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackSet = "StackSet"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStackSetResult"))
        let stackSetDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSet.self, forKey: .stackSet)
        stackSet = stackSetDecoded
    }
}

public struct DescribeStacksInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStacksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStacksOutputError>
}

extension DescribeStacksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStacksInput(nextToken: \(Swift.String(describing: nextToken)), stackName: \(Swift.String(describing: stackName)))"}
}

extension DescribeStacksInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DescribeStacks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeStacksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStacksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStacksOutputError>
}

public struct DescribeStacksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStacksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStacksOutputError>
}

/// <p>The input for <a>DescribeStacks</a> action.</p>
public struct DescribeStacksInput: Swift.Equatable {
    /// <p>A string that identifies the next page of stacks that you want to retrieve.</p>
    public let nextToken: Swift.String?
    /// <p>The name or the unique stack ID that is associated with the stack, which are not
    ///          always interchangeable:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Running stacks: You can specify either the stack's name or its unique stack
    ///                ID.</p>
    ///             </li>
    ///             <li>
    ///                <p>Deleted stacks: You must specify the unique stack ID.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Default: There is no default value.</p>
    public let stackName: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

extension DescribeStacksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeStacksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStacksOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStacksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStacksOutputResponse(nextToken: \(Swift.String(describing: nextToken)), stacks: \(Swift.String(describing: stacks)))"}
}

extension DescribeStacksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStacksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.stacks = output.stacks
        } else {
            self.nextToken = nil
            self.stacks = nil
        }
    }
}

/// <p>The output for a <a>DescribeStacks</a> action.</p>
public struct DescribeStacksOutputResponse: Swift.Equatable {
    /// <p>If the output exceeds 1 MB in size, a string that identifies the next page of stacks.
    ///          If no additional page exists, this value is null.</p>
    public let nextToken: Swift.String?
    /// <p>A list of stack structures.</p>
    public let stacks: [CloudFormationClientTypes.Stack]?

    public init (
        nextToken: Swift.String? = nil,
        stacks: [CloudFormationClientTypes.Stack]? = nil
    )
    {
        self.nextToken = nextToken
        self.stacks = stacks
    }
}

struct DescribeStacksOutputResponseBody: Swift.Equatable {
    public let stacks: [CloudFormationClientTypes.Stack]?
    public let nextToken: Swift.String?
}

extension DescribeStacksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stacks = "Stacks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeStacksResult"))
        if containerValues.contains(.stacks) {
            struct KeyVal0{struct member{}}
            let stacksWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stacks)
            if let stacksWrappedContainer = stacksWrappedContainer {
                let stacksContainer = try stacksWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Stack].self, forKey: .member)
                var stacksBuffer:[CloudFormationClientTypes.Stack]? = nil
                if let stacksContainer = stacksContainer {
                    stacksBuffer = [CloudFormationClientTypes.Stack]()
                    for structureContainer0 in stacksContainer {
                        stacksBuffer?.append(structureContainer0)
                    }
                }
                stacks = stacksBuffer
            } else {
                stacks = []
            }
        } else {
            stacks = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeTypeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTypeOutputError>
}

extension DescribeTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTypeInput(arn: \(Swift.String(describing: arn)), type: \(Swift.String(describing: type)), typeName: \(Swift.String(describing: typeName)), versionId: \(Swift.String(describing: versionId)))"}
}

extension DescribeTypeInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("DescribeType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTypeOutputError>
}

public struct DescribeTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTypeOutputError>
}

public struct DescribeTypeInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let arn: Swift.String?
    /// <p>The kind of extension. </p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let type: CloudFormationClientTypes.RegistryType?
    /// <p>The name of the extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let typeName: Swift.String?
    /// <p>The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.</p>
    ///          <p>If you specify a <code>VersionId</code>, <code>DescribeType</code> returns information about that specific extension version. Otherwise, it returns information about the default extension version.</p>
    public let versionId: Swift.String?

    public init (
        arn: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.type = type
        self.typeName = typeName
        self.versionId = versionId
    }
}

extension DescribeTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTypeOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeNotFoundException(TypeNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTypeOutputResponse(arn: \(Swift.String(describing: arn)), defaultVersionId: \(Swift.String(describing: defaultVersionId)), deprecatedStatus: \(Swift.String(describing: deprecatedStatus)), description: \(Swift.String(describing: description)), documentationUrl: \(Swift.String(describing: documentationUrl)), executionRoleArn: \(Swift.String(describing: executionRoleArn)), isDefaultVersion: \(Swift.String(describing: isDefaultVersion)), lastUpdated: \(Swift.String(describing: lastUpdated)), loggingConfig: \(Swift.String(describing: loggingConfig)), provisioningType: \(Swift.String(describing: provisioningType)), schema: \(Swift.String(describing: schema)), sourceUrl: \(Swift.String(describing: sourceUrl)), timeCreated: \(Swift.String(describing: timeCreated)), type: \(Swift.String(describing: type)), typeName: \(Swift.String(describing: typeName)), visibility: \(Swift.String(describing: visibility)))"}
}

extension DescribeTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.arn = output.arn
            self.defaultVersionId = output.defaultVersionId
            self.deprecatedStatus = output.deprecatedStatus
            self.description = output.description
            self.documentationUrl = output.documentationUrl
            self.executionRoleArn = output.executionRoleArn
            self.isDefaultVersion = output.isDefaultVersion
            self.lastUpdated = output.lastUpdated
            self.loggingConfig = output.loggingConfig
            self.provisioningType = output.provisioningType
            self.schema = output.schema
            self.sourceUrl = output.sourceUrl
            self.timeCreated = output.timeCreated
            self.type = output.type
            self.typeName = output.typeName
            self.visibility = output.visibility
        } else {
            self.arn = nil
            self.defaultVersionId = nil
            self.deprecatedStatus = nil
            self.description = nil
            self.documentationUrl = nil
            self.executionRoleArn = nil
            self.isDefaultVersion = nil
            self.lastUpdated = nil
            self.loggingConfig = nil
            self.provisioningType = nil
            self.schema = nil
            self.sourceUrl = nil
            self.timeCreated = nil
            self.type = nil
            self.typeName = nil
            self.visibility = nil
        }
    }
}

public struct DescribeTypeOutputResponse: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    public let arn: Swift.String?
    /// <p>The ID of the default version of the extension. The default version is used when the extension version is not specified.</p>
    ///          <p>To set the default version of an extension, use <code>
    ///                <a>SetTypeDefaultVersion</a>
    ///             </code>. </p>
    public let defaultVersionId: Swift.String?
    /// <p>The deprecation status of the extension version.</p>
    ///          <p>Valid values include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>LIVE</code>: The extension is registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DEPRECATED</code>: The extension has been deregistered and can no longer be used in CloudFormation operations. </p>
    ///             </li>
    ///          </ul>
    public let deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    /// <p>The description of the registered extension.</p>
    public let description: Swift.String?
    /// <p>The URL of a page providing detailed documentation for this extension.</p>
    public let documentationUrl: Swift.String?
    /// <p>The Amazon Resource Name (ARN) of the IAM execution role used to register the extension. If your resource type calls AWS APIs in any of its handlers, you must create an
    ///          <i>
    ///                <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM execution
    ///             role</a>
    ///             </i> that includes the necessary permissions to call those
    ///          AWS APIs, and provision that execution role in your account. CloudFormation then
    ///          assumes that execution role to provide your extension with the appropriate
    ///          credentials.</p>
    public let executionRoleArn: Swift.String?
    /// <p>Whether the specified extension version is set as the default version.</p>
    public let isDefaultVersion: Swift.Bool?
    /// <p>When the specified extension version was registered.</p>
    public let lastUpdated: ClientRuntime.Date?
    /// <p>Contains logging configuration information for an extension.</p>
    public let loggingConfig: CloudFormationClientTypes.LoggingConfig?
    /// <p>The provisioning behavior of the extension. AWS CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p>
    ///          <p>Valid values include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>FULLY_MUTABLE</code>: The extension includes an update handler to process updates to the extension during stack update operations.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IMMUTABLE</code>: The extension does not include an update handler, so the extension cannot be updated and must instead be replaced during stack update operations.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NON_PROVISIONABLE</code>: The extension does not include all of the following handlers, and therefore cannot actually be provisioned.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>create</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>read</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>delete</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///          </ul>
    public let provisioningType: CloudFormationClientTypes.ProvisioningType?
    /// <p>The schema that defines the extension.</p>
    ///          <p>For more information on extension schemas, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html">Resource Provider Schema</a> in the <i>CloudFormation CLI User Guide</i>.</p>
    public let schema: Swift.String?
    /// <p>The URL of the source code for the extension.</p>
    public let sourceUrl: Swift.String?
    /// <p>When the specified extension version was registered.</p>
    public let timeCreated: ClientRuntime.Date?
    /// <p>The kind of extension. </p>
    public let type: CloudFormationClientTypes.RegistryType?
    /// <p>The name of the registered extension.</p>
    public let typeName: Swift.String?
    /// <p>The scope at which the extension is visible and usable in CloudFormation operations.</p>
    ///          <p>Valid values include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PRIVATE</code>: The extension is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as <code>PRIVATE</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PUBLIC</code>: The extension is publically visible and usable within any Amazon account.</p>
    ///             </li>
    ///          </ul>
    public let visibility: CloudFormationClientTypes.Visibility?

    public init (
        arn: Swift.String? = nil,
        defaultVersionId: Swift.String? = nil,
        deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus? = nil,
        description: Swift.String? = nil,
        documentationUrl: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        isDefaultVersion: Swift.Bool? = nil,
        lastUpdated: ClientRuntime.Date? = nil,
        loggingConfig: CloudFormationClientTypes.LoggingConfig? = nil,
        provisioningType: CloudFormationClientTypes.ProvisioningType? = nil,
        schema: Swift.String? = nil,
        sourceUrl: Swift.String? = nil,
        timeCreated: ClientRuntime.Date? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        visibility: CloudFormationClientTypes.Visibility? = nil
    )
    {
        self.arn = arn
        self.defaultVersionId = defaultVersionId
        self.deprecatedStatus = deprecatedStatus
        self.description = description
        self.documentationUrl = documentationUrl
        self.executionRoleArn = executionRoleArn
        self.isDefaultVersion = isDefaultVersion
        self.lastUpdated = lastUpdated
        self.loggingConfig = loggingConfig
        self.provisioningType = provisioningType
        self.schema = schema
        self.sourceUrl = sourceUrl
        self.timeCreated = timeCreated
        self.type = type
        self.typeName = typeName
        self.visibility = visibility
    }
}

struct DescribeTypeOutputResponseBody: Swift.Equatable {
    public let arn: Swift.String?
    public let type: CloudFormationClientTypes.RegistryType?
    public let typeName: Swift.String?
    public let defaultVersionId: Swift.String?
    public let isDefaultVersion: Swift.Bool?
    public let description: Swift.String?
    public let schema: Swift.String?
    public let provisioningType: CloudFormationClientTypes.ProvisioningType?
    public let deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    public let loggingConfig: CloudFormationClientTypes.LoggingConfig?
    public let executionRoleArn: Swift.String?
    public let visibility: CloudFormationClientTypes.Visibility?
    public let sourceUrl: Swift.String?
    public let documentationUrl: Swift.String?
    public let lastUpdated: ClientRuntime.Date?
    public let timeCreated: ClientRuntime.Date?
}

extension DescribeTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case defaultVersionId = "DefaultVersionId"
        case deprecatedStatus = "DeprecatedStatus"
        case description = "Description"
        case documentationUrl = "DocumentationUrl"
        case executionRoleArn = "ExecutionRoleArn"
        case isDefaultVersion = "IsDefaultVersion"
        case lastUpdated = "LastUpdated"
        case loggingConfig = "LoggingConfig"
        case provisioningType = "ProvisioningType"
        case schema = "Schema"
        case sourceUrl = "SourceUrl"
        case timeCreated = "TimeCreated"
        case type = "Type"
        case typeName = "TypeName"
        case visibility = "Visibility"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTypeResult"))
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let provisioningTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ProvisioningType.self, forKey: .provisioningType)
        provisioningType = provisioningTypeDecoded
        let deprecatedStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeprecatedStatus.self, forKey: .deprecatedStatus)
        deprecatedStatus = deprecatedStatusDecoded
        let loggingConfigDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.LoggingConfig.self, forKey: .loggingConfig)
        loggingConfig = loggingConfigDecoded
        let executionRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleArn)
        executionRoleArn = executionRoleArnDecoded
        let visibilityDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.Visibility.self, forKey: .visibility)
        visibility = visibilityDecoded
        let sourceUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUrl)
        sourceUrl = sourceUrlDecoded
        let documentationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentationUrl)
        documentationUrl = documentationUrlDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdated)
        var lastUpdatedBuffer:ClientRuntime.Date? = nil
        if let lastUpdatedDecoded = lastUpdatedDecoded {
            lastUpdatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdatedDecoded, format: .dateTime)
        }
        lastUpdated = lastUpdatedBuffer
        let timeCreatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeCreated)
        var timeCreatedBuffer:ClientRuntime.Date? = nil
        if let timeCreatedDecoded = timeCreatedDecoded {
            timeCreatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timeCreatedDecoded, format: .dateTime)
        }
        timeCreated = timeCreatedBuffer
    }
}

public struct DescribeTypeRegistrationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTypeRegistrationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTypeRegistrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTypeRegistrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTypeRegistrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTypeRegistrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTypeRegistrationOutputError>
}

extension DescribeTypeRegistrationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTypeRegistrationInput(registrationToken: \(Swift.String(describing: registrationToken)))"}
}

extension DescribeTypeRegistrationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let registrationToken = registrationToken {
            try container.encode(registrationToken, forKey: ClientRuntime.Key("RegistrationToken"))
        }
        try container.encode("DescribeTypeRegistration", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DescribeTypeRegistrationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTypeRegistrationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTypeRegistrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTypeRegistrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTypeRegistrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTypeRegistrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTypeRegistrationOutputError>
}

public struct DescribeTypeRegistrationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTypeRegistrationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTypeRegistrationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTypeRegistrationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTypeRegistrationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTypeRegistrationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTypeRegistrationOutputError>
}

public struct DescribeTypeRegistrationInput: Swift.Equatable {
    /// <p>The identifier for this registration request.</p>
    ///          <p>This registration token is generated by CloudFormation when you initiate a registration request using <code>
    ///                <a>RegisterType</a>
    ///             </code>.</p>
    public let registrationToken: Swift.String?

    public init (
        registrationToken: Swift.String? = nil
    )
    {
        self.registrationToken = registrationToken
    }
}

extension DescribeTypeRegistrationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DescribeTypeRegistrationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTypeRegistrationOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTypeRegistrationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTypeRegistrationOutputResponse(description: \(Swift.String(describing: description)), progressStatus: \(Swift.String(describing: progressStatus)), typeArn: \(Swift.String(describing: typeArn)), typeVersionArn: \(Swift.String(describing: typeVersionArn)))"}
}

extension DescribeTypeRegistrationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTypeRegistrationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.description = output.description
            self.progressStatus = output.progressStatus
            self.typeArn = output.typeArn
            self.typeVersionArn = output.typeVersionArn
        } else {
            self.description = nil
            self.progressStatus = nil
            self.typeArn = nil
            self.typeVersionArn = nil
        }
    }
}

public struct DescribeTypeRegistrationOutputResponse: Swift.Equatable {
    /// <p>The description of the extension registration request.</p>
    public let description: Swift.String?
    /// <p>The current status of the extension registration request.</p>
    public let progressStatus: CloudFormationClientTypes.RegistrationStatus?
    /// <p>The Amazon Resource Name (ARN) of the extension being registered.</p>
    ///          <p>For registration requests with a <code>ProgressStatus</code> of other than <code>COMPLETE</code>, this will be <code>null</code>.</p>
    public let typeArn: Swift.String?
    /// <p>The Amazon Resource Name (ARN) of this specific version of the extension being registered.</p>
    ///          <p>For registration requests with a <code>ProgressStatus</code> of other than <code>COMPLETE</code>, this will be <code>null</code>.</p>
    public let typeVersionArn: Swift.String?

    public init (
        description: Swift.String? = nil,
        progressStatus: CloudFormationClientTypes.RegistrationStatus? = nil,
        typeArn: Swift.String? = nil,
        typeVersionArn: Swift.String? = nil
    )
    {
        self.description = description
        self.progressStatus = progressStatus
        self.typeArn = typeArn
        self.typeVersionArn = typeVersionArn
    }
}

struct DescribeTypeRegistrationOutputResponseBody: Swift.Equatable {
    public let progressStatus: CloudFormationClientTypes.RegistrationStatus?
    public let description: Swift.String?
    public let typeArn: Swift.String?
    public let typeVersionArn: Swift.String?
}

extension DescribeTypeRegistrationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case progressStatus = "ProgressStatus"
        case typeArn = "TypeArn"
        case typeVersionArn = "TypeVersionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DescribeTypeRegistrationResult"))
        let progressStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistrationStatus.self, forKey: .progressStatus)
        progressStatus = progressStatusDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let typeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let typeVersionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeVersionArn)
        typeVersionArn = typeVersionArnDecoded
    }
}

public struct DetectStackDriftInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetectStackDriftInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetectStackDriftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetectStackDriftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetectStackDriftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetectStackDriftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetectStackDriftOutputError>
}

extension DetectStackDriftInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectStackDriftInput(logicalResourceIds: \(Swift.String(describing: logicalResourceIds)), stackName: \(Swift.String(describing: stackName)))"}
}

extension DetectStackDriftInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceIds = logicalResourceIds {
            var logicalResourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogicalResourceIds"))
            for (index0, logicalresourceid0) in logicalResourceIds.enumerated() {
                try logicalResourceIdsContainer.encode(logicalresourceid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DetectStackDrift", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DetectStackDriftInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetectStackDriftInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetectStackDriftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetectStackDriftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetectStackDriftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetectStackDriftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetectStackDriftOutputError>
}

public struct DetectStackDriftInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetectStackDriftInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetectStackDriftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetectStackDriftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetectStackDriftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetectStackDriftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetectStackDriftOutputError>
}

public struct DetectStackDriftInput: Swift.Equatable {
    /// <p>The logical names of any resources you want to use as filters.</p>
    public let logicalResourceIds: [Swift.String]?
    /// <p>The name of the stack for which you want to detect drift. </p>
    public let stackName: Swift.String?

    public init (
        logicalResourceIds: [Swift.String]? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceIds = logicalResourceIds
        self.stackName = stackName
    }
}

extension DetectStackDriftOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetectStackDriftOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetectStackDriftOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectStackDriftOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectStackDriftOutputResponse(stackDriftDetectionId: \(Swift.String(describing: stackDriftDetectionId)))"}
}

extension DetectStackDriftOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DetectStackDriftOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackDriftDetectionId = output.stackDriftDetectionId
        } else {
            self.stackDriftDetectionId = nil
        }
    }
}

public struct DetectStackDriftOutputResponse: Swift.Equatable {
    /// <p>The ID of the drift detection results of this operation. </p>
    ///          <p>AWS CloudFormation generates new results, with a new drift detection ID, each time this operation
    ///          is run. However, the number of drift results AWS CloudFormation retains for any given stack, and for how
    ///          long, may vary. </p>
    public let stackDriftDetectionId: Swift.String?

    public init (
        stackDriftDetectionId: Swift.String? = nil
    )
    {
        self.stackDriftDetectionId = stackDriftDetectionId
    }
}

struct DetectStackDriftOutputResponseBody: Swift.Equatable {
    public let stackDriftDetectionId: Swift.String?
}

extension DetectStackDriftOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackDriftDetectionId = "StackDriftDetectionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DetectStackDriftResult"))
        let stackDriftDetectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackDriftDetectionId)
        stackDriftDetectionId = stackDriftDetectionIdDecoded
    }
}

public struct DetectStackResourceDriftInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetectStackResourceDriftInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetectStackResourceDriftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetectStackResourceDriftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetectStackResourceDriftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetectStackResourceDriftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetectStackResourceDriftOutputError>
}

extension DetectStackResourceDriftInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectStackResourceDriftInput(logicalResourceId: \(Swift.String(describing: logicalResourceId)), stackName: \(Swift.String(describing: stackName)))"}
}

extension DetectStackResourceDriftInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("DetectStackResourceDrift", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DetectStackResourceDriftInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetectStackResourceDriftInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetectStackResourceDriftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetectStackResourceDriftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetectStackResourceDriftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetectStackResourceDriftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetectStackResourceDriftOutputError>
}

public struct DetectStackResourceDriftInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetectStackResourceDriftInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetectStackResourceDriftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetectStackResourceDriftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetectStackResourceDriftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetectStackResourceDriftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetectStackResourceDriftOutputError>
}

public struct DetectStackResourceDriftInput: Swift.Equatable {
    /// <p>The logical name of the resource for which to return drift information.</p>
    public let logicalResourceId: Swift.String?
    /// <p>The name of the stack to which the resource belongs.</p>
    public let stackName: Swift.String?

    public init (
        logicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.stackName = stackName
    }
}

extension DetectStackResourceDriftOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetectStackResourceDriftOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetectStackResourceDriftOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectStackResourceDriftOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectStackResourceDriftOutputResponse(stackResourceDrift: \(Swift.String(describing: stackResourceDrift)))"}
}

extension DetectStackResourceDriftOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DetectStackResourceDriftOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackResourceDrift = output.stackResourceDrift
        } else {
            self.stackResourceDrift = nil
        }
    }
}

public struct DetectStackResourceDriftOutputResponse: Swift.Equatable {
    /// <p>Information about whether the resource's actual configuration has drifted from its
    ///          expected template configuration, including actual and expected property values and any
    ///          differences detected.</p>
    public let stackResourceDrift: CloudFormationClientTypes.StackResourceDrift?

    public init (
        stackResourceDrift: CloudFormationClientTypes.StackResourceDrift? = nil
    )
    {
        self.stackResourceDrift = stackResourceDrift
    }
}

struct DetectStackResourceDriftOutputResponseBody: Swift.Equatable {
    public let stackResourceDrift: CloudFormationClientTypes.StackResourceDrift?
}

extension DetectStackResourceDriftOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackResourceDrift = "StackResourceDrift"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DetectStackResourceDriftResult"))
        let stackResourceDriftDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDrift.self, forKey: .stackResourceDrift)
        stackResourceDrift = stackResourceDriftDecoded
    }
}

public struct DetectStackSetDriftInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetectStackSetDriftInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetectStackSetDriftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetectStackSetDriftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetectStackSetDriftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetectStackSetDriftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetectStackSetDriftOutputError>
}

extension DetectStackSetDriftInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectStackSetDriftInput(callAs: \(Swift.String(describing: callAs)), operationId: \(Swift.String(describing: operationId)), operationPreferences: \(Swift.String(describing: operationPreferences)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension DetectStackSetDriftInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("DetectStackSetDrift", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct DetectStackSetDriftInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetectStackSetDriftInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetectStackSetDriftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetectStackSetDriftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetectStackSetDriftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetectStackSetDriftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetectStackSetDriftOutputError>
}

public struct DetectStackSetDriftInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DetectStackSetDriftInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DetectStackSetDriftInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DetectStackSetDriftOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DetectStackSetDriftInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DetectStackSetDriftOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DetectStackSetDriftOutputError>
}

public struct DetectStackSetDriftInput: Swift.Equatable {
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>
    ///             <i>The ID of the stack set operation.</i>
    ///          </p>
    public var operationId: Swift.String?
    /// <p>The user-specified preferences for how AWS CloudFormation performs a stack set
    ///          operation. </p>
    ///          <p>For more information on maximum concurrent accounts and failure tolerance, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
    public let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// <p>The name of the stack set on which to perform the drift detection operation.</p>
    public let stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.stackSetName = stackSetName
    }
}

extension DetectStackSetDriftOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension DetectStackSetDriftOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DetectStackSetDriftOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case operationInProgressException(OperationInProgressException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DetectStackSetDriftOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectStackSetDriftOutputResponse(operationId: \(Swift.String(describing: operationId)))"}
}

extension DetectStackSetDriftOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DetectStackSetDriftOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operationId = output.operationId
        } else {
            self.operationId = nil
        }
    }
}

public struct DetectStackSetDriftOutputResponse: Swift.Equatable {
    /// <p>The ID of the drift detection stack set operation. </p>
    ///          <p>you can use this operation id with <code>
    ///                <a>DescribeStackSetOperation</a>
    ///             </code> to monitor the progress of the drift detection operation. </p>
    public let operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct DetectStackSetDriftOutputResponseBody: Swift.Equatable {
    public let operationId: Swift.String?
}

extension DetectStackSetDriftOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId = "OperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("DetectStackSetDriftResult"))
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension CloudFormationClientTypes {
    public enum DifferenceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case add
        case notEqual
        case remove
        case sdkUnknown(Swift.String)

        public static var allCases: [DifferenceType] {
            return [
                .add,
                .notEqual,
                .remove,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .add: return "ADD"
            case .notEqual: return "NOT_EQUAL"
            case .remove: return "REMOVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DifferenceType(rawValue: rawValue) ?? DifferenceType.sdkUnknown(rawValue)
        }
    }
}

public struct EstimateTemplateCostInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EstimateTemplateCostInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EstimateTemplateCostInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EstimateTemplateCostOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EstimateTemplateCostInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EstimateTemplateCostOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EstimateTemplateCostOutputError>
}

extension EstimateTemplateCostInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EstimateTemplateCostInput(parameters: \(Swift.String(describing: parameters)), templateBody: \(Swift.String(describing: templateBody)), templateURL: \(Swift.String(describing: templateURL)))"}
}

extension EstimateTemplateCostInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("EstimateTemplateCost", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct EstimateTemplateCostInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EstimateTemplateCostInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EstimateTemplateCostInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EstimateTemplateCostOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EstimateTemplateCostInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EstimateTemplateCostOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EstimateTemplateCostOutputError>
}

public struct EstimateTemplateCostInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EstimateTemplateCostInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EstimateTemplateCostInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EstimateTemplateCostOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EstimateTemplateCostInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EstimateTemplateCostOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EstimateTemplateCostOutputError>
}

/// <p>The input for an <a>EstimateTemplateCost</a> action.</p>
public struct EstimateTemplateCostInput: Swift.Equatable {
    /// <p>A list of <code>Parameter</code> structures that specify input parameters.</p>
    public let parameters: [CloudFormationClientTypes.Parameter]?
    /// <p>Structure containing the template body with a minimum length of 1 byte and a maximum
    ///          length of 51,200 bytes. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.)</p>
    ///          <p>Conditional: You must pass <code>TemplateBody</code> or <code>TemplateURL</code>. If
    ///          both are passed, only <code>TemplateBody</code> is used.</p>
    public let templateBody: Swift.String?
    /// <p>Location of file containing the template body. The URL must point to a template that
    ///          is located in an Amazon S3 bucket or a Systems Manager document. For more information, go to
    ///             <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must pass <code>TemplateURL</code> or <code>TemplateBody</code>. If
    ///          both are passed, only <code>TemplateBody</code> is used.</p>
    public let templateURL: Swift.String?

    public init (
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.parameters = parameters
        self.templateBody = templateBody
        self.templateURL = templateURL
    }
}

extension EstimateTemplateCostOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension EstimateTemplateCostOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EstimateTemplateCostOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension EstimateTemplateCostOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EstimateTemplateCostOutputResponse(url: \(Swift.String(describing: url)))"}
}

extension EstimateTemplateCostOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EstimateTemplateCostOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.url = output.url
        } else {
            self.url = nil
        }
    }
}

/// <p>The output for a <a>EstimateTemplateCost</a> action.</p>
public struct EstimateTemplateCostOutputResponse: Swift.Equatable {
    /// <p>An AWS Simple Monthly Calculator URL with a query string that describes the resources
    ///          required to run the template.</p>
    public let url: Swift.String?

    public init (
        url: Swift.String? = nil
    )
    {
        self.url = url
    }
}

struct EstimateTemplateCostOutputResponseBody: Swift.Equatable {
    public let url: Swift.String?
}

extension EstimateTemplateCostOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case url = "Url"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("EstimateTemplateCostResult"))
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension CloudFormationClientTypes {
    public enum EvaluationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `dynamic`
        case `static`
        case sdkUnknown(Swift.String)

        public static var allCases: [EvaluationType] {
            return [
                .dynamic,
                .static,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dynamic: return "Dynamic"
            case .static: return "Static"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EvaluationType(rawValue: rawValue) ?? EvaluationType.sdkUnknown(rawValue)
        }
    }
}

public struct ExecuteChangeSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExecuteChangeSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExecuteChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExecuteChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExecuteChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExecuteChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExecuteChangeSetOutputError>
}

extension ExecuteChangeSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExecuteChangeSetInput(changeSetName: \(Swift.String(describing: changeSetName)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), stackName: \(Swift.String(describing: stackName)))"}
}

extension ExecuteChangeSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ExecuteChangeSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ExecuteChangeSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExecuteChangeSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExecuteChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExecuteChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExecuteChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExecuteChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExecuteChangeSetOutputError>
}

public struct ExecuteChangeSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExecuteChangeSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExecuteChangeSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExecuteChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExecuteChangeSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExecuteChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExecuteChangeSetOutputError>
}

/// <p>The input for the <a>ExecuteChangeSet</a> action.</p>
public struct ExecuteChangeSetInput: Swift.Equatable {
    /// <p>The name or ARN of the change set that you want use to update the specified
    ///          stack.</p>
    public let changeSetName: Swift.String?
    /// <p>A unique identifier for this <code>ExecuteChangeSet</code> request. Specify this
    ///          token if you plan to retry requests so that AWS CloudFormation knows that you're not
    ///          attempting to execute a change set to update a stack with the same name. You might retry
    ///          <code>ExecuteChangeSet</code> requests to ensure that AWS CloudFormation successfully
    ///          received them.</p>
    public let clientRequestToken: Swift.String?
    /// <p>If you specified the name of a change set, specify the stack name or ID (ARN) that is
    ///          associated with the change set you want to execute.</p>
    public let stackName: Swift.String?

    public init (
        changeSetName: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.changeSetName = changeSetName
        self.clientRequestToken = clientRequestToken
        self.stackName = stackName
    }
}

extension ExecuteChangeSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ExecuteChangeSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ChangeSetNotFoundException" : self = .changeSetNotFoundException(try ChangeSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientCapabilitiesException" : self = .insufficientCapabilitiesException(try InsufficientCapabilitiesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidChangeSetStatusException" : self = .invalidChangeSetStatusException(try InvalidChangeSetStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExecuteChangeSetOutputError: Swift.Error, Swift.Equatable {
    case changeSetNotFoundException(ChangeSetNotFoundException)
    case insufficientCapabilitiesException(InsufficientCapabilitiesException)
    case invalidChangeSetStatusException(InvalidChangeSetStatusException)
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExecuteChangeSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExecuteChangeSetOutputResponse()"}
}

extension ExecuteChangeSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The output for the <a>ExecuteChangeSet</a> action.</p>
public struct ExecuteChangeSetOutputResponse: Swift.Equatable {

    public init() {}
}

struct ExecuteChangeSetOutputResponseBody: Swift.Equatable {
}

extension ExecuteChangeSetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CloudFormationClientTypes {
    public enum ExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case executeComplete
        case executeFailed
        case executeInProgress
        case obsolete
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionStatus] {
            return [
                .available,
                .executeComplete,
                .executeFailed,
                .executeInProgress,
                .obsolete,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .executeComplete: return "EXECUTE_COMPLETE"
            case .executeFailed: return "EXECUTE_FAILED"
            case .executeInProgress: return "EXECUTE_IN_PROGRESS"
            case .obsolete: return "OBSOLETE"
            case .unavailable: return "UNAVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExecutionStatus(rawValue: rawValue) ?? ExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.Export: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportingStackId = "ExportingStackId"
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exportingStackId = exportingStackId {
            try container.encode(exportingStackId, forKey: ClientRuntime.Key("ExportingStackId"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportingStackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportingStackId)
        exportingStackId = exportingStackIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudFormationClientTypes.Export: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Export(exportingStackId: \(Swift.String(describing: exportingStackId)), name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension CloudFormationClientTypes {
    /// <p>The <code>Export</code> structure describes the exported output values for a
    ///          stack.</p>
    public struct Export: Swift.Equatable {
        /// <p>The stack that contains the exported output name and value.</p>
        public let exportingStackId: Swift.String?
        /// <p>The name of exported output value. Use this name and the <code>Fn::ImportValue</code>
        ///          function to import the associated value into other stacks. The name is defined in the
        ///             <code>Export</code> field in the associated stack's <code>Outputs</code>
        ///          section.</p>
        public let name: Swift.String?
        /// <p>The value of the exported output, such as a resource physical ID. This value is
        ///          defined in the <code>Export</code> field in the associated stack's <code>Outputs</code>
        ///          section.</p>
        public let value: Swift.String?

        public init (
            exportingStackId: Swift.String? = nil,
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.exportingStackId = exportingStackId
            self.name = name
            self.value = value
        }
    }

}

public struct GetStackPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStackPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStackPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStackPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStackPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStackPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStackPolicyOutputError>
}

extension GetStackPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetStackPolicyInput(stackName: \(Swift.String(describing: stackName)))"}
}

extension GetStackPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("GetStackPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetStackPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStackPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStackPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStackPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStackPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStackPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStackPolicyOutputError>
}

public struct GetStackPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStackPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStackPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStackPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStackPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStackPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStackPolicyOutputError>
}

/// <p>The input for the <a>GetStackPolicy</a> action.</p>
public struct GetStackPolicyInput: Swift.Equatable {
    /// <p>The name or unique stack ID that is associated with the stack whose policy you want
    ///          to get.</p>
    public let stackName: Swift.String?

    public init (
        stackName: Swift.String? = nil
    )
    {
        self.stackName = stackName
    }
}

extension GetStackPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetStackPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetStackPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetStackPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetStackPolicyOutputResponse(stackPolicyBody: \(Swift.String(describing: stackPolicyBody)))"}
}

extension GetStackPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetStackPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackPolicyBody = output.stackPolicyBody
        } else {
            self.stackPolicyBody = nil
        }
    }
}

/// <p>The output for the <a>GetStackPolicy</a> action.</p>
public struct GetStackPolicyOutputResponse: Swift.Equatable {
    /// <p>Structure containing the stack policy body. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html"> Prevent Updates
    ///             to Stack Resources</a> in the AWS CloudFormation User Guide.)</p>
    public let stackPolicyBody: Swift.String?

    public init (
        stackPolicyBody: Swift.String? = nil
    )
    {
        self.stackPolicyBody = stackPolicyBody
    }
}

struct GetStackPolicyOutputResponseBody: Swift.Equatable {
    public let stackPolicyBody: Swift.String?
}

extension GetStackPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackPolicyBody = "StackPolicyBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetStackPolicyResult"))
        let stackPolicyBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackPolicyBody)
        stackPolicyBody = stackPolicyBodyDecoded
    }
}

public struct GetTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTemplateOutputError>
}

extension GetTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTemplateInput(changeSetName: \(Swift.String(describing: changeSetName)), stackName: \(Swift.String(describing: stackName)), templateStage: \(Swift.String(describing: templateStage)))"}
}

extension GetTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let changeSetName = changeSetName {
            try container.encode(changeSetName, forKey: ClientRuntime.Key("ChangeSetName"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let templateStage = templateStage {
            try container.encode(templateStage, forKey: ClientRuntime.Key("TemplateStage"))
        }
        try container.encode("GetTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTemplateOutputError>
}

public struct GetTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTemplateOutputError>
}

/// <p>The input for a <a>GetTemplate</a> action.</p>
public struct GetTemplateInput: Swift.Equatable {
    /// <p>The name or Amazon Resource Name (ARN) of a change set for which AWS CloudFormation
    ///          returns the associated template. If you specify a name, you must also specify the
    ///             <code>StackName</code>.</p>
    public let changeSetName: Swift.String?
    /// <p>The name or the unique stack ID that is associated with the stack, which are not
    ///          always interchangeable:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Running stacks: You can specify either the stack's name or its unique stack
    ///                ID.</p>
    ///             </li>
    ///             <li>
    ///                <p>Deleted stacks: You must specify the unique stack ID.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Default: There is no default value.</p>
    public let stackName: Swift.String?
    /// <p>For templates that include transforms, the stage of the template that AWS
    ///          CloudFormation returns. To get the user-submitted template, specify <code>Original</code>.
    ///          To get the template after AWS CloudFormation has processed all transforms, specify
    ///             <code>Processed</code>. </p>
    ///          <p>If the template doesn't include transforms, <code>Original</code> and
    ///             <code>Processed</code> return the same template. By default, AWS CloudFormation
    ///          specifies <code>Original</code>. </p>
    public let templateStage: CloudFormationClientTypes.TemplateStage?

    public init (
        changeSetName: Swift.String? = nil,
        stackName: Swift.String? = nil,
        templateStage: CloudFormationClientTypes.TemplateStage? = nil
    )
    {
        self.changeSetName = changeSetName
        self.stackName = stackName
        self.templateStage = templateStage
    }
}

extension GetTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ChangeSetNotFoundException" : self = .changeSetNotFoundException(try ChangeSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTemplateOutputError: Swift.Error, Swift.Equatable {
    case changeSetNotFoundException(ChangeSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTemplateOutputResponse(stagesAvailable: \(Swift.String(describing: stagesAvailable)), templateBody: \(Swift.String(describing: templateBody)))"}
}

extension GetTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stagesAvailable = output.stagesAvailable
            self.templateBody = output.templateBody
        } else {
            self.stagesAvailable = nil
            self.templateBody = nil
        }
    }
}

/// <p>The output for <a>GetTemplate</a> action.</p>
public struct GetTemplateOutputResponse: Swift.Equatable {
    /// <p>The stage of the template that you can retrieve. For stacks, the
    ///             <code>Original</code> and <code>Processed</code> templates are always available. For
    ///          change sets, the <code>Original</code> template is always available. After AWS
    ///          CloudFormation finishes creating the change set, the <code>Processed</code> template
    ///          becomes available.</p>
    public let stagesAvailable: [CloudFormationClientTypes.TemplateStage]?
    /// <p>Structure containing the template body. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a> in the AWS CloudFormation User Guide.)</p>
    ///          <p>AWS CloudFormation returns the same template that was used when the stack was
    ///          created.</p>
    public let templateBody: Swift.String?

    public init (
        stagesAvailable: [CloudFormationClientTypes.TemplateStage]? = nil,
        templateBody: Swift.String? = nil
    )
    {
        self.stagesAvailable = stagesAvailable
        self.templateBody = templateBody
    }
}

struct GetTemplateOutputResponseBody: Swift.Equatable {
    public let templateBody: Swift.String?
    public let stagesAvailable: [CloudFormationClientTypes.TemplateStage]?
}

extension GetTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stagesAvailable = "StagesAvailable"
        case templateBody = "TemplateBody"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetTemplateResult"))
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        if containerValues.contains(.stagesAvailable) {
            struct KeyVal0{struct member{}}
            let stagesAvailableWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stagesAvailable)
            if let stagesAvailableWrappedContainer = stagesAvailableWrappedContainer {
                let stagesAvailableContainer = try stagesAvailableWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TemplateStage].self, forKey: .member)
                var stagesAvailableBuffer:[CloudFormationClientTypes.TemplateStage]? = nil
                if let stagesAvailableContainer = stagesAvailableContainer {
                    stagesAvailableBuffer = [CloudFormationClientTypes.TemplateStage]()
                    for stringContainer0 in stagesAvailableContainer {
                        stagesAvailableBuffer?.append(stringContainer0)
                    }
                }
                stagesAvailable = stagesAvailableBuffer
            } else {
                stagesAvailable = []
            }
        } else {
            stagesAvailable = nil
        }
    }
}

public struct GetTemplateSummaryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTemplateSummaryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTemplateSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTemplateSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTemplateSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTemplateSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTemplateSummaryOutputError>
}

extension GetTemplateSummaryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTemplateSummaryInput(callAs: \(Swift.String(describing: callAs)), stackName: \(Swift.String(describing: stackName)), stackSetName: \(Swift.String(describing: stackSetName)), templateBody: \(Swift.String(describing: templateBody)), templateURL: \(Swift.String(describing: templateURL)))"}
}

extension GetTemplateSummaryInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("GetTemplateSummary", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct GetTemplateSummaryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTemplateSummaryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTemplateSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTemplateSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTemplateSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTemplateSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTemplateSummaryOutputError>
}

public struct GetTemplateSummaryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTemplateSummaryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTemplateSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTemplateSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTemplateSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTemplateSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTemplateSummaryOutputError>
}

/// <p>The input for the <a>GetTemplateSummary</a> action.</p>
public struct GetTemplateSummaryInput: Swift.Equatable {
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>The name or the stack ID that is associated with the stack, which are not always
    ///          interchangeable. For running stacks, you can specify either the stack's name or its unique
    ///          stack ID. For deleted stack, you must specify the unique stack ID.</p>
    ///          <p>Conditional: You must specify only one of the following parameters:
    ///             <code>StackName</code>, <code>StackSetName</code>, <code>TemplateBody</code>, or
    ///             <code>TemplateURL</code>.</p>
    public let stackName: Swift.String?
    /// <p>The name or unique ID of the stack set from which the stack was created.</p>
    ///          <p>Conditional: You must specify only one of the following parameters:
    ///             <code>StackName</code>, <code>StackSetName</code>, <code>TemplateBody</code>, or
    ///             <code>TemplateURL</code>.</p>
    public let stackSetName: Swift.String?
    /// <p>Structure containing the template body with a minimum length of 1 byte and a maximum
    ///          length of 51,200 bytes. For more information about templates, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a> in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must specify only one of the following parameters:
    ///             <code>StackName</code>, <code>StackSetName</code>, <code>TemplateBody</code>, or
    ///             <code>TemplateURL</code>.</p>
    public let templateBody: Swift.String?
    /// <p>Location of file containing the template body. The URL must point to a template (max
    ///          size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document.
    ///          For more information about templates, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must specify only one of the following parameters:
    ///             <code>StackName</code>, <code>StackSetName</code>, <code>TemplateBody</code>, or
    ///             <code>TemplateURL</code>.</p>
    public let templateURL: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        stackName: Swift.String? = nil,
        stackSetName: Swift.String? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.stackName = stackName
        self.stackSetName = stackSetName
        self.templateBody = templateBody
        self.templateURL = templateURL
    }
}

extension GetTemplateSummaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension GetTemplateSummaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTemplateSummaryOutputError: Swift.Error, Swift.Equatable {
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTemplateSummaryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTemplateSummaryOutputResponse(capabilities: \(Swift.String(describing: capabilities)), capabilitiesReason: \(Swift.String(describing: capabilitiesReason)), declaredTransforms: \(Swift.String(describing: declaredTransforms)), description: \(Swift.String(describing: description)), metadata: \(Swift.String(describing: metadata)), parameters: \(Swift.String(describing: parameters)), resourceIdentifierSummaries: \(Swift.String(describing: resourceIdentifierSummaries)), resourceTypes: \(Swift.String(describing: resourceTypes)), version: \(Swift.String(describing: version)))"}
}

extension GetTemplateSummaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTemplateSummaryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capabilities = output.capabilities
            self.capabilitiesReason = output.capabilitiesReason
            self.declaredTransforms = output.declaredTransforms
            self.description = output.description
            self.metadata = output.metadata
            self.parameters = output.parameters
            self.resourceIdentifierSummaries = output.resourceIdentifierSummaries
            self.resourceTypes = output.resourceTypes
            self.version = output.version
        } else {
            self.capabilities = nil
            self.capabilitiesReason = nil
            self.declaredTransforms = nil
            self.description = nil
            self.metadata = nil
            self.parameters = nil
            self.resourceIdentifierSummaries = nil
            self.resourceTypes = nil
            self.version = nil
        }
    }
}

/// <p>The output for the <a>GetTemplateSummary</a> action.</p>
public struct GetTemplateSummaryOutputResponse: Swift.Equatable {
    /// <p>The capabilities found within the template. If your template contains IAM resources,
    ///          you must specify the CAPABILITY_IAM or CAPABILITY_NAMED_IAM value for this parameter when
    ///          you use the <a>CreateStack</a> or <a>UpdateStack</a> actions with
    ///          your template; otherwise, those actions return an InsufficientCapabilities error.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM Resources in AWS CloudFormation Templates</a>.</p>
    public let capabilities: [CloudFormationClientTypes.Capability]?
    /// <p>The list of resources that generated the values in the <code>Capabilities</code>
    ///          response element.</p>
    public let capabilitiesReason: Swift.String?
    /// <p>A list of the transforms that are declared in the template.</p>
    public let declaredTransforms: [Swift.String]?
    /// <p>The value that is defined in the <code>Description</code> property of the
    ///          template.</p>
    public let description: Swift.String?
    /// <p>The value that is defined for the <code>Metadata</code> property of the
    ///          template.</p>
    public let metadata: Swift.String?
    /// <p>A list of parameter declarations that describe various properties for each
    ///          parameter.</p>
    public let parameters: [CloudFormationClientTypes.ParameterDeclaration]?
    /// <p>A list of resource identifier summaries that describe the target resources of an import
    ///          operation and the properties you can provide during the import to identify the target
    ///          resources. For example, <code>BucketName</code> is a possible identifier property for an
    ///             <code>AWS::S3::Bucket</code> resource. </p>
    public let resourceIdentifierSummaries: [CloudFormationClientTypes.ResourceIdentifierSummary]?
    /// <p>A list of all the template resource types that are defined in the template, such as
    ///             <code>AWS::EC2::Instance</code>, <code>AWS::Dynamo::Table</code>, and
    ///             <code>Custom::MyCustomInstance</code>.</p>
    public let resourceTypes: [Swift.String]?
    /// <p>The AWS template format version, which identifies the capabilities of the
    ///          template.</p>
    public let version: Swift.String?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        capabilitiesReason: Swift.String? = nil,
        declaredTransforms: [Swift.String]? = nil,
        description: Swift.String? = nil,
        metadata: Swift.String? = nil,
        parameters: [CloudFormationClientTypes.ParameterDeclaration]? = nil,
        resourceIdentifierSummaries: [CloudFormationClientTypes.ResourceIdentifierSummary]? = nil,
        resourceTypes: [Swift.String]? = nil,
        version: Swift.String? = nil
    )
    {
        self.capabilities = capabilities
        self.capabilitiesReason = capabilitiesReason
        self.declaredTransforms = declaredTransforms
        self.description = description
        self.metadata = metadata
        self.parameters = parameters
        self.resourceIdentifierSummaries = resourceIdentifierSummaries
        self.resourceTypes = resourceTypes
        self.version = version
    }
}

struct GetTemplateSummaryOutputResponseBody: Swift.Equatable {
    public let parameters: [CloudFormationClientTypes.ParameterDeclaration]?
    public let description: Swift.String?
    public let capabilities: [CloudFormationClientTypes.Capability]?
    public let capabilitiesReason: Swift.String?
    public let resourceTypes: [Swift.String]?
    public let version: Swift.String?
    public let metadata: Swift.String?
    public let declaredTransforms: [Swift.String]?
    public let resourceIdentifierSummaries: [CloudFormationClientTypes.ResourceIdentifierSummary]?
}

extension GetTemplateSummaryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case capabilitiesReason = "CapabilitiesReason"
        case declaredTransforms = "DeclaredTransforms"
        case description = "Description"
        case metadata = "Metadata"
        case parameters = "Parameters"
        case resourceIdentifierSummaries = "ResourceIdentifierSummaries"
        case resourceTypes = "ResourceTypes"
        case version = "Version"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("GetTemplateSummaryResult"))
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ParameterDeclaration].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.ParameterDeclaration]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.ParameterDeclaration]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for stringContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(stringContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        let capabilitiesReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .capabilitiesReason)
        capabilitiesReason = capabilitiesReasonDecoded
        if containerValues.contains(.resourceTypes) {
            struct KeyVal0{struct member{}}
            let resourceTypesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceTypes)
            if let resourceTypesWrappedContainer = resourceTypesWrappedContainer {
                let resourceTypesContainer = try resourceTypesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceTypesBuffer:[Swift.String]? = nil
                if let resourceTypesContainer = resourceTypesContainer {
                    resourceTypesBuffer = [Swift.String]()
                    for stringContainer0 in resourceTypesContainer {
                        resourceTypesBuffer?.append(stringContainer0)
                    }
                }
                resourceTypes = resourceTypesBuffer
            } else {
                resourceTypes = []
            }
        } else {
            resourceTypes = nil
        }
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadata)
        metadata = metadataDecoded
        if containerValues.contains(.declaredTransforms) {
            struct KeyVal0{struct member{}}
            let declaredTransformsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .declaredTransforms)
            if let declaredTransformsWrappedContainer = declaredTransformsWrappedContainer {
                let declaredTransformsContainer = try declaredTransformsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var declaredTransformsBuffer:[Swift.String]? = nil
                if let declaredTransformsContainer = declaredTransformsContainer {
                    declaredTransformsBuffer = [Swift.String]()
                    for stringContainer0 in declaredTransformsContainer {
                        declaredTransformsBuffer?.append(stringContainer0)
                    }
                }
                declaredTransforms = declaredTransformsBuffer
            } else {
                declaredTransforms = []
            }
        } else {
            declaredTransforms = nil
        }
        if containerValues.contains(.resourceIdentifierSummaries) {
            struct KeyVal0{struct member{}}
            let resourceIdentifierSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceIdentifierSummaries)
            if let resourceIdentifierSummariesWrappedContainer = resourceIdentifierSummariesWrappedContainer {
                let resourceIdentifierSummariesContainer = try resourceIdentifierSummariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ResourceIdentifierSummary].self, forKey: .member)
                var resourceIdentifierSummariesBuffer:[CloudFormationClientTypes.ResourceIdentifierSummary]? = nil
                if let resourceIdentifierSummariesContainer = resourceIdentifierSummariesContainer {
                    resourceIdentifierSummariesBuffer = [CloudFormationClientTypes.ResourceIdentifierSummary]()
                    for structureContainer0 in resourceIdentifierSummariesContainer {
                        resourceIdentifierSummariesBuffer?.append(structureContainer0)
                    }
                }
                resourceIdentifierSummaries = resourceIdentifierSummariesBuffer
            } else {
                resourceIdentifierSummaries = []
            }
        } else {
            resourceIdentifierSummaries = nil
        }
    }
}

extension CloudFormationClientTypes {
    public enum HandlerErrorCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accessdenied
        case alreadyexists
        case generalserviceexception
        case internalfailure
        case invalidcredentials
        case invalidrequest
        case networkfailure
        case notfound
        case notupdatable
        case resourceconflict
        case serviceinternalerror
        case servicelimitexceeded
        case servicetimeout
        case throttling
        case sdkUnknown(Swift.String)

        public static var allCases: [HandlerErrorCode] {
            return [
                .accessdenied,
                .alreadyexists,
                .generalserviceexception,
                .internalfailure,
                .invalidcredentials,
                .invalidrequest,
                .networkfailure,
                .notfound,
                .notupdatable,
                .resourceconflict,
                .serviceinternalerror,
                .servicelimitexceeded,
                .servicetimeout,
                .throttling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accessdenied: return "AccessDenied"
            case .alreadyexists: return "AlreadyExists"
            case .generalserviceexception: return "GeneralServiceException"
            case .internalfailure: return "InternalFailure"
            case .invalidcredentials: return "InvalidCredentials"
            case .invalidrequest: return "InvalidRequest"
            case .networkfailure: return "NetworkFailure"
            case .notfound: return "NotFound"
            case .notupdatable: return "NotUpdatable"
            case .resourceconflict: return "ResourceConflict"
            case .serviceinternalerror: return "ServiceInternalError"
            case .servicelimitexceeded: return "ServiceLimitExceeded"
            case .servicetimeout: return "NotStabilized"
            case .throttling: return "Throttling"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HandlerErrorCode(rawValue: rawValue) ?? HandlerErrorCode.sdkUnknown(rawValue)
        }
    }
}

extension InsufficientCapabilitiesException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsufficientCapabilitiesException(message: \(Swift.String(describing: message)))"}
}

extension InsufficientCapabilitiesException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InsufficientCapabilitiesExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The template contains resources with capabilities that weren't specified in the
///          Capabilities parameter.</p>
public struct InsufficientCapabilitiesException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InsufficientCapabilitiesExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InsufficientCapabilitiesExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidChangeSetStatusException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidChangeSetStatusException(message: \(Swift.String(describing: message)))"}
}

extension InvalidChangeSetStatusException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidChangeSetStatusExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified change set can't be used to update the stack. For example, the change
///          set status might be <code>CREATE_IN_PROGRESS</code>, or the stack status might be
///             <code>UPDATE_IN_PROGRESS</code>.</p>
public struct InvalidChangeSetStatusException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidChangeSetStatusExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidChangeSetStatusExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidOperationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidOperationException(message: \(Swift.String(describing: message)))"}
}

extension InvalidOperationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidOperationExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified operation isn't valid.</p>
public struct InvalidOperationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidOperationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidStateTransitionException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidStateTransitionException(message: \(Swift.String(describing: message)))"}
}

extension InvalidStateTransitionException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<InvalidStateTransitionExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Error reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>. CloudFormation does not return this error to users.</p>
public struct InvalidStateTransitionException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidStateTransitionExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidStateTransitionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<LimitExceededExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The quota for the resource has already been reached.</p>
///          <p>For information on resource and stack limitations, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html">Limits</a> in
///          the <i>AWS CloudFormation User Guide</i>.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListChangeSetsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListChangeSetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListChangeSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListChangeSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListChangeSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListChangeSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListChangeSetsOutputError>
}

extension ListChangeSetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListChangeSetsInput(nextToken: \(Swift.String(describing: nextToken)), stackName: \(Swift.String(describing: stackName)))"}
}

extension ListChangeSetsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ListChangeSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListChangeSetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListChangeSetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListChangeSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListChangeSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListChangeSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListChangeSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListChangeSetsOutputError>
}

public struct ListChangeSetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListChangeSetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListChangeSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListChangeSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListChangeSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListChangeSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListChangeSetsOutputError>
}

/// <p>The input for the <a>ListChangeSets</a> action.</p>
public struct ListChangeSetsInput: Swift.Equatable {
    /// <p>A string (provided by the <a>ListChangeSets</a> response output) that
    ///          identifies the next page of change sets that you want to retrieve.</p>
    public let nextToken: Swift.String?
    /// <p>The name or the Amazon Resource Name (ARN) of the stack for which you want to list
    ///          change sets.</p>
    public let stackName: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

extension ListChangeSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListChangeSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListChangeSetsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListChangeSetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListChangeSetsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), summaries: \(Swift.String(describing: summaries)))"}
}

extension ListChangeSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListChangeSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaries = output.summaries
        } else {
            self.nextToken = nil
            self.summaries = nil
        }
    }
}

/// <p>The output for the <a>ListChangeSets</a> action.</p>
public struct ListChangeSetsOutputResponse: Swift.Equatable {
    /// <p>If the output exceeds 1 MB, a string that identifies the next page of change sets. If
    ///          there is no additional page, this value is null.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>ChangeSetSummary</code> structures that provides the ID and status of
    ///          each change set for the specified stack.</p>
    public let summaries: [CloudFormationClientTypes.ChangeSetSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.ChangeSetSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

struct ListChangeSetsOutputResponseBody: Swift.Equatable {
    public let summaries: [CloudFormationClientTypes.ChangeSetSummary]?
    public let nextToken: Swift.String?
}

extension ListChangeSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaries = "Summaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListChangeSetsResult"))
        if containerValues.contains(.summaries) {
            struct KeyVal0{struct member{}}
            let summariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .summaries)
            if let summariesWrappedContainer = summariesWrappedContainer {
                let summariesContainer = try summariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ChangeSetSummary].self, forKey: .member)
                var summariesBuffer:[CloudFormationClientTypes.ChangeSetSummary]? = nil
                if let summariesContainer = summariesContainer {
                    summariesBuffer = [CloudFormationClientTypes.ChangeSetSummary]()
                    for structureContainer0 in summariesContainer {
                        summariesBuffer?.append(structureContainer0)
                    }
                }
                summaries = summariesBuffer
            } else {
                summaries = []
            }
        } else {
            summaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListExportsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListExportsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListExportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListExportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListExportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListExportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListExportsOutputError>
}

extension ListExportsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListExportsInput(nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListExportsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListExports", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListExportsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListExportsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListExportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListExportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListExportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListExportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListExportsOutputError>
}

public struct ListExportsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListExportsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListExportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListExportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListExportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListExportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListExportsOutputError>
}

public struct ListExportsInput: Swift.Equatable {
    /// <p>A string (provided by the <a>ListExports</a> response output) that
    ///          identifies the next page of exported output values that you asked to retrieve.</p>
    public let nextToken: Swift.String?

    public init (
        nextToken: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
    }
}

extension ListExportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListExportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListExportsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListExportsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListExportsOutputResponse(exports: \(Swift.String(describing: exports)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListExportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListExportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.exports = output.exports
            self.nextToken = output.nextToken
        } else {
            self.exports = nil
            self.nextToken = nil
        }
    }
}

public struct ListExportsOutputResponse: Swift.Equatable {
    /// <p>The output for the <a>ListExports</a> action.</p>
    public let exports: [CloudFormationClientTypes.Export]?
    /// <p>If the output exceeds 100 exported output values, a string that identifies the next
    ///          page of exports. If there is no additional page, this value is null.</p>
    public let nextToken: Swift.String?

    public init (
        exports: [CloudFormationClientTypes.Export]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exports = exports
        self.nextToken = nextToken
    }
}

struct ListExportsOutputResponseBody: Swift.Equatable {
    public let exports: [CloudFormationClientTypes.Export]?
    public let nextToken: Swift.String?
}

extension ListExportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exports = "Exports"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListExportsResult"))
        if containerValues.contains(.exports) {
            struct KeyVal0{struct member{}}
            let exportsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .exports)
            if let exportsWrappedContainer = exportsWrappedContainer {
                let exportsContainer = try exportsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Export].self, forKey: .member)
                var exportsBuffer:[CloudFormationClientTypes.Export]? = nil
                if let exportsContainer = exportsContainer {
                    exportsBuffer = [CloudFormationClientTypes.Export]()
                    for structureContainer0 in exportsContainer {
                        exportsBuffer?.append(structureContainer0)
                    }
                }
                exports = exportsBuffer
            } else {
                exports = []
            }
        } else {
            exports = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListImportsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListImportsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListImportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListImportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListImportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListImportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListImportsOutputError>
}

extension ListImportsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListImportsInput(exportName: \(Swift.String(describing: exportName)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListImportsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let exportName = exportName {
            try container.encode(exportName, forKey: ClientRuntime.Key("ExportName"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        try container.encode("ListImports", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListImportsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListImportsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListImportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListImportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListImportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListImportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListImportsOutputError>
}

public struct ListImportsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListImportsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListImportsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListImportsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListImportsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListImportsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListImportsOutputError>
}

public struct ListImportsInput: Swift.Equatable {
    /// <p>The name of the exported output value. AWS CloudFormation returns the stack names
    ///          that are importing this value. </p>
    public let exportName: Swift.String?
    /// <p>A string (provided by the <a>ListImports</a> response output) that
    ///          identifies the next page of stacks that are importing the specified exported output value.
    ///       </p>
    public let nextToken: Swift.String?

    public init (
        exportName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exportName = exportName
        self.nextToken = nextToken
    }
}

extension ListImportsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListImportsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListImportsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListImportsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListImportsOutputResponse(imports: \(Swift.String(describing: imports)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListImportsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListImportsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.imports = output.imports
            self.nextToken = output.nextToken
        } else {
            self.imports = nil
            self.nextToken = nil
        }
    }
}

public struct ListImportsOutputResponse: Swift.Equatable {
    /// <p>A list of stack names that are importing the specified exported output value.
    ///       </p>
    public let imports: [Swift.String]?
    /// <p>A string that identifies the next page of exports. If there is no additional page,
    ///          this value is null.</p>
    public let nextToken: Swift.String?

    public init (
        imports: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.imports = imports
        self.nextToken = nextToken
    }
}

struct ListImportsOutputResponseBody: Swift.Equatable {
    public let imports: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListImportsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imports = "Imports"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListImportsResult"))
        if containerValues.contains(.imports) {
            struct KeyVal0{struct member{}}
            let importsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .imports)
            if let importsWrappedContainer = importsWrappedContainer {
                let importsContainer = try importsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var importsBuffer:[Swift.String]? = nil
                if let importsContainer = importsContainer {
                    importsBuffer = [Swift.String]()
                    for stringContainer0 in importsContainer {
                        importsBuffer?.append(stringContainer0)
                    }
                }
                imports = importsBuffer
            } else {
                imports = []
            }
        } else {
            imports = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListStackInstancesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackInstancesOutputError>
}

extension ListStackInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStackInstancesInput(callAs: \(Swift.String(describing: callAs)), filters: \(Swift.String(describing: filters)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), stackInstanceAccount: \(Swift.String(describing: stackInstanceAccount)), stackInstanceRegion: \(Swift.String(describing: stackInstanceRegion)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension ListStackInstancesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let filters = filters {
            var filtersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Filters"))
            for (index0, stackinstancefilter0) in filters.enumerated() {
                try filtersContainer.encode(stackinstancefilter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackInstanceAccount = stackInstanceAccount {
            try container.encode(stackInstanceAccount, forKey: ClientRuntime.Key("StackInstanceAccount"))
        }
        if let stackInstanceRegion = stackInstanceRegion {
            try container.encode(stackInstanceRegion, forKey: ClientRuntime.Key("StackInstanceRegion"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ListStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListStackInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackInstancesOutputError>
}

public struct ListStackInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackInstancesOutputError>
}

public struct ListStackInstancesInput: Swift.Equatable {
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>The status that stack instances are filtered by.</p>
    public let filters: [CloudFormationClientTypes.StackInstanceFilter]?
    /// <p>The maximum number of results to be returned with a single call. If the number of
    ///          available results exceeds this maximum, the response includes a <code>NextToken</code>
    ///          value that you can assign to the <code>NextToken</code> request parameter to get the next
    ///          set of results.</p>
    public let maxResults: Swift.Int?
    /// <p>If the previous request didn't return all of the remaining results, the response's
    ///             <code>NextToken</code> parameter value is set to a token. To retrieve the next set of
    ///          results, call <code>ListStackInstances</code> again and assign that token to the request
    ///          object's <code>NextToken</code> parameter. If there are no remaining results, the previous
    ///          response object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the AWS account that you want to list stack instances for.</p>
    public let stackInstanceAccount: Swift.String?
    /// <p>The name of the Region where you want to list stack instances. </p>
    public let stackInstanceRegion: Swift.String?
    /// <p>The name or unique ID of the stack set that you want to list stack instances
    ///          for.</p>
    public let stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        filters: [CloudFormationClientTypes.StackInstanceFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        stackInstanceAccount: Swift.String? = nil,
        stackInstanceRegion: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stackInstanceAccount = stackInstanceAccount
        self.stackInstanceRegion = stackInstanceRegion
        self.stackSetName = stackSetName
    }
}

extension ListStackInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStackInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStackInstancesOutputError: Swift.Error, Swift.Equatable {
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStackInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStackInstancesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), summaries: \(Swift.String(describing: summaries)))"}
}

extension ListStackInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListStackInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaries = output.summaries
        } else {
            self.nextToken = nil
            self.summaries = nil
        }
    }
}

public struct ListStackInstancesOutputResponse: Swift.Equatable {
    /// <p>If the request doesn't return all of the remaining results, <code>NextToken</code> is
    ///          set to a token. To retrieve the next set of results, call <code>ListStackInstances</code>
    ///          again and assign that token to the request object's <code>NextToken</code> parameter. If
    ///          the request returns all results, <code>NextToken</code> is set to
    ///          <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>StackInstanceSummary</code> structures that contain information about
    ///          the specified stack instances.</p>
    public let summaries: [CloudFormationClientTypes.StackInstanceSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackInstanceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

struct ListStackInstancesOutputResponseBody: Swift.Equatable {
    public let summaries: [CloudFormationClientTypes.StackInstanceSummary]?
    public let nextToken: Swift.String?
}

extension ListStackInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaries = "Summaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStackInstancesResult"))
        if containerValues.contains(.summaries) {
            struct KeyVal0{struct member{}}
            let summariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .summaries)
            if let summariesWrappedContainer = summariesWrappedContainer {
                let summariesContainer = try summariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackInstanceSummary].self, forKey: .member)
                var summariesBuffer:[CloudFormationClientTypes.StackInstanceSummary]? = nil
                if let summariesContainer = summariesContainer {
                    summariesBuffer = [CloudFormationClientTypes.StackInstanceSummary]()
                    for structureContainer0 in summariesContainer {
                        summariesBuffer?.append(structureContainer0)
                    }
                }
                summaries = summariesBuffer
            } else {
                summaries = []
            }
        } else {
            summaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListStackResourcesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackResourcesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackResourcesOutputError>
}

extension ListStackResourcesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStackResourcesInput(nextToken: \(Swift.String(describing: nextToken)), stackName: \(Swift.String(describing: stackName)))"}
}

extension ListStackResourcesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("ListStackResources", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListStackResourcesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackResourcesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackResourcesOutputError>
}

public struct ListStackResourcesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackResourcesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackResourcesOutputError>
}

/// <p>The input for the <a>ListStackResource</a> action.</p>
public struct ListStackResourcesInput: Swift.Equatable {
    /// <p>A string that identifies the next page of stack resources that you want to
    ///          retrieve.</p>
    public let nextToken: Swift.String?
    /// <p>The name or the unique stack ID that is associated with the stack, which are not
    ///          always interchangeable:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Running stacks: You can specify either the stack's name or its unique stack
    ///                ID.</p>
    ///             </li>
    ///             <li>
    ///                <p>Deleted stacks: You must specify the unique stack ID.</p>
    ///             </li>
    ///          </ul>
    ///          <p>Default: There is no default value.</p>
    public let stackName: Swift.String?

    public init (
        nextToken: Swift.String? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.nextToken = nextToken
        self.stackName = stackName
    }
}

extension ListStackResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStackResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStackResourcesOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStackResourcesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStackResourcesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), stackResourceSummaries: \(Swift.String(describing: stackResourceSummaries)))"}
}

extension ListStackResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListStackResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.stackResourceSummaries = output.stackResourceSummaries
        } else {
            self.nextToken = nil
            self.stackResourceSummaries = nil
        }
    }
}

/// <p>The output for a <a>ListStackResources</a> action.</p>
public struct ListStackResourcesOutputResponse: Swift.Equatable {
    /// <p>If the output exceeds 1 MB, a string that identifies the next page of stack
    ///          resources. If no additional page exists, this value is null.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>StackResourceSummary</code> structures.</p>
    public let stackResourceSummaries: [CloudFormationClientTypes.StackResourceSummary]?

    public init (
        nextToken: Swift.String? = nil,
        stackResourceSummaries: [CloudFormationClientTypes.StackResourceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackResourceSummaries = stackResourceSummaries
    }
}

struct ListStackResourcesOutputResponseBody: Swift.Equatable {
    public let stackResourceSummaries: [CloudFormationClientTypes.StackResourceSummary]?
    public let nextToken: Swift.String?
}

extension ListStackResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackResourceSummaries = "StackResourceSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStackResourcesResult"))
        if containerValues.contains(.stackResourceSummaries) {
            struct KeyVal0{struct member{}}
            let stackResourceSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackResourceSummaries)
            if let stackResourceSummariesWrappedContainer = stackResourceSummariesWrappedContainer {
                let stackResourceSummariesContainer = try stackResourceSummariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackResourceSummary].self, forKey: .member)
                var stackResourceSummariesBuffer:[CloudFormationClientTypes.StackResourceSummary]? = nil
                if let stackResourceSummariesContainer = stackResourceSummariesContainer {
                    stackResourceSummariesBuffer = [CloudFormationClientTypes.StackResourceSummary]()
                    for structureContainer0 in stackResourceSummariesContainer {
                        stackResourceSummariesBuffer?.append(structureContainer0)
                    }
                }
                stackResourceSummaries = stackResourceSummariesBuffer
            } else {
                stackResourceSummaries = []
            }
        } else {
            stackResourceSummaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListStackSetOperationResultsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackSetOperationResultsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackSetOperationResultsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackSetOperationResultsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackSetOperationResultsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackSetOperationResultsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackSetOperationResultsOutputError>
}

extension ListStackSetOperationResultsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStackSetOperationResultsInput(callAs: \(Swift.String(describing: callAs)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), operationId: \(Swift.String(describing: operationId)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension ListStackSetOperationResultsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ListStackSetOperationResults", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListStackSetOperationResultsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackSetOperationResultsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackSetOperationResultsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackSetOperationResultsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackSetOperationResultsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackSetOperationResultsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackSetOperationResultsOutputError>
}

public struct ListStackSetOperationResultsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackSetOperationResultsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackSetOperationResultsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackSetOperationResultsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackSetOperationResultsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackSetOperationResultsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackSetOperationResultsOutputError>
}

public struct ListStackSetOperationResultsInput: Swift.Equatable {
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>The maximum number of results to be returned with a single call. If the number of
    ///          available results exceeds this maximum, the response includes a <code>NextToken</code>
    ///          value that you can assign to the <code>NextToken</code> request parameter to get the next
    ///          set of results.</p>
    public let maxResults: Swift.Int?
    /// <p>If the previous request didn't return all of the remaining results, the response
    ///          object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set
    ///          of results, call <code>ListStackSetOperationResults</code> again and assign that token to
    ///          the request object's <code>NextToken</code> parameter. If there are no remaining results,
    ///          the previous response object's <code>NextToken</code> parameter is set to
    ///          <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>The ID of the stack set operation.</p>
    public let operationId: Swift.String?
    /// <p>The name or unique ID of the stack set that you want to get operation results
    ///          for.</p>
    public let stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        operationId: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.operationId = operationId
        self.stackSetName = stackSetName
    }
}

extension ListStackSetOperationResultsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStackSetOperationResultsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "OperationNotFoundException" : self = .operationNotFoundException(try OperationNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStackSetOperationResultsOutputError: Swift.Error, Swift.Equatable {
    case operationNotFoundException(OperationNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStackSetOperationResultsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStackSetOperationResultsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), summaries: \(Swift.String(describing: summaries)))"}
}

extension ListStackSetOperationResultsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListStackSetOperationResultsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaries = output.summaries
        } else {
            self.nextToken = nil
            self.summaries = nil
        }
    }
}

public struct ListStackSetOperationResultsOutputResponse: Swift.Equatable {
    /// <p>If the request doesn't return all results, <code>NextToken</code> is set to a token.
    ///          To retrieve the next set of results, call <code>ListOperationResults</code> again and
    ///          assign that token to the request object's <code>NextToken</code> parameter. If there are no
    ///          remaining results, <code>NextToken</code> is set to <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>StackSetOperationResultSummary</code> structures that contain
    ///          information about the specified operation results, for accounts and Regions that are
    ///          included in the operation.</p>
    public let summaries: [CloudFormationClientTypes.StackSetOperationResultSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackSetOperationResultSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

struct ListStackSetOperationResultsOutputResponseBody: Swift.Equatable {
    public let summaries: [CloudFormationClientTypes.StackSetOperationResultSummary]?
    public let nextToken: Swift.String?
}

extension ListStackSetOperationResultsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaries = "Summaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStackSetOperationResultsResult"))
        if containerValues.contains(.summaries) {
            struct KeyVal0{struct member{}}
            let summariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .summaries)
            if let summariesWrappedContainer = summariesWrappedContainer {
                let summariesContainer = try summariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackSetOperationResultSummary].self, forKey: .member)
                var summariesBuffer:[CloudFormationClientTypes.StackSetOperationResultSummary]? = nil
                if let summariesContainer = summariesContainer {
                    summariesBuffer = [CloudFormationClientTypes.StackSetOperationResultSummary]()
                    for structureContainer0 in summariesContainer {
                        summariesBuffer?.append(structureContainer0)
                    }
                }
                summaries = summariesBuffer
            } else {
                summaries = []
            }
        } else {
            summaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListStackSetOperationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackSetOperationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackSetOperationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackSetOperationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackSetOperationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackSetOperationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackSetOperationsOutputError>
}

extension ListStackSetOperationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStackSetOperationsInput(callAs: \(Swift.String(describing: callAs)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension ListStackSetOperationsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("ListStackSetOperations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListStackSetOperationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackSetOperationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackSetOperationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackSetOperationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackSetOperationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackSetOperationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackSetOperationsOutputError>
}

public struct ListStackSetOperationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackSetOperationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackSetOperationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackSetOperationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackSetOperationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackSetOperationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackSetOperationsOutputError>
}

public struct ListStackSetOperationsInput: Swift.Equatable {
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>The maximum number of results to be returned with a single call. If the number of
    ///          available results exceeds this maximum, the response includes a <code>NextToken</code>
    ///          value that you can assign to the <code>NextToken</code> request parameter to get the next
    ///          set of results.</p>
    public let maxResults: Swift.Int?
    /// <p>If the previous paginated request didn't return all of the remaining results, the
    ///          response object's <code>NextToken</code> parameter value is set to a token. To retrieve the
    ///          next set of results, call <code>ListStackSetOperations</code> again and assign that token
    ///          to the request object's <code>NextToken</code> parameter. If there are no remaining
    ///          results, the previous response object's <code>NextToken</code> parameter is set to
    ///             <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>The name or unique ID of the stack set that you want to get operation summaries
    ///          for.</p>
    public let stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stackSetName = stackSetName
    }
}

extension ListStackSetOperationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStackSetOperationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStackSetOperationsOutputError: Swift.Error, Swift.Equatable {
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStackSetOperationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStackSetOperationsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), summaries: \(Swift.String(describing: summaries)))"}
}

extension ListStackSetOperationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListStackSetOperationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaries = output.summaries
        } else {
            self.nextToken = nil
            self.summaries = nil
        }
    }
}

public struct ListStackSetOperationsOutputResponse: Swift.Equatable {
    /// <p>If the request doesn't return all results, <code>NextToken</code> is set to a token.
    ///          To retrieve the next set of results, call <code>ListOperationResults</code> again and
    ///          assign that token to the request object's <code>NextToken</code> parameter. If there are no
    ///          remaining results, <code>NextToken</code> is set to <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>StackSetOperationSummary</code> structures that contain summary
    ///          information about operations for the specified stack set.</p>
    public let summaries: [CloudFormationClientTypes.StackSetOperationSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackSetOperationSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

struct ListStackSetOperationsOutputResponseBody: Swift.Equatable {
    public let summaries: [CloudFormationClientTypes.StackSetOperationSummary]?
    public let nextToken: Swift.String?
}

extension ListStackSetOperationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaries = "Summaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStackSetOperationsResult"))
        if containerValues.contains(.summaries) {
            struct KeyVal0{struct member{}}
            let summariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .summaries)
            if let summariesWrappedContainer = summariesWrappedContainer {
                let summariesContainer = try summariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackSetOperationSummary].self, forKey: .member)
                var summariesBuffer:[CloudFormationClientTypes.StackSetOperationSummary]? = nil
                if let summariesContainer = summariesContainer {
                    summariesBuffer = [CloudFormationClientTypes.StackSetOperationSummary]()
                    for structureContainer0 in summariesContainer {
                        summariesBuffer?.append(structureContainer0)
                    }
                }
                summaries = summariesBuffer
            } else {
                summaries = []
            }
        } else {
            summaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListStackSetsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackSetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackSetsOutputError>
}

extension ListStackSetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStackSetsInput(callAs: \(Swift.String(describing: callAs)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListStackSetsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        try container.encode("ListStackSets", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListStackSetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackSetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackSetsOutputError>
}

public struct ListStackSetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStackSetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStackSetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStackSetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStackSetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStackSetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStackSetsOutputError>
}

public struct ListStackSetsInput: Swift.Equatable {
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>The maximum number of results to be returned with a single call. If the number of
    ///          available results exceeds this maximum, the response includes a <code>NextToken</code>
    ///          value that you can assign to the <code>NextToken</code> request parameter to get the next
    ///          set of results.</p>
    public let maxResults: Swift.Int?
    /// <p>If the previous paginated request didn't return all of the remaining results, the
    ///          response object's <code>NextToken</code> parameter value is set to a token. To retrieve the
    ///          next set of results, call <code>ListStackSets</code> again and assign that token to the
    ///          request object's <code>NextToken</code> parameter. If there are no remaining results, the
    ///          previous response object's <code>NextToken</code> parameter is set to
    ///          <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>The status of the stack sets that you want to get summary information
    ///          about.</p>
    public let status: CloudFormationClientTypes.StackSetStatus?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: CloudFormationClientTypes.StackSetStatus? = nil
    )
    {
        self.callAs = callAs
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

extension ListStackSetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStackSetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStackSetsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStackSetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStackSetsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), summaries: \(Swift.String(describing: summaries)))"}
}

extension ListStackSetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListStackSetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.summaries = output.summaries
        } else {
            self.nextToken = nil
            self.summaries = nil
        }
    }
}

public struct ListStackSetsOutputResponse: Swift.Equatable {
    /// <p>If the request doesn't return all of the remaining results, <code>NextToken</code> is
    ///          set to a token. To retrieve the next set of results, call <code>ListStackInstances</code>
    ///          again and assign that token to the request object's <code>NextToken</code> parameter. If
    ///          the request returns all results, <code>NextToken</code> is set to
    ///          <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>StackSetSummary</code> structures that contain information about the
    ///          user's stack sets.</p>
    public let summaries: [CloudFormationClientTypes.StackSetSummary]?

    public init (
        nextToken: Swift.String? = nil,
        summaries: [CloudFormationClientTypes.StackSetSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.summaries = summaries
    }
}

struct ListStackSetsOutputResponseBody: Swift.Equatable {
    public let summaries: [CloudFormationClientTypes.StackSetSummary]?
    public let nextToken: Swift.String?
}

extension ListStackSetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case summaries = "Summaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStackSetsResult"))
        if containerValues.contains(.summaries) {
            struct KeyVal0{struct member{}}
            let summariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .summaries)
            if let summariesWrappedContainer = summariesWrappedContainer {
                let summariesContainer = try summariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackSetSummary].self, forKey: .member)
                var summariesBuffer:[CloudFormationClientTypes.StackSetSummary]? = nil
                if let summariesContainer = summariesContainer {
                    summariesBuffer = [CloudFormationClientTypes.StackSetSummary]()
                    for structureContainer0 in summariesContainer {
                        summariesBuffer?.append(structureContainer0)
                    }
                }
                summaries = summariesBuffer
            } else {
                summaries = []
            }
        } else {
            summaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListStacksInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStacksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStacksOutputError>
}

extension ListStacksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStacksInput(nextToken: \(Swift.String(describing: nextToken)), stackStatusFilter: \(Swift.String(describing: stackStatusFilter)))"}
}

extension ListStacksInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let stackStatusFilter = stackStatusFilter {
            var stackStatusFilterContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("StackStatusFilter"))
            for (index0, stackstatus0) in stackStatusFilter.enumerated() {
                try stackStatusFilterContainer.encode(stackstatus0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("ListStacks", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListStacksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStacksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStacksOutputError>
}

public struct ListStacksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStacksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStacksOutputError>
}

/// <p>The input for <a>ListStacks</a> action.</p>
public struct ListStacksInput: Swift.Equatable {
    /// <p>A string that identifies the next page of stacks that you want to retrieve.</p>
    public let nextToken: Swift.String?
    /// <p>Stack status to use as a filter. Specify one or more stack status codes to list only
    ///          stacks with the specified status codes. For a complete list of stack status codes, see the
    ///             <code>StackStatus</code> parameter of the <a>Stack</a> data type.</p>
    public let stackStatusFilter: [CloudFormationClientTypes.StackStatus]?

    public init (
        nextToken: Swift.String? = nil,
        stackStatusFilter: [CloudFormationClientTypes.StackStatus]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackStatusFilter = stackStatusFilter
    }
}

extension ListStacksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListStacksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStacksOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStacksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStacksOutputResponse(nextToken: \(Swift.String(describing: nextToken)), stackSummaries: \(Swift.String(describing: stackSummaries)))"}
}

extension ListStacksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListStacksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.stackSummaries = output.stackSummaries
        } else {
            self.nextToken = nil
            self.stackSummaries = nil
        }
    }
}

/// <p>The output for <a>ListStacks</a> action.</p>
public struct ListStacksOutputResponse: Swift.Equatable {
    /// <p>If the output exceeds 1 MB in size, a string that identifies the next page of stacks.
    ///          If no additional page exists, this value is null.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>StackSummary</code> structures containing information about the
    ///          specified stacks.</p>
    public let stackSummaries: [CloudFormationClientTypes.StackSummary]?

    public init (
        nextToken: Swift.String? = nil,
        stackSummaries: [CloudFormationClientTypes.StackSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.stackSummaries = stackSummaries
    }
}

struct ListStacksOutputResponseBody: Swift.Equatable {
    public let stackSummaries: [CloudFormationClientTypes.StackSummary]?
    public let nextToken: Swift.String?
}

extension ListStacksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case stackSummaries = "StackSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListStacksResult"))
        if containerValues.contains(.stackSummaries) {
            struct KeyVal0{struct member{}}
            let stackSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .stackSummaries)
            if let stackSummariesWrappedContainer = stackSummariesWrappedContainer {
                let stackSummariesContainer = try stackSummariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.StackSummary].self, forKey: .member)
                var stackSummariesBuffer:[CloudFormationClientTypes.StackSummary]? = nil
                if let stackSummariesContainer = stackSummariesContainer {
                    stackSummariesBuffer = [CloudFormationClientTypes.StackSummary]()
                    for structureContainer0 in stackSummariesContainer {
                        stackSummariesBuffer?.append(structureContainer0)
                    }
                }
                stackSummaries = stackSummariesBuffer
            } else {
                stackSummaries = []
            }
        } else {
            stackSummaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTypeRegistrationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTypeRegistrationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTypeRegistrationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTypeRegistrationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTypeRegistrationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTypeRegistrationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTypeRegistrationsOutputError>
}

extension ListTypeRegistrationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTypeRegistrationsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), registrationStatusFilter: \(Swift.String(describing: registrationStatusFilter)), type: \(Swift.String(describing: type)), typeArn: \(Swift.String(describing: typeArn)), typeName: \(Swift.String(describing: typeName)))"}
}

extension ListTypeRegistrationsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let registrationStatusFilter = registrationStatusFilter {
            try container.encode(registrationStatusFilter, forKey: ClientRuntime.Key("RegistrationStatusFilter"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("ListTypeRegistrations", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListTypeRegistrationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTypeRegistrationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTypeRegistrationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTypeRegistrationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTypeRegistrationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTypeRegistrationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTypeRegistrationsOutputError>
}

public struct ListTypeRegistrationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTypeRegistrationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTypeRegistrationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTypeRegistrationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTypeRegistrationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTypeRegistrationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTypeRegistrationsOutputError>
}

public struct ListTypeRegistrationsInput: Swift.Equatable {
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    public let maxResults: Swift.Int?
    /// <p>If the previous paginated request didn't return all of the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>The current status of the extension registration request.</p>
    ///          <p>The default is <code>IN_PROGRESS</code>.</p>
    public let registrationStatusFilter: CloudFormationClientTypes.RegistrationStatus?
    /// <p>The kind of extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let type: CloudFormationClientTypes.RegistryType?
    /// <p>The Amazon Resource Name (ARN) of the extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let typeArn: Swift.String?
    /// <p>The name of the extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let typeName: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        registrationStatusFilter: CloudFormationClientTypes.RegistrationStatus? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeArn: Swift.String? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.registrationStatusFilter = registrationStatusFilter
        self.type = type
        self.typeArn = typeArn
        self.typeName = typeName
    }
}

extension ListTypeRegistrationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTypeRegistrationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTypeRegistrationsOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTypeRegistrationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTypeRegistrationsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), registrationTokenList: \(Swift.String(describing: registrationTokenList)))"}
}

extension ListTypeRegistrationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTypeRegistrationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.registrationTokenList = output.registrationTokenList
        } else {
            self.nextToken = nil
            self.registrationTokenList = nil
        }
    }
}

public struct ListTypeRegistrationsOutputResponse: Swift.Equatable {
    /// <p>If the request doesn't return all of the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p> A list of extension registration tokens.</p>
    ///          <p>Use <code>
    ///                <a>DescribeTypeRegistration</a>
    ///             </code> to return detailed information about a type registration request.</p>
    public let registrationTokenList: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        registrationTokenList: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.registrationTokenList = registrationTokenList
    }
}

struct ListTypeRegistrationsOutputResponseBody: Swift.Equatable {
    public let registrationTokenList: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListTypeRegistrationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case registrationTokenList = "RegistrationTokenList"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTypeRegistrationsResult"))
        if containerValues.contains(.registrationTokenList) {
            struct KeyVal0{struct member{}}
            let registrationTokenListWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .registrationTokenList)
            if let registrationTokenListWrappedContainer = registrationTokenListWrappedContainer {
                let registrationTokenListContainer = try registrationTokenListWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var registrationTokenListBuffer:[Swift.String]? = nil
                if let registrationTokenListContainer = registrationTokenListContainer {
                    registrationTokenListBuffer = [Swift.String]()
                    for stringContainer0 in registrationTokenListContainer {
                        registrationTokenListBuffer?.append(stringContainer0)
                    }
                }
                registrationTokenList = registrationTokenListBuffer
            } else {
                registrationTokenList = []
            }
        } else {
            registrationTokenList = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTypeVersionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTypeVersionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTypeVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTypeVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTypeVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTypeVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTypeVersionsOutputError>
}

extension ListTypeVersionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTypeVersionsInput(arn: \(Swift.String(describing: arn)), deprecatedStatus: \(Swift.String(describing: deprecatedStatus)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), type: \(Swift.String(describing: type)), typeName: \(Swift.String(describing: typeName)))"}
}

extension ListTypeVersionsInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let deprecatedStatus = deprecatedStatus {
            try container.encode(deprecatedStatus, forKey: ClientRuntime.Key("DeprecatedStatus"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("ListTypeVersions", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListTypeVersionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTypeVersionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTypeVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTypeVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTypeVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTypeVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTypeVersionsOutputError>
}

public struct ListTypeVersionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTypeVersionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTypeVersionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTypeVersionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTypeVersionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTypeVersionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTypeVersionsOutputError>
}

public struct ListTypeVersionsInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the extension for which you want version summary information.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let arn: Swift.String?
    /// <p>The deprecation status of the extension versions that you want to get summary information about.</p>
    ///          <p>Valid values include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>LIVE</code>: The extension version is registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DEPRECATED</code>: The extension version has been deregistered and can no longer be used in CloudFormation operations. </p>
    ///             </li>
    ///          </ul>
    ///          <p>The default is <code>LIVE</code>.</p>
    public let deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    public let maxResults: Swift.Int?
    /// <p>If the previous paginated request didn't return all of the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>The kind of the extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let type: CloudFormationClientTypes.RegistryType?
    /// <p>The name of the extension for which you want version summary information.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let typeName: Swift.String?

    public init (
        arn: Swift.String? = nil,
        deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.arn = arn
        self.deprecatedStatus = deprecatedStatus
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.type = type
        self.typeName = typeName
    }
}

extension ListTypeVersionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTypeVersionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTypeVersionsOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTypeVersionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTypeVersionsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), typeVersionSummaries: \(Swift.String(describing: typeVersionSummaries)))"}
}

extension ListTypeVersionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTypeVersionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.typeVersionSummaries = output.typeVersionSummaries
        } else {
            self.nextToken = nil
            self.typeVersionSummaries = nil
        }
    }
}

public struct ListTypeVersionsOutputResponse: Swift.Equatable {
    /// <p>If the request doesn't return all of the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>TypeVersionSummary</code> structures that contain information about the specified extension's versions.</p>
    public let typeVersionSummaries: [CloudFormationClientTypes.TypeVersionSummary]?

    public init (
        nextToken: Swift.String? = nil,
        typeVersionSummaries: [CloudFormationClientTypes.TypeVersionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.typeVersionSummaries = typeVersionSummaries
    }
}

struct ListTypeVersionsOutputResponseBody: Swift.Equatable {
    public let typeVersionSummaries: [CloudFormationClientTypes.TypeVersionSummary]?
    public let nextToken: Swift.String?
}

extension ListTypeVersionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case typeVersionSummaries = "TypeVersionSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTypeVersionsResult"))
        if containerValues.contains(.typeVersionSummaries) {
            struct KeyVal0{struct member{}}
            let typeVersionSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .typeVersionSummaries)
            if let typeVersionSummariesWrappedContainer = typeVersionSummariesWrappedContainer {
                let typeVersionSummariesContainer = try typeVersionSummariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TypeVersionSummary].self, forKey: .member)
                var typeVersionSummariesBuffer:[CloudFormationClientTypes.TypeVersionSummary]? = nil
                if let typeVersionSummariesContainer = typeVersionSummariesContainer {
                    typeVersionSummariesBuffer = [CloudFormationClientTypes.TypeVersionSummary]()
                    for structureContainer0 in typeVersionSummariesContainer {
                        typeVersionSummariesBuffer?.append(structureContainer0)
                    }
                }
                typeVersionSummaries = typeVersionSummariesBuffer
            } else {
                typeVersionSummaries = []
            }
        } else {
            typeVersionSummaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTypesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTypesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTypesOutputError>
}

extension ListTypesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTypesInput(deprecatedStatus: \(Swift.String(describing: deprecatedStatus)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), provisioningType: \(Swift.String(describing: provisioningType)), type: \(Swift.String(describing: type)), visibility: \(Swift.String(describing: visibility)))"}
}

extension ListTypesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let deprecatedStatus = deprecatedStatus {
            try container.encode(deprecatedStatus, forKey: ClientRuntime.Key("DeprecatedStatus"))
        }
        if let maxResults = maxResults {
            try container.encode(maxResults, forKey: ClientRuntime.Key("MaxResults"))
        }
        if let nextToken = nextToken {
            try container.encode(nextToken, forKey: ClientRuntime.Key("NextToken"))
        }
        if let provisioningType = provisioningType {
            try container.encode(provisioningType, forKey: ClientRuntime.Key("ProvisioningType"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let visibility = visibility {
            try container.encode(visibility, forKey: ClientRuntime.Key("Visibility"))
        }
        try container.encode("ListTypes", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ListTypesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTypesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTypesOutputError>
}

public struct ListTypesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTypesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTypesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTypesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTypesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTypesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTypesOutputError>
}

public struct ListTypesInput: Swift.Equatable {
    /// <p>The deprecation status of the extension that you want to get summary information about.</p>
    ///          <p>Valid values include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>LIVE</code>: The extension is registered for use in CloudFormation operations.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>DEPRECATED</code>: The extension has been deregistered and can no longer be used in CloudFormation operations. </p>
    ///             </li>
    ///          </ul>
    public let deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus?
    /// <p>The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.</p>
    public let maxResults: Swift.Int?
    /// <p>If the previous paginated request didn't return all of the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>The provisioning behavior of the type. AWS CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p>
    ///          <p>Valid values include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>FULLY_MUTABLE</code>: The extension includes an update handler to process updates to the extension during stack update operations.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>IMMUTABLE</code>: The extension does not include an update handler, so the extension cannot be updated and must instead be replaced during stack update operations.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>NON_PROVISIONABLE</code>: The extension does not include create, read, and delete handlers, and therefore cannot actually be provisioned.</p>
    ///             </li>
    ///          </ul>
    public let provisioningType: CloudFormationClientTypes.ProvisioningType?
    /// <p>The type of extension.</p>
    public let type: CloudFormationClientTypes.RegistryType?
    /// <p>The scope at which the extension is visible and usable in CloudFormation operations.</p>
    ///          <p>Valid values include:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>PRIVATE</code>: The extension is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any extension you create as <code>PRIVATE</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>PUBLIC</code>: The extension is publically visible and usable within any Amazon account.</p>
    ///             </li>
    ///          </ul>
    ///          <p>The default is <code>PRIVATE</code>.</p>
    public let visibility: CloudFormationClientTypes.Visibility?

    public init (
        deprecatedStatus: CloudFormationClientTypes.DeprecatedStatus? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        provisioningType: CloudFormationClientTypes.ProvisioningType? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        visibility: CloudFormationClientTypes.Visibility? = nil
    )
    {
        self.deprecatedStatus = deprecatedStatus
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.provisioningType = provisioningType
        self.type = type
        self.visibility = visibility
    }
}

extension ListTypesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ListTypesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTypesOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTypesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTypesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), typeSummaries: \(Swift.String(describing: typeSummaries)))"}
}

extension ListTypesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTypesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.typeSummaries = output.typeSummaries
        } else {
            self.nextToken = nil
            self.typeSummaries = nil
        }
    }
}

public struct ListTypesOutputResponse: Swift.Equatable {
    /// <p>If the request doesn't return all of the remaining results, <code>NextToken</code> is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If the request returns all results, <code>NextToken</code> is set to <code>null</code>.</p>
    public let nextToken: Swift.String?
    /// <p>A list of <code>TypeSummary</code> structures that contain information about the specified extensions.</p>
    public let typeSummaries: [CloudFormationClientTypes.TypeSummary]?

    public init (
        nextToken: Swift.String? = nil,
        typeSummaries: [CloudFormationClientTypes.TypeSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.typeSummaries = typeSummaries
    }
}

struct ListTypesOutputResponseBody: Swift.Equatable {
    public let typeSummaries: [CloudFormationClientTypes.TypeSummary]?
    public let nextToken: Swift.String?
}

extension ListTypesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case typeSummaries = "TypeSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ListTypesResult"))
        if containerValues.contains(.typeSummaries) {
            struct KeyVal0{struct member{}}
            let typeSummariesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .typeSummaries)
            if let typeSummariesWrappedContainer = typeSummariesWrappedContainer {
                let typeSummariesContainer = try typeSummariesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TypeSummary].self, forKey: .member)
                var typeSummariesBuffer:[CloudFormationClientTypes.TypeSummary]? = nil
                if let typeSummariesContainer = typeSummariesContainer {
                    typeSummariesBuffer = [CloudFormationClientTypes.TypeSummary]()
                    for structureContainer0 in typeSummariesContainer {
                        typeSummariesBuffer?.append(structureContainer0)
                    }
                }
                typeSummaries = typeSummariesBuffer
            } else {
                typeSummaries = []
            }
        } else {
            typeSummaries = nil
        }
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension CloudFormationClientTypes.LoggingConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName = "LogGroupName"
        case logRoleArn = "LogRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logGroupName = logGroupName {
            try container.encode(logGroupName, forKey: ClientRuntime.Key("LogGroupName"))
        }
        if let logRoleArn = logRoleArn {
            try container.encode(logRoleArn, forKey: ClientRuntime.Key("LogRoleArn"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logRoleArn)
        logRoleArn = logRoleArnDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension CloudFormationClientTypes.LoggingConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoggingConfig(logGroupName: \(Swift.String(describing: logGroupName)), logRoleArn: \(Swift.String(describing: logRoleArn)))"}
}

extension CloudFormationClientTypes {
    /// <p>Contains logging configuration information for a type.</p>
    public struct LoggingConfig: Swift.Equatable {
        /// <p>The Amazon CloudWatch log group to which CloudFormation sends error logging information when invoking the type's handlers.</p>
        public let logGroupName: Swift.String?
        /// <p>The ARN of the role that CloudFormation should assume when sending log entries to CloudWatch logs.</p>
        public let logRoleArn: Swift.String?

        public init (
            logGroupName: Swift.String? = nil,
            logRoleArn: Swift.String? = nil
        )
        {
            self.logGroupName = logGroupName
            self.logRoleArn = logRoleArn
        }
    }

}

extension CloudFormationClientTypes.ModuleInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalIdHierarchy = "LogicalIdHierarchy"
        case typeHierarchy = "TypeHierarchy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalIdHierarchy = logicalIdHierarchy {
            try container.encode(logicalIdHierarchy, forKey: ClientRuntime.Key("LogicalIdHierarchy"))
        }
        if let typeHierarchy = typeHierarchy {
            try container.encode(typeHierarchy, forKey: ClientRuntime.Key("TypeHierarchy"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeHierarchyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeHierarchy)
        typeHierarchy = typeHierarchyDecoded
        let logicalIdHierarchyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalIdHierarchy)
        logicalIdHierarchy = logicalIdHierarchyDecoded
    }
}

extension CloudFormationClientTypes.ModuleInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ModuleInfo(logicalIdHierarchy: \(Swift.String(describing: logicalIdHierarchy)), typeHierarchy: \(Swift.String(describing: typeHierarchy)))"}
}

extension CloudFormationClientTypes {
    /// <p>Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.</p>
    ///          <p>For more information on modules, see <a href="AWSCloudFormation/latest/UserGuide/modules.html">Using modules to encapsulate and reuse resource configurations</a> in the <i>CloudFormation User Guide</i>.</p>
    public struct ModuleInfo: Swift.Equatable {
        /// <p>A concantenated list of the logical IDs of the module or modules containing the resource. Modules are listed starting with the inner-most nested module, and separated by  <code>/</code>.</p>
        ///          <p>In the following example, the resource was created from a module, <code>moduleA</code>, that is nested inside a parent module, <code>moduleB</code>.</p>
        ///          <p>
        ///             <code>moduleA/moduleB</code>
        ///          </p>
        ///          <p>For more information, see <a href="AWSCloudFormation/latest/UserGuide/modules.html#module-ref-resources">Referencing resources in a module</a> in the <i>CloudFormation User Guide</i>.</p>
        public let logicalIdHierarchy: Swift.String?
        /// <p>A concantenated list of the the module type or types containing the resource. Module types are listed starting with the inner-most nested module, and separated by  <code>/</code>.</p>
        ///          <p>In the following example, the resource was created from a module of type <code>AWS::First::Example::MODULE</code>, that is nested inside a parent module of type <code>AWS::Second::Example::MODULE</code>.</p>
        ///          <p>
        ///             <code>AWS::First::Example::MODULE/AWS::Second::Example::MODULE</code>
        ///          </p>
        public let typeHierarchy: Swift.String?

        public init (
            logicalIdHierarchy: Swift.String? = nil,
            typeHierarchy: Swift.String? = nil
        )
        {
            self.logicalIdHierarchy = logicalIdHierarchy
            self.typeHierarchy = typeHierarchy
        }
    }

}

extension NameAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NameAlreadyExistsException(message: \(Swift.String(describing: message)))"}
}

extension NameAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<NameAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified name is already in use.</p>
public struct NameAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NameAlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NameAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes {
    public enum OnFailure: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case delete
        case doNothing
        case rollback
        case sdkUnknown(Swift.String)

        public static var allCases: [OnFailure] {
            return [
                .delete,
                .doNothing,
                .rollback,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .delete: return "DELETE"
            case .doNothing: return "DO_NOTHING"
            case .rollback: return "ROLLBACK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OnFailure(rawValue: rawValue) ?? OnFailure.sdkUnknown(rawValue)
        }
    }
}

extension OperationIdAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OperationIdAlreadyExistsException(message: \(Swift.String(describing: message)))"}
}

extension OperationIdAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<OperationIdAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified operation ID already exists.</p>
public struct OperationIdAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationIdAlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension OperationIdAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OperationInProgressException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OperationInProgressException(message: \(Swift.String(describing: message)))"}
}

extension OperationInProgressException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<OperationInProgressExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Another operation is currently in progress for this stack set. Only one operation can
///          be performed for a stack set at a given time.</p>
public struct OperationInProgressException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationInProgressExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension OperationInProgressExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OperationNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OperationNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension OperationNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<OperationNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified ID refers to an operation that doesn't exist.</p>
public struct OperationNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension OperationNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes {
    public enum OperationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [OperationStatus] {
            return [
                .failed,
                .inProgress,
                .pending,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperationStatus(rawValue: rawValue) ?? OperationStatus.sdkUnknown(rawValue)
        }
    }
}

extension OperationStatusCheckFailedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OperationStatusCheckFailedException(message: \(Swift.String(describing: message)))"}
}

extension OperationStatusCheckFailedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<OperationStatusCheckFailedExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Error reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>. CloudFormation does not return this error to users.</p>
public struct OperationStatusCheckFailedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationStatusCheckFailedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension OperationStatusCheckFailedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.Output: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case exportName = "ExportName"
        case outputKey = "OutputKey"
        case outputValue = "OutputValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let exportName = exportName {
            try container.encode(exportName, forKey: ClientRuntime.Key("ExportName"))
        }
        if let outputKey = outputKey {
            try container.encode(outputKey, forKey: ClientRuntime.Key("OutputKey"))
        }
        if let outputValue = outputValue {
            try container.encode(outputValue, forKey: ClientRuntime.Key("OutputValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let outputKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputKey)
        outputKey = outputKeyDecoded
        let outputValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputValue)
        outputValue = outputValueDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let exportNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .exportName)
        exportName = exportNameDecoded
    }
}

extension CloudFormationClientTypes.Output: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Output(description: \(Swift.String(describing: description)), exportName: \(Swift.String(describing: exportName)), outputKey: \(Swift.String(describing: outputKey)), outputValue: \(Swift.String(describing: outputValue)))"}
}

extension CloudFormationClientTypes {
    /// <p>The Output data type.</p>
    public struct Output: Swift.Equatable {
        /// <p>User defined description associated with the output.</p>
        public let description: Swift.String?
        /// <p>The name of the export associated with the output.</p>
        public let exportName: Swift.String?
        /// <p>The key associated with the output.</p>
        public let outputKey: Swift.String?
        /// <p>The value associated with the output.</p>
        public let outputValue: Swift.String?

        public init (
            description: Swift.String? = nil,
            exportName: Swift.String? = nil,
            outputKey: Swift.String? = nil,
            outputValue: Swift.String? = nil
        )
        {
            self.description = description
            self.exportName = exportName
            self.outputKey = outputKey
            self.outputValue = outputValue
        }
    }

}

extension CloudFormationClientTypes.Parameter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterKey = "ParameterKey"
        case parameterValue = "ParameterValue"
        case resolvedValue = "ResolvedValue"
        case usePreviousValue = "UsePreviousValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let parameterKey = parameterKey {
            try container.encode(parameterKey, forKey: ClientRuntime.Key("ParameterKey"))
        }
        if let parameterValue = parameterValue {
            try container.encode(parameterValue, forKey: ClientRuntime.Key("ParameterValue"))
        }
        if let resolvedValue = resolvedValue {
            try container.encode(resolvedValue, forKey: ClientRuntime.Key("ResolvedValue"))
        }
        if let usePreviousValue = usePreviousValue {
            try container.encode(usePreviousValue, forKey: ClientRuntime.Key("UsePreviousValue"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterKey)
        parameterKey = parameterKeyDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
        let usePreviousValueDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .usePreviousValue)
        usePreviousValue = usePreviousValueDecoded
        let resolvedValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resolvedValue)
        resolvedValue = resolvedValueDecoded
    }
}

extension CloudFormationClientTypes.Parameter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Parameter(parameterKey: \(Swift.String(describing: parameterKey)), parameterValue: \(Swift.String(describing: parameterValue)), resolvedValue: \(Swift.String(describing: resolvedValue)), usePreviousValue: \(Swift.String(describing: usePreviousValue)))"}
}

extension CloudFormationClientTypes {
    /// <p>The Parameter data type.</p>
    public struct Parameter: Swift.Equatable {
        /// <p>The key associated with the parameter. If you don't specify a key and value for a
        ///          particular parameter, AWS CloudFormation uses the default value that is specified in your
        ///          template.</p>
        public let parameterKey: Swift.String?
        /// <p>The input value associated with the parameter.</p>
        public let parameterValue: Swift.String?
        /// <p>Read-only. The value that corresponds to a Systems Manager parameter key. This field
        ///          is returned only for <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-ssm-parameter-types">
        ///                <code>SSM</code> parameter types</a> in the template.</p>
        public let resolvedValue: Swift.String?
        /// <p>During a stack update, use the existing parameter value that the stack is using for a
        ///          given parameter key. If you specify <code>true</code>, do not specify a parameter
        ///          value.</p>
        public let usePreviousValue: Swift.Bool?

        public init (
            parameterKey: Swift.String? = nil,
            parameterValue: Swift.String? = nil,
            resolvedValue: Swift.String? = nil,
            usePreviousValue: Swift.Bool? = nil
        )
        {
            self.parameterKey = parameterKey
            self.parameterValue = parameterValue
            self.resolvedValue = resolvedValue
            self.usePreviousValue = usePreviousValue
        }
    }

}

extension CloudFormationClientTypes.ParameterConstraints: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowedValues = "AllowedValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let allowedValues = allowedValues {
            var allowedValuesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("AllowedValues"))
            for (index0, allowedvalue0) in allowedValues.enumerated() {
                try allowedValuesContainer.encode(allowedvalue0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.allowedValues) {
            struct KeyVal0{struct member{}}
            let allowedValuesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .allowedValues)
            if let allowedValuesWrappedContainer = allowedValuesWrappedContainer {
                let allowedValuesContainer = try allowedValuesWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var allowedValuesBuffer:[Swift.String]? = nil
                if let allowedValuesContainer = allowedValuesContainer {
                    allowedValuesBuffer = [Swift.String]()
                    for stringContainer0 in allowedValuesContainer {
                        allowedValuesBuffer?.append(stringContainer0)
                    }
                }
                allowedValues = allowedValuesBuffer
            } else {
                allowedValues = []
            }
        } else {
            allowedValues = nil
        }
    }
}

extension CloudFormationClientTypes.ParameterConstraints: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ParameterConstraints(allowedValues: \(Swift.String(describing: allowedValues)))"}
}

extension CloudFormationClientTypes {
    /// <p>A set of criteria that AWS CloudFormation uses to validate parameter values. Although
    ///          other constraints might be defined in the stack template, AWS CloudFormation returns only
    ///          the <code>AllowedValues</code> property.</p>
    public struct ParameterConstraints: Swift.Equatable {
        /// <p>A list of values that are permitted for a parameter.</p>
        public let allowedValues: [Swift.String]?

        public init (
            allowedValues: [Swift.String]? = nil
        )
        {
            self.allowedValues = allowedValues
        }
    }

}

extension CloudFormationClientTypes.ParameterDeclaration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue = "DefaultValue"
        case description = "Description"
        case noEcho = "NoEcho"
        case parameterConstraints = "ParameterConstraints"
        case parameterKey = "ParameterKey"
        case parameterType = "ParameterType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: ClientRuntime.Key("DefaultValue"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let noEcho = noEcho {
            try container.encode(noEcho, forKey: ClientRuntime.Key("NoEcho"))
        }
        if let parameterConstraints = parameterConstraints {
            try container.encode(parameterConstraints, forKey: ClientRuntime.Key("ParameterConstraints"))
        }
        if let parameterKey = parameterKey {
            try container.encode(parameterKey, forKey: ClientRuntime.Key("ParameterKey"))
        }
        if let parameterType = parameterType {
            try container.encode(parameterType, forKey: ClientRuntime.Key("ParameterType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterKey)
        parameterKey = parameterKeyDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let parameterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterType)
        parameterType = parameterTypeDecoded
        let noEchoDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noEcho)
        noEcho = noEchoDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let parameterConstraintsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ParameterConstraints.self, forKey: .parameterConstraints)
        parameterConstraints = parameterConstraintsDecoded
    }
}

extension CloudFormationClientTypes.ParameterDeclaration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ParameterDeclaration(defaultValue: \(Swift.String(describing: defaultValue)), description: \(Swift.String(describing: description)), noEcho: \(Swift.String(describing: noEcho)), parameterConstraints: \(Swift.String(describing: parameterConstraints)), parameterKey: \(Swift.String(describing: parameterKey)), parameterType: \(Swift.String(describing: parameterType)))"}
}

extension CloudFormationClientTypes {
    /// <p>The ParameterDeclaration data type.</p>
    public struct ParameterDeclaration: Swift.Equatable {
        /// <p>The default value of the parameter.</p>
        public let defaultValue: Swift.String?
        /// <p>The description that is associate with the parameter.</p>
        public let description: Swift.String?
        /// <p>Flag that indicates whether the parameter value is shown as plain text in logs and in
        ///          the AWS Management Console.</p>
        public let noEcho: Swift.Bool?
        /// <p>The criteria that AWS CloudFormation uses to validate parameter values.</p>
        public let parameterConstraints: CloudFormationClientTypes.ParameterConstraints?
        /// <p>The name that is associated with the parameter.</p>
        public let parameterKey: Swift.String?
        /// <p>The type of parameter.</p>
        public let parameterType: Swift.String?

        public init (
            defaultValue: Swift.String? = nil,
            description: Swift.String? = nil,
            noEcho: Swift.Bool? = nil,
            parameterConstraints: CloudFormationClientTypes.ParameterConstraints? = nil,
            parameterKey: Swift.String? = nil,
            parameterType: Swift.String? = nil
        )
        {
            self.defaultValue = defaultValue
            self.description = description
            self.noEcho = noEcho
            self.parameterConstraints = parameterConstraints
            self.parameterKey = parameterKey
            self.parameterType = parameterType
        }
    }

}

extension CloudFormationClientTypes {
    public enum PermissionModels: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case selfManaged
        case serviceManaged
        case sdkUnknown(Swift.String)

        public static var allCases: [PermissionModels] {
            return [
                .selfManaged,
                .serviceManaged,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .selfManaged: return "SELF_MANAGED"
            case .serviceManaged: return "SERVICE_MANAGED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PermissionModels(rawValue: rawValue) ?? PermissionModels.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PhysicalResourceIdContextKeyValuePair(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension CloudFormationClientTypes {
    /// <p>Context information that enables AWS CloudFormation to uniquely identify a resource. AWS CloudFormation uses
    ///          context key-value pairs in cases where a resource's logical and physical IDs are not enough
    ///          to uniquely identify that resource. Each context key-value pair specifies a resource that
    ///          contains the targeted resource.</p>
    public struct PhysicalResourceIdContextKeyValuePair: Swift.Equatable {
        /// <p>The resource context key.</p>
        public let key: Swift.String?
        /// <p>The resource context value.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension CloudFormationClientTypes.PropertyDifference: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actualValue = "ActualValue"
        case differenceType = "DifferenceType"
        case expectedValue = "ExpectedValue"
        case propertyPath = "PropertyPath"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actualValue = actualValue {
            try container.encode(actualValue, forKey: ClientRuntime.Key("ActualValue"))
        }
        if let differenceType = differenceType {
            try container.encode(differenceType, forKey: ClientRuntime.Key("DifferenceType"))
        }
        if let expectedValue = expectedValue {
            try container.encode(expectedValue, forKey: ClientRuntime.Key("ExpectedValue"))
        }
        if let propertyPath = propertyPath {
            try container.encode(propertyPath, forKey: ClientRuntime.Key("PropertyPath"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertyPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .propertyPath)
        propertyPath = propertyPathDecoded
        let expectedValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedValue)
        expectedValue = expectedValueDecoded
        let actualValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actualValue)
        actualValue = actualValueDecoded
        let differenceTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DifferenceType.self, forKey: .differenceType)
        differenceType = differenceTypeDecoded
    }
}

extension CloudFormationClientTypes.PropertyDifference: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PropertyDifference(actualValue: \(Swift.String(describing: actualValue)), differenceType: \(Swift.String(describing: differenceType)), expectedValue: \(Swift.String(describing: expectedValue)), propertyPath: \(Swift.String(describing: propertyPath)))"}
}

extension CloudFormationClientTypes {
    /// <p>Information about a resource property whose actual value differs from its expected
    ///          value, as defined in the stack template and any values specified as template parameters.
    ///          These will be present only for resources whose <code>StackResourceDriftStatus</code> is
    ///             <code>MODIFIED</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting
    ///             Unregulated Configuration Changes to Stacks and Resources</a>.</p>
    public struct PropertyDifference: Swift.Equatable {
        /// <p>The actual property value of the resource property.</p>
        public let actualValue: Swift.String?
        /// <p>The type of property difference.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ADD</code>: A value has been added to a resource property that is an
        ///                array or list data type.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>REMOVE</code>: The property has been removed from the current resource
        ///                configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOT_EQUAL</code>: The current property value differs from its expected
        ///                value (as defined in the stack template and any values specified as template
        ///                parameters).</p>
        ///             </li>
        ///          </ul>
        public let differenceType: CloudFormationClientTypes.DifferenceType?
        /// <p>The expected property value of the resource property, as defined in the stack
        ///          template and any values specified as template parameters.</p>
        public let expectedValue: Swift.String?
        /// <p>The fully-qualified path to the resource property.</p>
        public let propertyPath: Swift.String?

        public init (
            actualValue: Swift.String? = nil,
            differenceType: CloudFormationClientTypes.DifferenceType? = nil,
            expectedValue: Swift.String? = nil,
            propertyPath: Swift.String? = nil
        )
        {
            self.actualValue = actualValue
            self.differenceType = differenceType
            self.expectedValue = expectedValue
            self.propertyPath = propertyPath
        }
    }

}

extension CloudFormationClientTypes {
    public enum ProvisioningType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fullyMutable
        case immutable
        case nonProvisionable
        case sdkUnknown(Swift.String)

        public static var allCases: [ProvisioningType] {
            return [
                .fullyMutable,
                .immutable,
                .nonProvisionable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fullyMutable: return "FULLY_MUTABLE"
            case .immutable: return "IMMUTABLE"
            case .nonProvisionable: return "NON_PROVISIONABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ProvisioningType(rawValue: rawValue) ?? ProvisioningType.sdkUnknown(rawValue)
        }
    }
}

public struct RecordHandlerProgressInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RecordHandlerProgressInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RecordHandlerProgressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RecordHandlerProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RecordHandlerProgressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RecordHandlerProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RecordHandlerProgressOutputError>
}

extension RecordHandlerProgressInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecordHandlerProgressInput(bearerToken: \(Swift.String(describing: bearerToken)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), currentOperationStatus: \(Swift.String(describing: currentOperationStatus)), errorCode: \(Swift.String(describing: errorCode)), operationStatus: \(Swift.String(describing: operationStatus)), resourceModel: \(Swift.String(describing: resourceModel)), statusMessage: \(Swift.String(describing: statusMessage)))"}
}

extension RecordHandlerProgressInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let bearerToken = bearerToken {
            try container.encode(bearerToken, forKey: ClientRuntime.Key("BearerToken"))
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let currentOperationStatus = currentOperationStatus {
            try container.encode(currentOperationStatus, forKey: ClientRuntime.Key("CurrentOperationStatus"))
        }
        if let errorCode = errorCode {
            try container.encode(errorCode, forKey: ClientRuntime.Key("ErrorCode"))
        }
        if let operationStatus = operationStatus {
            try container.encode(operationStatus, forKey: ClientRuntime.Key("OperationStatus"))
        }
        if let resourceModel = resourceModel {
            try container.encode(resourceModel, forKey: ClientRuntime.Key("ResourceModel"))
        }
        if let statusMessage = statusMessage {
            try container.encode(statusMessage, forKey: ClientRuntime.Key("StatusMessage"))
        }
        try container.encode("RecordHandlerProgress", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct RecordHandlerProgressInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RecordHandlerProgressInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RecordHandlerProgressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RecordHandlerProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RecordHandlerProgressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RecordHandlerProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RecordHandlerProgressOutputError>
}

public struct RecordHandlerProgressInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RecordHandlerProgressInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RecordHandlerProgressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RecordHandlerProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RecordHandlerProgressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RecordHandlerProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RecordHandlerProgressOutputError>
}

public struct RecordHandlerProgressInput: Swift.Equatable {
    /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
    public let bearerToken: Swift.String?
    /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
    public let clientRequestToken: Swift.String?
    /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
    public let currentOperationStatus: CloudFormationClientTypes.OperationStatus?
    /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
    public let errorCode: CloudFormationClientTypes.HandlerErrorCode?
    /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
    public let operationStatus: CloudFormationClientTypes.OperationStatus?
    /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
    public let resourceModel: Swift.String?
    /// <p>Reserved for use by the <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html">CloudFormation CLI</a>.</p>
    public let statusMessage: Swift.String?

    public init (
        bearerToken: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        currentOperationStatus: CloudFormationClientTypes.OperationStatus? = nil,
        errorCode: CloudFormationClientTypes.HandlerErrorCode? = nil,
        operationStatus: CloudFormationClientTypes.OperationStatus? = nil,
        resourceModel: Swift.String? = nil,
        statusMessage: Swift.String? = nil
    )
    {
        self.bearerToken = bearerToken
        self.clientRequestToken = clientRequestToken
        self.currentOperationStatus = currentOperationStatus
        self.errorCode = errorCode
        self.operationStatus = operationStatus
        self.resourceModel = resourceModel
        self.statusMessage = statusMessage
    }
}

extension RecordHandlerProgressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RecordHandlerProgressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidStateTransitionException" : self = .invalidStateTransitionException(try InvalidStateTransitionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationStatusCheckFailedException" : self = .operationStatusCheckFailedException(try OperationStatusCheckFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RecordHandlerProgressOutputError: Swift.Error, Swift.Equatable {
    case invalidStateTransitionException(InvalidStateTransitionException)
    case operationStatusCheckFailedException(OperationStatusCheckFailedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RecordHandlerProgressOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecordHandlerProgressOutputResponse()"}
}

extension RecordHandlerProgressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RecordHandlerProgressOutputResponse: Swift.Equatable {

    public init() {}
}

struct RecordHandlerProgressOutputResponseBody: Swift.Equatable {
}

extension RecordHandlerProgressOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CloudFormationClientTypes {
    public enum RegionConcurrencyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case parallel
        case sequential
        case sdkUnknown(Swift.String)

        public static var allCases: [RegionConcurrencyType] {
            return [
                .parallel,
                .sequential,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .parallel: return "PARALLEL"
            case .sequential: return "SEQUENTIAL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegionConcurrencyType(rawValue: rawValue) ?? RegionConcurrencyType.sdkUnknown(rawValue)
        }
    }
}

public struct RegisterTypeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterTypeOutputError>
}

extension RegisterTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterTypeInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), executionRoleArn: \(Swift.String(describing: executionRoleArn)), loggingConfig: \(Swift.String(describing: loggingConfig)), schemaHandlerPackage: \(Swift.String(describing: schemaHandlerPackage)), type: \(Swift.String(describing: type)), typeName: \(Swift.String(describing: typeName)))"}
}

extension RegisterTypeInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let executionRoleArn = executionRoleArn {
            try container.encode(executionRoleArn, forKey: ClientRuntime.Key("ExecutionRoleArn"))
        }
        if let loggingConfig = loggingConfig {
            try container.encode(loggingConfig, forKey: ClientRuntime.Key("LoggingConfig"))
        }
        if let schemaHandlerPackage = schemaHandlerPackage {
            try container.encode(schemaHandlerPackage, forKey: ClientRuntime.Key("SchemaHandlerPackage"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        try container.encode("RegisterType", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct RegisterTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterTypeOutputError>
}

public struct RegisterTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterTypeOutputError>
}

public struct RegisterTypeInput: Swift.Equatable {
    /// <p>A unique identifier that acts as an idempotency key for this registration request. Specifying a client request token prevents CloudFormation from generating more than one version of an extension from the same registeration request, even if the request is submitted multiple times. </p>
    public let clientRequestToken: Swift.String?
    /// <p>The Amazon Resource Name (ARN) of the IAM role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an
    ///          <i>
    ///                <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM execution
    ///             role</a>
    ///             </i> that includes the necessary permissions to call those
    ///          AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.</p>
    public let executionRoleArn: Swift.String?
    /// <p>Specifies logging configuration information for an extension.</p>
    public let loggingConfig: CloudFormationClientTypes.LoggingConfig?
    /// <p>A url to the S3 bucket containing the extension project package that contains the neccessary files for the extension you want to register.</p>
    ///          <p>For information on generating a schema handler package for the extension you want to register, see <a href="https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-cli-submit.html">submit</a> in the <i>CloudFormation CLI User Guide</i>.</p>
    ///          <note>
    ///             <p>The
    ///          user registering the extension must be able to access the package in the S3 bucket. That is, the user needs to have <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a> permissions
    ///          for the schema handler package. For
    ///          more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html">Actions, Resources, and Condition Keys for Amazon S3</a> in the
    ///          <i>AWS Identity and Access Management User Guide</i>.</p>
    ///          </note>
    public let schemaHandlerPackage: Swift.String?
    /// <p>The kind of extension.</p>
    public let type: CloudFormationClientTypes.RegistryType?
    /// <p>The name of the extension being registered.</p>
    ///
    ///          <p>We recommend that extension names adhere to the following pattern: <i>company_or_organization</i>::<i>service</i>::<i>type</i>.</p>
    ///          <note>
    ///             <p>The following organization namespaces are reserved and cannot be used in your extension names:</p>
    ///             <ul>
    ///                <li>
    ///                   <p>
    ///                      <code>Alexa</code>
    ///                   </p>
    ///                </li>
    ///                <li>
    ///                   <p>
    ///                      <code>AMZN</code>
    ///                   </p>
    ///                </li>
    ///                <li>
    ///                   <p>
    ///                      <code>Amazon</code>
    ///                   </p>
    ///                </li>
    ///                <li>
    ///                   <p>
    ///                      <code>AWS</code>
    ///                   </p>
    ///                </li>
    ///                <li>
    ///                   <p>
    ///                      <code>Custom</code>
    ///                   </p>
    ///                </li>
    ///                <li>
    ///                   <p>
    ///                      <code>Dev</code>
    ///                   </p>
    ///                </li>
    ///             </ul>
    ///          </note>
    public let typeName: Swift.String?

    public init (
        clientRequestToken: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        loggingConfig: CloudFormationClientTypes.LoggingConfig? = nil,
        schemaHandlerPackage: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.executionRoleArn = executionRoleArn
        self.loggingConfig = loggingConfig
        self.schemaHandlerPackage = schemaHandlerPackage
        self.type = type
        self.typeName = typeName
    }
}

extension RegisterTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension RegisterTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterTypeOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterTypeOutputResponse(registrationToken: \(Swift.String(describing: registrationToken)))"}
}

extension RegisterTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RegisterTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.registrationToken = output.registrationToken
        } else {
            self.registrationToken = nil
        }
    }
}

public struct RegisterTypeOutputResponse: Swift.Equatable {
    /// <p>The identifier for this registration request.</p>
    ///          <p>Use this registration token when calling <code>
    ///                <a>DescribeTypeRegistration</a>
    ///             </code>, which returns information about the status and IDs of the extension registration. </p>
    public let registrationToken: Swift.String?

    public init (
        registrationToken: Swift.String? = nil
    )
    {
        self.registrationToken = registrationToken
    }
}

struct RegisterTypeOutputResponseBody: Swift.Equatable {
    public let registrationToken: Swift.String?
}

extension RegisterTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case registrationToken = "RegistrationToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("RegisterTypeResult"))
        let registrationTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .registrationToken)
        registrationToken = registrationTokenDecoded
    }
}

extension CloudFormationClientTypes {
    public enum RegistrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistrationStatus] {
            return [
                .complete,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "COMPLETE"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegistrationStatus(rawValue: rawValue) ?? RegistrationStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum RegistryType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case module
        case resource
        case sdkUnknown(Swift.String)

        public static var allCases: [RegistryType] {
            return [
                .module,
                .resource,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .module: return "MODULE"
            case .resource: return "RESOURCE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegistryType(rawValue: rawValue) ?? RegistryType.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum Replacement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case conditional
        case `false`
        case `true`
        case sdkUnknown(Swift.String)

        public static var allCases: [Replacement] {
            return [
                .conditional,
                .false,
                .true,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .conditional: return "Conditional"
            case .false: return "False"
            case .true: return "True"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Replacement(rawValue: rawValue) ?? Replacement.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum RequiresRecreation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case always
        case conditionally
        case never
        case sdkUnknown(Swift.String)

        public static var allCases: [RequiresRecreation] {
            return [
                .always,
                .conditionally,
                .never,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .always: return "Always"
            case .conditionally: return "Conditionally"
            case .never: return "Never"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RequiresRecreation(rawValue: rawValue) ?? RequiresRecreation.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ResourceAttribute: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationpolicy
        case deletionpolicy
        case metadata
        case properties
        case tags
        case updatepolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceAttribute] {
            return [
                .creationpolicy,
                .deletionpolicy,
                .metadata,
                .properties,
                .tags,
                .updatepolicy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationpolicy: return "CreationPolicy"
            case .deletionpolicy: return "DeletionPolicy"
            case .metadata: return "Metadata"
            case .properties: return "Properties"
            case .tags: return "Tags"
            case .updatepolicy: return "UpdatePolicy"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceAttribute(rawValue: rawValue) ?? ResourceAttribute.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ResourceChange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case changeSetId = "ChangeSetId"
        case details = "Details"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case replacement = "Replacement"
        case resourceType = "ResourceType"
        case scope = "Scope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let changeSetId = changeSetId {
            try container.encode(changeSetId, forKey: ClientRuntime.Key("ChangeSetId"))
        }
        if let details = details {
            var detailsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Details"))
            for (index0, resourcechangedetail0) in details.enumerated() {
                try detailsContainer.encode(resourcechangedetail0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let replacement = replacement {
            try container.encode(replacement, forKey: ClientRuntime.Key("Replacement"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let scope = scope {
            var scopeContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Scope"))
            for (index0, resourceattribute0) in scope.enumerated() {
                try scopeContainer.encode(resourceattribute0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeAction.self, forKey: .action)
        action = actionDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let replacementDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.Replacement.self, forKey: .replacement)
        replacement = replacementDecoded
        if containerValues.contains(.scope) {
            struct KeyVal0{struct member{}}
            let scopeWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .scope)
            if let scopeWrappedContainer = scopeWrappedContainer {
                let scopeContainer = try scopeWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ResourceAttribute].self, forKey: .member)
                var scopeBuffer:[CloudFormationClientTypes.ResourceAttribute]? = nil
                if let scopeContainer = scopeContainer {
                    scopeBuffer = [CloudFormationClientTypes.ResourceAttribute]()
                    for stringContainer0 in scopeContainer {
                        scopeBuffer?.append(stringContainer0)
                    }
                }
                scope = scopeBuffer
            } else {
                scope = []
            }
        } else {
            scope = nil
        }
        if containerValues.contains(.details) {
            struct KeyVal0{struct member{}}
            let detailsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .details)
            if let detailsWrappedContainer = detailsWrappedContainer {
                let detailsContainer = try detailsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.ResourceChangeDetail].self, forKey: .member)
                var detailsBuffer:[CloudFormationClientTypes.ResourceChangeDetail]? = nil
                if let detailsContainer = detailsContainer {
                    detailsBuffer = [CloudFormationClientTypes.ResourceChangeDetail]()
                    for structureContainer0 in detailsContainer {
                        detailsBuffer?.append(structureContainer0)
                    }
                }
                details = detailsBuffer
            } else {
                details = []
            }
        } else {
            details = nil
        }
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}

extension CloudFormationClientTypes.ResourceChange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceChange(action: \(Swift.String(describing: action)), changeSetId: \(Swift.String(describing: changeSetId)), details: \(Swift.String(describing: details)), logicalResourceId: \(Swift.String(describing: logicalResourceId)), moduleInfo: \(Swift.String(describing: moduleInfo)), physicalResourceId: \(Swift.String(describing: physicalResourceId)), replacement: \(Swift.String(describing: replacement)), resourceType: \(Swift.String(describing: resourceType)), scope: \(Swift.String(describing: scope)))"}
}

extension CloudFormationClientTypes {
    /// <p>The <code>ResourceChange</code> structure describes the resource and the action that
    ///          AWS CloudFormation will perform on it if you execute this change set.</p>
    public struct ResourceChange: Swift.Equatable {
        /// <p>The action that AWS CloudFormation takes on the resource, such as <code>Add</code>
        ///          (adds a new resource), <code>Modify</code> (changes a resource), <code>Remove</code>
        ///          (deletes a resource), <code>Import</code> (imports a resource), or <code>Dynamic</code>
        ///          (exact action for the resource cannot be determined).</p>
        public let action: CloudFormationClientTypes.ChangeAction?
        /// <p>The change set ID of the nested change set.</p>
        public let changeSetId: Swift.String?
        /// <p>For the <code>Modify</code> action, a list of <code>ResourceChangeDetail</code>
        ///          structures that describes the changes that AWS CloudFormation will make to the resource.
        ///       </p>
        public let details: [CloudFormationClientTypes.ResourceChangeDetail]?
        /// <p>The resource's logical ID, which is defined in the stack's template.</p>
        public let logicalResourceId: Swift.String?
        /// <p>Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.</p>
        public let moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// <p>The resource's physical ID (resource name). Resources that you are adding don't have
        ///          physical IDs because they haven't been created.</p>
        public let physicalResourceId: Swift.String?
        /// <p>For the <code>Modify</code> action, indicates whether AWS CloudFormation will replace
        ///          the resource by creating a new one and deleting the old one. This value depends on the
        ///          value of the <code>RequiresRecreation</code> property in the
        ///             <code>ResourceTargetDefinition</code> structure. For example, if the
        ///             <code>RequiresRecreation</code> field is <code>Always</code> and the
        ///             <code>Evaluation</code> field is <code>Static</code>, <code>Replacement</code> is
        ///             <code>True</code>. If the <code>RequiresRecreation</code> field is <code>Always</code>
        ///          and the <code>Evaluation</code> field is <code>Dynamic</code>, <code>Replacement</code> is
        ///             <code>Conditionally</code>.</p>
        ///          <p>If you have multiple changes with different <code>RequiresRecreation</code> values,
        ///          the <code>Replacement</code> value depends on the change with the most impact. A
        ///             <code>RequiresRecreation</code> value of <code>Always</code> has the most impact,
        ///          followed by <code>Conditionally</code>, and then <code>Never</code>.</p>
        public let replacement: CloudFormationClientTypes.Replacement?
        /// <p>The type of AWS CloudFormation resource, such as
        ///          <code>AWS::S3::Bucket</code>.</p>
        public let resourceType: Swift.String?
        /// <p>For the <code>Modify</code> action, indicates which resource attribute is triggering
        ///          this update, such as a change in the resource attribute's <code>Metadata</code>,
        ///             <code>Properties</code>, or <code>Tags</code>.</p>
        public let scope: [CloudFormationClientTypes.ResourceAttribute]?

        public init (
            action: CloudFormationClientTypes.ChangeAction? = nil,
            changeSetId: Swift.String? = nil,
            details: [CloudFormationClientTypes.ResourceChangeDetail]? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            replacement: CloudFormationClientTypes.Replacement? = nil,
            resourceType: Swift.String? = nil,
            scope: [CloudFormationClientTypes.ResourceAttribute]? = nil
        )
        {
            self.action = action
            self.changeSetId = changeSetId
            self.details = details
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.replacement = replacement
            self.resourceType = resourceType
            self.scope = scope
        }
    }

}

extension CloudFormationClientTypes.ResourceChangeDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case causingEntity = "CausingEntity"
        case changeSource = "ChangeSource"
        case evaluation = "Evaluation"
        case target = "Target"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let causingEntity = causingEntity {
            try container.encode(causingEntity, forKey: ClientRuntime.Key("CausingEntity"))
        }
        if let changeSource = changeSource {
            try container.encode(changeSource, forKey: ClientRuntime.Key("ChangeSource"))
        }
        if let evaluation = evaluation {
            try container.encode(evaluation, forKey: ClientRuntime.Key("Evaluation"))
        }
        if let target = target {
            try container.encode(target, forKey: ClientRuntime.Key("Target"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceTargetDefinition.self, forKey: .target)
        target = targetDecoded
        let evaluationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.EvaluationType.self, forKey: .evaluation)
        evaluation = evaluationDecoded
        let changeSourceDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ChangeSource.self, forKey: .changeSource)
        changeSource = changeSourceDecoded
        let causingEntityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .causingEntity)
        causingEntity = causingEntityDecoded
    }
}

extension CloudFormationClientTypes.ResourceChangeDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceChangeDetail(causingEntity: \(Swift.String(describing: causingEntity)), changeSource: \(Swift.String(describing: changeSource)), evaluation: \(Swift.String(describing: evaluation)), target: \(Swift.String(describing: target)))"}
}

extension CloudFormationClientTypes {
    /// <p>For a resource with <code>Modify</code> as the action, the
    ///             <code>ResourceChange</code> structure describes the changes AWS CloudFormation will make
    ///          to that resource.</p>
    public struct ResourceChangeDetail: Swift.Equatable {
        /// <p>The identity of the entity that triggered this change. This entity is a member of the
        ///          group that is specified by the <code>ChangeSource</code> field. For example, if you
        ///          modified the value of the <code>KeyPairName</code> parameter, the
        ///             <code>CausingEntity</code> is the name of the parameter
        ///          (<code>KeyPairName</code>).</p>
        ///          <p>If the <code>ChangeSource</code> value is <code>DirectModification</code>, no value
        ///          is given for <code>CausingEntity</code>.</p>
        public let causingEntity: Swift.String?
        /// <p>The group to which the <code>CausingEntity</code> value belongs. There are five
        ///          entity groups:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ResourceReference</code> entities are <code>Ref</code> intrinsic functions that
        ///                refer to resources in the template, such as <code>{ "Ref" : "MyEC2InstanceResource"
        ///                   }</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>ParameterReference</code> entities are <code>Ref</code> intrinsic functions
        ///                that get template parameter values, such as <code>{ "Ref" : "MyPasswordParameter"
        ///                   }</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>ResourceAttribute</code> entities are <code>Fn::GetAtt</code> intrinsic
        ///                functions that get resource attribute values, such as <code>{ "Fn::GetAtt" : [
        ///                   "MyEC2InstanceResource", "PublicDnsName" ] }</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DirectModification</code> entities are changes that are made directly to the
        ///                template.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Automatic</code> entities are <code>AWS::CloudFormation::Stack</code> resource
        ///                types, which are also known as nested stacks. If you made no changes to the
        ///                   <code>AWS::CloudFormation::Stack</code> resource, AWS CloudFormation sets the
        ///                   <code>ChangeSource</code> to <code>Automatic</code> because the nested stack's
        ///                template might have changed. Changes to a nested stack's template aren't visible to
        ///                AWS CloudFormation until you run an update on the parent stack.</p>
        ///             </li>
        ///          </ul>
        public let changeSource: CloudFormationClientTypes.ChangeSource?
        /// <p>Indicates whether AWS CloudFormation can determine the target value, and whether the
        ///          target value will change before you execute a change set.</p>
        ///          <p>For <code>Static</code> evaluations, AWS CloudFormation can determine that the target
        ///          value will change, and its value. For example, if you directly modify the
        ///             <code>InstanceType</code> property of an EC2 instance, AWS CloudFormation knows that
        ///          this property value will change, and its value, so this is a <code>Static</code>
        ///          evaluation.</p>
        ///          <p>For <code>Dynamic</code> evaluations, cannot determine the target value because it
        ///          depends on the result of an intrinsic function, such as a <code>Ref</code> or
        ///             <code>Fn::GetAtt</code> intrinsic function, when the stack is updated. For example, if
        ///          your template includes a reference to a resource that is conditionally recreated, the value
        ///          of the reference (the physical ID of the resource) might change, depending on if the
        ///          resource is recreated. If the resource is recreated, it will have a new physical ID, so all
        ///          references to that resource will also be updated.</p>
        public let evaluation: CloudFormationClientTypes.EvaluationType?
        /// <p>A <code>ResourceTargetDefinition</code> structure that describes the field that AWS
        ///          CloudFormation will change and whether the resource will be recreated.</p>
        public let target: CloudFormationClientTypes.ResourceTargetDefinition?

        public init (
            causingEntity: Swift.String? = nil,
            changeSource: CloudFormationClientTypes.ChangeSource? = nil,
            evaluation: CloudFormationClientTypes.EvaluationType? = nil,
            target: CloudFormationClientTypes.ResourceTargetDefinition? = nil
        )
        {
            self.causingEntity = causingEntity
            self.changeSource = changeSource
            self.evaluation = evaluation
            self.target = target
        }
    }

}

extension CloudFormationClientTypes.ResourceIdentifierSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceIds = "LogicalResourceIds"
        case resourceIdentifiers = "ResourceIdentifiers"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceIds = logicalResourceIds {
            var logicalResourceIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("LogicalResourceIds"))
            for (index0, logicalresourceid0) in logicalResourceIds.enumerated() {
                try logicalResourceIdsContainer.encode(logicalresourceid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourceIdentifiers = resourceIdentifiers {
            var resourceIdentifiersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifiers"))
            for (index0, resourceidentifierpropertykey0) in resourceIdentifiers.enumerated() {
                try resourceIdentifiersContainer.encode(resourceidentifierpropertykey0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        if containerValues.contains(.logicalResourceIds) {
            struct KeyVal0{struct member{}}
            let logicalResourceIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .logicalResourceIds)
            if let logicalResourceIdsWrappedContainer = logicalResourceIdsWrappedContainer {
                let logicalResourceIdsContainer = try logicalResourceIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var logicalResourceIdsBuffer:[Swift.String]? = nil
                if let logicalResourceIdsContainer = logicalResourceIdsContainer {
                    logicalResourceIdsBuffer = [Swift.String]()
                    for stringContainer0 in logicalResourceIdsContainer {
                        logicalResourceIdsBuffer?.append(stringContainer0)
                    }
                }
                logicalResourceIds = logicalResourceIdsBuffer
            } else {
                logicalResourceIds = []
            }
        } else {
            logicalResourceIds = nil
        }
        if containerValues.contains(.resourceIdentifiers) {
            struct KeyVal0{struct member{}}
            let resourceIdentifiersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .resourceIdentifiers)
            if let resourceIdentifiersWrappedContainer = resourceIdentifiersWrappedContainer {
                let resourceIdentifiersContainer = try resourceIdentifiersWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var resourceIdentifiersBuffer:[Swift.String]? = nil
                if let resourceIdentifiersContainer = resourceIdentifiersContainer {
                    resourceIdentifiersBuffer = [Swift.String]()
                    for stringContainer0 in resourceIdentifiersContainer {
                        resourceIdentifiersBuffer?.append(stringContainer0)
                    }
                }
                resourceIdentifiers = resourceIdentifiersBuffer
            } else {
                resourceIdentifiers = []
            }
        } else {
            resourceIdentifiers = nil
        }
    }
}

extension CloudFormationClientTypes.ResourceIdentifierSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceIdentifierSummary(logicalResourceIds: \(Swift.String(describing: logicalResourceIds)), resourceIdentifiers: \(Swift.String(describing: resourceIdentifiers)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension CloudFormationClientTypes {
    /// <p>Describes the target resources of a specific type in your import template (for example,
    ///          all <code>AWS::S3::Bucket</code> resources) and the properties you can provide during the
    ///          import to identify resources of that type.</p>
    public struct ResourceIdentifierSummary: Swift.Equatable {
        /// <p>The logical IDs of the target resources of the specified <code>ResourceType</code>, as
        ///          defined in the import template.</p>
        public let logicalResourceIds: [Swift.String]?
        /// <p>The resource properties you can provide during the import to identify your target
        ///          resources. For example, <code>BucketName</code> is a possible identifier property for
        ///             <code>AWS::S3::Bucket</code> resources.</p>
        public let resourceIdentifiers: [Swift.String]?
        /// <p>The template resource type of the target resources, such as
        ///          <code>AWS::S3::Bucket</code>.</p>
        public let resourceType: Swift.String?

        public init (
            logicalResourceIds: [Swift.String]? = nil,
            resourceIdentifiers: [Swift.String]? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.logicalResourceIds = logicalResourceIds
            self.resourceIdentifiers = resourceIdentifiers
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes {
    public enum ResourceSignalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failure
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceSignalStatus] {
            return [
                .failure,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failure: return "FAILURE"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceSignalStatus(rawValue: rawValue) ?? ResourceSignalStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum ResourceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createFailed
        case createInProgress
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case deleteSkipped
        case importComplete
        case importFailed
        case importInProgress
        case importRollbackComplete
        case importRollbackFailed
        case importRollbackInProgress
        case updateComplete
        case updateFailed
        case updateInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceStatus] {
            return [
                .createComplete,
                .createFailed,
                .createInProgress,
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .deleteSkipped,
                .importComplete,
                .importFailed,
                .importInProgress,
                .importRollbackComplete,
                .importRollbackFailed,
                .importRollbackInProgress,
                .updateComplete,
                .updateFailed,
                .updateInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deleteSkipped: return "DELETE_SKIPPED"
            case .importComplete: return "IMPORT_COMPLETE"
            case .importFailed: return "IMPORT_FAILED"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .importRollbackComplete: return "IMPORT_ROLLBACK_COMPLETE"
            case .importRollbackFailed: return "IMPORT_ROLLBACK_FAILED"
            case .importRollbackInProgress: return "IMPORT_ROLLBACK_IN_PROGRESS"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceStatus(rawValue: rawValue) ?? ResourceStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.ResourceTargetDefinition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attribute = "Attribute"
        case name = "Name"
        case requiresRecreation = "RequiresRecreation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let attribute = attribute {
            try container.encode(attribute, forKey: ClientRuntime.Key("Attribute"))
        }
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let requiresRecreation = requiresRecreation {
            try container.encode(requiresRecreation, forKey: ClientRuntime.Key("RequiresRecreation"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceAttribute.self, forKey: .attribute)
        attribute = attributeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let requiresRecreationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RequiresRecreation.self, forKey: .requiresRecreation)
        requiresRecreation = requiresRecreationDecoded
    }
}

extension CloudFormationClientTypes.ResourceTargetDefinition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceTargetDefinition(attribute: \(Swift.String(describing: attribute)), name: \(Swift.String(describing: name)), requiresRecreation: \(Swift.String(describing: requiresRecreation)))"}
}

extension CloudFormationClientTypes {
    /// <p>The field that AWS CloudFormation will change, such as the name of a resource's
    ///          property, and whether the resource will be recreated.</p>
    public struct ResourceTargetDefinition: Swift.Equatable {
        /// <p>Indicates which resource attribute is triggering this update, such as a change in the
        ///          resource attribute's <code>Metadata</code>, <code>Properties</code>, or
        ///          <code>Tags</code>.</p>
        public let attribute: CloudFormationClientTypes.ResourceAttribute?
        /// <p>If the <code>Attribute</code> value is <code>Properties</code>, the name of the
        ///          property. For all other attributes, the value is null.</p>
        public let name: Swift.String?
        /// <p>If the <code>Attribute</code> value is <code>Properties</code>, indicates whether a
        ///          change to this property causes the resource to be recreated. The value can be
        ///             <code>Never</code>, <code>Always</code>, or <code>Conditionally</code>. To determine the
        ///          conditions for a <code>Conditionally</code> recreation, see the update behavior for that
        ///             <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">property</a> in the AWS CloudFormation User Guide.</p>
        public let requiresRecreation: CloudFormationClientTypes.RequiresRecreation?

        public init (
            attribute: CloudFormationClientTypes.ResourceAttribute? = nil,
            name: Swift.String? = nil,
            requiresRecreation: CloudFormationClientTypes.RequiresRecreation? = nil
        )
        {
            self.attribute = attribute
            self.name = name
            self.requiresRecreation = requiresRecreation
        }
    }

}

extension CloudFormationClientTypes.ResourceToImport: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logicalResourceId = "LogicalResourceId"
        case resourceIdentifier = "ResourceIdentifier"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let resourceIdentifier = resourceIdentifier {
            var resourceIdentifierContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceIdentifier"))
            for (index0, element0) in resourceIdentifier.sorted(by: { $0.key < $1.key }).enumerated() {
                let resourceidentifierpropertykeyKey0 = element0.key
                let resourceidentifierpropertyvalueValue0 = element0.value
                var entryContainer0 = resourceIdentifierContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("key"))
                try keyContainer0.encode(resourceidentifierpropertykeyKey0, forKey: ClientRuntime.Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("value"))
                try valueContainer0.encode(resourceidentifierpropertyvalueValue0, forKey: ClientRuntime.Key(""))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        if containerValues.contains(.resourceIdentifier) {
            struct KeyVal0{struct key{}; struct value{}}
            let resourceIdentifierWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: ClientRuntime.MapEntry<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>.CodingKeys.self, forKey: .resourceIdentifier)
            if let resourceIdentifierWrappedContainer = resourceIdentifierWrappedContainer {
                let resourceIdentifierContainer = try resourceIdentifierWrappedContainer.decodeIfPresent([ClientRuntime.MapKeyValue<Swift.String, Swift.String, KeyVal0.key, KeyVal0.value>].self, forKey: .entry)
                var resourceIdentifierBuffer: [Swift.String:Swift.String]? = nil
                if let resourceIdentifierContainer = resourceIdentifierContainer {
                    resourceIdentifierBuffer = [Swift.String:Swift.String]()
                    for stringContainer0 in resourceIdentifierContainer {
                        resourceIdentifierBuffer?[stringContainer0.key] = stringContainer0.value
                    }
                }
                resourceIdentifier = resourceIdentifierBuffer
            } else {
                resourceIdentifier = [:]
            }
        } else {
            resourceIdentifier = nil
        }
    }
}

extension CloudFormationClientTypes.ResourceToImport: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceToImport(logicalResourceId: \(Swift.String(describing: logicalResourceId)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension CloudFormationClientTypes {
    /// <p>Describes the target resource of an import operation.</p>
    public struct ResourceToImport: Swift.Equatable {
        /// <p>The logical ID of the target resource as specified in the template.</p>
        public let logicalResourceId: Swift.String?
        /// <p>A key-value pair that identifies the target resource. The key is an identifier property
        ///          (for example, <code>BucketName</code> for <code>AWS::S3::Bucket</code> resources) and the
        ///          value is the actual property value (for example, <code>MyS3Bucket</code>).</p>
        public let resourceIdentifier: [Swift.String:Swift.String]?
        /// <p>The type of resource to import into your stack, such as <code>AWS::S3::Bucket</code>. For a list of supported resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html">Resources that support import operations</a> in the AWS CloudFormation User Guide.</p>
        public let resourceType: Swift.String?

        public init (
            logicalResourceId: Swift.String? = nil,
            resourceIdentifier: [Swift.String:Swift.String]? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.logicalResourceId = logicalResourceId
            self.resourceIdentifier = resourceIdentifier
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes.RollbackConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case monitoringTimeInMinutes = "MonitoringTimeInMinutes"
        case rollbackTriggers = "RollbackTriggers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let monitoringTimeInMinutes = monitoringTimeInMinutes {
            try container.encode(monitoringTimeInMinutes, forKey: ClientRuntime.Key("MonitoringTimeInMinutes"))
        }
        if let rollbackTriggers = rollbackTriggers {
            var rollbackTriggersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RollbackTriggers"))
            for (index0, rollbacktrigger0) in rollbackTriggers.enumerated() {
                try rollbackTriggersContainer.encode(rollbacktrigger0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        if containerValues.contains(.rollbackTriggers) {
            struct KeyVal0{struct member{}}
            let rollbackTriggersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .rollbackTriggers)
            if let rollbackTriggersWrappedContainer = rollbackTriggersWrappedContainer {
                let rollbackTriggersContainer = try rollbackTriggersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.RollbackTrigger].self, forKey: .member)
                var rollbackTriggersBuffer:[CloudFormationClientTypes.RollbackTrigger]? = nil
                if let rollbackTriggersContainer = rollbackTriggersContainer {
                    rollbackTriggersBuffer = [CloudFormationClientTypes.RollbackTrigger]()
                    for structureContainer0 in rollbackTriggersContainer {
                        rollbackTriggersBuffer?.append(structureContainer0)
                    }
                }
                rollbackTriggers = rollbackTriggersBuffer
            } else {
                rollbackTriggers = []
            }
        } else {
            rollbackTriggers = nil
        }
        let monitoringTimeInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .monitoringTimeInMinutes)
        monitoringTimeInMinutes = monitoringTimeInMinutesDecoded
    }
}

extension CloudFormationClientTypes.RollbackConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RollbackConfiguration(monitoringTimeInMinutes: \(Swift.String(describing: monitoringTimeInMinutes)), rollbackTriggers: \(Swift.String(describing: rollbackTriggers)))"}
}

extension CloudFormationClientTypes {
    /// <p>Structure containing the rollback triggers for AWS CloudFormation to monitor during stack creation
    ///          and updating operations, and for the specified monitoring period afterwards.</p>
    ///          <p>Rollback triggers enable you to have AWS CloudFormation monitor the state of your application
    ///          during stack creation and updating, and to roll back that operation if the application
    ///          breaches the threshold of any of the alarms you've specified. For more information, see
    ///             <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-rollback-triggers.html">Monitor and Roll Back Stack
    ///             Operations</a>.</p>
    public struct RollbackConfiguration: Swift.Equatable {
        /// <p>The amount of time, in minutes, during which CloudFormation should monitor all the
        ///          rollback triggers after the stack creation or update operation deploys all necessary
        ///          resources.</p>
        ///          <p>The default is 0 minutes.</p>
        ///          <p>If you specify a monitoring period but do not specify any rollback triggers,
        ///          CloudFormation still waits the specified period of time before cleaning up old resources
        ///          after update operations. You can use this monitoring period to perform any manual stack
        ///          validation desired, and manually cancel the stack creation or update (using <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CancelUpdateStack.html">CancelUpdateStack</a>, for example) as necessary.</p>
        ///          <p>If you specify 0 for this parameter, CloudFormation still monitors the specified
        ///          rollback triggers during stack creation and update operations. Then, for update operations,
        ///          it begins disposing of old resources immediately once the operation completes.</p>
        public let monitoringTimeInMinutes: Swift.Int?
        /// <p>The triggers to monitor during stack creation or update actions. </p>
        ///          <p>By default, AWS CloudFormation saves the rollback triggers specified for a stack and applies them
        ///          to any subsequent update operations for the stack, unless you specify otherwise. If you do
        ///          specify rollback triggers for this parameter, those triggers replace any list of triggers
        ///          previously specified for the stack. This means:</p>
        ///          <ul>
        ///             <li>
        ///                <p>To use the rollback triggers previously specified for this stack, if any, don't
        ///                specify this parameter.</p>
        ///             </li>
        ///             <li>
        ///                <p>To specify new or updated rollback triggers, you must specify
        ///                   <i>all</i> the triggers that you want used for this stack, even
        ///                triggers you've specifed before (for example, when creating the stack or during a
        ///                previous stack update). Any triggers that you don't include in the updated list of
        ///                triggers are no longer applied to the stack.</p>
        ///             </li>
        ///             <li>
        ///                <p>To remove all currently specified triggers, specify an empty list for this
        ///                parameter.</p>
        ///             </li>
        ///          </ul>
        ///          <p>If a specified trigger is missing, the entire stack operation fails and is rolled
        ///          back. </p>
        public let rollbackTriggers: [CloudFormationClientTypes.RollbackTrigger]?

        public init (
            monitoringTimeInMinutes: Swift.Int? = nil,
            rollbackTriggers: [CloudFormationClientTypes.RollbackTrigger]? = nil
        )
        {
            self.monitoringTimeInMinutes = monitoringTimeInMinutes
            self.rollbackTriggers = rollbackTriggers
        }
    }

}

extension CloudFormationClientTypes.RollbackTrigger: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension CloudFormationClientTypes.RollbackTrigger: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RollbackTrigger(arn: \(Swift.String(describing: arn)), type: \(Swift.String(describing: type)))"}
}

extension CloudFormationClientTypes {
    /// <p>A rollback trigger AWS CloudFormation monitors during creation and updating of stacks. If any of
    ///          the alarms you specify goes to ALARM state during the stack operation or within the
    ///          specified monitoring period afterwards, CloudFormation rolls back the entire stack
    ///          operation. </p>
    public struct RollbackTrigger: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the rollback trigger.</p>
        ///          <p>If a specified trigger is missing, the entire stack operation fails and is rolled
        ///          back. </p>
        public let arn: Swift.String?
        /// <p>The resource type of the rollback trigger. Currently, <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html">AWS::CloudWatch::Alarm</a> is the only supported resource type.</p>
        public let type: Swift.String?

        public init (
            arn: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.arn = arn
            self.type = type
        }
    }

}

public struct SetStackPolicyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetStackPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetStackPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetStackPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetStackPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetStackPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetStackPolicyOutputError>
}

extension SetStackPolicyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetStackPolicyInput(stackName: \(Swift.String(describing: stackName)), stackPolicyBody: \(Swift.String(describing: stackPolicyBody)), stackPolicyURL: \(Swift.String(describing: stackPolicyURL)))"}
}

extension SetStackPolicyInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackPolicyBody = stackPolicyBody {
            try container.encode(stackPolicyBody, forKey: ClientRuntime.Key("StackPolicyBody"))
        }
        if let stackPolicyURL = stackPolicyURL {
            try container.encode(stackPolicyURL, forKey: ClientRuntime.Key("StackPolicyURL"))
        }
        try container.encode("SetStackPolicy", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetStackPolicyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetStackPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetStackPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetStackPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetStackPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetStackPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetStackPolicyOutputError>
}

public struct SetStackPolicyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetStackPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetStackPolicyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetStackPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetStackPolicyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetStackPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetStackPolicyOutputError>
}

/// <p>The input for the <a>SetStackPolicy</a> action.</p>
public struct SetStackPolicyInput: Swift.Equatable {
    /// <p>The name or unique stack ID that you want to associate a policy with.</p>
    public let stackName: Swift.String?
    /// <p>Structure containing the stack policy body. For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html"> Prevent Updates
    ///             to Stack Resources</a> in the AWS CloudFormation User Guide. You can specify either
    ///          the <code>StackPolicyBody</code> or the <code>StackPolicyURL</code> parameter, but not
    ///          both.</p>
    public let stackPolicyBody: Swift.String?
    /// <p>Location of a file containing the stack policy. The URL must point to a policy
    ///          (maximum size: 16 KB) located in an S3 bucket in the same
    ///          Region as the stack. You can specify either the <code>StackPolicyBody</code> or the
    ///             <code>StackPolicyURL</code> parameter, but not both.</p>
    public let stackPolicyURL: Swift.String?

    public init (
        stackName: Swift.String? = nil,
        stackPolicyBody: Swift.String? = nil,
        stackPolicyURL: Swift.String? = nil
    )
    {
        self.stackName = stackName
        self.stackPolicyBody = stackPolicyBody
        self.stackPolicyURL = stackPolicyURL
    }
}

extension SetStackPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetStackPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetStackPolicyOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SetStackPolicyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetStackPolicyOutputResponse()"}
}

extension SetStackPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetStackPolicyOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetStackPolicyOutputResponseBody: Swift.Equatable {
}

extension SetStackPolicyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetTypeDefaultVersionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetTypeDefaultVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetTypeDefaultVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetTypeDefaultVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetTypeDefaultVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetTypeDefaultVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetTypeDefaultVersionOutputError>
}

extension SetTypeDefaultVersionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetTypeDefaultVersionInput(arn: \(Swift.String(describing: arn)), type: \(Swift.String(describing: type)), typeName: \(Swift.String(describing: typeName)), versionId: \(Swift.String(describing: versionId)))"}
}

extension SetTypeDefaultVersionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
        try container.encode("SetTypeDefaultVersion", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SetTypeDefaultVersionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetTypeDefaultVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetTypeDefaultVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetTypeDefaultVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetTypeDefaultVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetTypeDefaultVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetTypeDefaultVersionOutputError>
}

public struct SetTypeDefaultVersionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetTypeDefaultVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetTypeDefaultVersionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetTypeDefaultVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetTypeDefaultVersionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetTypeDefaultVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetTypeDefaultVersionOutputError>
}

public struct SetTypeDefaultVersionInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the extension for which you want version summary information.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let arn: Swift.String?
    /// <p>The kind of extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let type: CloudFormationClientTypes.RegistryType?
    /// <p>The name of the extension.</p>
    ///          <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
    public let typeName: Swift.String?
    /// <p>The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.</p>
    public let versionId: Swift.String?

    public init (
        arn: Swift.String? = nil,
        type: CloudFormationClientTypes.RegistryType? = nil,
        typeName: Swift.String? = nil,
        versionId: Swift.String? = nil
    )
    {
        self.arn = arn
        self.type = type
        self.typeName = typeName
        self.versionId = versionId
    }
}

extension SetTypeDefaultVersionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SetTypeDefaultVersionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CFNRegistryException" : self = .cFNRegistryException(try CFNRegistryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TypeNotFoundException" : self = .typeNotFoundException(try TypeNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetTypeDefaultVersionOutputError: Swift.Error, Swift.Equatable {
    case cFNRegistryException(CFNRegistryException)
    case typeNotFoundException(TypeNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetTypeDefaultVersionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetTypeDefaultVersionOutputResponse()"}
}

extension SetTypeDefaultVersionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetTypeDefaultVersionOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetTypeDefaultVersionOutputResponseBody: Swift.Equatable {
}

extension SetTypeDefaultVersionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SignalResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SignalResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SignalResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SignalResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SignalResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SignalResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SignalResourceOutputError>
}

extension SignalResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SignalResourceInput(logicalResourceId: \(Swift.String(describing: logicalResourceId)), stackName: \(Swift.String(describing: stackName)), status: \(Swift.String(describing: status)), uniqueId: \(Swift.String(describing: uniqueId)))"}
}

extension SignalResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let uniqueId = uniqueId {
            try container.encode(uniqueId, forKey: ClientRuntime.Key("UniqueId"))
        }
        try container.encode("SignalResource", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct SignalResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SignalResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SignalResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SignalResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SignalResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SignalResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SignalResourceOutputError>
}

public struct SignalResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SignalResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SignalResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SignalResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SignalResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SignalResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SignalResourceOutputError>
}

/// <p>The input for the <a>SignalResource</a> action.</p>
public struct SignalResourceInput: Swift.Equatable {
    /// <p>The logical ID of the resource that you want to signal. The logical ID is the name of
    ///          the resource that given in the template.</p>
    public let logicalResourceId: Swift.String?
    /// <p>The stack name or unique stack ID that includes the resource that you want to
    ///          signal.</p>
    public let stackName: Swift.String?
    /// <p>The status of the signal, which is either success or failure. A failure signal causes
    ///          AWS CloudFormation to immediately fail the stack creation or update.</p>
    public let status: CloudFormationClientTypes.ResourceSignalStatus?
    /// <p>A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling
    ///          groups, specify the instance ID that you are signaling as the unique ID. If you send
    ///          multiple signals to a single resource (such as signaling a wait condition), each signal
    ///          requires a different unique ID.</p>
    public let uniqueId: Swift.String?

    public init (
        logicalResourceId: Swift.String? = nil,
        stackName: Swift.String? = nil,
        status: CloudFormationClientTypes.ResourceSignalStatus? = nil,
        uniqueId: Swift.String? = nil
    )
    {
        self.logicalResourceId = logicalResourceId
        self.stackName = stackName
        self.status = status
        self.uniqueId = uniqueId
    }
}

extension SignalResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension SignalResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SignalResourceOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension SignalResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SignalResourceOutputResponse()"}
}

extension SignalResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SignalResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct SignalResourceOutputResponseBody: Swift.Equatable {
}

extension SignalResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CloudFormationClientTypes.Stack: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case changeSetId = "ChangeSetId"
        case creationTime = "CreationTime"
        case deletionTime = "DeletionTime"
        case description = "Description"
        case disableRollback = "DisableRollback"
        case driftInformation = "DriftInformation"
        case enableTerminationProtection = "EnableTerminationProtection"
        case lastUpdatedTime = "LastUpdatedTime"
        case notificationARNs = "NotificationARNs"
        case outputs = "Outputs"
        case parameters = "Parameters"
        case parentId = "ParentId"
        case roleARN = "RoleARN"
        case rollbackConfiguration = "RollbackConfiguration"
        case rootId = "RootId"
        case stackId = "StackId"
        case stackName = "StackName"
        case stackStatus = "StackStatus"
        case stackStatusReason = "StackStatusReason"
        case tags = "Tags"
        case timeoutInMinutes = "TimeoutInMinutes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
            for (index0, capability0) in capabilities.enumerated() {
                try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let changeSetId = changeSetId {
            try container.encode(changeSetId, forKey: ClientRuntime.Key("ChangeSetId"))
        }
        if let creationTime = creationTime {
            try container.encode(ClientRuntime.TimestampWrapper(creationTime, format: .dateTime), forKey: ClientRuntime.Key("creationTime"))
        }
        if let deletionTime = deletionTime {
            try container.encode(ClientRuntime.TimestampWrapper(deletionTime, format: .dateTime), forKey: ClientRuntime.Key("deletionTime"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let disableRollback = disableRollback {
            try container.encode(disableRollback, forKey: ClientRuntime.Key("DisableRollback"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let enableTerminationProtection = enableTerminationProtection {
            try container.encode(enableTerminationProtection, forKey: ClientRuntime.Key("EnableTerminationProtection"))
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try container.encode(ClientRuntime.TimestampWrapper(lastUpdatedTime, format: .dateTime), forKey: ClientRuntime.Key("lastUpdatedTime"))
        }
        if let notificationARNs = notificationARNs {
            var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
            for (index0, notificationarn0) in notificationARNs.enumerated() {
                try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let outputs = outputs {
            var outputsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Outputs"))
            for (index0, output0) in outputs.enumerated() {
                try outputsContainer.encode(output0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let parentId = parentId {
            try container.encode(parentId, forKey: ClientRuntime.Key("ParentId"))
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let rootId = rootId {
            try container.encode(rootId, forKey: ClientRuntime.Key("RootId"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackStatus = stackStatus {
            try container.encode(stackStatus, forKey: ClientRuntime.Key("StackStatus"))
        }
        if let stackStatusReason = stackStatusReason {
            try container.encode(stackStatusReason, forKey: ClientRuntime.Key("StackStatusReason"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let timeoutInMinutes = timeoutInMinutes {
            try container.encode(timeoutInMinutes, forKey: ClientRuntime.Key("TimeoutInMinutes"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let changeSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .changeSetId)
        changeSetId = changeSetIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        var creationTimeBuffer:ClientRuntime.Date? = nil
        if let creationTimeDecoded = creationTimeDecoded {
            creationTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationTimeDecoded, format: .dateTime)
        }
        creationTime = creationTimeBuffer
        let deletionTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deletionTime)
        var deletionTimeBuffer:ClientRuntime.Date? = nil
        if let deletionTimeDecoded = deletionTimeDecoded {
            deletionTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(deletionTimeDecoded, format: .dateTime)
        }
        deletionTime = deletionTimeBuffer
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedTime)
        var lastUpdatedTimeBuffer:ClientRuntime.Date? = nil
        if let lastUpdatedTimeDecoded = lastUpdatedTimeDecoded {
            lastUpdatedTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdatedTimeDecoded, format: .dateTime)
        }
        lastUpdatedTime = lastUpdatedTimeBuffer
        let rollbackConfigurationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RollbackConfiguration.self, forKey: .rollbackConfiguration)
        rollbackConfiguration = rollbackConfigurationDecoded
        let stackStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackStatus.self, forKey: .stackStatus)
        stackStatus = stackStatusDecoded
        let stackStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackStatusReason)
        stackStatusReason = stackStatusReasonDecoded
        let disableRollbackDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .disableRollback)
        disableRollback = disableRollbackDecoded
        if containerValues.contains(.notificationARNs) {
            struct KeyVal0{struct member{}}
            let notificationARNsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .notificationARNs)
            if let notificationARNsWrappedContainer = notificationARNsWrappedContainer {
                let notificationARNsContainer = try notificationARNsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var notificationARNsBuffer:[Swift.String]? = nil
                if let notificationARNsContainer = notificationARNsContainer {
                    notificationARNsBuffer = [Swift.String]()
                    for stringContainer0 in notificationARNsContainer {
                        notificationARNsBuffer?.append(stringContainer0)
                    }
                }
                notificationARNs = notificationARNsBuffer
            } else {
                notificationARNs = []
            }
        } else {
            notificationARNs = nil
        }
        let timeoutInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timeoutInMinutes)
        timeoutInMinutes = timeoutInMinutesDecoded
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for stringContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(stringContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.outputs) {
            struct KeyVal0{struct member{}}
            let outputsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .outputs)
            if let outputsWrappedContainer = outputsWrappedContainer {
                let outputsContainer = try outputsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Output].self, forKey: .member)
                var outputsBuffer:[CloudFormationClientTypes.Output]? = nil
                if let outputsContainer = outputsContainer {
                    outputsBuffer = [CloudFormationClientTypes.Output]()
                    for structureContainer0 in outputsContainer {
                        outputsBuffer?.append(structureContainer0)
                    }
                }
                outputs = outputsBuffer
            } else {
                outputs = []
            }
        } else {
            outputs = nil
        }
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let enableTerminationProtectionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableTerminationProtection)
        enableTerminationProtection = enableTerminationProtectionDecoded
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let rootIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootId)
        rootId = rootIdDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftInformation.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
    }
}

extension CloudFormationClientTypes.Stack: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Stack(capabilities: \(Swift.String(describing: capabilities)), changeSetId: \(Swift.String(describing: changeSetId)), creationTime: \(Swift.String(describing: creationTime)), deletionTime: \(Swift.String(describing: deletionTime)), description: \(Swift.String(describing: description)), disableRollback: \(Swift.String(describing: disableRollback)), driftInformation: \(Swift.String(describing: driftInformation)), enableTerminationProtection: \(Swift.String(describing: enableTerminationProtection)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), notificationARNs: \(Swift.String(describing: notificationARNs)), outputs: \(Swift.String(describing: outputs)), parameters: \(Swift.String(describing: parameters)), parentId: \(Swift.String(describing: parentId)), roleARN: \(Swift.String(describing: roleARN)), rollbackConfiguration: \(Swift.String(describing: rollbackConfiguration)), rootId: \(Swift.String(describing: rootId)), stackId: \(Swift.String(describing: stackId)), stackName: \(Swift.String(describing: stackName)), stackStatus: \(Swift.String(describing: stackStatus)), stackStatusReason: \(Swift.String(describing: stackStatusReason)), tags: \(Swift.String(describing: tags)), timeoutInMinutes: \(Swift.String(describing: timeoutInMinutes)))"}
}

extension CloudFormationClientTypes {
    /// <p>The Stack data type.</p>
    public struct Stack: Swift.Equatable {
        /// <p>The capabilities allowed in the stack.</p>
        public let capabilities: [CloudFormationClientTypes.Capability]?
        /// <p>The unique ID of the change set.</p>
        public let changeSetId: Swift.String?
        /// <p>The time at which the stack was created.</p>
        public let creationTime: ClientRuntime.Date?
        /// <p>The time the stack was deleted.</p>
        public let deletionTime: ClientRuntime.Date?
        /// <p>A user-defined description associated with the stack.</p>
        public let description: Swift.String?
        /// <p>Boolean to enable or disable rollback on stack creation failures:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>true</code>: disable rollback</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>false</code>: enable rollback</p>
        ///             </li>
        ///          </ul>
        public let disableRollback: Swift.Bool?
        /// <p>Information on whether a stack's actual configuration differs, or has
        ///             <i>drifted</i>, from it's expected configuration, as defined in the stack
        ///          template and any values specified as template parameters. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting Unregulated Configuration
        ///             Changes to Stacks and Resources</a>.</p>
        public let driftInformation: CloudFormationClientTypes.StackDriftInformation?
        /// <p>Whether termination protection is enabled for the stack.</p>
        ///          <p> For <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">nested stacks</a>,
        ///          termination protection is set on the root stack and cannot be changed directly on the
        ///          nested stack. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html">Protecting a Stack From Being
        ///             Deleted</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        public let enableTerminationProtection: Swift.Bool?
        /// <p>The time the stack was last updated. This field will only be returned if the stack
        ///          has been updated at least once.</p>
        public let lastUpdatedTime: ClientRuntime.Date?
        /// <p>SNS topic ARNs to which stack related events are published.</p>
        public let notificationARNs: [Swift.String]?
        /// <p>A list of output structures.</p>
        public let outputs: [CloudFormationClientTypes.Output]?
        /// <p>A list of <code>Parameter</code> structures.</p>
        public let parameters: [CloudFormationClientTypes.Parameter]?
        /// <p>For nested stacks--stacks created as resources for another stack--the stack ID of the
        ///          direct parent of this stack. For the first level of nested stacks, the root stack is also
        ///          the parent stack.</p>
        ///          <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">Working with Nested Stacks</a> in the
        ///          <i>AWS CloudFormation User Guide</i>.</p>
        public let parentId: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
        ///          that is associated with the stack. During a stack operation, AWS CloudFormation uses this
        ///          role's credentials to make calls on your behalf.</p>
        public let roleARN: Swift.String?
        /// <p>The rollback triggers for AWS CloudFormation to monitor during stack creation and
        ///          updating operations, and for the specified monitoring period afterwards.</p>
        public let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
        /// <p>For nested stacks--stacks created as resources for another stack--the stack ID of the
        ///          top-level stack to which the nested stack ultimately belongs.</p>
        ///          <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">Working with Nested Stacks</a> in the
        ///          <i>AWS CloudFormation User Guide</i>.</p>
        public let rootId: Swift.String?
        /// <p>Unique identifier of the stack.</p>
        public let stackId: Swift.String?
        /// <p>The name associated with the stack.</p>
        public let stackName: Swift.String?
        /// <p>Current status of the stack.</p>
        public let stackStatus: CloudFormationClientTypes.StackStatus?
        /// <p>Success/failure message associated with the stack status.</p>
        public let stackStatusReason: Swift.String?
        /// <p>A list of <code>Tag</code>s that specify information about the stack.</p>
        public let tags: [CloudFormationClientTypes.Tag]?
        /// <p>The amount of time within which stack creation should complete.</p>
        public let timeoutInMinutes: Swift.Int?

        public init (
            capabilities: [CloudFormationClientTypes.Capability]? = nil,
            changeSetId: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            deletionTime: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            disableRollback: Swift.Bool? = nil,
            driftInformation: CloudFormationClientTypes.StackDriftInformation? = nil,
            enableTerminationProtection: Swift.Bool? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            notificationARNs: [Swift.String]? = nil,
            outputs: [CloudFormationClientTypes.Output]? = nil,
            parameters: [CloudFormationClientTypes.Parameter]? = nil,
            parentId: Swift.String? = nil,
            roleARN: Swift.String? = nil,
            rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
            rootId: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            stackStatus: CloudFormationClientTypes.StackStatus? = nil,
            stackStatusReason: Swift.String? = nil,
            tags: [CloudFormationClientTypes.Tag]? = nil,
            timeoutInMinutes: Swift.Int? = nil
        )
        {
            self.capabilities = capabilities
            self.changeSetId = changeSetId
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.description = description
            self.disableRollback = disableRollback
            self.driftInformation = driftInformation
            self.enableTerminationProtection = enableTerminationProtection
            self.lastUpdatedTime = lastUpdatedTime
            self.notificationARNs = notificationARNs
            self.outputs = outputs
            self.parameters = parameters
            self.parentId = parentId
            self.roleARN = roleARN
            self.rollbackConfiguration = rollbackConfiguration
            self.rootId = rootId
            self.stackId = stackId
            self.stackName = stackName
            self.stackStatus = stackStatus
            self.stackStatusReason = stackStatusReason
            self.tags = tags
            self.timeoutInMinutes = timeoutInMinutes
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackDriftDetectionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case detectionComplete
        case detectionFailed
        case detectionInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [StackDriftDetectionStatus] {
            return [
                .detectionComplete,
                .detectionFailed,
                .detectionInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .detectionComplete: return "DETECTION_COMPLETE"
            case .detectionFailed: return "DETECTION_FAILED"
            case .detectionInProgress: return "DETECTION_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackDriftDetectionStatus(rawValue: rawValue) ?? StackDriftDetectionStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackDriftInformation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackDriftStatus = "StackDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastCheckTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastCheckTimestamp"))
        }
        if let stackDriftStatus = stackDriftStatus {
            try container.encode(stackDriftStatus, forKey: ClientRuntime.Key("StackDriftStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .stackDriftStatus)
        stackDriftStatus = stackDriftStatusDecoded
        let lastCheckTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastCheckTimestamp)
        var lastCheckTimestampBuffer:ClientRuntime.Date? = nil
        if let lastCheckTimestampDecoded = lastCheckTimestampDecoded {
            lastCheckTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastCheckTimestampDecoded, format: .dateTime)
        }
        lastCheckTimestamp = lastCheckTimestampBuffer
    }
}

extension CloudFormationClientTypes.StackDriftInformation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackDriftInformation(lastCheckTimestamp: \(Swift.String(describing: lastCheckTimestamp)), stackDriftStatus: \(Swift.String(describing: stackDriftStatus)))"}
}

extension CloudFormationClientTypes {
    /// <p>Contains information about whether the stack's actual configuration differs, or has
    ///             <i>drifted</i>, from its expected configuration, as defined in the stack
    ///          template and any values specified as template parameters. A stack is considered to have
    ///          drifted if one or more of its resources have drifted.</p>
    public struct StackDriftInformation: Swift.Equatable {
        /// <p>Most recent time when a drift detection operation was initiated on the stack, or any
        ///          of its individual resources that support drift detection.</p>
        public let lastCheckTimestamp: ClientRuntime.Date?
        /// <p>Status of the stack's actual configuration compared to its expected template
        ///          configuration. </p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>DRIFTED</code>: The stack differs from its expected template
        ///                configuration. A stack is considered to have drifted if one or more of its resources
        ///                have drifted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOT_CHECKED</code>: AWS CloudFormation has not checked if the stack differs from its
        ///                expected template configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>IN_SYNC</code>: The stack's actual configuration matches its expected
        ///                template configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UNKNOWN</code>: This value is reserved for future use.</p>
        ///             </li>
        ///          </ul>
        public let stackDriftStatus: CloudFormationClientTypes.StackDriftStatus?

        public init (
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackDriftStatus: CloudFormationClientTypes.StackDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackDriftStatus = stackDriftStatus
        }
    }

}

extension CloudFormationClientTypes.StackDriftInformationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackDriftStatus = "StackDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastCheckTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastCheckTimestamp"))
        }
        if let stackDriftStatus = stackDriftStatus {
            try container.encode(stackDriftStatus, forKey: ClientRuntime.Key("StackDriftStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .stackDriftStatus)
        stackDriftStatus = stackDriftStatusDecoded
        let lastCheckTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastCheckTimestamp)
        var lastCheckTimestampBuffer:ClientRuntime.Date? = nil
        if let lastCheckTimestampDecoded = lastCheckTimestampDecoded {
            lastCheckTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastCheckTimestampDecoded, format: .dateTime)
        }
        lastCheckTimestamp = lastCheckTimestampBuffer
    }
}

extension CloudFormationClientTypes.StackDriftInformationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackDriftInformationSummary(lastCheckTimestamp: \(Swift.String(describing: lastCheckTimestamp)), stackDriftStatus: \(Swift.String(describing: stackDriftStatus)))"}
}

extension CloudFormationClientTypes {
    /// <p>Contains information about whether the stack's actual configuration differs, or has
    ///             <i>drifted</i>, from its expected configuration, as defined in the stack
    ///          template and any values specified as template parameters. A stack is considered to have
    ///          drifted if one or more of its resources have drifted.</p>
    public struct StackDriftInformationSummary: Swift.Equatable {
        /// <p>Most recent time when a drift detection operation was initiated on the stack, or any
        ///          of its individual resources that support drift detection.</p>
        public let lastCheckTimestamp: ClientRuntime.Date?
        /// <p>Status of the stack's actual configuration compared to its expected template
        ///          configuration. </p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>DRIFTED</code>: The stack differs from its expected template
        ///                configuration. A stack is considered to have drifted if one or more of its resources
        ///                have drifted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOT_CHECKED</code>: AWS CloudFormation has not checked if the stack differs from its
        ///                expected template configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>IN_SYNC</code>: The stack's actual configuration matches its expected
        ///                template configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UNKNOWN</code>: This value is reserved for future use.</p>
        ///             </li>
        ///          </ul>
        public let stackDriftStatus: CloudFormationClientTypes.StackDriftStatus?

        public init (
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackDriftStatus: CloudFormationClientTypes.StackDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackDriftStatus = stackDriftStatus
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackDriftStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case drifted
        case inSync
        case notChecked
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [StackDriftStatus] {
            return [
                .drifted,
                .inSync,
                .notChecked,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .drifted: return "DRIFTED"
            case .inSync: return "IN_SYNC"
            case .notChecked: return "NOT_CHECKED"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackDriftStatus(rawValue: rawValue) ?? StackDriftStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackEvent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientRequestToken = "ClientRequestToken"
        case eventId = "EventId"
        case logicalResourceId = "LogicalResourceId"
        case physicalResourceId = "PhysicalResourceId"
        case resourceProperties = "ResourceProperties"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackName = "StackName"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let eventId = eventId {
            try container.encode(eventId, forKey: ClientRuntime.Key("EventId"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceProperties = resourceProperties {
            try container.encode(resourceProperties, forKey: ClientRuntime.Key("ResourceProperties"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let timestamp = timestamp {
            try container.encode(ClientRuntime.TimestampWrapper(timestamp, format: .dateTime), forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let resourceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceStatus.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceStatusReason)
        resourceStatusReason = resourceStatusReasonDecoded
        let resourcePropertiesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceProperties)
        resourceProperties = resourcePropertiesDecoded
        let clientRequestTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientRequestToken)
        clientRequestToken = clientRequestTokenDecoded
    }
}

extension CloudFormationClientTypes.StackEvent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackEvent(clientRequestToken: \(Swift.String(describing: clientRequestToken)), eventId: \(Swift.String(describing: eventId)), logicalResourceId: \(Swift.String(describing: logicalResourceId)), physicalResourceId: \(Swift.String(describing: physicalResourceId)), resourceProperties: \(Swift.String(describing: resourceProperties)), resourceStatus: \(Swift.String(describing: resourceStatus)), resourceStatusReason: \(Swift.String(describing: resourceStatusReason)), resourceType: \(Swift.String(describing: resourceType)), stackId: \(Swift.String(describing: stackId)), stackName: \(Swift.String(describing: stackName)), timestamp: \(Swift.String(describing: timestamp)))"}
}

extension CloudFormationClientTypes {
    /// <p>The StackEvent data type.</p>
    public struct StackEvent: Swift.Equatable {
        /// <p>The token passed to the operation that generated this event.</p>
        ///          <p>All events triggered by a given stack operation are assigned the same client request
        ///          token, which you can use to track operations. For example, if you execute a
        ///          <code>CreateStack</code> operation with the token <code>token1</code>, then all the
        ///          <code>StackEvents</code> generated by that operation will have
        ///          <code>ClientRequestToken</code> set as <code>token1</code>.</p>
        ///          <p>In the console, stack operations display the client request token on the Events tab.
        ///          Stack operations that are initiated from the console use the token format
        ///          <i>Console-StackOperation-ID</i>, which helps you easily identify the
        ///          stack operation . For example, if you create a stack using the console, each stack event
        ///          would be assigned the same token in the following format:
        ///          <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>. </p>
        public let clientRequestToken: Swift.String?
        /// <p>The unique ID of this event.</p>
        public let eventId: Swift.String?
        /// <p>The logical name of the resource specified in the template.</p>
        public let logicalResourceId: Swift.String?
        /// <p>The name or unique identifier associated with the physical instance of the
        ///          resource.</p>
        public let physicalResourceId: Swift.String?
        /// <p>BLOB of the properties used to create the resource.</p>
        public let resourceProperties: Swift.String?
        /// <p>Current status of the resource.</p>
        public let resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// <p>Success/failure message associated with the resource.</p>
        public let resourceStatusReason: Swift.String?
        /// <p>Type of resource. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html"> AWS
        ///             Resource Types Reference</a> in the AWS CloudFormation User Guide.)</p>
        public let resourceType: Swift.String?
        /// <p>The unique ID name of the instance of the stack.</p>
        public let stackId: Swift.String?
        /// <p>The name associated with a stack.</p>
        public let stackName: Swift.String?
        /// <p>Time the status was updated.</p>
        public let timestamp: ClientRuntime.Date?

        public init (
            clientRequestToken: Swift.String? = nil,
            eventId: Swift.String? = nil,
            logicalResourceId: Swift.String? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceProperties: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.clientRequestToken = clientRequestToken
            self.eventId = eventId
            self.logicalResourceId = logicalResourceId
            self.physicalResourceId = physicalResourceId
            self.resourceProperties = resourceProperties
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackName = stackName
            self.timestamp = timestamp
        }
    }

}

extension CloudFormationClientTypes.StackInstance: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case driftStatus = "DriftStatus"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case organizationalUnitId = "OrganizationalUnitId"
        case parameterOverrides = "ParameterOverrides"
        case region = "Region"
        case stackId = "StackId"
        case stackInstanceStatus = "StackInstanceStatus"
        case stackSetId = "StackSetId"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastDriftCheckTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastDriftCheckTimestamp"))
        }
        if let organizationalUnitId = organizationalUnitId {
            try container.encode(organizationalUnitId, forKey: ClientRuntime.Key("OrganizationalUnitId"))
        }
        if let parameterOverrides = parameterOverrides {
            var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
            for (index0, parameter0) in parameterOverrides.enumerated() {
                try parameterOverridesContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackInstanceStatus = stackInstanceStatus {
            try container.encode(stackInstanceStatus, forKey: ClientRuntime.Key("StackInstanceStatus"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        if containerValues.contains(.parameterOverrides) {
            struct KeyVal0{struct member{}}
            let parameterOverridesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameterOverrides)
            if let parameterOverridesWrappedContainer = parameterOverridesWrappedContainer {
                let parameterOverridesContainer = try parameterOverridesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parameterOverridesBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parameterOverridesContainer = parameterOverridesContainer {
                    parameterOverridesBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parameterOverridesContainer {
                        parameterOverridesBuffer?.append(structureContainer0)
                    }
                }
                parameterOverrides = parameterOverridesBuffer
            } else {
                parameterOverrides = []
            }
        } else {
            parameterOverrides = nil
        }
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceStatus.self, forKey: .status)
        status = statusDecoded
        let stackInstanceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceComprehensiveStatus.self, forKey: .stackInstanceStatus)
        stackInstanceStatus = stackInstanceStatusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
        let driftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .driftStatus)
        driftStatus = driftStatusDecoded
        let lastDriftCheckTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastDriftCheckTimestamp)
        var lastDriftCheckTimestampBuffer:ClientRuntime.Date? = nil
        if let lastDriftCheckTimestampDecoded = lastDriftCheckTimestampDecoded {
            lastDriftCheckTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastDriftCheckTimestampDecoded, format: .dateTime)
        }
        lastDriftCheckTimestamp = lastDriftCheckTimestampBuffer
    }
}

extension CloudFormationClientTypes.StackInstance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackInstance(account: \(Swift.String(describing: account)), driftStatus: \(Swift.String(describing: driftStatus)), lastDriftCheckTimestamp: \(Swift.String(describing: lastDriftCheckTimestamp)), organizationalUnitId: \(Swift.String(describing: organizationalUnitId)), parameterOverrides: \(Swift.String(describing: parameterOverrides)), region: \(Swift.String(describing: region)), stackId: \(Swift.String(describing: stackId)), stackInstanceStatus: \(Swift.String(describing: stackInstanceStatus)), stackSetId: \(Swift.String(describing: stackSetId)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)))"}
}

extension CloudFormationClientTypes {
    /// <p>An AWS CloudFormation stack, in a specific account and Region, that's part of a stack
    ///          set operation. A stack instance is a reference to an attempted or actual stack in a given
    ///          account within a given Region. A stack instance can exist without a stack—for example, if
    ///          the stack couldn't be created for some reason. A stack instance is associated with only one
    ///          stack set. Each stack instance contains the ID of its associated stack set, as well as the
    ///          ID of the actual stack and the stack status.</p>
    public struct StackInstance: Swift.Equatable {
        /// <p>[Self-managed permissions] The name of the AWS account that the stack instance is associated with.</p>
        public let account: Swift.String?
        /// <p>Status of the stack instance's actual configuration compared to the expected template
        ///          and parameter configuration of the stack set to which it belongs. </p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>DRIFTED</code>: The stack differs from the expected template and parameter
        ///                configuration of the stack set to which it belongs. A stack instance is considered to
        ///                have drifted if one or more of the resources in the associated stack have
        ///                drifted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOT_CHECKED</code>: AWS CloudFormation has not checked if the stack instance differs from
        ///                its expected stack set configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>IN_SYNC</code>: The stack instance's actual configuration matches its
        ///                expected stack set configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UNKNOWN</code>: This value is reserved for future use.</p>
        ///             </li>
        ///          </ul>
        public let driftStatus: CloudFormationClientTypes.StackDriftStatus?
        /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack
        ///          instance. This value will be <code>NULL</code> for any stack instance on which drift
        ///          detection has not yet been performed.</p>
        public let lastDriftCheckTimestamp: ClientRuntime.Date?
        /// <p>[Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html">DeploymentTargets</a>.</p>
        public let organizationalUnitId: Swift.String?
        /// <p>A list of parameters from the stack set template whose values have been overridden in
        ///          this stack instance.</p>
        public let parameterOverrides: [CloudFormationClientTypes.Parameter]?
        /// <p>The name of the AWS Region that the stack instance is associated with.</p>
        public let region: Swift.String?
        /// <p>The ID of the stack instance.</p>
        public let stackId: Swift.String?
        /// <p>The detailed status of the stack instance.</p>
        public let stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus?
        /// <p>The name or unique ID of the stack set that the stack instance is associated
        ///          with.</p>
        public let stackSetId: Swift.String?
        /// <p>The status of the stack instance, in terms of its synchronization with its associated
        ///          stack set.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>INOPERABLE</code>: A <code>DeleteStackInstances</code> operation has
        ///                failed and left the stack in an unstable state. Stacks in this state are excluded
        ///                from further <code>UpdateStackSet</code> operations. You might need to perform a
        ///                   <code>DeleteStackInstances</code> operation, with <code>RetainStacks</code> set to
        ///                   <code>true</code>, to delete the stack instance, and then delete the stack
        ///                manually.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>OUTDATED</code>: The stack isn't currently up to date with the stack set
        ///                because:</p>
        ///                <ul>
        ///                   <li>
        ///                      <p>The associated stack failed during a <code>CreateStackSet</code> or
        ///                         <code>UpdateStackSet</code> operation. </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>The stack was part of a <code>CreateStackSet</code> or
        ///                         <code>UpdateStackSet</code> operation that failed or was stopped before the
        ///                      stack was created or updated. </p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>CURRENT</code>: The stack is currently up to date with the stack
        ///                set.</p>
        ///             </li>
        ///          </ul>
        public let status: CloudFormationClientTypes.StackInstanceStatus?
        /// <p>The explanation for the specific status code that is assigned to this stack
        ///          instance.</p>
        public let statusReason: Swift.String?

        public init (
            account: Swift.String? = nil,
            driftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            organizationalUnitId: Swift.String? = nil,
            parameterOverrides: [CloudFormationClientTypes.Parameter]? = nil,
            region: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus? = nil,
            stackSetId: Swift.String? = nil,
            status: CloudFormationClientTypes.StackInstanceStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.account = account
            self.driftStatus = driftStatus
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.organizationalUnitId = organizationalUnitId
            self.parameterOverrides = parameterOverrides
            self.region = region
            self.stackId = stackId
            self.stackInstanceStatus = stackInstanceStatus
            self.stackSetId = stackSetId
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes.StackInstanceComprehensiveStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detailedStatus = "DetailedStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let detailedStatus = detailedStatus {
            try container.encode(detailedStatus, forKey: ClientRuntime.Key("DetailedStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailedStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceDetailedStatus.self, forKey: .detailedStatus)
        detailedStatus = detailedStatusDecoded
    }
}

extension CloudFormationClientTypes.StackInstanceComprehensiveStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackInstanceComprehensiveStatus(detailedStatus: \(Swift.String(describing: detailedStatus)))"}
}

extension CloudFormationClientTypes {
    /// <p>The detailed status of the stack instance.</p>
    public struct StackInstanceComprehensiveStatus: Swift.Equatable {
        /// <ul>
        ///             <li>
        ///                <p>
        ///                   <code>CANCELLED</code>: The operation in the specified account and Region has been cancelled. This is either because a user has stopped the stack set operation, or because the failure tolerance of the stack set operation has been exceeded.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>FAILED</code>: The operation in the specified account and Region failed. If
        ///                the stack set operation fails in enough accounts within a Region, the failure
        ///                tolerance for the stack set operation as a whole might be exceeded.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>INOPERABLE</code>: A <code>DeleteStackInstances</code> operation has failed and left the stack in an unstable state. Stacks in this state are excluded from further <code>UpdateStackSet</code> operations. You might need to perform a <code>DeleteStackInstances</code> operation, with <code>RetainStacks</code> set to <code>true</code>, to delete the stack instance, and then delete the stack manually.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>PENDING</code>: The operation in the specified account and Region has yet to start.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>RUNNING</code>: The operation in the specified account and Region is currently in progress.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SUCCEEDED</code>: The operation in the specified account and Region completed successfully.</p>
        ///             </li>
        ///          </ul>
        public let detailedStatus: CloudFormationClientTypes.StackInstanceDetailedStatus?

        public init (
            detailedStatus: CloudFormationClientTypes.StackInstanceDetailedStatus? = nil
        )
        {
            self.detailedStatus = detailedStatus
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackInstanceDetailedStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case inoperable
        case pending
        case running
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StackInstanceDetailedStatus] {
            return [
                .cancelled,
                .failed,
                .inoperable,
                .pending,
                .running,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .inoperable: return "INOPERABLE"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackInstanceDetailedStatus(rawValue: rawValue) ?? StackInstanceDetailedStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackInstanceFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let name = name {
            try container.encode(name, forKey: ClientRuntime.Key("Name"))
        }
        if let values = values {
            try container.encode(values, forKey: ClientRuntime.Key("Values"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .values)
        values = valuesDecoded
    }
}

extension CloudFormationClientTypes.StackInstanceFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackInstanceFilter(name: \(Swift.String(describing: name)), values: \(Swift.String(describing: values)))"}
}

extension CloudFormationClientTypes {
    /// <p>The status that stack instances are filtered by.</p>
    public struct StackInstanceFilter: Swift.Equatable {
        /// <p>The type of filter to apply.</p>
        public let name: CloudFormationClientTypes.StackInstanceFilterName?
        /// <p>The status to filter by.</p>
        public let values: Swift.String?

        public init (
            name: CloudFormationClientTypes.StackInstanceFilterName? = nil,
            values: Swift.String? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackInstanceFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case detailedStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [StackInstanceFilterName] {
            return [
                .detailedStatus,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .detailedStatus: return "DETAILED_STATUS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackInstanceFilterName(rawValue: rawValue) ?? StackInstanceFilterName.sdkUnknown(rawValue)
        }
    }
}

extension StackInstanceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackInstanceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension StackInstanceNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<StackInstanceNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified stack instance doesn't exist.</p>
public struct StackInstanceNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StackInstanceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension StackInstanceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes {
    public enum StackInstanceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case current
        case inoperable
        case outdated
        case sdkUnknown(Swift.String)

        public static var allCases: [StackInstanceStatus] {
            return [
                .current,
                .inoperable,
                .outdated,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .current: return "CURRENT"
            case .inoperable: return "INOPERABLE"
            case .outdated: return "OUTDATED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackInstanceStatus(rawValue: rawValue) ?? StackInstanceStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackInstanceSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case driftStatus = "DriftStatus"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case organizationalUnitId = "OrganizationalUnitId"
        case region = "Region"
        case stackId = "StackId"
        case stackInstanceStatus = "StackInstanceStatus"
        case stackSetId = "StackSetId"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastDriftCheckTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastDriftCheckTimestamp"))
        }
        if let organizationalUnitId = organizationalUnitId {
            try container.encode(organizationalUnitId, forKey: ClientRuntime.Key("OrganizationalUnitId"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackInstanceStatus = stackInstanceStatus {
            try container.encode(stackInstanceStatus, forKey: ClientRuntime.Key("StackInstanceStatus"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let stackInstanceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackInstanceComprehensiveStatus.self, forKey: .stackInstanceStatus)
        stackInstanceStatus = stackInstanceStatusDecoded
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
        let driftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .driftStatus)
        driftStatus = driftStatusDecoded
        let lastDriftCheckTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastDriftCheckTimestamp)
        var lastDriftCheckTimestampBuffer:ClientRuntime.Date? = nil
        if let lastDriftCheckTimestampDecoded = lastDriftCheckTimestampDecoded {
            lastDriftCheckTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastDriftCheckTimestampDecoded, format: .dateTime)
        }
        lastDriftCheckTimestamp = lastDriftCheckTimestampBuffer
    }
}

extension CloudFormationClientTypes.StackInstanceSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackInstanceSummary(account: \(Swift.String(describing: account)), driftStatus: \(Swift.String(describing: driftStatus)), lastDriftCheckTimestamp: \(Swift.String(describing: lastDriftCheckTimestamp)), organizationalUnitId: \(Swift.String(describing: organizationalUnitId)), region: \(Swift.String(describing: region)), stackId: \(Swift.String(describing: stackId)), stackInstanceStatus: \(Swift.String(describing: stackInstanceStatus)), stackSetId: \(Swift.String(describing: stackSetId)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)))"}
}

extension CloudFormationClientTypes {
    /// <p>The structure that contains summary information about a stack instance.</p>
    public struct StackInstanceSummary: Swift.Equatable {
        /// <p>[Self-managed permissions] The name of the AWS account that the stack instance is associated with.</p>
        public let account: Swift.String?
        /// <p>Status of the stack instance's actual configuration compared to the expected template
        ///          and parameter configuration of the stack set to which it belongs. </p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>DRIFTED</code>: The stack differs from the expected template and parameter
        ///                configuration of the stack set to which it belongs. A stack instance is considered to
        ///                have drifted if one or more of the resources in the associated stack have
        ///                drifted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOT_CHECKED</code>: AWS CloudFormation has not checked if the stack instance differs from
        ///                its expected stack set configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>IN_SYNC</code>: The stack instance's actual configuration matches its
        ///                expected stack set configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UNKNOWN</code>: This value is reserved for future use.</p>
        ///             </li>
        ///          </ul>
        public let driftStatus: CloudFormationClientTypes.StackDriftStatus?
        /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack
        ///          instance. This value will be <code>NULL</code> for any stack instance on which drift
        ///          detection has not yet been performed.</p>
        public let lastDriftCheckTimestamp: ClientRuntime.Date?
        /// <p>[Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html">DeploymentTargets</a>.</p>
        public let organizationalUnitId: Swift.String?
        /// <p>The name of the AWS Region that the stack instance is associated with.</p>
        public let region: Swift.String?
        /// <p>The ID of the stack instance.</p>
        public let stackId: Swift.String?
        /// <p>The detailed status of the stack instance.</p>
        public let stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus?
        /// <p>The name or unique ID of the stack set that the stack instance is associated
        ///          with.</p>
        public let stackSetId: Swift.String?
        /// <p>The status of the stack instance, in terms of its synchronization with its associated
        ///          stack set.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>INOPERABLE</code>: A <code>DeleteStackInstances</code> operation has
        ///                failed and left the stack in an unstable state. Stacks in this state are excluded
        ///                from further <code>UpdateStackSet</code> operations. You might need to perform a
        ///                   <code>DeleteStackInstances</code> operation, with <code>RetainStacks</code> set to
        ///                   <code>true</code>, to delete the stack instance, and then delete the stack
        ///                manually.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>OUTDATED</code>: The stack isn't currently up to date with the stack set
        ///                because:</p>
        ///                <ul>
        ///                   <li>
        ///                      <p>The associated stack failed during a <code>CreateStackSet</code> or
        ///                         <code>UpdateStackSet</code> operation. </p>
        ///                   </li>
        ///                   <li>
        ///                      <p>The stack was part of a <code>CreateStackSet</code> or
        ///                         <code>UpdateStackSet</code> operation that failed or was stopped before the
        ///                      stack was created or updated. </p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>CURRENT</code>: The stack is currently up to date with the stack
        ///                set.</p>
        ///             </li>
        ///          </ul>
        public let status: CloudFormationClientTypes.StackInstanceStatus?
        /// <p>The explanation for the specific status code assigned to this stack
        ///          instance.</p>
        public let statusReason: Swift.String?

        public init (
            account: Swift.String? = nil,
            driftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            organizationalUnitId: Swift.String? = nil,
            region: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackInstanceStatus: CloudFormationClientTypes.StackInstanceComprehensiveStatus? = nil,
            stackSetId: Swift.String? = nil,
            status: CloudFormationClientTypes.StackInstanceStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.account = account
            self.driftStatus = driftStatus
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.organizationalUnitId = organizationalUnitId
            self.region = region
            self.stackId = stackId
            self.stackInstanceStatus = stackInstanceStatus
            self.stackSetId = stackSetId
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes.StackResource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case driftInformation = "DriftInformation"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackName = "StackName"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let timestamp = timestamp {
            try container.encode(ClientRuntime.TimestampWrapper(timestamp, format: .dateTime), forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let resourceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceStatus.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceStatusReason)
        resourceStatusReason = resourceStatusReasonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftInformation.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}

extension CloudFormationClientTypes.StackResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackResource(description: \(Swift.String(describing: description)), driftInformation: \(Swift.String(describing: driftInformation)), logicalResourceId: \(Swift.String(describing: logicalResourceId)), moduleInfo: \(Swift.String(describing: moduleInfo)), physicalResourceId: \(Swift.String(describing: physicalResourceId)), resourceStatus: \(Swift.String(describing: resourceStatus)), resourceStatusReason: \(Swift.String(describing: resourceStatusReason)), resourceType: \(Swift.String(describing: resourceType)), stackId: \(Swift.String(describing: stackId)), stackName: \(Swift.String(describing: stackName)), timestamp: \(Swift.String(describing: timestamp)))"}
}

extension CloudFormationClientTypes {
    /// <p>The StackResource data type.</p>
    public struct StackResource: Swift.Equatable {
        /// <p>User defined description associated with the resource.</p>
        public let description: Swift.String?
        /// <p>Information about whether the resource's actual configuration differs, or has
        ///             <i>drifted</i>, from its expected configuration, as defined in the stack
        ///          template and any values specified as template parameters. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting Unregulated Configuration
        ///             Changes to Stacks and Resources</a>.</p>
        public let driftInformation: CloudFormationClientTypes.StackResourceDriftInformation?
        /// <p>The logical name of the resource specified in the template.</p>
        public let logicalResourceId: Swift.String?
        /// <p>Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.</p>
        public let moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// <p>The name or unique identifier that corresponds to a physical instance ID of a
        ///          resource supported by AWS CloudFormation.</p>
        public let physicalResourceId: Swift.String?
        /// <p>Current status of the resource.</p>
        public let resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// <p>Success/failure message associated with the resource.</p>
        public let resourceStatusReason: Swift.String?
        /// <p>Type of resource. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html"> AWS
        ///             Resource Types Reference</a> in the AWS CloudFormation User Guide.)</p>
        public let resourceType: Swift.String?
        /// <p>Unique identifier of the stack.</p>
        public let stackId: Swift.String?
        /// <p>The name associated with the stack.</p>
        public let stackName: Swift.String?
        /// <p>Time the status was updated.</p>
        public let timestamp: ClientRuntime.Date?

        public init (
            description: Swift.String? = nil,
            driftInformation: CloudFormationClientTypes.StackResourceDriftInformation? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.description = description
            self.driftInformation = driftInformation
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackName = stackName
            self.timestamp = timestamp
        }
    }

}

extension CloudFormationClientTypes.StackResourceDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case driftInformation = "DriftInformation"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case logicalResourceId = "LogicalResourceId"
        case metadata = "Metadata"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackName = "StackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastUpdatedTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastUpdatedTimestamp"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let metadata = metadata {
            try container.encode(metadata, forKey: ClientRuntime.Key("Metadata"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedTimestamp)
        var lastUpdatedTimestampBuffer:ClientRuntime.Date? = nil
        if let lastUpdatedTimestampDecoded = lastUpdatedTimestampDecoded {
            lastUpdatedTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdatedTimestampDecoded, format: .dateTime)
        }
        lastUpdatedTimestamp = lastUpdatedTimestampBuffer
        let resourceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceStatus.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceStatusReason)
        resourceStatusReason = resourceStatusReasonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let metadataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadata)
        metadata = metadataDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftInformation.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}

extension CloudFormationClientTypes.StackResourceDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackResourceDetail(description: \(Swift.String(describing: description)), driftInformation: \(Swift.String(describing: driftInformation)), lastUpdatedTimestamp: \(Swift.String(describing: lastUpdatedTimestamp)), logicalResourceId: \(Swift.String(describing: logicalResourceId)), metadata: \(Swift.String(describing: metadata)), moduleInfo: \(Swift.String(describing: moduleInfo)), physicalResourceId: \(Swift.String(describing: physicalResourceId)), resourceStatus: \(Swift.String(describing: resourceStatus)), resourceStatusReason: \(Swift.String(describing: resourceStatusReason)), resourceType: \(Swift.String(describing: resourceType)), stackId: \(Swift.String(describing: stackId)), stackName: \(Swift.String(describing: stackName)))"}
}

extension CloudFormationClientTypes {
    /// <p>Contains detailed information about the specified stack resource.</p>
    public struct StackResourceDetail: Swift.Equatable {
        /// <p>User defined description associated with the resource.</p>
        public let description: Swift.String?
        /// <p>Information about whether the resource's actual configuration differs, or has
        ///             <i>drifted</i>, from its expected configuration, as defined in the stack
        ///          template and any values specified as template parameters. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting Unregulated Configuration
        ///             Changes to Stacks and Resources</a>.</p>
        public let driftInformation: CloudFormationClientTypes.StackResourceDriftInformation?
        /// <p>Time the status was updated.</p>
        public let lastUpdatedTimestamp: ClientRuntime.Date?
        /// <p>The logical name of the resource specified in the template.</p>
        public let logicalResourceId: Swift.String?
        /// <p>The content of the <code>Metadata</code> attribute declared for the resource. For
        ///          more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-metadata.html">Metadata
        ///             Attribute</a> in the AWS CloudFormation User Guide.</p>
        public let metadata: Swift.String?
        /// <p>Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.</p>
        public let moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// <p>The name or unique identifier that corresponds to a physical instance ID of a
        ///          resource supported by AWS CloudFormation.</p>
        public let physicalResourceId: Swift.String?
        /// <p>Current status of the resource.</p>
        public let resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// <p>Success/failure message associated with the resource.</p>
        public let resourceStatusReason: Swift.String?
        /// <p>Type of resource. ((For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html"> AWS
        ///             Resource Types Reference</a> in the AWS CloudFormation User Guide.)</p>
        public let resourceType: Swift.String?
        /// <p>Unique identifier of the stack.</p>
        public let stackId: Swift.String?
        /// <p>The name associated with the stack.</p>
        public let stackName: Swift.String?

        public init (
            description: Swift.String? = nil,
            driftInformation: CloudFormationClientTypes.StackResourceDriftInformation? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            logicalResourceId: Swift.String? = nil,
            metadata: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil
        )
        {
            self.description = description
            self.driftInformation = driftInformation
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.logicalResourceId = logicalResourceId
            self.metadata = metadata
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackName = stackName
        }
    }

}

extension CloudFormationClientTypes.StackResourceDrift: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actualProperties = "ActualProperties"
        case expectedProperties = "ExpectedProperties"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case physicalResourceIdContext = "PhysicalResourceIdContext"
        case propertyDifferences = "PropertyDifferences"
        case resourceType = "ResourceType"
        case stackId = "StackId"
        case stackResourceDriftStatus = "StackResourceDriftStatus"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let actualProperties = actualProperties {
            try container.encode(actualProperties, forKey: ClientRuntime.Key("ActualProperties"))
        }
        if let expectedProperties = expectedProperties {
            try container.encode(expectedProperties, forKey: ClientRuntime.Key("ExpectedProperties"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let physicalResourceIdContext = physicalResourceIdContext {
            var physicalResourceIdContextContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PhysicalResourceIdContext"))
            for (index0, physicalresourceidcontextkeyvaluepair0) in physicalResourceIdContext.enumerated() {
                try physicalResourceIdContextContainer.encode(physicalresourceidcontextkeyvaluepair0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let propertyDifferences = propertyDifferences {
            var propertyDifferencesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("PropertyDifferences"))
            for (index0, propertydifference0) in propertyDifferences.enumerated() {
                try propertyDifferencesContainer.encode(propertydifference0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackResourceDriftStatus = stackResourceDriftStatus {
            try container.encode(stackResourceDriftStatus, forKey: ClientRuntime.Key("StackResourceDriftStatus"))
        }
        if let timestamp = timestamp {
            try container.encode(ClientRuntime.TimestampWrapper(timestamp, format: .dateTime), forKey: ClientRuntime.Key("timestamp"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        if containerValues.contains(.physicalResourceIdContext) {
            struct KeyVal0{struct member{}}
            let physicalResourceIdContextWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .physicalResourceIdContext)
            if let physicalResourceIdContextWrappedContainer = physicalResourceIdContextWrappedContainer {
                let physicalResourceIdContextContainer = try physicalResourceIdContextWrappedContainer.decodeIfPresent([CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair].self, forKey: .member)
                var physicalResourceIdContextBuffer:[CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]? = nil
                if let physicalResourceIdContextContainer = physicalResourceIdContextContainer {
                    physicalResourceIdContextBuffer = [CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]()
                    for structureContainer0 in physicalResourceIdContextContainer {
                        physicalResourceIdContextBuffer?.append(structureContainer0)
                    }
                }
                physicalResourceIdContext = physicalResourceIdContextBuffer
            } else {
                physicalResourceIdContext = []
            }
        } else {
            physicalResourceIdContext = nil
        }
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let expectedPropertiesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedProperties)
        expectedProperties = expectedPropertiesDecoded
        let actualPropertiesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actualProperties)
        actualProperties = actualPropertiesDecoded
        if containerValues.contains(.propertyDifferences) {
            struct KeyVal0{struct member{}}
            let propertyDifferencesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .propertyDifferences)
            if let propertyDifferencesWrappedContainer = propertyDifferencesWrappedContainer {
                let propertyDifferencesContainer = try propertyDifferencesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.PropertyDifference].self, forKey: .member)
                var propertyDifferencesBuffer:[CloudFormationClientTypes.PropertyDifference]? = nil
                if let propertyDifferencesContainer = propertyDifferencesContainer {
                    propertyDifferencesBuffer = [CloudFormationClientTypes.PropertyDifference]()
                    for structureContainer0 in propertyDifferencesContainer {
                        propertyDifferencesBuffer?.append(structureContainer0)
                    }
                }
                propertyDifferences = propertyDifferencesBuffer
            } else {
                propertyDifferences = []
            }
        } else {
            propertyDifferences = nil
        }
        let stackResourceDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftStatus.self, forKey: .stackResourceDriftStatus)
        stackResourceDriftStatus = stackResourceDriftStatusDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestamp)
        var timestampBuffer:ClientRuntime.Date? = nil
        if let timestampDecoded = timestampDecoded {
            timestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timestampDecoded, format: .dateTime)
        }
        timestamp = timestampBuffer
        let moduleInfoDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}

extension CloudFormationClientTypes.StackResourceDrift: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackResourceDrift(actualProperties: \(Swift.String(describing: actualProperties)), expectedProperties: \(Swift.String(describing: expectedProperties)), logicalResourceId: \(Swift.String(describing: logicalResourceId)), moduleInfo: \(Swift.String(describing: moduleInfo)), physicalResourceId: \(Swift.String(describing: physicalResourceId)), physicalResourceIdContext: \(Swift.String(describing: physicalResourceIdContext)), propertyDifferences: \(Swift.String(describing: propertyDifferences)), resourceType: \(Swift.String(describing: resourceType)), stackId: \(Swift.String(describing: stackId)), stackResourceDriftStatus: \(Swift.String(describing: stackResourceDriftStatus)), timestamp: \(Swift.String(describing: timestamp)))"}
}

extension CloudFormationClientTypes {
    /// <p>Contains the drift information for a resource that has been checked for drift. This
    ///          includes actual and expected property values for resources in which AWS CloudFormation has detected
    ///          drift. Only resource properties explicitly defined in the stack template are checked for
    ///          drift. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting
    ///             Unregulated Configuration Changes to Stacks and Resources</a>.</p>
    ///          <p>Resources that do not currently support drift detection cannot be checked. For a list
    ///          of resources that support drift detection, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html">Resources that Support
    ///             Drift Detection</a>.</p>
    ///          <p>Use <a>DetectStackResourceDrift</a> to detect drift on individual
    ///          resources, or <a>DetectStackDrift</a> to detect drift on all resources in a
    ///          given stack that support drift detection.</p>
    public struct StackResourceDrift: Swift.Equatable {
        /// <p>A JSON structure containing the actual property values of the stack
        ///          resource.</p>
        ///          <p>For resources whose <code>StackResourceDriftStatus</code> is <code>DELETED</code>,
        ///          this structure will not be present. </p>
        public let actualProperties: Swift.String?
        /// <p>A JSON structure containing the expected property values of the stack resource, as
        ///          defined in the stack template and any values specified as template parameters. </p>
        ///          <p>For resources whose <code>StackResourceDriftStatus</code> is <code>DELETED</code>,
        ///          this structure will not be present. </p>
        public let expectedProperties: Swift.String?
        /// <p>The logical name of the resource specified in the template.</p>
        public let logicalResourceId: Swift.String?
        /// <p>Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.</p>
        public let moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// <p>The name or unique identifier that corresponds to a physical instance ID of a
        ///          resource supported by AWS CloudFormation. </p>
        public let physicalResourceId: Swift.String?
        /// <p>Context information that enables AWS CloudFormation to uniquely identify a resource. AWS CloudFormation uses
        ///          context key-value pairs in cases where a resource's logical and physical IDs are not enough
        ///          to uniquely identify that resource. Each context key-value pair specifies a unique resource
        ///          that contains the targeted resource.</p>
        public let physicalResourceIdContext: [CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]?
        /// <p>A collection of the resource properties whose actual values differ from their
        ///          expected values. These will be present only for resources whose
        ///             <code>StackResourceDriftStatus</code> is <code>MODIFIED</code>.
        ///          </p>
        public let propertyDifferences: [CloudFormationClientTypes.PropertyDifference]?
        /// <p>The type of the resource.</p>
        public let resourceType: Swift.String?
        /// <p>The ID of the stack.</p>
        public let stackId: Swift.String?
        /// <p>Status of the resource's actual configuration compared to its expected
        ///          configuration</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>DELETED</code>: The resource differs from its expected template
        ///                configuration because the resource has been deleted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>MODIFIED</code>: One or more resource properties differ from their
        ///                expected values (as defined in the stack template and any values specified as
        ///                template parameters).</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>IN_SYNC</code>: The resources's actual configuration matches its expected
        ///                template configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOT_CHECKED</code>: AWS CloudFormation does not currently return this value.</p>
        ///             </li>
        ///          </ul>
        public let stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus?
        /// <p>Time at which AWS CloudFormation performed drift detection on the stack resource.</p>
        public let timestamp: ClientRuntime.Date?

        public init (
            actualProperties: Swift.String? = nil,
            expectedProperties: Swift.String? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            physicalResourceIdContext: [CloudFormationClientTypes.PhysicalResourceIdContextKeyValuePair]? = nil,
            propertyDifferences: [CloudFormationClientTypes.PropertyDifference]? = nil,
            resourceType: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.actualProperties = actualProperties
            self.expectedProperties = expectedProperties
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.physicalResourceIdContext = physicalResourceIdContext
            self.propertyDifferences = propertyDifferences
            self.resourceType = resourceType
            self.stackId = stackId
            self.stackResourceDriftStatus = stackResourceDriftStatus
            self.timestamp = timestamp
        }
    }

}

extension CloudFormationClientTypes.StackResourceDriftInformation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackResourceDriftStatus = "StackResourceDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastCheckTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastCheckTimestamp"))
        }
        if let stackResourceDriftStatus = stackResourceDriftStatus {
            try container.encode(stackResourceDriftStatus, forKey: ClientRuntime.Key("StackResourceDriftStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackResourceDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftStatus.self, forKey: .stackResourceDriftStatus)
        stackResourceDriftStatus = stackResourceDriftStatusDecoded
        let lastCheckTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastCheckTimestamp)
        var lastCheckTimestampBuffer:ClientRuntime.Date? = nil
        if let lastCheckTimestampDecoded = lastCheckTimestampDecoded {
            lastCheckTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastCheckTimestampDecoded, format: .dateTime)
        }
        lastCheckTimestamp = lastCheckTimestampBuffer
    }
}

extension CloudFormationClientTypes.StackResourceDriftInformation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackResourceDriftInformation(lastCheckTimestamp: \(Swift.String(describing: lastCheckTimestamp)), stackResourceDriftStatus: \(Swift.String(describing: stackResourceDriftStatus)))"}
}

extension CloudFormationClientTypes {
    /// <p>Contains information about whether the resource's actual configuration differs, or
    ///          has <i>drifted</i>, from its expected configuration.</p>
    public struct StackResourceDriftInformation: Swift.Equatable {
        /// <p>When AWS CloudFormation last checked if the resource had drifted from its expected
        ///          configuration.</p>
        public let lastCheckTimestamp: ClientRuntime.Date?
        /// <p>Status of the resource's actual configuration compared to its expected
        ///          configuration</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>DELETED</code>: The resource differs from its expected configuration in
        ///                that it has been deleted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>MODIFIED</code>: The resource differs from its expected
        ///                configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOT_CHECKED</code>: AWS CloudFormation has not checked if the resource differs from
        ///                its expected configuration.</p>
        ///                <p>Any resources that do not currently support drift detection have a status of
        ///                   <code>NOT_CHECKED</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html">Resources that Support Drift Detection</a>. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>IN_SYNC</code>: The resources's actual configuration matches its expected
        ///                configuration.</p>
        ///             </li>
        ///          </ul>
        public let stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus?

        public init (
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackResourceDriftStatus = stackResourceDriftStatus
        }
    }

}

extension CloudFormationClientTypes.StackResourceDriftInformationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastCheckTimestamp = "LastCheckTimestamp"
        case stackResourceDriftStatus = "StackResourceDriftStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let lastCheckTimestamp = lastCheckTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastCheckTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastCheckTimestamp"))
        }
        if let stackResourceDriftStatus = stackResourceDriftStatus {
            try container.encode(stackResourceDriftStatus, forKey: ClientRuntime.Key("StackResourceDriftStatus"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackResourceDriftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftStatus.self, forKey: .stackResourceDriftStatus)
        stackResourceDriftStatus = stackResourceDriftStatusDecoded
        let lastCheckTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastCheckTimestamp)
        var lastCheckTimestampBuffer:ClientRuntime.Date? = nil
        if let lastCheckTimestampDecoded = lastCheckTimestampDecoded {
            lastCheckTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastCheckTimestampDecoded, format: .dateTime)
        }
        lastCheckTimestamp = lastCheckTimestampBuffer
    }
}

extension CloudFormationClientTypes.StackResourceDriftInformationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackResourceDriftInformationSummary(lastCheckTimestamp: \(Swift.String(describing: lastCheckTimestamp)), stackResourceDriftStatus: \(Swift.String(describing: stackResourceDriftStatus)))"}
}

extension CloudFormationClientTypes {
    /// <p>Summarizes information about whether the resource's actual configuration differs, or
    ///          has <i>drifted</i>, from its expected configuration.</p>
    public struct StackResourceDriftInformationSummary: Swift.Equatable {
        /// <p>When AWS CloudFormation last checked if the resource had drifted from its expected
        ///          configuration.</p>
        public let lastCheckTimestamp: ClientRuntime.Date?
        /// <p>Status of the resource's actual configuration compared to its expected
        ///          configuration</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>DELETED</code>: The resource differs from its expected configuration in
        ///                that it has been deleted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>MODIFIED</code>: The resource differs from its expected
        ///                configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOT_CHECKED</code>: AWS CloudFormation has not checked if the resource differs from
        ///                its expected configuration.</p>
        ///                <p>Any resources that do not currently support drift detection have a status of
        ///                   <code>NOT_CHECKED</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html">Resources that Support Drift Detection</a>. If you performed an <a>ContinueUpdateRollback</a> operation on a stack, any resources included in
        ///                   <code>ResourcesToSkip</code> will also have a status of <code>NOT_CHECKED</code>.
        ///                For more information on skipping resources during rollback operations, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html">Continue Rolling Back an Update</a> in the AWS CloudFormation User Guide.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>IN_SYNC</code>: The resources's actual configuration matches its expected
        ///                configuration.</p>
        ///             </li>
        ///          </ul>
        public let stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus?

        public init (
            lastCheckTimestamp: ClientRuntime.Date? = nil,
            stackResourceDriftStatus: CloudFormationClientTypes.StackResourceDriftStatus? = nil
        )
        {
            self.lastCheckTimestamp = lastCheckTimestamp
            self.stackResourceDriftStatus = stackResourceDriftStatus
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackResourceDriftStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleted
        case inSync
        case modified
        case notChecked
        case sdkUnknown(Swift.String)

        public static var allCases: [StackResourceDriftStatus] {
            return [
                .deleted,
                .inSync,
                .modified,
                .notChecked,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "DELETED"
            case .inSync: return "IN_SYNC"
            case .modified: return "MODIFIED"
            case .notChecked: return "NOT_CHECKED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackResourceDriftStatus(rawValue: rawValue) ?? StackResourceDriftStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackResourceSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case driftInformation = "DriftInformation"
        case lastUpdatedTimestamp = "LastUpdatedTimestamp"
        case logicalResourceId = "LogicalResourceId"
        case moduleInfo = "ModuleInfo"
        case physicalResourceId = "PhysicalResourceId"
        case resourceStatus = "ResourceStatus"
        case resourceStatusReason = "ResourceStatusReason"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastUpdatedTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastUpdatedTimestamp"))
        }
        if let logicalResourceId = logicalResourceId {
            try container.encode(logicalResourceId, forKey: ClientRuntime.Key("LogicalResourceId"))
        }
        if let moduleInfo = moduleInfo {
            try container.encode(moduleInfo, forKey: ClientRuntime.Key("ModuleInfo"))
        }
        if let physicalResourceId = physicalResourceId {
            try container.encode(physicalResourceId, forKey: ClientRuntime.Key("PhysicalResourceId"))
        }
        if let resourceStatus = resourceStatus {
            try container.encode(resourceStatus, forKey: ClientRuntime.Key("ResourceStatus"))
        }
        if let resourceStatusReason = resourceStatusReason {
            try container.encode(resourceStatusReason, forKey: ClientRuntime.Key("ResourceStatusReason"))
        }
        if let resourceType = resourceType {
            try container.encode(resourceType, forKey: ClientRuntime.Key("ResourceType"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logicalResourceId)
        logicalResourceId = logicalResourceIdDecoded
        let physicalResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .physicalResourceId)
        physicalResourceId = physicalResourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedTimestamp)
        var lastUpdatedTimestampBuffer:ClientRuntime.Date? = nil
        if let lastUpdatedTimestampDecoded = lastUpdatedTimestampDecoded {
            lastUpdatedTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdatedTimestampDecoded, format: .dateTime)
        }
        lastUpdatedTimestamp = lastUpdatedTimestampBuffer
        let resourceStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ResourceStatus.self, forKey: .resourceStatus)
        resourceStatus = resourceStatusDecoded
        let resourceStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceStatusReason)
        resourceStatusReason = resourceStatusReasonDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackResourceDriftInformationSummary.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
        let moduleInfoDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.ModuleInfo.self, forKey: .moduleInfo)
        moduleInfo = moduleInfoDecoded
    }
}

extension CloudFormationClientTypes.StackResourceSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackResourceSummary(driftInformation: \(Swift.String(describing: driftInformation)), lastUpdatedTimestamp: \(Swift.String(describing: lastUpdatedTimestamp)), logicalResourceId: \(Swift.String(describing: logicalResourceId)), moduleInfo: \(Swift.String(describing: moduleInfo)), physicalResourceId: \(Swift.String(describing: physicalResourceId)), resourceStatus: \(Swift.String(describing: resourceStatus)), resourceStatusReason: \(Swift.String(describing: resourceStatusReason)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension CloudFormationClientTypes {
    /// <p>Contains high-level information about the specified stack resource.</p>
    public struct StackResourceSummary: Swift.Equatable {
        /// <p>Information about whether the resource's actual configuration differs, or has
        ///             <i>drifted</i>, from its expected configuration, as defined in the stack
        ///          template and any values specified as template parameters. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting Unregulated Configuration
        ///             Changes to Stacks and Resources</a>.</p>
        public let driftInformation: CloudFormationClientTypes.StackResourceDriftInformationSummary?
        /// <p>Time the status was updated.</p>
        public let lastUpdatedTimestamp: ClientRuntime.Date?
        /// <p>The logical name of the resource specified in the template.</p>
        public let logicalResourceId: Swift.String?
        /// <p>Contains information about the module from which the resource was created, if the resource was created from a module included in the stack template.</p>
        public let moduleInfo: CloudFormationClientTypes.ModuleInfo?
        /// <p>The name or unique identifier that corresponds to a physical instance ID of the
        ///          resource.</p>
        public let physicalResourceId: Swift.String?
        /// <p>Current status of the resource.</p>
        public let resourceStatus: CloudFormationClientTypes.ResourceStatus?
        /// <p>Success/failure message associated with the resource.</p>
        public let resourceStatusReason: Swift.String?
        /// <p>Type of resource. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html"> AWS
        ///             Resource Types Reference</a> in the AWS CloudFormation User Guide.)</p>
        public let resourceType: Swift.String?

        public init (
            driftInformation: CloudFormationClientTypes.StackResourceDriftInformationSummary? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            logicalResourceId: Swift.String? = nil,
            moduleInfo: CloudFormationClientTypes.ModuleInfo? = nil,
            physicalResourceId: Swift.String? = nil,
            resourceStatus: CloudFormationClientTypes.ResourceStatus? = nil,
            resourceStatusReason: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.driftInformation = driftInformation
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.logicalResourceId = logicalResourceId
            self.moduleInfo = moduleInfo
            self.physicalResourceId = physicalResourceId
            self.resourceStatus = resourceStatus
            self.resourceStatusReason = resourceStatusReason
            self.resourceType = resourceType
        }
    }

}

extension CloudFormationClientTypes.StackSet: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrationRoleARN = "AdministrationRoleARN"
        case autoDeployment = "AutoDeployment"
        case capabilities = "Capabilities"
        case description = "Description"
        case executionRoleName = "ExecutionRoleName"
        case organizationalUnitIds = "OrganizationalUnitIds"
        case parameters = "Parameters"
        case permissionModel = "PermissionModel"
        case stackSetARN = "StackSetARN"
        case stackSetDriftDetectionDetails = "StackSetDriftDetectionDetails"
        case stackSetId = "StackSetId"
        case stackSetName = "StackSetName"
        case status = "Status"
        case tags = "Tags"
        case templateBody = "TemplateBody"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let capabilities = capabilities {
            var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
            for (index0, capability0) in capabilities.enumerated() {
                try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let organizationalUnitIds = organizationalUnitIds {
            var organizationalUnitIdsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("OrganizationalUnitIds"))
            for (index0, organizationalunitid0) in organizationalUnitIds.enumerated() {
                try organizationalUnitIdsContainer.encode(organizationalunitid0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let stackSetARN = stackSetARN {
            try container.encode(stackSetARN, forKey: ClientRuntime.Key("StackSetARN"))
        }
        if let stackSetDriftDetectionDetails = stackSetDriftDetectionDetails {
            try container.encode(stackSetDriftDetectionDetails, forKey: ClientRuntime.Key("StackSetDriftDetectionDetails"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetStatus.self, forKey: .status)
        status = statusDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Parameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.Parameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.Parameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for stringContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(stringContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        if containerValues.contains(.tags) {
            struct KeyVal0{struct member{}}
            let tagsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .tags)
            if let tagsWrappedContainer = tagsWrappedContainer {
                let tagsContainer = try tagsWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Tag].self, forKey: .member)
                var tagsBuffer:[CloudFormationClientTypes.Tag]? = nil
                if let tagsContainer = tagsContainer {
                    tagsBuffer = [CloudFormationClientTypes.Tag]()
                    for structureContainer0 in tagsContainer {
                        tagsBuffer?.append(structureContainer0)
                    }
                }
                tags = tagsBuffer
            } else {
                tags = []
            }
        } else {
            tags = nil
        }
        let stackSetARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetARN)
        stackSetARN = stackSetARNDecoded
        let administrationRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .administrationRoleARN)
        administrationRoleARN = administrationRoleARNDecoded
        let executionRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleName)
        executionRoleName = executionRoleNameDecoded
        let stackSetDriftDetectionDetailsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetDriftDetectionDetails.self, forKey: .stackSetDriftDetectionDetails)
        stackSetDriftDetectionDetails = stackSetDriftDetectionDetailsDecoded
        let autoDeploymentDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AutoDeployment.self, forKey: .autoDeployment)
        autoDeployment = autoDeploymentDecoded
        let permissionModelDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.PermissionModels.self, forKey: .permissionModel)
        permissionModel = permissionModelDecoded
        if containerValues.contains(.organizationalUnitIds) {
            struct KeyVal0{struct member{}}
            let organizationalUnitIdsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .organizationalUnitIds)
            if let organizationalUnitIdsWrappedContainer = organizationalUnitIdsWrappedContainer {
                let organizationalUnitIdsContainer = try organizationalUnitIdsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var organizationalUnitIdsBuffer:[Swift.String]? = nil
                if let organizationalUnitIdsContainer = organizationalUnitIdsContainer {
                    organizationalUnitIdsBuffer = [Swift.String]()
                    for stringContainer0 in organizationalUnitIdsContainer {
                        organizationalUnitIdsBuffer?.append(stringContainer0)
                    }
                }
                organizationalUnitIds = organizationalUnitIdsBuffer
            } else {
                organizationalUnitIds = []
            }
        } else {
            organizationalUnitIds = nil
        }
    }
}

extension CloudFormationClientTypes.StackSet: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackSet(administrationRoleARN: \(Swift.String(describing: administrationRoleARN)), autoDeployment: \(Swift.String(describing: autoDeployment)), capabilities: \(Swift.String(describing: capabilities)), description: \(Swift.String(describing: description)), executionRoleName: \(Swift.String(describing: executionRoleName)), organizationalUnitIds: \(Swift.String(describing: organizationalUnitIds)), parameters: \(Swift.String(describing: parameters)), permissionModel: \(Swift.String(describing: permissionModel)), stackSetARN: \(Swift.String(describing: stackSetARN)), stackSetDriftDetectionDetails: \(Swift.String(describing: stackSetDriftDetectionDetails)), stackSetId: \(Swift.String(describing: stackSetId)), stackSetName: \(Swift.String(describing: stackSetName)), status: \(Swift.String(describing: status)), tags: \(Swift.String(describing: tags)), templateBody: \(Swift.String(describing: templateBody)))"}
}

extension CloudFormationClientTypes {
    /// <p>A structure that contains information about a stack set. A stack set enables you to
    ///          provision stacks into AWS accounts and across Regions by using a single CloudFormation
    ///          template. In the stack set, you specify the template to use, as well as any parameters and
    ///          capabilities that the template requires. </p>
    public struct StackSet: Swift.Equatable {
        /// <p>The Amazon Resource Number (ARN) of the IAM role used to create or update the stack
        ///          set.</p>
        ///          <p>Use customized administrator roles to control which users or groups can manage specific
        ///          stack sets within the same administrator account. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html">Prerequisites: Granting Permissions for Stack
        ///             Set Operations</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        public let administrationRoleARN: Swift.String?
        /// <p>[Service-managed permissions] Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to a target organization or organizational unit (OU).</p>
        public let autoDeployment: CloudFormationClientTypes.AutoDeployment?
        /// <p>The capabilities that are allowed in the stack set. Some stack set templates might
        ///          include resources that can affect permissions in your AWS account—for example, by creating
        ///          new AWS Identity and Access Management (IAM) users. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM Resources in AWS CloudFormation Templates.</a>
        ///          </p>
        public let capabilities: [CloudFormationClientTypes.Capability]?
        /// <p>A description of the stack set that you specify when the stack set is created or
        ///          updated.</p>
        public let description: Swift.String?
        /// <p>The name of the IAM execution role used to create or update the stack set. </p>
        ///          <p>Use customized execution roles to control which stack resources users and groups can
        ///          include in their stack sets.
        ///       </p>
        public let executionRoleName: Swift.String?
        /// <p>[Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html">DeploymentTargets</a>.</p>
        public let organizationalUnitIds: [Swift.String]?
        /// <p>A list of input parameters for a stack set.</p>
        public let parameters: [CloudFormationClientTypes.Parameter]?
        /// <p>Describes how the IAM roles required for stack set operations are created.</p>
        ///          <ul>
        ///             <li>
        ///                <p>With <code>self-managed</code> permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html">Grant Self-Managed Stack Set Permissions</a>.</p>
        ///             </li>
        ///             <li>
        ///                <p>With <code>service-managed</code> permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by AWS Organizations. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html">Grant Service-Managed Stack Set Permissions</a>.</p>
        ///             </li>
        ///          </ul>
        public let permissionModel: CloudFormationClientTypes.PermissionModels?
        /// <p>The Amazon Resource Number (ARN) of the stack set.</p>
        public let stackSetARN: Swift.String?
        /// <p>Detailed information about the drift status of the stack set.</p>
        ///          <p>For stack sets, contains information about the last <i>completed</i> drift
        ///          operation performed on the stack set. Information about drift operations currently in
        ///          progress is not included.</p>
        public let stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails?
        /// <p>The ID of the stack set.</p>
        public let stackSetId: Swift.String?
        /// <p>The name that's associated with the stack set.</p>
        public let stackSetName: Swift.String?
        /// <p>The status of the stack set.</p>
        public let status: CloudFormationClientTypes.StackSetStatus?
        /// <p>A list of tags that specify information about the stack set. A maximum number of 50
        ///          tags can be specified.</p>
        public let tags: [CloudFormationClientTypes.Tag]?
        /// <p>The structure that contains the body of the template that was used to create or
        ///          update the stack set.</p>
        public let templateBody: Swift.String?

        public init (
            administrationRoleARN: Swift.String? = nil,
            autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
            capabilities: [CloudFormationClientTypes.Capability]? = nil,
            description: Swift.String? = nil,
            executionRoleName: Swift.String? = nil,
            organizationalUnitIds: [Swift.String]? = nil,
            parameters: [CloudFormationClientTypes.Parameter]? = nil,
            permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
            stackSetARN: Swift.String? = nil,
            stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails? = nil,
            stackSetId: Swift.String? = nil,
            stackSetName: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetStatus? = nil,
            tags: [CloudFormationClientTypes.Tag]? = nil,
            templateBody: Swift.String? = nil
        )
        {
            self.administrationRoleARN = administrationRoleARN
            self.autoDeployment = autoDeployment
            self.capabilities = capabilities
            self.description = description
            self.executionRoleName = executionRoleName
            self.organizationalUnitIds = organizationalUnitIds
            self.parameters = parameters
            self.permissionModel = permissionModel
            self.stackSetARN = stackSetARN
            self.stackSetDriftDetectionDetails = stackSetDriftDetectionDetails
            self.stackSetId = stackSetId
            self.stackSetName = stackSetName
            self.status = status
            self.tags = tags
            self.templateBody = templateBody
        }
    }

}

extension CloudFormationClientTypes.StackSetDriftDetectionDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case driftDetectionStatus = "DriftDetectionStatus"
        case driftStatus = "DriftStatus"
        case driftedStackInstancesCount = "DriftedStackInstancesCount"
        case failedStackInstancesCount = "FailedStackInstancesCount"
        case inProgressStackInstancesCount = "InProgressStackInstancesCount"
        case inSyncStackInstancesCount = "InSyncStackInstancesCount"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case totalStackInstancesCount = "TotalStackInstancesCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let driftDetectionStatus = driftDetectionStatus {
            try container.encode(driftDetectionStatus, forKey: ClientRuntime.Key("DriftDetectionStatus"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if driftedStackInstancesCount != 0 {
            try container.encode(driftedStackInstancesCount, forKey: ClientRuntime.Key("DriftedStackInstancesCount"))
        }
        if failedStackInstancesCount != 0 {
            try container.encode(failedStackInstancesCount, forKey: ClientRuntime.Key("FailedStackInstancesCount"))
        }
        if inProgressStackInstancesCount != 0 {
            try container.encode(inProgressStackInstancesCount, forKey: ClientRuntime.Key("InProgressStackInstancesCount"))
        }
        if inSyncStackInstancesCount != 0 {
            try container.encode(inSyncStackInstancesCount, forKey: ClientRuntime.Key("InSyncStackInstancesCount"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastDriftCheckTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastDriftCheckTimestamp"))
        }
        if totalStackInstancesCount != 0 {
            try container.encode(totalStackInstancesCount, forKey: ClientRuntime.Key("TotalStackInstancesCount"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let driftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetDriftStatus.self, forKey: .driftStatus)
        driftStatus = driftStatusDecoded
        let driftDetectionStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetDriftDetectionStatus.self, forKey: .driftDetectionStatus)
        driftDetectionStatus = driftDetectionStatusDecoded
        let lastDriftCheckTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastDriftCheckTimestamp)
        var lastDriftCheckTimestampBuffer:ClientRuntime.Date? = nil
        if let lastDriftCheckTimestampDecoded = lastDriftCheckTimestampDecoded {
            lastDriftCheckTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastDriftCheckTimestampDecoded, format: .dateTime)
        }
        lastDriftCheckTimestamp = lastDriftCheckTimestampBuffer
        let totalStackInstancesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalStackInstancesCount)
        totalStackInstancesCount = totalStackInstancesCountDecoded
        let driftedStackInstancesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .driftedStackInstancesCount)
        driftedStackInstancesCount = driftedStackInstancesCountDecoded
        let inSyncStackInstancesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .inSyncStackInstancesCount)
        inSyncStackInstancesCount = inSyncStackInstancesCountDecoded
        let inProgressStackInstancesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .inProgressStackInstancesCount)
        inProgressStackInstancesCount = inProgressStackInstancesCountDecoded
        let failedStackInstancesCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .failedStackInstancesCount)
        failedStackInstancesCount = failedStackInstancesCountDecoded
    }
}

extension CloudFormationClientTypes.StackSetDriftDetectionDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackSetDriftDetectionDetails(driftDetectionStatus: \(Swift.String(describing: driftDetectionStatus)), driftStatus: \(Swift.String(describing: driftStatus)), driftedStackInstancesCount: \(Swift.String(describing: driftedStackInstancesCount)), failedStackInstancesCount: \(Swift.String(describing: failedStackInstancesCount)), inProgressStackInstancesCount: \(Swift.String(describing: inProgressStackInstancesCount)), inSyncStackInstancesCount: \(Swift.String(describing: inSyncStackInstancesCount)), lastDriftCheckTimestamp: \(Swift.String(describing: lastDriftCheckTimestamp)), totalStackInstancesCount: \(Swift.String(describing: totalStackInstancesCount)))"}
}

extension CloudFormationClientTypes {
    /// <p>Detailed information about the drift status of the stack set.</p>
    ///          <p>For stack sets, contains information about the last <i>completed</i> drift
    ///          operation performed on the stack set. Information about drift operations in-progress is not
    ///          included. </p>
    ///          <p>For stack set operations, includes information about drift operations currently being
    ///          performed on the stack set.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html">Detecting Unmanaged
    ///          Changes in Stack Sets</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    public struct StackSetDriftDetectionDetails: Swift.Equatable {
        /// <p>The status of the stack set drift detection operation.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>COMPLETED</code>: The drift detection operation completed without failing on
        ///                any stack instances.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>FAILED</code>: The drift detection operation exceeded the specified failure
        ///                tolerance. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>PARTIAL_SUCCESS</code>: The drift detection operation completed without
        ///                exceeding the failure tolerance for the operation.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>IN_PROGRESS</code>: The drift detection operation is currently being
        ///                performed.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>STOPPED</code>: The user has cancelled the drift detection operation.</p>
        ///             </li>
        ///          </ul>
        public let driftDetectionStatus: CloudFormationClientTypes.StackSetDriftDetectionStatus?
        /// <p>Status of the stack set's actual configuration compared to its expected template and
        ///          parameter configuration. A stack set is considered to have drifted if one or more of its
        ///          stack instances have drifted from their expected template and parameter
        ///          configuration.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>DRIFTED</code>: One or more of the stack instances belonging to the stack
        ///                set stack differs from the expected template and parameter configuration. A stack
        ///                instance is considered to have drifted if one or more of the resources in the
        ///                associated stack have drifted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOT_CHECKED</code>: AWS CloudFormation has not checked the stack set for drift.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>IN_SYNC</code>: All of the stack instances belonging to the stack set stack
        ///                match from the expected template and parameter configuration.</p>
        ///             </li>
        ///          </ul>
        public let driftStatus: CloudFormationClientTypes.StackSetDriftStatus?
        /// <p>The number of stack instances that have drifted from the expected template and parameter
        ///          configuration of the stack set. A stack instance is considered to have drifted if one or
        ///          more of the resources in the associated stack do not match their expected
        ///          configuration.</p>
        public let driftedStackInstancesCount: Swift.Int
        /// <p>The number of stack instances for which the drift detection operation failed.</p>
        public let failedStackInstancesCount: Swift.Int
        /// <p>The number of stack instances that are currently being checked for drift.</p>
        public let inProgressStackInstancesCount: Swift.Int
        /// <p>The number of stack instances which match the expected template and parameter
        ///          configuration of the stack set.</p>
        public let inSyncStackInstancesCount: Swift.Int
        /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack
        ///          set. This value will be <code>NULL</code> for any stack set on which drift detection has
        ///          not yet been performed.</p>
        public let lastDriftCheckTimestamp: ClientRuntime.Date?
        /// <p>The total number of stack instances belonging to this stack set. </p>
        ///          <p>The total number of stack instances is equal to the total of:</p>
        ///          <ul>
        ///             <li>
        ///                <p>Stack instances that match the stack set configuration. </p>
        ///             </li>
        ///             <li>
        ///                <p>Stack instances that have drifted from the stack set configuration. </p>
        ///             </li>
        ///             <li>
        ///                <p>Stack instances where the drift detection operation has failed.</p>
        ///             </li>
        ///             <li>
        ///                <p>Stack instances currently being checked for drift.</p>
        ///             </li>
        ///          </ul>
        public let totalStackInstancesCount: Swift.Int

        public init (
            driftDetectionStatus: CloudFormationClientTypes.StackSetDriftDetectionStatus? = nil,
            driftStatus: CloudFormationClientTypes.StackSetDriftStatus? = nil,
            driftedStackInstancesCount: Swift.Int = 0,
            failedStackInstancesCount: Swift.Int = 0,
            inProgressStackInstancesCount: Swift.Int = 0,
            inSyncStackInstancesCount: Swift.Int = 0,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            totalStackInstancesCount: Swift.Int = 0
        )
        {
            self.driftDetectionStatus = driftDetectionStatus
            self.driftStatus = driftStatus
            self.driftedStackInstancesCount = driftedStackInstancesCount
            self.failedStackInstancesCount = failedStackInstancesCount
            self.inProgressStackInstancesCount = inProgressStackInstancesCount
            self.inSyncStackInstancesCount = inSyncStackInstancesCount
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.totalStackInstancesCount = totalStackInstancesCount
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetDriftDetectionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case partialSuccess
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetDriftDetectionStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .partialSuccess,
                .stopped,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .partialSuccess: return "PARTIAL_SUCCESS"
            case .stopped: return "STOPPED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetDriftDetectionStatus(rawValue: rawValue) ?? StackSetDriftDetectionStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes {
    public enum StackSetDriftStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case drifted
        case inSync
        case notChecked
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetDriftStatus] {
            return [
                .drifted,
                .inSync,
                .notChecked,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .drifted: return "DRIFTED"
            case .inSync: return "IN_SYNC"
            case .notChecked: return "NOT_CHECKED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetDriftStatus(rawValue: rawValue) ?? StackSetDriftStatus.sdkUnknown(rawValue)
        }
    }
}

extension StackSetNotEmptyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackSetNotEmptyException(message: \(Swift.String(describing: message)))"}
}

extension StackSetNotEmptyException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<StackSetNotEmptyExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You can't yet delete this stack set, because it still contains one or more stack
///          instances. Delete all stack instances from the stack set before deleting the stack
///          set.</p>
public struct StackSetNotEmptyException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StackSetNotEmptyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension StackSetNotEmptyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension StackSetNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackSetNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension StackSetNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<StackSetNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified stack set doesn't exist.</p>
public struct StackSetNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StackSetNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension StackSetNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.StackSetOperation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case administrationRoleARN = "AdministrationRoleARN"
        case creationTimestamp = "CreationTimestamp"
        case deploymentTargets = "DeploymentTargets"
        case endTimestamp = "EndTimestamp"
        case executionRoleName = "ExecutionRoleName"
        case operationId = "OperationId"
        case operationPreferences = "OperationPreferences"
        case retainStacks = "RetainStacks"
        case stackSetDriftDetectionDetails = "StackSetDriftDetectionDetails"
        case stackSetId = "StackSetId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let creationTimestamp = creationTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(creationTimestamp, format: .dateTime), forKey: ClientRuntime.Key("creationTimestamp"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let endTimestamp = endTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(endTimestamp, format: .dateTime), forKey: ClientRuntime.Key("endTimestamp"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let retainStacks = retainStacks {
            try container.encode(retainStacks, forKey: ClientRuntime.Key("RetainStacks"))
        }
        if let stackSetDriftDetectionDetails = stackSetDriftDetectionDetails {
            try container.encode(stackSetDriftDetectionDetails, forKey: ClientRuntime.Key("StackSetDriftDetectionDetails"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let actionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationAction.self, forKey: .action)
        action = actionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationStatus.self, forKey: .status)
        status = statusDecoded
        let operationPreferencesDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationPreferences.self, forKey: .operationPreferences)
        operationPreferences = operationPreferencesDecoded
        let retainStacksDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .retainStacks)
        retainStacks = retainStacksDecoded
        let administrationRoleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .administrationRoleARN)
        administrationRoleARN = administrationRoleARNDecoded
        let executionRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionRoleName)
        executionRoleName = executionRoleNameDecoded
        let creationTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTimestamp)
        var creationTimestampBuffer:ClientRuntime.Date? = nil
        if let creationTimestampDecoded = creationTimestampDecoded {
            creationTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationTimestampDecoded, format: .dateTime)
        }
        creationTimestamp = creationTimestampBuffer
        let endTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTimestamp)
        var endTimestampBuffer:ClientRuntime.Date? = nil
        if let endTimestampDecoded = endTimestampDecoded {
            endTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimestampDecoded, format: .dateTime)
        }
        endTimestamp = endTimestampBuffer
        let deploymentTargetsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.DeploymentTargets.self, forKey: .deploymentTargets)
        deploymentTargets = deploymentTargetsDecoded
        let stackSetDriftDetectionDetailsDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetDriftDetectionDetails.self, forKey: .stackSetDriftDetectionDetails)
        stackSetDriftDetectionDetails = stackSetDriftDetectionDetailsDecoded
    }
}

extension CloudFormationClientTypes.StackSetOperation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackSetOperation(action: \(Swift.String(describing: action)), administrationRoleARN: \(Swift.String(describing: administrationRoleARN)), creationTimestamp: \(Swift.String(describing: creationTimestamp)), deploymentTargets: \(Swift.String(describing: deploymentTargets)), endTimestamp: \(Swift.String(describing: endTimestamp)), executionRoleName: \(Swift.String(describing: executionRoleName)), operationId: \(Swift.String(describing: operationId)), operationPreferences: \(Swift.String(describing: operationPreferences)), retainStacks: \(Swift.String(describing: retainStacks)), stackSetDriftDetectionDetails: \(Swift.String(describing: stackSetDriftDetectionDetails)), stackSetId: \(Swift.String(describing: stackSetId)), status: \(Swift.String(describing: status)))"}
}

extension CloudFormationClientTypes {
    /// <p>The structure that contains information about a stack set operation. </p>
    public struct StackSetOperation: Swift.Equatable {
        /// <p>The type of stack set operation: <code>CREATE</code>, <code>UPDATE</code>, or
        ///             <code>DELETE</code>. Create and delete operations affect only the specified stack set
        ///          instances that are associated with the specified stack set. Update operations affect both
        ///          the stack set itself, as well as <i>all</i> associated stack set
        ///          instances.</p>
        public let action: CloudFormationClientTypes.StackSetOperationAction?
        /// <p>The Amazon Resource Number (ARN) of the IAM role used to perform this stack set
        ///          operation. </p>
        ///          <p>Use customized administrator roles to control which users or groups can manage specific
        ///          stack sets within the same administrator account. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html">Define Permissions for Multiple
        ///             Administrators</a> in the <i>AWS CloudFormation User Guide</i>.</p>
        public let administrationRoleARN: Swift.String?
        /// <p>The time at which the operation was initiated. Note that the creation times for the
        ///          stack set operation might differ from the creation time of the individual stacks
        ///          themselves. This is because AWS CloudFormation needs to perform preparatory work for the
        ///          operation, such as dispatching the work to the requested Regions, before actually creating
        ///          the first stacks.</p>
        public let creationTimestamp: ClientRuntime.Date?
        /// <p>[Service-managed permissions] The AWS Organizations accounts affected by the stack operation.</p>
        public let deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
        /// <p>The time at which the stack set operation ended, across all accounts and Regions
        ///          specified. Note that this doesn't necessarily mean that the stack set operation was
        ///          successful, or even attempted, in each account or Region.</p>
        public let endTimestamp: ClientRuntime.Date?
        /// <p>The name of the IAM execution role used to create or update the stack set.</p>
        ///          <p>Use customized execution roles to control which stack resources users and groups can
        ///          include in their stack sets.
        ///       </p>
        public let executionRoleName: Swift.String?
        /// <p>The unique ID of a stack set operation.</p>
        public let operationId: Swift.String?
        /// <p>The preferences for how AWS CloudFormation performs this stack set
        ///          operation.</p>
        public let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
        /// <p>For stack set operations of action type <code>DELETE</code>, specifies whether to
        ///          remove the stack instances from the specified stack set, but doesn't delete the stacks. You
        ///          can't reassociate a retained stack, or add an existing, saved stack to a new stack
        ///          set.</p>
        public let retainStacks: Swift.Bool?
        /// <p>Detailed information about the drift status of the stack set. This includes information
        ///          about drift operations currently being performed on the stack set.</p>
        ///          <p>this information will only be present for stack set operations whose <code>Action</code>
        ///          type is <code>DETECT_DRIFT</code>.</p>
        ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html">Detecting Unmanaged
        ///          Changes in Stack Sets</a> in the AWS CloudFormation User Guide.</p>
        public let stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails?
        /// <p>The ID of the stack set.</p>
        public let stackSetId: Swift.String?
        /// <p>The status of the operation. </p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>FAILED</code>: The operation exceeded the specified failure tolerance.
        ///                The failure tolerance value that you've set for an operation is applied for each
        ///                Region during stack create and update operations. If the number of failed stacks
        ///                within a Region exceeds the failure tolerance, the status of the operation in the
        ///                Region is set to <code>FAILED</code>. This in turn sets the status of the operation
        ///                as a whole to <code>FAILED</code>, and AWS CloudFormation cancels the operation in
        ///                any remaining Regions.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>QUEUED</code>: [Service-managed permissions] For automatic deployments that
        ///                require a sequence of operations, the operation is queued to be performed. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-status-codes">stack set operation status codes</a> in the AWS CloudFormation User Guide.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>RUNNING</code>: The operation is currently being performed.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>STOPPED</code>: The user has cancelled the operation.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>STOPPING</code>: The operation is in the process of stopping, at user
        ///                request. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SUCCEEDED</code>: The operation completed creating or updating all the
        ///                specified stacks without exceeding the failure tolerance for the operation.</p>
        ///             </li>
        ///          </ul>
        public let status: CloudFormationClientTypes.StackSetOperationStatus?

        public init (
            action: CloudFormationClientTypes.StackSetOperationAction? = nil,
            administrationRoleARN: Swift.String? = nil,
            creationTimestamp: ClientRuntime.Date? = nil,
            deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
            endTimestamp: ClientRuntime.Date? = nil,
            executionRoleName: Swift.String? = nil,
            operationId: Swift.String? = nil,
            operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
            retainStacks: Swift.Bool? = nil,
            stackSetDriftDetectionDetails: CloudFormationClientTypes.StackSetDriftDetectionDetails? = nil,
            stackSetId: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetOperationStatus? = nil
        )
        {
            self.action = action
            self.administrationRoleARN = administrationRoleARN
            self.creationTimestamp = creationTimestamp
            self.deploymentTargets = deploymentTargets
            self.endTimestamp = endTimestamp
            self.executionRoleName = executionRoleName
            self.operationId = operationId
            self.operationPreferences = operationPreferences
            self.retainStacks = retainStacks
            self.stackSetDriftDetectionDetails = stackSetDriftDetectionDetails
            self.stackSetId = stackSetId
            self.status = status
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetOperationAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case create
        case delete
        case detectDrift
        case update
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetOperationAction] {
            return [
                .create,
                .delete,
                .detectDrift,
                .update,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .create: return "CREATE"
            case .delete: return "DELETE"
            case .detectDrift: return "DETECT_DRIFT"
            case .update: return "UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetOperationAction(rawValue: rawValue) ?? StackSetOperationAction.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetOperationPreferences: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureToleranceCount = "FailureToleranceCount"
        case failureTolerancePercentage = "FailureTolerancePercentage"
        case maxConcurrentCount = "MaxConcurrentCount"
        case maxConcurrentPercentage = "MaxConcurrentPercentage"
        case regionConcurrencyType = "RegionConcurrencyType"
        case regionOrder = "RegionOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let failureToleranceCount = failureToleranceCount {
            try container.encode(failureToleranceCount, forKey: ClientRuntime.Key("FailureToleranceCount"))
        }
        if let failureTolerancePercentage = failureTolerancePercentage {
            try container.encode(failureTolerancePercentage, forKey: ClientRuntime.Key("FailureTolerancePercentage"))
        }
        if let maxConcurrentCount = maxConcurrentCount {
            try container.encode(maxConcurrentCount, forKey: ClientRuntime.Key("MaxConcurrentCount"))
        }
        if let maxConcurrentPercentage = maxConcurrentPercentage {
            try container.encode(maxConcurrentPercentage, forKey: ClientRuntime.Key("MaxConcurrentPercentage"))
        }
        if let regionConcurrencyType = regionConcurrencyType {
            try container.encode(regionConcurrencyType, forKey: ClientRuntime.Key("RegionConcurrencyType"))
        }
        if let regionOrder = regionOrder {
            var regionOrderContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("RegionOrder"))
            for (index0, region0) in regionOrder.enumerated() {
                try regionOrderContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionConcurrencyTypeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegionConcurrencyType.self, forKey: .regionConcurrencyType)
        regionConcurrencyType = regionConcurrencyTypeDecoded
        if containerValues.contains(.regionOrder) {
            struct KeyVal0{struct member{}}
            let regionOrderWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .regionOrder)
            if let regionOrderWrappedContainer = regionOrderWrappedContainer {
                let regionOrderContainer = try regionOrderWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var regionOrderBuffer:[Swift.String]? = nil
                if let regionOrderContainer = regionOrderContainer {
                    regionOrderBuffer = [Swift.String]()
                    for stringContainer0 in regionOrderContainer {
                        regionOrderBuffer?.append(stringContainer0)
                    }
                }
                regionOrder = regionOrderBuffer
            } else {
                regionOrder = []
            }
        } else {
            regionOrder = nil
        }
        let failureToleranceCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failureToleranceCount)
        failureToleranceCount = failureToleranceCountDecoded
        let failureTolerancePercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .failureTolerancePercentage)
        failureTolerancePercentage = failureTolerancePercentageDecoded
        let maxConcurrentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentCount)
        maxConcurrentCount = maxConcurrentCountDecoded
        let maxConcurrentPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxConcurrentPercentage)
        maxConcurrentPercentage = maxConcurrentPercentageDecoded
    }
}

extension CloudFormationClientTypes.StackSetOperationPreferences: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackSetOperationPreferences(failureToleranceCount: \(Swift.String(describing: failureToleranceCount)), failureTolerancePercentage: \(Swift.String(describing: failureTolerancePercentage)), maxConcurrentCount: \(Swift.String(describing: maxConcurrentCount)), maxConcurrentPercentage: \(Swift.String(describing: maxConcurrentPercentage)), regionConcurrencyType: \(Swift.String(describing: regionConcurrencyType)), regionOrder: \(Swift.String(describing: regionOrder)))"}
}

extension CloudFormationClientTypes {
    /// <p>The user-specified preferences for how AWS CloudFormation performs a stack set
    ///          operation. </p>
    ///          <p>For more information on maximum concurrent accounts and failure tolerance, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a>.</p>
    public struct StackSetOperationPreferences: Swift.Equatable {
        /// <p>The number of accounts, per Region, for which this operation can fail before AWS
        ///          CloudFormation stops the operation in that Region. If the operation is stopped in a Region,
        ///          AWS CloudFormation doesn't attempt the operation in any subsequent Regions.</p>
        ///          <p>Conditional: You must specify either <code>FailureToleranceCount</code> or
        ///             <code>FailureTolerancePercentage</code> (but not both).</p>
        public let failureToleranceCount: Swift.Int?
        /// <p>The percentage of accounts, per Region, for which this stack operation can fail
        ///          before AWS CloudFormation stops the operation in that Region. If the operation is stopped
        ///          in a Region, AWS CloudFormation doesn't attempt the operation in any subsequent
        ///          Regions.</p>
        ///          <p>When calculating the number of accounts based on the specified percentage, AWS
        ///          CloudFormation rounds <i>down</i> to the next whole number.</p>
        ///          <p>Conditional: You must specify either <code>FailureToleranceCount</code> or
        ///             <code>FailureTolerancePercentage</code>, but not both.</p>
        public let failureTolerancePercentage: Swift.Int?
        /// <p>The maximum number of accounts in which to perform this operation at one time. This
        ///          is dependent on the value of
        ///             <code>FailureToleranceCount</code>. <code>MaxConcurrentCount</code> is at most one more
        ///          than the <code>FailureToleranceCount</code>.</p>
        ///          <p>Note that this setting lets you specify the <i>maximum</i> for
        ///          operations. For large deployments, under certain circumstances the actual number of
        ///          accounts acted upon concurrently may be lower due to service throttling.</p>
        ///          <p>Conditional: You must specify either <code>MaxConcurrentCount</code> or
        ///             <code>MaxConcurrentPercentage</code>, but not both.</p>
        public let maxConcurrentCount: Swift.Int?
        /// <p>The maximum percentage of accounts in which to perform this operation at one
        ///          time.</p>
        ///          <p>When calculating the number of accounts based on the specified percentage, AWS
        ///          CloudFormation rounds down to the next whole number. This is true except in cases where
        ///          rounding down would result is zero. In this case, CloudFormation sets the number as one
        ///          instead.</p>
        ///          <p>Note that this setting lets you specify the <i>maximum</i> for
        ///          operations. For large deployments, under certain circumstances the actual number of
        ///          accounts acted upon concurrently may be lower due to service throttling.</p>
        ///          <p>Conditional: You must specify either <code>MaxConcurrentCount</code> or
        ///             <code>MaxConcurrentPercentage</code>, but not both.</p>
        public let maxConcurrentPercentage: Swift.Int?
        /// <p>The concurrency type of deploying StackSets operations in regions, could be in parallel or one region at a time.</p>
        public let regionConcurrencyType: CloudFormationClientTypes.RegionConcurrencyType?
        /// <p>The order of the Regions in where you want to perform the stack operation.</p>
        public let regionOrder: [Swift.String]?

        public init (
            failureToleranceCount: Swift.Int? = nil,
            failureTolerancePercentage: Swift.Int? = nil,
            maxConcurrentCount: Swift.Int? = nil,
            maxConcurrentPercentage: Swift.Int? = nil,
            regionConcurrencyType: CloudFormationClientTypes.RegionConcurrencyType? = nil,
            regionOrder: [Swift.String]? = nil
        )
        {
            self.failureToleranceCount = failureToleranceCount
            self.failureTolerancePercentage = failureTolerancePercentage
            self.maxConcurrentCount = maxConcurrentCount
            self.maxConcurrentPercentage = maxConcurrentPercentage
            self.regionConcurrencyType = regionConcurrencyType
            self.regionOrder = regionOrder
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetOperationResultStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case failed
        case pending
        case running
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetOperationResultStatus] {
            return [
                .cancelled,
                .failed,
                .pending,
                .running,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetOperationResultStatus(rawValue: rawValue) ?? StackSetOperationResultStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetOperationResultSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case account = "Account"
        case accountGateResult = "AccountGateResult"
        case organizationalUnitId = "OrganizationalUnitId"
        case region = "Region"
        case status = "Status"
        case statusReason = "StatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let account = account {
            try container.encode(account, forKey: ClientRuntime.Key("Account"))
        }
        if let accountGateResult = accountGateResult {
            try container.encode(accountGateResult, forKey: ClientRuntime.Key("AccountGateResult"))
        }
        if let organizationalUnitId = organizationalUnitId {
            try container.encode(organizationalUnitId, forKey: ClientRuntime.Key("OrganizationalUnitId"))
        }
        if let region = region {
            try container.encode(region, forKey: ClientRuntime.Key("Region"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
        if let statusReason = statusReason {
            try container.encode(statusReason, forKey: ClientRuntime.Key("StatusReason"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .account)
        account = accountDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationResultStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let accountGateResultDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AccountGateResult.self, forKey: .accountGateResult)
        accountGateResult = accountGateResultDecoded
        let organizationalUnitIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitId)
        organizationalUnitId = organizationalUnitIdDecoded
    }
}

extension CloudFormationClientTypes.StackSetOperationResultSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackSetOperationResultSummary(account: \(Swift.String(describing: account)), accountGateResult: \(Swift.String(describing: accountGateResult)), organizationalUnitId: \(Swift.String(describing: organizationalUnitId)), region: \(Swift.String(describing: region)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)))"}
}

extension CloudFormationClientTypes {
    /// <p>The structure that contains information about a specified operation's results for a
    ///          given account in a given Region.</p>
    public struct StackSetOperationResultSummary: Swift.Equatable {
        /// <p>[Self-managed permissions] The name of the AWS account for this operation result.</p>
        public let account: Swift.String?
        /// <p>The results of the account gate function AWS CloudFormation invokes, if present,
        ///          before proceeding with stack set operations in an account</p>
        public let accountGateResult: CloudFormationClientTypes.AccountGateResult?
        /// <p>[Service-managed permissions] The organization root ID or organizational unit (OU) IDs that you specified for <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeploymentTargets.html">DeploymentTargets</a>.</p>
        public let organizationalUnitId: Swift.String?
        /// <p>The name of the AWS Region for this operation result.</p>
        public let region: Swift.String?
        /// <p>The result status of the stack set operation for the given account in the given
        ///          Region.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>CANCELLED</code>: The operation in the specified account and Region has
        ///                been cancelled. This is either because a user has stopped the stack set operation, or
        ///                because the failure tolerance of the stack set operation has been exceeded.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>FAILED</code>: The operation in the specified account and Region failed. </p>
        ///                <p>If the stack set operation fails in enough accounts within a Region, the
        ///                failure tolerance for the stack set operation as a whole might be exceeded.
        ///             </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>RUNNING</code>: The operation in the specified account and Region is
        ///                currently in progress.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>PENDING</code>: The operation in the specified account and Region has yet
        ///                to start. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SUCCEEDED</code>: The operation in the specified account and Region
        ///                completed successfully.</p>
        ///             </li>
        ///          </ul>
        public let status: CloudFormationClientTypes.StackSetOperationResultStatus?
        /// <p>The reason for the assigned result status.</p>
        public let statusReason: Swift.String?

        public init (
            account: Swift.String? = nil,
            accountGateResult: CloudFormationClientTypes.AccountGateResult? = nil,
            organizationalUnitId: Swift.String? = nil,
            region: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetOperationResultStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.account = account
            self.accountGateResult = accountGateResult
            self.organizationalUnitId = organizationalUnitId
            self.region = region
            self.status = status
            self.statusReason = statusReason
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetOperationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case queued
        case running
        case stopped
        case stopping
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetOperationStatus] {
            return [
                .failed,
                .queued,
                .running,
                .stopped,
                .stopping,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .queued: return "QUEUED"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetOperationStatus(rawValue: rawValue) ?? StackSetOperationStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetOperationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case creationTimestamp = "CreationTimestamp"
        case endTimestamp = "EndTimestamp"
        case operationId = "OperationId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let action = action {
            try container.encode(action, forKey: ClientRuntime.Key("Action"))
        }
        if let creationTimestamp = creationTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(creationTimestamp, format: .dateTime), forKey: ClientRuntime.Key("creationTimestamp"))
        }
        if let endTimestamp = endTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(endTimestamp, format: .dateTime), forKey: ClientRuntime.Key("endTimestamp"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
        let actionDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationAction.self, forKey: .action)
        action = actionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetOperationStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTimestamp)
        var creationTimestampBuffer:ClientRuntime.Date? = nil
        if let creationTimestampDecoded = creationTimestampDecoded {
            creationTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationTimestampDecoded, format: .dateTime)
        }
        creationTimestamp = creationTimestampBuffer
        let endTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endTimestamp)
        var endTimestampBuffer:ClientRuntime.Date? = nil
        if let endTimestampDecoded = endTimestampDecoded {
            endTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(endTimestampDecoded, format: .dateTime)
        }
        endTimestamp = endTimestampBuffer
    }
}

extension CloudFormationClientTypes.StackSetOperationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackSetOperationSummary(action: \(Swift.String(describing: action)), creationTimestamp: \(Swift.String(describing: creationTimestamp)), endTimestamp: \(Swift.String(describing: endTimestamp)), operationId: \(Swift.String(describing: operationId)), status: \(Swift.String(describing: status)))"}
}

extension CloudFormationClientTypes {
    /// <p>The structures that contain summary information about the specified
    ///          operation.</p>
    public struct StackSetOperationSummary: Swift.Equatable {
        /// <p>The type of operation: <code>CREATE</code>, <code>UPDATE</code>, or
        ///             <code>DELETE</code>. Create and delete operations affect only the specified stack
        ///          instances that are associated with the specified stack set. Update operations affect both
        ///          the stack set itself as well as <i>all</i> associated stack set
        ///          instances.</p>
        public let action: CloudFormationClientTypes.StackSetOperationAction?
        /// <p>The time at which the operation was initiated. Note that the creation times for the
        ///          stack set operation might differ from the creation time of the individual stacks
        ///          themselves. This is because AWS CloudFormation needs to perform preparatory work for the
        ///          operation, such as dispatching the work to the requested Regions, before actually creating
        ///          the first stacks.</p>
        public let creationTimestamp: ClientRuntime.Date?
        /// <p>The time at which the stack set operation ended, across all accounts and Regions
        ///          specified. Note that this doesn't necessarily mean that the stack set operation was
        ///          successful, or even attempted, in each account or Region.</p>
        public let endTimestamp: ClientRuntime.Date?
        /// <p>The unique ID of the stack set operation.</p>
        public let operationId: Swift.String?
        /// <p>The overall status of the operation.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>FAILED</code>: The operation exceeded the specified failure tolerance.
        ///                The failure tolerance value that you've set for an operation is applied for each
        ///                Region during stack create and update operations. If the number of failed stacks
        ///                within a Region exceeds the failure tolerance, the status of the operation in the
        ///                Region is set to <code>FAILED</code>. This in turn sets the status of the operation
        ///                as a whole to <code>FAILED</code>, and AWS CloudFormation cancels the operation in
        ///                any remaining Regions.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>QUEUED</code>: [Service-managed permissions] For automatic deployments that
        ///                require a sequence of operations, the operation is queued to be performed. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-status-codes">stack set operation status codes</a> in the AWS CloudFormation User Guide.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>RUNNING</code>: The operation is currently being performed.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>STOPPED</code>: The user has cancelled the operation.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>STOPPING</code>: The operation is in the process of stopping, at user
        ///                request. </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SUCCEEDED</code>: The operation completed creating or updating all the
        ///                specified stacks without exceeding the failure tolerance for the operation.</p>
        ///             </li>
        ///          </ul>
        public let status: CloudFormationClientTypes.StackSetOperationStatus?

        public init (
            action: CloudFormationClientTypes.StackSetOperationAction? = nil,
            creationTimestamp: ClientRuntime.Date? = nil,
            endTimestamp: ClientRuntime.Date? = nil,
            operationId: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetOperationStatus? = nil
        )
        {
            self.action = action
            self.creationTimestamp = creationTimestamp
            self.endTimestamp = endTimestamp
            self.operationId = operationId
            self.status = status
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackSetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleted
        case sdkUnknown(Swift.String)

        public static var allCases: [StackSetStatus] {
            return [
                .active,
                .deleted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleted: return "DELETED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackSetStatus(rawValue: rawValue) ?? StackSetStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSetSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoDeployment = "AutoDeployment"
        case description = "Description"
        case driftStatus = "DriftStatus"
        case lastDriftCheckTimestamp = "LastDriftCheckTimestamp"
        case permissionModel = "PermissionModel"
        case stackSetId = "StackSetId"
        case stackSetName = "StackSetName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let driftStatus = driftStatus {
            try container.encode(driftStatus, forKey: ClientRuntime.Key("DriftStatus"))
        }
        if let lastDriftCheckTimestamp = lastDriftCheckTimestamp {
            try container.encode(ClientRuntime.TimestampWrapper(lastDriftCheckTimestamp, format: .dateTime), forKey: ClientRuntime.Key("lastDriftCheckTimestamp"))
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let stackSetId = stackSetId {
            try container.encode(stackSetId, forKey: ClientRuntime.Key("StackSetId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let status = status {
            try container.encode(status, forKey: ClientRuntime.Key("Status"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetName)
        stackSetName = stackSetNameDecoded
        let stackSetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackSetId)
        stackSetId = stackSetIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackSetStatus.self, forKey: .status)
        status = statusDecoded
        let autoDeploymentDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.AutoDeployment.self, forKey: .autoDeployment)
        autoDeployment = autoDeploymentDecoded
        let permissionModelDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.PermissionModels.self, forKey: .permissionModel)
        permissionModel = permissionModelDecoded
        let driftStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftStatus.self, forKey: .driftStatus)
        driftStatus = driftStatusDecoded
        let lastDriftCheckTimestampDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastDriftCheckTimestamp)
        var lastDriftCheckTimestampBuffer:ClientRuntime.Date? = nil
        if let lastDriftCheckTimestampDecoded = lastDriftCheckTimestampDecoded {
            lastDriftCheckTimestampBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastDriftCheckTimestampDecoded, format: .dateTime)
        }
        lastDriftCheckTimestamp = lastDriftCheckTimestampBuffer
    }
}

extension CloudFormationClientTypes.StackSetSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackSetSummary(autoDeployment: \(Swift.String(describing: autoDeployment)), description: \(Swift.String(describing: description)), driftStatus: \(Swift.String(describing: driftStatus)), lastDriftCheckTimestamp: \(Swift.String(describing: lastDriftCheckTimestamp)), permissionModel: \(Swift.String(describing: permissionModel)), stackSetId: \(Swift.String(describing: stackSetId)), stackSetName: \(Swift.String(describing: stackSetName)), status: \(Swift.String(describing: status)))"}
}

extension CloudFormationClientTypes {
    /// <p>The structures that contain summary information about the specified stack
    ///          set.</p>
    public struct StackSetSummary: Swift.Equatable {
        /// <p>[Service-managed permissions] Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to a target organizational unit (OU).</p>
        public let autoDeployment: CloudFormationClientTypes.AutoDeployment?
        /// <p>A description of the stack set that you specify when the stack set is created or
        ///          updated.</p>
        public let description: Swift.String?
        /// <p>Status of the stack set's actual configuration compared to its expected template and
        ///          parameter configuration. A stack set is considered to have drifted if one or more of its
        ///          stack instances have drifted from their expected template and parameter
        ///          configuration.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>DRIFTED</code>: One or more of the stack instances belonging to the stack
        ///                set stack differs from the expected template and parameter configuration. A stack
        ///                instance is considered to have drifted if one or more of the resources in the
        ///                associated stack have drifted.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOT_CHECKED</code>: AWS CloudFormation has not checked the stack set for drift.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>IN_SYNC</code>: All of the stack instances belonging to the stack set stack
        ///                match from the expected template and parameter configuration.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UNKNOWN</code>: This value is reserved for future use.</p>
        ///             </li>
        ///          </ul>
        public let driftStatus: CloudFormationClientTypes.StackDriftStatus?
        /// <p>Most recent time when CloudFormation performed a drift detection operation on the stack
        ///          set. This value will be <code>NULL</code> for any stack set on which drift detection has
        ///          not yet been performed.</p>
        public let lastDriftCheckTimestamp: ClientRuntime.Date?
        /// <p>Describes how the IAM roles required for stack set operations are created.</p>
        ///          <ul>
        ///             <li>
        ///                <p>With <code>self-managed</code> permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html">Grant Self-Managed Stack Set Permissions</a>.</p>
        ///             </li>
        ///             <li>
        ///                <p>With <code>service-managed</code> permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by AWS Organizations. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html">Grant Service-Managed Stack Set Permissions</a>.</p>
        ///             </li>
        ///          </ul>
        public let permissionModel: CloudFormationClientTypes.PermissionModels?
        /// <p>The ID of the stack set.</p>
        public let stackSetId: Swift.String?
        /// <p>The name of the stack set.</p>
        public let stackSetName: Swift.String?
        /// <p>The status of the stack set.</p>
        public let status: CloudFormationClientTypes.StackSetStatus?

        public init (
            autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
            description: Swift.String? = nil,
            driftStatus: CloudFormationClientTypes.StackDriftStatus? = nil,
            lastDriftCheckTimestamp: ClientRuntime.Date? = nil,
            permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
            stackSetId: Swift.String? = nil,
            stackSetName: Swift.String? = nil,
            status: CloudFormationClientTypes.StackSetStatus? = nil
        )
        {
            self.autoDeployment = autoDeployment
            self.description = description
            self.driftStatus = driftStatus
            self.lastDriftCheckTimestamp = lastDriftCheckTimestamp
            self.permissionModel = permissionModel
            self.stackSetId = stackSetId
            self.stackSetName = stackSetName
            self.status = status
        }
    }

}

extension CloudFormationClientTypes {
    public enum StackStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createFailed
        case createInProgress
        case deleteComplete
        case deleteFailed
        case deleteInProgress
        case importComplete
        case importInProgress
        case importRollbackComplete
        case importRollbackFailed
        case importRollbackInProgress
        case reviewInProgress
        case rollbackComplete
        case rollbackFailed
        case rollbackInProgress
        case updateComplete
        case updateCompleteCleanupInProgress
        case updateInProgress
        case updateRollbackComplete
        case updateRollbackCompleteCleanupInProgress
        case updateRollbackFailed
        case updateRollbackInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [StackStatus] {
            return [
                .createComplete,
                .createFailed,
                .createInProgress,
                .deleteComplete,
                .deleteFailed,
                .deleteInProgress,
                .importComplete,
                .importInProgress,
                .importRollbackComplete,
                .importRollbackFailed,
                .importRollbackInProgress,
                .reviewInProgress,
                .rollbackComplete,
                .rollbackFailed,
                .rollbackInProgress,
                .updateComplete,
                .updateCompleteCleanupInProgress,
                .updateInProgress,
                .updateRollbackComplete,
                .updateRollbackCompleteCleanupInProgress,
                .updateRollbackFailed,
                .updateRollbackInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteComplete: return "DELETE_COMPLETE"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .importComplete: return "IMPORT_COMPLETE"
            case .importInProgress: return "IMPORT_IN_PROGRESS"
            case .importRollbackComplete: return "IMPORT_ROLLBACK_COMPLETE"
            case .importRollbackFailed: return "IMPORT_ROLLBACK_FAILED"
            case .importRollbackInProgress: return "IMPORT_ROLLBACK_IN_PROGRESS"
            case .reviewInProgress: return "REVIEW_IN_PROGRESS"
            case .rollbackComplete: return "ROLLBACK_COMPLETE"
            case .rollbackFailed: return "ROLLBACK_FAILED"
            case .rollbackInProgress: return "ROLLBACK_IN_PROGRESS"
            case .updateComplete: return "UPDATE_COMPLETE"
            case .updateCompleteCleanupInProgress: return "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updateRollbackComplete: return "UPDATE_ROLLBACK_COMPLETE"
            case .updateRollbackCompleteCleanupInProgress: return "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS"
            case .updateRollbackFailed: return "UPDATE_ROLLBACK_FAILED"
            case .updateRollbackInProgress: return "UPDATE_ROLLBACK_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StackStatus(rawValue: rawValue) ?? StackStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudFormationClientTypes.StackSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case deletionTime = "DeletionTime"
        case driftInformation = "DriftInformation"
        case lastUpdatedTime = "LastUpdatedTime"
        case parentId = "ParentId"
        case rootId = "RootId"
        case stackId = "StackId"
        case stackName = "StackName"
        case stackStatus = "StackStatus"
        case stackStatusReason = "StackStatusReason"
        case templateDescription = "TemplateDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let creationTime = creationTime {
            try container.encode(ClientRuntime.TimestampWrapper(creationTime, format: .dateTime), forKey: ClientRuntime.Key("creationTime"))
        }
        if let deletionTime = deletionTime {
            try container.encode(ClientRuntime.TimestampWrapper(deletionTime, format: .dateTime), forKey: ClientRuntime.Key("deletionTime"))
        }
        if let driftInformation = driftInformation {
            try container.encode(driftInformation, forKey: ClientRuntime.Key("DriftInformation"))
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try container.encode(ClientRuntime.TimestampWrapper(lastUpdatedTime, format: .dateTime), forKey: ClientRuntime.Key("lastUpdatedTime"))
        }
        if let parentId = parentId {
            try container.encode(parentId, forKey: ClientRuntime.Key("ParentId"))
        }
        if let rootId = rootId {
            try container.encode(rootId, forKey: ClientRuntime.Key("RootId"))
        }
        if let stackId = stackId {
            try container.encode(stackId, forKey: ClientRuntime.Key("StackId"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackStatus = stackStatus {
            try container.encode(stackStatus, forKey: ClientRuntime.Key("StackStatus"))
        }
        if let stackStatusReason = stackStatusReason {
            try container.encode(stackStatusReason, forKey: ClientRuntime.Key("StackStatusReason"))
        }
        if let templateDescription = templateDescription {
            try container.encode(templateDescription, forKey: ClientRuntime.Key("TemplateDescription"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
        let stackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackName)
        stackName = stackNameDecoded
        let templateDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateDescription)
        templateDescription = templateDescriptionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationTime)
        var creationTimeBuffer:ClientRuntime.Date? = nil
        if let creationTimeDecoded = creationTimeDecoded {
            creationTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(creationTimeDecoded, format: .dateTime)
        }
        creationTime = creationTimeBuffer
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedTime)
        var lastUpdatedTimeBuffer:ClientRuntime.Date? = nil
        if let lastUpdatedTimeDecoded = lastUpdatedTimeDecoded {
            lastUpdatedTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdatedTimeDecoded, format: .dateTime)
        }
        lastUpdatedTime = lastUpdatedTimeBuffer
        let deletionTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deletionTime)
        var deletionTimeBuffer:ClientRuntime.Date? = nil
        if let deletionTimeDecoded = deletionTimeDecoded {
            deletionTimeBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(deletionTimeDecoded, format: .dateTime)
        }
        deletionTime = deletionTimeBuffer
        let stackStatusDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackStatus.self, forKey: .stackStatus)
        stackStatus = stackStatusDecoded
        let stackStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackStatusReason)
        stackStatusReason = stackStatusReasonDecoded
        let parentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parentId)
        parentId = parentIdDecoded
        let rootIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rootId)
        rootId = rootIdDecoded
        let driftInformationDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.StackDriftInformationSummary.self, forKey: .driftInformation)
        driftInformation = driftInformationDecoded
    }
}

extension CloudFormationClientTypes.StackSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StackSummary(creationTime: \(Swift.String(describing: creationTime)), deletionTime: \(Swift.String(describing: deletionTime)), driftInformation: \(Swift.String(describing: driftInformation)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), parentId: \(Swift.String(describing: parentId)), rootId: \(Swift.String(describing: rootId)), stackId: \(Swift.String(describing: stackId)), stackName: \(Swift.String(describing: stackName)), stackStatus: \(Swift.String(describing: stackStatus)), stackStatusReason: \(Swift.String(describing: stackStatusReason)), templateDescription: \(Swift.String(describing: templateDescription)))"}
}

extension CloudFormationClientTypes {
    /// <p>The StackSummary Data Type</p>
    public struct StackSummary: Swift.Equatable {
        /// <p>The time the stack was created.</p>
        public let creationTime: ClientRuntime.Date?
        /// <p>The time the stack was deleted.</p>
        public let deletionTime: ClientRuntime.Date?
        /// <p>Summarizes information on whether a stack's actual configuration differs, or has
        ///             <i>drifted</i>, from it's expected configuration, as defined in the stack
        ///          template and any values specified as template parameters. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html">Detecting Unregulated Configuration
        ///             Changes to Stacks and Resources</a>.</p>
        public let driftInformation: CloudFormationClientTypes.StackDriftInformationSummary?
        /// <p>The time the stack was last updated. This field will only be returned if the stack
        ///          has been updated at least once.</p>
        public let lastUpdatedTime: ClientRuntime.Date?
        /// <p>For nested stacks--stacks created as resources for another stack--the stack ID of the
        ///          direct parent of this stack. For the first level of nested stacks, the root stack is also
        ///          the parent stack.</p>
        ///          <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">Working with Nested Stacks</a> in the
        ///          <i>AWS CloudFormation User Guide</i>.</p>
        public let parentId: Swift.String?
        /// <p>For nested stacks--stacks created as resources for another stack--the stack ID of the
        ///          top-level stack to which the nested stack ultimately belongs.</p>
        ///          <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html">Working with Nested Stacks</a> in the
        ///          <i>AWS CloudFormation User Guide</i>.</p>
        public let rootId: Swift.String?
        /// <p>Unique stack identifier.</p>
        public let stackId: Swift.String?
        /// <p>The name associated with the stack.</p>
        public let stackName: Swift.String?
        /// <p>The current status of the stack.</p>
        public let stackStatus: CloudFormationClientTypes.StackStatus?
        /// <p>Success/Failure message associated with the stack status.</p>
        public let stackStatusReason: Swift.String?
        /// <p>The template description of the template used to create the stack.</p>
        public let templateDescription: Swift.String?

        public init (
            creationTime: ClientRuntime.Date? = nil,
            deletionTime: ClientRuntime.Date? = nil,
            driftInformation: CloudFormationClientTypes.StackDriftInformationSummary? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            parentId: Swift.String? = nil,
            rootId: Swift.String? = nil,
            stackId: Swift.String? = nil,
            stackName: Swift.String? = nil,
            stackStatus: CloudFormationClientTypes.StackStatus? = nil,
            stackStatusReason: Swift.String? = nil,
            templateDescription: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.driftInformation = driftInformation
            self.lastUpdatedTime = lastUpdatedTime
            self.parentId = parentId
            self.rootId = rootId
            self.stackId = stackId
            self.stackName = stackName
            self.stackStatus = stackStatus
            self.stackStatusReason = stackStatusReason
            self.templateDescription = templateDescription
        }
    }

}

extension StaleRequestException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StaleRequestException(message: \(Swift.String(describing: message)))"}
}

extension StaleRequestException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<StaleRequestExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Another operation has been performed on this stack set since the specified operation
///          was performed. </p>
public struct StaleRequestException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct StaleRequestExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension StaleRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct StopStackSetOperationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopStackSetOperationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopStackSetOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopStackSetOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopStackSetOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopStackSetOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopStackSetOperationOutputError>
}

extension StopStackSetOperationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopStackSetOperationInput(callAs: \(Swift.String(describing: callAs)), operationId: \(Swift.String(describing: operationId)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension StopStackSetOperationInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("StopStackSetOperation", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct StopStackSetOperationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopStackSetOperationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopStackSetOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopStackSetOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopStackSetOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopStackSetOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopStackSetOperationOutputError>
}

public struct StopStackSetOperationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopStackSetOperationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopStackSetOperationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopStackSetOperationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopStackSetOperationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopStackSetOperationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopStackSetOperationOutputError>
}

public struct StopStackSetOperationInput: Swift.Equatable {
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>The ID of the stack operation. </p>
    public let operationId: Swift.String?
    /// <p>The name or unique ID of the stack set that you want to stop the operation
    ///          for.</p>
    public let stackSetName: Swift.String?

    public init (
        callAs: CloudFormationClientTypes.CallAs? = nil,
        operationId: Swift.String? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.callAs = callAs
        self.operationId = operationId
        self.stackSetName = stackSetName
    }
}

extension StopStackSetOperationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension StopStackSetOperationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationNotFoundException" : self = .operationNotFoundException(try OperationNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopStackSetOperationOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case operationNotFoundException(OperationNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopStackSetOperationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopStackSetOperationOutputResponse()"}
}

extension StopStackSetOperationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopStackSetOperationOutputResponse: Swift.Equatable {

    public init() {}
}

struct StopStackSetOperationOutputResponseBody: Swift.Equatable {
}

extension StopStackSetOperationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension CloudFormationClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let key = key {
            try container.encode(key, forKey: ClientRuntime.Key("Key"))
        }
        if let value = value {
            try container.encode(value, forKey: ClientRuntime.Key("Value"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudFormationClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension CloudFormationClientTypes {
    /// <p>The Tag type enables you to specify a key-value pair that can be used to store
    ///          information about an AWS CloudFormation stack.</p>
    public struct Tag: Swift.Equatable {
        /// <p>
        ///             <i>Required</i>. A string used to identify this tag. You can specify a
        ///          maximum of 128 characters for a tag key. Tags owned by Amazon Web Services (AWS) have the
        ///          reserved prefix: <code>aws:</code>.</p>
        public let key: Swift.String?
        /// <p>
        ///             <i>Required</i>. A string containing the value for this tag. You can specify
        ///          a maximum of 256 characters for a tag value.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension CloudFormationClientTypes.TemplateParameter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue = "DefaultValue"
        case description = "Description"
        case noEcho = "NoEcho"
        case parameterKey = "ParameterKey"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultValue = defaultValue {
            try container.encode(defaultValue, forKey: ClientRuntime.Key("DefaultValue"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let noEcho = noEcho {
            try container.encode(noEcho, forKey: ClientRuntime.Key("NoEcho"))
        }
        if let parameterKey = parameterKey {
            try container.encode(parameterKey, forKey: ClientRuntime.Key("ParameterKey"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterKey)
        parameterKey = parameterKeyDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let noEchoDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noEcho)
        noEcho = noEchoDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension CloudFormationClientTypes.TemplateParameter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TemplateParameter(defaultValue: \(Swift.String(describing: defaultValue)), description: \(Swift.String(describing: description)), noEcho: \(Swift.String(describing: noEcho)), parameterKey: \(Swift.String(describing: parameterKey)))"}
}

extension CloudFormationClientTypes {
    /// <p>The TemplateParameter data type.</p>
    public struct TemplateParameter: Swift.Equatable {
        /// <p>The default value associated with the parameter.</p>
        public let defaultValue: Swift.String?
        /// <p>User defined description associated with the parameter.</p>
        public let description: Swift.String?
        /// <p>Flag indicating whether the parameter should be displayed as plain text in logs and
        ///          UIs.</p>
        public let noEcho: Swift.Bool?
        /// <p>The name associated with the parameter.</p>
        public let parameterKey: Swift.String?

        public init (
            defaultValue: Swift.String? = nil,
            description: Swift.String? = nil,
            noEcho: Swift.Bool? = nil,
            parameterKey: Swift.String? = nil
        )
        {
            self.defaultValue = defaultValue
            self.description = description
            self.noEcho = noEcho
            self.parameterKey = parameterKey
        }
    }

}

extension CloudFormationClientTypes {
    public enum TemplateStage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case original
        case processed
        case sdkUnknown(Swift.String)

        public static var allCases: [TemplateStage] {
            return [
                .original,
                .processed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .original: return "Original"
            case .processed: return "Processed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TemplateStage(rawValue: rawValue) ?? TemplateStage.sdkUnknown(rawValue)
        }
    }
}

extension TokenAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TokenAlreadyExistsException(message: \(Swift.String(describing: message)))"}
}

extension TokenAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TokenAlreadyExistsExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A client request token already exists.</p>
public struct TokenAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TokenAlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TokenAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TypeNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TypeNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension TypeNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ErrorResponseContainer<TypeNotFoundExceptionBody> = try responseDecoder.decode(responseBody: data)
            self.message = output.error.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified type does not exist in the CloudFormation registry.</p>
public struct TypeNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TypeNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TypeNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudFormationClientTypes.TypeSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultVersionId = "DefaultVersionId"
        case description = "Description"
        case lastUpdated = "LastUpdated"
        case type = "Type"
        case typeArn = "TypeArn"
        case typeName = "TypeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let defaultVersionId = defaultVersionId {
            try container.encode(defaultVersionId, forKey: ClientRuntime.Key("DefaultVersionId"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let lastUpdated = lastUpdated {
            try container.encode(ClientRuntime.TimestampWrapper(lastUpdated, format: .dateTime), forKey: ClientRuntime.Key("lastUpdated"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeArn = typeArn {
            try container.encode(typeArn, forKey: ClientRuntime.Key("TypeArn"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let typeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeArn)
        typeArn = typeArnDecoded
        let lastUpdatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdated)
        var lastUpdatedBuffer:ClientRuntime.Date? = nil
        if let lastUpdatedDecoded = lastUpdatedDecoded {
            lastUpdatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(lastUpdatedDecoded, format: .dateTime)
        }
        lastUpdated = lastUpdatedBuffer
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension CloudFormationClientTypes.TypeSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TypeSummary(defaultVersionId: \(Swift.String(describing: defaultVersionId)), description: \(Swift.String(describing: description)), lastUpdated: \(Swift.String(describing: lastUpdated)), type: \(Swift.String(describing: type)), typeArn: \(Swift.String(describing: typeArn)), typeName: \(Swift.String(describing: typeName)))"}
}

extension CloudFormationClientTypes {
    /// <p>Contains summary information about the specified CloudFormation type.</p>
    public struct TypeSummary: Swift.Equatable {
        /// <p>The ID of the default version of the type. The default version is used when the type version is not specified.</p>
        ///          <p>To set the default version of a type, use <code>
        ///                <a>SetTypeDefaultVersion</a>
        ///             </code>. </p>
        public let defaultVersionId: Swift.String?
        /// <p>The description of the type.</p>
        public let description: Swift.String?
        /// <p>When the current default version of the type was registered.</p>
        public let lastUpdated: ClientRuntime.Date?
        /// <p>The kind of type.</p>
        public let type: CloudFormationClientTypes.RegistryType?
        /// <p>The Amazon Resource Name (ARN) of the type.</p>
        public let typeArn: Swift.String?
        /// <p>The name of the type.</p>
        public let typeName: Swift.String?

        public init (
            defaultVersionId: Swift.String? = nil,
            description: Swift.String? = nil,
            lastUpdated: ClientRuntime.Date? = nil,
            type: CloudFormationClientTypes.RegistryType? = nil,
            typeArn: Swift.String? = nil,
            typeName: Swift.String? = nil
        )
        {
            self.defaultVersionId = defaultVersionId
            self.description = description
            self.lastUpdated = lastUpdated
            self.type = type
            self.typeArn = typeArn
            self.typeName = typeName
        }
    }

}

extension CloudFormationClientTypes.TypeVersionSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case description = "Description"
        case isDefaultVersion = "IsDefaultVersion"
        case timeCreated = "TimeCreated"
        case type = "Type"
        case typeName = "TypeName"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let arn = arn {
            try container.encode(arn, forKey: ClientRuntime.Key("Arn"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let isDefaultVersion = isDefaultVersion {
            try container.encode(isDefaultVersion, forKey: ClientRuntime.Key("IsDefaultVersion"))
        }
        if let timeCreated = timeCreated {
            try container.encode(ClientRuntime.TimestampWrapper(timeCreated, format: .dateTime), forKey: ClientRuntime.Key("timeCreated"))
        }
        if let type = type {
            try container.encode(type, forKey: ClientRuntime.Key("Type"))
        }
        if let typeName = typeName {
            try container.encode(typeName, forKey: ClientRuntime.Key("TypeName"))
        }
        if let versionId = versionId {
            try container.encode(versionId, forKey: ClientRuntime.Key("VersionId"))
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(CloudFormationClientTypes.RegistryType.self, forKey: .type)
        type = typeDecoded
        let typeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .typeName)
        typeName = typeNameDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let timeCreatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timeCreated)
        var timeCreatedBuffer:ClientRuntime.Date? = nil
        if let timeCreatedDecoded = timeCreatedDecoded {
            timeCreatedBuffer = try ClientRuntime.TimestampWrapperDecoder.parseDateStringValue(timeCreatedDecoded, format: .dateTime)
        }
        timeCreated = timeCreatedBuffer
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension CloudFormationClientTypes.TypeVersionSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TypeVersionSummary(arn: \(Swift.String(describing: arn)), description: \(Swift.String(describing: description)), isDefaultVersion: \(Swift.String(describing: isDefaultVersion)), timeCreated: \(Swift.String(describing: timeCreated)), type: \(Swift.String(describing: type)), typeName: \(Swift.String(describing: typeName)), versionId: \(Swift.String(describing: versionId)))"}
}

extension CloudFormationClientTypes {
    /// <p>Contains summary information about a specific version of a CloudFormation type.</p>
    public struct TypeVersionSummary: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the type version.</p>
        public let arn: Swift.String?
        /// <p>The description of the type version.</p>
        public let description: Swift.String?
        /// <p>Whether the specified type version is set as the default version.</p>
        public let isDefaultVersion: Swift.Bool?
        /// <p>When the version was registered.</p>
        public let timeCreated: ClientRuntime.Date?
        /// <p>The kind of type.</p>
        public let type: CloudFormationClientTypes.RegistryType?
        /// <p>The name of the type.</p>
        public let typeName: Swift.String?
        /// <p>The ID of a specific version of the type. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the type version when it is registered.</p>
        public let versionId: Swift.String?

        public init (
            arn: Swift.String? = nil,
            description: Swift.String? = nil,
            isDefaultVersion: Swift.Bool? = nil,
            timeCreated: ClientRuntime.Date? = nil,
            type: CloudFormationClientTypes.RegistryType? = nil,
            typeName: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.arn = arn
            self.description = description
            self.isDefaultVersion = isDefaultVersion
            self.timeCreated = timeCreated
            self.type = type
            self.typeName = typeName
            self.versionId = versionId
        }
    }

}

public struct UpdateStackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStackOutputError>
}

extension UpdateStackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStackInput(capabilities: \(Swift.String(describing: capabilities)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), notificationARNs: \(Swift.String(describing: notificationARNs)), parameters: \(Swift.String(describing: parameters)), resourceTypes: \(Swift.String(describing: resourceTypes)), roleARN: \(Swift.String(describing: roleARN)), rollbackConfiguration: \(Swift.String(describing: rollbackConfiguration)), stackName: \(Swift.String(describing: stackName)), stackPolicyBody: \(Swift.String(describing: stackPolicyBody)), stackPolicyDuringUpdateBody: \(Swift.String(describing: stackPolicyDuringUpdateBody)), stackPolicyDuringUpdateURL: \(Swift.String(describing: stackPolicyDuringUpdateURL)), stackPolicyURL: \(Swift.String(describing: stackPolicyURL)), tags: \(Swift.String(describing: tags)), templateBody: \(Swift.String(describing: templateBody)), templateURL: \(Swift.String(describing: templateURL)), usePreviousTemplate: \(Swift.String(describing: usePreviousTemplate)))"}
}

extension UpdateStackInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let capabilities = capabilities {
            var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
            for (index0, capability0) in capabilities.enumerated() {
                try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let clientRequestToken = clientRequestToken {
            try container.encode(clientRequestToken, forKey: ClientRuntime.Key("ClientRequestToken"))
        }
        if let notificationARNs = notificationARNs {
            var notificationARNsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("NotificationARNs"))
            for (index0, notificationarn0) in notificationARNs.enumerated() {
                try notificationARNsContainer.encode(notificationarn0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourceTypes = resourceTypes {
            var resourceTypesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ResourceTypes"))
            for (index0, resourcetype0) in resourceTypes.enumerated() {
                try resourceTypesContainer.encode(resourcetype0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let roleARN = roleARN {
            try container.encode(roleARN, forKey: ClientRuntime.Key("RoleARN"))
        }
        if let rollbackConfiguration = rollbackConfiguration {
            try container.encode(rollbackConfiguration, forKey: ClientRuntime.Key("RollbackConfiguration"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        if let stackPolicyBody = stackPolicyBody {
            try container.encode(stackPolicyBody, forKey: ClientRuntime.Key("StackPolicyBody"))
        }
        if let stackPolicyDuringUpdateBody = stackPolicyDuringUpdateBody {
            try container.encode(stackPolicyDuringUpdateBody, forKey: ClientRuntime.Key("StackPolicyDuringUpdateBody"))
        }
        if let stackPolicyDuringUpdateURL = stackPolicyDuringUpdateURL {
            try container.encode(stackPolicyDuringUpdateURL, forKey: ClientRuntime.Key("StackPolicyDuringUpdateURL"))
        }
        if let stackPolicyURL = stackPolicyURL {
            try container.encode(stackPolicyURL, forKey: ClientRuntime.Key("StackPolicyURL"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let usePreviousTemplate = usePreviousTemplate {
            try container.encode(usePreviousTemplate, forKey: ClientRuntime.Key("UsePreviousTemplate"))
        }
        try container.encode("UpdateStack", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateStackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStackOutputError>
}

public struct UpdateStackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStackOutputError>
}

/// <p>The input for an <a>UpdateStack</a> action.</p>
public struct UpdateStackInput: Swift.Equatable {
    /// <p>In some cases, you must explicitly acknowledge that your stack template contains certain
    ///          capabilities in order for AWS CloudFormation to update the stack.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_IAM</code> and <code>CAPABILITY_NAMED_IAM</code>
    ///                </p>
    ///                <p>Some stack templates might include resources that can affect permissions in
    ///                your AWS account; for example, by creating new AWS Identity and Access Management
    ///                (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one
    ///                of these capabilities.</p>
    ///                <p>The following IAM resources require you to specify either the
    ///                   <code>CAPABILITY_IAM</code> or <code>CAPABILITY_NAMED_IAM</code>
    ///                capability.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>If you have IAM resources, you can specify either capability. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you have IAM resources with custom names, you <i>must</i>
    ///                      specify <code>CAPABILITY_NAMED_IAM</code>. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you don't specify either of these capabilities, AWS CloudFormation returns an
    ///                         <code>InsufficientCapabilities</code> error.</p>
    ///                   </li>
    ///                </ul>
    ///                <p>If your stack template contains these resources, we recommend that you review
    ///                all permissions associated with them and edit their permissions if
    ///                necessary.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html">
    ///                         AWS::IAM::AccessKey</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html">
    ///                         AWS::IAM::Group</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"> AWS::IAM::InstanceProfile</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html">
    ///                         AWS::IAM::Policy</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html">
    ///                         AWS::IAM::Role</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html">
    ///                         AWS::IAM::User</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"> AWS::IAM::UserToGroupAddition</a>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM
    ///                   Resources in AWS CloudFormation Templates</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_AUTO_EXPAND</code>
    ///                </p>
    ///                <p>Some template contain macros. Macros perform custom processing on templates; this
    ///                can include simple actions like find-and-replace operations, all the way to extensive
    ///                transformations of entire templates. Because of this, users typically create a change
    ///                set from the processed template, so that they can review the changes resulting from
    ///                the macros before actually updating the stack. If your stack template contains one or
    ///                more macros, and you choose to update a stack directly from the processed template,
    ///                without first reviewing the resulting changes in a change set, you must acknowledge
    ///                this capability. This includes the <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html">AWS::Include</a> and <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html">AWS::Serverless</a> transforms, which are macros hosted by AWS CloudFormation.</p>
    ///                <p>If you want to update a stack
    ///                from a stack template that contains macros <i>and</i> nested stacks,
    ///                you must update the stack directly from the template using this capability.</p>
    ///                <important>
    ///                   <p>You should only update stacks directly from a stack template that contains
    ///                   macros if you know what processing the macro performs.</p>
    ///                   <p>Each macro relies on an underlying Lambda service function for processing stack
    ///                   templates. Be aware that the Lambda function owner can update the function
    ///                   operation without AWS CloudFormation being notified.</p>
    ///                </important>
    ///                <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html">Using
    ///                   AWS CloudFormation Macros to Perform Custom Processing on
    ///                Templates</a>.</p>
    ///             </li>
    ///          </ul>
    public let capabilities: [CloudFormationClientTypes.Capability]?
    /// <p>A unique identifier for this <code>UpdateStack</code> request. Specify this token if
    ///          you plan to retry requests so that AWS CloudFormation knows that you're not attempting to
    ///          update a stack with the same name. You might retry <code>UpdateStack</code> requests to
    ///          ensure that AWS CloudFormation successfully received them.</p>
    ///          <p>All events triggered by a given stack operation are assigned the same client request
    ///          token, which you can use to track operations. For example, if you execute a
    ///          <code>CreateStack</code> operation with the token <code>token1</code>, then all the
    ///          <code>StackEvents</code> generated by that operation will have
    ///          <code>ClientRequestToken</code> set as <code>token1</code>.</p>
    ///          <p>In the console, stack operations display the client request token on the Events tab.
    ///          Stack operations that are initiated from the console use the token format
    ///          <i>Console-StackOperation-ID</i>, which helps you easily identify the
    ///          stack operation . For example, if you create a stack using the console, each stack event
    ///          would be assigned the same token in the following format:
    ///          <code>Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002</code>. </p>
    public let clientRequestToken: Swift.String?
    /// <p>Amazon Simple Notification Service topic Amazon Resource Names (ARNs) that AWS
    ///          CloudFormation associates with the stack. Specify an empty list to remove all notification
    ///          topics.</p>
    public let notificationARNs: [Swift.String]?
    /// <p>A list of <code>Parameter</code> structures that specify input parameters for the
    ///          stack. For more information, see the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html">Parameter</a> data
    ///          type.</p>
    public let parameters: [CloudFormationClientTypes.Parameter]?
    /// <p>The template resource types that you have permissions to work with for this update
    ///          stack action, such as <code>AWS::EC2::Instance</code>, <code>AWS::EC2::*</code>, or
    ///             <code>Custom::MyCustomInstance</code>.</p>
    ///          <p>If the list of resource types doesn't include a resource that you're updating, the
    ///          stack update fails. By default, AWS CloudFormation grants permissions to all resource
    ///          types. AWS Identity and Access Management (IAM) uses this parameter for AWS
    ///          CloudFormation-specific condition keys in IAM policies. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html">Controlling Access with AWS Identity and Access Management</a>.</p>
    public let resourceTypes: [Swift.String]?
    /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role
    ///          that AWS CloudFormation assumes to update the stack. AWS CloudFormation uses the role's
    ///          credentials to make calls on your behalf. AWS CloudFormation always uses this role for all
    ///          future operations on the stack. As long as users have permission to operate on the stack,
    ///          AWS CloudFormation uses this role even if the users don't have permission to pass it.
    ///          Ensure that the role grants least privilege.</p>
    ///          <p>If you don't specify a value, AWS CloudFormation uses the role that was previously
    ///          associated with the stack. If no role is available, AWS CloudFormation uses a temporary
    ///          session that is generated from your user credentials.</p>
    public let roleARN: Swift.String?
    /// <p>The rollback triggers for AWS CloudFormation to monitor during stack creation and
    ///          updating operations, and for the specified monitoring period afterwards.</p>
    public let rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration?
    /// <p>The name or unique stack ID of the stack to update.</p>
    public let stackName: Swift.String?
    /// <p>Structure containing a new stack policy body. You can specify either the
    ///             <code>StackPolicyBody</code> or the <code>StackPolicyURL</code> parameter, but not
    ///          both.</p>
    ///          <p>You might update the stack policy, for example, in order to protect a new resource
    ///          that you created during a stack update. If you do not specify a stack policy, the current
    ///          policy that is associated with the stack is unchanged.</p>
    public let stackPolicyBody: Swift.String?
    /// <p>Structure containing the temporary overriding stack policy body. You can specify
    ///          either the <code>StackPolicyDuringUpdateBody</code> or the
    ///             <code>StackPolicyDuringUpdateURL</code> parameter, but not both.</p>
    ///          <p>If you want to update protected resources, specify a temporary overriding stack
    ///          policy during this update. If you do not specify a stack policy, the current policy that is
    ///          associated with the stack will be used.</p>
    public let stackPolicyDuringUpdateBody: Swift.String?
    /// <p>Location of a file containing the temporary overriding stack policy. The URL must
    ///          point to a policy (max size: 16KB) located in an S3 bucket in
    ///          the same Region as the stack. You can specify either the
    ///             <code>StackPolicyDuringUpdateBody</code> or the <code>StackPolicyDuringUpdateURL</code>
    ///          parameter, but not both.</p>
    ///          <p>If you want to update protected resources, specify a temporary overriding stack
    ///          policy during this update. If you do not specify a stack policy, the current policy that is
    ///          associated with the stack will be used.</p>
    public let stackPolicyDuringUpdateURL: Swift.String?
    /// <p>Location of a file containing the updated stack policy. The URL must point to a
    ///          policy (max size: 16KB) located in an S3 bucket in the same
    ///          Region as the stack. You can specify either the <code>StackPolicyBody</code> or the
    ///             <code>StackPolicyURL</code> parameter, but not both.</p>
    ///          <p>You might update the stack policy, for example, in order to protect a new resource
    ///          that you created during a stack update. If you do not specify a stack policy, the current
    ///          policy that is associated with the stack is unchanged.</p>
    public let stackPolicyURL: Swift.String?
    /// <p>Key-value pairs to associate with this stack. AWS CloudFormation also propagates
    ///          these tags to supported resources in the stack. You can specify a maximum number of 50
    ///          tags.</p>
    ///          <p>If you don't specify this parameter, AWS CloudFormation doesn't modify the stack's
    ///          tags. If you specify an empty value, AWS CloudFormation removes all associated
    ///          tags.</p>
    public let tags: [CloudFormationClientTypes.Tag]?
    /// <p>Structure containing the template body with a minimum length of 1 byte and a maximum
    ///          length of 51,200 bytes. (For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.)</p>
    ///          <p>Conditional: You must specify only one of the following parameters:
    ///             <code>TemplateBody</code>, <code>TemplateURL</code>, or set the
    ///             <code>UsePreviousTemplate</code> to <code>true</code>.</p>
    public let templateBody: Swift.String?
    /// <p>Location of file containing the template body. The URL must point to a template that
    ///          is located in an Amazon S3 bucket or a Systems Manager document. For more information, go to
    ///             <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must specify only one of the following parameters:
    ///             <code>TemplateBody</code>, <code>TemplateURL</code>, or set the
    ///             <code>UsePreviousTemplate</code> to <code>true</code>.</p>
    public let templateURL: Swift.String?
    /// <p>Reuse the existing template that is associated with the stack that you are
    ///          updating.</p>
    ///          <p>Conditional: You must specify only one of the following parameters:
    ///             <code>TemplateBody</code>, <code>TemplateURL</code>, or set the
    ///             <code>UsePreviousTemplate</code> to <code>true</code>.</p>
    public let usePreviousTemplate: Swift.Bool?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        clientRequestToken: Swift.String? = nil,
        notificationARNs: [Swift.String]? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        resourceTypes: [Swift.String]? = nil,
        roleARN: Swift.String? = nil,
        rollbackConfiguration: CloudFormationClientTypes.RollbackConfiguration? = nil,
        stackName: Swift.String? = nil,
        stackPolicyBody: Swift.String? = nil,
        stackPolicyDuringUpdateBody: Swift.String? = nil,
        stackPolicyDuringUpdateURL: Swift.String? = nil,
        stackPolicyURL: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        usePreviousTemplate: Swift.Bool? = nil
    )
    {
        self.capabilities = capabilities
        self.clientRequestToken = clientRequestToken
        self.notificationARNs = notificationARNs
        self.parameters = parameters
        self.resourceTypes = resourceTypes
        self.roleARN = roleARN
        self.rollbackConfiguration = rollbackConfiguration
        self.stackName = stackName
        self.stackPolicyBody = stackPolicyBody
        self.stackPolicyDuringUpdateBody = stackPolicyDuringUpdateBody
        self.stackPolicyDuringUpdateURL = stackPolicyDuringUpdateURL
        self.stackPolicyURL = stackPolicyURL
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.usePreviousTemplate = usePreviousTemplate
    }
}

public struct UpdateStackInstancesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStackInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStackInstancesOutputError>
}

extension UpdateStackInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStackInstancesInput(accounts: \(Swift.String(describing: accounts)), callAs: \(Swift.String(describing: callAs)), deploymentTargets: \(Swift.String(describing: deploymentTargets)), operationId: \(Swift.String(describing: operationId)), operationPreferences: \(Swift.String(describing: operationPreferences)), parameterOverrides: \(Swift.String(describing: parameterOverrides)), regions: \(Swift.String(describing: regions)), stackSetName: \(Swift.String(describing: stackSetName)))"}
}

extension UpdateStackInstancesInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
            for (index0, account0) in accounts.enumerated() {
                try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let parameterOverrides = parameterOverrides {
            var parameterOverridesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("ParameterOverrides"))
            for (index0, parameter0) in parameterOverrides.enumerated() {
                try parameterOverridesContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let regions = regions {
            var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
            for (index0, region0) in regions.enumerated() {
                try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        try container.encode("UpdateStackInstances", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateStackInstancesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStackInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStackInstancesOutputError>
}

public struct UpdateStackInstancesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStackInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStackInstancesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStackInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStackInstancesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStackInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStackInstancesOutputError>
}

public struct UpdateStackInstancesInput: Swift.Equatable {
    /// <p>[Self-managed permissions] The names of one or more AWS accounts for which you want to update parameter values
    ///          for stack instances. The overridden parameter values will be applied to all stack instances
    ///          in the specified accounts and Regions.</p>
    ///          <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
    public let accounts: [Swift.String]?
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>[Service-managed permissions] The AWS Organizations accounts for which you want to update parameter values for stack instances. If your update targets OUs, the overridden parameter values only apply to the accounts that are currently in the target OUs and their child OUs. Accounts added to the target OUs and their child OUs in the future won't use the overridden values.</p>
    ///          <p>You can specify <code>Accounts</code> or <code>DeploymentTargets</code>, but not both.</p>
    public let deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// <p>The unique identifier for this stack set operation. </p>
    ///          <p>The operation ID also functions as an idempotency token, to ensure that AWS
    ///          CloudFormation performs the stack set operation only once, even if you retry the request
    ///          multiple times. You might retry stack set operation requests to ensure that AWS
    ///          CloudFormation successfully received them.</p>
    ///          <p>If you don't specify an operation ID, the SDK generates one automatically.
    ///       </p>
    public var operationId: Swift.String?
    /// <p>Preferences for how AWS CloudFormation performs this stack set operation.</p>
    public let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// <p> A list of input parameters whose values you want to update for the specified stack
    ///          instances. </p>
    ///          <p>Any overridden parameter values will be applied to all stack instances in the
    ///          specified accounts and Regions. When specifying parameters and their values, be aware of
    ///          how AWS CloudFormation sets parameter values during stack instance update
    ///          operations:</p>
    ///          <ul>
    ///             <li>
    ///                <p>To override the current value for a parameter, include the parameter and
    ///                specify its value.</p>
    ///             </li>
    ///             <li>
    ///                <p>To leave a parameter set to its present value, you can do one of the
    ///                following:</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>Do not include the parameter in the list.</p>
    ///                   </li>
    ///                   <li>
    ///                      <p>Include the parameter and specify <code>UsePreviousValue</code> as
    ///                         <code>true</code>. (You cannot specify both a value and set
    ///                         <code>UsePreviousValue</code> to <code>true</code>.)</p>
    ///                   </li>
    ///                </ul>
    ///             </li>
    ///             <li>
    ///                <p>To set all overridden parameter back to the values specified in the stack set,
    ///                specify a parameter list but do not include any parameters.</p>
    ///             </li>
    ///             <li>
    ///                <p>To leave all parameters set to their present values, do not specify this
    ///                property at all.</p>
    ///             </li>
    ///          </ul>
    ///          <p>During stack set updates, any parameter values overridden for a stack instance are
    ///          not updated, but retain their overridden value.</p>
    ///          <p>You can only override the parameter <i>values</i> that are specified in
    ///          the stack set; to add or delete a parameter itself, use <code>UpdateStackSet</code> to
    ///          update the stack set template. If you add a parameter to a template, before you can
    ///          override the parameter value specified in the stack set you must first use <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html">UpdateStackSet</a> to update all stack instances with the updated template and
    ///          parameter value specified in the stack set. Once a stack instance has been updated with the
    ///          new parameter, you can then override the parameter value using
    ///             <code>UpdateStackInstances</code>.</p>
    public let parameterOverrides: [CloudFormationClientTypes.Parameter]?
    /// <p>The names of one or more Regions in which you want to update parameter values for
    ///          stack instances. The overridden parameter values will be applied to all stack instances in
    ///          the specified accounts and Regions.</p>
    public let regions: [Swift.String]?
    /// <p>The name or unique ID of the stack set associated with the stack instances.</p>
    public let stackSetName: Swift.String?

    public init (
        accounts: [Swift.String]? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        parameterOverrides: [CloudFormationClientTypes.Parameter]? = nil,
        regions: [Swift.String]? = nil,
        stackSetName: Swift.String? = nil
    )
    {
        self.accounts = accounts
        self.callAs = callAs
        self.deploymentTargets = deploymentTargets
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.parameterOverrides = parameterOverrides
        self.regions = regions
        self.stackSetName = stackSetName
    }
}

extension UpdateStackInstancesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateStackInstancesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationIdAlreadyExistsException" : self = .operationIdAlreadyExistsException(try OperationIdAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackInstanceNotFoundException" : self = .stackInstanceNotFoundException(try StackInstanceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StaleRequestException" : self = .staleRequestException(try StaleRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateStackInstancesOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case operationIdAlreadyExistsException(OperationIdAlreadyExistsException)
    case operationInProgressException(OperationInProgressException)
    case stackInstanceNotFoundException(StackInstanceNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case staleRequestException(StaleRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStackInstancesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStackInstancesOutputResponse(operationId: \(Swift.String(describing: operationId)))"}
}

extension UpdateStackInstancesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateStackInstancesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operationId = output.operationId
        } else {
            self.operationId = nil
        }
    }
}

public struct UpdateStackInstancesOutputResponse: Swift.Equatable {
    /// <p>The unique identifier for this stack set operation. </p>
    public let operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct UpdateStackInstancesOutputResponseBody: Swift.Equatable {
    public let operationId: Swift.String?
}

extension UpdateStackInstancesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId = "OperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateStackInstancesResult"))
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

extension UpdateStackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateStackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientCapabilitiesException" : self = .insufficientCapabilitiesException(try InsufficientCapabilitiesException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TokenAlreadyExistsException" : self = .tokenAlreadyExistsException(try TokenAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateStackOutputError: Swift.Error, Swift.Equatable {
    case insufficientCapabilitiesException(InsufficientCapabilitiesException)
    case tokenAlreadyExistsException(TokenAlreadyExistsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStackOutputResponse(stackId: \(Swift.String(describing: stackId)))"}
}

extension UpdateStackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateStackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackId = output.stackId
        } else {
            self.stackId = nil
        }
    }
}

/// <p>The output for an <a>UpdateStack</a> action.</p>
public struct UpdateStackOutputResponse: Swift.Equatable {
    /// <p>Unique identifier of the stack.</p>
    public let stackId: Swift.String?

    public init (
        stackId: Swift.String? = nil
    )
    {
        self.stackId = stackId
    }
}

struct UpdateStackOutputResponseBody: Swift.Equatable {
    public let stackId: Swift.String?
}

extension UpdateStackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackId = "StackId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateStackResult"))
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
    }
}

public struct UpdateStackSetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStackSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStackSetOutputError>
}

extension UpdateStackSetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStackSetInput(accounts: \(Swift.String(describing: accounts)), administrationRoleARN: \(Swift.String(describing: administrationRoleARN)), autoDeployment: \(Swift.String(describing: autoDeployment)), callAs: \(Swift.String(describing: callAs)), capabilities: \(Swift.String(describing: capabilities)), deploymentTargets: \(Swift.String(describing: deploymentTargets)), description: \(Swift.String(describing: description)), executionRoleName: \(Swift.String(describing: executionRoleName)), operationId: \(Swift.String(describing: operationId)), operationPreferences: \(Swift.String(describing: operationPreferences)), parameters: \(Swift.String(describing: parameters)), permissionModel: \(Swift.String(describing: permissionModel)), regions: \(Swift.String(describing: regions)), stackSetName: \(Swift.String(describing: stackSetName)), tags: \(Swift.String(describing: tags)), templateBody: \(Swift.String(describing: templateBody)), templateURL: \(Swift.String(describing: templateURL)), usePreviousTemplate: \(Swift.String(describing: usePreviousTemplate)))"}
}

extension UpdateStackSetInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let accounts = accounts {
            var accountsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Accounts"))
            for (index0, account0) in accounts.enumerated() {
                try accountsContainer.encode(account0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let administrationRoleARN = administrationRoleARN {
            try container.encode(administrationRoleARN, forKey: ClientRuntime.Key("AdministrationRoleARN"))
        }
        if let autoDeployment = autoDeployment {
            try container.encode(autoDeployment, forKey: ClientRuntime.Key("AutoDeployment"))
        }
        if let callAs = callAs {
            try container.encode(callAs, forKey: ClientRuntime.Key("CallAs"))
        }
        if let capabilities = capabilities {
            var capabilitiesContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Capabilities"))
            for (index0, capability0) in capabilities.enumerated() {
                try capabilitiesContainer.encode(capability0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let deploymentTargets = deploymentTargets {
            try container.encode(deploymentTargets, forKey: ClientRuntime.Key("DeploymentTargets"))
        }
        if let description = description {
            try container.encode(description, forKey: ClientRuntime.Key("Description"))
        }
        if let executionRoleName = executionRoleName {
            try container.encode(executionRoleName, forKey: ClientRuntime.Key("ExecutionRoleName"))
        }
        if let operationId = operationId {
            try container.encode(operationId, forKey: ClientRuntime.Key("OperationId"))
        }
        if let operationPreferences = operationPreferences {
            try container.encode(operationPreferences, forKey: ClientRuntime.Key("OperationPreferences"))
        }
        if let parameters = parameters {
            var parametersContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Parameters"))
            for (index0, parameter0) in parameters.enumerated() {
                try parametersContainer.encode(parameter0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let permissionModel = permissionModel {
            try container.encode(permissionModel, forKey: ClientRuntime.Key("PermissionModel"))
        }
        if let regions = regions {
            var regionsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Regions"))
            for (index0, region0) in regions.enumerated() {
                try regionsContainer.encode(region0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let stackSetName = stackSetName {
            try container.encode(stackSetName, forKey: ClientRuntime.Key("StackSetName"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: ClientRuntime.Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: ClientRuntime.Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        if let usePreviousTemplate = usePreviousTemplate {
            try container.encode(usePreviousTemplate, forKey: ClientRuntime.Key("UsePreviousTemplate"))
        }
        try container.encode("UpdateStackSet", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateStackSetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStackSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStackSetOutputError>
}

public struct UpdateStackSetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStackSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStackSetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStackSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStackSetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStackSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStackSetOutputError>
}

public struct UpdateStackSetInput: Swift.Equatable {
    /// <p>[Self-managed permissions] The accounts in which to update associated stack instances. If you specify accounts, you
    ///          must also specify the Regions in which to update stack set instances.</p>
    ///          <p>To update <i>all</i> the stack instances associated with this stack set,
    ///          do not specify the <code>Accounts</code> or <code>Regions</code> properties.</p>
    ///          <p>If the stack set update includes changes to the template (that is, if the
    ///             <code>TemplateBody</code> or <code>TemplateURL</code> properties are specified), or the
    ///             <code>Parameters</code> property, AWS CloudFormation marks all stack instances with a status of
    ///             <code>OUTDATED</code> prior to updating the stack instances in the specified accounts
    ///          and Regions. If the stack set update does not include changes to the template or
    ///          parameters, AWS CloudFormation updates the stack instances in the specified accounts and Regions, while
    ///          leaving all other stack instances with their existing stack instance status. </p>
    public let accounts: [Swift.String]?
    /// <p>The Amazon Resource Number (ARN) of the IAM role to use to update this stack set.</p>
    ///          <p>Specify an IAM role only if you are using customized administrator roles to control
    ///          which users or groups can manage specific stack sets within the same administrator account.
    ///          For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html">Granting
    ///             Permissions for Stack Set Operations</a> in the
    ///             <i>AWS CloudFormation User Guide</i>.</p>
    ///          <p>If you specified a customized administrator role when you created the stack set, you
    ///          must specify a customized administrator role, even if it is the same customized
    ///          administrator role used with this stack set previously.</p>
    public let administrationRoleARN: Swift.String?
    /// <p>[Service-managed permissions] Describes whether StackSets automatically deploys to AWS Organizations accounts that are added to a target organization or organizational unit (OU).</p>
    ///          <p>If you specify <code>AutoDeployment</code>, do not specify <code>DeploymentTargets</code> or <code>Regions</code>.</p>
    public let autoDeployment: CloudFormationClientTypes.AutoDeployment?
    /// <p>[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account.</p>
    ///          <p>By default, <code>SELF</code> is specified. Use <code>SELF</code> for stack sets with self-managed permissions.</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you are signed in to the management account, specify <code>SELF</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>If you are signed in to a delegated administrator account, specify <code>DELEGATED_ADMIN</code>.</p>
    ///                <p>Your AWS account must be registered as a delegated administrator in the management account. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html">Register a delegated administrator</a> in the <i>AWS CloudFormation User Guide</i>.</p>
    ///             </li>
    ///          </ul>
    public let callAs: CloudFormationClientTypes.CallAs?
    /// <p>In some cases, you must explicitly acknowledge that your stack template contains certain
    ///          capabilities in order for AWS CloudFormation to update the stack set and its associated stack
    ///          instances.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_IAM</code> and <code>CAPABILITY_NAMED_IAM</code>
    ///                </p>
    ///                <p>Some stack templates might include resources that can affect permissions in
    ///                your AWS account; for example, by creating new AWS Identity and Access Management
    ///                (IAM) users. For those stacks sets, you must explicitly acknowledge this by
    ///                specifying one of these capabilities.</p>
    ///                <p>The following IAM resources require you to specify either the
    ///                   <code>CAPABILITY_IAM</code> or <code>CAPABILITY_NAMED_IAM</code>
    ///                capability.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>If you have IAM resources, you can specify either capability. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you have IAM resources with custom names, you <i>must</i>
    ///                      specify <code>CAPABILITY_NAMED_IAM</code>. </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>If you don't specify either of these capabilities, AWS CloudFormation returns an
    ///                         <code>InsufficientCapabilities</code> error.</p>
    ///                   </li>
    ///                </ul>
    ///                <p>If your stack template contains these resources, we recommend that you review
    ///                all permissions associated with them and edit their permissions if
    ///                necessary.</p>
    ///                <ul>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html">
    ///                         AWS::IAM::AccessKey</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html">
    ///                         AWS::IAM::Group</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"> AWS::IAM::InstanceProfile</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html">
    ///                         AWS::IAM::Policy</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html">
    ///                         AWS::IAM::Role</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html">
    ///                         AWS::IAM::User</a>
    ///                      </p>
    ///                   </li>
    ///                   <li>
    ///                      <p>
    ///                         <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"> AWS::IAM::UserToGroupAddition</a>
    ///                      </p>
    ///                   </li>
    ///                </ul>
    ///                <p>For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM
    ///                   Resources in AWS CloudFormation Templates</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>CAPABILITY_AUTO_EXPAND</code>
    ///                </p>
    ///                <p>Some templates reference macros. If your stack set template references one or more macros,
    ///                you must update the stack set directly from the processed template, without first
    ///                reviewing the resulting changes in a change set. To update the stack set directly, you must acknowledge this
    ///                capability. For more information, see <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html">Using AWS CloudFormation Macros to Perform Custom Processing on
    ///                   Templates</a>.</p>
    ///                <important>
    ///                   <p>Stack sets with service-managed permissions
    ///                   do not currently support the use of macros in templates. (This includes
    ///                   the <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html">AWS::Include</a> and <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html">AWS::Serverless</a>
    ///                   transforms, which are macros hosted by AWS CloudFormation.) Even if you specify this
    ///                   capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will
    ///                   fail.</p>
    ///                </important>
    ///             </li>
    ///          </ul>
    public let capabilities: [CloudFormationClientTypes.Capability]?
    /// <p>[Service-managed permissions] The AWS Organizations accounts in which to update associated stack instances.</p>
    ///          <p>To update all the stack instances associated with this stack set, do not specify <code>DeploymentTargets</code> or <code>Regions</code>.</p>
    ///          <p>If the stack set update includes changes to the template (that is, if <code>TemplateBody</code> or <code>TemplateURL</code> is specified), or the <code>Parameters</code>, AWS CloudFormation marks all stack instances with a status of <code>OUTDATED</code> prior to updating the stack instances in the specified accounts and Regions. If the stack set update does not include changes to the template or parameters, AWS CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.</p>
    public let deploymentTargets: CloudFormationClientTypes.DeploymentTargets?
    /// <p>A brief description of updates that you are making.</p>
    public let description: Swift.String?
    /// <p>The name of the IAM execution role to use to update the stack set. If you do not specify
    ///          an execution role, AWS CloudFormation uses the <code>AWSCloudFormationStackSetExecutionRole</code> role
    ///          for the stack set operation.</p>
    ///          <p>Specify an IAM role only if you are using customized execution roles to control which
    ///          stack resources users and groups can include in their stack sets.
    ///       </p>
    ///          <p> If you specify a customized execution role, AWS CloudFormation uses that role to update the stack.
    ///          If you do not specify a customized execution role, AWS CloudFormation performs the update using the role
    ///          previously associated with the stack set, so long as you have permissions to perform
    ///          operations on the stack set.</p>
    public let executionRoleName: Swift.String?
    /// <p>The unique ID for this stack set operation. </p>
    ///          <p>The operation ID also functions as an idempotency token, to ensure that AWS
    ///          CloudFormation performs the stack set operation only once, even if you retry the request
    ///          multiple times. You might retry stack set operation requests to ensure that AWS
    ///          CloudFormation successfully received them.</p>
    ///          <p>If you don't specify an operation ID, AWS CloudFormation generates one
    ///          automatically.</p>
    ///          <p>Repeating this stack set operation with a new operation ID retries all stack
    ///          instances whose status is <code>OUTDATED</code>. </p>
    public var operationId: Swift.String?
    /// <p>Preferences for how AWS CloudFormation performs this stack set operation.</p>
    public let operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences?
    /// <p>A list of input parameters for the stack set template. </p>
    public let parameters: [CloudFormationClientTypes.Parameter]?
    /// <p>Describes how the IAM roles required for stack set operations are created. You cannot modify <code>PermissionModel</code> if there are stack instances associated with your stack set.</p>
    ///          <ul>
    ///             <li>
    ///                <p>With <code>self-managed</code> permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html">Grant Self-Managed Stack Set Permissions</a>.</p>
    ///             </li>
    ///             <li>
    ///                <p>With <code>service-managed</code> permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by AWS Organizations. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html">Grant Service-Managed Stack Set Permissions</a>.</p>
    ///             </li>
    ///          </ul>
    public let permissionModel: CloudFormationClientTypes.PermissionModels?
    /// <p>The Regions in which to update associated stack instances. If you specify Regions, you
    ///          must also specify accounts in which to update stack set instances.</p>
    ///          <p>To update <i>all</i> the stack instances associated with this stack set,
    ///          do not specify the <code>Accounts</code> or <code>Regions</code> properties.</p>
    ///          <p>If the stack set update includes changes to the template (that is, if the
    ///             <code>TemplateBody</code> or <code>TemplateURL</code> properties are specified), or the
    ///             <code>Parameters</code> property, AWS CloudFormation marks all stack instances with a status of
    ///             <code>OUTDATED</code> prior to updating the stack instances in the specified accounts
    ///          and Regions. If the stack set update does not include changes to the template or
    ///          parameters, AWS CloudFormation updates the stack instances in the specified accounts and Regions, while
    ///          leaving all other stack instances with their existing stack instance status. </p>
    public let regions: [Swift.String]?
    /// <p>The name or unique ID of the stack set that you want to update.</p>
    public let stackSetName: Swift.String?
    /// <p>The key-value pairs to associate with this stack set and the stacks created from it.
    ///          AWS CloudFormation also propagates these tags to supported resources that are created in
    ///          the stacks. You can specify a maximum number of 50 tags.</p>
    ///          <p>If you specify tags for this parameter, those tags replace any list of tags that are
    ///          currently associated with this stack set. This means:</p>
    ///          <ul>
    ///             <li>
    ///                <p>If you don't specify this parameter, AWS CloudFormation doesn't modify the
    ///                stack's tags. </p>
    ///             </li>
    ///             <li>
    ///                <p>If you specify <i>any</i> tags using this parameter, you must
    ///                specify <i>all</i> the tags that you want associated with this stack
    ///                set, even tags you've specifed before (for example, when creating the stack set or
    ///                during a previous update of the stack set.). Any tags that you don't include in the
    ///                updated list of tags are removed from the stack set, and therefore from the stacks
    ///                and resources as well. </p>
    ///             </li>
    ///             <li>
    ///                <p>If you specify an empty value, AWS CloudFormation removes all currently
    ///                associated tags.</p>
    ///             </li>
    ///          </ul>
    ///          <p>If you specify new tags as part of an <code>UpdateStackSet</code> action, AWS
    ///          CloudFormation checks to see if you have the required IAM permission to tag resources. If
    ///          you omit tags that are currently associated with the stack set from the list of tags you
    ///          specify, AWS CloudFormation assumes that you want to remove those tags from the stack set,
    ///          and checks to see if you have permission to untag resources. If you don't have the
    ///          necessary permission(s), the entire <code>UpdateStackSet</code> action fails with an
    ///             <code>access denied</code> error, and the stack set is not updated.</p>
    public let tags: [CloudFormationClientTypes.Tag]?
    /// <p>The structure that contains the template body, with a minimum length of 1 byte and a
    ///          maximum length of 51,200 bytes. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must specify only one of the following parameters:
    ///             <code>TemplateBody</code> or <code>TemplateURL</code>—or set
    ///             <code>UsePreviousTemplate</code> to true.</p>
    public let templateBody: Swift.String?
    /// <p>The location of the file that contains the template body. The URL must point to a
    ///          template (maximum size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems
    ///          Manager document. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must specify only one of the following parameters:
    ///             <code>TemplateBody</code> or <code>TemplateURL</code>—or set
    ///             <code>UsePreviousTemplate</code> to true. </p>
    public let templateURL: Swift.String?
    /// <p>Use the existing template that's associated with the stack set that you're
    ///          updating.</p>
    ///          <p>Conditional: You must specify only one of the following parameters:
    ///             <code>TemplateBody</code> or <code>TemplateURL</code>—or set
    ///             <code>UsePreviousTemplate</code> to true. </p>
    public let usePreviousTemplate: Swift.Bool?

    public init (
        accounts: [Swift.String]? = nil,
        administrationRoleARN: Swift.String? = nil,
        autoDeployment: CloudFormationClientTypes.AutoDeployment? = nil,
        callAs: CloudFormationClientTypes.CallAs? = nil,
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        deploymentTargets: CloudFormationClientTypes.DeploymentTargets? = nil,
        description: Swift.String? = nil,
        executionRoleName: Swift.String? = nil,
        operationId: Swift.String? = nil,
        operationPreferences: CloudFormationClientTypes.StackSetOperationPreferences? = nil,
        parameters: [CloudFormationClientTypes.Parameter]? = nil,
        permissionModel: CloudFormationClientTypes.PermissionModels? = nil,
        regions: [Swift.String]? = nil,
        stackSetName: Swift.String? = nil,
        tags: [CloudFormationClientTypes.Tag]? = nil,
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil,
        usePreviousTemplate: Swift.Bool? = nil
    )
    {
        self.accounts = accounts
        self.administrationRoleARN = administrationRoleARN
        self.autoDeployment = autoDeployment
        self.callAs = callAs
        self.capabilities = capabilities
        self.deploymentTargets = deploymentTargets
        self.description = description
        self.executionRoleName = executionRoleName
        self.operationId = operationId
        self.operationPreferences = operationPreferences
        self.parameters = parameters
        self.permissionModel = permissionModel
        self.regions = regions
        self.stackSetName = stackSetName
        self.tags = tags
        self.templateBody = templateBody
        self.templateURL = templateURL
        self.usePreviousTemplate = usePreviousTemplate
    }
}

extension UpdateStackSetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateStackSetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationIdAlreadyExistsException" : self = .operationIdAlreadyExistsException(try OperationIdAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationInProgressException" : self = .operationInProgressException(try OperationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackInstanceNotFoundException" : self = .stackInstanceNotFoundException(try StackInstanceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StackSetNotFoundException" : self = .stackSetNotFoundException(try StackSetNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "StaleRequestException" : self = .staleRequestException(try StaleRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateStackSetOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case operationIdAlreadyExistsException(OperationIdAlreadyExistsException)
    case operationInProgressException(OperationInProgressException)
    case stackInstanceNotFoundException(StackInstanceNotFoundException)
    case stackSetNotFoundException(StackSetNotFoundException)
    case staleRequestException(StaleRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStackSetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStackSetOutputResponse(operationId: \(Swift.String(describing: operationId)))"}
}

extension UpdateStackSetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateStackSetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.operationId = output.operationId
        } else {
            self.operationId = nil
        }
    }
}

public struct UpdateStackSetOutputResponse: Swift.Equatable {
    /// <p>The unique ID for this stack set operation.</p>
    public let operationId: Swift.String?

    public init (
        operationId: Swift.String? = nil
    )
    {
        self.operationId = operationId
    }
}

struct UpdateStackSetOutputResponseBody: Swift.Equatable {
    public let operationId: Swift.String?
}

extension UpdateStackSetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case operationId = "OperationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateStackSetResult"))
        let operationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationId)
        operationId = operationIdDecoded
    }
}

public struct UpdateTerminationProtectionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTerminationProtectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTerminationProtectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTerminationProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTerminationProtectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTerminationProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTerminationProtectionOutputError>
}

extension UpdateTerminationProtectionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTerminationProtectionInput(enableTerminationProtection: \(Swift.String(describing: enableTerminationProtection)), stackName: \(Swift.String(describing: stackName)))"}
}

extension UpdateTerminationProtectionInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let enableTerminationProtection = enableTerminationProtection {
            try container.encode(enableTerminationProtection, forKey: ClientRuntime.Key("EnableTerminationProtection"))
        }
        if let stackName = stackName {
            try container.encode(stackName, forKey: ClientRuntime.Key("StackName"))
        }
        try container.encode("UpdateTerminationProtection", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct UpdateTerminationProtectionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTerminationProtectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTerminationProtectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTerminationProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTerminationProtectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTerminationProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTerminationProtectionOutputError>
}

public struct UpdateTerminationProtectionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTerminationProtectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTerminationProtectionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTerminationProtectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTerminationProtectionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTerminationProtectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTerminationProtectionOutputError>
}

public struct UpdateTerminationProtectionInput: Swift.Equatable {
    /// <p>Whether to enable termination protection on the specified stack.</p>
    public let enableTerminationProtection: Swift.Bool?
    /// <p>The name or unique ID of the stack for which you want to set termination
    ///          protection.</p>
    public let stackName: Swift.String?

    public init (
        enableTerminationProtection: Swift.Bool? = nil,
        stackName: Swift.String? = nil
    )
    {
        self.enableTerminationProtection = enableTerminationProtection
        self.stackName = stackName
    }
}

extension UpdateTerminationProtectionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension UpdateTerminationProtectionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTerminationProtectionOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTerminationProtectionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTerminationProtectionOutputResponse(stackId: \(Swift.String(describing: stackId)))"}
}

extension UpdateTerminationProtectionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateTerminationProtectionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.stackId = output.stackId
        } else {
            self.stackId = nil
        }
    }
}

public struct UpdateTerminationProtectionOutputResponse: Swift.Equatable {
    /// <p>The unique ID of the stack.</p>
    public let stackId: Swift.String?

    public init (
        stackId: Swift.String? = nil
    )
    {
        self.stackId = stackId
    }
}

struct UpdateTerminationProtectionOutputResponseBody: Swift.Equatable {
    public let stackId: Swift.String?
}

extension UpdateTerminationProtectionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case stackId = "StackId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("UpdateTerminationProtectionResult"))
        let stackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackId)
        stackId = stackIdDecoded
    }
}

public struct ValidateTemplateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ValidateTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ValidateTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ValidateTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = ClientRuntime.HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ValidateTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ValidateTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ValidateTemplateOutputError>
}

extension ValidateTemplateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidateTemplateInput(templateBody: \(Swift.String(describing: templateBody)), templateURL: \(Swift.String(describing: templateURL)))"}
}

extension ValidateTemplateInput: Swift.Encodable, ClientRuntime.Reflection {
    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: ClientRuntime.Key.self)
        if let templateBody = templateBody {
            try container.encode(templateBody, forKey: ClientRuntime.Key("TemplateBody"))
        }
        if let templateURL = templateURL {
            try container.encode(templateURL, forKey: ClientRuntime.Key("TemplateURL"))
        }
        try container.encode("ValidateTemplate", forKey:ClientRuntime.Key("Action"))
        try container.encode("2010-05-15", forKey:ClientRuntime.Key("Version"))
    }
}

public struct ValidateTemplateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ValidateTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ValidateTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ValidateTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ValidateTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ValidateTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ValidateTemplateOutputError>
}

public struct ValidateTemplateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ValidateTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ValidateTemplateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ValidateTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ValidateTemplateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ValidateTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ValidateTemplateOutputError>
}

/// <p>The input for <a>ValidateTemplate</a> action.</p>
public struct ValidateTemplateInput: Swift.Equatable {
    /// <p>Structure containing the template body with a minimum length of 1 byte and a maximum
    ///          length of 51,200 bytes. For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must pass <code>TemplateURL</code> or <code>TemplateBody</code>. If
    ///          both are passed, only <code>TemplateBody</code> is used.</p>
    public let templateBody: Swift.String?
    /// <p>Location of file containing the template body. The URL must point to a template (max
    ///          size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document.
    ///          For more information, go to <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html">Template Anatomy</a>
    ///          in the AWS CloudFormation User Guide.</p>
    ///          <p>Conditional: You must pass <code>TemplateURL</code> or <code>TemplateBody</code>. If
    ///          both are passed, only <code>TemplateBody</code> is used.</p>
    public let templateURL: Swift.String?

    public init (
        templateBody: Swift.String? = nil,
        templateURL: Swift.String? = nil
    )
    {
        self.templateBody = templateBody
        self.templateURL = templateURL
    }
}

extension ValidateTemplateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestXMLError(httpResponse: httpResponse)
        try self.init(errorType: errorDetails.errorCode, httpResponse: httpResponse, decoder: decoder, message: errorDetails.message, requestID: errorDetails.requestId)
    }
}

extension ValidateTemplateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ValidateTemplateOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension ValidateTemplateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidateTemplateOutputResponse(capabilities: \(Swift.String(describing: capabilities)), capabilitiesReason: \(Swift.String(describing: capabilitiesReason)), declaredTransforms: \(Swift.String(describing: declaredTransforms)), description: \(Swift.String(describing: description)), parameters: \(Swift.String(describing: parameters)))"}
}

extension ValidateTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidateTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.capabilities = output.capabilities
            self.capabilitiesReason = output.capabilitiesReason
            self.declaredTransforms = output.declaredTransforms
            self.description = output.description
            self.parameters = output.parameters
        } else {
            self.capabilities = nil
            self.capabilitiesReason = nil
            self.declaredTransforms = nil
            self.description = nil
            self.parameters = nil
        }
    }
}

/// <p>The output for <a>ValidateTemplate</a> action.</p>
public struct ValidateTemplateOutputResponse: Swift.Equatable {
    /// <p>The capabilities found within the template. If your template contains IAM resources,
    ///          you must specify the CAPABILITY_IAM or CAPABILITY_NAMED_IAM value for this parameter when
    ///          you use the <a>CreateStack</a> or <a>UpdateStack</a> actions with
    ///          your template; otherwise, those actions return an InsufficientCapabilities error.</p>
    ///          <p>For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities">Acknowledging IAM Resources in AWS CloudFormation Templates</a>.</p>
    public let capabilities: [CloudFormationClientTypes.Capability]?
    /// <p>The list of resources that generated the values in the <code>Capabilities</code>
    ///          response element.</p>
    public let capabilitiesReason: Swift.String?
    /// <p>A list of the transforms that are declared in the template.</p>
    public let declaredTransforms: [Swift.String]?
    /// <p>The description found within the template.</p>
    public let description: Swift.String?
    /// <p>A list of <code>TemplateParameter</code> structures.</p>
    public let parameters: [CloudFormationClientTypes.TemplateParameter]?

    public init (
        capabilities: [CloudFormationClientTypes.Capability]? = nil,
        capabilitiesReason: Swift.String? = nil,
        declaredTransforms: [Swift.String]? = nil,
        description: Swift.String? = nil,
        parameters: [CloudFormationClientTypes.TemplateParameter]? = nil
    )
    {
        self.capabilities = capabilities
        self.capabilitiesReason = capabilitiesReason
        self.declaredTransforms = declaredTransforms
        self.description = description
        self.parameters = parameters
    }
}

struct ValidateTemplateOutputResponseBody: Swift.Equatable {
    public let parameters: [CloudFormationClientTypes.TemplateParameter]?
    public let description: Swift.String?
    public let capabilities: [CloudFormationClientTypes.Capability]?
    public let capabilitiesReason: Swift.String?
    public let declaredTransforms: [Swift.String]?
}

extension ValidateTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capabilities = "Capabilities"
        case capabilitiesReason = "CapabilitiesReason"
        case declaredTransforms = "DeclaredTransforms"
        case description = "Description"
        case parameters = "Parameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let topLevelContainer = try decoder.container(keyedBy: ClientRuntime.Key.self)
        let containerValues = try topLevelContainer.nestedContainer(keyedBy: CodingKeys.self, forKey: ClientRuntime.Key("ValidateTemplateResult"))
        if containerValues.contains(.parameters) {
            struct KeyVal0{struct member{}}
            let parametersWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .parameters)
            if let parametersWrappedContainer = parametersWrappedContainer {
                let parametersContainer = try parametersWrappedContainer.decodeIfPresent([CloudFormationClientTypes.TemplateParameter].self, forKey: .member)
                var parametersBuffer:[CloudFormationClientTypes.TemplateParameter]? = nil
                if let parametersContainer = parametersContainer {
                    parametersBuffer = [CloudFormationClientTypes.TemplateParameter]()
                    for structureContainer0 in parametersContainer {
                        parametersBuffer?.append(structureContainer0)
                    }
                }
                parameters = parametersBuffer
            } else {
                parameters = []
            }
        } else {
            parameters = nil
        }
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        if containerValues.contains(.capabilities) {
            struct KeyVal0{struct member{}}
            let capabilitiesWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .capabilities)
            if let capabilitiesWrappedContainer = capabilitiesWrappedContainer {
                let capabilitiesContainer = try capabilitiesWrappedContainer.decodeIfPresent([CloudFormationClientTypes.Capability].self, forKey: .member)
                var capabilitiesBuffer:[CloudFormationClientTypes.Capability]? = nil
                if let capabilitiesContainer = capabilitiesContainer {
                    capabilitiesBuffer = [CloudFormationClientTypes.Capability]()
                    for stringContainer0 in capabilitiesContainer {
                        capabilitiesBuffer?.append(stringContainer0)
                    }
                }
                capabilities = capabilitiesBuffer
            } else {
                capabilities = []
            }
        } else {
            capabilities = nil
        }
        let capabilitiesReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .capabilitiesReason)
        capabilitiesReason = capabilitiesReasonDecoded
        if containerValues.contains(.declaredTransforms) {
            struct KeyVal0{struct member{}}
            let declaredTransformsWrappedContainer = containerValues.nestedContainerNonThrowable(keyedBy: CollectionMemberCodingKey<KeyVal0.member>.CodingKeys.self, forKey: .declaredTransforms)
            if let declaredTransformsWrappedContainer = declaredTransformsWrappedContainer {
                let declaredTransformsContainer = try declaredTransformsWrappedContainer.decodeIfPresent([Swift.String].self, forKey: .member)
                var declaredTransformsBuffer:[Swift.String]? = nil
                if let declaredTransformsContainer = declaredTransformsContainer {
                    declaredTransformsBuffer = [Swift.String]()
                    for stringContainer0 in declaredTransformsContainer {
                        declaredTransformsBuffer?.append(stringContainer0)
                    }
                }
                declaredTransforms = declaredTransformsBuffer
            } else {
                declaredTransforms = []
            }
        } else {
            declaredTransforms = nil
        }
    }
}

extension CloudFormationClientTypes {
    public enum Visibility: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `private`
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [Visibility] {
            return [
                .private,
                .public,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .private: return "PRIVATE"
            case .public: return "PUBLIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Visibility(rawValue: rawValue) ?? Visibility.sdkUnknown(rawValue)
        }
    }
}
