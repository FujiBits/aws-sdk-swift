// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension MobileClient {
    ///
    ///             Creates an AWS Mobile Hub project.
    ///
    func createProject(input: CreateProjectInput) async throws -> CreateProjectOutputResponse
    {
        typealias createProjectContinuation = CheckedContinuation<CreateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProjectContinuation) in
            createProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Delets a project in AWS Mobile Hub.
    ///
    func deleteProject(input: DeleteProjectInput) async throws -> DeleteProjectOutputResponse
    {
        typealias deleteProjectContinuation = CheckedContinuation<DeleteProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProjectContinuation) in
            deleteProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Get the bundle details for the requested bundle id.
    ///
    func describeBundle(input: DescribeBundleInput) async throws -> DescribeBundleOutputResponse
    {
        typealias describeBundleContinuation = CheckedContinuation<DescribeBundleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeBundleContinuation) in
            describeBundle(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Gets details about a project in AWS Mobile Hub.
    ///
    func describeProject(input: DescribeProjectInput) async throws -> DescribeProjectOutputResponse
    {
        typealias describeProjectContinuation = CheckedContinuation<DescribeProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProjectContinuation) in
            describeProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Generates customized software development kit (SDK) and or tool packages
    ///             used to integrate mobile web or mobile app clients with backend AWS resources.
    ///
    func exportBundle(input: ExportBundleInput) async throws -> ExportBundleOutputResponse
    {
        typealias exportBundleContinuation = CheckedContinuation<ExportBundleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportBundleContinuation) in
            exportBundle(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Exports project configuration to a snapshot which can be downloaded and shared.
    ///             Note that mobile app push credentials are encrypted in exported projects, so they
    ///             can only be shared successfully within the same AWS account.
    ///
    func exportProject(input: ExportProjectInput) async throws -> ExportProjectOutputResponse
    {
        typealias exportProjectContinuation = CheckedContinuation<ExportProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportProjectContinuation) in
            exportProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             List all available bundles.
    ///
    func listBundles(input: ListBundlesInput) async throws -> ListBundlesOutputResponse
    {
        typealias listBundlesContinuation = CheckedContinuation<ListBundlesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listBundlesContinuation) in
            listBundles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Lists projects in AWS Mobile Hub.
    ///
    func listProjects(input: ListProjectsInput) async throws -> ListProjectsOutputResponse
    {
        typealias listProjectsContinuation = CheckedContinuation<ListProjectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProjectsContinuation) in
            listProjects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Update an existing project.
    ///
    func updateProject(input: UpdateProjectInput) async throws -> UpdateProjectOutputResponse
    {
        typealias updateProjectContinuation = CheckedContinuation<UpdateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProjectContinuation) in
            updateProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
