// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateTrustInputHeadersMiddleware: Middleware {
    public let id: String = "CreateTrustInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTrustInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTrustInput>
    public typealias MOutput = OperationOutput<CreateTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTrustOutputError>
}

public struct CreateTrustInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateTrustInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTrustInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTrustInput>
    public typealias MOutput = OperationOutput<CreateTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTrustOutputError>
}

public struct CreateTrustInputBodyMiddleware: Middleware {
    public let id: String = "CreateTrustInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateTrustInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateTrustInput>
    public typealias MOutput = OperationOutput<CreateTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateTrustOutputError>
}

extension CreateTrustInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conditionalForwarderIpAddrs = "ConditionalForwarderIpAddrs"
        case directoryId = "DirectoryId"
        case remoteDomainName = "RemoteDomainName"
        case selectiveAuth = "SelectiveAuth"
        case trustDirection = "TrustDirection"
        case trustPassword = "TrustPassword"
        case trustType = "TrustType"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionalForwarderIpAddrs = conditionalForwarderIpAddrs {
            var conditionalForwarderIpAddrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conditionalForwarderIpAddrs)
            for dnsipaddrs0 in conditionalForwarderIpAddrs {
                try conditionalForwarderIpAddrsContainer.encode(dnsipaddrs0)
            }
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let remoteDomainName = remoteDomainName {
            try encodeContainer.encode(remoteDomainName, forKey: .remoteDomainName)
        }
        if let selectiveAuth = selectiveAuth {
            try encodeContainer.encode(selectiveAuth.rawValue, forKey: .selectiveAuth)
        }
        if let trustDirection = trustDirection {
            try encodeContainer.encode(trustDirection.rawValue, forKey: .trustDirection)
        }
        if let trustPassword = trustPassword {
            try encodeContainer.encode(trustPassword, forKey: .trustPassword)
        }
        if let trustType = trustType {
            try encodeContainer.encode(trustType.rawValue, forKey: .trustType)
        }
    }
}
