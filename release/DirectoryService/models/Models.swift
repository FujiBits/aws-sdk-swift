// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

public struct AcceptSharedDirectoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptSharedDirectoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptSharedDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptSharedDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptSharedDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptSharedDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptSharedDirectoryOutputError>
}

extension AcceptSharedDirectoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptSharedDirectoryInput(sharedDirectoryId: \(Swift.String(describing: sharedDirectoryId)))"}
}

extension AcceptSharedDirectoryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sharedDirectoryId = "SharedDirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sharedDirectoryId = sharedDirectoryId {
            try encodeContainer.encode(sharedDirectoryId, forKey: .sharedDirectoryId)
        }
    }
}

public struct AcceptSharedDirectoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptSharedDirectoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptSharedDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptSharedDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptSharedDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptSharedDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptSharedDirectoryOutputError>
}

public struct AcceptSharedDirectoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptSharedDirectoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptSharedDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptSharedDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptSharedDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptSharedDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptSharedDirectoryOutputError>
}

public struct AcceptSharedDirectoryInput: Swift.Equatable {
    /// <p>Identifier of the shared directory in the directory consumer account. This identifier is
    ///       different for each directory owner account. </p>
    public let sharedDirectoryId: Swift.String?

    public init (
        sharedDirectoryId: Swift.String? = nil
    )
    {
        self.sharedDirectoryId = sharedDirectoryId
    }
}

struct AcceptSharedDirectoryInputBody: Swift.Equatable {
    public let sharedDirectoryId: Swift.String?
}

extension AcceptSharedDirectoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sharedDirectoryId = "SharedDirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sharedDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sharedDirectoryId)
        sharedDirectoryId = sharedDirectoryIdDecoded
    }
}

extension AcceptSharedDirectoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptSharedDirectoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryAlreadySharedException" : self = .directoryAlreadySharedException(try DirectoryAlreadySharedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AcceptSharedDirectoryOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryAlreadySharedException(DirectoryAlreadySharedException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptSharedDirectoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptSharedDirectoryOutputResponse(sharedDirectory: \(Swift.String(describing: sharedDirectory)))"}
}

extension AcceptSharedDirectoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AcceptSharedDirectoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sharedDirectory = output.sharedDirectory
        } else {
            self.sharedDirectory = nil
        }
    }
}

public struct AcceptSharedDirectoryOutputResponse: Swift.Equatable {
    /// <p>The shared directory in the directory consumer account.</p>
    public let sharedDirectory: DirectoryClientTypes.SharedDirectory?

    public init (
        sharedDirectory: DirectoryClientTypes.SharedDirectory? = nil
    )
    {
        self.sharedDirectory = sharedDirectory
    }
}

struct AcceptSharedDirectoryOutputResponseBody: Swift.Equatable {
    public let sharedDirectory: DirectoryClientTypes.SharedDirectory?
}

extension AcceptSharedDirectoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sharedDirectory = "SharedDirectory"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sharedDirectoryDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.SharedDirectory.self, forKey: .sharedDirectory)
        sharedDirectory = sharedDirectoryDecoded
    }
}

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension AccessDeniedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Client authentication is not available in this region at this time.</p>
public struct AccessDeniedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

public struct AddIpRoutesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddIpRoutesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddIpRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddIpRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddIpRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddIpRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddIpRoutesOutputError>
}

extension AddIpRoutesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddIpRoutesInput(directoryId: \(Swift.String(describing: directoryId)), ipRoutes: \(Swift.String(describing: ipRoutes)), updateSecurityGroupForDirectoryControllers: \(Swift.String(describing: updateSecurityGroupForDirectoryControllers)))"}
}

extension AddIpRoutesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case ipRoutes = "IpRoutes"
        case updateSecurityGroupForDirectoryControllers = "UpdateSecurityGroupForDirectoryControllers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let ipRoutes = ipRoutes {
            var ipRoutesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipRoutes)
            for iproutes0 in ipRoutes {
                try ipRoutesContainer.encode(iproutes0)
            }
        }
        if updateSecurityGroupForDirectoryControllers != false {
            try encodeContainer.encode(updateSecurityGroupForDirectoryControllers, forKey: .updateSecurityGroupForDirectoryControllers)
        }
    }
}

public struct AddIpRoutesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddIpRoutesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddIpRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddIpRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddIpRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddIpRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddIpRoutesOutputError>
}

public struct AddIpRoutesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddIpRoutesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddIpRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddIpRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddIpRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddIpRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddIpRoutesOutputError>
}

public struct AddIpRoutesInput: Swift.Equatable {
    /// <p>Identifier (ID) of the directory to which to add the address block.</p>
    public let directoryId: Swift.String?
    /// <p>IP address blocks, using CIDR format, of the traffic to route. This is often the IP address block of the DNS server used for your on-premises domain.</p>
    public let ipRoutes: [DirectoryClientTypes.IpRoute]?
    /// <p>If set to true, updates the inbound and outbound rules of the security group that has the description: "AWS created security group for <i>directory ID</i> directory controllers."
    ///          Following are the new rules:
    ///       </p>
    ///          <p>Inbound:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Type: Custom UDP Rule, Protocol: UDP, Range: 88, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom UDP Rule, Protocol: UDP, Range: 123, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom UDP Rule, Protocol: UDP, Range: 138, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom UDP Rule, Protocol: UDP, Range: 389, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom UDP Rule, Protocol: UDP, Range: 464, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom UDP Rule, Protocol: UDP, Range: 445, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom TCP Rule, Protocol: TCP, Range: 88, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom TCP Rule, Protocol: TCP, Range: 135, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom TCP Rule, Protocol: TCP, Range: 445, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom TCP Rule, Protocol: TCP, Range: 464, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom TCP Rule, Protocol: TCP, Range: 636, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom TCP Rule, Protocol: TCP, Range: 1024-65535, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: Custom TCP Rule, Protocol: TCP, Range: 3268-33269, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: DNS (UDP), Protocol: UDP, Range: 53, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: DNS (TCP), Protocol: TCP, Range: 53, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: LDAP, Protocol: TCP, Range: 389, Source: 0.0.0.0/0</p>
    ///             </li>
    ///             <li>
    ///                <p>Type: All ICMP, Protocol: All, Range: N/A, Source: 0.0.0.0/0</p>
    ///             </li>
    ///          </ul>
    ///
    ///          <p></p>
    ///          <p>Outbound:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Type: All traffic, Protocol: All, Range: All, Destination: 0.0.0.0/0</p>
    ///             </li>
    ///          </ul>
    ///          <p>These security rules impact an internal network interface that is not exposed publicly.</p>
    public let updateSecurityGroupForDirectoryControllers: Swift.Bool

    public init (
        directoryId: Swift.String? = nil,
        ipRoutes: [DirectoryClientTypes.IpRoute]? = nil,
        updateSecurityGroupForDirectoryControllers: Swift.Bool = false
    )
    {
        self.directoryId = directoryId
        self.ipRoutes = ipRoutes
        self.updateSecurityGroupForDirectoryControllers = updateSecurityGroupForDirectoryControllers
    }
}

struct AddIpRoutesInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let ipRoutes: [DirectoryClientTypes.IpRoute]?
    public let updateSecurityGroupForDirectoryControllers: Swift.Bool
}

extension AddIpRoutesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case ipRoutes = "IpRoutes"
        case updateSecurityGroupForDirectoryControllers = "UpdateSecurityGroupForDirectoryControllers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let ipRoutesContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.IpRoute?].self, forKey: .ipRoutes)
        var ipRoutesDecoded0:[DirectoryClientTypes.IpRoute]? = nil
        if let ipRoutesContainer = ipRoutesContainer {
            ipRoutesDecoded0 = [DirectoryClientTypes.IpRoute]()
            for structure0 in ipRoutesContainer {
                if let structure0 = structure0 {
                    ipRoutesDecoded0?.append(structure0)
                }
            }
        }
        ipRoutes = ipRoutesDecoded0
        let updateSecurityGroupForDirectoryControllersDecoded = try containerValues.decode(Swift.Bool.self, forKey: .updateSecurityGroupForDirectoryControllers)
        updateSecurityGroupForDirectoryControllers = updateSecurityGroupForDirectoryControllersDecoded
    }
}

extension AddIpRoutesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddIpRoutesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExistsException" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "IpRouteLimitExceededException" : self = .ipRouteLimitExceededException(try IpRouteLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddIpRoutesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case ipRouteLimitExceededException(IpRouteLimitExceededException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddIpRoutesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddIpRoutesOutputResponse()"}
}

extension AddIpRoutesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddIpRoutesOutputResponse: Swift.Equatable {

    public init() {}
}

struct AddIpRoutesOutputResponseBody: Swift.Equatable {
}

extension AddIpRoutesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AddRegionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddRegionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddRegionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddRegionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddRegionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddRegionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddRegionOutputError>
}

extension AddRegionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddRegionInput(directoryId: \(Swift.String(describing: directoryId)), regionName: \(Swift.String(describing: regionName)), vPCSettings: \(Swift.String(describing: vPCSettings)))"}
}

extension AddRegionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case regionName = "RegionName"
        case vPCSettings = "VPCSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let vPCSettings = vPCSettings {
            try encodeContainer.encode(vPCSettings, forKey: .vPCSettings)
        }
    }
}

public struct AddRegionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddRegionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddRegionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddRegionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddRegionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddRegionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddRegionOutputError>
}

public struct AddRegionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddRegionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddRegionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddRegionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddRegionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddRegionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddRegionOutputError>
}

public struct AddRegionInput: Swift.Equatable {
    /// <p>The identifier of the directory to which you want to add Region replication.</p>
    public let directoryId: Swift.String?
    /// <p>The name of the Region where you want to add domain controllers for replication. For
    ///       example, <code>us-east-1</code>.</p>
    public let regionName: Swift.String?
    /// <p>Contains VPC information for the <a>CreateDirectory</a> or <a>CreateMicrosoftAD</a> operation.</p>
    public let vPCSettings: DirectoryClientTypes.DirectoryVpcSettings?

    public init (
        directoryId: Swift.String? = nil,
        regionName: Swift.String? = nil,
        vPCSettings: DirectoryClientTypes.DirectoryVpcSettings? = nil
    )
    {
        self.directoryId = directoryId
        self.regionName = regionName
        self.vPCSettings = vPCSettings
    }
}

struct AddRegionInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let regionName: Swift.String?
    public let vPCSettings: DirectoryClientTypes.DirectoryVpcSettings?
}

extension AddRegionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case regionName = "RegionName"
        case vPCSettings = "VPCSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let vPCSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryVpcSettings.self, forKey: .vPCSettings)
        vPCSettings = vPCSettingsDecoded
    }
}

extension AddRegionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddRegionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryAlreadyInRegionException" : self = .directoryAlreadyInRegionException(try DirectoryAlreadyInRegionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RegionLimitExceededException" : self = .regionLimitExceededException(try RegionLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddRegionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case clientException(ClientException)
    case directoryAlreadyInRegionException(DirectoryAlreadyInRegionException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case regionLimitExceededException(RegionLimitExceededException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddRegionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddRegionOutputResponse()"}
}

extension AddRegionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddRegionOutputResponse: Swift.Equatable {

    public init() {}
}

struct AddRegionOutputResponseBody: Swift.Equatable {
}

extension AddRegionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AddTagsToResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsToResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsToResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsToResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsToResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsToResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsToResourceOutputError>
}

extension AddTagsToResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddTagsToResourceInput(resourceId: \(Swift.String(describing: resourceId)), tags: \(Swift.String(describing: tags)))"}
}

extension AddTagsToResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }
}

public struct AddTagsToResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsToResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsToResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsToResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsToResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsToResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsToResourceOutputError>
}

public struct AddTagsToResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsToResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsToResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsToResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsToResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsToResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsToResourceOutputError>
}

public struct AddTagsToResourceInput: Swift.Equatable {
    /// <p>Identifier (ID) for the directory to which to add the tag.</p>
    public let resourceId: Swift.String?
    /// <p>The tags to be assigned to the directory.</p>
    public let tags: [DirectoryClientTypes.Tag]?

    public init (
        resourceId: Swift.String? = nil,
        tags: [DirectoryClientTypes.Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.tags = tags
    }
}

struct AddTagsToResourceInputBody: Swift.Equatable {
    public let resourceId: Swift.String?
    public let tags: [DirectoryClientTypes.Tag]?
}

extension AddTagsToResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectoryClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectoryClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension AddTagsToResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsToResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagLimitExceededException" : self = .tagLimitExceededException(try TagLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddTagsToResourceOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case tagLimitExceededException(TagLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsToResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddTagsToResourceOutputResponse()"}
}

extension AddTagsToResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddTagsToResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct AddTagsToResourceOutputResponseBody: Swift.Equatable {
}

extension AddTagsToResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DirectoryClientTypes.Attribute: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension DirectoryClientTypes.Attribute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Attribute(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension DirectoryClientTypes {
    /// <p>Represents a named directory attribute.</p>
    public struct Attribute: Swift.Equatable {
        /// <p>The name of the attribute.</p>
        public let name: Swift.String?
        /// <p>The value of the attribute.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension AuthenticationFailedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AuthenticationFailedException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension AuthenticationFailedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AuthenticationFailedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An authentication error occurred.</p>
public struct AuthenticationFailedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The textual message for the exception.</p>
    public var message: Swift.String?
    /// <p>The identifier of the request that caused the exception.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct AuthenticationFailedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension AuthenticationFailedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

public struct CancelSchemaExtensionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelSchemaExtensionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelSchemaExtensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelSchemaExtensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelSchemaExtensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelSchemaExtensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelSchemaExtensionOutputError>
}

extension CancelSchemaExtensionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelSchemaExtensionInput(directoryId: \(Swift.String(describing: directoryId)), schemaExtensionId: \(Swift.String(describing: schemaExtensionId)))"}
}

extension CancelSchemaExtensionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case schemaExtensionId = "SchemaExtensionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let schemaExtensionId = schemaExtensionId {
            try encodeContainer.encode(schemaExtensionId, forKey: .schemaExtensionId)
        }
    }
}

public struct CancelSchemaExtensionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelSchemaExtensionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelSchemaExtensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelSchemaExtensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelSchemaExtensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelSchemaExtensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelSchemaExtensionOutputError>
}

public struct CancelSchemaExtensionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CancelSchemaExtensionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CancelSchemaExtensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CancelSchemaExtensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CancelSchemaExtensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CancelSchemaExtensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CancelSchemaExtensionOutputError>
}

public struct CancelSchemaExtensionInput: Swift.Equatable {
    /// <p>The identifier of the directory whose schema extension will be canceled.</p>
    public let directoryId: Swift.String?
    /// <p>The identifier of the schema extension that will be canceled.</p>
    public let schemaExtensionId: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        schemaExtensionId: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.schemaExtensionId = schemaExtensionId
    }
}

struct CancelSchemaExtensionInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let schemaExtensionId: Swift.String?
}

extension CancelSchemaExtensionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case schemaExtensionId = "SchemaExtensionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let schemaExtensionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaExtensionId)
        schemaExtensionId = schemaExtensionIdDecoded
    }
}

extension CancelSchemaExtensionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelSchemaExtensionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CancelSchemaExtensionOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelSchemaExtensionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CancelSchemaExtensionOutputResponse()"}
}

extension CancelSchemaExtensionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelSchemaExtensionOutputResponse: Swift.Equatable {

    public init() {}
}

struct CancelSchemaExtensionOutputResponseBody: Swift.Equatable {
}

extension CancelSchemaExtensionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DirectoryClientTypes.Certificate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateId = "CertificateId"
        case clientCertAuthSettings = "ClientCertAuthSettings"
        case commonName = "CommonName"
        case expiryDateTime = "ExpiryDateTime"
        case registeredDateTime = "RegisteredDateTime"
        case state = "State"
        case stateReason = "StateReason"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateId = certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let clientCertAuthSettings = clientCertAuthSettings {
            try encodeContainer.encode(clientCertAuthSettings, forKey: .clientCertAuthSettings)
        }
        if let commonName = commonName {
            try encodeContainer.encode(commonName, forKey: .commonName)
        }
        if let expiryDateTime = expiryDateTime {
            try encodeContainer.encode(expiryDateTime.timeIntervalSince1970, forKey: .expiryDateTime)
        }
        if let registeredDateTime = registeredDateTime {
            try encodeContainer.encode(registeredDateTime.timeIntervalSince1970, forKey: .registeredDateTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stateReason = stateReason {
            try encodeContainer.encode(stateReason, forKey: .stateReason)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.CertificateState.self, forKey: .state)
        state = stateDecoded
        let stateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stateReason)
        stateReason = stateReasonDecoded
        let commonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commonName)
        commonName = commonNameDecoded
        let registeredDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .registeredDateTime)
        registeredDateTime = registeredDateTimeDecoded
        let expiryDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expiryDateTime)
        expiryDateTime = expiryDateTimeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.CertificateType.self, forKey: .type)
        type = typeDecoded
        let clientCertAuthSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ClientCertAuthSettings.self, forKey: .clientCertAuthSettings)
        clientCertAuthSettings = clientCertAuthSettingsDecoded
    }
}

extension DirectoryClientTypes.Certificate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Certificate(certificateId: \(Swift.String(describing: certificateId)), clientCertAuthSettings: \(Swift.String(describing: clientCertAuthSettings)), commonName: \(Swift.String(describing: commonName)), expiryDateTime: \(Swift.String(describing: expiryDateTime)), registeredDateTime: \(Swift.String(describing: registeredDateTime)), state: \(Swift.String(describing: state)), stateReason: \(Swift.String(describing: stateReason)), type: \(Swift.String(describing: type)))"}
}

extension DirectoryClientTypes {
    /// <p>Information about the certificate.</p>
    public struct Certificate: Swift.Equatable {
        /// <p>The identifier of the certificate.</p>
        public let certificateId: Swift.String?
        /// <p>A <code>ClientCertAuthSettings</code> object that contains client certificate authentication settings.</p>
        public let clientCertAuthSettings: DirectoryClientTypes.ClientCertAuthSettings?
        /// <p>The common name for the certificate.</p>
        public let commonName: Swift.String?
        /// <p>The date and time when the certificate will expire.</p>
        public let expiryDateTime: ClientRuntime.Date?
        /// <p>The date and time that the certificate was registered.</p>
        public let registeredDateTime: ClientRuntime.Date?
        /// <p>The state of the certificate.</p>
        public let state: DirectoryClientTypes.CertificateState?
        /// <p>Describes a state change for the certificate.</p>
        public let stateReason: Swift.String?
        /// <p>The function that the registered certificate performs. Valid values include <code>ClientLDAPS</code> or <code>ClientCertAuth</code>. The default value is <code>ClientLDAPS</code>.</p>
        public let type: DirectoryClientTypes.CertificateType?

        public init (
            certificateId: Swift.String? = nil,
            clientCertAuthSettings: DirectoryClientTypes.ClientCertAuthSettings? = nil,
            commonName: Swift.String? = nil,
            expiryDateTime: ClientRuntime.Date? = nil,
            registeredDateTime: ClientRuntime.Date? = nil,
            state: DirectoryClientTypes.CertificateState? = nil,
            stateReason: Swift.String? = nil,
            type: DirectoryClientTypes.CertificateType? = nil
        )
        {
            self.certificateId = certificateId
            self.clientCertAuthSettings = clientCertAuthSettings
            self.commonName = commonName
            self.expiryDateTime = expiryDateTime
            self.registeredDateTime = registeredDateTime
            self.state = state
            self.stateReason = stateReason
            self.type = type
        }
    }

}

extension CertificateAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateAlreadyExistsException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension CertificateAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CertificateAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The certificate has already been registered into the system.</p>
public struct CertificateAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct CertificateAlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension CertificateAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension CertificateDoesNotExistException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateDoesNotExistException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension CertificateDoesNotExistException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CertificateDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The certificate is not present in the system for describe or deregister activities.</p>
public struct CertificateDoesNotExistException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct CertificateDoesNotExistExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension CertificateDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension CertificateInUseException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateInUseException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension CertificateInUseException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CertificateInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The certificate is being used for the LDAP security connection and cannot be removed
///       without disabling LDAP security.</p>
public struct CertificateInUseException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct CertificateInUseExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension CertificateInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes.CertificateInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateId = "CertificateId"
        case commonName = "CommonName"
        case expiryDateTime = "ExpiryDateTime"
        case state = "State"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateId = certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let commonName = commonName {
            try encodeContainer.encode(commonName, forKey: .commonName)
        }
        if let expiryDateTime = expiryDateTime {
            try encodeContainer.encode(expiryDateTime.timeIntervalSince1970, forKey: .expiryDateTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
        let commonNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .commonName)
        commonName = commonNameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.CertificateState.self, forKey: .state)
        state = stateDecoded
        let expiryDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expiryDateTime)
        expiryDateTime = expiryDateTimeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.CertificateType.self, forKey: .type)
        type = typeDecoded
    }
}

extension DirectoryClientTypes.CertificateInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateInfo(certificateId: \(Swift.String(describing: certificateId)), commonName: \(Swift.String(describing: commonName)), expiryDateTime: \(Swift.String(describing: expiryDateTime)), state: \(Swift.String(describing: state)), type: \(Swift.String(describing: type)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains general information about a certificate.</p>
    public struct CertificateInfo: Swift.Equatable {
        /// <p>The identifier of the certificate.</p>
        public let certificateId: Swift.String?
        /// <p>The common name for the certificate.</p>
        public let commonName: Swift.String?
        /// <p>The date and time when the certificate will expire.</p>
        public let expiryDateTime: ClientRuntime.Date?
        /// <p>The state of the certificate.</p>
        public let state: DirectoryClientTypes.CertificateState?
        /// <p>The function that the registered certificate performs. Valid values include <code>ClientLDAPS</code> or <code>ClientCertAuth</code>. The default value is <code>ClientLDAPS</code>.</p>
        public let type: DirectoryClientTypes.CertificateType?

        public init (
            certificateId: Swift.String? = nil,
            commonName: Swift.String? = nil,
            expiryDateTime: ClientRuntime.Date? = nil,
            state: DirectoryClientTypes.CertificateState? = nil,
            type: DirectoryClientTypes.CertificateType? = nil
        )
        {
            self.certificateId = certificateId
            self.commonName = commonName
            self.expiryDateTime = expiryDateTime
            self.state = state
            self.type = type
        }
    }

}

extension CertificateLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateLimitExceededException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension CertificateLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CertificateLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The certificate could not be added because the certificate limit has been reached.</p>
public struct CertificateLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct CertificateLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension CertificateLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes {
    public enum CertificateState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deregistered
        case deregistering
        case deregisterFailed
        case registered
        case registering
        case registerFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateState] {
            return [
                .deregistered,
                .deregistering,
                .deregisterFailed,
                .registered,
                .registering,
                .registerFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deregistered: return "Deregistered"
            case .deregistering: return "Deregistering"
            case .deregisterFailed: return "DeregisterFailed"
            case .registered: return "Registered"
            case .registering: return "Registering"
            case .registerFailed: return "RegisterFailed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateState(rawValue: rawValue) ?? CertificateState.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes {
    public enum CertificateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case clientCertAuth
        case clientLdaps
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateType] {
            return [
                .clientCertAuth,
                .clientLdaps,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .clientCertAuth: return "ClientCertAuth"
            case .clientLdaps: return "ClientLDAPS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateType(rawValue: rawValue) ?? CertificateType.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes {
    public enum ClientAuthenticationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case smartCard
        case sdkUnknown(Swift.String)

        public static var allCases: [ClientAuthenticationType] {
            return [
                .smartCard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .smartCard: return "SmartCard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ClientAuthenticationType(rawValue: rawValue) ?? ClientAuthenticationType.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes.ClientCertAuthSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case oCSPUrl = "OCSPUrl"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let oCSPUrl = oCSPUrl {
            try encodeContainer.encode(oCSPUrl, forKey: .oCSPUrl)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let oCSPUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .oCSPUrl)
        oCSPUrl = oCSPUrlDecoded
    }
}

extension DirectoryClientTypes.ClientCertAuthSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClientCertAuthSettings(oCSPUrl: \(Swift.String(describing: oCSPUrl)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains information about the client certificate authentication settings for the <code>RegisterCertificate</code> and <code>DescribeCertificate</code> operations. </p>
    public struct ClientCertAuthSettings: Swift.Equatable {
        /// <p>Specifies the URL of the default OCSP server used to check for revocation status. A secondary value to any OCSP address found in the AIA extension of the user certificate.</p>
        public let oCSPUrl: Swift.String?

        public init (
            oCSPUrl: Swift.String? = nil
        )
        {
            self.oCSPUrl = oCSPUrl
        }
    }

}

extension ClientException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClientException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension ClientException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ClientExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A client exception has occurred.</p>
public struct ClientException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct ClientExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension ClientExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes.Computer: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computerAttributes = "ComputerAttributes"
        case computerId = "ComputerId"
        case computerName = "ComputerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computerAttributes = computerAttributes {
            var computerAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computerAttributes)
            for attributes0 in computerAttributes {
                try computerAttributesContainer.encode(attributes0)
            }
        }
        if let computerId = computerId {
            try encodeContainer.encode(computerId, forKey: .computerId)
        }
        if let computerName = computerName {
            try encodeContainer.encode(computerName, forKey: .computerName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computerId)
        computerId = computerIdDecoded
        let computerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computerName)
        computerName = computerNameDecoded
        let computerAttributesContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.Attribute?].self, forKey: .computerAttributes)
        var computerAttributesDecoded0:[DirectoryClientTypes.Attribute]? = nil
        if let computerAttributesContainer = computerAttributesContainer {
            computerAttributesDecoded0 = [DirectoryClientTypes.Attribute]()
            for structure0 in computerAttributesContainer {
                if let structure0 = structure0 {
                    computerAttributesDecoded0?.append(structure0)
                }
            }
        }
        computerAttributes = computerAttributesDecoded0
    }
}

extension DirectoryClientTypes.Computer: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Computer(computerAttributes: \(Swift.String(describing: computerAttributes)), computerId: \(Swift.String(describing: computerId)), computerName: \(Swift.String(describing: computerName)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains information about a computer account in a directory.</p>
    public struct Computer: Swift.Equatable {
        /// <p>An array of <a>Attribute</a> objects containing the LDAP attributes that belong to the
        ///             computer account.</p>
        public let computerAttributes: [DirectoryClientTypes.Attribute]?
        /// <p>The identifier of the computer.</p>
        public let computerId: Swift.String?
        /// <p>The computer name.</p>
        public let computerName: Swift.String?

        public init (
            computerAttributes: [DirectoryClientTypes.Attribute]? = nil,
            computerId: Swift.String? = nil,
            computerName: Swift.String? = nil
        )
        {
            self.computerAttributes = computerAttributes
            self.computerId = computerId
            self.computerName = computerName
        }
    }

}

extension DirectoryClientTypes.ConditionalForwarder: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dnsIpAddrs = "DnsIpAddrs"
        case remoteDomainName = "RemoteDomainName"
        case replicationScope = "ReplicationScope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dnsIpAddrs = dnsIpAddrs {
            var dnsIpAddrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIpAddrs)
            for dnsipaddrs0 in dnsIpAddrs {
                try dnsIpAddrsContainer.encode(dnsipaddrs0)
            }
        }
        if let remoteDomainName = remoteDomainName {
            try encodeContainer.encode(remoteDomainName, forKey: .remoteDomainName)
        }
        if let replicationScope = replicationScope {
            try encodeContainer.encode(replicationScope.rawValue, forKey: .replicationScope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let remoteDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteDomainName)
        remoteDomainName = remoteDomainNameDecoded
        let dnsIpAddrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIpAddrs)
        var dnsIpAddrsDecoded0:[Swift.String]? = nil
        if let dnsIpAddrsContainer = dnsIpAddrsContainer {
            dnsIpAddrsDecoded0 = [Swift.String]()
            for string0 in dnsIpAddrsContainer {
                if let string0 = string0 {
                    dnsIpAddrsDecoded0?.append(string0)
                }
            }
        }
        dnsIpAddrs = dnsIpAddrsDecoded0
        let replicationScopeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ReplicationScope.self, forKey: .replicationScope)
        replicationScope = replicationScopeDecoded
    }
}

extension DirectoryClientTypes.ConditionalForwarder: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConditionalForwarder(dnsIpAddrs: \(Swift.String(describing: dnsIpAddrs)), remoteDomainName: \(Swift.String(describing: remoteDomainName)), replicationScope: \(Swift.String(describing: replicationScope)))"}
}

extension DirectoryClientTypes {
    /// <p>Points to a remote domain with which you are setting up a trust relationship. Conditional forwarders are required in order to set up a trust relationship with another domain.</p>
    public struct ConditionalForwarder: Swift.Equatable {
        /// <p>The IP addresses of the remote DNS server associated with RemoteDomainName. This is the IP address of the DNS server that your conditional forwarder points to.</p>
        public let dnsIpAddrs: [Swift.String]?
        /// <p>The fully qualified domain name (FQDN) of the remote domains pointed to by the conditional forwarder.</p>
        public let remoteDomainName: Swift.String?
        /// <p>The replication scope of the conditional forwarder. The only allowed value is
        ///                   <code>Domain</code>, which will replicate the conditional forwarder to all of the
        ///                   domain controllers for your AWS directory.</p>
        public let replicationScope: DirectoryClientTypes.ReplicationScope?

        public init (
            dnsIpAddrs: [Swift.String]? = nil,
            remoteDomainName: Swift.String? = nil,
            replicationScope: DirectoryClientTypes.ReplicationScope? = nil
        )
        {
            self.dnsIpAddrs = dnsIpAddrs
            self.remoteDomainName = remoteDomainName
            self.replicationScope = replicationScope
        }
    }

}

public struct ConnectDirectoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConnectDirectoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConnectDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConnectDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConnectDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConnectDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConnectDirectoryOutputError>
}

extension ConnectDirectoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConnectDirectoryInput(connectSettings: \(Swift.String(describing: connectSettings)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), password: \(Swift.String(describing: password)), shortName: \(Swift.String(describing: shortName)), size: \(Swift.String(describing: size)), tags: \(Swift.String(describing: tags)))"}
}

extension ConnectDirectoryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectSettings = "ConnectSettings"
        case description = "Description"
        case name = "Name"
        case password = "Password"
        case shortName = "ShortName"
        case size = "Size"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectSettings = connectSettings {
            try encodeContainer.encode(connectSettings, forKey: .connectSettings)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let shortName = shortName {
            try encodeContainer.encode(shortName, forKey: .shortName)
        }
        if let size = size {
            try encodeContainer.encode(size.rawValue, forKey: .size)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
    }
}

public struct ConnectDirectoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConnectDirectoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConnectDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConnectDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConnectDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConnectDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConnectDirectoryOutputError>
}

public struct ConnectDirectoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ConnectDirectoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ConnectDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ConnectDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ConnectDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ConnectDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ConnectDirectoryOutputError>
}

/// <p>Contains the inputs for the <a>ConnectDirectory</a> operation.</p>
public struct ConnectDirectoryInput: Swift.Equatable {
    /// <p>A <a>DirectoryConnectSettings</a> object that contains additional information
    ///       for the operation.</p>
    public let connectSettings: DirectoryClientTypes.DirectoryConnectSettings?
    /// <p>A description for the directory.</p>
    public let description: Swift.String?
    /// <p>The fully qualified name of the on-premises directory, such as
    ///         <code>corp.example.com</code>.</p>
    public let name: Swift.String?
    /// <p>The password for the on-premises user account.</p>
    public let password: Swift.String?
    /// <p>The NetBIOS name of the on-premises directory, such as <code>CORP</code>.</p>
    public let shortName: Swift.String?
    /// <p>The size of the directory.</p>
    public let size: DirectoryClientTypes.DirectorySize?
    /// <p>The tags to be assigned to AD Connector.</p>
    public let tags: [DirectoryClientTypes.Tag]?

    public init (
        connectSettings: DirectoryClientTypes.DirectoryConnectSettings? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        password: Swift.String? = nil,
        shortName: Swift.String? = nil,
        size: DirectoryClientTypes.DirectorySize? = nil,
        tags: [DirectoryClientTypes.Tag]? = nil
    )
    {
        self.connectSettings = connectSettings
        self.description = description
        self.name = name
        self.password = password
        self.shortName = shortName
        self.size = size
        self.tags = tags
    }
}

struct ConnectDirectoryInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let shortName: Swift.String?
    public let password: Swift.String?
    public let description: Swift.String?
    public let size: DirectoryClientTypes.DirectorySize?
    public let connectSettings: DirectoryClientTypes.DirectoryConnectSettings?
    public let tags: [DirectoryClientTypes.Tag]?
}

extension ConnectDirectoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectSettings = "ConnectSettings"
        case description = "Description"
        case name = "Name"
        case password = "Password"
        case shortName = "ShortName"
        case size = "Size"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let shortNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shortName)
        shortName = shortNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectorySize.self, forKey: .size)
        size = sizeDecoded
        let connectSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryConnectSettings.self, forKey: .connectSettings)
        connectSettings = connectSettingsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectoryClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectoryClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ConnectDirectoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ConnectDirectoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryLimitExceededException" : self = .directoryLimitExceededException(try DirectoryLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ConnectDirectoryOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryLimitExceededException(DirectoryLimitExceededException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ConnectDirectoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConnectDirectoryOutputResponse(directoryId: \(Swift.String(describing: directoryId)))"}
}

extension ConnectDirectoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConnectDirectoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directoryId = output.directoryId
        } else {
            self.directoryId = nil
        }
    }
}

/// <p>Contains the results of the <a>ConnectDirectory</a> operation.</p>
public struct ConnectDirectoryOutputResponse: Swift.Equatable {
    /// <p>The identifier of the new directory.</p>
    public let directoryId: Swift.String?

    public init (
        directoryId: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
    }
}

struct ConnectDirectoryOutputResponseBody: Swift.Equatable {
    public let directoryId: Swift.String?
}

extension ConnectDirectoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
    }
}

public struct CreateAliasInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAliasInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAliasOutputError>
}

extension CreateAliasInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAliasInput(alias: \(Swift.String(describing: alias)), directoryId: \(Swift.String(describing: directoryId)))"}
}

extension CreateAliasInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
        case directoryId = "DirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let alias = alias {
            try encodeContainer.encode(alias, forKey: .alias)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
    }
}

public struct CreateAliasInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAliasInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAliasOutputError>
}

public struct CreateAliasInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateAliasInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateAliasInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateAliasOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateAliasInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateAliasOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateAliasOutputError>
}

/// <p>Contains the inputs for the <a>CreateAlias</a> operation.</p>
public struct CreateAliasInput: Swift.Equatable {
    /// <p>The requested alias.</p>
    ///          <p>The alias must be unique amongst all aliases in AWS. This operation throws an
    ///             <code>EntityAlreadyExistsException</code> error if the alias already exists.</p>
    public let alias: Swift.String?
    /// <p>The identifier of the directory for which to create the alias.</p>
    public let directoryId: Swift.String?

    public init (
        alias: Swift.String? = nil,
        directoryId: Swift.String? = nil
    )
    {
        self.alias = alias
        self.directoryId = directoryId
    }
}

struct CreateAliasInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let alias: Swift.String?
}

extension CreateAliasInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alias)
        alias = aliasDecoded
    }
}

extension CreateAliasOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateAliasOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExistsException" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateAliasOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateAliasOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAliasOutputResponse(alias: \(Swift.String(describing: alias)), directoryId: \(Swift.String(describing: directoryId)))"}
}

extension CreateAliasOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateAliasOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.alias = output.alias
            self.directoryId = output.directoryId
        } else {
            self.alias = nil
            self.directoryId = nil
        }
    }
}

/// <p>Contains the results of the <a>CreateAlias</a> operation.</p>
public struct CreateAliasOutputResponse: Swift.Equatable {
    /// <p>The alias for the directory.</p>
    public let alias: Swift.String?
    /// <p>The identifier of the directory.</p>
    public let directoryId: Swift.String?

    public init (
        alias: Swift.String? = nil,
        directoryId: Swift.String? = nil
    )
    {
        self.alias = alias
        self.directoryId = directoryId
    }
}

struct CreateAliasOutputResponseBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let alias: Swift.String?
}

extension CreateAliasOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case alias = "Alias"
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alias)
        alias = aliasDecoded
    }
}

public struct CreateComputerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateComputerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateComputerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateComputerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateComputerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateComputerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateComputerOutputError>
}

extension CreateComputerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateComputerInput(computerAttributes: \(Swift.String(describing: computerAttributes)), computerName: \(Swift.String(describing: computerName)), directoryId: \(Swift.String(describing: directoryId)), organizationalUnitDistinguishedName: \(Swift.String(describing: organizationalUnitDistinguishedName)), password: \(Swift.String(describing: password)))"}
}

extension CreateComputerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computerAttributes = "ComputerAttributes"
        case computerName = "ComputerName"
        case directoryId = "DirectoryId"
        case organizationalUnitDistinguishedName = "OrganizationalUnitDistinguishedName"
        case password = "Password"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computerAttributes = computerAttributes {
            var computerAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .computerAttributes)
            for attributes0 in computerAttributes {
                try computerAttributesContainer.encode(attributes0)
            }
        }
        if let computerName = computerName {
            try encodeContainer.encode(computerName, forKey: .computerName)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let organizationalUnitDistinguishedName = organizationalUnitDistinguishedName {
            try encodeContainer.encode(organizationalUnitDistinguishedName, forKey: .organizationalUnitDistinguishedName)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
    }
}

public struct CreateComputerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateComputerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateComputerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateComputerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateComputerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateComputerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateComputerOutputError>
}

public struct CreateComputerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateComputerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateComputerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateComputerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateComputerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateComputerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateComputerOutputError>
}

/// <p>Contains the inputs for the <a>CreateComputer</a> operation.</p>
public struct CreateComputerInput: Swift.Equatable {
    /// <p>An array of <a>Attribute</a> objects that contain any LDAP attributes to apply to the
    ///             computer account.</p>
    public let computerAttributes: [DirectoryClientTypes.Attribute]?
    /// <p>The name of the computer account.</p>
    public let computerName: Swift.String?
    /// <p>The identifier of the directory in which to create the computer account.</p>
    public let directoryId: Swift.String?
    /// <p>The fully-qualified distinguished name of the organizational unit to place the computer account in.</p>
    public let organizationalUnitDistinguishedName: Swift.String?
    /// <p>A one-time password that is used to join the computer to the directory. You should generate a random, strong password to use for this parameter.</p>
    public let password: Swift.String?

    public init (
        computerAttributes: [DirectoryClientTypes.Attribute]? = nil,
        computerName: Swift.String? = nil,
        directoryId: Swift.String? = nil,
        organizationalUnitDistinguishedName: Swift.String? = nil,
        password: Swift.String? = nil
    )
    {
        self.computerAttributes = computerAttributes
        self.computerName = computerName
        self.directoryId = directoryId
        self.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName
        self.password = password
    }
}

struct CreateComputerInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let computerName: Swift.String?
    public let password: Swift.String?
    public let organizationalUnitDistinguishedName: Swift.String?
    public let computerAttributes: [DirectoryClientTypes.Attribute]?
}

extension CreateComputerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computerAttributes = "ComputerAttributes"
        case computerName = "ComputerName"
        case directoryId = "DirectoryId"
        case organizationalUnitDistinguishedName = "OrganizationalUnitDistinguishedName"
        case password = "Password"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let computerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .computerName)
        computerName = computerNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let organizationalUnitDistinguishedNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationalUnitDistinguishedName)
        organizationalUnitDistinguishedName = organizationalUnitDistinguishedNameDecoded
        let computerAttributesContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.Attribute?].self, forKey: .computerAttributes)
        var computerAttributesDecoded0:[DirectoryClientTypes.Attribute]? = nil
        if let computerAttributesContainer = computerAttributesContainer {
            computerAttributesDecoded0 = [DirectoryClientTypes.Attribute]()
            for structure0 in computerAttributesContainer {
                if let structure0 = structure0 {
                    computerAttributesDecoded0?.append(structure0)
                }
            }
        }
        computerAttributes = computerAttributesDecoded0
    }
}

extension CreateComputerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateComputerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AuthenticationFailedException" : self = .authenticationFailedException(try AuthenticationFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExistsException" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateComputerOutputError: Swift.Error, Swift.Equatable {
    case authenticationFailedException(AuthenticationFailedException)
    case clientException(ClientException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateComputerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateComputerOutputResponse(computer: \(Swift.String(describing: computer)))"}
}

extension CreateComputerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateComputerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computer = output.computer
        } else {
            self.computer = nil
        }
    }
}

/// <p>Contains the results for the <a>CreateComputer</a> operation.</p>
public struct CreateComputerOutputResponse: Swift.Equatable {
    /// <p>A <a>Computer</a> object that represents the computer account.</p>
    public let computer: DirectoryClientTypes.Computer?

    public init (
        computer: DirectoryClientTypes.Computer? = nil
    )
    {
        self.computer = computer
    }
}

struct CreateComputerOutputResponseBody: Swift.Equatable {
    public let computer: DirectoryClientTypes.Computer?
}

extension CreateComputerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computer = "Computer"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let computerDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.Computer.self, forKey: .computer)
        computer = computerDecoded
    }
}

public struct CreateConditionalForwarderInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConditionalForwarderInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConditionalForwarderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConditionalForwarderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConditionalForwarderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConditionalForwarderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConditionalForwarderOutputError>
}

extension CreateConditionalForwarderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConditionalForwarderInput(directoryId: \(Swift.String(describing: directoryId)), dnsIpAddrs: \(Swift.String(describing: dnsIpAddrs)), remoteDomainName: \(Swift.String(describing: remoteDomainName)))"}
}

extension CreateConditionalForwarderInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case dnsIpAddrs = "DnsIpAddrs"
        case remoteDomainName = "RemoteDomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let dnsIpAddrs = dnsIpAddrs {
            var dnsIpAddrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIpAddrs)
            for dnsipaddrs0 in dnsIpAddrs {
                try dnsIpAddrsContainer.encode(dnsipaddrs0)
            }
        }
        if let remoteDomainName = remoteDomainName {
            try encodeContainer.encode(remoteDomainName, forKey: .remoteDomainName)
        }
    }
}

public struct CreateConditionalForwarderInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConditionalForwarderInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConditionalForwarderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConditionalForwarderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConditionalForwarderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConditionalForwarderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConditionalForwarderOutputError>
}

public struct CreateConditionalForwarderInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateConditionalForwarderInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateConditionalForwarderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateConditionalForwarderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateConditionalForwarderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateConditionalForwarderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateConditionalForwarderOutputError>
}

/// <p>Initiates the creation of a conditional forwarder for your AWS Directory Service for Microsoft Active Directory. Conditional forwarders are required in order to set up a trust relationship with another domain.</p>
public struct CreateConditionalForwarderInput: Swift.Equatable {
    /// <p>The directory ID of the AWS directory for which you are creating the conditional forwarder.</p>
    public let directoryId: Swift.String?
    /// <p>The IP addresses of the remote DNS server associated with RemoteDomainName.</p>
    public let dnsIpAddrs: [Swift.String]?
    /// <p>The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship.</p>
    public let remoteDomainName: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        dnsIpAddrs: [Swift.String]? = nil,
        remoteDomainName: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.dnsIpAddrs = dnsIpAddrs
        self.remoteDomainName = remoteDomainName
    }
}

struct CreateConditionalForwarderInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let remoteDomainName: Swift.String?
    public let dnsIpAddrs: [Swift.String]?
}

extension CreateConditionalForwarderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case dnsIpAddrs = "DnsIpAddrs"
        case remoteDomainName = "RemoteDomainName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let remoteDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteDomainName)
        remoteDomainName = remoteDomainNameDecoded
        let dnsIpAddrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIpAddrs)
        var dnsIpAddrsDecoded0:[Swift.String]? = nil
        if let dnsIpAddrsContainer = dnsIpAddrsContainer {
            dnsIpAddrsDecoded0 = [Swift.String]()
            for string0 in dnsIpAddrsContainer {
                if let string0 = string0 {
                    dnsIpAddrsDecoded0?.append(string0)
                }
            }
        }
        dnsIpAddrs = dnsIpAddrsDecoded0
    }
}

extension CreateConditionalForwarderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateConditionalForwarderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExistsException" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateConditionalForwarderOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateConditionalForwarderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateConditionalForwarderOutputResponse()"}
}

extension CreateConditionalForwarderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The result of a CreateConditinalForwarder request.</p>
public struct CreateConditionalForwarderOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateConditionalForwarderOutputResponseBody: Swift.Equatable {
}

extension CreateConditionalForwarderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateDirectoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectoryOutputError>
}

extension CreateDirectoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDirectoryInput(description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), password: \(Swift.String(describing: password)), shortName: \(Swift.String(describing: shortName)), size: \(Swift.String(describing: size)), tags: \(Swift.String(describing: tags)), vpcSettings: \(Swift.String(describing: vpcSettings)))"}
}

extension CreateDirectoryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case password = "Password"
        case shortName = "ShortName"
        case size = "Size"
        case tags = "Tags"
        case vpcSettings = "VpcSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let shortName = shortName {
            try encodeContainer.encode(shortName, forKey: .shortName)
        }
        if let size = size {
            try encodeContainer.encode(size.rawValue, forKey: .size)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let vpcSettings = vpcSettings {
            try encodeContainer.encode(vpcSettings, forKey: .vpcSettings)
        }
    }
}

public struct CreateDirectoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectoryOutputError>
}

public struct CreateDirectoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDirectoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDirectoryOutputError>
}

/// <p>Contains the inputs for the <a>CreateDirectory</a> operation. </p>
public struct CreateDirectoryInput: Swift.Equatable {
    /// <p>A description for the directory.</p>
    public let description: Swift.String?
    /// <p>The fully qualified name for the directory, such as <code>corp.example.com</code>.</p>
    public let name: Swift.String?
    /// <p>The password for the directory administrator. The directory creation process creates a
    ///       directory administrator account with the user name <code>Administrator</code> and this
    ///       password.</p>
    ///          <p>If you need to change the password for the administrator account, you can use the <a>ResetUserPassword</a> API call.</p>
    ///          <p>The regex pattern for this string is made up of the following conditions:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Length (?=^.{8,64}$) – Must be between 8 and 64 characters</p>
    ///             </li>
    ///          </ul>
    ///          <p>AND any 3 of the following password complexity rules required by Active Directory:</p>
    ///          <ul>
    ///             <li>
    ///                <p>Numbers and upper case and lowercase (?=.*\d)(?=.*[A-Z])(?=.*[a-z])</p>
    ///             </li>
    ///             <li>
    ///                <p>Numbers and special characters and lower case
    ///           (?=.*\d)(?=.*[^A-Za-z0-9\s])(?=.*[a-z])</p>
    ///             </li>
    ///             <li>
    ///                <p>Special characters and upper case and lower case
    ///           (?=.*[^A-Za-z0-9\s])(?=.*[A-Z])(?=.*[a-z])</p>
    ///             </li>
    ///             <li>
    ///                <p>Numbers and upper case and special characters
    ///           (?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9\s])</p>
    ///             </li>
    ///          </ul>
    ///          <p>For additional information about how Active Directory passwords are enforced, see <a href="https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/password-must-meet-complexity-requirements">Password must meet complexity requirements</a> on the Microsoft website.</p>
    public let password: Swift.String?
    /// <p>The NetBIOS name of the directory, such as <code>CORP</code>.</p>
    public let shortName: Swift.String?
    /// <p>The size of the directory.</p>
    public let size: DirectoryClientTypes.DirectorySize?
    /// <p>The tags to be assigned to the Simple AD directory.</p>
    public let tags: [DirectoryClientTypes.Tag]?
    /// <p>A <a>DirectoryVpcSettings</a> object that contains additional information for
    ///       the operation.</p>
    public let vpcSettings: DirectoryClientTypes.DirectoryVpcSettings?

    public init (
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        password: Swift.String? = nil,
        shortName: Swift.String? = nil,
        size: DirectoryClientTypes.DirectorySize? = nil,
        tags: [DirectoryClientTypes.Tag]? = nil,
        vpcSettings: DirectoryClientTypes.DirectoryVpcSettings? = nil
    )
    {
        self.description = description
        self.name = name
        self.password = password
        self.shortName = shortName
        self.size = size
        self.tags = tags
        self.vpcSettings = vpcSettings
    }
}

struct CreateDirectoryInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let shortName: Swift.String?
    public let password: Swift.String?
    public let description: Swift.String?
    public let size: DirectoryClientTypes.DirectorySize?
    public let vpcSettings: DirectoryClientTypes.DirectoryVpcSettings?
    public let tags: [DirectoryClientTypes.Tag]?
}

extension CreateDirectoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
        case password = "Password"
        case shortName = "ShortName"
        case size = "Size"
        case tags = "Tags"
        case vpcSettings = "VpcSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let shortNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shortName)
        shortName = shortNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectorySize.self, forKey: .size)
        size = sizeDecoded
        let vpcSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryVpcSettings.self, forKey: .vpcSettings)
        vpcSettings = vpcSettingsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectoryClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectoryClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDirectoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDirectoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryLimitExceededException" : self = .directoryLimitExceededException(try DirectoryLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDirectoryOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryLimitExceededException(DirectoryLimitExceededException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDirectoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDirectoryOutputResponse(directoryId: \(Swift.String(describing: directoryId)))"}
}

extension CreateDirectoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDirectoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directoryId = output.directoryId
        } else {
            self.directoryId = nil
        }
    }
}

/// <p>Contains the results of the <a>CreateDirectory</a> operation.</p>
public struct CreateDirectoryOutputResponse: Swift.Equatable {
    /// <p>The identifier of the directory that was created.</p>
    public let directoryId: Swift.String?

    public init (
        directoryId: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
    }
}

struct CreateDirectoryOutputResponseBody: Swift.Equatable {
    public let directoryId: Swift.String?
}

extension CreateDirectoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
    }
}

public struct CreateLogSubscriptionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLogSubscriptionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLogSubscriptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLogSubscriptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLogSubscriptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLogSubscriptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLogSubscriptionOutputError>
}

extension CreateLogSubscriptionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLogSubscriptionInput(directoryId: \(Swift.String(describing: directoryId)), logGroupName: \(Swift.String(describing: logGroupName)))"}
}

extension CreateLogSubscriptionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case logGroupName = "LogGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

public struct CreateLogSubscriptionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLogSubscriptionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLogSubscriptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLogSubscriptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLogSubscriptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLogSubscriptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLogSubscriptionOutputError>
}

public struct CreateLogSubscriptionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLogSubscriptionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLogSubscriptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLogSubscriptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLogSubscriptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLogSubscriptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLogSubscriptionOutputError>
}

public struct CreateLogSubscriptionInput: Swift.Equatable {
    /// <p>Identifier of the directory to which you want to subscribe and receive real-time logs to
    ///       your specified CloudWatch log group.</p>
    public let directoryId: Swift.String?
    /// <p>The name of the CloudWatch log group where the real-time domain controller logs are
    ///       forwarded.</p>
    public let logGroupName: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        logGroupName: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.logGroupName = logGroupName
    }
}

struct CreateLogSubscriptionInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let logGroupName: Swift.String?
}

extension CreateLogSubscriptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case logGroupName = "LogGroupName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension CreateLogSubscriptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLogSubscriptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExistsException" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLogSubscriptionOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case insufficientPermissionsException(InsufficientPermissionsException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLogSubscriptionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLogSubscriptionOutputResponse()"}
}

extension CreateLogSubscriptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateLogSubscriptionOutputResponse: Swift.Equatable {

    public init() {}
}

struct CreateLogSubscriptionOutputResponseBody: Swift.Equatable {
}

extension CreateLogSubscriptionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreateMicrosoftADInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMicrosoftADInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMicrosoftADInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMicrosoftADOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMicrosoftADInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMicrosoftADOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMicrosoftADOutputError>
}

extension CreateMicrosoftADInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMicrosoftADInput(description: \(Swift.String(describing: description)), edition: \(Swift.String(describing: edition)), name: \(Swift.String(describing: name)), password: \(Swift.String(describing: password)), shortName: \(Swift.String(describing: shortName)), tags: \(Swift.String(describing: tags)), vpcSettings: \(Swift.String(describing: vpcSettings)))"}
}

extension CreateMicrosoftADInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case edition = "Edition"
        case name = "Name"
        case password = "Password"
        case shortName = "ShortName"
        case tags = "Tags"
        case vpcSettings = "VpcSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let edition = edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let shortName = shortName {
            try encodeContainer.encode(shortName, forKey: .shortName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let vpcSettings = vpcSettings {
            try encodeContainer.encode(vpcSettings, forKey: .vpcSettings)
        }
    }
}

public struct CreateMicrosoftADInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMicrosoftADInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMicrosoftADInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMicrosoftADOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMicrosoftADInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMicrosoftADOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMicrosoftADOutputError>
}

public struct CreateMicrosoftADInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMicrosoftADInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMicrosoftADInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMicrosoftADOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMicrosoftADInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMicrosoftADOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMicrosoftADOutputError>
}

/// <p>Creates an AWS Managed Microsoft AD directory.</p>
public struct CreateMicrosoftADInput: Swift.Equatable {
    /// <p>A description for the directory. This label will appear on the AWS console <code>Directory Details</code> page after the directory is created.</p>
    public let description: Swift.String?
    /// <p>AWS Managed Microsoft AD is available in two editions: <code>Standard</code> and <code>Enterprise</code>. <code>Enterprise</code> is the default.</p>
    public let edition: DirectoryClientTypes.DirectoryEdition?
    /// <p>The fully qualified domain name for the AWS Managed Microsoft AD directory, such as
    ///        <code>corp.example.com</code>. This name will resolve inside your VPC only. It does not need
    ///        to be publicly resolvable.</p>
    public let name: Swift.String?
    /// <p>The password for the default administrative user named <code>Admin</code>.</p>
    ///          <p>If you need to change the password for the administrator account, you can use the <a>ResetUserPassword</a> API call.</p>
    public let password: Swift.String?
    /// <p>The NetBIOS name for your domain, such as <code>CORP</code>. If you don't specify a NetBIOS name, it will default to the first part of your directory DNS. For example, <code>CORP</code> for the directory DNS <code>corp.example.com</code>. </p>
    public let shortName: Swift.String?
    /// <p>The tags to be assigned to the AWS Managed Microsoft AD directory.</p>
    public let tags: [DirectoryClientTypes.Tag]?
    /// <p>Contains VPC information for the <a>CreateDirectory</a> or <a>CreateMicrosoftAD</a> operation.</p>
    public let vpcSettings: DirectoryClientTypes.DirectoryVpcSettings?

    public init (
        description: Swift.String? = nil,
        edition: DirectoryClientTypes.DirectoryEdition? = nil,
        name: Swift.String? = nil,
        password: Swift.String? = nil,
        shortName: Swift.String? = nil,
        tags: [DirectoryClientTypes.Tag]? = nil,
        vpcSettings: DirectoryClientTypes.DirectoryVpcSettings? = nil
    )
    {
        self.description = description
        self.edition = edition
        self.name = name
        self.password = password
        self.shortName = shortName
        self.tags = tags
        self.vpcSettings = vpcSettings
    }
}

struct CreateMicrosoftADInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let shortName: Swift.String?
    public let password: Swift.String?
    public let description: Swift.String?
    public let vpcSettings: DirectoryClientTypes.DirectoryVpcSettings?
    public let edition: DirectoryClientTypes.DirectoryEdition?
    public let tags: [DirectoryClientTypes.Tag]?
}

extension CreateMicrosoftADInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case edition = "Edition"
        case name = "Name"
        case password = "Password"
        case shortName = "ShortName"
        case tags = "Tags"
        case vpcSettings = "VpcSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let shortNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shortName)
        shortName = shortNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let vpcSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryVpcSettings.self, forKey: .vpcSettings)
        vpcSettings = vpcSettingsDecoded
        let editionDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryEdition.self, forKey: .edition)
        edition = editionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectoryClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectoryClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateMicrosoftADOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMicrosoftADOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryLimitExceededException" : self = .directoryLimitExceededException(try DirectoryLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMicrosoftADOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryLimitExceededException(DirectoryLimitExceededException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMicrosoftADOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMicrosoftADOutputResponse(directoryId: \(Swift.String(describing: directoryId)))"}
}

extension CreateMicrosoftADOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateMicrosoftADOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directoryId = output.directoryId
        } else {
            self.directoryId = nil
        }
    }
}

/// <p>Result of a CreateMicrosoftAD request.</p>
public struct CreateMicrosoftADOutputResponse: Swift.Equatable {
    /// <p>The identifier of the directory that was created.</p>
    public let directoryId: Swift.String?

    public init (
        directoryId: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
    }
}

struct CreateMicrosoftADOutputResponseBody: Swift.Equatable {
    public let directoryId: Swift.String?
}

extension CreateMicrosoftADOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
    }
}

public struct CreateSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSnapshotOutputError>
}

extension CreateSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSnapshotInput(directoryId: \(Swift.String(describing: directoryId)), name: \(Swift.String(describing: name)))"}
}

extension CreateSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct CreateSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSnapshotOutputError>
}

public struct CreateSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSnapshotOutputError>
}

/// <p>Contains the inputs for the <a>CreateSnapshot</a> operation.</p>
public struct CreateSnapshotInput: Swift.Equatable {
    /// <p>The identifier of the directory of which to take a snapshot.</p>
    public let directoryId: Swift.String?
    /// <p>The descriptive name to apply to the snapshot.</p>
    public let name: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.name = name
    }
}

struct CreateSnapshotInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let name: Swift.String?
}

extension CreateSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension CreateSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotLimitExceededException" : self = .snapshotLimitExceededException(try SnapshotLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateSnapshotOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case snapshotLimitExceededException(SnapshotLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSnapshotOutputResponse(snapshotId: \(Swift.String(describing: snapshotId)))"}
}

extension CreateSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.snapshotId = output.snapshotId
        } else {
            self.snapshotId = nil
        }
    }
}

/// <p>Contains the results of the <a>CreateSnapshot</a> operation.</p>
public struct CreateSnapshotOutputResponse: Swift.Equatable {
    /// <p>The identifier of the snapshot that was created.</p>
    public let snapshotId: Swift.String?

    public init (
        snapshotId: Swift.String? = nil
    )
    {
        self.snapshotId = snapshotId
    }
}

struct CreateSnapshotOutputResponseBody: Swift.Equatable {
    public let snapshotId: Swift.String?
}

extension CreateSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotId = "SnapshotId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
    }
}

public struct CreateTrustInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrustInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrustOutputError>
}

extension CreateTrustInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTrustInput(conditionalForwarderIpAddrs: \(Swift.String(describing: conditionalForwarderIpAddrs)), directoryId: \(Swift.String(describing: directoryId)), remoteDomainName: \(Swift.String(describing: remoteDomainName)), selectiveAuth: \(Swift.String(describing: selectiveAuth)), trustDirection: \(Swift.String(describing: trustDirection)), trustPassword: \(Swift.String(describing: trustPassword)), trustType: \(Swift.String(describing: trustType)))"}
}

extension CreateTrustInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionalForwarderIpAddrs = "ConditionalForwarderIpAddrs"
        case directoryId = "DirectoryId"
        case remoteDomainName = "RemoteDomainName"
        case selectiveAuth = "SelectiveAuth"
        case trustDirection = "TrustDirection"
        case trustPassword = "TrustPassword"
        case trustType = "TrustType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conditionalForwarderIpAddrs = conditionalForwarderIpAddrs {
            var conditionalForwarderIpAddrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conditionalForwarderIpAddrs)
            for dnsipaddrs0 in conditionalForwarderIpAddrs {
                try conditionalForwarderIpAddrsContainer.encode(dnsipaddrs0)
            }
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let remoteDomainName = remoteDomainName {
            try encodeContainer.encode(remoteDomainName, forKey: .remoteDomainName)
        }
        if let selectiveAuth = selectiveAuth {
            try encodeContainer.encode(selectiveAuth.rawValue, forKey: .selectiveAuth)
        }
        if let trustDirection = trustDirection {
            try encodeContainer.encode(trustDirection.rawValue, forKey: .trustDirection)
        }
        if let trustPassword = trustPassword {
            try encodeContainer.encode(trustPassword, forKey: .trustPassword)
        }
        if let trustType = trustType {
            try encodeContainer.encode(trustType.rawValue, forKey: .trustType)
        }
    }
}

public struct CreateTrustInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrustInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrustOutputError>
}

public struct CreateTrustInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateTrustInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateTrustOutputError>
}

/// <p>AWS Directory Service for Microsoft Active Directory allows you to configure trust relationships. For example, you can establish a trust between your AWS Managed Microsoft AD directory, and your existing on-premises Microsoft Active Directory. This would allow you to provide users and groups access to resources in either domain, with a single set of credentials.</p>
///          <p>This action initiates the creation of the AWS side of a trust relationship between an AWS Managed Microsoft AD directory and an external domain.</p>
public struct CreateTrustInput: Swift.Equatable {
    /// <p>The IP addresses of the remote DNS server associated with RemoteDomainName.</p>
    public let conditionalForwarderIpAddrs: [Swift.String]?
    /// <p>The Directory ID of the AWS Managed Microsoft AD directory for which to establish the trust relationship.</p>
    public let directoryId: Swift.String?
    /// <p>The Fully Qualified Domain Name (FQDN) of the external domain for which to create the trust relationship.</p>
    public let remoteDomainName: Swift.String?
    /// <p>Optional parameter to enable selective authentication for the trust.</p>
    public let selectiveAuth: DirectoryClientTypes.SelectiveAuth?
    /// <p>The direction of the trust relationship.</p>
    public let trustDirection: DirectoryClientTypes.TrustDirection?
    /// <p>The trust password. The must be the same password that was used when creating the trust relationship on the external domain.</p>
    public let trustPassword: Swift.String?
    /// <p>The trust relationship type. <code>Forest</code> is the default.</p>
    public let trustType: DirectoryClientTypes.TrustType?

    public init (
        conditionalForwarderIpAddrs: [Swift.String]? = nil,
        directoryId: Swift.String? = nil,
        remoteDomainName: Swift.String? = nil,
        selectiveAuth: DirectoryClientTypes.SelectiveAuth? = nil,
        trustDirection: DirectoryClientTypes.TrustDirection? = nil,
        trustPassword: Swift.String? = nil,
        trustType: DirectoryClientTypes.TrustType? = nil
    )
    {
        self.conditionalForwarderIpAddrs = conditionalForwarderIpAddrs
        self.directoryId = directoryId
        self.remoteDomainName = remoteDomainName
        self.selectiveAuth = selectiveAuth
        self.trustDirection = trustDirection
        self.trustPassword = trustPassword
        self.trustType = trustType
    }
}

struct CreateTrustInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let remoteDomainName: Swift.String?
    public let trustPassword: Swift.String?
    public let trustDirection: DirectoryClientTypes.TrustDirection?
    public let trustType: DirectoryClientTypes.TrustType?
    public let conditionalForwarderIpAddrs: [Swift.String]?
    public let selectiveAuth: DirectoryClientTypes.SelectiveAuth?
}

extension CreateTrustInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionalForwarderIpAddrs = "ConditionalForwarderIpAddrs"
        case directoryId = "DirectoryId"
        case remoteDomainName = "RemoteDomainName"
        case selectiveAuth = "SelectiveAuth"
        case trustDirection = "TrustDirection"
        case trustPassword = "TrustPassword"
        case trustType = "TrustType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let remoteDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteDomainName)
        remoteDomainName = remoteDomainNameDecoded
        let trustPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustPassword)
        trustPassword = trustPasswordDecoded
        let trustDirectionDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.TrustDirection.self, forKey: .trustDirection)
        trustDirection = trustDirectionDecoded
        let trustTypeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.TrustType.self, forKey: .trustType)
        trustType = trustTypeDecoded
        let conditionalForwarderIpAddrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .conditionalForwarderIpAddrs)
        var conditionalForwarderIpAddrsDecoded0:[Swift.String]? = nil
        if let conditionalForwarderIpAddrsContainer = conditionalForwarderIpAddrsContainer {
            conditionalForwarderIpAddrsDecoded0 = [Swift.String]()
            for string0 in conditionalForwarderIpAddrsContainer {
                if let string0 = string0 {
                    conditionalForwarderIpAddrsDecoded0?.append(string0)
                }
            }
        }
        conditionalForwarderIpAddrs = conditionalForwarderIpAddrsDecoded0
        let selectiveAuthDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.SelectiveAuth.self, forKey: .selectiveAuth)
        selectiveAuth = selectiveAuthDecoded
    }
}

extension CreateTrustOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateTrustOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExistsException" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateTrustOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateTrustOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateTrustOutputResponse(trustId: \(Swift.String(describing: trustId)))"}
}

extension CreateTrustOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateTrustOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trustId = output.trustId
        } else {
            self.trustId = nil
        }
    }
}

/// <p>The result of a CreateTrust request.</p>
public struct CreateTrustOutputResponse: Swift.Equatable {
    /// <p>A unique identifier for the trust relationship that was created.</p>
    public let trustId: Swift.String?

    public init (
        trustId: Swift.String? = nil
    )
    {
        self.trustId = trustId
    }
}

struct CreateTrustOutputResponseBody: Swift.Equatable {
    public let trustId: Swift.String?
}

extension CreateTrustOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trustId = "TrustId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustId)
        trustId = trustIdDecoded
    }
}

public struct DeleteConditionalForwarderInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConditionalForwarderInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConditionalForwarderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConditionalForwarderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConditionalForwarderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConditionalForwarderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConditionalForwarderOutputError>
}

extension DeleteConditionalForwarderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConditionalForwarderInput(directoryId: \(Swift.String(describing: directoryId)), remoteDomainName: \(Swift.String(describing: remoteDomainName)))"}
}

extension DeleteConditionalForwarderInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case remoteDomainName = "RemoteDomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let remoteDomainName = remoteDomainName {
            try encodeContainer.encode(remoteDomainName, forKey: .remoteDomainName)
        }
    }
}

public struct DeleteConditionalForwarderInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConditionalForwarderInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConditionalForwarderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConditionalForwarderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConditionalForwarderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConditionalForwarderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConditionalForwarderOutputError>
}

public struct DeleteConditionalForwarderInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConditionalForwarderInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConditionalForwarderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConditionalForwarderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConditionalForwarderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConditionalForwarderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConditionalForwarderOutputError>
}

/// <p>Deletes a conditional forwarder.</p>
public struct DeleteConditionalForwarderInput: Swift.Equatable {
    /// <p>The directory ID for which you are deleting the conditional forwarder.</p>
    public let directoryId: Swift.String?
    /// <p>The fully qualified domain name (FQDN) of the remote domain with which you are deleting the conditional forwarder.</p>
    public let remoteDomainName: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        remoteDomainName: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.remoteDomainName = remoteDomainName
    }
}

struct DeleteConditionalForwarderInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let remoteDomainName: Swift.String?
}

extension DeleteConditionalForwarderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case remoteDomainName = "RemoteDomainName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let remoteDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteDomainName)
        remoteDomainName = remoteDomainNameDecoded
    }
}

extension DeleteConditionalForwarderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConditionalForwarderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConditionalForwarderOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConditionalForwarderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConditionalForwarderOutputResponse()"}
}

extension DeleteConditionalForwarderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The result of a DeleteConditionalForwarder request.</p>
public struct DeleteConditionalForwarderOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteConditionalForwarderOutputResponseBody: Swift.Equatable {
}

extension DeleteConditionalForwarderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteDirectoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectoryOutputError>
}

extension DeleteDirectoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDirectoryInput(directoryId: \(Swift.String(describing: directoryId)))"}
}

extension DeleteDirectoryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
    }
}

public struct DeleteDirectoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectoryOutputError>
}

public struct DeleteDirectoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDirectoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDirectoryOutputError>
}

/// <p>Contains the inputs for the <a>DeleteDirectory</a> operation.</p>
public struct DeleteDirectoryInput: Swift.Equatable {
    /// <p>The identifier of the directory to delete.</p>
    public let directoryId: Swift.String?

    public init (
        directoryId: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
    }
}

struct DeleteDirectoryInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
}

extension DeleteDirectoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
    }
}

extension DeleteDirectoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDirectoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDirectoryOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDirectoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDirectoryOutputResponse(directoryId: \(Swift.String(describing: directoryId)))"}
}

extension DeleteDirectoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteDirectoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directoryId = output.directoryId
        } else {
            self.directoryId = nil
        }
    }
}

/// <p>Contains the results of the <a>DeleteDirectory</a> operation.</p>
public struct DeleteDirectoryOutputResponse: Swift.Equatable {
    /// <p>The directory identifier.</p>
    public let directoryId: Swift.String?

    public init (
        directoryId: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
    }
}

struct DeleteDirectoryOutputResponseBody: Swift.Equatable {
    public let directoryId: Swift.String?
}

extension DeleteDirectoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
    }
}

public struct DeleteLogSubscriptionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLogSubscriptionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLogSubscriptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLogSubscriptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLogSubscriptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLogSubscriptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLogSubscriptionOutputError>
}

extension DeleteLogSubscriptionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLogSubscriptionInput(directoryId: \(Swift.String(describing: directoryId)))"}
}

extension DeleteLogSubscriptionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
    }
}

public struct DeleteLogSubscriptionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLogSubscriptionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLogSubscriptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLogSubscriptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLogSubscriptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLogSubscriptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLogSubscriptionOutputError>
}

public struct DeleteLogSubscriptionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLogSubscriptionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLogSubscriptionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLogSubscriptionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLogSubscriptionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLogSubscriptionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLogSubscriptionOutputError>
}

public struct DeleteLogSubscriptionInput: Swift.Equatable {
    /// <p>Identifier of the directory whose log subscription you want to delete.</p>
    public let directoryId: Swift.String?

    public init (
        directoryId: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
    }
}

struct DeleteLogSubscriptionInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
}

extension DeleteLogSubscriptionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
    }
}

extension DeleteLogSubscriptionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLogSubscriptionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLogSubscriptionOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLogSubscriptionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLogSubscriptionOutputResponse()"}
}

extension DeleteLogSubscriptionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLogSubscriptionOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteLogSubscriptionOutputResponseBody: Swift.Equatable {
}

extension DeleteLogSubscriptionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSnapshotOutputError>
}

extension DeleteSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSnapshotInput(snapshotId: \(Swift.String(describing: snapshotId)))"}
}

extension DeleteSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotId = "SnapshotId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let snapshotId = snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
    }
}

public struct DeleteSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSnapshotOutputError>
}

public struct DeleteSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSnapshotOutputError>
}

/// <p>Contains the inputs for the <a>DeleteSnapshot</a> operation.</p>
public struct DeleteSnapshotInput: Swift.Equatable {
    /// <p>The identifier of the directory snapshot to be deleted.</p>
    public let snapshotId: Swift.String?

    public init (
        snapshotId: Swift.String? = nil
    )
    {
        self.snapshotId = snapshotId
    }
}

struct DeleteSnapshotInputBody: Swift.Equatable {
    public let snapshotId: Swift.String?
}

extension DeleteSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotId = "SnapshotId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
    }
}

extension DeleteSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSnapshotOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSnapshotOutputResponse(snapshotId: \(Swift.String(describing: snapshotId)))"}
}

extension DeleteSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.snapshotId = output.snapshotId
        } else {
            self.snapshotId = nil
        }
    }
}

/// <p>Contains the results of the <a>DeleteSnapshot</a> operation.</p>
public struct DeleteSnapshotOutputResponse: Swift.Equatable {
    /// <p>The identifier of the directory snapshot that was deleted.</p>
    public let snapshotId: Swift.String?

    public init (
        snapshotId: Swift.String? = nil
    )
    {
        self.snapshotId = snapshotId
    }
}

struct DeleteSnapshotOutputResponseBody: Swift.Equatable {
    public let snapshotId: Swift.String?
}

extension DeleteSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotId = "SnapshotId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
    }
}

public struct DeleteTrustInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTrustInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTrustOutputError>
}

extension DeleteTrustInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTrustInput(deleteAssociatedConditionalForwarder: \(Swift.String(describing: deleteAssociatedConditionalForwarder)), trustId: \(Swift.String(describing: trustId)))"}
}

extension DeleteTrustInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteAssociatedConditionalForwarder = "DeleteAssociatedConditionalForwarder"
        case trustId = "TrustId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if deleteAssociatedConditionalForwarder != false {
            try encodeContainer.encode(deleteAssociatedConditionalForwarder, forKey: .deleteAssociatedConditionalForwarder)
        }
        if let trustId = trustId {
            try encodeContainer.encode(trustId, forKey: .trustId)
        }
    }
}

public struct DeleteTrustInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTrustInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTrustOutputError>
}

public struct DeleteTrustInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTrustInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTrustOutputError>
}

/// <p>Deletes the local side of an existing trust relationship between the AWS Managed Microsoft AD directory and the external domain.</p>
public struct DeleteTrustInput: Swift.Equatable {
    /// <p>Delete a conditional forwarder as part of a DeleteTrustRequest.</p>
    public let deleteAssociatedConditionalForwarder: Swift.Bool
    /// <p>The Trust ID of the trust relationship to be deleted.</p>
    public let trustId: Swift.String?

    public init (
        deleteAssociatedConditionalForwarder: Swift.Bool = false,
        trustId: Swift.String? = nil
    )
    {
        self.deleteAssociatedConditionalForwarder = deleteAssociatedConditionalForwarder
        self.trustId = trustId
    }
}

struct DeleteTrustInputBody: Swift.Equatable {
    public let trustId: Swift.String?
    public let deleteAssociatedConditionalForwarder: Swift.Bool
}

extension DeleteTrustInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleteAssociatedConditionalForwarder = "DeleteAssociatedConditionalForwarder"
        case trustId = "TrustId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustId)
        trustId = trustIdDecoded
        let deleteAssociatedConditionalForwarderDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deleteAssociatedConditionalForwarder)
        deleteAssociatedConditionalForwarder = deleteAssociatedConditionalForwarderDecoded
    }
}

extension DeleteTrustOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTrustOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTrustOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTrustOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTrustOutputResponse(trustId: \(Swift.String(describing: trustId)))"}
}

extension DeleteTrustOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteTrustOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trustId = output.trustId
        } else {
            self.trustId = nil
        }
    }
}

/// <p>The result of a DeleteTrust request.</p>
public struct DeleteTrustOutputResponse: Swift.Equatable {
    /// <p>The Trust ID of the trust relationship that was deleted.</p>
    public let trustId: Swift.String?

    public init (
        trustId: Swift.String? = nil
    )
    {
        self.trustId = trustId
    }
}

struct DeleteTrustOutputResponseBody: Swift.Equatable {
    public let trustId: Swift.String?
}

extension DeleteTrustOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trustId = "TrustId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustId)
        trustId = trustIdDecoded
    }
}

public struct DeregisterCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterCertificateOutputError>
}

extension DeregisterCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeregisterCertificateInput(certificateId: \(Swift.String(describing: certificateId)), directoryId: \(Swift.String(describing: directoryId)))"}
}

extension DeregisterCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateId = "CertificateId"
        case directoryId = "DirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateId = certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
    }
}

public struct DeregisterCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterCertificateOutputError>
}

public struct DeregisterCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterCertificateOutputError>
}

public struct DeregisterCertificateInput: Swift.Equatable {
    /// <p>The identifier of the certificate.</p>
    public let certificateId: Swift.String?
    /// <p>The identifier of the directory.</p>
    public let directoryId: Swift.String?

    public init (
        certificateId: Swift.String? = nil,
        directoryId: Swift.String? = nil
    )
    {
        self.certificateId = certificateId
        self.directoryId = directoryId
    }
}

struct DeregisterCertificateInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let certificateId: Swift.String?
}

extension DeregisterCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateId = "CertificateId"
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
    }
}

extension DeregisterCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateDoesNotExistException" : self = .certificateDoesNotExistException(try CertificateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CertificateInUseException" : self = .certificateInUseException(try CertificateInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeregisterCertificateOutputError: Swift.Error, Swift.Equatable {
    case certificateDoesNotExistException(CertificateDoesNotExistException)
    case certificateInUseException(CertificateInUseException)
    case clientException(ClientException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeregisterCertificateOutputResponse()"}
}

extension DeregisterCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeregisterCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeregisterCertificateOutputResponseBody: Swift.Equatable {
}

extension DeregisterCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeregisterEventTopicInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterEventTopicInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterEventTopicInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterEventTopicOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterEventTopicInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterEventTopicOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterEventTopicOutputError>
}

extension DeregisterEventTopicInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeregisterEventTopicInput(directoryId: \(Swift.String(describing: directoryId)), topicName: \(Swift.String(describing: topicName)))"}
}

extension DeregisterEventTopicInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let topicName = topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }
}

public struct DeregisterEventTopicInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterEventTopicInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterEventTopicInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterEventTopicOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterEventTopicInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterEventTopicOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterEventTopicOutputError>
}

public struct DeregisterEventTopicInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeregisterEventTopicInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeregisterEventTopicInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeregisterEventTopicOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeregisterEventTopicInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeregisterEventTopicOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeregisterEventTopicOutputError>
}

/// <p>Removes the specified directory as a publisher to the specified SNS topic.</p>
public struct DeregisterEventTopicInput: Swift.Equatable {
    /// <p>The Directory ID to remove as a publisher. This directory will no longer send messages to the specified SNS topic.</p>
    public let directoryId: Swift.String?
    /// <p>The name of the SNS topic from which to remove the directory as a publisher.</p>
    public let topicName: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        topicName: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.topicName = topicName
    }
}

struct DeregisterEventTopicInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let topicName: Swift.String?
}

extension DeregisterEventTopicInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case topicName = "TopicName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
    }
}

extension DeregisterEventTopicOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeregisterEventTopicOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeregisterEventTopicOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeregisterEventTopicOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeregisterEventTopicOutputResponse()"}
}

extension DeregisterEventTopicOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The result of a DeregisterEventTopic request.</p>
public struct DeregisterEventTopicOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeregisterEventTopicOutputResponseBody: Swift.Equatable {
}

extension DeregisterEventTopicOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCertificateOutputError>
}

extension DescribeCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCertificateInput(certificateId: \(Swift.String(describing: certificateId)), directoryId: \(Swift.String(describing: directoryId)))"}
}

extension DescribeCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateId = "CertificateId"
        case directoryId = "DirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateId = certificateId {
            try encodeContainer.encode(certificateId, forKey: .certificateId)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
    }
}

public struct DescribeCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCertificateOutputError>
}

public struct DescribeCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCertificateOutputError>
}

public struct DescribeCertificateInput: Swift.Equatable {
    /// <p>The identifier of the certificate.</p>
    public let certificateId: Swift.String?
    /// <p>The identifier of the directory.</p>
    public let directoryId: Swift.String?

    public init (
        certificateId: Swift.String? = nil,
        directoryId: Swift.String? = nil
    )
    {
        self.certificateId = certificateId
        self.directoryId = directoryId
    }
}

struct DescribeCertificateInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let certificateId: Swift.String?
}

extension DescribeCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateId = "CertificateId"
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
    }
}

extension DescribeCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateDoesNotExistException" : self = .certificateDoesNotExistException(try CertificateDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCertificateOutputError: Swift.Error, Swift.Equatable {
    case certificateDoesNotExistException(CertificateDoesNotExistException)
    case clientException(ClientException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCertificateOutputResponse(certificate: \(Swift.String(describing: certificate)))"}
}

extension DescribeCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificate = output.certificate
        } else {
            self.certificate = nil
        }
    }
}

public struct DescribeCertificateOutputResponse: Swift.Equatable {
    /// <p>Information about the certificate, including registered date time, certificate state, the
    ///       reason for the state, expiration date time, and certificate common name.</p>
    public let certificate: DirectoryClientTypes.Certificate?

    public init (
        certificate: DirectoryClientTypes.Certificate? = nil
    )
    {
        self.certificate = certificate
    }
}

struct DescribeCertificateOutputResponseBody: Swift.Equatable {
    public let certificate: DirectoryClientTypes.Certificate?
}

extension DescribeCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate = "Certificate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.Certificate.self, forKey: .certificate)
        certificate = certificateDecoded
    }
}

public struct DescribeConditionalForwardersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConditionalForwardersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConditionalForwardersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConditionalForwardersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConditionalForwardersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConditionalForwardersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConditionalForwardersOutputError>
}

extension DescribeConditionalForwardersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConditionalForwardersInput(directoryId: \(Swift.String(describing: directoryId)), remoteDomainNames: \(Swift.String(describing: remoteDomainNames)))"}
}

extension DescribeConditionalForwardersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case remoteDomainNames = "RemoteDomainNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let remoteDomainNames = remoteDomainNames {
            var remoteDomainNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .remoteDomainNames)
            for remotedomainnames0 in remoteDomainNames {
                try remoteDomainNamesContainer.encode(remotedomainnames0)
            }
        }
    }
}

public struct DescribeConditionalForwardersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConditionalForwardersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConditionalForwardersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConditionalForwardersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConditionalForwardersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConditionalForwardersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConditionalForwardersOutputError>
}

public struct DescribeConditionalForwardersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConditionalForwardersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConditionalForwardersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConditionalForwardersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConditionalForwardersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConditionalForwardersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConditionalForwardersOutputError>
}

/// <p>Describes a conditional forwarder.</p>
public struct DescribeConditionalForwardersInput: Swift.Equatable {
    /// <p>The directory ID for which to get the list of associated conditional forwarders.</p>
    public let directoryId: Swift.String?
    /// <p>The fully qualified domain names (FQDN) of the remote domains for which to get the list of associated conditional forwarders. If this member is null, all conditional forwarders are returned.</p>
    public let remoteDomainNames: [Swift.String]?

    public init (
        directoryId: Swift.String? = nil,
        remoteDomainNames: [Swift.String]? = nil
    )
    {
        self.directoryId = directoryId
        self.remoteDomainNames = remoteDomainNames
    }
}

struct DescribeConditionalForwardersInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let remoteDomainNames: [Swift.String]?
}

extension DescribeConditionalForwardersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case remoteDomainNames = "RemoteDomainNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let remoteDomainNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .remoteDomainNames)
        var remoteDomainNamesDecoded0:[Swift.String]? = nil
        if let remoteDomainNamesContainer = remoteDomainNamesContainer {
            remoteDomainNamesDecoded0 = [Swift.String]()
            for string0 in remoteDomainNamesContainer {
                if let string0 = string0 {
                    remoteDomainNamesDecoded0?.append(string0)
                }
            }
        }
        remoteDomainNames = remoteDomainNamesDecoded0
    }
}

extension DescribeConditionalForwardersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConditionalForwardersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConditionalForwardersOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConditionalForwardersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConditionalForwardersOutputResponse(conditionalForwarders: \(Swift.String(describing: conditionalForwarders)))"}
}

extension DescribeConditionalForwardersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConditionalForwardersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.conditionalForwarders = output.conditionalForwarders
        } else {
            self.conditionalForwarders = nil
        }
    }
}

/// <p>The result of a DescribeConditionalForwarder request.</p>
public struct DescribeConditionalForwardersOutputResponse: Swift.Equatable {
    /// <p>The list of conditional forwarders that have been created.</p>
    public let conditionalForwarders: [DirectoryClientTypes.ConditionalForwarder]?

    public init (
        conditionalForwarders: [DirectoryClientTypes.ConditionalForwarder]? = nil
    )
    {
        self.conditionalForwarders = conditionalForwarders
    }
}

struct DescribeConditionalForwardersOutputResponseBody: Swift.Equatable {
    public let conditionalForwarders: [DirectoryClientTypes.ConditionalForwarder]?
}

extension DescribeConditionalForwardersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conditionalForwarders = "ConditionalForwarders"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conditionalForwardersContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.ConditionalForwarder?].self, forKey: .conditionalForwarders)
        var conditionalForwardersDecoded0:[DirectoryClientTypes.ConditionalForwarder]? = nil
        if let conditionalForwardersContainer = conditionalForwardersContainer {
            conditionalForwardersDecoded0 = [DirectoryClientTypes.ConditionalForwarder]()
            for structure0 in conditionalForwardersContainer {
                if let structure0 = structure0 {
                    conditionalForwardersDecoded0?.append(structure0)
                }
            }
        }
        conditionalForwarders = conditionalForwardersDecoded0
    }
}

public struct DescribeDirectoriesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectoriesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectoriesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectoriesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectoriesOutputError>
}

extension DescribeDirectoriesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDirectoriesInput(directoryIds: \(Swift.String(describing: directoryIds)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeDirectoriesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryIds = "DirectoryIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryIds = directoryIds {
            var directoryIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .directoryIds)
            for directoryids0 in directoryIds {
                try directoryIdsContainer.encode(directoryids0)
            }
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeDirectoriesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectoriesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectoriesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectoriesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectoriesOutputError>
}

public struct DescribeDirectoriesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDirectoriesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDirectoriesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDirectoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDirectoriesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDirectoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDirectoriesOutputError>
}

/// <p>Contains the inputs for the <a>DescribeDirectories</a> operation.</p>
public struct DescribeDirectoriesInput: Swift.Equatable {
    /// <p>A list of identifiers of the directories for which to obtain the information. If this
    ///       member is null, all directories that belong to the current account are returned.</p>
    ///          <p>An empty list results in an <code>InvalidParameterException</code> being thrown.</p>
    public let directoryIds: [Swift.String]?
    /// <p>The maximum number of items to return. If this value is zero, the maximum number of items
    ///       is specified by the limitations of the operation.</p>
    public let limit: Swift.Int?
    /// <p>The <code>DescribeDirectoriesResult.NextToken</code> value from a previous call to <a>DescribeDirectories</a>. Pass null if this is the first call.</p>
    public let nextToken: Swift.String?

    public init (
        directoryIds: [Swift.String]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directoryIds = directoryIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeDirectoriesInputBody: Swift.Equatable {
    public let directoryIds: [Swift.String]?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension DescribeDirectoriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryIds = "DirectoryIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .directoryIds)
        var directoryIdsDecoded0:[Swift.String]? = nil
        if let directoryIdsContainer = directoryIdsContainer {
            directoryIdsDecoded0 = [Swift.String]()
            for string0 in directoryIdsContainer {
                if let string0 = string0 {
                    directoryIdsDecoded0?.append(string0)
                }
            }
        }
        directoryIds = directoryIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeDirectoriesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDirectoriesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDirectoriesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDirectoriesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDirectoriesOutputResponse(directoryDescriptions: \(Swift.String(describing: directoryDescriptions)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeDirectoriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDirectoriesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directoryDescriptions = output.directoryDescriptions
            self.nextToken = output.nextToken
        } else {
            self.directoryDescriptions = nil
            self.nextToken = nil
        }
    }
}

/// <p>Contains the results of the <a>DescribeDirectories</a> operation.</p>
public struct DescribeDirectoriesOutputResponse: Swift.Equatable {
    /// <p>The list of <a>DirectoryDescription</a> objects that were retrieved.</p>
    ///          <p>It is possible that this list contains less than the number of items specified in the
    ///         <code>Limit</code> member of the request. This occurs if there are less than the requested
    ///       number of items left to retrieve, or if the limitations of the operation have been
    ///       exceeded.</p>
    public let directoryDescriptions: [DirectoryClientTypes.DirectoryDescription]?
    /// <p>If not null, more results are available. Pass this value for the <code>NextToken</code>
    ///       parameter in a subsequent call to <a>DescribeDirectories</a> to retrieve the next
    ///       set of items.</p>
    public let nextToken: Swift.String?

    public init (
        directoryDescriptions: [DirectoryClientTypes.DirectoryDescription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directoryDescriptions = directoryDescriptions
        self.nextToken = nextToken
    }
}

struct DescribeDirectoriesOutputResponseBody: Swift.Equatable {
    public let directoryDescriptions: [DirectoryClientTypes.DirectoryDescription]?
    public let nextToken: Swift.String?
}

extension DescribeDirectoriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryDescriptions = "DirectoryDescriptions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryDescriptionsContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.DirectoryDescription?].self, forKey: .directoryDescriptions)
        var directoryDescriptionsDecoded0:[DirectoryClientTypes.DirectoryDescription]? = nil
        if let directoryDescriptionsContainer = directoryDescriptionsContainer {
            directoryDescriptionsDecoded0 = [DirectoryClientTypes.DirectoryDescription]()
            for structure0 in directoryDescriptionsContainer {
                if let structure0 = structure0 {
                    directoryDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        directoryDescriptions = directoryDescriptionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeDomainControllersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDomainControllersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDomainControllersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDomainControllersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDomainControllersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDomainControllersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDomainControllersOutputError>
}

extension DescribeDomainControllersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDomainControllersInput(directoryId: \(Swift.String(describing: directoryId)), domainControllerIds: \(Swift.String(describing: domainControllerIds)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeDomainControllersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case domainControllerIds = "DomainControllerIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let domainControllerIds = domainControllerIds {
            var domainControllerIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainControllerIds)
            for domaincontrollerids0 in domainControllerIds {
                try domainControllerIdsContainer.encode(domaincontrollerids0)
            }
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeDomainControllersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDomainControllersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDomainControllersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDomainControllersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDomainControllersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDomainControllersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDomainControllersOutputError>
}

public struct DescribeDomainControllersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDomainControllersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDomainControllersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDomainControllersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDomainControllersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDomainControllersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDomainControllersOutputError>
}

public struct DescribeDomainControllersInput: Swift.Equatable {
    /// <p>Identifier of the directory for which to retrieve the domain controller information.</p>
    public let directoryId: Swift.String?
    /// <p>A list of identifiers for the domain controllers whose information will be provided.</p>
    public let domainControllerIds: [Swift.String]?
    /// <p>The maximum number of items to return.</p>
    public let limit: Swift.Int?
    /// <p>The <i>DescribeDomainControllers.NextToken</i> value from a previous call to <a>DescribeDomainControllers</a>. Pass null if this is the first call. </p>
    public let nextToken: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        domainControllerIds: [Swift.String]? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.domainControllerIds = domainControllerIds
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeDomainControllersInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let domainControllerIds: [Swift.String]?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension DescribeDomainControllersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case domainControllerIds = "DomainControllerIds"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let domainControllerIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .domainControllerIds)
        var domainControllerIdsDecoded0:[Swift.String]? = nil
        if let domainControllerIdsContainer = domainControllerIdsContainer {
            domainControllerIdsDecoded0 = [Swift.String]()
            for string0 in domainControllerIdsContainer {
                if let string0 = string0 {
                    domainControllerIdsDecoded0?.append(string0)
                }
            }
        }
        domainControllerIds = domainControllerIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeDomainControllersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDomainControllersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDomainControllersOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDomainControllersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDomainControllersOutputResponse(domainControllers: \(Swift.String(describing: domainControllers)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeDomainControllersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDomainControllersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.domainControllers = output.domainControllers
            self.nextToken = output.nextToken
        } else {
            self.domainControllers = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDomainControllersOutputResponse: Swift.Equatable {
    /// <p>List of the <a>DomainController</a> objects that were retrieved.</p>
    public let domainControllers: [DirectoryClientTypes.DomainController]?
    /// <p>If not null, more results are available. Pass this value for the <code>NextToken</code> parameter in a subsequent call to <a>DescribeDomainControllers</a> retrieve the next set of items.</p>
    public let nextToken: Swift.String?

    public init (
        domainControllers: [DirectoryClientTypes.DomainController]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domainControllers = domainControllers
        self.nextToken = nextToken
    }
}

struct DescribeDomainControllersOutputResponseBody: Swift.Equatable {
    public let domainControllers: [DirectoryClientTypes.DomainController]?
    public let nextToken: Swift.String?
}

extension DescribeDomainControllersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainControllers = "DomainControllers"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainControllersContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.DomainController?].self, forKey: .domainControllers)
        var domainControllersDecoded0:[DirectoryClientTypes.DomainController]? = nil
        if let domainControllersContainer = domainControllersContainer {
            domainControllersDecoded0 = [DirectoryClientTypes.DomainController]()
            for structure0 in domainControllersContainer {
                if let structure0 = structure0 {
                    domainControllersDecoded0?.append(structure0)
                }
            }
        }
        domainControllers = domainControllersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeEventTopicsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeEventTopicsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeEventTopicsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeEventTopicsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeEventTopicsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeEventTopicsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeEventTopicsOutputError>
}

extension DescribeEventTopicsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeEventTopicsInput(directoryId: \(Swift.String(describing: directoryId)), topicNames: \(Swift.String(describing: topicNames)))"}
}

extension DescribeEventTopicsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case topicNames = "TopicNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let topicNames = topicNames {
            var topicNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .topicNames)
            for topicnames0 in topicNames {
                try topicNamesContainer.encode(topicnames0)
            }
        }
    }
}

public struct DescribeEventTopicsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeEventTopicsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeEventTopicsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeEventTopicsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeEventTopicsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeEventTopicsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeEventTopicsOutputError>
}

public struct DescribeEventTopicsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeEventTopicsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeEventTopicsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeEventTopicsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeEventTopicsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeEventTopicsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeEventTopicsOutputError>
}

/// <p>Describes event topics.</p>
public struct DescribeEventTopicsInput: Swift.Equatable {
    /// <p>The Directory ID for which to get the list of associated SNS topics. If this member is null, associations for all Directory IDs are returned.</p>
    public let directoryId: Swift.String?
    /// <p>A list of SNS topic names for which to obtain the information. If this member is null, all associations for the specified Directory ID are returned.</p>
    ///          <p>An empty list results in an <code>InvalidParameterException</code> being thrown.</p>
    public let topicNames: [Swift.String]?

    public init (
        directoryId: Swift.String? = nil,
        topicNames: [Swift.String]? = nil
    )
    {
        self.directoryId = directoryId
        self.topicNames = topicNames
    }
}

struct DescribeEventTopicsInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let topicNames: [Swift.String]?
}

extension DescribeEventTopicsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case topicNames = "TopicNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let topicNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .topicNames)
        var topicNamesDecoded0:[Swift.String]? = nil
        if let topicNamesContainer = topicNamesContainer {
            topicNamesDecoded0 = [Swift.String]()
            for string0 in topicNamesContainer {
                if let string0 = string0 {
                    topicNamesDecoded0?.append(string0)
                }
            }
        }
        topicNames = topicNamesDecoded0
    }
}

extension DescribeEventTopicsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEventTopicsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeEventTopicsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEventTopicsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeEventTopicsOutputResponse(eventTopics: \(Swift.String(describing: eventTopics)))"}
}

extension DescribeEventTopicsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeEventTopicsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.eventTopics = output.eventTopics
        } else {
            self.eventTopics = nil
        }
    }
}

/// <p>The result of a DescribeEventTopic request.</p>
public struct DescribeEventTopicsOutputResponse: Swift.Equatable {
    /// <p>A list of SNS topic names that receive status messages from the specified Directory ID.</p>
    public let eventTopics: [DirectoryClientTypes.EventTopic]?

    public init (
        eventTopics: [DirectoryClientTypes.EventTopic]? = nil
    )
    {
        self.eventTopics = eventTopics
    }
}

struct DescribeEventTopicsOutputResponseBody: Swift.Equatable {
    public let eventTopics: [DirectoryClientTypes.EventTopic]?
}

extension DescribeEventTopicsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventTopics = "EventTopics"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventTopicsContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.EventTopic?].self, forKey: .eventTopics)
        var eventTopicsDecoded0:[DirectoryClientTypes.EventTopic]? = nil
        if let eventTopicsContainer = eventTopicsContainer {
            eventTopicsDecoded0 = [DirectoryClientTypes.EventTopic]()
            for structure0 in eventTopicsContainer {
                if let structure0 = structure0 {
                    eventTopicsDecoded0?.append(structure0)
                }
            }
        }
        eventTopics = eventTopicsDecoded0
    }
}

public struct DescribeLDAPSSettingsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLDAPSSettingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLDAPSSettingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLDAPSSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLDAPSSettingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLDAPSSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLDAPSSettingsOutputError>
}

extension DescribeLDAPSSettingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLDAPSSettingsInput(directoryId: \(Swift.String(describing: directoryId)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), type: \(Swift.String(describing: type)))"}
}

extension DescribeLDAPSSettingsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct DescribeLDAPSSettingsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLDAPSSettingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLDAPSSettingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLDAPSSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLDAPSSettingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLDAPSSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLDAPSSettingsOutputError>
}

public struct DescribeLDAPSSettingsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLDAPSSettingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLDAPSSettingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLDAPSSettingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLDAPSSettingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLDAPSSettingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLDAPSSettingsOutputError>
}

public struct DescribeLDAPSSettingsInput: Swift.Equatable {
    /// <p>The identifier of the directory.</p>
    public let directoryId: Swift.String?
    /// <p>Specifies the number of items that should be displayed on one page.</p>
    public let limit: Swift.Int?
    /// <p>The type of next token used for pagination.</p>
    public let nextToken: Swift.String?
    /// <p>The type of LDAP security to enable. Currently only the value <code>Client</code> is
    ///       supported.</p>
    public let type: DirectoryClientTypes.LDAPSType?

    public init (
        directoryId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        type: DirectoryClientTypes.LDAPSType? = nil
    )
    {
        self.directoryId = directoryId
        self.limit = limit
        self.nextToken = nextToken
        self.type = type
    }
}

struct DescribeLDAPSSettingsInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let type: DirectoryClientTypes.LDAPSType?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension DescribeLDAPSSettingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.LDAPSType.self, forKey: .type)
        type = typeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeLDAPSSettingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLDAPSSettingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLDAPSSettingsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLDAPSSettingsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLDAPSSettingsOutputResponse(lDAPSSettingsInfo: \(Swift.String(describing: lDAPSSettingsInfo)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeLDAPSSettingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLDAPSSettingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lDAPSSettingsInfo = output.lDAPSSettingsInfo
            self.nextToken = output.nextToken
        } else {
            self.lDAPSSettingsInfo = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLDAPSSettingsOutputResponse: Swift.Equatable {
    /// <p>Information about LDAP security for the specified directory, including status of
    ///       enablement, state last updated date time, and the reason for the state.</p>
    public let lDAPSSettingsInfo: [DirectoryClientTypes.LDAPSSettingInfo]?
    /// <p>The next token used to retrieve the LDAPS settings if the number of setting types exceeds
    ///       page limit and there is another page.</p>
    public let nextToken: Swift.String?

    public init (
        lDAPSSettingsInfo: [DirectoryClientTypes.LDAPSSettingInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.lDAPSSettingsInfo = lDAPSSettingsInfo
        self.nextToken = nextToken
    }
}

struct DescribeLDAPSSettingsOutputResponseBody: Swift.Equatable {
    public let lDAPSSettingsInfo: [DirectoryClientTypes.LDAPSSettingInfo]?
    public let nextToken: Swift.String?
}

extension DescribeLDAPSSettingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lDAPSSettingsInfo = "LDAPSSettingsInfo"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lDAPSSettingsInfoContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.LDAPSSettingInfo?].self, forKey: .lDAPSSettingsInfo)
        var lDAPSSettingsInfoDecoded0:[DirectoryClientTypes.LDAPSSettingInfo]? = nil
        if let lDAPSSettingsInfoContainer = lDAPSSettingsInfoContainer {
            lDAPSSettingsInfoDecoded0 = [DirectoryClientTypes.LDAPSSettingInfo]()
            for structure0 in lDAPSSettingsInfoContainer {
                if let structure0 = structure0 {
                    lDAPSSettingsInfoDecoded0?.append(structure0)
                }
            }
        }
        lDAPSSettingsInfo = lDAPSSettingsInfoDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeRegionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRegionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRegionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRegionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRegionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRegionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRegionsOutputError>
}

extension DescribeRegionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRegionsInput(directoryId: \(Swift.String(describing: directoryId)), nextToken: \(Swift.String(describing: nextToken)), regionName: \(Swift.String(describing: regionName)))"}
}

extension DescribeRegionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case nextToken = "NextToken"
        case regionName = "RegionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
    }
}

public struct DescribeRegionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRegionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRegionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRegionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRegionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRegionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRegionsOutputError>
}

public struct DescribeRegionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRegionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRegionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRegionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRegionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRegionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRegionsOutputError>
}

public struct DescribeRegionsInput: Swift.Equatable {
    /// <p>The identifier of the directory.</p>
    public let directoryId: Swift.String?
    /// <p>The <code>DescribeRegionsResult.NextToken</code> value from a previous call to <a>DescribeRegions</a>. Pass null if this is the first call.</p>
    public let nextToken: Swift.String?
    /// <p>The name of the Region. For example, <code>us-east-1</code>.</p>
    public let regionName: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        regionName: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.nextToken = nextToken
        self.regionName = regionName
    }
}

struct DescribeRegionsInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let regionName: Swift.String?
    public let nextToken: Swift.String?
}

extension DescribeRegionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case nextToken = "NextToken"
        case regionName = "RegionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeRegionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRegionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeRegionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case clientException(ClientException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRegionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRegionsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), regionsDescription: \(Swift.String(describing: regionsDescription)))"}
}

extension DescribeRegionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeRegionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.regionsDescription = output.regionsDescription
        } else {
            self.nextToken = nil
            self.regionsDescription = nil
        }
    }
}

public struct DescribeRegionsOutputResponse: Swift.Equatable {
    /// <p>If not null, more results are available. Pass this value for the <code>NextToken</code>
    ///       parameter in a subsequent call to <a>DescribeRegions</a> to retrieve the next set
    ///       of items.</p>
    public let nextToken: Swift.String?
    /// <p>List of Region information related to the directory for each replicated Region.</p>
    public let regionsDescription: [DirectoryClientTypes.RegionDescription]?

    public init (
        nextToken: Swift.String? = nil,
        regionsDescription: [DirectoryClientTypes.RegionDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.regionsDescription = regionsDescription
    }
}

struct DescribeRegionsOutputResponseBody: Swift.Equatable {
    public let regionsDescription: [DirectoryClientTypes.RegionDescription]?
    public let nextToken: Swift.String?
}

extension DescribeRegionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case regionsDescription = "RegionsDescription"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionsDescriptionContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.RegionDescription?].self, forKey: .regionsDescription)
        var regionsDescriptionDecoded0:[DirectoryClientTypes.RegionDescription]? = nil
        if let regionsDescriptionContainer = regionsDescriptionContainer {
            regionsDescriptionDecoded0 = [DirectoryClientTypes.RegionDescription]()
            for structure0 in regionsDescriptionContainer {
                if let structure0 = structure0 {
                    regionsDescriptionDecoded0?.append(structure0)
                }
            }
        }
        regionsDescription = regionsDescriptionDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeSharedDirectoriesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeSharedDirectoriesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeSharedDirectoriesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeSharedDirectoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeSharedDirectoriesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeSharedDirectoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeSharedDirectoriesOutputError>
}

extension DescribeSharedDirectoriesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeSharedDirectoriesInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), ownerDirectoryId: \(Swift.String(describing: ownerDirectoryId)), sharedDirectoryIds: \(Swift.String(describing: sharedDirectoryIds)))"}
}

extension DescribeSharedDirectoriesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case ownerDirectoryId = "OwnerDirectoryId"
        case sharedDirectoryIds = "SharedDirectoryIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let ownerDirectoryId = ownerDirectoryId {
            try encodeContainer.encode(ownerDirectoryId, forKey: .ownerDirectoryId)
        }
        if let sharedDirectoryIds = sharedDirectoryIds {
            var sharedDirectoryIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sharedDirectoryIds)
            for directoryids0 in sharedDirectoryIds {
                try sharedDirectoryIdsContainer.encode(directoryids0)
            }
        }
    }
}

public struct DescribeSharedDirectoriesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeSharedDirectoriesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeSharedDirectoriesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeSharedDirectoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeSharedDirectoriesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeSharedDirectoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeSharedDirectoriesOutputError>
}

public struct DescribeSharedDirectoriesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeSharedDirectoriesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeSharedDirectoriesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeSharedDirectoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeSharedDirectoriesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeSharedDirectoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeSharedDirectoriesOutputError>
}

public struct DescribeSharedDirectoriesInput: Swift.Equatable {
    /// <p>The number of shared directories to return in the response object.</p>
    public let limit: Swift.Int?
    /// <p>The <code>DescribeSharedDirectoriesResult.NextToken</code> value from a previous call to
    ///         <a>DescribeSharedDirectories</a>. Pass null if this is the first call. </p>
    public let nextToken: Swift.String?
    /// <p>Returns the identifier of the directory in the directory owner account. </p>
    public let ownerDirectoryId: Swift.String?
    /// <p>A list of identifiers of all shared directories in your account. </p>
    public let sharedDirectoryIds: [Swift.String]?

    public init (
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        ownerDirectoryId: Swift.String? = nil,
        sharedDirectoryIds: [Swift.String]? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.ownerDirectoryId = ownerDirectoryId
        self.sharedDirectoryIds = sharedDirectoryIds
    }
}

struct DescribeSharedDirectoriesInputBody: Swift.Equatable {
    public let ownerDirectoryId: Swift.String?
    public let sharedDirectoryIds: [Swift.String]?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension DescribeSharedDirectoriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case ownerDirectoryId = "OwnerDirectoryId"
        case sharedDirectoryIds = "SharedDirectoryIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerDirectoryId)
        ownerDirectoryId = ownerDirectoryIdDecoded
        let sharedDirectoryIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sharedDirectoryIds)
        var sharedDirectoryIdsDecoded0:[Swift.String]? = nil
        if let sharedDirectoryIdsContainer = sharedDirectoryIdsContainer {
            sharedDirectoryIdsDecoded0 = [Swift.String]()
            for string0 in sharedDirectoryIdsContainer {
                if let string0 = string0 {
                    sharedDirectoryIdsDecoded0?.append(string0)
                }
            }
        }
        sharedDirectoryIds = sharedDirectoryIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeSharedDirectoriesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSharedDirectoriesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeSharedDirectoriesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSharedDirectoriesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeSharedDirectoriesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), sharedDirectories: \(Swift.String(describing: sharedDirectories)))"}
}

extension DescribeSharedDirectoriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeSharedDirectoriesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.sharedDirectories = output.sharedDirectories
        } else {
            self.nextToken = nil
            self.sharedDirectories = nil
        }
    }
}

public struct DescribeSharedDirectoriesOutputResponse: Swift.Equatable {
    /// <p>If not null, token that indicates that more results are available. Pass this value for the
    ///         <code>NextToken</code> parameter in a subsequent call to <a>DescribeSharedDirectories</a> to retrieve the next set of items.</p>
    public let nextToken: Swift.String?
    /// <p>A list of all shared directories in your account.</p>
    public let sharedDirectories: [DirectoryClientTypes.SharedDirectory]?

    public init (
        nextToken: Swift.String? = nil,
        sharedDirectories: [DirectoryClientTypes.SharedDirectory]? = nil
    )
    {
        self.nextToken = nextToken
        self.sharedDirectories = sharedDirectories
    }
}

struct DescribeSharedDirectoriesOutputResponseBody: Swift.Equatable {
    public let sharedDirectories: [DirectoryClientTypes.SharedDirectory]?
    public let nextToken: Swift.String?
}

extension DescribeSharedDirectoriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case sharedDirectories = "SharedDirectories"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sharedDirectoriesContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.SharedDirectory?].self, forKey: .sharedDirectories)
        var sharedDirectoriesDecoded0:[DirectoryClientTypes.SharedDirectory]? = nil
        if let sharedDirectoriesContainer = sharedDirectoriesContainer {
            sharedDirectoriesDecoded0 = [DirectoryClientTypes.SharedDirectory]()
            for structure0 in sharedDirectoriesContainer {
                if let structure0 = structure0 {
                    sharedDirectoriesDecoded0?.append(structure0)
                }
            }
        }
        sharedDirectories = sharedDirectoriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeSnapshotsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeSnapshotsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeSnapshotsOutputError>
}

extension DescribeSnapshotsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeSnapshotsInput(directoryId: \(Swift.String(describing: directoryId)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), snapshotIds: \(Swift.String(describing: snapshotIds)))"}
}

extension DescribeSnapshotsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case snapshotIds = "SnapshotIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let snapshotIds = snapshotIds {
            var snapshotIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .snapshotIds)
            for snapshotids0 in snapshotIds {
                try snapshotIdsContainer.encode(snapshotids0)
            }
        }
    }
}

public struct DescribeSnapshotsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeSnapshotsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeSnapshotsOutputError>
}

public struct DescribeSnapshotsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeSnapshotsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeSnapshotsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeSnapshotsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeSnapshotsOutputError>
}

/// <p>Contains the inputs for the <a>DescribeSnapshots</a> operation.</p>
public struct DescribeSnapshotsInput: Swift.Equatable {
    /// <p>The identifier of the directory for which to retrieve snapshot information.</p>
    public let directoryId: Swift.String?
    /// <p>The maximum number of objects to return.</p>
    public let limit: Swift.Int?
    /// <p>The <i>DescribeSnapshotsResult.NextToken</i> value from a previous call to
    ///             <a>DescribeSnapshots</a>. Pass null if this is the first call.</p>
    public let nextToken: Swift.String?
    /// <p>A list of identifiers of the snapshots to obtain the information for. If this member is
    ///          null or empty, all snapshots are returned using the <i>Limit</i> and <i>NextToken</i>
    ///          members.</p>
    public let snapshotIds: [Swift.String]?

    public init (
        directoryId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        snapshotIds: [Swift.String]? = nil
    )
    {
        self.directoryId = directoryId
        self.limit = limit
        self.nextToken = nextToken
        self.snapshotIds = snapshotIds
    }
}

struct DescribeSnapshotsInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let snapshotIds: [Swift.String]?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension DescribeSnapshotsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case snapshotIds = "SnapshotIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let snapshotIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .snapshotIds)
        var snapshotIdsDecoded0:[Swift.String]? = nil
        if let snapshotIdsContainer = snapshotIdsContainer {
            snapshotIdsDecoded0 = [Swift.String]()
            for string0 in snapshotIdsContainer {
                if let string0 = string0 {
                    snapshotIdsDecoded0?.append(string0)
                }
            }
        }
        snapshotIds = snapshotIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeSnapshotsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSnapshotsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeSnapshotsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSnapshotsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeSnapshotsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), snapshots: \(Swift.String(describing: snapshots)))"}
}

extension DescribeSnapshotsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeSnapshotsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.snapshots = output.snapshots
        } else {
            self.nextToken = nil
            self.snapshots = nil
        }
    }
}

/// <p>Contains the results of the <a>DescribeSnapshots</a> operation.</p>
public struct DescribeSnapshotsOutputResponse: Swift.Equatable {
    /// <p>If not null, more results are available. Pass this value in the <i>NextToken</i> member of
    ///          a subsequent call to <a>DescribeSnapshots</a>.</p>
    public let nextToken: Swift.String?
    /// <p>The list of <a>Snapshot</a> objects that were retrieved.</p>
    ///          <p>It is possible that this list contains less than the number of items specified in the
    ///             <i>Limit</i> member of the request. This occurs if there are less than the requested
    ///          number of items left to retrieve, or if the limitations of the operation have been
    ///          exceeded.</p>
    public let snapshots: [DirectoryClientTypes.Snapshot]?

    public init (
        nextToken: Swift.String? = nil,
        snapshots: [DirectoryClientTypes.Snapshot]? = nil
    )
    {
        self.nextToken = nextToken
        self.snapshots = snapshots
    }
}

struct DescribeSnapshotsOutputResponseBody: Swift.Equatable {
    public let snapshots: [DirectoryClientTypes.Snapshot]?
    public let nextToken: Swift.String?
}

extension DescribeSnapshotsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case snapshots = "Snapshots"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotsContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.Snapshot?].self, forKey: .snapshots)
        var snapshotsDecoded0:[DirectoryClientTypes.Snapshot]? = nil
        if let snapshotsContainer = snapshotsContainer {
            snapshotsDecoded0 = [DirectoryClientTypes.Snapshot]()
            for structure0 in snapshotsContainer {
                if let structure0 = structure0 {
                    snapshotsDecoded0?.append(structure0)
                }
            }
        }
        snapshots = snapshotsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeTrustsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTrustsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTrustsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTrustsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTrustsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTrustsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTrustsOutputError>
}

extension DescribeTrustsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTrustsInput(directoryId: \(Swift.String(describing: directoryId)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), trustIds: \(Swift.String(describing: trustIds)))"}
}

extension DescribeTrustsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case trustIds = "TrustIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let trustIds = trustIds {
            var trustIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .trustIds)
            for trustids0 in trustIds {
                try trustIdsContainer.encode(trustids0)
            }
        }
    }
}

public struct DescribeTrustsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTrustsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTrustsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTrustsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTrustsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTrustsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTrustsOutputError>
}

public struct DescribeTrustsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeTrustsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeTrustsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeTrustsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeTrustsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeTrustsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeTrustsOutputError>
}

/// <p>Describes the trust relationships for a particular AWS Managed Microsoft AD directory. If no input parameters are are provided, such as directory ID or trust ID, this request describes all the trust relationships.</p>
public struct DescribeTrustsInput: Swift.Equatable {
    /// <p>The Directory ID of the AWS directory that is a part of the requested trust relationship.</p>
    public let directoryId: Swift.String?
    /// <p>The maximum number of objects to return.</p>
    public let limit: Swift.Int?
    /// <p>The <i>DescribeTrustsResult.NextToken</i> value from a previous call to
    ///       <a>DescribeTrusts</a>. Pass null if this is the first call.</p>
    public let nextToken: Swift.String?
    /// <p>A list of identifiers of the trust relationships for which to obtain the information. If this member is null, all trust relationships that belong to the current account are returned.</p>
    ///          <p>An empty list results in an <code>InvalidParameterException</code> being thrown.</p>
    public let trustIds: [Swift.String]?

    public init (
        directoryId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        trustIds: [Swift.String]? = nil
    )
    {
        self.directoryId = directoryId
        self.limit = limit
        self.nextToken = nextToken
        self.trustIds = trustIds
    }
}

struct DescribeTrustsInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let trustIds: [Swift.String]?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension DescribeTrustsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
        case trustIds = "TrustIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let trustIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .trustIds)
        var trustIdsDecoded0:[Swift.String]? = nil
        if let trustIdsContainer = trustIdsContainer {
            trustIdsDecoded0 = [Swift.String]()
            for string0 in trustIdsContainer {
                if let string0 = string0 {
                    trustIdsDecoded0?.append(string0)
                }
            }
        }
        trustIds = trustIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeTrustsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTrustsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeTrustsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTrustsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeTrustsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), trusts: \(Swift.String(describing: trusts)))"}
}

extension DescribeTrustsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeTrustsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.trusts = output.trusts
        } else {
            self.nextToken = nil
            self.trusts = nil
        }
    }
}

/// <p>The result of a DescribeTrust request.</p>
public struct DescribeTrustsOutputResponse: Swift.Equatable {
    /// <p>If not null, more results are available. Pass this value for the <i>NextToken</i> parameter
    ///       in a subsequent call to <a>DescribeTrusts</a> to retrieve the next set of items.</p>
    public let nextToken: Swift.String?
    /// <p>The list of Trust objects that were retrieved.</p>
    ///          <p>It is possible that this list contains less than the number of items specified in the
    ///          <i>Limit</i> member of the request. This occurs if there are less than the requested
    ///          number of items left to retrieve, or if the limitations of the operation have been
    ///          exceeded.</p>
    public let trusts: [DirectoryClientTypes.Trust]?

    public init (
        nextToken: Swift.String? = nil,
        trusts: [DirectoryClientTypes.Trust]? = nil
    )
    {
        self.nextToken = nextToken
        self.trusts = trusts
    }
}

struct DescribeTrustsOutputResponseBody: Swift.Equatable {
    public let trusts: [DirectoryClientTypes.Trust]?
    public let nextToken: Swift.String?
}

extension DescribeTrustsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case trusts = "Trusts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustsContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.Trust?].self, forKey: .trusts)
        var trustsDecoded0:[DirectoryClientTypes.Trust]? = nil
        if let trustsContainer = trustsContainer {
            trustsDecoded0 = [DirectoryClientTypes.Trust]()
            for structure0 in trustsContainer {
                if let structure0 = structure0 {
                    trustsDecoded0?.append(structure0)
                }
            }
        }
        trusts = trustsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DirectoryAlreadyInRegionException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryAlreadyInRegionException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension DirectoryAlreadyInRegionException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DirectoryAlreadyInRegionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The Region you specified is the same Region where the AWS Managed Microsoft AD directory
///       was created. Specify a different Region and try again.</p>
public struct DirectoryAlreadyInRegionException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct DirectoryAlreadyInRegionExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension DirectoryAlreadyInRegionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryAlreadySharedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryAlreadySharedException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension DirectoryAlreadySharedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DirectoryAlreadySharedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified directory has already been shared with this AWS account.</p>
public struct DirectoryAlreadySharedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct DirectoryAlreadySharedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension DirectoryAlreadySharedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes.DirectoryConnectSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerDnsIps = "CustomerDnsIps"
        case customerUserName = "CustomerUserName"
        case subnetIds = "SubnetIds"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerDnsIps = customerDnsIps {
            var customerDnsIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customerDnsIps)
            for dnsipaddrs0 in customerDnsIps {
                try customerDnsIpsContainer.encode(dnsipaddrs0)
            }
        }
        if let customerUserName = customerUserName {
            try encodeContainer.encode(customerUserName, forKey: .customerUserName)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetids0 in subnetIds {
                try subnetIdsContainer.encode(subnetids0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let customerDnsIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .customerDnsIps)
        var customerDnsIpsDecoded0:[Swift.String]? = nil
        if let customerDnsIpsContainer = customerDnsIpsContainer {
            customerDnsIpsDecoded0 = [Swift.String]()
            for string0 in customerDnsIpsContainer {
                if let string0 = string0 {
                    customerDnsIpsDecoded0?.append(string0)
                }
            }
        }
        customerDnsIps = customerDnsIpsDecoded0
        let customerUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerUserName)
        customerUserName = customerUserNameDecoded
    }
}

extension DirectoryClientTypes.DirectoryConnectSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryConnectSettings(customerDnsIps: \(Swift.String(describing: customerDnsIps)), customerUserName: \(Swift.String(describing: customerUserName)), subnetIds: \(Swift.String(describing: subnetIds)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains information for the <a>ConnectDirectory</a> operation when an AD
    ///       Connector directory is being created.</p>
    public struct DirectoryConnectSettings: Swift.Equatable {
        /// <p>A list of one or more IP addresses of DNS servers or domain controllers in the on-premises
        ///       directory.</p>
        public let customerDnsIps: [Swift.String]?
        /// <p>The user name of an account in the on-premises directory that is used to connect to the
        ///       directory. This account must have the following permissions:</p>
        ///          <ul>
        ///             <li>
        ///                <p>Read users and groups</p>
        ///             </li>
        ///             <li>
        ///                <p>Create computer objects</p>
        ///             </li>
        ///             <li>
        ///                <p>Join computers to the domain</p>
        ///             </li>
        ///          </ul>
        public let customerUserName: Swift.String?
        /// <p>A list of subnet identifiers in the VPC in which the AD Connector is created.</p>
        public let subnetIds: [Swift.String]?
        /// <p>The identifier of the VPC in which the AD Connector is created.</p>
        public let vpcId: Swift.String?

        public init (
            customerDnsIps: [Swift.String]? = nil,
            customerUserName: Swift.String? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.customerDnsIps = customerDnsIps
            self.customerUserName = customerUserName
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension DirectoryClientTypes.DirectoryConnectSettingsDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case connectIps = "ConnectIps"
        case customerUserName = "CustomerUserName"
        case securityGroupId = "SecurityGroupId"
        case subnetIds = "SubnetIds"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for availabilityzones0 in availabilityZones {
                try availabilityZonesContainer.encode(availabilityzones0)
            }
        }
        if let connectIps = connectIps {
            var connectIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .connectIps)
            for ipaddrs0 in connectIps {
                try connectIpsContainer.encode(ipaddrs0)
            }
        }
        if let customerUserName = customerUserName {
            try encodeContainer.encode(customerUserName, forKey: .customerUserName)
        }
        if let securityGroupId = securityGroupId {
            try encodeContainer.encode(securityGroupId, forKey: .securityGroupId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetids0 in subnetIds {
                try subnetIdsContainer.encode(subnetids0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let customerUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .customerUserName)
        customerUserName = customerUserNameDecoded
        let securityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityGroupId)
        securityGroupId = securityGroupIdDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let connectIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .connectIps)
        var connectIpsDecoded0:[Swift.String]? = nil
        if let connectIpsContainer = connectIpsContainer {
            connectIpsDecoded0 = [Swift.String]()
            for string0 in connectIpsContainer {
                if let string0 = string0 {
                    connectIpsDecoded0?.append(string0)
                }
            }
        }
        connectIps = connectIpsDecoded0
    }
}

extension DirectoryClientTypes.DirectoryConnectSettingsDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryConnectSettingsDescription(availabilityZones: \(Swift.String(describing: availabilityZones)), connectIps: \(Swift.String(describing: connectIps)), customerUserName: \(Swift.String(describing: customerUserName)), securityGroupId: \(Swift.String(describing: securityGroupId)), subnetIds: \(Swift.String(describing: subnetIds)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains information about an AD Connector directory.</p>
    public struct DirectoryConnectSettingsDescription: Swift.Equatable {
        /// <p>A list of the Availability Zones that the directory is in.</p>
        public let availabilityZones: [Swift.String]?
        /// <p>The IP addresses of the AD Connector servers.</p>
        public let connectIps: [Swift.String]?
        /// <p>The user name of the service account in the on-premises directory.</p>
        public let customerUserName: Swift.String?
        /// <p>The security group identifier for the AD Connector directory.</p>
        public let securityGroupId: Swift.String?
        /// <p>A list of subnet identifiers in the VPC that the AD Connector is in.</p>
        public let subnetIds: [Swift.String]?
        /// <p>The identifier of the VPC that the AD Connector is in.</p>
        public let vpcId: Swift.String?

        public init (
            availabilityZones: [Swift.String]? = nil,
            connectIps: [Swift.String]? = nil,
            customerUserName: Swift.String? = nil,
            securityGroupId: Swift.String? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.connectIps = connectIps
            self.customerUserName = customerUserName
            self.securityGroupId = securityGroupId
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension DirectoryClientTypes.DirectoryDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessUrl = "AccessUrl"
        case alias = "Alias"
        case connectSettings = "ConnectSettings"
        case description = "Description"
        case desiredNumberOfDomainControllers = "DesiredNumberOfDomainControllers"
        case directoryId = "DirectoryId"
        case dnsIpAddrs = "DnsIpAddrs"
        case edition = "Edition"
        case launchTime = "LaunchTime"
        case name = "Name"
        case ownerDirectoryDescription = "OwnerDirectoryDescription"
        case radiusSettings = "RadiusSettings"
        case radiusStatus = "RadiusStatus"
        case regionsInfo = "RegionsInfo"
        case shareMethod = "ShareMethod"
        case shareNotes = "ShareNotes"
        case shareStatus = "ShareStatus"
        case shortName = "ShortName"
        case size = "Size"
        case ssoEnabled = "SsoEnabled"
        case stage = "Stage"
        case stageLastUpdatedDateTime = "StageLastUpdatedDateTime"
        case stageReason = "StageReason"
        case type = "Type"
        case vpcSettings = "VpcSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessUrl = accessUrl {
            try encodeContainer.encode(accessUrl, forKey: .accessUrl)
        }
        if let alias = alias {
            try encodeContainer.encode(alias, forKey: .alias)
        }
        if let connectSettings = connectSettings {
            try encodeContainer.encode(connectSettings, forKey: .connectSettings)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if desiredNumberOfDomainControllers != 0 {
            try encodeContainer.encode(desiredNumberOfDomainControllers, forKey: .desiredNumberOfDomainControllers)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let dnsIpAddrs = dnsIpAddrs {
            var dnsIpAddrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIpAddrs)
            for dnsipaddrs0 in dnsIpAddrs {
                try dnsIpAddrsContainer.encode(dnsipaddrs0)
            }
        }
        if let edition = edition {
            try encodeContainer.encode(edition.rawValue, forKey: .edition)
        }
        if let launchTime = launchTime {
            try encodeContainer.encode(launchTime.timeIntervalSince1970, forKey: .launchTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ownerDirectoryDescription = ownerDirectoryDescription {
            try encodeContainer.encode(ownerDirectoryDescription, forKey: .ownerDirectoryDescription)
        }
        if let radiusSettings = radiusSettings {
            try encodeContainer.encode(radiusSettings, forKey: .radiusSettings)
        }
        if let radiusStatus = radiusStatus {
            try encodeContainer.encode(radiusStatus.rawValue, forKey: .radiusStatus)
        }
        if let regionsInfo = regionsInfo {
            try encodeContainer.encode(regionsInfo, forKey: .regionsInfo)
        }
        if let shareMethod = shareMethod {
            try encodeContainer.encode(shareMethod.rawValue, forKey: .shareMethod)
        }
        if let shareNotes = shareNotes {
            try encodeContainer.encode(shareNotes, forKey: .shareNotes)
        }
        if let shareStatus = shareStatus {
            try encodeContainer.encode(shareStatus.rawValue, forKey: .shareStatus)
        }
        if let shortName = shortName {
            try encodeContainer.encode(shortName, forKey: .shortName)
        }
        if let size = size {
            try encodeContainer.encode(size.rawValue, forKey: .size)
        }
        if ssoEnabled != false {
            try encodeContainer.encode(ssoEnabled, forKey: .ssoEnabled)
        }
        if let stage = stage {
            try encodeContainer.encode(stage.rawValue, forKey: .stage)
        }
        if let stageLastUpdatedDateTime = stageLastUpdatedDateTime {
            try encodeContainer.encode(stageLastUpdatedDateTime.timeIntervalSince1970, forKey: .stageLastUpdatedDateTime)
        }
        if let stageReason = stageReason {
            try encodeContainer.encode(stageReason, forKey: .stageReason)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let vpcSettings = vpcSettings {
            try encodeContainer.encode(vpcSettings, forKey: .vpcSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let shortNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shortName)
        shortName = shortNameDecoded
        let sizeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectorySize.self, forKey: .size)
        size = sizeDecoded
        let editionDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryEdition.self, forKey: .edition)
        edition = editionDecoded
        let aliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .alias)
        alias = aliasDecoded
        let accessUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessUrl)
        accessUrl = accessUrlDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let dnsIpAddrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIpAddrs)
        var dnsIpAddrsDecoded0:[Swift.String]? = nil
        if let dnsIpAddrsContainer = dnsIpAddrsContainer {
            dnsIpAddrsDecoded0 = [Swift.String]()
            for string0 in dnsIpAddrsContainer {
                if let string0 = string0 {
                    dnsIpAddrsDecoded0?.append(string0)
                }
            }
        }
        dnsIpAddrs = dnsIpAddrsDecoded0
        let stageDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryStage.self, forKey: .stage)
        stage = stageDecoded
        let shareStatusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ShareStatus.self, forKey: .shareStatus)
        shareStatus = shareStatusDecoded
        let shareMethodDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ShareMethod.self, forKey: .shareMethod)
        shareMethod = shareMethodDecoded
        let shareNotesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shareNotes)
        shareNotes = shareNotesDecoded
        let launchTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .launchTime)
        launchTime = launchTimeDecoded
        let stageLastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .stageLastUpdatedDateTime)
        stageLastUpdatedDateTime = stageLastUpdatedDateTimeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryType.self, forKey: .type)
        type = typeDecoded
        let vpcSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryVpcSettingsDescription.self, forKey: .vpcSettings)
        vpcSettings = vpcSettingsDecoded
        let connectSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryConnectSettingsDescription.self, forKey: .connectSettings)
        connectSettings = connectSettingsDecoded
        let radiusSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RadiusSettings.self, forKey: .radiusSettings)
        radiusSettings = radiusSettingsDecoded
        let radiusStatusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RadiusStatus.self, forKey: .radiusStatus)
        radiusStatus = radiusStatusDecoded
        let stageReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageReason)
        stageReason = stageReasonDecoded
        let ssoEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .ssoEnabled)
        ssoEnabled = ssoEnabledDecoded
        let desiredNumberOfDomainControllersDecoded = try containerValues.decode(Swift.Int.self, forKey: .desiredNumberOfDomainControllers)
        desiredNumberOfDomainControllers = desiredNumberOfDomainControllersDecoded
        let ownerDirectoryDescriptionDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.OwnerDirectoryDescription.self, forKey: .ownerDirectoryDescription)
        ownerDirectoryDescription = ownerDirectoryDescriptionDecoded
        let regionsInfoDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RegionsInfo.self, forKey: .regionsInfo)
        regionsInfo = regionsInfoDecoded
    }
}

extension DirectoryClientTypes.DirectoryDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryDescription(accessUrl: \(Swift.String(describing: accessUrl)), alias: \(Swift.String(describing: alias)), connectSettings: \(Swift.String(describing: connectSettings)), description: \(Swift.String(describing: description)), desiredNumberOfDomainControllers: \(Swift.String(describing: desiredNumberOfDomainControllers)), directoryId: \(Swift.String(describing: directoryId)), dnsIpAddrs: \(Swift.String(describing: dnsIpAddrs)), edition: \(Swift.String(describing: edition)), launchTime: \(Swift.String(describing: launchTime)), name: \(Swift.String(describing: name)), ownerDirectoryDescription: \(Swift.String(describing: ownerDirectoryDescription)), radiusSettings: \(Swift.String(describing: radiusSettings)), radiusStatus: \(Swift.String(describing: radiusStatus)), regionsInfo: \(Swift.String(describing: regionsInfo)), shareMethod: \(Swift.String(describing: shareMethod)), shareNotes: \(Swift.String(describing: shareNotes)), shareStatus: \(Swift.String(describing: shareStatus)), shortName: \(Swift.String(describing: shortName)), size: \(Swift.String(describing: size)), ssoEnabled: \(Swift.String(describing: ssoEnabled)), stage: \(Swift.String(describing: stage)), stageLastUpdatedDateTime: \(Swift.String(describing: stageLastUpdatedDateTime)), stageReason: \(Swift.String(describing: stageReason)), type: \(Swift.String(describing: type)), vpcSettings: \(Swift.String(describing: vpcSettings)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains information about an AWS Directory Service directory.</p>
    public struct DirectoryDescription: Swift.Equatable {
        /// <p>The access URL for the directory, such as
        ///         <code>http://<alias>.awsapps.com</code>. If no alias has been created for the
        ///       directory, <code><alias></code> is the directory identifier, such as
        ///         <code>d-XXXXXXXXXX</code>.</p>
        public let accessUrl: Swift.String?
        /// <p>The alias for the directory. If no alias has been created for the directory, the alias is
        ///       the directory identifier, such as <code>d-XXXXXXXXXX</code>.</p>
        public let alias: Swift.String?
        /// <p>A <a>DirectoryConnectSettingsDescription</a> object that contains additional
        ///       information about an AD Connector directory. This member is only present if the directory is
        ///       an AD Connector directory.</p>
        public let connectSettings: DirectoryClientTypes.DirectoryConnectSettingsDescription?
        /// <p>The description for the directory.</p>
        public let description: Swift.String?
        /// <p>The desired number of domain controllers in the directory if the directory is Microsoft AD.</p>
        public let desiredNumberOfDomainControllers: Swift.Int
        /// <p>The directory identifier.</p>
        public let directoryId: Swift.String?
        /// <p>The IP addresses of the DNS servers for the directory. For a Simple AD or Microsoft AD
        ///       directory, these are the IP addresses of the Simple AD or Microsoft AD directory servers. For
        ///       an AD Connector directory, these are the IP addresses of the DNS servers or domain controllers
        ///       in the on-premises directory to which the AD Connector is connected.</p>
        public let dnsIpAddrs: [Swift.String]?
        /// <p>The edition associated with this directory.</p>
        public let edition: DirectoryClientTypes.DirectoryEdition?
        /// <p>Specifies when the directory was created.</p>
        public let launchTime: ClientRuntime.Date?
        /// <p>The fully qualified name of the directory.</p>
        public let name: Swift.String?
        /// <p>Describes the AWS Managed Microsoft AD directory in the directory owner account.</p>
        public let ownerDirectoryDescription: DirectoryClientTypes.OwnerDirectoryDescription?
        /// <p>A <a>RadiusSettings</a> object that contains information about the RADIUS
        ///       server configured for this directory.</p>
        public let radiusSettings: DirectoryClientTypes.RadiusSettings?
        /// <p>The status of the RADIUS MFA server connection.</p>
        public let radiusStatus: DirectoryClientTypes.RadiusStatus?
        /// <p>Lists the Regions where the directory has replicated.</p>
        public let regionsInfo: DirectoryClientTypes.RegionsInfo?
        /// <p>The method used when sharing a directory to determine whether the directory should be
        ///       shared within your AWS organization (<code>ORGANIZATIONS</code>) or with any AWS account by
        ///       sending a shared directory request (<code>HANDSHAKE</code>).</p>
        public let shareMethod: DirectoryClientTypes.ShareMethod?
        /// <p>A directory share request that is sent by the directory owner to the directory consumer.
        ///       The request includes a typed message to help the directory consumer administrator determine
        ///       whether to approve or reject the share invitation.</p>
        public let shareNotes: Swift.String?
        /// <p>Current directory status of the shared AWS Managed Microsoft AD directory.</p>
        public let shareStatus: DirectoryClientTypes.ShareStatus?
        /// <p>The short name of the directory.</p>
        public let shortName: Swift.String?
        /// <p>The directory size.</p>
        public let size: DirectoryClientTypes.DirectorySize?
        /// <p>Indicates if single sign-on is enabled for the directory. For more information, see <a>EnableSso</a> and <a>DisableSso</a>.</p>
        public let ssoEnabled: Swift.Bool
        /// <p>The current stage of the directory.</p>
        public let stage: DirectoryClientTypes.DirectoryStage?
        /// <p>The date and time that the stage was last updated.</p>
        public let stageLastUpdatedDateTime: ClientRuntime.Date?
        /// <p>Additional information about the directory stage.</p>
        public let stageReason: Swift.String?
        /// <p>The directory size.</p>
        public let type: DirectoryClientTypes.DirectoryType?
        /// <p>A <a>DirectoryVpcSettingsDescription</a> object that contains additional
        ///       information about a directory. This member is only present if the directory is a Simple AD or
        ///       Managed AD directory.</p>
        public let vpcSettings: DirectoryClientTypes.DirectoryVpcSettingsDescription?

        public init (
            accessUrl: Swift.String? = nil,
            alias: Swift.String? = nil,
            connectSettings: DirectoryClientTypes.DirectoryConnectSettingsDescription? = nil,
            description: Swift.String? = nil,
            desiredNumberOfDomainControllers: Swift.Int = 0,
            directoryId: Swift.String? = nil,
            dnsIpAddrs: [Swift.String]? = nil,
            edition: DirectoryClientTypes.DirectoryEdition? = nil,
            launchTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            ownerDirectoryDescription: DirectoryClientTypes.OwnerDirectoryDescription? = nil,
            radiusSettings: DirectoryClientTypes.RadiusSettings? = nil,
            radiusStatus: DirectoryClientTypes.RadiusStatus? = nil,
            regionsInfo: DirectoryClientTypes.RegionsInfo? = nil,
            shareMethod: DirectoryClientTypes.ShareMethod? = nil,
            shareNotes: Swift.String? = nil,
            shareStatus: DirectoryClientTypes.ShareStatus? = nil,
            shortName: Swift.String? = nil,
            size: DirectoryClientTypes.DirectorySize? = nil,
            ssoEnabled: Swift.Bool = false,
            stage: DirectoryClientTypes.DirectoryStage? = nil,
            stageLastUpdatedDateTime: ClientRuntime.Date? = nil,
            stageReason: Swift.String? = nil,
            type: DirectoryClientTypes.DirectoryType? = nil,
            vpcSettings: DirectoryClientTypes.DirectoryVpcSettingsDescription? = nil
        )
        {
            self.accessUrl = accessUrl
            self.alias = alias
            self.connectSettings = connectSettings
            self.description = description
            self.desiredNumberOfDomainControllers = desiredNumberOfDomainControllers
            self.directoryId = directoryId
            self.dnsIpAddrs = dnsIpAddrs
            self.edition = edition
            self.launchTime = launchTime
            self.name = name
            self.ownerDirectoryDescription = ownerDirectoryDescription
            self.radiusSettings = radiusSettings
            self.radiusStatus = radiusStatus
            self.regionsInfo = regionsInfo
            self.shareMethod = shareMethod
            self.shareNotes = shareNotes
            self.shareStatus = shareStatus
            self.shortName = shortName
            self.size = size
            self.ssoEnabled = ssoEnabled
            self.stage = stage
            self.stageLastUpdatedDateTime = stageLastUpdatedDateTime
            self.stageReason = stageReason
            self.type = type
            self.vpcSettings = vpcSettings
        }
    }

}

extension DirectoryDoesNotExistException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryDoesNotExistException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension DirectoryDoesNotExistException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DirectoryDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified directory does not exist in the system.</p>
public struct DirectoryDoesNotExistException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct DirectoryDoesNotExistExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension DirectoryDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes {
    public enum DirectoryEdition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enterprise
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectoryEdition] {
            return [
                .enterprise,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enterprise: return "Enterprise"
            case .standard: return "Standard"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectoryEdition(rawValue: rawValue) ?? DirectoryEdition.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryLimitExceededException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension DirectoryLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DirectoryLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum number of directories in the region has been reached. You can use the
///             <a>GetDirectoryLimits</a> operation to determine your directory limits in the
///             region.</p>
public struct DirectoryLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct DirectoryLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension DirectoryLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes.DirectoryLimits: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudOnlyDirectoriesCurrentCount = "CloudOnlyDirectoriesCurrentCount"
        case cloudOnlyDirectoriesLimit = "CloudOnlyDirectoriesLimit"
        case cloudOnlyDirectoriesLimitReached = "CloudOnlyDirectoriesLimitReached"
        case cloudOnlyMicrosoftADCurrentCount = "CloudOnlyMicrosoftADCurrentCount"
        case cloudOnlyMicrosoftADLimit = "CloudOnlyMicrosoftADLimit"
        case cloudOnlyMicrosoftADLimitReached = "CloudOnlyMicrosoftADLimitReached"
        case connectedDirectoriesCurrentCount = "ConnectedDirectoriesCurrentCount"
        case connectedDirectoriesLimit = "ConnectedDirectoriesLimit"
        case connectedDirectoriesLimitReached = "ConnectedDirectoriesLimitReached"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudOnlyDirectoriesCurrentCount = cloudOnlyDirectoriesCurrentCount {
            try encodeContainer.encode(cloudOnlyDirectoriesCurrentCount, forKey: .cloudOnlyDirectoriesCurrentCount)
        }
        if let cloudOnlyDirectoriesLimit = cloudOnlyDirectoriesLimit {
            try encodeContainer.encode(cloudOnlyDirectoriesLimit, forKey: .cloudOnlyDirectoriesLimit)
        }
        if cloudOnlyDirectoriesLimitReached != false {
            try encodeContainer.encode(cloudOnlyDirectoriesLimitReached, forKey: .cloudOnlyDirectoriesLimitReached)
        }
        if let cloudOnlyMicrosoftADCurrentCount = cloudOnlyMicrosoftADCurrentCount {
            try encodeContainer.encode(cloudOnlyMicrosoftADCurrentCount, forKey: .cloudOnlyMicrosoftADCurrentCount)
        }
        if let cloudOnlyMicrosoftADLimit = cloudOnlyMicrosoftADLimit {
            try encodeContainer.encode(cloudOnlyMicrosoftADLimit, forKey: .cloudOnlyMicrosoftADLimit)
        }
        if cloudOnlyMicrosoftADLimitReached != false {
            try encodeContainer.encode(cloudOnlyMicrosoftADLimitReached, forKey: .cloudOnlyMicrosoftADLimitReached)
        }
        if let connectedDirectoriesCurrentCount = connectedDirectoriesCurrentCount {
            try encodeContainer.encode(connectedDirectoriesCurrentCount, forKey: .connectedDirectoriesCurrentCount)
        }
        if let connectedDirectoriesLimit = connectedDirectoriesLimit {
            try encodeContainer.encode(connectedDirectoriesLimit, forKey: .connectedDirectoriesLimit)
        }
        if connectedDirectoriesLimitReached != false {
            try encodeContainer.encode(connectedDirectoriesLimitReached, forKey: .connectedDirectoriesLimitReached)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudOnlyDirectoriesLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cloudOnlyDirectoriesLimit)
        cloudOnlyDirectoriesLimit = cloudOnlyDirectoriesLimitDecoded
        let cloudOnlyDirectoriesCurrentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cloudOnlyDirectoriesCurrentCount)
        cloudOnlyDirectoriesCurrentCount = cloudOnlyDirectoriesCurrentCountDecoded
        let cloudOnlyDirectoriesLimitReachedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .cloudOnlyDirectoriesLimitReached)
        cloudOnlyDirectoriesLimitReached = cloudOnlyDirectoriesLimitReachedDecoded
        let cloudOnlyMicrosoftADLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cloudOnlyMicrosoftADLimit)
        cloudOnlyMicrosoftADLimit = cloudOnlyMicrosoftADLimitDecoded
        let cloudOnlyMicrosoftADCurrentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cloudOnlyMicrosoftADCurrentCount)
        cloudOnlyMicrosoftADCurrentCount = cloudOnlyMicrosoftADCurrentCountDecoded
        let cloudOnlyMicrosoftADLimitReachedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .cloudOnlyMicrosoftADLimitReached)
        cloudOnlyMicrosoftADLimitReached = cloudOnlyMicrosoftADLimitReachedDecoded
        let connectedDirectoriesLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .connectedDirectoriesLimit)
        connectedDirectoriesLimit = connectedDirectoriesLimitDecoded
        let connectedDirectoriesCurrentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .connectedDirectoriesCurrentCount)
        connectedDirectoriesCurrentCount = connectedDirectoriesCurrentCountDecoded
        let connectedDirectoriesLimitReachedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .connectedDirectoriesLimitReached)
        connectedDirectoriesLimitReached = connectedDirectoriesLimitReachedDecoded
    }
}

extension DirectoryClientTypes.DirectoryLimits: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryLimits(cloudOnlyDirectoriesCurrentCount: \(Swift.String(describing: cloudOnlyDirectoriesCurrentCount)), cloudOnlyDirectoriesLimit: \(Swift.String(describing: cloudOnlyDirectoriesLimit)), cloudOnlyDirectoriesLimitReached: \(Swift.String(describing: cloudOnlyDirectoriesLimitReached)), cloudOnlyMicrosoftADCurrentCount: \(Swift.String(describing: cloudOnlyMicrosoftADCurrentCount)), cloudOnlyMicrosoftADLimit: \(Swift.String(describing: cloudOnlyMicrosoftADLimit)), cloudOnlyMicrosoftADLimitReached: \(Swift.String(describing: cloudOnlyMicrosoftADLimitReached)), connectedDirectoriesCurrentCount: \(Swift.String(describing: connectedDirectoriesCurrentCount)), connectedDirectoriesLimit: \(Swift.String(describing: connectedDirectoriesLimit)), connectedDirectoriesLimitReached: \(Swift.String(describing: connectedDirectoriesLimitReached)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains directory limit information for a Region.</p>
    public struct DirectoryLimits: Swift.Equatable {
        /// <p>The current number of cloud directories in the Region.</p>
        public let cloudOnlyDirectoriesCurrentCount: Swift.Int?
        /// <p>The maximum number of cloud directories allowed in the Region.</p>
        public let cloudOnlyDirectoriesLimit: Swift.Int?
        /// <p>Indicates if the cloud directory limit has been reached.</p>
        public let cloudOnlyDirectoriesLimitReached: Swift.Bool
        /// <p>The current number of AWS Managed Microsoft AD directories in the region.</p>
        public let cloudOnlyMicrosoftADCurrentCount: Swift.Int?
        /// <p>The maximum number of AWS Managed Microsoft AD directories allowed in the region.</p>
        public let cloudOnlyMicrosoftADLimit: Swift.Int?
        /// <p>Indicates if the AWS Managed Microsoft AD directory limit has been reached.</p>
        public let cloudOnlyMicrosoftADLimitReached: Swift.Bool
        /// <p>The current number of connected directories in the Region.</p>
        public let connectedDirectoriesCurrentCount: Swift.Int?
        /// <p>The maximum number of connected directories allowed in the Region.</p>
        public let connectedDirectoriesLimit: Swift.Int?
        /// <p>Indicates if the connected directory limit has been reached.</p>
        public let connectedDirectoriesLimitReached: Swift.Bool

        public init (
            cloudOnlyDirectoriesCurrentCount: Swift.Int? = nil,
            cloudOnlyDirectoriesLimit: Swift.Int? = nil,
            cloudOnlyDirectoriesLimitReached: Swift.Bool = false,
            cloudOnlyMicrosoftADCurrentCount: Swift.Int? = nil,
            cloudOnlyMicrosoftADLimit: Swift.Int? = nil,
            cloudOnlyMicrosoftADLimitReached: Swift.Bool = false,
            connectedDirectoriesCurrentCount: Swift.Int? = nil,
            connectedDirectoriesLimit: Swift.Int? = nil,
            connectedDirectoriesLimitReached: Swift.Bool = false
        )
        {
            self.cloudOnlyDirectoriesCurrentCount = cloudOnlyDirectoriesCurrentCount
            self.cloudOnlyDirectoriesLimit = cloudOnlyDirectoriesLimit
            self.cloudOnlyDirectoriesLimitReached = cloudOnlyDirectoriesLimitReached
            self.cloudOnlyMicrosoftADCurrentCount = cloudOnlyMicrosoftADCurrentCount
            self.cloudOnlyMicrosoftADLimit = cloudOnlyMicrosoftADLimit
            self.cloudOnlyMicrosoftADLimitReached = cloudOnlyMicrosoftADLimitReached
            self.connectedDirectoriesCurrentCount = connectedDirectoriesCurrentCount
            self.connectedDirectoriesLimit = connectedDirectoriesLimit
            self.connectedDirectoriesLimitReached = connectedDirectoriesLimitReached
        }
    }

}

extension DirectoryNotSharedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryNotSharedException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension DirectoryNotSharedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DirectoryNotSharedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified directory has not been shared with this AWS account.</p>
public struct DirectoryNotSharedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct DirectoryNotSharedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension DirectoryNotSharedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes {
    public enum DirectorySize: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case large
        case small
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectorySize] {
            return [
                .large,
                .small,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .large: return "Large"
            case .small: return "Small"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectorySize(rawValue: rawValue) ?? DirectorySize.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes {
    public enum DirectoryStage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case created
        case creating
        case deleted
        case deleting
        case failed
        case impaired
        case inoperable
        case requested
        case restorefailed
        case restoring
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectoryStage] {
            return [
                .active,
                .created,
                .creating,
                .deleted,
                .deleting,
                .failed,
                .impaired,
                .inoperable,
                .requested,
                .restorefailed,
                .restoring,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .created: return "Created"
            case .creating: return "Creating"
            case .deleted: return "Deleted"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .impaired: return "Impaired"
            case .inoperable: return "Inoperable"
            case .requested: return "Requested"
            case .restorefailed: return "RestoreFailed"
            case .restoring: return "Restoring"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectoryStage(rawValue: rawValue) ?? DirectoryStage.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes {
    public enum DirectoryType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adConnector
        case microsoftAd
        case sharedMicrosoftAd
        case simpleAd
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectoryType] {
            return [
                .adConnector,
                .microsoftAd,
                .sharedMicrosoftAd,
                .simpleAd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adConnector: return "ADConnector"
            case .microsoftAd: return "MicrosoftAD"
            case .sharedMicrosoftAd: return "SharedMicrosoftAD"
            case .simpleAd: return "SimpleAD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectoryType(rawValue: rawValue) ?? DirectoryType.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryUnavailableException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryUnavailableException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension DirectoryUnavailableException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DirectoryUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified directory is unavailable or could not be found.</p>
public struct DirectoryUnavailableException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct DirectoryUnavailableExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension DirectoryUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes.DirectoryVpcSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subnetIds = "SubnetIds"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetids0 in subnetIds {
                try subnetIdsContainer.encode(subnetids0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
    }
}

extension DirectoryClientTypes.DirectoryVpcSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryVpcSettings(subnetIds: \(Swift.String(describing: subnetIds)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains VPC information for the <a>CreateDirectory</a> or <a>CreateMicrosoftAD</a> operation.</p>
    public struct DirectoryVpcSettings: Swift.Equatable {
        /// <p>The identifiers of the subnets for the directory servers. The two subnets must be in
        ///       different Availability Zones. AWS Directory Service creates a directory server and a DNS
        ///       server in each of these subnets.</p>
        public let subnetIds: [Swift.String]?
        /// <p>The identifier of the VPC in which to create the directory.</p>
        public let vpcId: Swift.String?

        public init (
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension DirectoryClientTypes.DirectoryVpcSettingsDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case securityGroupId = "SecurityGroupId"
        case subnetIds = "SubnetIds"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for availabilityzones0 in availabilityZones {
                try availabilityZonesContainer.encode(availabilityzones0)
            }
        }
        if let securityGroupId = securityGroupId {
            try encodeContainer.encode(securityGroupId, forKey: .securityGroupId)
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for subnetids0 in subnetIds {
                try subnetIdsContainer.encode(subnetids0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let securityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityGroupId)
        securityGroupId = securityGroupIdDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
    }
}

extension DirectoryClientTypes.DirectoryVpcSettingsDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DirectoryVpcSettingsDescription(availabilityZones: \(Swift.String(describing: availabilityZones)), securityGroupId: \(Swift.String(describing: securityGroupId)), subnetIds: \(Swift.String(describing: subnetIds)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains information about the directory.</p>
    public struct DirectoryVpcSettingsDescription: Swift.Equatable {
        /// <p>The list of Availability Zones that the directory is in.</p>
        public let availabilityZones: [Swift.String]?
        /// <p>The domain controller security group identifier for the directory.</p>
        public let securityGroupId: Swift.String?
        /// <p>The identifiers of the subnets for the directory servers.</p>
        public let subnetIds: [Swift.String]?
        /// <p>The identifier of the VPC that the directory is in.</p>
        public let vpcId: Swift.String?

        public init (
            availabilityZones: [Swift.String]? = nil,
            securityGroupId: Swift.String? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.securityGroupId = securityGroupId
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

public struct DisableClientAuthenticationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableClientAuthenticationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableClientAuthenticationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableClientAuthenticationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableClientAuthenticationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableClientAuthenticationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableClientAuthenticationOutputError>
}

extension DisableClientAuthenticationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableClientAuthenticationInput(directoryId: \(Swift.String(describing: directoryId)), type: \(Swift.String(describing: type)))"}
}

extension DisableClientAuthenticationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct DisableClientAuthenticationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableClientAuthenticationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableClientAuthenticationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableClientAuthenticationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableClientAuthenticationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableClientAuthenticationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableClientAuthenticationOutputError>
}

public struct DisableClientAuthenticationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableClientAuthenticationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableClientAuthenticationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableClientAuthenticationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableClientAuthenticationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableClientAuthenticationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableClientAuthenticationOutputError>
}

public struct DisableClientAuthenticationInput: Swift.Equatable {
    /// <p>The identifier of the directory </p>
    public let directoryId: Swift.String?
    /// <p>The type of client authentication to disable. Currently, only the parameter, <code>SmartCard</code> is supported.</p>
    public let type: DirectoryClientTypes.ClientAuthenticationType?

    public init (
        directoryId: Swift.String? = nil,
        type: DirectoryClientTypes.ClientAuthenticationType? = nil
    )
    {
        self.directoryId = directoryId
        self.type = type
    }
}

struct DisableClientAuthenticationInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let type: DirectoryClientTypes.ClientAuthenticationType?
}

extension DisableClientAuthenticationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ClientAuthenticationType.self, forKey: .type)
        type = typeDecoded
    }
}

extension DisableClientAuthenticationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableClientAuthenticationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidClientAuthStatusException" : self = .invalidClientAuthStatusException(try InvalidClientAuthStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableClientAuthenticationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case clientException(ClientException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case invalidClientAuthStatusException(InvalidClientAuthStatusException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableClientAuthenticationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableClientAuthenticationOutputResponse()"}
}

extension DisableClientAuthenticationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableClientAuthenticationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisableClientAuthenticationOutputResponseBody: Swift.Equatable {
}

extension DisableClientAuthenticationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DisableLDAPSInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableLDAPSInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableLDAPSInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableLDAPSOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableLDAPSInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableLDAPSOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableLDAPSOutputError>
}

extension DisableLDAPSInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableLDAPSInput(directoryId: \(Swift.String(describing: directoryId)), type: \(Swift.String(describing: type)))"}
}

extension DisableLDAPSInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct DisableLDAPSInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableLDAPSInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableLDAPSInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableLDAPSOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableLDAPSInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableLDAPSOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableLDAPSOutputError>
}

public struct DisableLDAPSInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableLDAPSInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableLDAPSInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableLDAPSOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableLDAPSInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableLDAPSOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableLDAPSOutputError>
}

public struct DisableLDAPSInput: Swift.Equatable {
    /// <p>The identifier of the directory.</p>
    public let directoryId: Swift.String?
    /// <p>The type of LDAP security to enable. Currently only the value <code>Client</code> is
    ///       supported.</p>
    public let type: DirectoryClientTypes.LDAPSType?

    public init (
        directoryId: Swift.String? = nil,
        type: DirectoryClientTypes.LDAPSType? = nil
    )
    {
        self.directoryId = directoryId
        self.type = type
    }
}

struct DisableLDAPSInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let type: DirectoryClientTypes.LDAPSType?
}

extension DisableLDAPSInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.LDAPSType.self, forKey: .type)
        type = typeDecoded
    }
}

extension DisableLDAPSOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableLDAPSOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLDAPSStatusException" : self = .invalidLDAPSStatusException(try InvalidLDAPSStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableLDAPSOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case invalidLDAPSStatusException(InvalidLDAPSStatusException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableLDAPSOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableLDAPSOutputResponse()"}
}

extension DisableLDAPSOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableLDAPSOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisableLDAPSOutputResponseBody: Swift.Equatable {
}

extension DisableLDAPSOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DisableRadiusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableRadiusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableRadiusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableRadiusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableRadiusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableRadiusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableRadiusOutputError>
}

extension DisableRadiusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableRadiusInput(directoryId: \(Swift.String(describing: directoryId)))"}
}

extension DisableRadiusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
    }
}

public struct DisableRadiusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableRadiusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableRadiusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableRadiusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableRadiusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableRadiusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableRadiusOutputError>
}

public struct DisableRadiusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableRadiusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableRadiusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableRadiusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableRadiusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableRadiusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableRadiusOutputError>
}

/// <p>Contains the inputs for the <a>DisableRadius</a> operation.</p>
public struct DisableRadiusInput: Swift.Equatable {
    /// <p>The identifier of the directory for which to disable MFA.</p>
    public let directoryId: Swift.String?

    public init (
        directoryId: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
    }
}

struct DisableRadiusInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
}

extension DisableRadiusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
    }
}

extension DisableRadiusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableRadiusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableRadiusOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableRadiusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableRadiusOutputResponse()"}
}

extension DisableRadiusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>Contains the results of the <a>DisableRadius</a> operation.</p>
public struct DisableRadiusOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisableRadiusOutputResponseBody: Swift.Equatable {
}

extension DisableRadiusOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DisableSsoInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableSsoInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableSsoInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableSsoOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableSsoInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableSsoOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableSsoOutputError>
}

extension DisableSsoInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableSsoInput(directoryId: \(Swift.String(describing: directoryId)), password: \(Swift.String(describing: password)), userName: \(Swift.String(describing: userName)))"}
}

extension DisableSsoInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case password = "Password"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let userName = userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }
}

public struct DisableSsoInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableSsoInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableSsoInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableSsoOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableSsoInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableSsoOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableSsoOutputError>
}

public struct DisableSsoInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableSsoInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableSsoInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableSsoOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableSsoInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableSsoOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableSsoOutputError>
}

/// <p>Contains the inputs for the <a>DisableSso</a> operation.</p>
public struct DisableSsoInput: Swift.Equatable {
    /// <p>The identifier of the directory for which to disable single-sign on.</p>
    public let directoryId: Swift.String?
    /// <p>The password of an alternate account to use to disable single-sign on. This is only used
    ///          for AD Connector directories. For more information, see the <i>UserName</i> parameter.</p>
    public let password: Swift.String?
    /// <p>The username of an alternate account to use to disable single-sign on. This is only used for AD Connector directories. This account must have privileges to remove a service principal name.</p>
    ///          <p>If the AD Connector service account does not have privileges to remove a service principal
    ///          name, you can specify an alternate account with the <i>UserName</i> and <i>Password</i>
    ///          parameters. These credentials are only used to disable single sign-on and are not stored by
    ///          the service. The AD Connector service account is not changed.</p>
    public let userName: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        password: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.password = password
        self.userName = userName
    }
}

struct DisableSsoInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let userName: Swift.String?
    public let password: Swift.String?
}

extension DisableSsoInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case password = "Password"
        case userName = "UserName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
    }
}

extension DisableSsoOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableSsoOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AuthenticationFailedException" : self = .authenticationFailedException(try AuthenticationFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableSsoOutputError: Swift.Error, Swift.Equatable {
    case authenticationFailedException(AuthenticationFailedException)
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case insufficientPermissionsException(InsufficientPermissionsException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableSsoOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableSsoOutputResponse()"}
}

extension DisableSsoOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>Contains the results of the <a>DisableSso</a> operation.</p>
public struct DisableSsoOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisableSsoOutputResponseBody: Swift.Equatable {
}

extension DisableSsoOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DirectoryClientTypes.DomainController: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZone = "AvailabilityZone"
        case directoryId = "DirectoryId"
        case dnsIpAddr = "DnsIpAddr"
        case domainControllerId = "DomainControllerId"
        case launchTime = "LaunchTime"
        case status = "Status"
        case statusLastUpdatedDateTime = "StatusLastUpdatedDateTime"
        case statusReason = "StatusReason"
        case subnetId = "SubnetId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let dnsIpAddr = dnsIpAddr {
            try encodeContainer.encode(dnsIpAddr, forKey: .dnsIpAddr)
        }
        if let domainControllerId = domainControllerId {
            try encodeContainer.encode(domainControllerId, forKey: .domainControllerId)
        }
        if let launchTime = launchTime {
            try encodeContainer.encode(launchTime.timeIntervalSince1970, forKey: .launchTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusLastUpdatedDateTime = statusLastUpdatedDateTime {
            try encodeContainer.encode(statusLastUpdatedDateTime.timeIntervalSince1970, forKey: .statusLastUpdatedDateTime)
        }
        if let statusReason = statusReason {
            try encodeContainer.encode(statusReason, forKey: .statusReason)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let domainControllerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainControllerId)
        domainControllerId = domainControllerIdDecoded
        let dnsIpAddrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsIpAddr)
        dnsIpAddr = dnsIpAddrDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DomainControllerStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let launchTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .launchTime)
        launchTime = launchTimeDecoded
        let statusLastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .statusLastUpdatedDateTime)
        statusLastUpdatedDateTime = statusLastUpdatedDateTimeDecoded
    }
}

extension DirectoryClientTypes.DomainController: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainController(availabilityZone: \(Swift.String(describing: availabilityZone)), directoryId: \(Swift.String(describing: directoryId)), dnsIpAddr: \(Swift.String(describing: dnsIpAddr)), domainControllerId: \(Swift.String(describing: domainControllerId)), launchTime: \(Swift.String(describing: launchTime)), status: \(Swift.String(describing: status)), statusLastUpdatedDateTime: \(Swift.String(describing: statusLastUpdatedDateTime)), statusReason: \(Swift.String(describing: statusReason)), subnetId: \(Swift.String(describing: subnetId)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains information about the domain controllers for a specified directory.</p>
    public struct DomainController: Swift.Equatable {
        /// <p>The Availability Zone where the domain controller is located.</p>
        public let availabilityZone: Swift.String?
        /// <p>Identifier of the directory where the domain controller resides.</p>
        public let directoryId: Swift.String?
        /// <p>The IP address of the domain controller.</p>
        public let dnsIpAddr: Swift.String?
        /// <p>Identifies a specific domain controller in the directory.</p>
        public let domainControllerId: Swift.String?
        /// <p>Specifies when the domain controller was created.</p>
        public let launchTime: ClientRuntime.Date?
        /// <p>The status of the domain controller.</p>
        public let status: DirectoryClientTypes.DomainControllerStatus?
        /// <p>The date and time that the status was last updated.</p>
        public let statusLastUpdatedDateTime: ClientRuntime.Date?
        /// <p>A description of the domain controller state.</p>
        public let statusReason: Swift.String?
        /// <p>Identifier of the subnet in the VPC that contains the domain controller.</p>
        public let subnetId: Swift.String?
        /// <p>The identifier of the VPC that contains the domain controller.</p>
        public let vpcId: Swift.String?

        public init (
            availabilityZone: Swift.String? = nil,
            directoryId: Swift.String? = nil,
            dnsIpAddr: Swift.String? = nil,
            domainControllerId: Swift.String? = nil,
            launchTime: ClientRuntime.Date? = nil,
            status: DirectoryClientTypes.DomainControllerStatus? = nil,
            statusLastUpdatedDateTime: ClientRuntime.Date? = nil,
            statusReason: Swift.String? = nil,
            subnetId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.directoryId = directoryId
            self.dnsIpAddr = dnsIpAddr
            self.domainControllerId = domainControllerId
            self.launchTime = launchTime
            self.status = status
            self.statusLastUpdatedDateTime = statusLastUpdatedDateTime
            self.statusReason = statusReason
            self.subnetId = subnetId
            self.vpcId = vpcId
        }
    }

}

extension DomainControllerLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainControllerLimitExceededException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension DomainControllerLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DomainControllerLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum allowed number of domain controllers per directory was exceeded. The default limit per directory is 20 domain controllers.</p>
public struct DomainControllerLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct DomainControllerLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension DomainControllerLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes {
    public enum DomainControllerStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleted
        case deleting
        case failed
        case impaired
        case restoring
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainControllerStatus] {
            return [
                .active,
                .creating,
                .deleted,
                .deleting,
                .failed,
                .impaired,
                .restoring,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .creating: return "Creating"
            case .deleted: return "Deleted"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .impaired: return "Impaired"
            case .restoring: return "Restoring"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DomainControllerStatus(rawValue: rawValue) ?? DomainControllerStatus.sdkUnknown(rawValue)
        }
    }
}

public struct EnableClientAuthenticationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableClientAuthenticationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableClientAuthenticationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableClientAuthenticationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableClientAuthenticationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableClientAuthenticationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableClientAuthenticationOutputError>
}

extension EnableClientAuthenticationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableClientAuthenticationInput(directoryId: \(Swift.String(describing: directoryId)), type: \(Swift.String(describing: type)))"}
}

extension EnableClientAuthenticationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct EnableClientAuthenticationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableClientAuthenticationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableClientAuthenticationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableClientAuthenticationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableClientAuthenticationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableClientAuthenticationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableClientAuthenticationOutputError>
}

public struct EnableClientAuthenticationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableClientAuthenticationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableClientAuthenticationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableClientAuthenticationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableClientAuthenticationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableClientAuthenticationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableClientAuthenticationOutputError>
}

public struct EnableClientAuthenticationInput: Swift.Equatable {
    /// <p>The identifier of the specified directory. </p>
    public let directoryId: Swift.String?
    /// <p>The type of client authentication to enable. Currently only the value <code>SmartCard</code> is
    ///       supported. Smart card authentication in AD Connector requires that you enable Kerberos
    ///       Constrained Delegation for the Service User to the LDAP service in the on-premises AD.
    ///     </p>
    public let type: DirectoryClientTypes.ClientAuthenticationType?

    public init (
        directoryId: Swift.String? = nil,
        type: DirectoryClientTypes.ClientAuthenticationType? = nil
    )
    {
        self.directoryId = directoryId
        self.type = type
    }
}

struct EnableClientAuthenticationInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let type: DirectoryClientTypes.ClientAuthenticationType?
}

extension EnableClientAuthenticationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ClientAuthenticationType.self, forKey: .type)
        type = typeDecoded
    }
}

extension EnableClientAuthenticationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableClientAuthenticationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidClientAuthStatusException" : self = .invalidClientAuthStatusException(try InvalidClientAuthStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoAvailableCertificateException" : self = .noAvailableCertificateException(try NoAvailableCertificateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableClientAuthenticationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case clientException(ClientException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case invalidClientAuthStatusException(InvalidClientAuthStatusException)
    case noAvailableCertificateException(NoAvailableCertificateException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableClientAuthenticationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableClientAuthenticationOutputResponse()"}
}

extension EnableClientAuthenticationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableClientAuthenticationOutputResponse: Swift.Equatable {

    public init() {}
}

struct EnableClientAuthenticationOutputResponseBody: Swift.Equatable {
}

extension EnableClientAuthenticationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct EnableLDAPSInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableLDAPSInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableLDAPSInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableLDAPSOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableLDAPSInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableLDAPSOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableLDAPSOutputError>
}

extension EnableLDAPSInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableLDAPSInput(directoryId: \(Swift.String(describing: directoryId)), type: \(Swift.String(describing: type)))"}
}

extension EnableLDAPSInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct EnableLDAPSInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableLDAPSInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableLDAPSInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableLDAPSOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableLDAPSInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableLDAPSOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableLDAPSOutputError>
}

public struct EnableLDAPSInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableLDAPSInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableLDAPSInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableLDAPSOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableLDAPSInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableLDAPSOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableLDAPSOutputError>
}

public struct EnableLDAPSInput: Swift.Equatable {
    /// <p>The identifier of the directory.</p>
    public let directoryId: Swift.String?
    /// <p>The type of LDAP security to enable. Currently only the value <code>Client</code> is
    ///       supported.</p>
    public let type: DirectoryClientTypes.LDAPSType?

    public init (
        directoryId: Swift.String? = nil,
        type: DirectoryClientTypes.LDAPSType? = nil
    )
    {
        self.directoryId = directoryId
        self.type = type
    }
}

struct EnableLDAPSInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let type: DirectoryClientTypes.LDAPSType?
}

extension EnableLDAPSInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.LDAPSType.self, forKey: .type)
        type = typeDecoded
    }
}

extension EnableLDAPSOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableLDAPSOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLDAPSStatusException" : self = .invalidLDAPSStatusException(try InvalidLDAPSStatusException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoAvailableCertificateException" : self = .noAvailableCertificateException(try NoAvailableCertificateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableLDAPSOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case invalidLDAPSStatusException(InvalidLDAPSStatusException)
    case invalidParameterException(InvalidParameterException)
    case noAvailableCertificateException(NoAvailableCertificateException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableLDAPSOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableLDAPSOutputResponse()"}
}

extension EnableLDAPSOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableLDAPSOutputResponse: Swift.Equatable {

    public init() {}
}

struct EnableLDAPSOutputResponseBody: Swift.Equatable {
}

extension EnableLDAPSOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct EnableRadiusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableRadiusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableRadiusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableRadiusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableRadiusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableRadiusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableRadiusOutputError>
}

extension EnableRadiusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableRadiusInput(directoryId: \(Swift.String(describing: directoryId)), radiusSettings: \(Swift.String(describing: radiusSettings)))"}
}

extension EnableRadiusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case radiusSettings = "RadiusSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let radiusSettings = radiusSettings {
            try encodeContainer.encode(radiusSettings, forKey: .radiusSettings)
        }
    }
}

public struct EnableRadiusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableRadiusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableRadiusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableRadiusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableRadiusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableRadiusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableRadiusOutputError>
}

public struct EnableRadiusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableRadiusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableRadiusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableRadiusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableRadiusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableRadiusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableRadiusOutputError>
}

/// <p>Contains the inputs for the <a>EnableRadius</a> operation.</p>
public struct EnableRadiusInput: Swift.Equatable {
    /// <p>The identifier of the directory for which to enable MFA.</p>
    public let directoryId: Swift.String?
    /// <p>A <a>RadiusSettings</a> object that contains information about the RADIUS server.</p>
    public let radiusSettings: DirectoryClientTypes.RadiusSettings?

    public init (
        directoryId: Swift.String? = nil,
        radiusSettings: DirectoryClientTypes.RadiusSettings? = nil
    )
    {
        self.directoryId = directoryId
        self.radiusSettings = radiusSettings
    }
}

struct EnableRadiusInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let radiusSettings: DirectoryClientTypes.RadiusSettings?
}

extension EnableRadiusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case radiusSettings = "RadiusSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let radiusSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RadiusSettings.self, forKey: .radiusSettings)
        radiusSettings = radiusSettingsDecoded
    }
}

extension EnableRadiusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableRadiusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityAlreadyExistsException" : self = .entityAlreadyExistsException(try EntityAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableRadiusOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityAlreadyExistsException(EntityAlreadyExistsException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableRadiusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableRadiusOutputResponse()"}
}

extension EnableRadiusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>Contains the results of the <a>EnableRadius</a> operation.</p>
public struct EnableRadiusOutputResponse: Swift.Equatable {

    public init() {}
}

struct EnableRadiusOutputResponseBody: Swift.Equatable {
}

extension EnableRadiusOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct EnableSsoInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableSsoInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableSsoInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableSsoOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableSsoInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableSsoOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableSsoOutputError>
}

extension EnableSsoInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableSsoInput(directoryId: \(Swift.String(describing: directoryId)), password: \(Swift.String(describing: password)), userName: \(Swift.String(describing: userName)))"}
}

extension EnableSsoInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case password = "Password"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let password = password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let userName = userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }
}

public struct EnableSsoInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableSsoInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableSsoInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableSsoOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableSsoInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableSsoOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableSsoOutputError>
}

public struct EnableSsoInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableSsoInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableSsoInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableSsoOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableSsoInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableSsoOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableSsoOutputError>
}

/// <p>Contains the inputs for the <a>EnableSso</a> operation.</p>
public struct EnableSsoInput: Swift.Equatable {
    /// <p>The identifier of the directory for which to enable single-sign on.</p>
    public let directoryId: Swift.String?
    /// <p>The password of an alternate account to use to enable single-sign on. This is only used for
    ///          AD Connector directories. For more information, see the <i>UserName</i> parameter.</p>
    public let password: Swift.String?
    /// <p>The username of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. This account must have privileges to add a service principal name.</p>
    ///          <p>If the AD Connector service account does not have privileges to add a service principal
    ///          name, you can specify an alternate account with the <i>UserName</i> and <i>Password</i>
    ///          parameters. These credentials are only used to enable single sign-on and are not stored by
    ///          the service. The AD Connector service account is not changed.</p>
    public let userName: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        password: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.password = password
        self.userName = userName
    }
}

struct EnableSsoInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let userName: Swift.String?
    public let password: Swift.String?
}

extension EnableSsoInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case password = "Password"
        case userName = "UserName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
    }
}

extension EnableSsoOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableSsoOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AuthenticationFailedException" : self = .authenticationFailedException(try AuthenticationFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableSsoOutputError: Swift.Error, Swift.Equatable {
    case authenticationFailedException(AuthenticationFailedException)
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case insufficientPermissionsException(InsufficientPermissionsException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableSsoOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableSsoOutputResponse()"}
}

extension EnableSsoOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>Contains the results of the <a>EnableSso</a> operation.</p>
public struct EnableSsoOutputResponse: Swift.Equatable {

    public init() {}
}

struct EnableSsoOutputResponseBody: Swift.Equatable {
}

extension EnableSsoOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension EntityAlreadyExistsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EntityAlreadyExistsException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension EntityAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EntityAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified entity already exists.</p>
public struct EntityAlreadyExistsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct EntityAlreadyExistsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension EntityAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension EntityDoesNotExistException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EntityDoesNotExistException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension EntityDoesNotExistException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EntityDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified entity could not be found.</p>
public struct EntityDoesNotExistException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct EntityDoesNotExistExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension EntityDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes.EventTopic: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDateTime = "CreatedDateTime"
        case directoryId = "DirectoryId"
        case status = "Status"
        case topicArn = "TopicArn"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdDateTime = createdDateTime {
            try encodeContainer.encode(createdDateTime.timeIntervalSince1970, forKey: .createdDateTime)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let topicArn = topicArn {
            try encodeContainer.encode(topicArn, forKey: .topicArn)
        }
        if let topicName = topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let topicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicArn)
        topicArn = topicArnDecoded
        let createdDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDateTime)
        createdDateTime = createdDateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.TopicStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DirectoryClientTypes.EventTopic: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EventTopic(createdDateTime: \(Swift.String(describing: createdDateTime)), directoryId: \(Swift.String(describing: directoryId)), status: \(Swift.String(describing: status)), topicArn: \(Swift.String(describing: topicArn)), topicName: \(Swift.String(describing: topicName)))"}
}

extension DirectoryClientTypes {
    /// <p>Information about SNS topic and AWS Directory Service directory associations.</p>
    public struct EventTopic: Swift.Equatable {
        /// <p>The date and time of when you associated your directory with the SNS topic.</p>
        public let createdDateTime: ClientRuntime.Date?
        /// <p>The Directory ID of an AWS Directory Service directory that will publish status messages to an SNS topic.</p>
        public let directoryId: Swift.String?
        /// <p>The topic registration status.</p>
        public let status: DirectoryClientTypes.TopicStatus?
        /// <p>The SNS topic ARN (Amazon Resource Name).</p>
        public let topicArn: Swift.String?
        /// <p>The name of an AWS SNS topic the receives status messages from the directory.</p>
        public let topicName: Swift.String?

        public init (
            createdDateTime: ClientRuntime.Date? = nil,
            directoryId: Swift.String? = nil,
            status: DirectoryClientTypes.TopicStatus? = nil,
            topicArn: Swift.String? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.createdDateTime = createdDateTime
            self.directoryId = directoryId
            self.status = status
            self.topicArn = topicArn
            self.topicName = topicName
        }
    }

}

extension GetDirectoryLimitsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDirectoryLimitsInput()"}
}

extension GetDirectoryLimitsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetDirectoryLimitsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDirectoryLimitsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDirectoryLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDirectoryLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDirectoryLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDirectoryLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDirectoryLimitsOutputError>
}

public struct GetDirectoryLimitsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDirectoryLimitsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDirectoryLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDirectoryLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDirectoryLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDirectoryLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDirectoryLimitsOutputError>
}

/// <p>Contains the inputs for the <a>GetDirectoryLimits</a> operation.</p>
public struct GetDirectoryLimitsInput: Swift.Equatable {

    public init() {}
}

struct GetDirectoryLimitsInputBody: Swift.Equatable {
}

extension GetDirectoryLimitsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetDirectoryLimitsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDirectoryLimitsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDirectoryLimitsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDirectoryLimitsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDirectoryLimitsOutputResponse(directoryLimits: \(Swift.String(describing: directoryLimits)))"}
}

extension GetDirectoryLimitsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDirectoryLimitsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directoryLimits = output.directoryLimits
        } else {
            self.directoryLimits = nil
        }
    }
}

/// <p>Contains the results of the <a>GetDirectoryLimits</a> operation.</p>
public struct GetDirectoryLimitsOutputResponse: Swift.Equatable {
    /// <p>A <a>DirectoryLimits</a> object that contains the directory limits for the
    ///       current rRegion.</p>
    public let directoryLimits: DirectoryClientTypes.DirectoryLimits?

    public init (
        directoryLimits: DirectoryClientTypes.DirectoryLimits? = nil
    )
    {
        self.directoryLimits = directoryLimits
    }
}

struct GetDirectoryLimitsOutputResponseBody: Swift.Equatable {
    public let directoryLimits: DirectoryClientTypes.DirectoryLimits?
}

extension GetDirectoryLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryLimits = "DirectoryLimits"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryLimitsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryLimits.self, forKey: .directoryLimits)
        directoryLimits = directoryLimitsDecoded
    }
}

public struct GetSnapshotLimitsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSnapshotLimitsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSnapshotLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSnapshotLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSnapshotLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSnapshotLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSnapshotLimitsOutputError>
}

extension GetSnapshotLimitsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSnapshotLimitsInput(directoryId: \(Swift.String(describing: directoryId)))"}
}

extension GetSnapshotLimitsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
    }
}

public struct GetSnapshotLimitsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSnapshotLimitsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSnapshotLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSnapshotLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSnapshotLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSnapshotLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSnapshotLimitsOutputError>
}

public struct GetSnapshotLimitsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetSnapshotLimitsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetSnapshotLimitsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetSnapshotLimitsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetSnapshotLimitsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetSnapshotLimitsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetSnapshotLimitsOutputError>
}

/// <p>Contains the inputs for the <a>GetSnapshotLimits</a> operation.</p>
public struct GetSnapshotLimitsInput: Swift.Equatable {
    /// <p>Contains the identifier of the directory to obtain the limits for.</p>
    public let directoryId: Swift.String?

    public init (
        directoryId: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
    }
}

struct GetSnapshotLimitsInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
}

extension GetSnapshotLimitsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
    }
}

extension GetSnapshotLimitsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetSnapshotLimitsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetSnapshotLimitsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetSnapshotLimitsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetSnapshotLimitsOutputResponse(snapshotLimits: \(Swift.String(describing: snapshotLimits)))"}
}

extension GetSnapshotLimitsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetSnapshotLimitsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.snapshotLimits = output.snapshotLimits
        } else {
            self.snapshotLimits = nil
        }
    }
}

/// <p>Contains the results of the <a>GetSnapshotLimits</a> operation.</p>
public struct GetSnapshotLimitsOutputResponse: Swift.Equatable {
    /// <p>A <a>SnapshotLimits</a> object that contains the manual snapshot limits for the specified
    ///          directory.</p>
    public let snapshotLimits: DirectoryClientTypes.SnapshotLimits?

    public init (
        snapshotLimits: DirectoryClientTypes.SnapshotLimits? = nil
    )
    {
        self.snapshotLimits = snapshotLimits
    }
}

struct GetSnapshotLimitsOutputResponseBody: Swift.Equatable {
    public let snapshotLimits: DirectoryClientTypes.SnapshotLimits?
}

extension GetSnapshotLimitsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotLimits = "SnapshotLimits"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotLimitsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.SnapshotLimits.self, forKey: .snapshotLimits)
        snapshotLimits = snapshotLimitsDecoded
    }
}

extension InsufficientPermissionsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsufficientPermissionsException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension InsufficientPermissionsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InsufficientPermissionsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The account does not have sufficient permission to perform the operation.</p>
public struct InsufficientPermissionsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct InsufficientPermissionsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension InsufficientPermissionsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension InvalidCertificateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidCertificateException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension InvalidCertificateException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidCertificateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The certificate PEM that was provided has incorrect encoding.</p>
public struct InvalidCertificateException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct InvalidCertificateExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension InvalidCertificateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension InvalidClientAuthStatusException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidClientAuthStatusException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension InvalidClientAuthStatusException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidClientAuthStatusExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Client authentication is already enabled.</p>
public struct InvalidClientAuthStatusException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct InvalidClientAuthStatusExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension InvalidClientAuthStatusExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension InvalidLDAPSStatusException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidLDAPSStatusException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension InvalidLDAPSStatusException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidLDAPSStatusExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The LDAP activities could not be performed because they are limited by the LDAPS
///       status.</p>
public struct InvalidLDAPSStatusException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct InvalidLDAPSStatusExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension InvalidLDAPSStatusExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension InvalidNextTokenException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidNextTokenException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension InvalidNextTokenException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidNextTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The <code>NextToken</code> value is not valid.</p>
public struct InvalidNextTokenException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct InvalidNextTokenExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension InvalidNextTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension InvalidParameterException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidParameterException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension InvalidParameterException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>One or more parameters are not valid.</p>
public struct InvalidParameterException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct InvalidParameterExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension InvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension InvalidPasswordException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidPasswordException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension InvalidPasswordException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidPasswordExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The new password provided by the user does not meet the password complexity requirements defined in your directory.</p>
public struct InvalidPasswordException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct InvalidPasswordExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension InvalidPasswordExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension InvalidTargetException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidTargetException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension InvalidTargetException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidTargetExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified shared target is not valid.</p>
public struct InvalidTargetException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct InvalidTargetExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension InvalidTargetExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes.IpRoute: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrIp = "CidrIp"
        case description = "Description"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrIp = cidrIp {
            try encodeContainer.encode(cidrIp, forKey: .cidrIp)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrIp)
        cidrIp = cidrIpDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension DirectoryClientTypes.IpRoute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IpRoute(cidrIp: \(Swift.String(describing: cidrIp)), description: \(Swift.String(describing: description)))"}
}

extension DirectoryClientTypes {
    /// <p>IP address block. This is often the address block of the DNS server used for your on-premises domain. </p>
    public struct IpRoute: Swift.Equatable {
        /// <p>IP address block using CIDR format, for example 10.0.0.0/24. This is often the address block of the DNS server used for your on-premises domain. For a single IP address use a CIDR address block with /32. For example 10.0.0.0/32.</p>
        public let cidrIp: Swift.String?
        /// <p>Description of the address block.</p>
        public let description: Swift.String?

        public init (
            cidrIp: Swift.String? = nil,
            description: Swift.String? = nil
        )
        {
            self.cidrIp = cidrIp
            self.description = description
        }
    }

}

extension DirectoryClientTypes.IpRouteInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case addedDateTime = "AddedDateTime"
        case cidrIp = "CidrIp"
        case description = "Description"
        case directoryId = "DirectoryId"
        case ipRouteStatusMsg = "IpRouteStatusMsg"
        case ipRouteStatusReason = "IpRouteStatusReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let addedDateTime = addedDateTime {
            try encodeContainer.encode(addedDateTime.timeIntervalSince1970, forKey: .addedDateTime)
        }
        if let cidrIp = cidrIp {
            try encodeContainer.encode(cidrIp, forKey: .cidrIp)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let ipRouteStatusMsg = ipRouteStatusMsg {
            try encodeContainer.encode(ipRouteStatusMsg.rawValue, forKey: .ipRouteStatusMsg)
        }
        if let ipRouteStatusReason = ipRouteStatusReason {
            try encodeContainer.encode(ipRouteStatusReason, forKey: .ipRouteStatusReason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let cidrIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrIp)
        cidrIp = cidrIpDecoded
        let ipRouteStatusMsgDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.IpRouteStatusMsg.self, forKey: .ipRouteStatusMsg)
        ipRouteStatusMsg = ipRouteStatusMsgDecoded
        let addedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .addedDateTime)
        addedDateTime = addedDateTimeDecoded
        let ipRouteStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipRouteStatusReason)
        ipRouteStatusReason = ipRouteStatusReasonDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension DirectoryClientTypes.IpRouteInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IpRouteInfo(addedDateTime: \(Swift.String(describing: addedDateTime)), cidrIp: \(Swift.String(describing: cidrIp)), description: \(Swift.String(describing: description)), directoryId: \(Swift.String(describing: directoryId)), ipRouteStatusMsg: \(Swift.String(describing: ipRouteStatusMsg)), ipRouteStatusReason: \(Swift.String(describing: ipRouteStatusReason)))"}
}

extension DirectoryClientTypes {
    /// <p>Information about one or more IP address blocks.</p>
    public struct IpRouteInfo: Swift.Equatable {
        /// <p>The date and time the address block was added to the directory.</p>
        public let addedDateTime: ClientRuntime.Date?
        /// <p>IP address block in the <a>IpRoute</a>.</p>
        public let cidrIp: Swift.String?
        /// <p>Description of the <a>IpRouteInfo</a>.</p>
        public let description: Swift.String?
        /// <p>Identifier (ID) of the directory associated with the IP addresses.</p>
        public let directoryId: Swift.String?
        /// <p>The status of the IP address block.</p>
        public let ipRouteStatusMsg: DirectoryClientTypes.IpRouteStatusMsg?
        /// <p>The reason for the IpRouteStatusMsg.</p>
        public let ipRouteStatusReason: Swift.String?

        public init (
            addedDateTime: ClientRuntime.Date? = nil,
            cidrIp: Swift.String? = nil,
            description: Swift.String? = nil,
            directoryId: Swift.String? = nil,
            ipRouteStatusMsg: DirectoryClientTypes.IpRouteStatusMsg? = nil,
            ipRouteStatusReason: Swift.String? = nil
        )
        {
            self.addedDateTime = addedDateTime
            self.cidrIp = cidrIp
            self.description = description
            self.directoryId = directoryId
            self.ipRouteStatusMsg = ipRouteStatusMsg
            self.ipRouteStatusReason = ipRouteStatusReason
        }
    }

}

extension IpRouteLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IpRouteLimitExceededException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension IpRouteLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: IpRouteLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum allowed number of IP addresses was exceeded. The default limit is 100 IP address blocks.</p>
public struct IpRouteLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct IpRouteLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension IpRouteLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes {
    public enum IpRouteStatusMsg: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case added
        case adding
        case addFailed
        case removed
        case removeFailed
        case removing
        case sdkUnknown(Swift.String)

        public static var allCases: [IpRouteStatusMsg] {
            return [
                .added,
                .adding,
                .addFailed,
                .removed,
                .removeFailed,
                .removing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .added: return "Added"
            case .adding: return "Adding"
            case .addFailed: return "AddFailed"
            case .removed: return "Removed"
            case .removeFailed: return "RemoveFailed"
            case .removing: return "Removing"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IpRouteStatusMsg(rawValue: rawValue) ?? IpRouteStatusMsg.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes.LDAPSSettingInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lDAPSStatus = "LDAPSStatus"
        case lDAPSStatusReason = "LDAPSStatusReason"
        case lastUpdatedDateTime = "LastUpdatedDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lDAPSStatus = lDAPSStatus {
            try encodeContainer.encode(lDAPSStatus.rawValue, forKey: .lDAPSStatus)
        }
        if let lDAPSStatusReason = lDAPSStatusReason {
            try encodeContainer.encode(lDAPSStatusReason, forKey: .lDAPSStatusReason)
        }
        if let lastUpdatedDateTime = lastUpdatedDateTime {
            try encodeContainer.encode(lastUpdatedDateTime.timeIntervalSince1970, forKey: .lastUpdatedDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lDAPSStatusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.LDAPSStatus.self, forKey: .lDAPSStatus)
        lDAPSStatus = lDAPSStatusDecoded
        let lDAPSStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lDAPSStatusReason)
        lDAPSStatusReason = lDAPSStatusReasonDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}

extension DirectoryClientTypes.LDAPSSettingInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LDAPSSettingInfo(lDAPSStatus: \(Swift.String(describing: lDAPSStatus)), lDAPSStatusReason: \(Swift.String(describing: lDAPSStatusReason)), lastUpdatedDateTime: \(Swift.String(describing: lastUpdatedDateTime)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains general information about the LDAPS settings.</p>
    public struct LDAPSSettingInfo: Swift.Equatable {
        /// <p>The state of the LDAPS settings.</p>
        public let lDAPSStatus: DirectoryClientTypes.LDAPSStatus?
        /// <p>Describes a state change for LDAPS.</p>
        public let lDAPSStatusReason: Swift.String?
        /// <p>The date and time when the LDAPS settings were last updated.</p>
        public let lastUpdatedDateTime: ClientRuntime.Date?

        public init (
            lDAPSStatus: DirectoryClientTypes.LDAPSStatus? = nil,
            lDAPSStatusReason: Swift.String? = nil,
            lastUpdatedDateTime: ClientRuntime.Date? = nil
        )
        {
            self.lDAPSStatus = lDAPSStatus
            self.lDAPSStatusReason = lDAPSStatusReason
            self.lastUpdatedDateTime = lastUpdatedDateTime
        }
    }

}

extension DirectoryClientTypes {
    public enum LDAPSStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case enableFailed
        case enabling
        case sdkUnknown(Swift.String)

        public static var allCases: [LDAPSStatus] {
            return [
                .disabled,
                .enabled,
                .enableFailed,
                .enabling,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case .enableFailed: return "EnableFailed"
            case .enabling: return "Enabling"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LDAPSStatus(rawValue: rawValue) ?? LDAPSStatus.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes {
    public enum LDAPSType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case client
        case sdkUnknown(Swift.String)

        public static var allCases: [LDAPSType] {
            return [
                .client,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .client: return "Client"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LDAPSType(rawValue: rawValue) ?? LDAPSType.sdkUnknown(rawValue)
        }
    }
}

public struct ListCertificatesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCertificatesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCertificatesOutputError>
}

extension ListCertificatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCertificatesInput(directoryId: \(Swift.String(describing: directoryId)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListCertificatesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListCertificatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCertificatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCertificatesOutputError>
}

public struct ListCertificatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCertificatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCertificatesOutputError>
}

public struct ListCertificatesInput: Swift.Equatable {
    /// <p>The identifier of the directory.</p>
    public let directoryId: Swift.String?
    /// <p>The number of items that should show up on one page</p>
    public let limit: Swift.Int?
    /// <p>A token for requesting another page of certificates if the <code>NextToken</code> response
    ///       element indicates that more certificates are available. Use the value of the returned
    ///         <code>NextToken</code> element in your request until the token comes back as
    ///         <code>null</code>. Pass <code>null</code> if this is the first call.</p>
    public let nextToken: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListCertificatesInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension ListCertificatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListCertificatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCertificatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCertificatesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCertificatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCertificatesOutputResponse(certificatesInfo: \(Swift.String(describing: certificatesInfo)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListCertificatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCertificatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificatesInfo = output.certificatesInfo
            self.nextToken = output.nextToken
        } else {
            self.certificatesInfo = nil
            self.nextToken = nil
        }
    }
}

public struct ListCertificatesOutputResponse: Swift.Equatable {
    /// <p>A list of certificates with basic details including certificate ID, certificate common
    ///       name, certificate state.</p>
    public let certificatesInfo: [DirectoryClientTypes.CertificateInfo]?
    /// <p>Indicates whether another page of certificates is available when the number of available
    ///       certificates exceeds the page limit.</p>
    public let nextToken: Swift.String?

    public init (
        certificatesInfo: [DirectoryClientTypes.CertificateInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.certificatesInfo = certificatesInfo
        self.nextToken = nextToken
    }
}

struct ListCertificatesOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let certificatesInfo: [DirectoryClientTypes.CertificateInfo]?
}

extension ListCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificatesInfo = "CertificatesInfo"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let certificatesInfoContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.CertificateInfo?].self, forKey: .certificatesInfo)
        var certificatesInfoDecoded0:[DirectoryClientTypes.CertificateInfo]? = nil
        if let certificatesInfoContainer = certificatesInfoContainer {
            certificatesInfoDecoded0 = [DirectoryClientTypes.CertificateInfo]()
            for structure0 in certificatesInfoContainer {
                if let structure0 = structure0 {
                    certificatesInfoDecoded0?.append(structure0)
                }
            }
        }
        certificatesInfo = certificatesInfoDecoded0
    }
}

public struct ListIpRoutesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIpRoutesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIpRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIpRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIpRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIpRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIpRoutesOutputError>
}

extension ListIpRoutesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIpRoutesInput(directoryId: \(Swift.String(describing: directoryId)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListIpRoutesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListIpRoutesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIpRoutesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIpRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIpRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIpRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIpRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIpRoutesOutputError>
}

public struct ListIpRoutesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListIpRoutesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListIpRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListIpRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListIpRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListIpRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListIpRoutesOutputError>
}

public struct ListIpRoutesInput: Swift.Equatable {
    /// <p>Identifier (ID) of the directory for which you want to retrieve the IP addresses.</p>
    public let directoryId: Swift.String?
    /// <p>Maximum number of items to return. If this value is zero, the maximum number of items is specified by the limitations of the operation.</p>
    public let limit: Swift.Int?
    /// <p>The <i>ListIpRoutes.NextToken</i> value from a previous call to
    ///          <a>ListIpRoutes</a>. Pass null if this is the first call.</p>
    public let nextToken: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListIpRoutesInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension ListIpRoutesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListIpRoutesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListIpRoutesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListIpRoutesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListIpRoutesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListIpRoutesOutputResponse(ipRoutesInfo: \(Swift.String(describing: ipRoutesInfo)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListIpRoutesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListIpRoutesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.ipRoutesInfo = output.ipRoutesInfo
            self.nextToken = output.nextToken
        } else {
            self.ipRoutesInfo = nil
            self.nextToken = nil
        }
    }
}

public struct ListIpRoutesOutputResponse: Swift.Equatable {
    /// <p>A list of <a>IpRoute</a>s.</p>
    public let ipRoutesInfo: [DirectoryClientTypes.IpRouteInfo]?
    /// <p>If not null, more results are available. Pass this value for the <i>NextToken</i> parameter
    ///          in a subsequent call to <a>ListIpRoutes</a> to retrieve the next set of items.</p>
    public let nextToken: Swift.String?

    public init (
        ipRoutesInfo: [DirectoryClientTypes.IpRouteInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.ipRoutesInfo = ipRoutesInfo
        self.nextToken = nextToken
    }
}

struct ListIpRoutesOutputResponseBody: Swift.Equatable {
    public let ipRoutesInfo: [DirectoryClientTypes.IpRouteInfo]?
    public let nextToken: Swift.String?
}

extension ListIpRoutesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipRoutesInfo = "IpRoutesInfo"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipRoutesInfoContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.IpRouteInfo?].self, forKey: .ipRoutesInfo)
        var ipRoutesInfoDecoded0:[DirectoryClientTypes.IpRouteInfo]? = nil
        if let ipRoutesInfoContainer = ipRoutesInfoContainer {
            ipRoutesInfoDecoded0 = [DirectoryClientTypes.IpRouteInfo]()
            for structure0 in ipRoutesInfoContainer {
                if let structure0 = structure0 {
                    ipRoutesInfoDecoded0?.append(structure0)
                }
            }
        }
        ipRoutesInfo = ipRoutesInfoDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListLogSubscriptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLogSubscriptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLogSubscriptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLogSubscriptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLogSubscriptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLogSubscriptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLogSubscriptionsOutputError>
}

extension ListLogSubscriptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLogSubscriptionsInput(directoryId: \(Swift.String(describing: directoryId)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListLogSubscriptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListLogSubscriptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLogSubscriptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLogSubscriptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLogSubscriptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLogSubscriptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLogSubscriptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLogSubscriptionsOutputError>
}

public struct ListLogSubscriptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLogSubscriptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLogSubscriptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLogSubscriptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLogSubscriptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLogSubscriptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLogSubscriptionsOutputError>
}

public struct ListLogSubscriptionsInput: Swift.Equatable {
    /// <p>If a <i>DirectoryID</i> is provided, lists only the log subscription
    ///       associated with that directory. If no <i>DirectoryId</i> is provided, lists all
    ///       log subscriptions associated with your AWS account. If there are no log subscriptions for the
    ///       AWS account or the directory, an empty list will be returned.</p>
    public let directoryId: Swift.String?
    /// <p>The maximum number of items returned.</p>
    public let limit: Swift.Int?
    /// <p>The token for the next set of items to return.</p>
    public let nextToken: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListLogSubscriptionsInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension ListLogSubscriptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListLogSubscriptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLogSubscriptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListLogSubscriptionsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLogSubscriptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLogSubscriptionsOutputResponse(logSubscriptions: \(Swift.String(describing: logSubscriptions)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListLogSubscriptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListLogSubscriptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logSubscriptions = output.logSubscriptions
            self.nextToken = output.nextToken
        } else {
            self.logSubscriptions = nil
            self.nextToken = nil
        }
    }
}

public struct ListLogSubscriptionsOutputResponse: Swift.Equatable {
    /// <p>A list of active <a>LogSubscription</a> objects for calling the AWS
    ///       account.</p>
    public let logSubscriptions: [DirectoryClientTypes.LogSubscription]?
    /// <p>The token for the next set of items to return.</p>
    public let nextToken: Swift.String?

    public init (
        logSubscriptions: [DirectoryClientTypes.LogSubscription]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.logSubscriptions = logSubscriptions
        self.nextToken = nextToken
    }
}

struct ListLogSubscriptionsOutputResponseBody: Swift.Equatable {
    public let logSubscriptions: [DirectoryClientTypes.LogSubscription]?
    public let nextToken: Swift.String?
}

extension ListLogSubscriptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logSubscriptions = "LogSubscriptions"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logSubscriptionsContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.LogSubscription?].self, forKey: .logSubscriptions)
        var logSubscriptionsDecoded0:[DirectoryClientTypes.LogSubscription]? = nil
        if let logSubscriptionsContainer = logSubscriptionsContainer {
            logSubscriptionsDecoded0 = [DirectoryClientTypes.LogSubscription]()
            for structure0 in logSubscriptionsContainer {
                if let structure0 = structure0 {
                    logSubscriptionsDecoded0?.append(structure0)
                }
            }
        }
        logSubscriptions = logSubscriptionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListSchemaExtensionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSchemaExtensionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSchemaExtensionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSchemaExtensionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSchemaExtensionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSchemaExtensionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSchemaExtensionsOutputError>
}

extension ListSchemaExtensionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSchemaExtensionsInput(directoryId: \(Swift.String(describing: directoryId)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListSchemaExtensionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListSchemaExtensionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSchemaExtensionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSchemaExtensionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSchemaExtensionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSchemaExtensionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSchemaExtensionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSchemaExtensionsOutputError>
}

public struct ListSchemaExtensionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSchemaExtensionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSchemaExtensionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSchemaExtensionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSchemaExtensionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSchemaExtensionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSchemaExtensionsOutputError>
}

public struct ListSchemaExtensionsInput: Swift.Equatable {
    /// <p>The identifier of the directory from which to retrieve the schema extension information.</p>
    public let directoryId: Swift.String?
    /// <p>The maximum number of items to return.</p>
    public let limit: Swift.Int?
    /// <p>The <code>ListSchemaExtensions.NextToken</code> value from a previous call to <code>ListSchemaExtensions</code>. Pass null if this is the first call.</p>
    public let nextToken: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListSchemaExtensionsInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension ListSchemaExtensionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListSchemaExtensionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSchemaExtensionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSchemaExtensionsOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSchemaExtensionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSchemaExtensionsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), schemaExtensionsInfo: \(Swift.String(describing: schemaExtensionsInfo)))"}
}

extension ListSchemaExtensionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSchemaExtensionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.schemaExtensionsInfo = output.schemaExtensionsInfo
        } else {
            self.nextToken = nil
            self.schemaExtensionsInfo = nil
        }
    }
}

public struct ListSchemaExtensionsOutputResponse: Swift.Equatable {
    /// <p>If not null, more results are available. Pass this value for the <code>NextToken</code> parameter in a subsequent call to <code>ListSchemaExtensions</code> to retrieve the next set of items.</p>
    public let nextToken: Swift.String?
    /// <p>Information about the schema extensions applied to the directory.</p>
    public let schemaExtensionsInfo: [DirectoryClientTypes.SchemaExtensionInfo]?

    public init (
        nextToken: Swift.String? = nil,
        schemaExtensionsInfo: [DirectoryClientTypes.SchemaExtensionInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.schemaExtensionsInfo = schemaExtensionsInfo
    }
}

struct ListSchemaExtensionsOutputResponseBody: Swift.Equatable {
    public let schemaExtensionsInfo: [DirectoryClientTypes.SchemaExtensionInfo]?
    public let nextToken: Swift.String?
}

extension ListSchemaExtensionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case schemaExtensionsInfo = "SchemaExtensionsInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaExtensionsInfoContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.SchemaExtensionInfo?].self, forKey: .schemaExtensionsInfo)
        var schemaExtensionsInfoDecoded0:[DirectoryClientTypes.SchemaExtensionInfo]? = nil
        if let schemaExtensionsInfoContainer = schemaExtensionsInfoContainer {
            schemaExtensionsInfoDecoded0 = [DirectoryClientTypes.SchemaExtensionInfo]()
            for structure0 in schemaExtensionsInfoContainer {
                if let structure0 = structure0 {
                    schemaExtensionsInfoDecoded0?.append(structure0)
                }
            }
        }
        schemaExtensionsInfo = schemaExtensionsInfoDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTagsForResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), resourceId: \(Swift.String(describing: resourceId)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// <p>Reserved for future use.</p>
    public let limit: Swift.Int?
    /// <p>Reserved for future use.</p>
    public let nextToken: Swift.String?
    /// <p>Identifier (ID) of the directory for which you want to retrieve tags.</p>
    public let resourceId: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceId: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.resourceId = resourceId
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    public let resourceId: Swift.String?
    public let nextToken: Swift.String?
    public let limit: Swift.Int?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(nextToken: \(Swift.String(describing: nextToken)), tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// <p>Reserved for future use.</p>
    public let nextToken: Swift.String?
    /// <p>List of tags returned by the ListTagsForResource operation.</p>
    public let tags: [DirectoryClientTypes.Tag]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [DirectoryClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [DirectoryClientTypes.Tag]?
    public let nextToken: Swift.String?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([DirectoryClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DirectoryClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DirectoryClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DirectoryClientTypes.LogSubscription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case logGroupName = "LogGroupName"
        case subscriptionCreatedDateTime = "SubscriptionCreatedDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let logGroupName = logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let subscriptionCreatedDateTime = subscriptionCreatedDateTime {
            try encodeContainer.encode(subscriptionCreatedDateTime.timeIntervalSince1970, forKey: .subscriptionCreatedDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let subscriptionCreatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .subscriptionCreatedDateTime)
        subscriptionCreatedDateTime = subscriptionCreatedDateTimeDecoded
    }
}

extension DirectoryClientTypes.LogSubscription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LogSubscription(directoryId: \(Swift.String(describing: directoryId)), logGroupName: \(Swift.String(describing: logGroupName)), subscriptionCreatedDateTime: \(Swift.String(describing: subscriptionCreatedDateTime)))"}
}

extension DirectoryClientTypes {
    /// <p>Represents a log subscription, which tracks real-time data from a chosen log group to a
    ///       specified destination.</p>
    public struct LogSubscription: Swift.Equatable {
        /// <p>Identifier (ID) of the directory that you want to associate with the log
        ///       subscription.</p>
        public let directoryId: Swift.String?
        /// <p>The name of the log group.</p>
        public let logGroupName: Swift.String?
        /// <p>The date and time that the log subscription was created.</p>
        public let subscriptionCreatedDateTime: ClientRuntime.Date?

        public init (
            directoryId: Swift.String? = nil,
            logGroupName: Swift.String? = nil,
            subscriptionCreatedDateTime: ClientRuntime.Date? = nil
        )
        {
            self.directoryId = directoryId
            self.logGroupName = logGroupName
            self.subscriptionCreatedDateTime = subscriptionCreatedDateTime
        }
    }

}

extension NoAvailableCertificateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoAvailableCertificateException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension NoAvailableCertificateException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoAvailableCertificateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Client authentication setup could not be completed because at least one valid certificate must be
///       registered in the system.</p>
public struct NoAvailableCertificateException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct NoAvailableCertificateExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension NoAvailableCertificateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension OrganizationsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationsException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension OrganizationsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: OrganizationsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Exception encountered while trying to access your AWS organization.</p>
public struct OrganizationsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct OrganizationsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension OrganizationsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes.OwnerDirectoryDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case directoryId = "DirectoryId"
        case dnsIpAddrs = "DnsIpAddrs"
        case radiusSettings = "RadiusSettings"
        case radiusStatus = "RadiusStatus"
        case vpcSettings = "VpcSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let dnsIpAddrs = dnsIpAddrs {
            var dnsIpAddrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIpAddrs)
            for dnsipaddrs0 in dnsIpAddrs {
                try dnsIpAddrsContainer.encode(dnsipaddrs0)
            }
        }
        if let radiusSettings = radiusSettings {
            try encodeContainer.encode(radiusSettings, forKey: .radiusSettings)
        }
        if let radiusStatus = radiusStatus {
            try encodeContainer.encode(radiusStatus.rawValue, forKey: .radiusStatus)
        }
        if let vpcSettings = vpcSettings {
            try encodeContainer.encode(vpcSettings, forKey: .vpcSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let dnsIpAddrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIpAddrs)
        var dnsIpAddrsDecoded0:[Swift.String]? = nil
        if let dnsIpAddrsContainer = dnsIpAddrsContainer {
            dnsIpAddrsDecoded0 = [Swift.String]()
            for string0 in dnsIpAddrsContainer {
                if let string0 = string0 {
                    dnsIpAddrsDecoded0?.append(string0)
                }
            }
        }
        dnsIpAddrs = dnsIpAddrsDecoded0
        let vpcSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryVpcSettingsDescription.self, forKey: .vpcSettings)
        vpcSettings = vpcSettingsDecoded
        let radiusSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RadiusSettings.self, forKey: .radiusSettings)
        radiusSettings = radiusSettingsDecoded
        let radiusStatusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RadiusStatus.self, forKey: .radiusStatus)
        radiusStatus = radiusStatusDecoded
    }
}

extension DirectoryClientTypes.OwnerDirectoryDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OwnerDirectoryDescription(accountId: \(Swift.String(describing: accountId)), directoryId: \(Swift.String(describing: directoryId)), dnsIpAddrs: \(Swift.String(describing: dnsIpAddrs)), radiusSettings: \(Swift.String(describing: radiusSettings)), radiusStatus: \(Swift.String(describing: radiusStatus)), vpcSettings: \(Swift.String(describing: vpcSettings)))"}
}

extension DirectoryClientTypes {
    /// <p>Describes the directory owner account details that have been shared to the directory
    ///       consumer account.</p>
    public struct OwnerDirectoryDescription: Swift.Equatable {
        /// <p>Identifier of the directory owner account.</p>
        public let accountId: Swift.String?
        /// <p>Identifier of the AWS Managed Microsoft AD directory in the directory owner
        ///       account.</p>
        public let directoryId: Swift.String?
        /// <p>IP address of the directory’s domain controllers.</p>
        public let dnsIpAddrs: [Swift.String]?
        /// <p>A <a>RadiusSettings</a> object that contains information about the RADIUS
        ///       server.</p>
        public let radiusSettings: DirectoryClientTypes.RadiusSettings?
        /// <p>Information about the status of the RADIUS server.</p>
        public let radiusStatus: DirectoryClientTypes.RadiusStatus?
        /// <p>Information about the VPC settings for the directory.</p>
        public let vpcSettings: DirectoryClientTypes.DirectoryVpcSettingsDescription?

        public init (
            accountId: Swift.String? = nil,
            directoryId: Swift.String? = nil,
            dnsIpAddrs: [Swift.String]? = nil,
            radiusSettings: DirectoryClientTypes.RadiusSettings? = nil,
            radiusStatus: DirectoryClientTypes.RadiusStatus? = nil,
            vpcSettings: DirectoryClientTypes.DirectoryVpcSettingsDescription? = nil
        )
        {
            self.accountId = accountId
            self.directoryId = directoryId
            self.dnsIpAddrs = dnsIpAddrs
            self.radiusSettings = radiusSettings
            self.radiusStatus = radiusStatus
            self.vpcSettings = vpcSettings
        }
    }

}

extension DirectoryClientTypes {
    public enum RadiusAuthenticationProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case chap
        case mschapv1
        case mschapv2
        case pap
        case sdkUnknown(Swift.String)

        public static var allCases: [RadiusAuthenticationProtocol] {
            return [
                .chap,
                .mschapv1,
                .mschapv2,
                .pap,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .chap: return "CHAP"
            case .mschapv1: return "MS-CHAPv1"
            case .mschapv2: return "MS-CHAPv2"
            case .pap: return "PAP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RadiusAuthenticationProtocol(rawValue: rawValue) ?? RadiusAuthenticationProtocol.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes.RadiusSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authenticationProtocol = "AuthenticationProtocol"
        case displayLabel = "DisplayLabel"
        case radiusPort = "RadiusPort"
        case radiusRetries = "RadiusRetries"
        case radiusServers = "RadiusServers"
        case radiusTimeout = "RadiusTimeout"
        case sharedSecret = "SharedSecret"
        case useSameUsername = "UseSameUsername"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authenticationProtocol = authenticationProtocol {
            try encodeContainer.encode(authenticationProtocol.rawValue, forKey: .authenticationProtocol)
        }
        if let displayLabel = displayLabel {
            try encodeContainer.encode(displayLabel, forKey: .displayLabel)
        }
        if radiusPort != 0 {
            try encodeContainer.encode(radiusPort, forKey: .radiusPort)
        }
        if radiusRetries != 0 {
            try encodeContainer.encode(radiusRetries, forKey: .radiusRetries)
        }
        if let radiusServers = radiusServers {
            var radiusServersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .radiusServers)
            for servers0 in radiusServers {
                try radiusServersContainer.encode(servers0)
            }
        }
        if radiusTimeout != 0 {
            try encodeContainer.encode(radiusTimeout, forKey: .radiusTimeout)
        }
        if let sharedSecret = sharedSecret {
            try encodeContainer.encode(sharedSecret, forKey: .sharedSecret)
        }
        if useSameUsername != false {
            try encodeContainer.encode(useSameUsername, forKey: .useSameUsername)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let radiusServersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .radiusServers)
        var radiusServersDecoded0:[Swift.String]? = nil
        if let radiusServersContainer = radiusServersContainer {
            radiusServersDecoded0 = [Swift.String]()
            for string0 in radiusServersContainer {
                if let string0 = string0 {
                    radiusServersDecoded0?.append(string0)
                }
            }
        }
        radiusServers = radiusServersDecoded0
        let radiusPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .radiusPort)
        radiusPort = radiusPortDecoded
        let radiusTimeoutDecoded = try containerValues.decode(Swift.Int.self, forKey: .radiusTimeout)
        radiusTimeout = radiusTimeoutDecoded
        let radiusRetriesDecoded = try containerValues.decode(Swift.Int.self, forKey: .radiusRetries)
        radiusRetries = radiusRetriesDecoded
        let sharedSecretDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sharedSecret)
        sharedSecret = sharedSecretDecoded
        let authenticationProtocolDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RadiusAuthenticationProtocol.self, forKey: .authenticationProtocol)
        authenticationProtocol = authenticationProtocolDecoded
        let displayLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .displayLabel)
        displayLabel = displayLabelDecoded
        let useSameUsernameDecoded = try containerValues.decode(Swift.Bool.self, forKey: .useSameUsername)
        useSameUsername = useSameUsernameDecoded
    }
}

extension DirectoryClientTypes.RadiusSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RadiusSettings(authenticationProtocol: \(Swift.String(describing: authenticationProtocol)), displayLabel: \(Swift.String(describing: displayLabel)), radiusPort: \(Swift.String(describing: radiusPort)), radiusRetries: \(Swift.String(describing: radiusRetries)), radiusServers: \(Swift.String(describing: radiusServers)), radiusTimeout: \(Swift.String(describing: radiusTimeout)), sharedSecret: \(Swift.String(describing: sharedSecret)), useSameUsername: \(Swift.String(describing: useSameUsername)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains information about a Remote Authentication Dial In User Service (RADIUS) server.</p>
    public struct RadiusSettings: Swift.Equatable {
        /// <p>The protocol specified for your RADIUS endpoints.</p>
        public let authenticationProtocol: DirectoryClientTypes.RadiusAuthenticationProtocol?
        /// <p>Not currently used.</p>
        public let displayLabel: Swift.String?
        /// <p>The port that your RADIUS server is using for communications. Your on-premises network must allow inbound traffic over this port from the AWS Directory Service servers.</p>
        public let radiusPort: Swift.Int
        /// <p>The maximum number of times that communication with the RADIUS server is attempted.</p>
        public let radiusRetries: Swift.Int
        /// <p>An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.</p>
        public let radiusServers: [Swift.String]?
        /// <p>The amount of time, in seconds, to wait for the RADIUS server to respond.</p>
        public let radiusTimeout: Swift.Int
        /// <p>Required for enabling RADIUS on the directory.</p>
        public let sharedSecret: Swift.String?
        /// <p>Not currently used.</p>
        public let useSameUsername: Swift.Bool

        public init (
            authenticationProtocol: DirectoryClientTypes.RadiusAuthenticationProtocol? = nil,
            displayLabel: Swift.String? = nil,
            radiusPort: Swift.Int = 0,
            radiusRetries: Swift.Int = 0,
            radiusServers: [Swift.String]? = nil,
            radiusTimeout: Swift.Int = 0,
            sharedSecret: Swift.String? = nil,
            useSameUsername: Swift.Bool = false
        )
        {
            self.authenticationProtocol = authenticationProtocol
            self.displayLabel = displayLabel
            self.radiusPort = radiusPort
            self.radiusRetries = radiusRetries
            self.radiusServers = radiusServers
            self.radiusTimeout = radiusTimeout
            self.sharedSecret = sharedSecret
            self.useSameUsername = useSameUsername
        }
    }

}

extension DirectoryClientTypes {
    public enum RadiusStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case creating
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [RadiusStatus] {
            return [
                .completed,
                .creating,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .creating: return "Creating"
            case .failed: return "Failed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RadiusStatus(rawValue: rawValue) ?? RadiusStatus.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes.RegionDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredNumberOfDomainControllers = "DesiredNumberOfDomainControllers"
        case directoryId = "DirectoryId"
        case lastUpdatedDateTime = "LastUpdatedDateTime"
        case launchTime = "LaunchTime"
        case regionName = "RegionName"
        case regionType = "RegionType"
        case status = "Status"
        case statusLastUpdatedDateTime = "StatusLastUpdatedDateTime"
        case vpcSettings = "VpcSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if desiredNumberOfDomainControllers != 0 {
            try encodeContainer.encode(desiredNumberOfDomainControllers, forKey: .desiredNumberOfDomainControllers)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let lastUpdatedDateTime = lastUpdatedDateTime {
            try encodeContainer.encode(lastUpdatedDateTime.timeIntervalSince1970, forKey: .lastUpdatedDateTime)
        }
        if let launchTime = launchTime {
            try encodeContainer.encode(launchTime.timeIntervalSince1970, forKey: .launchTime)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let regionType = regionType {
            try encodeContainer.encode(regionType.rawValue, forKey: .regionType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusLastUpdatedDateTime = statusLastUpdatedDateTime {
            try encodeContainer.encode(statusLastUpdatedDateTime.timeIntervalSince1970, forKey: .statusLastUpdatedDateTime)
        }
        if let vpcSettings = vpcSettings {
            try encodeContainer.encode(vpcSettings, forKey: .vpcSettings)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let regionTypeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RegionType.self, forKey: .regionType)
        regionType = regionTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryStage.self, forKey: .status)
        status = statusDecoded
        let vpcSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.DirectoryVpcSettings.self, forKey: .vpcSettings)
        vpcSettings = vpcSettingsDecoded
        let desiredNumberOfDomainControllersDecoded = try containerValues.decode(Swift.Int.self, forKey: .desiredNumberOfDomainControllers)
        desiredNumberOfDomainControllers = desiredNumberOfDomainControllersDecoded
        let launchTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .launchTime)
        launchTime = launchTimeDecoded
        let statusLastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .statusLastUpdatedDateTime)
        statusLastUpdatedDateTime = statusLastUpdatedDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}

extension DirectoryClientTypes.RegionDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegionDescription(desiredNumberOfDomainControllers: \(Swift.String(describing: desiredNumberOfDomainControllers)), directoryId: \(Swift.String(describing: directoryId)), lastUpdatedDateTime: \(Swift.String(describing: lastUpdatedDateTime)), launchTime: \(Swift.String(describing: launchTime)), regionName: \(Swift.String(describing: regionName)), regionType: \(Swift.String(describing: regionType)), status: \(Swift.String(describing: status)), statusLastUpdatedDateTime: \(Swift.String(describing: statusLastUpdatedDateTime)), vpcSettings: \(Swift.String(describing: vpcSettings)))"}
}

extension DirectoryClientTypes {
    /// <p>The replicated Region information for a directory.</p>
    public struct RegionDescription: Swift.Equatable {
        /// <p>The desired number of domain controllers in the specified Region for the specified
        ///       directory.</p>
        public let desiredNumberOfDomainControllers: Swift.Int
        /// <p>The identifier of the directory.</p>
        public let directoryId: Swift.String?
        /// <p>The date and time that the Region description was last updated.</p>
        public let lastUpdatedDateTime: ClientRuntime.Date?
        /// <p>Specifies when the Region replication began.</p>
        public let launchTime: ClientRuntime.Date?
        /// <p>The name of the Region. For example, <code>us-east-1</code>.</p>
        public let regionName: Swift.String?
        /// <p>Specifies whether the Region is the primary Region or an additional Region.</p>
        public let regionType: DirectoryClientTypes.RegionType?
        /// <p>The status of the replication process for the specified Region.</p>
        public let status: DirectoryClientTypes.DirectoryStage?
        /// <p>The date and time that the Region status was last updated.</p>
        public let statusLastUpdatedDateTime: ClientRuntime.Date?
        /// <p>Contains VPC information for the <a>CreateDirectory</a> or <a>CreateMicrosoftAD</a> operation.</p>
        public let vpcSettings: DirectoryClientTypes.DirectoryVpcSettings?

        public init (
            desiredNumberOfDomainControllers: Swift.Int = 0,
            directoryId: Swift.String? = nil,
            lastUpdatedDateTime: ClientRuntime.Date? = nil,
            launchTime: ClientRuntime.Date? = nil,
            regionName: Swift.String? = nil,
            regionType: DirectoryClientTypes.RegionType? = nil,
            status: DirectoryClientTypes.DirectoryStage? = nil,
            statusLastUpdatedDateTime: ClientRuntime.Date? = nil,
            vpcSettings: DirectoryClientTypes.DirectoryVpcSettings? = nil
        )
        {
            self.desiredNumberOfDomainControllers = desiredNumberOfDomainControllers
            self.directoryId = directoryId
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.launchTime = launchTime
            self.regionName = regionName
            self.regionType = regionType
            self.status = status
            self.statusLastUpdatedDateTime = statusLastUpdatedDateTime
            self.vpcSettings = vpcSettings
        }
    }

}

extension RegionLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegionLimitExceededException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension RegionLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RegionLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You have reached the limit for maximum number of simultaneous Region replications per
///       directory.</p>
public struct RegionLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct RegionLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension RegionLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes {
    public enum RegionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case additional
        case primary
        case sdkUnknown(Swift.String)

        public static var allCases: [RegionType] {
            return [
                .additional,
                .primary,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .additional: return "Additional"
            case .primary: return "Primary"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RegionType(rawValue: rawValue) ?? RegionType.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes.RegionsInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalRegions = "AdditionalRegions"
        case primaryRegion = "PrimaryRegion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let additionalRegions = additionalRegions {
            var additionalRegionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .additionalRegions)
            for additionalregions0 in additionalRegions {
                try additionalRegionsContainer.encode(additionalregions0)
            }
        }
        if let primaryRegion = primaryRegion {
            try encodeContainer.encode(primaryRegion, forKey: .primaryRegion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let primaryRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .primaryRegion)
        primaryRegion = primaryRegionDecoded
        let additionalRegionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .additionalRegions)
        var additionalRegionsDecoded0:[Swift.String]? = nil
        if let additionalRegionsContainer = additionalRegionsContainer {
            additionalRegionsDecoded0 = [Swift.String]()
            for string0 in additionalRegionsContainer {
                if let string0 = string0 {
                    additionalRegionsDecoded0?.append(string0)
                }
            }
        }
        additionalRegions = additionalRegionsDecoded0
    }
}

extension DirectoryClientTypes.RegionsInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegionsInfo(additionalRegions: \(Swift.String(describing: additionalRegions)), primaryRegion: \(Swift.String(describing: primaryRegion)))"}
}

extension DirectoryClientTypes {
    /// <p>Provides information about the Regions that are configured for multi-Region
    ///       replication.</p>
    public struct RegionsInfo: Swift.Equatable {
        /// <p>Lists the Regions where the directory has been replicated, excluding the primary
        ///       Region.</p>
        public let additionalRegions: [Swift.String]?
        /// <p>The Region where the AWS Managed Microsoft AD directory was originally created.</p>
        public let primaryRegion: Swift.String?

        public init (
            additionalRegions: [Swift.String]? = nil,
            primaryRegion: Swift.String? = nil
        )
        {
            self.additionalRegions = additionalRegions
            self.primaryRegion = primaryRegion
        }
    }

}

public struct RegisterCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCertificateOutputError>
}

extension RegisterCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterCertificateInput(certificateData: \(Swift.String(describing: certificateData)), clientCertAuthSettings: \(Swift.String(describing: clientCertAuthSettings)), directoryId: \(Swift.String(describing: directoryId)), type: \(Swift.String(describing: type)))"}
}

extension RegisterCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateData = "CertificateData"
        case clientCertAuthSettings = "ClientCertAuthSettings"
        case directoryId = "DirectoryId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateData = certificateData {
            try encodeContainer.encode(certificateData, forKey: .certificateData)
        }
        if let clientCertAuthSettings = clientCertAuthSettings {
            try encodeContainer.encode(clientCertAuthSettings, forKey: .clientCertAuthSettings)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct RegisterCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCertificateOutputError>
}

public struct RegisterCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterCertificateOutputError>
}

public struct RegisterCertificateInput: Swift.Equatable {
    /// <p>The certificate PEM string that needs to be registered.</p>
    public let certificateData: Swift.String?
    /// <p>A <code>ClientCertAuthSettings</code> object that contains client certificate authentication settings.</p>
    public let clientCertAuthSettings: DirectoryClientTypes.ClientCertAuthSettings?
    /// <p>The identifier of the directory.</p>
    public let directoryId: Swift.String?
    /// <p>The function that the registered certificate performs. Valid values include <code>ClientLDAPS</code> or <code>ClientCertAuth</code>. The default value is <code>ClientLDAPS</code>.</p>
    public let type: DirectoryClientTypes.CertificateType?

    public init (
        certificateData: Swift.String? = nil,
        clientCertAuthSettings: DirectoryClientTypes.ClientCertAuthSettings? = nil,
        directoryId: Swift.String? = nil,
        type: DirectoryClientTypes.CertificateType? = nil
    )
    {
        self.certificateData = certificateData
        self.clientCertAuthSettings = clientCertAuthSettings
        self.directoryId = directoryId
        self.type = type
    }
}

struct RegisterCertificateInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let certificateData: Swift.String?
    public let type: DirectoryClientTypes.CertificateType?
    public let clientCertAuthSettings: DirectoryClientTypes.ClientCertAuthSettings?
}

extension RegisterCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateData = "CertificateData"
        case clientCertAuthSettings = "ClientCertAuthSettings"
        case directoryId = "DirectoryId"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let certificateDataDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateData)
        certificateData = certificateDataDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.CertificateType.self, forKey: .type)
        type = typeDecoded
        let clientCertAuthSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ClientCertAuthSettings.self, forKey: .clientCertAuthSettings)
        clientCertAuthSettings = clientCertAuthSettingsDecoded
    }
}

extension RegisterCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "CertificateAlreadyExistsException" : self = .certificateAlreadyExistsException(try CertificateAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "CertificateLimitExceededException" : self = .certificateLimitExceededException(try CertificateLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidCertificateException" : self = .invalidCertificateException(try InvalidCertificateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterCertificateOutputError: Swift.Error, Swift.Equatable {
    case certificateAlreadyExistsException(CertificateAlreadyExistsException)
    case certificateLimitExceededException(CertificateLimitExceededException)
    case clientException(ClientException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case invalidCertificateException(InvalidCertificateException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterCertificateOutputResponse(certificateId: \(Swift.String(describing: certificateId)))"}
}

extension RegisterCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RegisterCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateId = output.certificateId
        } else {
            self.certificateId = nil
        }
    }
}

public struct RegisterCertificateOutputResponse: Swift.Equatable {
    /// <p>The identifier of the certificate.</p>
    public let certificateId: Swift.String?

    public init (
        certificateId: Swift.String? = nil
    )
    {
        self.certificateId = certificateId
    }
}

struct RegisterCertificateOutputResponseBody: Swift.Equatable {
    public let certificateId: Swift.String?
}

extension RegisterCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateId = "CertificateId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateId)
        certificateId = certificateIdDecoded
    }
}

public struct RegisterEventTopicInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterEventTopicInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterEventTopicInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterEventTopicOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterEventTopicInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterEventTopicOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterEventTopicOutputError>
}

extension RegisterEventTopicInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterEventTopicInput(directoryId: \(Swift.String(describing: directoryId)), topicName: \(Swift.String(describing: topicName)))"}
}

extension RegisterEventTopicInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let topicName = topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }
}

public struct RegisterEventTopicInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterEventTopicInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterEventTopicInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterEventTopicOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterEventTopicInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterEventTopicOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterEventTopicOutputError>
}

public struct RegisterEventTopicInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RegisterEventTopicInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RegisterEventTopicInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RegisterEventTopicOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RegisterEventTopicInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RegisterEventTopicOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RegisterEventTopicOutputError>
}

/// <p>Registers a new event topic.</p>
public struct RegisterEventTopicInput: Swift.Equatable {
    /// <p>The Directory ID that will publish status messages to the SNS topic.</p>
    public let directoryId: Swift.String?
    /// <p>The SNS topic name to which the directory will publish status messages. This SNS topic must be in the same region as the specified Directory ID.</p>
    public let topicName: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        topicName: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.topicName = topicName
    }
}

struct RegisterEventTopicInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let topicName: Swift.String?
}

extension RegisterEventTopicInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case topicName = "TopicName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
    }
}

extension RegisterEventTopicOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RegisterEventTopicOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RegisterEventTopicOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RegisterEventTopicOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterEventTopicOutputResponse()"}
}

extension RegisterEventTopicOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The result of a RegisterEventTopic request.</p>
public struct RegisterEventTopicOutputResponse: Swift.Equatable {

    public init() {}
}

struct RegisterEventTopicOutputResponseBody: Swift.Equatable {
}

extension RegisterEventTopicOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct RejectSharedDirectoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectSharedDirectoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RejectSharedDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectSharedDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RejectSharedDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RejectSharedDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectSharedDirectoryOutputError>
}

extension RejectSharedDirectoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RejectSharedDirectoryInput(sharedDirectoryId: \(Swift.String(describing: sharedDirectoryId)))"}
}

extension RejectSharedDirectoryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sharedDirectoryId = "SharedDirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sharedDirectoryId = sharedDirectoryId {
            try encodeContainer.encode(sharedDirectoryId, forKey: .sharedDirectoryId)
        }
    }
}

public struct RejectSharedDirectoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectSharedDirectoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RejectSharedDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectSharedDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RejectSharedDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RejectSharedDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectSharedDirectoryOutputError>
}

public struct RejectSharedDirectoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RejectSharedDirectoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RejectSharedDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RejectSharedDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RejectSharedDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RejectSharedDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RejectSharedDirectoryOutputError>
}

public struct RejectSharedDirectoryInput: Swift.Equatable {
    /// <p>Identifier of the shared directory in the directory consumer account. This identifier is
    ///       different for each directory owner account.</p>
    public let sharedDirectoryId: Swift.String?

    public init (
        sharedDirectoryId: Swift.String? = nil
    )
    {
        self.sharedDirectoryId = sharedDirectoryId
    }
}

struct RejectSharedDirectoryInputBody: Swift.Equatable {
    public let sharedDirectoryId: Swift.String?
}

extension RejectSharedDirectoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sharedDirectoryId = "SharedDirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sharedDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sharedDirectoryId)
        sharedDirectoryId = sharedDirectoryIdDecoded
    }
}

extension RejectSharedDirectoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RejectSharedDirectoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryAlreadySharedException" : self = .directoryAlreadySharedException(try DirectoryAlreadySharedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RejectSharedDirectoryOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryAlreadySharedException(DirectoryAlreadySharedException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RejectSharedDirectoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RejectSharedDirectoryOutputResponse(sharedDirectoryId: \(Swift.String(describing: sharedDirectoryId)))"}
}

extension RejectSharedDirectoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RejectSharedDirectoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sharedDirectoryId = output.sharedDirectoryId
        } else {
            self.sharedDirectoryId = nil
        }
    }
}

public struct RejectSharedDirectoryOutputResponse: Swift.Equatable {
    /// <p>Identifier of the shared directory in the directory consumer account.</p>
    public let sharedDirectoryId: Swift.String?

    public init (
        sharedDirectoryId: Swift.String? = nil
    )
    {
        self.sharedDirectoryId = sharedDirectoryId
    }
}

struct RejectSharedDirectoryOutputResponseBody: Swift.Equatable {
    public let sharedDirectoryId: Swift.String?
}

extension RejectSharedDirectoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sharedDirectoryId = "SharedDirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sharedDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sharedDirectoryId)
        sharedDirectoryId = sharedDirectoryIdDecoded
    }
}

public struct RemoveIpRoutesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveIpRoutesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveIpRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveIpRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveIpRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveIpRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveIpRoutesOutputError>
}

extension RemoveIpRoutesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveIpRoutesInput(cidrIps: \(Swift.String(describing: cidrIps)), directoryId: \(Swift.String(describing: directoryId)))"}
}

extension RemoveIpRoutesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrIps = "CidrIps"
        case directoryId = "DirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrIps = cidrIps {
            var cidrIpsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrIps)
            for cidrips0 in cidrIps {
                try cidrIpsContainer.encode(cidrips0)
            }
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
    }
}

public struct RemoveIpRoutesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveIpRoutesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveIpRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveIpRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveIpRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveIpRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveIpRoutesOutputError>
}

public struct RemoveIpRoutesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveIpRoutesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveIpRoutesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveIpRoutesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveIpRoutesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveIpRoutesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveIpRoutesOutputError>
}

public struct RemoveIpRoutesInput: Swift.Equatable {
    /// <p>IP address blocks that you want to remove.</p>
    public let cidrIps: [Swift.String]?
    /// <p>Identifier (ID) of the directory from which you want to remove the IP addresses.</p>
    public let directoryId: Swift.String?

    public init (
        cidrIps: [Swift.String]? = nil,
        directoryId: Swift.String? = nil
    )
    {
        self.cidrIps = cidrIps
        self.directoryId = directoryId
    }
}

struct RemoveIpRoutesInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let cidrIps: [Swift.String]?
}

extension RemoveIpRoutesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrIps = "CidrIps"
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let cidrIpsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cidrIps)
        var cidrIpsDecoded0:[Swift.String]? = nil
        if let cidrIpsContainer = cidrIpsContainer {
            cidrIpsDecoded0 = [Swift.String]()
            for string0 in cidrIpsContainer {
                if let string0 = string0 {
                    cidrIpsDecoded0?.append(string0)
                }
            }
        }
        cidrIps = cidrIpsDecoded0
    }
}

extension RemoveIpRoutesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveIpRoutesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveIpRoutesOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveIpRoutesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveIpRoutesOutputResponse()"}
}

extension RemoveIpRoutesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveIpRoutesOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveIpRoutesOutputResponseBody: Swift.Equatable {
}

extension RemoveIpRoutesOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct RemoveRegionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveRegionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveRegionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveRegionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveRegionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveRegionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveRegionOutputError>
}

extension RemoveRegionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveRegionInput(directoryId: \(Swift.String(describing: directoryId)))"}
}

extension RemoveRegionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
    }
}

public struct RemoveRegionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveRegionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveRegionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveRegionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveRegionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveRegionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveRegionOutputError>
}

public struct RemoveRegionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveRegionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveRegionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveRegionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveRegionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveRegionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveRegionOutputError>
}

public struct RemoveRegionInput: Swift.Equatable {
    /// <p>The identifier of the directory for which you want to remove Region replication.</p>
    public let directoryId: Swift.String?

    public init (
        directoryId: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
    }
}

struct RemoveRegionInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
}

extension RemoveRegionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
    }
}

extension RemoveRegionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveRegionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryDoesNotExistException" : self = .directoryDoesNotExistException(try DirectoryDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveRegionOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case clientException(ClientException)
    case directoryDoesNotExistException(DirectoryDoesNotExistException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveRegionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveRegionOutputResponse()"}
}

extension RemoveRegionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveRegionOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveRegionOutputResponseBody: Swift.Equatable {
}

extension RemoveRegionOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct RemoveTagsFromResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsFromResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsFromResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsFromResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsFromResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsFromResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsFromResourceOutputError>
}

extension RemoveTagsFromResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveTagsFromResourceInput(resourceId: \(Swift.String(describing: resourceId)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension RemoveTagsFromResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeys0 in tagKeys {
                try tagKeysContainer.encode(tagkeys0)
            }
        }
    }
}

public struct RemoveTagsFromResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsFromResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsFromResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsFromResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsFromResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsFromResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsFromResourceOutputError>
}

public struct RemoveTagsFromResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsFromResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsFromResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsFromResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsFromResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsFromResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsFromResourceOutputError>
}

public struct RemoveTagsFromResourceInput: Swift.Equatable {
    /// <p>Identifier (ID) of the directory from which to remove the tag.</p>
    public let resourceId: Swift.String?
    /// <p>The tag key (name) of the tag to be removed.</p>
    public let tagKeys: [Swift.String]?

    public init (
        resourceId: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceId = resourceId
        self.tagKeys = tagKeys
    }
}

struct RemoveTagsFromResourceInputBody: Swift.Equatable {
    public let resourceId: Swift.String?
    public let tagKeys: [Swift.String]?
}

extension RemoveTagsFromResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension RemoveTagsFromResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveTagsFromResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveTagsFromResourceOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsFromResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveTagsFromResourceOutputResponse()"}
}

extension RemoveTagsFromResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveTagsFromResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveTagsFromResourceOutputResponseBody: Swift.Equatable {
}

extension RemoveTagsFromResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DirectoryClientTypes {
    public enum ReplicationScope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case domain
        case sdkUnknown(Swift.String)

        public static var allCases: [ReplicationScope] {
            return [
                .domain,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .domain: return "Domain"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReplicationScope(rawValue: rawValue) ?? ReplicationScope.sdkUnknown(rawValue)
        }
    }
}

public struct ResetUserPasswordInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResetUserPasswordInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResetUserPasswordInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResetUserPasswordOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResetUserPasswordInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResetUserPasswordOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResetUserPasswordOutputError>
}

extension ResetUserPasswordInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResetUserPasswordInput(directoryId: \(Swift.String(describing: directoryId)), newPassword: \(Swift.String(describing: newPassword)), userName: \(Swift.String(describing: userName)))"}
}

extension ResetUserPasswordInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case newPassword = "NewPassword"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let newPassword = newPassword {
            try encodeContainer.encode(newPassword, forKey: .newPassword)
        }
        if let userName = userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }
}

public struct ResetUserPasswordInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResetUserPasswordInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResetUserPasswordInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResetUserPasswordOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResetUserPasswordInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResetUserPasswordOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResetUserPasswordOutputError>
}

public struct ResetUserPasswordInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResetUserPasswordInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResetUserPasswordInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResetUserPasswordOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResetUserPasswordInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResetUserPasswordOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResetUserPasswordOutputError>
}

public struct ResetUserPasswordInput: Swift.Equatable {
    /// <p>Identifier of the AWS Managed Microsoft AD or Simple AD directory in which the user
    ///       resides.</p>
    public let directoryId: Swift.String?
    /// <p>The new password that will be reset.</p>
    public let newPassword: Swift.String?
    /// <p>The user name of the user whose password will be reset.</p>
    public let userName: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        newPassword: Swift.String? = nil,
        userName: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.newPassword = newPassword
        self.userName = userName
    }
}

struct ResetUserPasswordInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let userName: Swift.String?
    public let newPassword: Swift.String?
}

extension ResetUserPasswordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case newPassword = "NewPassword"
        case userName = "UserName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let newPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .newPassword)
        newPassword = newPasswordDecoded
    }
}

extension ResetUserPasswordOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResetUserPasswordOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidPasswordException" : self = .invalidPasswordException(try InvalidPasswordException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UserDoesNotExistException" : self = .userDoesNotExistException(try UserDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResetUserPasswordOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidPasswordException(InvalidPasswordException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case userDoesNotExistException(UserDoesNotExistException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResetUserPasswordOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResetUserPasswordOutputResponse()"}
}

extension ResetUserPasswordOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ResetUserPasswordOutputResponse: Swift.Equatable {

    public init() {}
}

struct ResetUserPasswordOutputResponseBody: Swift.Equatable {
}

extension ResetUserPasswordOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct RestoreFromSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RestoreFromSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RestoreFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RestoreFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RestoreFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RestoreFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RestoreFromSnapshotOutputError>
}

extension RestoreFromSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RestoreFromSnapshotInput(snapshotId: \(Swift.String(describing: snapshotId)))"}
}

extension RestoreFromSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotId = "SnapshotId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let snapshotId = snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
    }
}

public struct RestoreFromSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RestoreFromSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RestoreFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RestoreFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RestoreFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RestoreFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RestoreFromSnapshotOutputError>
}

public struct RestoreFromSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RestoreFromSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RestoreFromSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RestoreFromSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RestoreFromSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RestoreFromSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RestoreFromSnapshotOutputError>
}

/// <p>An object representing the inputs for the <a>RestoreFromSnapshot</a> operation.</p>
public struct RestoreFromSnapshotInput: Swift.Equatable {
    /// <p>The identifier of the snapshot to restore from.</p>
    public let snapshotId: Swift.String?

    public init (
        snapshotId: Swift.String? = nil
    )
    {
        self.snapshotId = snapshotId
    }
}

struct RestoreFromSnapshotInputBody: Swift.Equatable {
    public let snapshotId: Swift.String?
}

extension RestoreFromSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case snapshotId = "SnapshotId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
    }
}

extension RestoreFromSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RestoreFromSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RestoreFromSnapshotOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RestoreFromSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RestoreFromSnapshotOutputResponse()"}
}

extension RestoreFromSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>Contains the results of the <a>RestoreFromSnapshot</a> operation.</p>
public struct RestoreFromSnapshotOutputResponse: Swift.Equatable {

    public init() {}
}

struct RestoreFromSnapshotOutputResponseBody: Swift.Equatable {
}

extension RestoreFromSnapshotOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DirectoryClientTypes.SchemaExtensionInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case directoryId = "DirectoryId"
        case endDateTime = "EndDateTime"
        case schemaExtensionId = "SchemaExtensionId"
        case schemaExtensionStatus = "SchemaExtensionStatus"
        case schemaExtensionStatusReason = "SchemaExtensionStatusReason"
        case startDateTime = "StartDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let endDateTime = endDateTime {
            try encodeContainer.encode(endDateTime.timeIntervalSince1970, forKey: .endDateTime)
        }
        if let schemaExtensionId = schemaExtensionId {
            try encodeContainer.encode(schemaExtensionId, forKey: .schemaExtensionId)
        }
        if let schemaExtensionStatus = schemaExtensionStatus {
            try encodeContainer.encode(schemaExtensionStatus.rawValue, forKey: .schemaExtensionStatus)
        }
        if let schemaExtensionStatusReason = schemaExtensionStatusReason {
            try encodeContainer.encode(schemaExtensionStatusReason, forKey: .schemaExtensionStatusReason)
        }
        if let startDateTime = startDateTime {
            try encodeContainer.encode(startDateTime.timeIntervalSince1970, forKey: .startDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let schemaExtensionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaExtensionId)
        schemaExtensionId = schemaExtensionIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let schemaExtensionStatusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.SchemaExtensionStatus.self, forKey: .schemaExtensionStatus)
        schemaExtensionStatus = schemaExtensionStatusDecoded
        let schemaExtensionStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaExtensionStatusReason)
        schemaExtensionStatusReason = schemaExtensionStatusReasonDecoded
        let startDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startDateTime)
        startDateTime = startDateTimeDecoded
        let endDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endDateTime)
        endDateTime = endDateTimeDecoded
    }
}

extension DirectoryClientTypes.SchemaExtensionInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SchemaExtensionInfo(description: \(Swift.String(describing: description)), directoryId: \(Swift.String(describing: directoryId)), endDateTime: \(Swift.String(describing: endDateTime)), schemaExtensionId: \(Swift.String(describing: schemaExtensionId)), schemaExtensionStatus: \(Swift.String(describing: schemaExtensionStatus)), schemaExtensionStatusReason: \(Swift.String(describing: schemaExtensionStatusReason)), startDateTime: \(Swift.String(describing: startDateTime)))"}
}

extension DirectoryClientTypes {
    /// <p>Information about a schema extension.</p>
    public struct SchemaExtensionInfo: Swift.Equatable {
        /// <p>A description of the schema extension.</p>
        public let description: Swift.String?
        /// <p>The identifier of the directory to which the schema extension is applied.</p>
        public let directoryId: Swift.String?
        /// <p>The date and time that the schema extension was completed.</p>
        public let endDateTime: ClientRuntime.Date?
        /// <p>The identifier of the schema extension.</p>
        public let schemaExtensionId: Swift.String?
        /// <p>The current status of the schema extension.</p>
        public let schemaExtensionStatus: DirectoryClientTypes.SchemaExtensionStatus?
        /// <p>The reason for the <code>SchemaExtensionStatus</code>.</p>
        public let schemaExtensionStatusReason: Swift.String?
        /// <p>The date and time that the schema extension started being applied to the directory.</p>
        public let startDateTime: ClientRuntime.Date?

        public init (
            description: Swift.String? = nil,
            directoryId: Swift.String? = nil,
            endDateTime: ClientRuntime.Date? = nil,
            schemaExtensionId: Swift.String? = nil,
            schemaExtensionStatus: DirectoryClientTypes.SchemaExtensionStatus? = nil,
            schemaExtensionStatusReason: Swift.String? = nil,
            startDateTime: ClientRuntime.Date? = nil
        )
        {
            self.description = description
            self.directoryId = directoryId
            self.endDateTime = endDateTime
            self.schemaExtensionId = schemaExtensionId
            self.schemaExtensionStatus = schemaExtensionStatus
            self.schemaExtensionStatusReason = schemaExtensionStatusReason
            self.startDateTime = startDateTime
        }
    }

}

extension DirectoryClientTypes {
    public enum SchemaExtensionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case cancelInProgress
        case completed
        case creatingSnapshot
        case failed
        case initializing
        case replicating
        case rollbackInProgress
        case updatingSchema
        case sdkUnknown(Swift.String)

        public static var allCases: [SchemaExtensionStatus] {
            return [
                .cancelled,
                .cancelInProgress,
                .completed,
                .creatingSnapshot,
                .failed,
                .initializing,
                .replicating,
                .rollbackInProgress,
                .updatingSchema,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .cancelInProgress: return "CancelInProgress"
            case .completed: return "Completed"
            case .creatingSnapshot: return "CreatingSnapshot"
            case .failed: return "Failed"
            case .initializing: return "Initializing"
            case .replicating: return "Replicating"
            case .rollbackInProgress: return "RollbackInProgress"
            case .updatingSchema: return "UpdatingSchema"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SchemaExtensionStatus(rawValue: rawValue) ?? SchemaExtensionStatus.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes {
    public enum SelectiveAuth: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [SelectiveAuth] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SelectiveAuth(rawValue: rawValue) ?? SelectiveAuth.sdkUnknown(rawValue)
        }
    }
}

extension ServiceException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension ServiceException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An exception has occurred in AWS Directory Service.</p>
public struct ServiceException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct ServiceExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension ServiceExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

public struct ShareDirectoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ShareDirectoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ShareDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ShareDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ShareDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ShareDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ShareDirectoryOutputError>
}

extension ShareDirectoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ShareDirectoryInput(directoryId: \(Swift.String(describing: directoryId)), shareMethod: \(Swift.String(describing: shareMethod)), shareNotes: \(Swift.String(describing: shareNotes)), shareTarget: \(Swift.String(describing: shareTarget)))"}
}

extension ShareDirectoryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case shareMethod = "ShareMethod"
        case shareNotes = "ShareNotes"
        case shareTarget = "ShareTarget"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let shareMethod = shareMethod {
            try encodeContainer.encode(shareMethod.rawValue, forKey: .shareMethod)
        }
        if let shareNotes = shareNotes {
            try encodeContainer.encode(shareNotes, forKey: .shareNotes)
        }
        if let shareTarget = shareTarget {
            try encodeContainer.encode(shareTarget, forKey: .shareTarget)
        }
    }
}

public struct ShareDirectoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ShareDirectoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ShareDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ShareDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ShareDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ShareDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ShareDirectoryOutputError>
}

public struct ShareDirectoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ShareDirectoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ShareDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ShareDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ShareDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ShareDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ShareDirectoryOutputError>
}

public struct ShareDirectoryInput: Swift.Equatable {
    /// <p>Identifier of the AWS Managed Microsoft AD directory that you want to share with other AWS
    ///       accounts.</p>
    public let directoryId: Swift.String?
    /// <p>The method used when sharing a directory to determine whether the directory should be
    ///       shared within your AWS organization (<code>ORGANIZATIONS</code>) or with any AWS account by
    ///       sending a directory sharing request (<code>HANDSHAKE</code>).</p>
    public let shareMethod: DirectoryClientTypes.ShareMethod?
    /// <p>A directory share request that is sent by the directory owner to the directory consumer.
    ///       The request includes a typed message to help the directory consumer administrator determine
    ///       whether to approve or reject the share invitation.</p>
    public let shareNotes: Swift.String?
    /// <p>Identifier for the directory consumer account with whom the directory is to be
    ///       shared.</p>
    public let shareTarget: DirectoryClientTypes.ShareTarget?

    public init (
        directoryId: Swift.String? = nil,
        shareMethod: DirectoryClientTypes.ShareMethod? = nil,
        shareNotes: Swift.String? = nil,
        shareTarget: DirectoryClientTypes.ShareTarget? = nil
    )
    {
        self.directoryId = directoryId
        self.shareMethod = shareMethod
        self.shareNotes = shareNotes
        self.shareTarget = shareTarget
    }
}

struct ShareDirectoryInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let shareNotes: Swift.String?
    public let shareTarget: DirectoryClientTypes.ShareTarget?
    public let shareMethod: DirectoryClientTypes.ShareMethod?
}

extension ShareDirectoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case shareMethod = "ShareMethod"
        case shareNotes = "ShareNotes"
        case shareTarget = "ShareTarget"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let shareNotesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shareNotes)
        shareNotes = shareNotesDecoded
        let shareTargetDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ShareTarget.self, forKey: .shareTarget)
        shareTarget = shareTargetDecoded
        let shareMethodDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ShareMethod.self, forKey: .shareMethod)
        shareMethod = shareMethodDecoded
    }
}

extension ShareDirectoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ShareDirectoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryAlreadySharedException" : self = .directoryAlreadySharedException(try DirectoryAlreadySharedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetException" : self = .invalidTargetException(try InvalidTargetException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationsException" : self = .organizationsException(try OrganizationsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ShareLimitExceededException" : self = .shareLimitExceededException(try ShareLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ShareDirectoryOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case clientException(ClientException)
    case directoryAlreadySharedException(DirectoryAlreadySharedException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case invalidTargetException(InvalidTargetException)
    case organizationsException(OrganizationsException)
    case serviceException(ServiceException)
    case shareLimitExceededException(ShareLimitExceededException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ShareDirectoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ShareDirectoryOutputResponse(sharedDirectoryId: \(Swift.String(describing: sharedDirectoryId)))"}
}

extension ShareDirectoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ShareDirectoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sharedDirectoryId = output.sharedDirectoryId
        } else {
            self.sharedDirectoryId = nil
        }
    }
}

public struct ShareDirectoryOutputResponse: Swift.Equatable {
    /// <p>Identifier of the directory that is stored in the directory consumer account that is
    ///       shared from the specified directory (<code>DirectoryId</code>).</p>
    public let sharedDirectoryId: Swift.String?

    public init (
        sharedDirectoryId: Swift.String? = nil
    )
    {
        self.sharedDirectoryId = sharedDirectoryId
    }
}

struct ShareDirectoryOutputResponseBody: Swift.Equatable {
    public let sharedDirectoryId: Swift.String?
}

extension ShareDirectoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sharedDirectoryId = "SharedDirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sharedDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sharedDirectoryId)
        sharedDirectoryId = sharedDirectoryIdDecoded
    }
}

extension ShareLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ShareLimitExceededException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension ShareLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ShareLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum number of AWS accounts that you can share with this directory has been reached.</p>
public struct ShareLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct ShareLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension ShareLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes {
    public enum ShareMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case handshake
        case organizations
        case sdkUnknown(Swift.String)

        public static var allCases: [ShareMethod] {
            return [
                .handshake,
                .organizations,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .handshake: return "HANDSHAKE"
            case .organizations: return "ORGANIZATIONS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ShareMethod(rawValue: rawValue) ?? ShareMethod.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes {
    public enum ShareStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleted
        case deleting
        case pendingAcceptance
        case rejected
        case rejecting
        case rejectFailed
        case shared
        case shareFailed
        case sharing
        case sdkUnknown(Swift.String)

        public static var allCases: [ShareStatus] {
            return [
                .deleted,
                .deleting,
                .pendingAcceptance,
                .rejected,
                .rejecting,
                .rejectFailed,
                .shared,
                .shareFailed,
                .sharing,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "Deleted"
            case .deleting: return "Deleting"
            case .pendingAcceptance: return "PendingAcceptance"
            case .rejected: return "Rejected"
            case .rejecting: return "Rejecting"
            case .rejectFailed: return "RejectFailed"
            case .shared: return "Shared"
            case .shareFailed: return "ShareFailed"
            case .sharing: return "Sharing"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ShareStatus(rawValue: rawValue) ?? ShareStatus.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes.ShareTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.TargetType.self, forKey: .type)
        type = typeDecoded
    }
}

extension DirectoryClientTypes.ShareTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ShareTarget(id: \(Swift.String(describing: id)), type: \(Swift.String(describing: type)))"}
}

extension DirectoryClientTypes {
    /// <p>Identifier that contains details about the directory consumer account.</p>
    public struct ShareTarget: Swift.Equatable {
        /// <p>Identifier of the directory consumer account.</p>
        public let id: Swift.String?
        /// <p>Type of identifier to be used in the <code>Id</code> field.</p>
        public let type: DirectoryClientTypes.TargetType?

        public init (
            id: Swift.String? = nil,
            type: DirectoryClientTypes.TargetType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }

}

extension DirectoryClientTypes.SharedDirectory: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDateTime = "CreatedDateTime"
        case lastUpdatedDateTime = "LastUpdatedDateTime"
        case ownerAccountId = "OwnerAccountId"
        case ownerDirectoryId = "OwnerDirectoryId"
        case shareMethod = "ShareMethod"
        case shareNotes = "ShareNotes"
        case shareStatus = "ShareStatus"
        case sharedAccountId = "SharedAccountId"
        case sharedDirectoryId = "SharedDirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdDateTime = createdDateTime {
            try encodeContainer.encode(createdDateTime.timeIntervalSince1970, forKey: .createdDateTime)
        }
        if let lastUpdatedDateTime = lastUpdatedDateTime {
            try encodeContainer.encode(lastUpdatedDateTime.timeIntervalSince1970, forKey: .lastUpdatedDateTime)
        }
        if let ownerAccountId = ownerAccountId {
            try encodeContainer.encode(ownerAccountId, forKey: .ownerAccountId)
        }
        if let ownerDirectoryId = ownerDirectoryId {
            try encodeContainer.encode(ownerDirectoryId, forKey: .ownerDirectoryId)
        }
        if let shareMethod = shareMethod {
            try encodeContainer.encode(shareMethod.rawValue, forKey: .shareMethod)
        }
        if let shareNotes = shareNotes {
            try encodeContainer.encode(shareNotes, forKey: .shareNotes)
        }
        if let shareStatus = shareStatus {
            try encodeContainer.encode(shareStatus.rawValue, forKey: .shareStatus)
        }
        if let sharedAccountId = sharedAccountId {
            try encodeContainer.encode(sharedAccountId, forKey: .sharedAccountId)
        }
        if let sharedDirectoryId = sharedDirectoryId {
            try encodeContainer.encode(sharedDirectoryId, forKey: .sharedDirectoryId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAccountId)
        ownerAccountId = ownerAccountIdDecoded
        let ownerDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerDirectoryId)
        ownerDirectoryId = ownerDirectoryIdDecoded
        let shareMethodDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ShareMethod.self, forKey: .shareMethod)
        shareMethod = shareMethodDecoded
        let sharedAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sharedAccountId)
        sharedAccountId = sharedAccountIdDecoded
        let sharedDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sharedDirectoryId)
        sharedDirectoryId = sharedDirectoryIdDecoded
        let shareStatusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.ShareStatus.self, forKey: .shareStatus)
        shareStatus = shareStatusDecoded
        let shareNotesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .shareNotes)
        shareNotes = shareNotesDecoded
        let createdDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDateTime)
        createdDateTime = createdDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
    }
}

extension DirectoryClientTypes.SharedDirectory: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SharedDirectory(createdDateTime: \(Swift.String(describing: createdDateTime)), lastUpdatedDateTime: \(Swift.String(describing: lastUpdatedDateTime)), ownerAccountId: \(Swift.String(describing: ownerAccountId)), ownerDirectoryId: \(Swift.String(describing: ownerDirectoryId)), shareMethod: \(Swift.String(describing: shareMethod)), shareNotes: \(Swift.String(describing: shareNotes)), shareStatus: \(Swift.String(describing: shareStatus)), sharedAccountId: \(Swift.String(describing: sharedAccountId)), sharedDirectoryId: \(Swift.String(describing: sharedDirectoryId)))"}
}

extension DirectoryClientTypes {
    /// <p>Details about the shared directory in the directory owner account for which the share
    ///       request in the directory consumer account has been accepted.</p>
    public struct SharedDirectory: Swift.Equatable {
        /// <p>The date and time that the shared directory was created.</p>
        public let createdDateTime: ClientRuntime.Date?
        /// <p>The date and time that the shared directory was last updated.</p>
        public let lastUpdatedDateTime: ClientRuntime.Date?
        /// <p>Identifier of the directory owner account, which contains the directory that has been
        ///       shared to the consumer account.</p>
        public let ownerAccountId: Swift.String?
        /// <p>Identifier of the directory in the directory owner account. </p>
        public let ownerDirectoryId: Swift.String?
        /// <p>The method used when sharing a directory to determine whether the directory should be
        ///       shared within your AWS organization (<code>ORGANIZATIONS</code>) or with any AWS account by
        ///       sending a shared directory request (<code>HANDSHAKE</code>).</p>
        public let shareMethod: DirectoryClientTypes.ShareMethod?
        /// <p>A directory share request that is sent by the directory owner to the directory consumer.
        ///       The request includes a typed message to help the directory consumer administrator determine
        ///       whether to approve or reject the share invitation.</p>
        public let shareNotes: Swift.String?
        /// <p>Current directory status of the shared AWS Managed Microsoft AD directory.</p>
        public let shareStatus: DirectoryClientTypes.ShareStatus?
        /// <p>Identifier of the directory consumer account that has access to the shared directory
        ///         (<code>OwnerDirectoryId</code>) in the directory owner account.</p>
        public let sharedAccountId: Swift.String?
        /// <p>Identifier of the shared directory in the directory consumer account. This identifier is
        ///       different for each directory owner account.</p>
        public let sharedDirectoryId: Swift.String?

        public init (
            createdDateTime: ClientRuntime.Date? = nil,
            lastUpdatedDateTime: ClientRuntime.Date? = nil,
            ownerAccountId: Swift.String? = nil,
            ownerDirectoryId: Swift.String? = nil,
            shareMethod: DirectoryClientTypes.ShareMethod? = nil,
            shareNotes: Swift.String? = nil,
            shareStatus: DirectoryClientTypes.ShareStatus? = nil,
            sharedAccountId: Swift.String? = nil,
            sharedDirectoryId: Swift.String? = nil
        )
        {
            self.createdDateTime = createdDateTime
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.ownerAccountId = ownerAccountId
            self.ownerDirectoryId = ownerDirectoryId
            self.shareMethod = shareMethod
            self.shareNotes = shareNotes
            self.shareStatus = shareStatus
            self.sharedAccountId = sharedAccountId
            self.sharedDirectoryId = sharedDirectoryId
        }
    }

}

extension DirectoryClientTypes.Snapshot: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case name = "Name"
        case snapshotId = "SnapshotId"
        case startTime = "StartTime"
        case status = "Status"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let snapshotId = snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.SnapshotType.self, forKey: .type)
        type = typeDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.SnapshotStatus.self, forKey: .status)
        status = statusDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
    }
}

extension DirectoryClientTypes.Snapshot: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Snapshot(directoryId: \(Swift.String(describing: directoryId)), name: \(Swift.String(describing: name)), snapshotId: \(Swift.String(describing: snapshotId)), startTime: \(Swift.String(describing: startTime)), status: \(Swift.String(describing: status)), type: \(Swift.String(describing: type)))"}
}

extension DirectoryClientTypes {
    /// <p>Describes a directory snapshot.</p>
    public struct Snapshot: Swift.Equatable {
        /// <p>The directory identifier.</p>
        public let directoryId: Swift.String?
        /// <p>The descriptive name of the snapshot.</p>
        public let name: Swift.String?
        /// <p>The snapshot identifier.</p>
        public let snapshotId: Swift.String?
        /// <p>The date and time that the snapshot was taken.</p>
        public let startTime: ClientRuntime.Date?
        /// <p>The snapshot status.</p>
        public let status: DirectoryClientTypes.SnapshotStatus?
        /// <p>The snapshot type.</p>
        public let type: DirectoryClientTypes.SnapshotType?

        public init (
            directoryId: Swift.String? = nil,
            name: Swift.String? = nil,
            snapshotId: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            status: DirectoryClientTypes.SnapshotStatus? = nil,
            type: DirectoryClientTypes.SnapshotType? = nil
        )
        {
            self.directoryId = directoryId
            self.name = name
            self.snapshotId = snapshotId
            self.startTime = startTime
            self.status = status
            self.type = type
        }
    }

}

extension SnapshotLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnapshotLimitExceededException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension SnapshotLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SnapshotLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum number of manual snapshots for the directory has been reached. You can
///       use the <a>GetSnapshotLimits</a> operation to determine the snapshot limits for a
///       directory.</p>
public struct SnapshotLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct SnapshotLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension SnapshotLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes.SnapshotLimits: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case manualSnapshotsCurrentCount = "ManualSnapshotsCurrentCount"
        case manualSnapshotsLimit = "ManualSnapshotsLimit"
        case manualSnapshotsLimitReached = "ManualSnapshotsLimitReached"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let manualSnapshotsCurrentCount = manualSnapshotsCurrentCount {
            try encodeContainer.encode(manualSnapshotsCurrentCount, forKey: .manualSnapshotsCurrentCount)
        }
        if let manualSnapshotsLimit = manualSnapshotsLimit {
            try encodeContainer.encode(manualSnapshotsLimit, forKey: .manualSnapshotsLimit)
        }
        if manualSnapshotsLimitReached != false {
            try encodeContainer.encode(manualSnapshotsLimitReached, forKey: .manualSnapshotsLimitReached)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let manualSnapshotsLimitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotsLimit)
        manualSnapshotsLimit = manualSnapshotsLimitDecoded
        let manualSnapshotsCurrentCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .manualSnapshotsCurrentCount)
        manualSnapshotsCurrentCount = manualSnapshotsCurrentCountDecoded
        let manualSnapshotsLimitReachedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .manualSnapshotsLimitReached)
        manualSnapshotsLimitReached = manualSnapshotsLimitReachedDecoded
    }
}

extension DirectoryClientTypes.SnapshotLimits: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SnapshotLimits(manualSnapshotsCurrentCount: \(Swift.String(describing: manualSnapshotsCurrentCount)), manualSnapshotsLimit: \(Swift.String(describing: manualSnapshotsLimit)), manualSnapshotsLimitReached: \(Swift.String(describing: manualSnapshotsLimitReached)))"}
}

extension DirectoryClientTypes {
    /// <p>Contains manual snapshot limit information for a directory.</p>
    public struct SnapshotLimits: Swift.Equatable {
        /// <p>The current number of manual snapshots of the directory.</p>
        public let manualSnapshotsCurrentCount: Swift.Int?
        /// <p>The maximum number of manual snapshots allowed.</p>
        public let manualSnapshotsLimit: Swift.Int?
        /// <p>Indicates if the manual snapshot limit has been reached.</p>
        public let manualSnapshotsLimitReached: Swift.Bool

        public init (
            manualSnapshotsCurrentCount: Swift.Int? = nil,
            manualSnapshotsLimit: Swift.Int? = nil,
            manualSnapshotsLimitReached: Swift.Bool = false
        )
        {
            self.manualSnapshotsCurrentCount = manualSnapshotsCurrentCount
            self.manualSnapshotsLimit = manualSnapshotsLimit
            self.manualSnapshotsLimitReached = manualSnapshotsLimitReached
        }
    }

}

extension DirectoryClientTypes {
    public enum SnapshotStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case creating
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [SnapshotStatus] {
            return [
                .completed,
                .creating,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .creating: return "Creating"
            case .failed: return "Failed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SnapshotStatus(rawValue: rawValue) ?? SnapshotStatus.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes {
    public enum SnapshotType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case auto
        case manual
        case sdkUnknown(Swift.String)

        public static var allCases: [SnapshotType] {
            return [
                .auto,
                .manual,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .auto: return "Auto"
            case .manual: return "Manual"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SnapshotType(rawValue: rawValue) ?? SnapshotType.sdkUnknown(rawValue)
        }
    }
}

public struct StartSchemaExtensionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartSchemaExtensionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartSchemaExtensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartSchemaExtensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartSchemaExtensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartSchemaExtensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartSchemaExtensionOutputError>
}

extension StartSchemaExtensionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartSchemaExtensionInput(createSnapshotBeforeSchemaExtension: \(Swift.String(describing: createSnapshotBeforeSchemaExtension)), description: \(Swift.String(describing: description)), directoryId: \(Swift.String(describing: directoryId)), ldifContent: \(Swift.String(describing: ldifContent)))"}
}

extension StartSchemaExtensionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createSnapshotBeforeSchemaExtension = "CreateSnapshotBeforeSchemaExtension"
        case description = "Description"
        case directoryId = "DirectoryId"
        case ldifContent = "LdifContent"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if createSnapshotBeforeSchemaExtension != false {
            try encodeContainer.encode(createSnapshotBeforeSchemaExtension, forKey: .createSnapshotBeforeSchemaExtension)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let ldifContent = ldifContent {
            try encodeContainer.encode(ldifContent, forKey: .ldifContent)
        }
    }
}

public struct StartSchemaExtensionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartSchemaExtensionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartSchemaExtensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartSchemaExtensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartSchemaExtensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartSchemaExtensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartSchemaExtensionOutputError>
}

public struct StartSchemaExtensionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartSchemaExtensionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartSchemaExtensionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartSchemaExtensionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartSchemaExtensionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartSchemaExtensionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartSchemaExtensionOutputError>
}

public struct StartSchemaExtensionInput: Swift.Equatable {
    /// <p>If true, creates a snapshot of the directory before applying the schema extension.</p>
    public let createSnapshotBeforeSchemaExtension: Swift.Bool
    /// <p>A description of the schema extension.</p>
    public let description: Swift.String?
    /// <p>The identifier of the directory for which the schema extension will be applied to.</p>
    public let directoryId: Swift.String?
    /// <p>The LDIF file represented as a string. To construct the LdifContent string, precede each line as it would be formatted in an ldif file with \n. See the example request below for more details. The file size can be no larger than 1MB.</p>
    public let ldifContent: Swift.String?

    public init (
        createSnapshotBeforeSchemaExtension: Swift.Bool = false,
        description: Swift.String? = nil,
        directoryId: Swift.String? = nil,
        ldifContent: Swift.String? = nil
    )
    {
        self.createSnapshotBeforeSchemaExtension = createSnapshotBeforeSchemaExtension
        self.description = description
        self.directoryId = directoryId
        self.ldifContent = ldifContent
    }
}

struct StartSchemaExtensionInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let createSnapshotBeforeSchemaExtension: Swift.Bool
    public let ldifContent: Swift.String?
    public let description: Swift.String?
}

extension StartSchemaExtensionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createSnapshotBeforeSchemaExtension = "CreateSnapshotBeforeSchemaExtension"
        case description = "Description"
        case directoryId = "DirectoryId"
        case ldifContent = "LdifContent"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let createSnapshotBeforeSchemaExtensionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .createSnapshotBeforeSchemaExtension)
        createSnapshotBeforeSchemaExtension = createSnapshotBeforeSchemaExtensionDecoded
        let ldifContentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ldifContent)
        ldifContent = ldifContentDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension StartSchemaExtensionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartSchemaExtensionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "SnapshotLimitExceededException" : self = .snapshotLimitExceededException(try SnapshotLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartSchemaExtensionOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case snapshotLimitExceededException(SnapshotLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartSchemaExtensionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartSchemaExtensionOutputResponse(schemaExtensionId: \(Swift.String(describing: schemaExtensionId)))"}
}

extension StartSchemaExtensionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartSchemaExtensionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.schemaExtensionId = output.schemaExtensionId
        } else {
            self.schemaExtensionId = nil
        }
    }
}

public struct StartSchemaExtensionOutputResponse: Swift.Equatable {
    /// <p>The identifier of the schema extension that will be applied.</p>
    public let schemaExtensionId: Swift.String?

    public init (
        schemaExtensionId: Swift.String? = nil
    )
    {
        self.schemaExtensionId = schemaExtensionId
    }
}

struct StartSchemaExtensionOutputResponseBody: Swift.Equatable {
    public let schemaExtensionId: Swift.String?
}

extension StartSchemaExtensionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case schemaExtensionId = "SchemaExtensionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaExtensionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaExtensionId)
        schemaExtensionId = schemaExtensionIdDecoded
    }
}

extension DirectoryClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension DirectoryClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension DirectoryClientTypes {
    /// <p>Metadata assigned to a directory consisting of a key-value pair.</p>
    public struct Tag: Swift.Equatable {
        /// <p>Required name of the tag. The string value can be Unicode characters and cannot be prefixed with "aws:". The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").</p>
        public let key: Swift.String?
        /// <p>The optional value of the tag. The string value can be Unicode characters. The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagLimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagLimitExceededException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension TagLimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TagLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The maximum allowed number of tags was exceeded.</p>
public struct TagLimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct TagLimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension TagLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

extension DirectoryClientTypes {
    public enum TargetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case account
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetType] {
            return [
                .account,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetType(rawValue: rawValue) ?? TargetType.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes {
    public enum TopicStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleted
        case failed
        case registered
        case topicNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [TopicStatus] {
            return [
                .deleted,
                .failed,
                .registered,
                .topicNotFound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "Deleted"
            case .failed: return "Failed"
            case .registered: return "Registered"
            case .topicNotFound: return "Topic not found"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TopicStatus(rawValue: rawValue) ?? TopicStatus.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes.Trust: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdDateTime = "CreatedDateTime"
        case directoryId = "DirectoryId"
        case lastUpdatedDateTime = "LastUpdatedDateTime"
        case remoteDomainName = "RemoteDomainName"
        case selectiveAuth = "SelectiveAuth"
        case stateLastUpdatedDateTime = "StateLastUpdatedDateTime"
        case trustDirection = "TrustDirection"
        case trustId = "TrustId"
        case trustState = "TrustState"
        case trustStateReason = "TrustStateReason"
        case trustType = "TrustType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdDateTime = createdDateTime {
            try encodeContainer.encode(createdDateTime.timeIntervalSince1970, forKey: .createdDateTime)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let lastUpdatedDateTime = lastUpdatedDateTime {
            try encodeContainer.encode(lastUpdatedDateTime.timeIntervalSince1970, forKey: .lastUpdatedDateTime)
        }
        if let remoteDomainName = remoteDomainName {
            try encodeContainer.encode(remoteDomainName, forKey: .remoteDomainName)
        }
        if let selectiveAuth = selectiveAuth {
            try encodeContainer.encode(selectiveAuth.rawValue, forKey: .selectiveAuth)
        }
        if let stateLastUpdatedDateTime = stateLastUpdatedDateTime {
            try encodeContainer.encode(stateLastUpdatedDateTime.timeIntervalSince1970, forKey: .stateLastUpdatedDateTime)
        }
        if let trustDirection = trustDirection {
            try encodeContainer.encode(trustDirection.rawValue, forKey: .trustDirection)
        }
        if let trustId = trustId {
            try encodeContainer.encode(trustId, forKey: .trustId)
        }
        if let trustState = trustState {
            try encodeContainer.encode(trustState.rawValue, forKey: .trustState)
        }
        if let trustStateReason = trustStateReason {
            try encodeContainer.encode(trustStateReason, forKey: .trustStateReason)
        }
        if let trustType = trustType {
            try encodeContainer.encode(trustType.rawValue, forKey: .trustType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let trustIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustId)
        trustId = trustIdDecoded
        let remoteDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteDomainName)
        remoteDomainName = remoteDomainNameDecoded
        let trustTypeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.TrustType.self, forKey: .trustType)
        trustType = trustTypeDecoded
        let trustDirectionDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.TrustDirection.self, forKey: .trustDirection)
        trustDirection = trustDirectionDecoded
        let trustStateDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.TrustState.self, forKey: .trustState)
        trustState = trustStateDecoded
        let createdDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdDateTime)
        createdDateTime = createdDateTimeDecoded
        let lastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedDateTime)
        lastUpdatedDateTime = lastUpdatedDateTimeDecoded
        let stateLastUpdatedDateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .stateLastUpdatedDateTime)
        stateLastUpdatedDateTime = stateLastUpdatedDateTimeDecoded
        let trustStateReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustStateReason)
        trustStateReason = trustStateReasonDecoded
        let selectiveAuthDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.SelectiveAuth.self, forKey: .selectiveAuth)
        selectiveAuth = selectiveAuthDecoded
    }
}

extension DirectoryClientTypes.Trust: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Trust(createdDateTime: \(Swift.String(describing: createdDateTime)), directoryId: \(Swift.String(describing: directoryId)), lastUpdatedDateTime: \(Swift.String(describing: lastUpdatedDateTime)), remoteDomainName: \(Swift.String(describing: remoteDomainName)), selectiveAuth: \(Swift.String(describing: selectiveAuth)), stateLastUpdatedDateTime: \(Swift.String(describing: stateLastUpdatedDateTime)), trustDirection: \(Swift.String(describing: trustDirection)), trustId: \(Swift.String(describing: trustId)), trustState: \(Swift.String(describing: trustState)), trustStateReason: \(Swift.String(describing: trustStateReason)), trustType: \(Swift.String(describing: trustType)))"}
}

extension DirectoryClientTypes {
    /// <p>Describes a trust relationship between an AWS Managed Microsoft AD directory and an external domain.</p>
    public struct Trust: Swift.Equatable {
        /// <p>The date and time that the trust relationship was created.</p>
        public let createdDateTime: ClientRuntime.Date?
        /// <p>The Directory ID of the AWS directory involved in the trust relationship.</p>
        public let directoryId: Swift.String?
        /// <p>The date and time that the trust relationship was last updated.</p>
        public let lastUpdatedDateTime: ClientRuntime.Date?
        /// <p>The Fully Qualified Domain Name (FQDN) of the external domain involved in the trust relationship.</p>
        public let remoteDomainName: Swift.String?
        /// <p>Current state of selective authentication for the trust.</p>
        public let selectiveAuth: DirectoryClientTypes.SelectiveAuth?
        /// <p>The date and time that the TrustState was last updated.</p>
        public let stateLastUpdatedDateTime: ClientRuntime.Date?
        /// <p>The trust relationship direction.</p>
        public let trustDirection: DirectoryClientTypes.TrustDirection?
        /// <p>The unique ID of the trust relationship.</p>
        public let trustId: Swift.String?
        /// <p>The trust relationship state.</p>
        public let trustState: DirectoryClientTypes.TrustState?
        /// <p>The reason for the TrustState.</p>
        public let trustStateReason: Swift.String?
        /// <p>The trust relationship type. <code>Forest</code> is the default.</p>
        public let trustType: DirectoryClientTypes.TrustType?

        public init (
            createdDateTime: ClientRuntime.Date? = nil,
            directoryId: Swift.String? = nil,
            lastUpdatedDateTime: ClientRuntime.Date? = nil,
            remoteDomainName: Swift.String? = nil,
            selectiveAuth: DirectoryClientTypes.SelectiveAuth? = nil,
            stateLastUpdatedDateTime: ClientRuntime.Date? = nil,
            trustDirection: DirectoryClientTypes.TrustDirection? = nil,
            trustId: Swift.String? = nil,
            trustState: DirectoryClientTypes.TrustState? = nil,
            trustStateReason: Swift.String? = nil,
            trustType: DirectoryClientTypes.TrustType? = nil
        )
        {
            self.createdDateTime = createdDateTime
            self.directoryId = directoryId
            self.lastUpdatedDateTime = lastUpdatedDateTime
            self.remoteDomainName = remoteDomainName
            self.selectiveAuth = selectiveAuth
            self.stateLastUpdatedDateTime = stateLastUpdatedDateTime
            self.trustDirection = trustDirection
            self.trustId = trustId
            self.trustState = trustState
            self.trustStateReason = trustStateReason
            self.trustType = trustType
        }
    }

}

extension DirectoryClientTypes {
    public enum TrustDirection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case oneWayIncoming
        case oneWayOutgoing
        case twoWay
        case sdkUnknown(Swift.String)

        public static var allCases: [TrustDirection] {
            return [
                .oneWayIncoming,
                .oneWayOutgoing,
                .twoWay,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .oneWayIncoming: return "One-Way: Incoming"
            case .oneWayOutgoing: return "One-Way: Outgoing"
            case .twoWay: return "Two-Way"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrustDirection(rawValue: rawValue) ?? TrustDirection.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes {
    public enum TrustState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case created
        case creating
        case deleted
        case deleting
        case failed
        case updated
        case updateFailed
        case updating
        case verified
        case verifying
        case verifyFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [TrustState] {
            return [
                .created,
                .creating,
                .deleted,
                .deleting,
                .failed,
                .updated,
                .updateFailed,
                .updating,
                .verified,
                .verifying,
                .verifyFailed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .created: return "Created"
            case .creating: return "Creating"
            case .deleted: return "Deleted"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .updated: return "Updated"
            case .updateFailed: return "UpdateFailed"
            case .updating: return "Updating"
            case .verified: return "Verified"
            case .verifying: return "Verifying"
            case .verifyFailed: return "VerifyFailed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrustState(rawValue: rawValue) ?? TrustState.sdkUnknown(rawValue)
        }
    }
}

extension DirectoryClientTypes {
    public enum TrustType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case external
        case forest
        case sdkUnknown(Swift.String)

        public static var allCases: [TrustType] {
            return [
                .external,
                .forest,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .external: return "External"
            case .forest: return "Forest"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TrustType(rawValue: rawValue) ?? TrustType.sdkUnknown(rawValue)
        }
    }
}

public struct UnshareDirectoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UnshareDirectoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UnshareDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UnshareDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UnshareDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UnshareDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UnshareDirectoryOutputError>
}

extension UnshareDirectoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnshareDirectoryInput(directoryId: \(Swift.String(describing: directoryId)), unshareTarget: \(Swift.String(describing: unshareTarget)))"}
}

extension UnshareDirectoryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case unshareTarget = "UnshareTarget"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let unshareTarget = unshareTarget {
            try encodeContainer.encode(unshareTarget, forKey: .unshareTarget)
        }
    }
}

public struct UnshareDirectoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UnshareDirectoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UnshareDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UnshareDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UnshareDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UnshareDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UnshareDirectoryOutputError>
}

public struct UnshareDirectoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UnshareDirectoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UnshareDirectoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UnshareDirectoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UnshareDirectoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UnshareDirectoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UnshareDirectoryOutputError>
}

public struct UnshareDirectoryInput: Swift.Equatable {
    /// <p>The identifier of the AWS Managed Microsoft AD directory that you want to stop
    ///       sharing.</p>
    public let directoryId: Swift.String?
    /// <p>Identifier for the directory consumer account with whom the directory has to be
    ///       unshared.</p>
    public let unshareTarget: DirectoryClientTypes.UnshareTarget?

    public init (
        directoryId: Swift.String? = nil,
        unshareTarget: DirectoryClientTypes.UnshareTarget? = nil
    )
    {
        self.directoryId = directoryId
        self.unshareTarget = unshareTarget
    }
}

struct UnshareDirectoryInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let unshareTarget: DirectoryClientTypes.UnshareTarget?
}

extension UnshareDirectoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case unshareTarget = "UnshareTarget"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let unshareTargetDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.UnshareTarget.self, forKey: .unshareTarget)
        unshareTarget = unshareTargetDecoded
    }
}

extension UnshareDirectoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UnshareDirectoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryNotSharedException" : self = .directoryNotSharedException(try DirectoryNotSharedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTargetException" : self = .invalidTargetException(try InvalidTargetException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UnshareDirectoryOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryNotSharedException(DirectoryNotSharedException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidTargetException(InvalidTargetException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UnshareDirectoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnshareDirectoryOutputResponse(sharedDirectoryId: \(Swift.String(describing: sharedDirectoryId)))"}
}

extension UnshareDirectoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UnshareDirectoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.sharedDirectoryId = output.sharedDirectoryId
        } else {
            self.sharedDirectoryId = nil
        }
    }
}

public struct UnshareDirectoryOutputResponse: Swift.Equatable {
    /// <p>Identifier of the directory stored in the directory consumer account that is to be
    ///       unshared from the specified directory (<code>DirectoryId</code>).</p>
    public let sharedDirectoryId: Swift.String?

    public init (
        sharedDirectoryId: Swift.String? = nil
    )
    {
        self.sharedDirectoryId = sharedDirectoryId
    }
}

struct UnshareDirectoryOutputResponseBody: Swift.Equatable {
    public let sharedDirectoryId: Swift.String?
}

extension UnshareDirectoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sharedDirectoryId = "SharedDirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sharedDirectoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sharedDirectoryId)
        sharedDirectoryId = sharedDirectoryIdDecoded
    }
}

extension DirectoryClientTypes.UnshareTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let typeDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.TargetType.self, forKey: .type)
        type = typeDecoded
    }
}

extension DirectoryClientTypes.UnshareTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnshareTarget(id: \(Swift.String(describing: id)), type: \(Swift.String(describing: type)))"}
}

extension DirectoryClientTypes {
    /// <p>Identifier that contains details about the directory consumer account with whom the
    ///       directory is being unshared.</p>
    public struct UnshareTarget: Swift.Equatable {
        /// <p>Identifier of the directory consumer account.</p>
        public let id: Swift.String?
        /// <p>Type of identifier to be used in the <i>Id</i> field.</p>
        public let type: DirectoryClientTypes.TargetType?

        public init (
            id: Swift.String? = nil,
            type: DirectoryClientTypes.TargetType? = nil
        )
        {
            self.id = id
            self.type = type
        }
    }

}

extension UnsupportedOperationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UnsupportedOperationException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension UnsupportedOperationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UnsupportedOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The operation is not supported.</p>
public struct UnsupportedOperationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct UnsupportedOperationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension UnsupportedOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

public struct UpdateConditionalForwarderInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConditionalForwarderInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConditionalForwarderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConditionalForwarderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConditionalForwarderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConditionalForwarderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConditionalForwarderOutputError>
}

extension UpdateConditionalForwarderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConditionalForwarderInput(directoryId: \(Swift.String(describing: directoryId)), dnsIpAddrs: \(Swift.String(describing: dnsIpAddrs)), remoteDomainName: \(Swift.String(describing: remoteDomainName)))"}
}

extension UpdateConditionalForwarderInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case dnsIpAddrs = "DnsIpAddrs"
        case remoteDomainName = "RemoteDomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let dnsIpAddrs = dnsIpAddrs {
            var dnsIpAddrsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dnsIpAddrs)
            for dnsipaddrs0 in dnsIpAddrs {
                try dnsIpAddrsContainer.encode(dnsipaddrs0)
            }
        }
        if let remoteDomainName = remoteDomainName {
            try encodeContainer.encode(remoteDomainName, forKey: .remoteDomainName)
        }
    }
}

public struct UpdateConditionalForwarderInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConditionalForwarderInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConditionalForwarderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConditionalForwarderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConditionalForwarderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConditionalForwarderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConditionalForwarderOutputError>
}

public struct UpdateConditionalForwarderInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateConditionalForwarderInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateConditionalForwarderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateConditionalForwarderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateConditionalForwarderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateConditionalForwarderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateConditionalForwarderOutputError>
}

/// <p>Updates a conditional forwarder.</p>
public struct UpdateConditionalForwarderInput: Swift.Equatable {
    /// <p>The directory ID of the AWS directory for which to update the conditional forwarder.</p>
    public let directoryId: Swift.String?
    /// <p>The updated IP addresses of the remote DNS server associated with the conditional forwarder.</p>
    public let dnsIpAddrs: [Swift.String]?
    /// <p>The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship.</p>
    public let remoteDomainName: Swift.String?

    public init (
        directoryId: Swift.String? = nil,
        dnsIpAddrs: [Swift.String]? = nil,
        remoteDomainName: Swift.String? = nil
    )
    {
        self.directoryId = directoryId
        self.dnsIpAddrs = dnsIpAddrs
        self.remoteDomainName = remoteDomainName
    }
}

struct UpdateConditionalForwarderInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let remoteDomainName: Swift.String?
    public let dnsIpAddrs: [Swift.String]?
}

extension UpdateConditionalForwarderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case dnsIpAddrs = "DnsIpAddrs"
        case remoteDomainName = "RemoteDomainName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let remoteDomainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remoteDomainName)
        remoteDomainName = remoteDomainNameDecoded
        let dnsIpAddrsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dnsIpAddrs)
        var dnsIpAddrsDecoded0:[Swift.String]? = nil
        if let dnsIpAddrsContainer = dnsIpAddrsContainer {
            dnsIpAddrsDecoded0 = [Swift.String]()
            for string0 in dnsIpAddrsContainer {
                if let string0 = string0 {
                    dnsIpAddrsDecoded0?.append(string0)
                }
            }
        }
        dnsIpAddrs = dnsIpAddrsDecoded0
    }
}

extension UpdateConditionalForwarderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateConditionalForwarderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateConditionalForwarderOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateConditionalForwarderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateConditionalForwarderOutputResponse()"}
}

extension UpdateConditionalForwarderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>The result of an UpdateConditionalForwarder request.</p>
public struct UpdateConditionalForwarderOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateConditionalForwarderOutputResponseBody: Swift.Equatable {
}

extension UpdateConditionalForwarderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateNumberOfDomainControllersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateNumberOfDomainControllersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateNumberOfDomainControllersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateNumberOfDomainControllersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateNumberOfDomainControllersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateNumberOfDomainControllersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateNumberOfDomainControllersOutputError>
}

extension UpdateNumberOfDomainControllersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateNumberOfDomainControllersInput(desiredNumber: \(Swift.String(describing: desiredNumber)), directoryId: \(Swift.String(describing: directoryId)))"}
}

extension UpdateNumberOfDomainControllersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredNumber = "DesiredNumber"
        case directoryId = "DirectoryId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if desiredNumber != 0 {
            try encodeContainer.encode(desiredNumber, forKey: .desiredNumber)
        }
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
    }
}

public struct UpdateNumberOfDomainControllersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateNumberOfDomainControllersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateNumberOfDomainControllersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateNumberOfDomainControllersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateNumberOfDomainControllersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateNumberOfDomainControllersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateNumberOfDomainControllersOutputError>
}

public struct UpdateNumberOfDomainControllersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateNumberOfDomainControllersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateNumberOfDomainControllersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateNumberOfDomainControllersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateNumberOfDomainControllersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateNumberOfDomainControllersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateNumberOfDomainControllersOutputError>
}

public struct UpdateNumberOfDomainControllersInput: Swift.Equatable {
    /// <p>The number of domain controllers desired in the directory.</p>
    public let desiredNumber: Swift.Int
    /// <p>Identifier of the directory to which the domain controllers will be added or removed.</p>
    public let directoryId: Swift.String?

    public init (
        desiredNumber: Swift.Int = 0,
        directoryId: Swift.String? = nil
    )
    {
        self.desiredNumber = desiredNumber
        self.directoryId = directoryId
    }
}

struct UpdateNumberOfDomainControllersInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let desiredNumber: Swift.Int
}

extension UpdateNumberOfDomainControllersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredNumber = "DesiredNumber"
        case directoryId = "DirectoryId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let desiredNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .desiredNumber)
        desiredNumber = desiredNumberDecoded
    }
}

extension UpdateNumberOfDomainControllersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateNumberOfDomainControllersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DirectoryUnavailableException" : self = .directoryUnavailableException(try DirectoryUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "DomainControllerLimitExceededException" : self = .domainControllerLimitExceededException(try DomainControllerLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateNumberOfDomainControllersOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case directoryUnavailableException(DirectoryUnavailableException)
    case domainControllerLimitExceededException(DomainControllerLimitExceededException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateNumberOfDomainControllersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateNumberOfDomainControllersOutputResponse()"}
}

extension UpdateNumberOfDomainControllersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateNumberOfDomainControllersOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateNumberOfDomainControllersOutputResponseBody: Swift.Equatable {
}

extension UpdateNumberOfDomainControllersOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateRadiusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRadiusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRadiusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRadiusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRadiusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRadiusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRadiusOutputError>
}

extension UpdateRadiusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRadiusInput(directoryId: \(Swift.String(describing: directoryId)), radiusSettings: \(Swift.String(describing: radiusSettings)))"}
}

extension UpdateRadiusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case radiusSettings = "RadiusSettings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let directoryId = directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let radiusSettings = radiusSettings {
            try encodeContainer.encode(radiusSettings, forKey: .radiusSettings)
        }
    }
}

public struct UpdateRadiusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRadiusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRadiusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRadiusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRadiusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRadiusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRadiusOutputError>
}

public struct UpdateRadiusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRadiusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRadiusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRadiusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRadiusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRadiusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRadiusOutputError>
}

/// <p>Contains the inputs for the <a>UpdateRadius</a> operation.</p>
public struct UpdateRadiusInput: Swift.Equatable {
    /// <p>The identifier of the directory for which to update the RADIUS server information.</p>
    public let directoryId: Swift.String?
    /// <p>A <a>RadiusSettings</a> object that contains information about the RADIUS server.</p>
    public let radiusSettings: DirectoryClientTypes.RadiusSettings?

    public init (
        directoryId: Swift.String? = nil,
        radiusSettings: DirectoryClientTypes.RadiusSettings? = nil
    )
    {
        self.directoryId = directoryId
        self.radiusSettings = radiusSettings
    }
}

struct UpdateRadiusInputBody: Swift.Equatable {
    public let directoryId: Swift.String?
    public let radiusSettings: DirectoryClientTypes.RadiusSettings?
}

extension UpdateRadiusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryId = "DirectoryId"
        case radiusSettings = "RadiusSettings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let radiusSettingsDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.RadiusSettings.self, forKey: .radiusSettings)
        radiusSettings = radiusSettingsDecoded
    }
}

extension UpdateRadiusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRadiusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRadiusOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRadiusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRadiusOutputResponse()"}
}

extension UpdateRadiusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// <p>Contains the results of the <a>UpdateRadius</a> operation.</p>
public struct UpdateRadiusOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateRadiusOutputResponseBody: Swift.Equatable {
}

extension UpdateRadiusOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateTrustInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTrustInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTrustOutputError>
}

extension UpdateTrustInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTrustInput(selectiveAuth: \(Swift.String(describing: selectiveAuth)), trustId: \(Swift.String(describing: trustId)))"}
}

extension UpdateTrustInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case selectiveAuth = "SelectiveAuth"
        case trustId = "TrustId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let selectiveAuth = selectiveAuth {
            try encodeContainer.encode(selectiveAuth.rawValue, forKey: .selectiveAuth)
        }
        if let trustId = trustId {
            try encodeContainer.encode(trustId, forKey: .trustId)
        }
    }
}

public struct UpdateTrustInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTrustInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTrustOutputError>
}

public struct UpdateTrustInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateTrustInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateTrustOutputError>
}

public struct UpdateTrustInput: Swift.Equatable {
    /// <p>Updates selective authentication for the trust.</p>
    public let selectiveAuth: DirectoryClientTypes.SelectiveAuth?
    /// <p>Identifier of the trust relationship.</p>
    public let trustId: Swift.String?

    public init (
        selectiveAuth: DirectoryClientTypes.SelectiveAuth? = nil,
        trustId: Swift.String? = nil
    )
    {
        self.selectiveAuth = selectiveAuth
        self.trustId = trustId
    }
}

struct UpdateTrustInputBody: Swift.Equatable {
    public let trustId: Swift.String?
    public let selectiveAuth: DirectoryClientTypes.SelectiveAuth?
}

extension UpdateTrustInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case selectiveAuth = "SelectiveAuth"
        case trustId = "TrustId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustId)
        trustId = trustIdDecoded
        let selectiveAuthDecoded = try containerValues.decodeIfPresent(DirectoryClientTypes.SelectiveAuth.self, forKey: .selectiveAuth)
        selectiveAuth = selectiveAuthDecoded
    }
}

extension UpdateTrustOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateTrustOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateTrustOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateTrustOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateTrustOutputResponse(requestId: \(Swift.String(describing: requestId)), trustId: \(Swift.String(describing: trustId)))"}
}

extension UpdateTrustOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateTrustOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.requestId = output.requestId
            self.trustId = output.trustId
        } else {
            self.requestId = nil
            self.trustId = nil
        }
    }
}

public struct UpdateTrustOutputResponse: Swift.Equatable {
    /// <p>The AWS request identifier.</p>
    public let requestId: Swift.String?
    /// <p>Identifier of the trust relationship.</p>
    public let trustId: Swift.String?

    public init (
        requestId: Swift.String? = nil,
        trustId: Swift.String? = nil
    )
    {
        self.requestId = requestId
        self.trustId = trustId
    }
}

struct UpdateTrustOutputResponseBody: Swift.Equatable {
    public let requestId: Swift.String?
    public let trustId: Swift.String?
}

extension UpdateTrustOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requestId = "RequestId"
        case trustId = "TrustId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let trustIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustId)
        trustId = trustIdDecoded
    }
}

extension UserDoesNotExistException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UserDoesNotExistException(message: \(Swift.String(describing: message)), requestId: \(Swift.String(describing: requestId)))"}
}

extension UserDoesNotExistException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UserDoesNotExistExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.requestId = output.requestId
        } else {
            self.message = nil
            self.requestId = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The user provided a username that does not exist in your directory.</p>
public struct UserDoesNotExistException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// <p>The descriptive message for the exception.</p>
    public var message: Swift.String?
    /// <p>The AWS request identifier.</p>
    public var requestId: Swift.String?

    public init (
        message: Swift.String? = nil,
        requestId: Swift.String? = nil
    )
    {
        self.message = message
        self.requestId = requestId
    }
}

struct UserDoesNotExistExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let requestId: Swift.String?
}

extension UserDoesNotExistExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case requestId = "RequestId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
    }
}

public struct VerifyTrustInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyTrustInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyTrustOutputError>
}

extension VerifyTrustInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyTrustInput(trustId: \(Swift.String(describing: trustId)))"}
}

extension VerifyTrustInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trustId = "TrustId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let trustId = trustId {
            try encodeContainer.encode(trustId, forKey: .trustId)
        }
    }
}

public struct VerifyTrustInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyTrustInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyTrustOutputError>
}

public struct VerifyTrustInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "VerifyTrustInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<VerifyTrustInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<VerifyTrustOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<VerifyTrustInput>
    public typealias MOutput = ClientRuntime.OperationOutput<VerifyTrustOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<VerifyTrustOutputError>
}

/// <p>Initiates the verification of an existing trust relationship between an AWS Managed Microsoft AD directory and an external domain.</p>
public struct VerifyTrustInput: Swift.Equatable {
    /// <p>The unique Trust ID of the trust relationship to verify.</p>
    public let trustId: Swift.String?

    public init (
        trustId: Swift.String? = nil
    )
    {
        self.trustId = trustId
    }
}

struct VerifyTrustInputBody: Swift.Equatable {
    public let trustId: Swift.String?
}

extension VerifyTrustInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trustId = "TrustId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustId)
        trustId = trustIdDecoded
    }
}

extension VerifyTrustOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension VerifyTrustOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ClientException" : self = .clientException(try ClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "EntityDoesNotExistException" : self = .entityDoesNotExistException(try EntityDoesNotExistException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceException" : self = .serviceException(try ServiceException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnsupportedOperationException" : self = .unsupportedOperationException(try UnsupportedOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum VerifyTrustOutputError: Swift.Error, Swift.Equatable {
    case clientException(ClientException)
    case entityDoesNotExistException(EntityDoesNotExistException)
    case invalidParameterException(InvalidParameterException)
    case serviceException(ServiceException)
    case unsupportedOperationException(UnsupportedOperationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension VerifyTrustOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VerifyTrustOutputResponse(trustId: \(Swift.String(describing: trustId)))"}
}

extension VerifyTrustOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: VerifyTrustOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.trustId = output.trustId
        } else {
            self.trustId = nil
        }
    }
}

/// <p>Result of a VerifyTrust request.</p>
public struct VerifyTrustOutputResponse: Swift.Equatable {
    /// <p>The unique Trust ID of the trust relationship that was verified.</p>
    public let trustId: Swift.String?

    public init (
        trustId: Swift.String? = nil
    )
    {
        self.trustId = trustId
    }
}

struct VerifyTrustOutputResponseBody: Swift.Equatable {
    public let trustId: Swift.String?
}

extension VerifyTrustOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case trustId = "TrustId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let trustIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trustId)
        trustId = trustIdDecoded
    }
}
