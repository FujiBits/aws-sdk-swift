// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension ConfigClientTypes.AccountAggregationSource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
        case allAwsRegions = "AllAwsRegions"
        case awsRegions = "AwsRegions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountaggregationsourceaccountlist0 in accountIds {
                try accountIdsContainer.encode(accountaggregationsourceaccountlist0)
            }
        }
        if allAwsRegions != false {
            try encodeContainer.encode(allAwsRegions, forKey: .allAwsRegions)
        }
        if let awsRegions = awsRegions {
            var awsRegionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .awsRegions)
            for aggregatorregionlist0 in awsRegions {
                try awsRegionsContainer.encode(aggregatorregionlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let allAwsRegionsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allAwsRegions)
        allAwsRegions = allAwsRegionsDecoded
        let awsRegionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .awsRegions)
        var awsRegionsDecoded0:[Swift.String]? = nil
        if let awsRegionsContainer = awsRegionsContainer {
            awsRegionsDecoded0 = [Swift.String]()
            for string0 in awsRegionsContainer {
                if let string0 = string0 {
                    awsRegionsDecoded0?.append(string0)
                }
            }
        }
        awsRegions = awsRegionsDecoded0
    }
}

extension ConfigClientTypes.AccountAggregationSource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountAggregationSource(accountIds: \(Swift.String(describing: accountIds)), allAwsRegions: \(Swift.String(describing: allAwsRegions)), awsRegions: \(Swift.String(describing: awsRegions)))"}
}

extension ConfigClientTypes {
    /// A collection of accounts and regions.
    public struct AccountAggregationSource: Swift.Equatable {
        /// The 12-digit account ID of the account being aggregated.
        /// 		
        /// This member is required.
        public let accountIds: [Swift.String]?
        /// If true, aggregate existing AWS Config regions and future
        /// 			regions.
        public let allAwsRegions: Swift.Bool
        /// The source regions being aggregated.
        public let awsRegions: [Swift.String]?

        public init (
            accountIds: [Swift.String]? = nil,
            allAwsRegions: Swift.Bool = false,
            awsRegions: [Swift.String]? = nil
        )
        {
            self.accountIds = accountIds
            self.allAwsRegions = allAwsRegions
            self.awsRegions = awsRegions
        }
    }

}

extension ConfigClientTypes.AggregateComplianceByConfigRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case awsRegion = "AwsRegion"
        case compliance = "Compliance"
        case configRuleName = "ConfigRuleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
        if let compliance = compliance {
            try encodeContainer.encode(compliance, forKey: .compliance)
        }
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let complianceDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.Compliance.self, forKey: .compliance)
        compliance = complianceDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
    }
}

extension ConfigClientTypes.AggregateComplianceByConfigRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregateComplianceByConfigRule(accountId: \(Swift.String(describing: accountId)), awsRegion: \(Swift.String(describing: awsRegion)), compliance: \(Swift.String(describing: compliance)), configRuleName: \(Swift.String(describing: configRuleName)))"}
}

extension ConfigClientTypes {
    /// Indicates whether an AWS Config rule is compliant based on
    /// 			account ID, region, compliance, and rule name.
    /// 		       A rule is compliant if all of the resources that the rule
    /// 			evaluated comply with it. It is noncompliant if any of these
    /// 			resources do not comply.
    public struct AggregateComplianceByConfigRule: Swift.Equatable {
        /// The 12-digit account ID of the source account.
        public let accountId: Swift.String?
        /// The source region from where the data is aggregated.
        public let awsRegion: Swift.String?
        /// Indicates whether an AWS resource or AWS Config rule is
        /// 			compliant and provides the number of contributors that affect the
        /// 			compliance.
        public let compliance: ConfigClientTypes.Compliance?
        /// The name of the AWS Config rule.
        public let configRuleName: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            awsRegion: Swift.String? = nil,
            compliance: ConfigClientTypes.Compliance? = nil,
            configRuleName: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.awsRegion = awsRegion
            self.compliance = compliance
            self.configRuleName = configRuleName
        }
    }

}

extension ConfigClientTypes.AggregateComplianceByConformancePack: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case awsRegion = "AwsRegion"
        case compliance = "Compliance"
        case conformancePackName = "ConformancePackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
        if let compliance = compliance {
            try encodeContainer.encode(compliance, forKey: .compliance)
        }
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let complianceDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.AggregateConformancePackCompliance.self, forKey: .compliance)
        compliance = complianceDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
    }
}

extension ConfigClientTypes.AggregateComplianceByConformancePack: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregateComplianceByConformancePack(accountId: \(Swift.String(describing: accountId)), awsRegion: \(Swift.String(describing: awsRegion)), compliance: \(Swift.String(describing: compliance)), conformancePackName: \(Swift.String(describing: conformancePackName)))"}
}

extension ConfigClientTypes {
    /// Provides aggregate compliance of the conformance pack. Indicates whether a conformance pack is compliant based on the name of the conformance pack, account ID, and region.
    /// 		       A conformance pack is compliant if all of the rules in a conformance packs are compliant. It is noncompliant if any of the rules are not compliant.
    /// 			The compliance status of a conformance pack is INSUFFICIENT_DATA only if all rules within a conformance pack cannot be evaluated due to insufficient data.
    /// 			If some of the rules in a conformance pack are compliant but the compliance status of other rules in that same conformance pack is INSUFFICIENT_DATA, the conformance pack shows compliant.
    public struct AggregateComplianceByConformancePack: Swift.Equatable {
        /// The 12-digit AWS account ID of the source account.
        public let accountId: Swift.String?
        /// The source AWS Region from where the data is aggregated.
        public let awsRegion: Swift.String?
        /// The compliance status of the conformance pack.
        public let compliance: ConfigClientTypes.AggregateConformancePackCompliance?
        /// The name of the conformance pack.
        public let conformancePackName: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            awsRegion: Swift.String? = nil,
            compliance: ConfigClientTypes.AggregateConformancePackCompliance? = nil,
            conformancePackName: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.awsRegion = awsRegion
            self.compliance = compliance
            self.conformancePackName = conformancePackName
        }
    }

}

extension ConfigClientTypes.AggregateComplianceCount: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceSummary = "ComplianceSummary"
        case groupName = "GroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceSummary = complianceSummary {
            try encodeContainer.encode(complianceSummary, forKey: .complianceSummary)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let complianceSummaryDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceSummary.self, forKey: .complianceSummary)
        complianceSummary = complianceSummaryDecoded
    }
}

extension ConfigClientTypes.AggregateComplianceCount: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregateComplianceCount(complianceSummary: \(Swift.String(describing: complianceSummary)), groupName: \(Swift.String(describing: groupName)))"}
}

extension ConfigClientTypes {
    /// Returns the number of compliant and noncompliant rules for one
    /// 			or more accounts and regions in an aggregator.
    public struct AggregateComplianceCount: Swift.Equatable {
        /// The number of compliant and noncompliant AWS Config
        /// 			rules.
        public let complianceSummary: ConfigClientTypes.ComplianceSummary?
        /// The 12-digit account ID or region based on the GroupByKey
        /// 			value.
        public let groupName: Swift.String?

        public init (
            complianceSummary: ConfigClientTypes.ComplianceSummary? = nil,
            groupName: Swift.String? = nil
        )
        {
            self.complianceSummary = complianceSummary
            self.groupName = groupName
        }
    }

}

extension ConfigClientTypes.AggregateConformancePackCompliance: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceType = "ComplianceType"
        case compliantRuleCount = "CompliantRuleCount"
        case nonCompliantRuleCount = "NonCompliantRuleCount"
        case totalRuleCount = "TotalRuleCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if compliantRuleCount != 0 {
            try encodeContainer.encode(compliantRuleCount, forKey: .compliantRuleCount)
        }
        if nonCompliantRuleCount != 0 {
            try encodeContainer.encode(nonCompliantRuleCount, forKey: .nonCompliantRuleCount)
        }
        if totalRuleCount != 0 {
            try encodeContainer.encode(totalRuleCount, forKey: .totalRuleCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let compliantRuleCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .compliantRuleCount)
        compliantRuleCount = compliantRuleCountDecoded
        let nonCompliantRuleCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .nonCompliantRuleCount)
        nonCompliantRuleCount = nonCompliantRuleCountDecoded
        let totalRuleCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalRuleCount)
        totalRuleCount = totalRuleCountDecoded
    }
}

extension ConfigClientTypes.AggregateConformancePackCompliance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregateConformancePackCompliance(complianceType: \(Swift.String(describing: complianceType)), compliantRuleCount: \(Swift.String(describing: compliantRuleCount)), nonCompliantRuleCount: \(Swift.String(describing: nonCompliantRuleCount)), totalRuleCount: \(Swift.String(describing: totalRuleCount)))"}
}

extension ConfigClientTypes {
    /// Provides the number of compliant and noncompliant rules within a conformance pack.
    /// 			Also provides the compliance status of the conformance pack and the total rule count which includes compliant rules, noncompliant rules, and rules that cannot be evaluated due to insufficient data.
    /// 		
    /// 		       A conformance pack is compliant if all of the rules in a conformance packs are compliant. It is noncompliant if any of the rules are not compliant.
    /// 			The compliance status of a conformance pack is INSUFFICIENT_DATA only if all rules within a conformance pack cannot be evaluated due to insufficient data.
    /// 			If some of the rules in a conformance pack are compliant but the compliance status of other rules in that same conformance pack is INSUFFICIENT_DATA, the conformance pack shows compliant.
    public struct AggregateConformancePackCompliance: Swift.Equatable {
        /// The compliance status of the conformance pack.
        public let complianceType: ConfigClientTypes.ConformancePackComplianceType?
        /// The number of compliant AWS Config Rules.
        public let compliantRuleCount: Swift.Int
        /// The number of noncompliant AWS Config Rules.
        public let nonCompliantRuleCount: Swift.Int
        /// Total number of compliant rules, noncompliant rules, and the rules that do not have any applicable resources to evaluate upon resulting in insufficient data.
        public let totalRuleCount: Swift.Int

        public init (
            complianceType: ConfigClientTypes.ConformancePackComplianceType? = nil,
            compliantRuleCount: Swift.Int = 0,
            nonCompliantRuleCount: Swift.Int = 0,
            totalRuleCount: Swift.Int = 0
        )
        {
            self.complianceType = complianceType
            self.compliantRuleCount = compliantRuleCount
            self.nonCompliantRuleCount = nonCompliantRuleCount
            self.totalRuleCount = totalRuleCount
        }
    }

}

extension ConfigClientTypes.AggregateConformancePackComplianceCount: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compliantConformancePackCount = "CompliantConformancePackCount"
        case nonCompliantConformancePackCount = "NonCompliantConformancePackCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if compliantConformancePackCount != 0 {
            try encodeContainer.encode(compliantConformancePackCount, forKey: .compliantConformancePackCount)
        }
        if nonCompliantConformancePackCount != 0 {
            try encodeContainer.encode(nonCompliantConformancePackCount, forKey: .nonCompliantConformancePackCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compliantConformancePackCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .compliantConformancePackCount)
        compliantConformancePackCount = compliantConformancePackCountDecoded
        let nonCompliantConformancePackCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .nonCompliantConformancePackCount)
        nonCompliantConformancePackCount = nonCompliantConformancePackCountDecoded
    }
}

extension ConfigClientTypes.AggregateConformancePackComplianceCount: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregateConformancePackComplianceCount(compliantConformancePackCount: \(Swift.String(describing: compliantConformancePackCount)), nonCompliantConformancePackCount: \(Swift.String(describing: nonCompliantConformancePackCount)))"}
}

extension ConfigClientTypes {
    /// The number of conformance packs that are compliant and noncompliant.
    public struct AggregateConformancePackComplianceCount: Swift.Equatable {
        /// Number of compliant conformance packs.
        public let compliantConformancePackCount: Swift.Int
        /// Number of noncompliant conformance packs.
        public let nonCompliantConformancePackCount: Swift.Int

        public init (
            compliantConformancePackCount: Swift.Int = 0,
            nonCompliantConformancePackCount: Swift.Int = 0
        )
        {
            self.compliantConformancePackCount = compliantConformancePackCount
            self.nonCompliantConformancePackCount = nonCompliantConformancePackCount
        }
    }

}

extension ConfigClientTypes.AggregateConformancePackComplianceFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case awsRegion = "AwsRegion"
        case complianceType = "ComplianceType"
        case conformancePackName = "ConformancePackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
    }
}

extension ConfigClientTypes.AggregateConformancePackComplianceFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregateConformancePackComplianceFilters(accountId: \(Swift.String(describing: accountId)), awsRegion: \(Swift.String(describing: awsRegion)), complianceType: \(Swift.String(describing: complianceType)), conformancePackName: \(Swift.String(describing: conformancePackName)))"}
}

extension ConfigClientTypes {
    /// Filters the conformance packs based on an account ID, region, compliance type, and the name of the conformance pack.
    public struct AggregateConformancePackComplianceFilters: Swift.Equatable {
        /// The 12-digit AWS account ID of the source account.
        public let accountId: Swift.String?
        /// The source AWS Region from where the data is aggregated.
        public let awsRegion: Swift.String?
        /// The compliance status of the conformance pack.
        public let complianceType: ConfigClientTypes.ConformancePackComplianceType?
        /// The name of the conformance pack.
        public let conformancePackName: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            awsRegion: Swift.String? = nil,
            complianceType: ConfigClientTypes.ConformancePackComplianceType? = nil,
            conformancePackName: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.awsRegion = awsRegion
            self.complianceType = complianceType
            self.conformancePackName = conformancePackName
        }
    }

}

extension ConfigClientTypes.AggregateConformancePackComplianceSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceSummary = "ComplianceSummary"
        case groupName = "GroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceSummary = complianceSummary {
            try encodeContainer.encode(complianceSummary, forKey: .complianceSummary)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceSummaryDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.AggregateConformancePackComplianceCount.self, forKey: .complianceSummary)
        complianceSummary = complianceSummaryDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
    }
}

extension ConfigClientTypes.AggregateConformancePackComplianceSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregateConformancePackComplianceSummary(complianceSummary: \(Swift.String(describing: complianceSummary)), groupName: \(Swift.String(describing: groupName)))"}
}

extension ConfigClientTypes {
    /// Provides a summary of compliance based on either account ID or region.
    public struct AggregateConformancePackComplianceSummary: Swift.Equatable {
        /// Returns an AggregateConformancePackComplianceCount object.
        public let complianceSummary: ConfigClientTypes.AggregateConformancePackComplianceCount?
        /// Groups the result based on AWS Account ID or AWS Region.
        public let groupName: Swift.String?

        public init (
            complianceSummary: ConfigClientTypes.AggregateConformancePackComplianceCount? = nil,
            groupName: Swift.String? = nil
        )
        {
            self.complianceSummary = complianceSummary
            self.groupName = groupName
        }
    }

}

extension ConfigClientTypes.AggregateConformancePackComplianceSummaryFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case awsRegion = "AwsRegion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
    }
}

extension ConfigClientTypes.AggregateConformancePackComplianceSummaryFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregateConformancePackComplianceSummaryFilters(accountId: \(Swift.String(describing: accountId)), awsRegion: \(Swift.String(describing: awsRegion)))"}
}

extension ConfigClientTypes {
    /// Filters the results based on account ID and region.
    public struct AggregateConformancePackComplianceSummaryFilters: Swift.Equatable {
        /// The 12-digit AWS account ID of the source account.
        public let accountId: Swift.String?
        /// The source AWS Region from where the data is aggregated.
        public let awsRegion: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            awsRegion: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.awsRegion = awsRegion
        }
    }

}

extension ConfigClientTypes {
    public enum AggregateConformancePackComplianceSummaryGroupKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case awsRegion
        case sdkUnknown(Swift.String)

        public static var allCases: [AggregateConformancePackComplianceSummaryGroupKey] {
            return [
                .accountId,
                .awsRegion,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "ACCOUNT_ID"
            case .awsRegion: return "AWS_REGION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AggregateConformancePackComplianceSummaryGroupKey(rawValue: rawValue) ?? AggregateConformancePackComplianceSummaryGroupKey.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.AggregateEvaluationResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case annotation = "Annotation"
        case awsRegion = "AwsRegion"
        case complianceType = "ComplianceType"
        case configRuleInvokedTime = "ConfigRuleInvokedTime"
        case evaluationResultIdentifier = "EvaluationResultIdentifier"
        case resultRecordedTime = "ResultRecordedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let annotation = annotation {
            try encodeContainer.encode(annotation, forKey: .annotation)
        }
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleInvokedTime = configRuleInvokedTime {
            try encodeContainer.encode(configRuleInvokedTime.timeIntervalSince1970, forKey: .configRuleInvokedTime)
        }
        if let evaluationResultIdentifier = evaluationResultIdentifier {
            try encodeContainer.encode(evaluationResultIdentifier, forKey: .evaluationResultIdentifier)
        }
        if let resultRecordedTime = resultRecordedTime {
            try encodeContainer.encode(resultRecordedTime.timeIntervalSince1970, forKey: .resultRecordedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationResultIdentifierDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.EvaluationResultIdentifier.self, forKey: .evaluationResultIdentifier)
        evaluationResultIdentifier = evaluationResultIdentifierDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let resultRecordedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .resultRecordedTime)
        resultRecordedTime = resultRecordedTimeDecoded
        let configRuleInvokedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .configRuleInvokedTime)
        configRuleInvokedTime = configRuleInvokedTimeDecoded
        let annotationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .annotation)
        annotation = annotationDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
    }
}

extension ConfigClientTypes.AggregateEvaluationResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregateEvaluationResult(accountId: \(Swift.String(describing: accountId)), annotation: \(Swift.String(describing: annotation)), awsRegion: \(Swift.String(describing: awsRegion)), complianceType: \(Swift.String(describing: complianceType)), configRuleInvokedTime: \(Swift.String(describing: configRuleInvokedTime)), evaluationResultIdentifier: \(Swift.String(describing: evaluationResultIdentifier)), resultRecordedTime: \(Swift.String(describing: resultRecordedTime)))"}
}

extension ConfigClientTypes {
    /// The details of an AWS Config evaluation for an account ID and
    /// 			region in an aggregator. Provides the AWS resource that was
    /// 			evaluated, the compliance of the resource, related time stamps, and
    /// 			supplementary information.
    public struct AggregateEvaluationResult: Swift.Equatable {
        /// The 12-digit account ID of the source account.
        public let accountId: Swift.String?
        /// Supplementary information about how the agrregate evaluation
        /// 			determined the compliance.
        public let annotation: Swift.String?
        /// The source region from where the data is aggregated.
        public let awsRegion: Swift.String?
        /// The resource compliance status.
        /// 		       For the AggregationEvaluationResult data type, AWS
        /// 			Config supports only the COMPLIANT and
        /// 				NON_COMPLIANT. AWS Config does not support the
        /// 				NOT_APPLICABLE and INSUFFICIENT_DATA
        /// 			value.
        public let complianceType: ConfigClientTypes.ComplianceType?
        /// The time when the AWS Config rule evaluated the AWS
        /// 			resource.
        public let configRuleInvokedTime: ClientRuntime.Date?
        /// Uniquely identifies the evaluation result.
        public let evaluationResultIdentifier: ConfigClientTypes.EvaluationResultIdentifier?
        /// The time when AWS Config recorded the aggregate evaluation
        /// 			result.
        public let resultRecordedTime: ClientRuntime.Date?

        public init (
            accountId: Swift.String? = nil,
            annotation: Swift.String? = nil,
            awsRegion: Swift.String? = nil,
            complianceType: ConfigClientTypes.ComplianceType? = nil,
            configRuleInvokedTime: ClientRuntime.Date? = nil,
            evaluationResultIdentifier: ConfigClientTypes.EvaluationResultIdentifier? = nil,
            resultRecordedTime: ClientRuntime.Date? = nil
        )
        {
            self.accountId = accountId
            self.annotation = annotation
            self.awsRegion = awsRegion
            self.complianceType = complianceType
            self.configRuleInvokedTime = configRuleInvokedTime
            self.evaluationResultIdentifier = evaluationResultIdentifier
            self.resultRecordedTime = resultRecordedTime
        }
    }

}

extension ConfigClientTypes.AggregateResourceIdentifier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceName = "ResourceName"
        case resourceType = "ResourceType"
        case sourceAccountId = "SourceAccountId"
        case sourceRegion = "SourceRegion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let sourceAccountId = sourceAccountId {
            try encodeContainer.encode(sourceAccountId, forKey: .sourceAccountId)
        }
        if let sourceRegion = sourceRegion {
            try encodeContainer.encode(sourceRegion, forKey: .sourceRegion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceAccountId)
        sourceAccountId = sourceAccountIdDecoded
        let sourceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceRegion)
        sourceRegion = sourceRegionDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension ConfigClientTypes.AggregateResourceIdentifier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregateResourceIdentifier(resourceId: \(Swift.String(describing: resourceId)), resourceName: \(Swift.String(describing: resourceName)), resourceType: \(Swift.String(describing: resourceType)), sourceAccountId: \(Swift.String(describing: sourceAccountId)), sourceRegion: \(Swift.String(describing: sourceRegion)))"}
}

extension ConfigClientTypes {
    /// The details that identify a resource that is collected by AWS Config aggregator, including the resource type, ID, (if available) the custom resource name, the source account, and source region.
    public struct AggregateResourceIdentifier: Swift.Equatable {
        /// The ID of the AWS resource.
        /// This member is required.
        public let resourceId: Swift.String?
        /// The name of the AWS resource.
        public let resourceName: Swift.String?
        /// The type of the AWS resource.
        /// This member is required.
        public let resourceType: ConfigClientTypes.ResourceType?
        /// The 12-digit account ID of the source account.
        /// This member is required.
        public let sourceAccountId: Swift.String?
        /// The source region where data is aggregated.
        /// This member is required.
        public let sourceRegion: Swift.String?

        public init (
            resourceId: Swift.String? = nil,
            resourceName: Swift.String? = nil,
            resourceType: ConfigClientTypes.ResourceType? = nil,
            sourceAccountId: Swift.String? = nil,
            sourceRegion: Swift.String? = nil
        )
        {
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.sourceAccountId = sourceAccountId
            self.sourceRegion = sourceRegion
        }
    }

}

extension ConfigClientTypes.AggregatedSourceStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsRegion = "AwsRegion"
        case lastErrorCode = "LastErrorCode"
        case lastErrorMessage = "LastErrorMessage"
        case lastUpdateStatus = "LastUpdateStatus"
        case lastUpdateTime = "LastUpdateTime"
        case sourceId = "SourceId"
        case sourceType = "SourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
        if let lastErrorCode = lastErrorCode {
            try encodeContainer.encode(lastErrorCode, forKey: .lastErrorCode)
        }
        if let lastErrorMessage = lastErrorMessage {
            try encodeContainer.encode(lastErrorMessage, forKey: .lastErrorMessage)
        }
        if let lastUpdateStatus = lastUpdateStatus {
            try encodeContainer.encode(lastUpdateStatus.rawValue, forKey: .lastUpdateStatus)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let sourceId = sourceId {
            try encodeContainer.encode(sourceId, forKey: .sourceId)
        }
        if let sourceType = sourceType {
            try encodeContainer.encode(sourceType.rawValue, forKey: .sourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceId)
        sourceId = sourceIdDecoded
        let sourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.AggregatedSourceType.self, forKey: .sourceType)
        sourceType = sourceTypeDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
        let lastUpdateStatusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.AggregatedSourceStatusType.self, forKey: .lastUpdateStatus)
        lastUpdateStatus = lastUpdateStatusDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
        let lastErrorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorCode)
        lastErrorCode = lastErrorCodeDecoded
        let lastErrorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorMessage)
        lastErrorMessage = lastErrorMessageDecoded
    }
}

extension ConfigClientTypes.AggregatedSourceStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregatedSourceStatus(awsRegion: \(Swift.String(describing: awsRegion)), lastErrorCode: \(Swift.String(describing: lastErrorCode)), lastErrorMessage: \(Swift.String(describing: lastErrorMessage)), lastUpdateStatus: \(Swift.String(describing: lastUpdateStatus)), lastUpdateTime: \(Swift.String(describing: lastUpdateTime)), sourceId: \(Swift.String(describing: sourceId)), sourceType: \(Swift.String(describing: sourceType)))"}
}

extension ConfigClientTypes {
    /// The current sync status between the source and the aggregator
    /// 			account.
    public struct AggregatedSourceStatus: Swift.Equatable {
        /// The region authorized to collect aggregated data.
        public let awsRegion: Swift.String?
        /// The error code that AWS Config returned when the source account
        /// 			aggregation last failed.
        public let lastErrorCode: Swift.String?
        /// The message indicating that the source account aggregation
        /// 			failed due to an error.
        public let lastErrorMessage: Swift.String?
        /// Filters the last updated status type.
        /// 		
        ///
        /// 				           Valid value FAILED indicates errors while moving
        /// 					data.
        /// 			
        ///
        /// 				           Valid value SUCCEEDED indicates the data was
        /// 					successfully moved.
        /// 			
        ///
        /// 				           Valid value OUTDATED indicates the data is not the most
        /// 					recent.
        /// 			
        ///
        public let lastUpdateStatus: ConfigClientTypes.AggregatedSourceStatusType?
        /// The time of the last update.
        public let lastUpdateTime: ClientRuntime.Date?
        /// The source account ID or an organization.
        public let sourceId: Swift.String?
        /// The source account or an organization.
        public let sourceType: ConfigClientTypes.AggregatedSourceType?

        public init (
            awsRegion: Swift.String? = nil,
            lastErrorCode: Swift.String? = nil,
            lastErrorMessage: Swift.String? = nil,
            lastUpdateStatus: ConfigClientTypes.AggregatedSourceStatusType? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            sourceId: Swift.String? = nil,
            sourceType: ConfigClientTypes.AggregatedSourceType? = nil
        )
        {
            self.awsRegion = awsRegion
            self.lastErrorCode = lastErrorCode
            self.lastErrorMessage = lastErrorMessage
            self.lastUpdateStatus = lastUpdateStatus
            self.lastUpdateTime = lastUpdateTime
            self.sourceId = sourceId
            self.sourceType = sourceType
        }
    }

}

extension ConfigClientTypes {
    public enum AggregatedSourceStatusType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case outdated
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [AggregatedSourceStatusType] {
            return [
                .failed,
                .outdated,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .outdated: return "OUTDATED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AggregatedSourceStatusType(rawValue: rawValue) ?? AggregatedSourceStatusType.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes {
    public enum AggregatedSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case account
        case organization
        case sdkUnknown(Swift.String)

        public static var allCases: [AggregatedSourceType] {
            return [
                .account,
                .organization,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .account: return "ACCOUNT"
            case .organization: return "ORGANIZATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AggregatedSourceType(rawValue: rawValue) ?? AggregatedSourceType.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.AggregationAuthorization: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregationAuthorizationArn = "AggregationAuthorizationArn"
        case authorizedAccountId = "AuthorizedAccountId"
        case authorizedAwsRegion = "AuthorizedAwsRegion"
        case creationTime = "CreationTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aggregationAuthorizationArn = aggregationAuthorizationArn {
            try encodeContainer.encode(aggregationAuthorizationArn, forKey: .aggregationAuthorizationArn)
        }
        if let authorizedAccountId = authorizedAccountId {
            try encodeContainer.encode(authorizedAccountId, forKey: .authorizedAccountId)
        }
        if let authorizedAwsRegion = authorizedAwsRegion {
            try encodeContainer.encode(authorizedAwsRegion, forKey: .authorizedAwsRegion)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregationAuthorizationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aggregationAuthorizationArn)
        aggregationAuthorizationArn = aggregationAuthorizationArnDecoded
        let authorizedAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizedAccountId)
        authorizedAccountId = authorizedAccountIdDecoded
        let authorizedAwsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizedAwsRegion)
        authorizedAwsRegion = authorizedAwsRegionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension ConfigClientTypes.AggregationAuthorization: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AggregationAuthorization(aggregationAuthorizationArn: \(Swift.String(describing: aggregationAuthorizationArn)), authorizedAccountId: \(Swift.String(describing: authorizedAccountId)), authorizedAwsRegion: \(Swift.String(describing: authorizedAwsRegion)), creationTime: \(Swift.String(describing: creationTime)))"}
}

extension ConfigClientTypes {
    /// An object that represents the authorizations granted to
    /// 			aggregator accounts and regions.
    public struct AggregationAuthorization: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the aggregation
        /// 			object.
        public let aggregationAuthorizationArn: Swift.String?
        /// The 12-digit account ID of the account authorized to aggregate
        /// 			data.
        public let authorizedAccountId: Swift.String?
        /// The region authorized to collect aggregated data.
        public let authorizedAwsRegion: Swift.String?
        /// The time stamp when the aggregation authorization was
        /// 			created.
        public let creationTime: ClientRuntime.Date?

        public init (
            aggregationAuthorizationArn: Swift.String? = nil,
            authorizedAccountId: Swift.String? = nil,
            authorizedAwsRegion: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil
        )
        {
            self.aggregationAuthorizationArn = aggregationAuthorizationArn
            self.authorizedAccountId = authorizedAccountId
            self.authorizedAwsRegion = authorizedAwsRegion
            self.creationTime = creationTime
        }
    }

}

extension ConfigClientTypes.BaseConfigurationItem: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case arn
        case availabilityZone
        case awsRegion
        case configuration
        case configurationItemCaptureTime
        case configurationItemStatus
        case configurationStateId
        case resourceCreationTime
        case resourceId
        case resourceName
        case resourceType
        case supplementaryConfiguration
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let configurationItemCaptureTime = configurationItemCaptureTime {
            try encodeContainer.encode(configurationItemCaptureTime.timeIntervalSince1970, forKey: .configurationItemCaptureTime)
        }
        if let configurationItemStatus = configurationItemStatus {
            try encodeContainer.encode(configurationItemStatus.rawValue, forKey: .configurationItemStatus)
        }
        if let configurationStateId = configurationStateId {
            try encodeContainer.encode(configurationStateId, forKey: .configurationStateId)
        }
        if let resourceCreationTime = resourceCreationTime {
            try encodeContainer.encode(resourceCreationTime.timeIntervalSince1970, forKey: .resourceCreationTime)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let supplementaryConfiguration = supplementaryConfiguration {
            var supplementaryConfigurationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .supplementaryConfiguration)
            for (dictKey0, supplementaryconfiguration0) in supplementaryConfiguration {
                try supplementaryConfigurationContainer.encode(supplementaryconfiguration0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let configurationItemCaptureTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .configurationItemCaptureTime)
        configurationItemCaptureTime = configurationItemCaptureTimeDecoded
        let configurationItemStatusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigurationItemStatus.self, forKey: .configurationItemStatus)
        configurationItemStatus = configurationItemStatusDecoded
        let configurationStateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationStateId)
        configurationStateId = configurationStateIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let resourceCreationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .resourceCreationTime)
        resourceCreationTime = resourceCreationTimeDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let supplementaryConfigurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .supplementaryConfiguration)
        var supplementaryConfigurationDecoded0: [Swift.String:Swift.String]? = nil
        if let supplementaryConfigurationContainer = supplementaryConfigurationContainer {
            supplementaryConfigurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, supplementaryconfigurationvalue0) in supplementaryConfigurationContainer {
                if let supplementaryconfigurationvalue0 = supplementaryconfigurationvalue0 {
                    supplementaryConfigurationDecoded0?[key0] = supplementaryconfigurationvalue0
                }
            }
        }
        supplementaryConfiguration = supplementaryConfigurationDecoded0
    }
}

extension ConfigClientTypes.BaseConfigurationItem: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BaseConfigurationItem(accountId: \(Swift.String(describing: accountId)), arn: \(Swift.String(describing: arn)), availabilityZone: \(Swift.String(describing: availabilityZone)), awsRegion: \(Swift.String(describing: awsRegion)), configuration: \(Swift.String(describing: configuration)), configurationItemCaptureTime: \(Swift.String(describing: configurationItemCaptureTime)), configurationItemStatus: \(Swift.String(describing: configurationItemStatus)), configurationStateId: \(Swift.String(describing: configurationStateId)), resourceCreationTime: \(Swift.String(describing: resourceCreationTime)), resourceId: \(Swift.String(describing: resourceId)), resourceName: \(Swift.String(describing: resourceName)), resourceType: \(Swift.String(describing: resourceType)), supplementaryConfiguration: \(Swift.String(describing: supplementaryConfiguration)), version: \(Swift.String(describing: version)))"}
}

extension ConfigClientTypes {
    /// The detailed configuration of a specified resource.
    public struct BaseConfigurationItem: Swift.Equatable {
        /// The 12-digit AWS account ID associated with the resource.
        public let accountId: Swift.String?
        /// The Amazon Resource Name (ARN) of the resource.
        public let arn: Swift.String?
        /// The Availability Zone associated with the resource.
        public let availabilityZone: Swift.String?
        /// The region where the resource resides.
        public let awsRegion: Swift.String?
        /// The description of the resource configuration.
        public let configuration: Swift.String?
        /// The time when the configuration recording was initiated.
        public let configurationItemCaptureTime: ClientRuntime.Date?
        /// The configuration item status. The valid values are:
        /// 		
        /// 		
        ///
        ///                OK – The resource configuration has been updated
        ///
        ///
        ///                ResourceDiscovered – The resource was newly discovered
        ///
        ///
        ///                ResourceNotRecorded – The resource was discovered but its configuration was not recorded since the recorder excludes the recording of resources of this type
        ///
        ///
        ///                ResourceDeleted – The resource was deleted
        ///
        ///
        ///                ResourceDeletedNotRecorded – The resource was deleted but its configuration was not recorded since the recorder excludes the recording of resources of this type
        ///
        ///
        /// 		
        ///             The CIs do not incur any cost.
        ///
        public let configurationItemStatus: ConfigClientTypes.ConfigurationItemStatus?
        /// An identifier that indicates the ordering of the configuration
        /// 			items of a resource.
        public let configurationStateId: Swift.String?
        /// The time stamp when the resource was created.
        public let resourceCreationTime: ClientRuntime.Date?
        /// The ID of the resource (for example., sg-xxxxxx).
        public let resourceId: Swift.String?
        /// The custom name of the resource, if available.
        public let resourceName: Swift.String?
        /// The type of AWS resource.
        public let resourceType: ConfigClientTypes.ResourceType?
        /// Configuration attributes that AWS Config returns for certain
        /// 			resource types to supplement the information returned for the
        /// 			configuration parameter.
        public let supplementaryConfiguration: [Swift.String:Swift.String]?
        /// The version number of the resource configuration.
        public let version: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            arn: Swift.String? = nil,
            availabilityZone: Swift.String? = nil,
            awsRegion: Swift.String? = nil,
            configuration: Swift.String? = nil,
            configurationItemCaptureTime: ClientRuntime.Date? = nil,
            configurationItemStatus: ConfigClientTypes.ConfigurationItemStatus? = nil,
            configurationStateId: Swift.String? = nil,
            resourceCreationTime: ClientRuntime.Date? = nil,
            resourceId: Swift.String? = nil,
            resourceName: Swift.String? = nil,
            resourceType: ConfigClientTypes.ResourceType? = nil,
            supplementaryConfiguration: [Swift.String:Swift.String]? = nil,
            version: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.arn = arn
            self.availabilityZone = availabilityZone
            self.awsRegion = awsRegion
            self.configuration = configuration
            self.configurationItemCaptureTime = configurationItemCaptureTime
            self.configurationItemStatus = configurationItemStatus
            self.configurationStateId = configurationStateId
            self.resourceCreationTime = resourceCreationTime
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.supplementaryConfiguration = supplementaryConfiguration
            self.version = version
        }
    }

}

public struct BatchGetAggregateResourceConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetAggregateResourceConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetAggregateResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetAggregateResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetAggregateResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetAggregateResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetAggregateResourceConfigOutputError>
}

extension BatchGetAggregateResourceConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetAggregateResourceConfigInput(configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), resourceIdentifiers: \(Swift.String(describing: resourceIdentifiers)))"}
}

extension BatchGetAggregateResourceConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case resourceIdentifiers = "ResourceIdentifiers"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let resourceIdentifiers = resourceIdentifiers {
            var resourceIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIdentifiers)
            for resourceidentifierslist0 in resourceIdentifiers {
                try resourceIdentifiersContainer.encode(resourceidentifierslist0)
            }
        }
    }
}

public struct BatchGetAggregateResourceConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetAggregateResourceConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetAggregateResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetAggregateResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetAggregateResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetAggregateResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetAggregateResourceConfigOutputError>
}

public struct BatchGetAggregateResourceConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetAggregateResourceConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetAggregateResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetAggregateResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetAggregateResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetAggregateResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetAggregateResourceConfigOutputError>
}

public struct BatchGetAggregateResourceConfigInput: Swift.Equatable {
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// A list of aggregate ResourceIdentifiers objects.
    /// This member is required.
    public let resourceIdentifiers: [ConfigClientTypes.AggregateResourceIdentifier]?

    public init (
        configurationAggregatorName: Swift.String? = nil,
        resourceIdentifiers: [ConfigClientTypes.AggregateResourceIdentifier]? = nil
    )
    {
        self.configurationAggregatorName = configurationAggregatorName
        self.resourceIdentifiers = resourceIdentifiers
    }
}

struct BatchGetAggregateResourceConfigInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
    public let resourceIdentifiers: [ConfigClientTypes.AggregateResourceIdentifier]?
}

extension BatchGetAggregateResourceConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case resourceIdentifiers = "ResourceIdentifiers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let resourceIdentifiersContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregateResourceIdentifier?].self, forKey: .resourceIdentifiers)
        var resourceIdentifiersDecoded0:[ConfigClientTypes.AggregateResourceIdentifier]? = nil
        if let resourceIdentifiersContainer = resourceIdentifiersContainer {
            resourceIdentifiersDecoded0 = [ConfigClientTypes.AggregateResourceIdentifier]()
            for structure0 in resourceIdentifiersContainer {
                if let structure0 = structure0 {
                    resourceIdentifiersDecoded0?.append(structure0)
                }
            }
        }
        resourceIdentifiers = resourceIdentifiersDecoded0
    }
}

extension BatchGetAggregateResourceConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetAggregateResourceConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetAggregateResourceConfigOutputError: Swift.Error, Swift.Equatable {
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetAggregateResourceConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetAggregateResourceConfigOutputResponse(baseConfigurationItems: \(Swift.String(describing: baseConfigurationItems)), unprocessedResourceIdentifiers: \(Swift.String(describing: unprocessedResourceIdentifiers)))"}
}

extension BatchGetAggregateResourceConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetAggregateResourceConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.baseConfigurationItems = output.baseConfigurationItems
            self.unprocessedResourceIdentifiers = output.unprocessedResourceIdentifiers
        } else {
            self.baseConfigurationItems = nil
            self.unprocessedResourceIdentifiers = nil
        }
    }
}

public struct BatchGetAggregateResourceConfigOutputResponse: Swift.Equatable {
    /// A list that contains the current configuration of one or more resources.
    public let baseConfigurationItems: [ConfigClientTypes.BaseConfigurationItem]?
    /// A list of resource identifiers that were not processed with current scope. The list is empty if all the resources are processed.
    public let unprocessedResourceIdentifiers: [ConfigClientTypes.AggregateResourceIdentifier]?

    public init (
        baseConfigurationItems: [ConfigClientTypes.BaseConfigurationItem]? = nil,
        unprocessedResourceIdentifiers: [ConfigClientTypes.AggregateResourceIdentifier]? = nil
    )
    {
        self.baseConfigurationItems = baseConfigurationItems
        self.unprocessedResourceIdentifiers = unprocessedResourceIdentifiers
    }
}

struct BatchGetAggregateResourceConfigOutputResponseBody: Swift.Equatable {
    public let baseConfigurationItems: [ConfigClientTypes.BaseConfigurationItem]?
    public let unprocessedResourceIdentifiers: [ConfigClientTypes.AggregateResourceIdentifier]?
}

extension BatchGetAggregateResourceConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseConfigurationItems = "BaseConfigurationItems"
        case unprocessedResourceIdentifiers = "UnprocessedResourceIdentifiers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseConfigurationItemsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.BaseConfigurationItem?].self, forKey: .baseConfigurationItems)
        var baseConfigurationItemsDecoded0:[ConfigClientTypes.BaseConfigurationItem]? = nil
        if let baseConfigurationItemsContainer = baseConfigurationItemsContainer {
            baseConfigurationItemsDecoded0 = [ConfigClientTypes.BaseConfigurationItem]()
            for structure0 in baseConfigurationItemsContainer {
                if let structure0 = structure0 {
                    baseConfigurationItemsDecoded0?.append(structure0)
                }
            }
        }
        baseConfigurationItems = baseConfigurationItemsDecoded0
        let unprocessedResourceIdentifiersContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregateResourceIdentifier?].self, forKey: .unprocessedResourceIdentifiers)
        var unprocessedResourceIdentifiersDecoded0:[ConfigClientTypes.AggregateResourceIdentifier]? = nil
        if let unprocessedResourceIdentifiersContainer = unprocessedResourceIdentifiersContainer {
            unprocessedResourceIdentifiersDecoded0 = [ConfigClientTypes.AggregateResourceIdentifier]()
            for structure0 in unprocessedResourceIdentifiersContainer {
                if let structure0 = structure0 {
                    unprocessedResourceIdentifiersDecoded0?.append(structure0)
                }
            }
        }
        unprocessedResourceIdentifiers = unprocessedResourceIdentifiersDecoded0
    }
}

public struct BatchGetResourceConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetResourceConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetResourceConfigOutputError>
}

extension BatchGetResourceConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetResourceConfigInput(resourceKeys: \(Swift.String(describing: resourceKeys)))"}
}

extension BatchGetResourceConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceKeys = resourceKeys {
            var resourceKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceKeys)
            for resourcekeys0 in resourceKeys {
                try resourceKeysContainer.encode(resourcekeys0)
            }
        }
    }
}

public struct BatchGetResourceConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetResourceConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetResourceConfigOutputError>
}

public struct BatchGetResourceConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchGetResourceConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchGetResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchGetResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchGetResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchGetResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchGetResourceConfigOutputError>
}

public struct BatchGetResourceConfigInput: Swift.Equatable {
    /// A list of resource keys to be processed with the current
    /// 			request. Each element in the list consists of the resource type and
    /// 			resource ID.
    /// This member is required.
    public let resourceKeys: [ConfigClientTypes.ResourceKey]?

    public init (
        resourceKeys: [ConfigClientTypes.ResourceKey]? = nil
    )
    {
        self.resourceKeys = resourceKeys
    }
}

struct BatchGetResourceConfigInputBody: Swift.Equatable {
    public let resourceKeys: [ConfigClientTypes.ResourceKey]?
}

extension BatchGetResourceConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceKeysContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ResourceKey?].self, forKey: .resourceKeys)
        var resourceKeysDecoded0:[ConfigClientTypes.ResourceKey]? = nil
        if let resourceKeysContainer = resourceKeysContainer {
            resourceKeysDecoded0 = [ConfigClientTypes.ResourceKey]()
            for structure0 in resourceKeysContainer {
                if let structure0 = structure0 {
                    resourceKeysDecoded0?.append(structure0)
                }
            }
        }
        resourceKeys = resourceKeysDecoded0
    }
}

extension BatchGetResourceConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchGetResourceConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoAvailableConfigurationRecorderException" : self = .noAvailableConfigurationRecorderException(try NoAvailableConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchGetResourceConfigOutputError: Swift.Error, Swift.Equatable {
    case noAvailableConfigurationRecorderException(NoAvailableConfigurationRecorderException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchGetResourceConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchGetResourceConfigOutputResponse(baseConfigurationItems: \(Swift.String(describing: baseConfigurationItems)), unprocessedResourceKeys: \(Swift.String(describing: unprocessedResourceKeys)))"}
}

extension BatchGetResourceConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchGetResourceConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.baseConfigurationItems = output.baseConfigurationItems
            self.unprocessedResourceKeys = output.unprocessedResourceKeys
        } else {
            self.baseConfigurationItems = nil
            self.unprocessedResourceKeys = nil
        }
    }
}

public struct BatchGetResourceConfigOutputResponse: Swift.Equatable {
    /// A list that contains the current configuration of one or more
    /// 			resources.
    public let baseConfigurationItems: [ConfigClientTypes.BaseConfigurationItem]?
    /// A list of resource keys that were not processed with the
    /// 			current response. The unprocessesResourceKeys value is in the same
    /// 			form as ResourceKeys, so the value can be directly provided to a
    /// 			subsequent BatchGetResourceConfig operation.
    /// 			
    /// 			If there are no unprocessed resource keys, the response contains an
    /// 			empty unprocessedResourceKeys list.
    public let unprocessedResourceKeys: [ConfigClientTypes.ResourceKey]?

    public init (
        baseConfigurationItems: [ConfigClientTypes.BaseConfigurationItem]? = nil,
        unprocessedResourceKeys: [ConfigClientTypes.ResourceKey]? = nil
    )
    {
        self.baseConfigurationItems = baseConfigurationItems
        self.unprocessedResourceKeys = unprocessedResourceKeys
    }
}

struct BatchGetResourceConfigOutputResponseBody: Swift.Equatable {
    public let baseConfigurationItems: [ConfigClientTypes.BaseConfigurationItem]?
    public let unprocessedResourceKeys: [ConfigClientTypes.ResourceKey]?
}

extension BatchGetResourceConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseConfigurationItems
        case unprocessedResourceKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let baseConfigurationItemsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.BaseConfigurationItem?].self, forKey: .baseConfigurationItems)
        var baseConfigurationItemsDecoded0:[ConfigClientTypes.BaseConfigurationItem]? = nil
        if let baseConfigurationItemsContainer = baseConfigurationItemsContainer {
            baseConfigurationItemsDecoded0 = [ConfigClientTypes.BaseConfigurationItem]()
            for structure0 in baseConfigurationItemsContainer {
                if let structure0 = structure0 {
                    baseConfigurationItemsDecoded0?.append(structure0)
                }
            }
        }
        baseConfigurationItems = baseConfigurationItemsDecoded0
        let unprocessedResourceKeysContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ResourceKey?].self, forKey: .unprocessedResourceKeys)
        var unprocessedResourceKeysDecoded0:[ConfigClientTypes.ResourceKey]? = nil
        if let unprocessedResourceKeysContainer = unprocessedResourceKeysContainer {
            unprocessedResourceKeysDecoded0 = [ConfigClientTypes.ResourceKey]()
            for structure0 in unprocessedResourceKeysContainer {
                if let structure0 = structure0 {
                    unprocessedResourceKeysDecoded0?.append(structure0)
                }
            }
        }
        unprocessedResourceKeys = unprocessedResourceKeysDecoded0
    }
}

extension ConfigClientTypes {
    public enum ChronologicalOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case forward
        case reverse
        case sdkUnknown(Swift.String)

        public static var allCases: [ChronologicalOrder] {
            return [
                .forward,
                .reverse,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .forward: return "Forward"
            case .reverse: return "Reverse"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ChronologicalOrder(rawValue: rawValue) ?? ChronologicalOrder.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.Compliance: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceContributorCount = "ComplianceContributorCount"
        case complianceType = "ComplianceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceContributorCount = complianceContributorCount {
            try encodeContainer.encode(complianceContributorCount, forKey: .complianceContributorCount)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let complianceContributorCountDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceContributorCount.self, forKey: .complianceContributorCount)
        complianceContributorCount = complianceContributorCountDecoded
    }
}

extension ConfigClientTypes.Compliance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Compliance(complianceContributorCount: \(Swift.String(describing: complianceContributorCount)), complianceType: \(Swift.String(describing: complianceType)))"}
}

extension ConfigClientTypes {
    /// Indicates whether an AWS resource or AWS Config rule is
    /// 			compliant and provides the number of contributors that affect the
    /// 			compliance.
    public struct Compliance: Swift.Equatable {
        /// The number of AWS resources or AWS Config rules that cause a
        /// 			result of NON_COMPLIANT, up to a maximum
        /// 			number.
        public let complianceContributorCount: ConfigClientTypes.ComplianceContributorCount?
        /// Indicates whether an AWS resource or AWS Config rule is
        /// 			compliant.
        /// 		       A resource is compliant if it complies with all of the AWS
        /// 			Config rules that evaluate it. A resource is noncompliant if it does
        /// 			not comply with one or more of these rules.
        /// 		       A rule is compliant if all of the resources that the rule
        /// 			evaluates comply with it. A rule is noncompliant if any of these
        /// 			resources do not comply.
        /// 		       AWS Config returns the INSUFFICIENT_DATA value
        /// 			when no evaluation results are available for the AWS resource or AWS
        /// 			Config rule.
        /// 		       For the Compliance data type, AWS Config supports
        /// 			only COMPLIANT, NON_COMPLIANT, and
        /// 				INSUFFICIENT_DATA values. AWS Config does not
        /// 			support the NOT_APPLICABLE value for the
        /// 				Compliance data type.
        public let complianceType: ConfigClientTypes.ComplianceType?

        public init (
            complianceContributorCount: ConfigClientTypes.ComplianceContributorCount? = nil,
            complianceType: ConfigClientTypes.ComplianceType? = nil
        )
        {
            self.complianceContributorCount = complianceContributorCount
            self.complianceType = complianceType
        }
    }

}

extension ConfigClientTypes.ComplianceByConfigRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compliance = "Compliance"
        case configRuleName = "ConfigRuleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compliance = compliance {
            try encodeContainer.encode(compliance, forKey: .compliance)
        }
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let complianceDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.Compliance.self, forKey: .compliance)
        compliance = complianceDecoded
    }
}

extension ConfigClientTypes.ComplianceByConfigRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ComplianceByConfigRule(compliance: \(Swift.String(describing: compliance)), configRuleName: \(Swift.String(describing: configRuleName)))"}
}

extension ConfigClientTypes {
    /// Indicates whether an AWS Config rule is compliant. A rule is
    /// 			compliant if all of the resources that the rule evaluated comply
    /// 			with it. A rule is noncompliant if any of these resources do not
    /// 			comply.
    public struct ComplianceByConfigRule: Swift.Equatable {
        /// Indicates whether the AWS Config rule is compliant.
        public let compliance: ConfigClientTypes.Compliance?
        /// The name of the AWS Config rule.
        public let configRuleName: Swift.String?

        public init (
            compliance: ConfigClientTypes.Compliance? = nil,
            configRuleName: Swift.String? = nil
        )
        {
            self.compliance = compliance
            self.configRuleName = configRuleName
        }
    }

}

extension ConfigClientTypes.ComplianceByResource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compliance = "Compliance"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compliance = compliance {
            try encodeContainer.encode(compliance, forKey: .compliance)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let complianceDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.Compliance.self, forKey: .compliance)
        compliance = complianceDecoded
    }
}

extension ConfigClientTypes.ComplianceByResource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ComplianceByResource(compliance: \(Swift.String(describing: compliance)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConfigClientTypes {
    /// Indicates whether an AWS resource that is evaluated according
    /// 			to one or more AWS Config rules is compliant. A resource is
    /// 			compliant if it complies with all of the rules that evaluate it. A
    /// 			resource is noncompliant if it does not comply with one or more of
    /// 			these rules.
    public struct ComplianceByResource: Swift.Equatable {
        /// Indicates whether the AWS resource complies with all of the AWS
        /// 			Config rules that evaluated it.
        public let compliance: ConfigClientTypes.Compliance?
        /// The ID of the AWS resource that was evaluated.
        public let resourceId: Swift.String?
        /// The type of the AWS resource that was evaluated.
        public let resourceType: Swift.String?

        public init (
            compliance: ConfigClientTypes.Compliance? = nil,
            resourceId: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.compliance = compliance
            self.resourceId = resourceId
            self.resourceType = resourceType
        }
    }

}

extension ConfigClientTypes.ComplianceContributorCount: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capExceeded = "CapExceeded"
        case cappedCount = "CappedCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if capExceeded != false {
            try encodeContainer.encode(capExceeded, forKey: .capExceeded)
        }
        if cappedCount != 0 {
            try encodeContainer.encode(cappedCount, forKey: .cappedCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cappedCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .cappedCount)
        cappedCount = cappedCountDecoded
        let capExceededDecoded = try containerValues.decode(Swift.Bool.self, forKey: .capExceeded)
        capExceeded = capExceededDecoded
    }
}

extension ConfigClientTypes.ComplianceContributorCount: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ComplianceContributorCount(capExceeded: \(Swift.String(describing: capExceeded)), cappedCount: \(Swift.String(describing: cappedCount)))"}
}

extension ConfigClientTypes {
    /// The number of AWS resources or AWS Config rules responsible for
    /// 			the current compliance of the item, up to a maximum
    /// 			number.
    public struct ComplianceContributorCount: Swift.Equatable {
        /// Indicates whether the maximum count is reached.
        public let capExceeded: Swift.Bool
        /// The number of AWS resources or AWS Config rules responsible for
        /// 			the current compliance of the item.
        public let cappedCount: Swift.Int

        public init (
            capExceeded: Swift.Bool = false,
            cappedCount: Swift.Int = 0
        )
        {
            self.capExceeded = capExceeded
            self.cappedCount = cappedCount
        }
    }

}

extension ConfigClientTypes.ComplianceSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceSummaryTimestamp = "ComplianceSummaryTimestamp"
        case compliantResourceCount = "CompliantResourceCount"
        case nonCompliantResourceCount = "NonCompliantResourceCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceSummaryTimestamp = complianceSummaryTimestamp {
            try encodeContainer.encode(complianceSummaryTimestamp.timeIntervalSince1970, forKey: .complianceSummaryTimestamp)
        }
        if let compliantResourceCount = compliantResourceCount {
            try encodeContainer.encode(compliantResourceCount, forKey: .compliantResourceCount)
        }
        if let nonCompliantResourceCount = nonCompliantResourceCount {
            try encodeContainer.encode(nonCompliantResourceCount, forKey: .nonCompliantResourceCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let compliantResourceCountDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceContributorCount.self, forKey: .compliantResourceCount)
        compliantResourceCount = compliantResourceCountDecoded
        let nonCompliantResourceCountDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceContributorCount.self, forKey: .nonCompliantResourceCount)
        nonCompliantResourceCount = nonCompliantResourceCountDecoded
        let complianceSummaryTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .complianceSummaryTimestamp)
        complianceSummaryTimestamp = complianceSummaryTimestampDecoded
    }
}

extension ConfigClientTypes.ComplianceSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ComplianceSummary(complianceSummaryTimestamp: \(Swift.String(describing: complianceSummaryTimestamp)), compliantResourceCount: \(Swift.String(describing: compliantResourceCount)), nonCompliantResourceCount: \(Swift.String(describing: nonCompliantResourceCount)))"}
}

extension ConfigClientTypes {
    /// The number of AWS Config rules or AWS resources that are
    /// 			compliant and noncompliant.
    public struct ComplianceSummary: Swift.Equatable {
        /// The time that AWS Config created the compliance
        /// 			summary.
        public let complianceSummaryTimestamp: ClientRuntime.Date?
        /// The number of AWS Config rules or AWS resources that are
        /// 			compliant, up to a maximum of 25 for rules and 100 for
        /// 			resources.
        public let compliantResourceCount: ConfigClientTypes.ComplianceContributorCount?
        /// The number of AWS Config rules or AWS resources that are
        /// 			noncompliant, up to a maximum of 25 for rules and 100 for
        /// 			resources.
        public let nonCompliantResourceCount: ConfigClientTypes.ComplianceContributorCount?

        public init (
            complianceSummaryTimestamp: ClientRuntime.Date? = nil,
            compliantResourceCount: ConfigClientTypes.ComplianceContributorCount? = nil,
            nonCompliantResourceCount: ConfigClientTypes.ComplianceContributorCount? = nil
        )
        {
            self.complianceSummaryTimestamp = complianceSummaryTimestamp
            self.compliantResourceCount = compliantResourceCount
            self.nonCompliantResourceCount = nonCompliantResourceCount
        }
    }

}

extension ConfigClientTypes.ComplianceSummaryByResourceType: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceSummary = "ComplianceSummary"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceSummary = complianceSummary {
            try encodeContainer.encode(complianceSummary, forKey: .complianceSummary)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let complianceSummaryDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceSummary.self, forKey: .complianceSummary)
        complianceSummary = complianceSummaryDecoded
    }
}

extension ConfigClientTypes.ComplianceSummaryByResourceType: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ComplianceSummaryByResourceType(complianceSummary: \(Swift.String(describing: complianceSummary)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConfigClientTypes {
    /// The number of AWS resources of a specific type that are
    /// 			compliant or noncompliant, up to a maximum of 100 for
    /// 			each.
    public struct ComplianceSummaryByResourceType: Swift.Equatable {
        /// The number of AWS resources that are compliant or noncompliant,
        /// 			up to a maximum of 100 for each.
        public let complianceSummary: ConfigClientTypes.ComplianceSummary?
        /// The type of AWS resource.
        public let resourceType: Swift.String?

        public init (
            complianceSummary: ConfigClientTypes.ComplianceSummary? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.complianceSummary = complianceSummary
            self.resourceType = resourceType
        }
    }

}

extension ConfigClientTypes {
    public enum ComplianceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case compliant
        case insufficientData
        case nonCompliant
        case notApplicable
        case sdkUnknown(Swift.String)

        public static var allCases: [ComplianceType] {
            return [
                .compliant,
                .insufficientData,
                .nonCompliant,
                .notApplicable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .compliant: return "COMPLIANT"
            case .insufficientData: return "INSUFFICIENT_DATA"
            case .nonCompliant: return "NON_COMPLIANT"
            case .notApplicable: return "NOT_APPLICABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComplianceType(rawValue: rawValue) ?? ComplianceType.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.ConfigExportDeliveryInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastAttemptTime
        case lastErrorCode
        case lastErrorMessage
        case lastStatus
        case lastSuccessfulTime
        case nextDeliveryTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastAttemptTime = lastAttemptTime {
            try encodeContainer.encode(lastAttemptTime.timeIntervalSince1970, forKey: .lastAttemptTime)
        }
        if let lastErrorCode = lastErrorCode {
            try encodeContainer.encode(lastErrorCode, forKey: .lastErrorCode)
        }
        if let lastErrorMessage = lastErrorMessage {
            try encodeContainer.encode(lastErrorMessage, forKey: .lastErrorMessage)
        }
        if let lastStatus = lastStatus {
            try encodeContainer.encode(lastStatus.rawValue, forKey: .lastStatus)
        }
        if let lastSuccessfulTime = lastSuccessfulTime {
            try encodeContainer.encode(lastSuccessfulTime.timeIntervalSince1970, forKey: .lastSuccessfulTime)
        }
        if let nextDeliveryTime = nextDeliveryTime {
            try encodeContainer.encode(nextDeliveryTime.timeIntervalSince1970, forKey: .nextDeliveryTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastStatusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.DeliveryStatus.self, forKey: .lastStatus)
        lastStatus = lastStatusDecoded
        let lastErrorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorCode)
        lastErrorCode = lastErrorCodeDecoded
        let lastErrorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorMessage)
        lastErrorMessage = lastErrorMessageDecoded
        let lastAttemptTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastAttemptTime)
        lastAttemptTime = lastAttemptTimeDecoded
        let lastSuccessfulTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSuccessfulTime)
        lastSuccessfulTime = lastSuccessfulTimeDecoded
        let nextDeliveryTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .nextDeliveryTime)
        nextDeliveryTime = nextDeliveryTimeDecoded
    }
}

extension ConfigClientTypes.ConfigExportDeliveryInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigExportDeliveryInfo(lastAttemptTime: \(Swift.String(describing: lastAttemptTime)), lastErrorCode: \(Swift.String(describing: lastErrorCode)), lastErrorMessage: \(Swift.String(describing: lastErrorMessage)), lastStatus: \(Swift.String(describing: lastStatus)), lastSuccessfulTime: \(Swift.String(describing: lastSuccessfulTime)), nextDeliveryTime: \(Swift.String(describing: nextDeliveryTime)))"}
}

extension ConfigClientTypes {
    /// Provides status of the delivery of the snapshot or the
    /// 			configuration history to the specified Amazon S3 bucket. Also
    /// 			provides the status of notifications about the Amazon S3 delivery to
    /// 			the specified Amazon SNS topic.
    public struct ConfigExportDeliveryInfo: Swift.Equatable {
        /// The time of the last attempted delivery.
        public let lastAttemptTime: ClientRuntime.Date?
        /// The error code from the last attempted delivery.
        public let lastErrorCode: Swift.String?
        /// The error message from the last attempted delivery.
        public let lastErrorMessage: Swift.String?
        /// Status of the last attempted delivery.
        public let lastStatus: ConfigClientTypes.DeliveryStatus?
        /// The time of the last successful delivery.
        public let lastSuccessfulTime: ClientRuntime.Date?
        /// The time that the next delivery occurs.
        public let nextDeliveryTime: ClientRuntime.Date?

        public init (
            lastAttemptTime: ClientRuntime.Date? = nil,
            lastErrorCode: Swift.String? = nil,
            lastErrorMessage: Swift.String? = nil,
            lastStatus: ConfigClientTypes.DeliveryStatus? = nil,
            lastSuccessfulTime: ClientRuntime.Date? = nil,
            nextDeliveryTime: ClientRuntime.Date? = nil
        )
        {
            self.lastAttemptTime = lastAttemptTime
            self.lastErrorCode = lastErrorCode
            self.lastErrorMessage = lastErrorMessage
            self.lastStatus = lastStatus
            self.lastSuccessfulTime = lastSuccessfulTime
            self.nextDeliveryTime = nextDeliveryTime
        }
    }

}

extension ConfigClientTypes.ConfigRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleArn = "ConfigRuleArn"
        case configRuleId = "ConfigRuleId"
        case configRuleName = "ConfigRuleName"
        case configRuleState = "ConfigRuleState"
        case createdBy = "CreatedBy"
        case description = "Description"
        case inputParameters = "InputParameters"
        case maximumExecutionFrequency = "MaximumExecutionFrequency"
        case scope = "Scope"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleArn = configRuleArn {
            try encodeContainer.encode(configRuleArn, forKey: .configRuleArn)
        }
        if let configRuleId = configRuleId {
            try encodeContainer.encode(configRuleId, forKey: .configRuleId)
        }
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let configRuleState = configRuleState {
            try encodeContainer.encode(configRuleState.rawValue, forKey: .configRuleState)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let inputParameters = inputParameters {
            try encodeContainer.encode(inputParameters, forKey: .inputParameters)
        }
        if let maximumExecutionFrequency = maximumExecutionFrequency {
            try encodeContainer.encode(maximumExecutionFrequency.rawValue, forKey: .maximumExecutionFrequency)
        }
        if let scope = scope {
            try encodeContainer.encode(scope, forKey: .scope)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let configRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleArn)
        configRuleArn = configRuleArnDecoded
        let configRuleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleId)
        configRuleId = configRuleIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.Source.self, forKey: .source)
        source = sourceDecoded
        let inputParametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputParameters)
        inputParameters = inputParametersDecoded
        let maximumExecutionFrequencyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.MaximumExecutionFrequency.self, forKey: .maximumExecutionFrequency)
        maximumExecutionFrequency = maximumExecutionFrequencyDecoded
        let configRuleStateDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigRuleState.self, forKey: .configRuleState)
        configRuleState = configRuleStateDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}

extension ConfigClientTypes.ConfigRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigRule(configRuleArn: \(Swift.String(describing: configRuleArn)), configRuleId: \(Swift.String(describing: configRuleId)), configRuleName: \(Swift.String(describing: configRuleName)), configRuleState: \(Swift.String(describing: configRuleState)), createdBy: \(Swift.String(describing: createdBy)), description: \(Swift.String(describing: description)), inputParameters: \(Swift.String(describing: inputParameters)), maximumExecutionFrequency: \(Swift.String(describing: maximumExecutionFrequency)), scope: \(Swift.String(describing: scope)), source: \(Swift.String(describing: source)))"}
}

extension ConfigClientTypes {
    /// An AWS Config rule represents an AWS Lambda function that you
    /// 			create for a custom rule or a predefined function for an AWS managed
    /// 			rule. The function evaluates configuration items to assess whether
    /// 			your AWS resources comply with your desired configurations. This
    /// 			function can run when AWS Config detects a configuration change to
    /// 			an AWS resource and at a periodic frequency that you choose (for
    /// 			example, every 24 hours).
    ///
    /// 		
    /// 			         You can use the AWS CLI and AWS SDKs if you want to create
    /// 				a rule that triggers evaluations for your resources when AWS
    /// 				Config delivers the configuration snapshot. For more
    /// 				information, see ConfigSnapshotDeliveryProperties.
    /// 		
    /// 		       For more information about developing and using AWS Config
    /// 			rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating AWS Resource Configurations with AWS Config
    /// 			in the AWS Config Developer Guide.
    public struct ConfigRule: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the AWS Config
        /// 			rule.
        public let configRuleArn: Swift.String?
        /// The ID of the AWS Config rule.
        public let configRuleId: Swift.String?
        /// The name that you assign to the AWS Config rule. The name is
        /// 			required if you are adding a new rule.
        public let configRuleName: Swift.String?
        /// Indicates whether the AWS Config rule is active or is currently
        /// 			being deleted by AWS Config. It can also indicate the evaluation
        /// 			status for the AWS Config rule.
        ///
        /// 		       AWS Config sets the state of the rule to
        /// 				EVALUATING temporarily after you use the
        /// 				StartConfigRulesEvaluation request to evaluate your
        /// 			resources against the AWS Config rule.
        ///
        /// 		       AWS Config sets the state of the rule to
        /// 				DELETING_RESULTS temporarily after you use the
        /// 				DeleteEvaluationResults request to delete the
        /// 			current evaluation results for the AWS Config rule.
        ///
        /// 		       AWS Config temporarily sets the state of a rule to
        /// 				DELETING after you use the
        /// 				DeleteConfigRule request to delete the rule. After
        /// 			AWS Config deletes the rule, the rule and all of its evaluations are
        /// 			erased and are no longer available.
        public let configRuleState: ConfigClientTypes.ConfigRuleState?
        /// Service principal name of the service that created the
        /// 			rule.
        /// 		
        /// 			         The field is populated only if the service linked rule is
        /// 				created by a service. The field is empty if you create your own
        /// 				rule.
        /// 		
        public let createdBy: Swift.String?
        /// The description that you provide for the AWS Config
        /// 			rule.
        public let description: Swift.String?
        /// A string, in JSON format, that is passed to the AWS Config rule
        /// 			Lambda function.
        public let inputParameters: Swift.String?
        /// The maximum frequency with which AWS Config runs evaluations
        /// 			for a rule. You can specify a value for
        /// 				MaximumExecutionFrequency when:
        /// 		
        ///
        /// 				           You are using an AWS managed rule that is triggered at
        /// 					a periodic frequency.
        /// 			
        ///
        /// 				           Your custom rule is triggered when AWS Config delivers
        /// 					the configuration snapshot. For more information, see ConfigSnapshotDeliveryProperties.
        /// 			
        ///
        ///
        ///
        ///
        /// 		
        /// 			         By default, rules with a periodic trigger are evaluated
        /// 				every 24 hours. To change the frequency, specify a valid value
        /// 				for the MaximumExecutionFrequency
        /// 				parameter.
        /// 		
        public let maximumExecutionFrequency: ConfigClientTypes.MaximumExecutionFrequency?
        /// Defines which resources can trigger an evaluation for the rule.
        /// 			The scope can include one or more resource types, a combination of
        /// 			one resource type and one resource ID, or a combination of a tag key
        /// 			and value. Specify a scope to constrain the resources that can
        /// 			trigger an evaluation for the rule. If you do not specify a scope,
        /// 			evaluations are triggered when any resource in the recording group
        /// 			changes.
        /// 		
        ///             The scope can be empty.
        ///
        public let scope: ConfigClientTypes.Scope?
        /// Provides the rule owner (AWS or customer), the rule identifier,
        /// 			and the notifications that cause the function to evaluate your AWS
        /// 			resources.
        /// This member is required.
        public let source: ConfigClientTypes.Source?

        public init (
            configRuleArn: Swift.String? = nil,
            configRuleId: Swift.String? = nil,
            configRuleName: Swift.String? = nil,
            configRuleState: ConfigClientTypes.ConfigRuleState? = nil,
            createdBy: Swift.String? = nil,
            description: Swift.String? = nil,
            inputParameters: Swift.String? = nil,
            maximumExecutionFrequency: ConfigClientTypes.MaximumExecutionFrequency? = nil,
            scope: ConfigClientTypes.Scope? = nil,
            source: ConfigClientTypes.Source? = nil
        )
        {
            self.configRuleArn = configRuleArn
            self.configRuleId = configRuleId
            self.configRuleName = configRuleName
            self.configRuleState = configRuleState
            self.createdBy = createdBy
            self.description = description
            self.inputParameters = inputParameters
            self.maximumExecutionFrequency = maximumExecutionFrequency
            self.scope = scope
            self.source = source
        }
    }

}

extension ConfigClientTypes.ConfigRuleComplianceFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case awsRegion = "AwsRegion"
        case complianceType = "ComplianceType"
        case configRuleName = "ConfigRuleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
    }
}

extension ConfigClientTypes.ConfigRuleComplianceFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigRuleComplianceFilters(accountId: \(Swift.String(describing: accountId)), awsRegion: \(Swift.String(describing: awsRegion)), complianceType: \(Swift.String(describing: complianceType)), configRuleName: \(Swift.String(describing: configRuleName)))"}
}

extension ConfigClientTypes {
    /// Filters the compliance results based on account ID, region,
    /// 			compliance type, and rule name.
    public struct ConfigRuleComplianceFilters: Swift.Equatable {
        /// The 12-digit account ID of the source account.
        /// 			
        public let accountId: Swift.String?
        /// The source region where the data is aggregated.
        /// 			
        public let awsRegion: Swift.String?
        /// The rule compliance status.
        /// 		       For the ConfigRuleComplianceFilters data type, AWS
        /// 			Config supports only COMPLIANT and
        /// 				NON_COMPLIANT. AWS Config does not support the
        /// 				NOT_APPLICABLE and the
        /// 				INSUFFICIENT_DATA values.
        public let complianceType: ConfigClientTypes.ComplianceType?
        /// The name of the AWS Config rule.
        public let configRuleName: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            awsRegion: Swift.String? = nil,
            complianceType: ConfigClientTypes.ComplianceType? = nil,
            configRuleName: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.awsRegion = awsRegion
            self.complianceType = complianceType
            self.configRuleName = configRuleName
        }
    }

}

extension ConfigClientTypes.ConfigRuleComplianceSummaryFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case awsRegion = "AwsRegion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
    }
}

extension ConfigClientTypes.ConfigRuleComplianceSummaryFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigRuleComplianceSummaryFilters(accountId: \(Swift.String(describing: accountId)), awsRegion: \(Swift.String(describing: awsRegion)))"}
}

extension ConfigClientTypes {
    /// Filters the results based on the account IDs and
    /// 			regions.
    public struct ConfigRuleComplianceSummaryFilters: Swift.Equatable {
        /// The 12-digit account ID of the source account.
        public let accountId: Swift.String?
        /// The source region where the data is aggregated.
        public let awsRegion: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            awsRegion: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.awsRegion = awsRegion
        }
    }

}

extension ConfigClientTypes {
    public enum ConfigRuleComplianceSummaryGroupKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case awsRegion
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigRuleComplianceSummaryGroupKey] {
            return [
                .accountId,
                .awsRegion,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "ACCOUNT_ID"
            case .awsRegion: return "AWS_REGION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfigRuleComplianceSummaryGroupKey(rawValue: rawValue) ?? ConfigRuleComplianceSummaryGroupKey.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.ConfigRuleEvaluationStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleArn = "ConfigRuleArn"
        case configRuleId = "ConfigRuleId"
        case configRuleName = "ConfigRuleName"
        case firstActivatedTime = "FirstActivatedTime"
        case firstEvaluationStarted = "FirstEvaluationStarted"
        case lastDeactivatedTime = "LastDeactivatedTime"
        case lastErrorCode = "LastErrorCode"
        case lastErrorMessage = "LastErrorMessage"
        case lastFailedEvaluationTime = "LastFailedEvaluationTime"
        case lastFailedInvocationTime = "LastFailedInvocationTime"
        case lastSuccessfulEvaluationTime = "LastSuccessfulEvaluationTime"
        case lastSuccessfulInvocationTime = "LastSuccessfulInvocationTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleArn = configRuleArn {
            try encodeContainer.encode(configRuleArn, forKey: .configRuleArn)
        }
        if let configRuleId = configRuleId {
            try encodeContainer.encode(configRuleId, forKey: .configRuleId)
        }
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let firstActivatedTime = firstActivatedTime {
            try encodeContainer.encode(firstActivatedTime.timeIntervalSince1970, forKey: .firstActivatedTime)
        }
        if firstEvaluationStarted != false {
            try encodeContainer.encode(firstEvaluationStarted, forKey: .firstEvaluationStarted)
        }
        if let lastDeactivatedTime = lastDeactivatedTime {
            try encodeContainer.encode(lastDeactivatedTime.timeIntervalSince1970, forKey: .lastDeactivatedTime)
        }
        if let lastErrorCode = lastErrorCode {
            try encodeContainer.encode(lastErrorCode, forKey: .lastErrorCode)
        }
        if let lastErrorMessage = lastErrorMessage {
            try encodeContainer.encode(lastErrorMessage, forKey: .lastErrorMessage)
        }
        if let lastFailedEvaluationTime = lastFailedEvaluationTime {
            try encodeContainer.encode(lastFailedEvaluationTime.timeIntervalSince1970, forKey: .lastFailedEvaluationTime)
        }
        if let lastFailedInvocationTime = lastFailedInvocationTime {
            try encodeContainer.encode(lastFailedInvocationTime.timeIntervalSince1970, forKey: .lastFailedInvocationTime)
        }
        if let lastSuccessfulEvaluationTime = lastSuccessfulEvaluationTime {
            try encodeContainer.encode(lastSuccessfulEvaluationTime.timeIntervalSince1970, forKey: .lastSuccessfulEvaluationTime)
        }
        if let lastSuccessfulInvocationTime = lastSuccessfulInvocationTime {
            try encodeContainer.encode(lastSuccessfulInvocationTime.timeIntervalSince1970, forKey: .lastSuccessfulInvocationTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let configRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleArn)
        configRuleArn = configRuleArnDecoded
        let configRuleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleId)
        configRuleId = configRuleIdDecoded
        let lastSuccessfulInvocationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSuccessfulInvocationTime)
        lastSuccessfulInvocationTime = lastSuccessfulInvocationTimeDecoded
        let lastFailedInvocationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastFailedInvocationTime)
        lastFailedInvocationTime = lastFailedInvocationTimeDecoded
        let lastSuccessfulEvaluationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastSuccessfulEvaluationTime)
        lastSuccessfulEvaluationTime = lastSuccessfulEvaluationTimeDecoded
        let lastFailedEvaluationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastFailedEvaluationTime)
        lastFailedEvaluationTime = lastFailedEvaluationTimeDecoded
        let firstActivatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .firstActivatedTime)
        firstActivatedTime = firstActivatedTimeDecoded
        let lastDeactivatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastDeactivatedTime)
        lastDeactivatedTime = lastDeactivatedTimeDecoded
        let lastErrorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorCode)
        lastErrorCode = lastErrorCodeDecoded
        let lastErrorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorMessage)
        lastErrorMessage = lastErrorMessageDecoded
        let firstEvaluationStartedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .firstEvaluationStarted)
        firstEvaluationStarted = firstEvaluationStartedDecoded
    }
}

extension ConfigClientTypes.ConfigRuleEvaluationStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigRuleEvaluationStatus(configRuleArn: \(Swift.String(describing: configRuleArn)), configRuleId: \(Swift.String(describing: configRuleId)), configRuleName: \(Swift.String(describing: configRuleName)), firstActivatedTime: \(Swift.String(describing: firstActivatedTime)), firstEvaluationStarted: \(Swift.String(describing: firstEvaluationStarted)), lastDeactivatedTime: \(Swift.String(describing: lastDeactivatedTime)), lastErrorCode: \(Swift.String(describing: lastErrorCode)), lastErrorMessage: \(Swift.String(describing: lastErrorMessage)), lastFailedEvaluationTime: \(Swift.String(describing: lastFailedEvaluationTime)), lastFailedInvocationTime: \(Swift.String(describing: lastFailedInvocationTime)), lastSuccessfulEvaluationTime: \(Swift.String(describing: lastSuccessfulEvaluationTime)), lastSuccessfulInvocationTime: \(Swift.String(describing: lastSuccessfulInvocationTime)))"}
}

extension ConfigClientTypes {
    /// Status information for your AWS managed Config rules. The
    /// 			status includes information such as the last time the rule ran, the
    /// 			last time it failed, and the related error for the last
    /// 			failure.
    /// 		       This action does not return status information about custom AWS
    /// 			Config rules.
    public struct ConfigRuleEvaluationStatus: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the AWS Config
        /// 			rule.
        public let configRuleArn: Swift.String?
        /// The ID of the AWS Config rule.
        public let configRuleId: Swift.String?
        /// The name of the AWS Config rule.
        public let configRuleName: Swift.String?
        /// The time that you first activated the AWS Config
        /// 			rule.
        public let firstActivatedTime: ClientRuntime.Date?
        /// Indicates whether AWS Config has evaluated your resources
        /// 			against the rule at least once.
        /// 		
        ///
        /// 				
        /// 					             true - AWS Config has evaluated your AWS
        /// 					resources against the rule at least once.
        /// 			
        ///
        /// 				
        /// 					             false - AWS Config has not once finished
        /// 					evaluating your AWS resources against the rule.
        /// 			
        ///
        public let firstEvaluationStarted: Swift.Bool
        /// The time that you last turned off the AWS Config rule.
        public let lastDeactivatedTime: ClientRuntime.Date?
        /// The error code that AWS Config returned when the rule last
        /// 			failed.
        public let lastErrorCode: Swift.String?
        /// The error message that AWS Config returned when the rule last
        /// 			failed.
        public let lastErrorMessage: Swift.String?
        /// The time that AWS Config last failed to evaluate your AWS
        /// 			resources against the rule.
        public let lastFailedEvaluationTime: ClientRuntime.Date?
        /// The time that AWS Config last failed to invoke the AWS Config
        /// 			rule to evaluate your AWS resources.
        public let lastFailedInvocationTime: ClientRuntime.Date?
        /// The time that AWS Config last successfully evaluated your AWS
        /// 			resources against the rule.
        public let lastSuccessfulEvaluationTime: ClientRuntime.Date?
        /// The time that AWS Config last successfully invoked the AWS
        /// 			Config rule to evaluate your AWS resources.
        public let lastSuccessfulInvocationTime: ClientRuntime.Date?

        public init (
            configRuleArn: Swift.String? = nil,
            configRuleId: Swift.String? = nil,
            configRuleName: Swift.String? = nil,
            firstActivatedTime: ClientRuntime.Date? = nil,
            firstEvaluationStarted: Swift.Bool = false,
            lastDeactivatedTime: ClientRuntime.Date? = nil,
            lastErrorCode: Swift.String? = nil,
            lastErrorMessage: Swift.String? = nil,
            lastFailedEvaluationTime: ClientRuntime.Date? = nil,
            lastFailedInvocationTime: ClientRuntime.Date? = nil,
            lastSuccessfulEvaluationTime: ClientRuntime.Date? = nil,
            lastSuccessfulInvocationTime: ClientRuntime.Date? = nil
        )
        {
            self.configRuleArn = configRuleArn
            self.configRuleId = configRuleId
            self.configRuleName = configRuleName
            self.firstActivatedTime = firstActivatedTime
            self.firstEvaluationStarted = firstEvaluationStarted
            self.lastDeactivatedTime = lastDeactivatedTime
            self.lastErrorCode = lastErrorCode
            self.lastErrorMessage = lastErrorMessage
            self.lastFailedEvaluationTime = lastFailedEvaluationTime
            self.lastFailedInvocationTime = lastFailedInvocationTime
            self.lastSuccessfulEvaluationTime = lastSuccessfulEvaluationTime
            self.lastSuccessfulInvocationTime = lastSuccessfulInvocationTime
        }
    }

}

extension ConfigClientTypes {
    public enum ConfigRuleState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleting
        case deletingResults
        case evaluating
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigRuleState] {
            return [
                .active,
                .deleting,
                .deletingResults,
                .evaluating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleting: return "DELETING"
            case .deletingResults: return "DELETING_RESULTS"
            case .evaluating: return "EVALUATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfigRuleState(rawValue: rawValue) ?? ConfigRuleState.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.ConfigSnapshotDeliveryProperties: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryFrequency
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryFrequency = deliveryFrequency {
            try encodeContainer.encode(deliveryFrequency.rawValue, forKey: .deliveryFrequency)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryFrequencyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.MaximumExecutionFrequency.self, forKey: .deliveryFrequency)
        deliveryFrequency = deliveryFrequencyDecoded
    }
}

extension ConfigClientTypes.ConfigSnapshotDeliveryProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigSnapshotDeliveryProperties(deliveryFrequency: \(Swift.String(describing: deliveryFrequency)))"}
}

extension ConfigClientTypes {
    /// Provides options for how often AWS Config delivers
    /// 			configuration snapshots to the Amazon S3 bucket in your delivery
    /// 			channel.
    ///
    /// 		
    /// 		
    ///
    /// 		       The frequency for a rule that triggers evaluations for your
    /// 			resources when AWS Config delivers the configuration snapshot is set
    /// 			by one of two values, depending on which is less frequent:
    ///
    /// 		
    ///
    /// 				           The value for the deliveryFrequency
    /// 					parameter within the delivery channel configuration, which
    /// 					sets how often AWS Config delivers configuration snapshots.
    /// 					This value also sets how often AWS Config invokes
    /// 					evaluations for AWS Config rules.
    /// 			
    ///
    /// 				           The value for the
    /// 						MaximumExecutionFrequency parameter, which
    /// 					sets the maximum frequency with which AWS Config invokes
    /// 					evaluations for the rule. For more information, see ConfigRule.
    /// 			
    ///
    ///
    /// 		       If the deliveryFrequency value is less frequent
    /// 			than the MaximumExecutionFrequency value for a rule,
    /// 			AWS Config invokes the rule only as often as the
    /// 				deliveryFrequency value.
    ///
    /// 		       <ol>
    ///
    /// 				           For example, you want your rule to run evaluations when
    /// 					AWS Config delivers the configuration snapshot.
    /// 			
    ///
    /// 				           You specify the MaximumExecutionFrequency
    /// 					value for Six_Hours.
    /// 			
    ///
    /// 				           You then specify the delivery channel
    /// 						deliveryFrequency value for
    /// 						TwentyFour_Hours.
    /// 			
    ///
    /// 				           Because the value for deliveryFrequency is
    /// 					less frequent than MaximumExecutionFrequency,
    /// 					AWS Config invokes evaluations for the rule every 24 hours.
    /// 				
    /// 			
    ///          </ol>
    ///
    ///
    /// 		       You should set the MaximumExecutionFrequency value
    /// 			to be at least as frequent as the deliveryFrequency
    /// 			value. You can view the deliveryFrequency value by
    /// 			using the DescribeDeliveryChannnels action.
    ///
    /// 		       To update the deliveryFrequency with which AWS
    /// 			Config delivers your configuration snapshots, use the
    /// 				PutDeliveryChannel action.
    public struct ConfigSnapshotDeliveryProperties: Swift.Equatable {
        /// The frequency with which AWS Config delivers configuration
        /// 			snapshots.
        public let deliveryFrequency: ConfigClientTypes.MaximumExecutionFrequency?

        public init (
            deliveryFrequency: ConfigClientTypes.MaximumExecutionFrequency? = nil
        )
        {
            self.deliveryFrequency = deliveryFrequency
        }
    }

}

extension ConfigClientTypes.ConfigStreamDeliveryInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastErrorCode
        case lastErrorMessage
        case lastStatus
        case lastStatusChangeTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastErrorCode = lastErrorCode {
            try encodeContainer.encode(lastErrorCode, forKey: .lastErrorCode)
        }
        if let lastErrorMessage = lastErrorMessage {
            try encodeContainer.encode(lastErrorMessage, forKey: .lastErrorMessage)
        }
        if let lastStatus = lastStatus {
            try encodeContainer.encode(lastStatus.rawValue, forKey: .lastStatus)
        }
        if let lastStatusChangeTime = lastStatusChangeTime {
            try encodeContainer.encode(lastStatusChangeTime.timeIntervalSince1970, forKey: .lastStatusChangeTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastStatusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.DeliveryStatus.self, forKey: .lastStatus)
        lastStatus = lastStatusDecoded
        let lastErrorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorCode)
        lastErrorCode = lastErrorCodeDecoded
        let lastErrorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorMessage)
        lastErrorMessage = lastErrorMessageDecoded
        let lastStatusChangeTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStatusChangeTime)
        lastStatusChangeTime = lastStatusChangeTimeDecoded
    }
}

extension ConfigClientTypes.ConfigStreamDeliveryInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigStreamDeliveryInfo(lastErrorCode: \(Swift.String(describing: lastErrorCode)), lastErrorMessage: \(Swift.String(describing: lastErrorMessage)), lastStatus: \(Swift.String(describing: lastStatus)), lastStatusChangeTime: \(Swift.String(describing: lastStatusChangeTime)))"}
}

extension ConfigClientTypes {
    /// A list that contains the status of the delivery of the
    /// 			configuration stream notification to the Amazon SNS topic.
    public struct ConfigStreamDeliveryInfo: Swift.Equatable {
        /// The error code from the last attempted delivery.
        public let lastErrorCode: Swift.String?
        /// The error message from the last attempted delivery.
        public let lastErrorMessage: Swift.String?
        /// Status of the last attempted delivery.
        /// 		
        /// 			         Note Providing an SNS topic on a
        /// 				<a href="https://docs.aws.amazon.com/config/latest/APIReference/API_DeliveryChannel.html">DeliveryChannel for AWS Config is optional. If the SNS
        /// 			delivery is turned off, the last status will be Not_Applicable.
        public let lastStatus: ConfigClientTypes.DeliveryStatus?
        /// The time from the last status change.
        public let lastStatusChangeTime: ClientRuntime.Date?

        public init (
            lastErrorCode: Swift.String? = nil,
            lastErrorMessage: Swift.String? = nil,
            lastStatus: ConfigClientTypes.DeliveryStatus? = nil,
            lastStatusChangeTime: ClientRuntime.Date? = nil
        )
        {
            self.lastErrorCode = lastErrorCode
            self.lastErrorMessage = lastErrorMessage
            self.lastStatus = lastStatus
            self.lastStatusChangeTime = lastStatusChangeTime
        }
    }

}

extension ConfigClientTypes.ConfigurationAggregator: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountAggregationSources = "AccountAggregationSources"
        case configurationAggregatorArn = "ConfigurationAggregatorArn"
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case createdBy = "CreatedBy"
        case creationTime = "CreationTime"
        case lastUpdatedTime = "LastUpdatedTime"
        case organizationAggregationSource = "OrganizationAggregationSource"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountAggregationSources = accountAggregationSources {
            var accountAggregationSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountAggregationSources)
            for accountaggregationsourcelist0 in accountAggregationSources {
                try accountAggregationSourcesContainer.encode(accountaggregationsourcelist0)
            }
        }
        if let configurationAggregatorArn = configurationAggregatorArn {
            try encodeContainer.encode(configurationAggregatorArn, forKey: .configurationAggregatorArn)
        }
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let organizationAggregationSource = organizationAggregationSource {
            try encodeContainer.encode(organizationAggregationSource, forKey: .organizationAggregationSource)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let configurationAggregatorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorArn)
        configurationAggregatorArn = configurationAggregatorArnDecoded
        let accountAggregationSourcesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AccountAggregationSource?].self, forKey: .accountAggregationSources)
        var accountAggregationSourcesDecoded0:[ConfigClientTypes.AccountAggregationSource]? = nil
        if let accountAggregationSourcesContainer = accountAggregationSourcesContainer {
            accountAggregationSourcesDecoded0 = [ConfigClientTypes.AccountAggregationSource]()
            for structure0 in accountAggregationSourcesContainer {
                if let structure0 = structure0 {
                    accountAggregationSourcesDecoded0?.append(structure0)
                }
            }
        }
        accountAggregationSources = accountAggregationSourcesDecoded0
        let organizationAggregationSourceDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationAggregationSource.self, forKey: .organizationAggregationSource)
        organizationAggregationSource = organizationAggregationSourceDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}

extension ConfigClientTypes.ConfigurationAggregator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigurationAggregator(accountAggregationSources: \(Swift.String(describing: accountAggregationSources)), configurationAggregatorArn: \(Swift.String(describing: configurationAggregatorArn)), configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), createdBy: \(Swift.String(describing: createdBy)), creationTime: \(Swift.String(describing: creationTime)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), organizationAggregationSource: \(Swift.String(describing: organizationAggregationSource)))"}
}

extension ConfigClientTypes {
    /// The details about the configuration aggregator, including
    /// 			information about source accounts, regions, and metadata of the
    /// 			aggregator.
    public struct ConfigurationAggregator: Swift.Equatable {
        /// Provides a list of source accounts and regions to be
        /// 			aggregated.
        public let accountAggregationSources: [ConfigClientTypes.AccountAggregationSource]?
        /// The Amazon Resource Name (ARN) of the aggregator.
        public let configurationAggregatorArn: Swift.String?
        /// The name of the aggregator.
        public let configurationAggregatorName: Swift.String?
        /// AWS service that created the configuration aggregator.
        public let createdBy: Swift.String?
        /// The time stamp when the configuration aggregator was
        /// 			created.
        public let creationTime: ClientRuntime.Date?
        /// The time of the last update.
        public let lastUpdatedTime: ClientRuntime.Date?
        /// Provides an organization and list of regions to be
        /// 			aggregated.
        public let organizationAggregationSource: ConfigClientTypes.OrganizationAggregationSource?

        public init (
            accountAggregationSources: [ConfigClientTypes.AccountAggregationSource]? = nil,
            configurationAggregatorArn: Swift.String? = nil,
            configurationAggregatorName: Swift.String? = nil,
            createdBy: Swift.String? = nil,
            creationTime: ClientRuntime.Date? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            organizationAggregationSource: ConfigClientTypes.OrganizationAggregationSource? = nil
        )
        {
            self.accountAggregationSources = accountAggregationSources
            self.configurationAggregatorArn = configurationAggregatorArn
            self.configurationAggregatorName = configurationAggregatorName
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.lastUpdatedTime = lastUpdatedTime
            self.organizationAggregationSource = organizationAggregationSource
        }
    }

}

extension ConfigClientTypes.ConfigurationItem: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case arn
        case availabilityZone
        case awsRegion
        case configuration
        case configurationItemCaptureTime
        case configurationItemMD5Hash
        case configurationItemStatus
        case configurationStateId
        case relatedEvents
        case relationships
        case resourceCreationTime
        case resourceId
        case resourceName
        case resourceType
        case supplementaryConfiguration
        case tags
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let configurationItemCaptureTime = configurationItemCaptureTime {
            try encodeContainer.encode(configurationItemCaptureTime.timeIntervalSince1970, forKey: .configurationItemCaptureTime)
        }
        if let configurationItemMD5Hash = configurationItemMD5Hash {
            try encodeContainer.encode(configurationItemMD5Hash, forKey: .configurationItemMD5Hash)
        }
        if let configurationItemStatus = configurationItemStatus {
            try encodeContainer.encode(configurationItemStatus.rawValue, forKey: .configurationItemStatus)
        }
        if let configurationStateId = configurationStateId {
            try encodeContainer.encode(configurationStateId, forKey: .configurationStateId)
        }
        if let relatedEvents = relatedEvents {
            var relatedEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedEvents)
            for relatedeventlist0 in relatedEvents {
                try relatedEventsContainer.encode(relatedeventlist0)
            }
        }
        if let relationships = relationships {
            var relationshipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relationships)
            for relationshiplist0 in relationships {
                try relationshipsContainer.encode(relationshiplist0)
            }
        }
        if let resourceCreationTime = resourceCreationTime {
            try encodeContainer.encode(resourceCreationTime.timeIntervalSince1970, forKey: .resourceCreationTime)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let supplementaryConfiguration = supplementaryConfiguration {
            var supplementaryConfigurationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .supplementaryConfiguration)
            for (dictKey0, supplementaryconfiguration0) in supplementaryConfiguration {
                try supplementaryConfigurationContainer.encode(supplementaryconfiguration0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let configurationItemCaptureTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .configurationItemCaptureTime)
        configurationItemCaptureTime = configurationItemCaptureTimeDecoded
        let configurationItemStatusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigurationItemStatus.self, forKey: .configurationItemStatus)
        configurationItemStatus = configurationItemStatusDecoded
        let configurationStateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationStateId)
        configurationStateId = configurationStateIdDecoded
        let configurationItemMD5HashDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationItemMD5Hash)
        configurationItemMD5Hash = configurationItemMD5HashDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let resourceCreationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .resourceCreationTime)
        resourceCreationTime = resourceCreationTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in tagsContainer {
                if let value0 = value0 {
                    tagsDecoded0?[key0] = value0
                }
            }
        }
        tags = tagsDecoded0
        let relatedEventsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .relatedEvents)
        var relatedEventsDecoded0:[Swift.String]? = nil
        if let relatedEventsContainer = relatedEventsContainer {
            relatedEventsDecoded0 = [Swift.String]()
            for string0 in relatedEventsContainer {
                if let string0 = string0 {
                    relatedEventsDecoded0?.append(string0)
                }
            }
        }
        relatedEvents = relatedEventsDecoded0
        let relationshipsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.Relationship?].self, forKey: .relationships)
        var relationshipsDecoded0:[ConfigClientTypes.Relationship]? = nil
        if let relationshipsContainer = relationshipsContainer {
            relationshipsDecoded0 = [ConfigClientTypes.Relationship]()
            for structure0 in relationshipsContainer {
                if let structure0 = structure0 {
                    relationshipsDecoded0?.append(structure0)
                }
            }
        }
        relationships = relationshipsDecoded0
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let supplementaryConfigurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .supplementaryConfiguration)
        var supplementaryConfigurationDecoded0: [Swift.String:Swift.String]? = nil
        if let supplementaryConfigurationContainer = supplementaryConfigurationContainer {
            supplementaryConfigurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, supplementaryconfigurationvalue0) in supplementaryConfigurationContainer {
                if let supplementaryconfigurationvalue0 = supplementaryconfigurationvalue0 {
                    supplementaryConfigurationDecoded0?[key0] = supplementaryconfigurationvalue0
                }
            }
        }
        supplementaryConfiguration = supplementaryConfigurationDecoded0
    }
}

extension ConfigClientTypes.ConfigurationItem: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigurationItem(accountId: \(Swift.String(describing: accountId)), arn: \(Swift.String(describing: arn)), availabilityZone: \(Swift.String(describing: availabilityZone)), awsRegion: \(Swift.String(describing: awsRegion)), configuration: \(Swift.String(describing: configuration)), configurationItemCaptureTime: \(Swift.String(describing: configurationItemCaptureTime)), configurationItemMD5Hash: \(Swift.String(describing: configurationItemMD5Hash)), configurationItemStatus: \(Swift.String(describing: configurationItemStatus)), configurationStateId: \(Swift.String(describing: configurationStateId)), relatedEvents: \(Swift.String(describing: relatedEvents)), relationships: \(Swift.String(describing: relationships)), resourceCreationTime: \(Swift.String(describing: resourceCreationTime)), resourceId: \(Swift.String(describing: resourceId)), resourceName: \(Swift.String(describing: resourceName)), resourceType: \(Swift.String(describing: resourceType)), supplementaryConfiguration: \(Swift.String(describing: supplementaryConfiguration)), tags: \(Swift.String(describing: tags)), version: \(Swift.String(describing: version)))"}
}

extension ConfigClientTypes {
    /// A list that contains detailed configurations of a specified
    /// 			resource.
    public struct ConfigurationItem: Swift.Equatable {
        /// The 12-digit AWS account ID associated with the
        /// 			resource.
        public let accountId: Swift.String?
        /// Amazon Resource Name (ARN) associated with the resource.
        public let arn: Swift.String?
        /// The Availability Zone associated with the resource.
        public let availabilityZone: Swift.String?
        /// The region where the resource resides.
        public let awsRegion: Swift.String?
        /// The description of the resource configuration.
        public let configuration: Swift.String?
        /// The time when the configuration recording was
        /// 			initiated.
        public let configurationItemCaptureTime: ClientRuntime.Date?
        /// Unique MD5 hash that represents the configuration item's
        /// 			state.
        /// 		       You can use MD5 hash to compare the states of two or more
        /// 			configuration items that are associated with the same
        /// 			resource.
        public let configurationItemMD5Hash: Swift.String?
        /// The configuration item status. The valid values are:
        /// 		
        /// 		
        ///
        ///                OK – The resource configuration has been updated
        ///
        ///
        ///                ResourceDiscovered – The resource was newly discovered
        ///
        ///
        ///                ResourceNotRecorded – The resource was discovered but its configuration was not recorded since the recorder excludes the recording of resources of this type
        ///
        ///
        ///                ResourceDeleted – The resource was deleted
        ///
        ///
        ///                ResourceDeletedNotRecorded – The resource was deleted but its configuration was not recorded since the recorder excludes the recording of resources of this type
        ///
        ///
        /// 		
        ///             The CIs do not incur any cost.
        ///
        public let configurationItemStatus: ConfigClientTypes.ConfigurationItemStatus?
        /// An identifier that indicates the ordering of the configuration
        /// 			items of a resource.
        public let configurationStateId: Swift.String?
        /// A list of CloudTrail event IDs.
        /// 		       A populated field indicates that the current configuration was
        /// 			initiated by the events recorded in the CloudTrail log. For more
        /// 			information about CloudTrail, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html">What Is AWS CloudTrail.
        /// 		       An empty field indicates that the current configuration was not
        /// 			initiated by any event. As of Version 1.3, the relatedEvents field is empty.
        /// 			You can access the <a href="https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_LookupEvents.html">LookupEvents API in the AWS CloudTrail API Reference to retrieve the events for the resource.
        public let relatedEvents: [Swift.String]?
        /// A list of related AWS resources.
        public let relationships: [ConfigClientTypes.Relationship]?
        /// The time stamp when the resource was created.
        public let resourceCreationTime: ClientRuntime.Date?
        /// The ID of the resource (for example,
        /// 			sg-xxxxxx).
        public let resourceId: Swift.String?
        /// The custom name of the resource, if available.
        public let resourceName: Swift.String?
        /// The type of AWS resource.
        public let resourceType: ConfigClientTypes.ResourceType?
        /// Configuration attributes that AWS Config returns for certain
        /// 			resource types to supplement the information returned for the
        /// 				configuration parameter.
        public let supplementaryConfiguration: [Swift.String:Swift.String]?
        /// A mapping of key value tags associated with the
        /// 			resource.
        public let tags: [Swift.String:Swift.String]?
        /// The version number of the resource configuration.
        public let version: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            arn: Swift.String? = nil,
            availabilityZone: Swift.String? = nil,
            awsRegion: Swift.String? = nil,
            configuration: Swift.String? = nil,
            configurationItemCaptureTime: ClientRuntime.Date? = nil,
            configurationItemMD5Hash: Swift.String? = nil,
            configurationItemStatus: ConfigClientTypes.ConfigurationItemStatus? = nil,
            configurationStateId: Swift.String? = nil,
            relatedEvents: [Swift.String]? = nil,
            relationships: [ConfigClientTypes.Relationship]? = nil,
            resourceCreationTime: ClientRuntime.Date? = nil,
            resourceId: Swift.String? = nil,
            resourceName: Swift.String? = nil,
            resourceType: ConfigClientTypes.ResourceType? = nil,
            supplementaryConfiguration: [Swift.String:Swift.String]? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            version: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.arn = arn
            self.availabilityZone = availabilityZone
            self.awsRegion = awsRegion
            self.configuration = configuration
            self.configurationItemCaptureTime = configurationItemCaptureTime
            self.configurationItemMD5Hash = configurationItemMD5Hash
            self.configurationItemStatus = configurationItemStatus
            self.configurationStateId = configurationStateId
            self.relatedEvents = relatedEvents
            self.relationships = relationships
            self.resourceCreationTime = resourceCreationTime
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.resourceType = resourceType
            self.supplementaryConfiguration = supplementaryConfiguration
            self.tags = tags
            self.version = version
        }
    }

}

extension ConfigClientTypes {
    public enum ConfigurationItemStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ok
        case resourcedeleted
        case resourcedeletednotrecorded
        case resourcediscovered
        case resourcenotrecorded
        case sdkUnknown(Swift.String)

        public static var allCases: [ConfigurationItemStatus] {
            return [
                .ok,
                .resourcedeleted,
                .resourcedeletednotrecorded,
                .resourcediscovered,
                .resourcenotrecorded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ok: return "OK"
            case .resourcedeleted: return "ResourceDeleted"
            case .resourcedeletednotrecorded: return "ResourceDeletedNotRecorded"
            case .resourcediscovered: return "ResourceDiscovered"
            case .resourcenotrecorded: return "ResourceNotRecorded"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConfigurationItemStatus(rawValue: rawValue) ?? ConfigurationItemStatus.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.ConfigurationRecorder: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case recordingGroup
        case roleARN
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let recordingGroup = recordingGroup {
            try encodeContainer.encode(recordingGroup, forKey: .recordingGroup)
        }
        if let roleARN = roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let recordingGroupDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.RecordingGroup.self, forKey: .recordingGroup)
        recordingGroup = recordingGroupDecoded
    }
}

extension ConfigClientTypes.ConfigurationRecorder: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigurationRecorder(name: \(Swift.String(describing: name)), recordingGroup: \(Swift.String(describing: recordingGroup)), roleARN: \(Swift.String(describing: roleARN)))"}
}

extension ConfigClientTypes {
    /// An object that represents the recording of configuration
    /// 			changes of an AWS resource.
    public struct ConfigurationRecorder: Swift.Equatable {
        /// The name of the recorder. By default, AWS Config automatically
        /// 			assigns the name "default" when creating the configuration recorder.
        /// 			You cannot change the assigned name.
        public let name: Swift.String?
        /// Specifies the types of AWS resources for which AWS Config
        /// 			records configuration changes.
        public let recordingGroup: ConfigClientTypes.RecordingGroup?
        /// Amazon Resource Name (ARN) of the IAM role used to describe the
        /// 			AWS resources associated with the account.
        public let roleARN: Swift.String?

        public init (
            name: Swift.String? = nil,
            recordingGroup: ConfigClientTypes.RecordingGroup? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.name = name
            self.recordingGroup = recordingGroup
            self.roleARN = roleARN
        }
    }

}

extension ConfigClientTypes.ConfigurationRecorderStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastErrorCode
        case lastErrorMessage
        case lastStartTime
        case lastStatus
        case lastStatusChangeTime
        case lastStopTime
        case name
        case recording
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastErrorCode = lastErrorCode {
            try encodeContainer.encode(lastErrorCode, forKey: .lastErrorCode)
        }
        if let lastErrorMessage = lastErrorMessage {
            try encodeContainer.encode(lastErrorMessage, forKey: .lastErrorMessage)
        }
        if let lastStartTime = lastStartTime {
            try encodeContainer.encode(lastStartTime.timeIntervalSince1970, forKey: .lastStartTime)
        }
        if let lastStatus = lastStatus {
            try encodeContainer.encode(lastStatus.rawValue, forKey: .lastStatus)
        }
        if let lastStatusChangeTime = lastStatusChangeTime {
            try encodeContainer.encode(lastStatusChangeTime.timeIntervalSince1970, forKey: .lastStatusChangeTime)
        }
        if let lastStopTime = lastStopTime {
            try encodeContainer.encode(lastStopTime.timeIntervalSince1970, forKey: .lastStopTime)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if recording != false {
            try encodeContainer.encode(recording, forKey: .recording)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let lastStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStartTime)
        lastStartTime = lastStartTimeDecoded
        let lastStopTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStopTime)
        lastStopTime = lastStopTimeDecoded
        let recordingDecoded = try containerValues.decode(Swift.Bool.self, forKey: .recording)
        recording = recordingDecoded
        let lastStatusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.RecorderStatus.self, forKey: .lastStatus)
        lastStatus = lastStatusDecoded
        let lastErrorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorCode)
        lastErrorCode = lastErrorCodeDecoded
        let lastErrorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastErrorMessage)
        lastErrorMessage = lastErrorMessageDecoded
        let lastStatusChangeTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastStatusChangeTime)
        lastStatusChangeTime = lastStatusChangeTimeDecoded
    }
}

extension ConfigClientTypes.ConfigurationRecorderStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConfigurationRecorderStatus(lastErrorCode: \(Swift.String(describing: lastErrorCode)), lastErrorMessage: \(Swift.String(describing: lastErrorMessage)), lastStartTime: \(Swift.String(describing: lastStartTime)), lastStatus: \(Swift.String(describing: lastStatus)), lastStatusChangeTime: \(Swift.String(describing: lastStatusChangeTime)), lastStopTime: \(Swift.String(describing: lastStopTime)), name: \(Swift.String(describing: name)), recording: \(Swift.String(describing: recording)))"}
}

extension ConfigClientTypes {
    /// The current status of the configuration recorder.
    public struct ConfigurationRecorderStatus: Swift.Equatable {
        /// The error code indicating that the recording failed.
        public let lastErrorCode: Swift.String?
        /// The message indicating that the recording failed due to an
        /// 			error.
        public let lastErrorMessage: Swift.String?
        /// The time the recorder was last started.
        public let lastStartTime: ClientRuntime.Date?
        /// The last (previous) status of the recorder.
        public let lastStatus: ConfigClientTypes.RecorderStatus?
        /// The time when the status was last changed.
        public let lastStatusChangeTime: ClientRuntime.Date?
        /// The time the recorder was last stopped.
        public let lastStopTime: ClientRuntime.Date?
        /// The name of the configuration recorder.
        public let name: Swift.String?
        /// Specifies whether or not the recorder is currently
        /// 			recording.
        public let recording: Swift.Bool

        public init (
            lastErrorCode: Swift.String? = nil,
            lastErrorMessage: Swift.String? = nil,
            lastStartTime: ClientRuntime.Date? = nil,
            lastStatus: ConfigClientTypes.RecorderStatus? = nil,
            lastStatusChangeTime: ClientRuntime.Date? = nil,
            lastStopTime: ClientRuntime.Date? = nil,
            name: Swift.String? = nil,
            recording: Swift.Bool = false
        )
        {
            self.lastErrorCode = lastErrorCode
            self.lastErrorMessage = lastErrorMessage
            self.lastStartTime = lastStartTime
            self.lastStatus = lastStatus
            self.lastStatusChangeTime = lastStatusChangeTime
            self.lastStopTime = lastStopTime
            self.name = name
            self.recording = recording
        }
    }

}

extension ConfigClientTypes.ConformancePackComplianceFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceType = "ComplianceType"
        case configRuleNames = "ConfigRuleNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleNames = configRuleNames {
            var configRuleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configRuleNames)
            for conformancepackconfigrulenames0 in configRuleNames {
                try configRuleNamesContainer.encode(conformancepackconfigrulenames0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configRuleNames)
        var configRuleNamesDecoded0:[Swift.String]? = nil
        if let configRuleNamesContainer = configRuleNamesContainer {
            configRuleNamesDecoded0 = [Swift.String]()
            for string0 in configRuleNamesContainer {
                if let string0 = string0 {
                    configRuleNamesDecoded0?.append(string0)
                }
            }
        }
        configRuleNames = configRuleNamesDecoded0
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
    }
}

extension ConfigClientTypes.ConformancePackComplianceFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConformancePackComplianceFilters(complianceType: \(Swift.String(describing: complianceType)), configRuleNames: \(Swift.String(describing: configRuleNames)))"}
}

extension ConfigClientTypes {
    /// Filters the conformance pack by compliance types and AWS Config rule names.
    public struct ConformancePackComplianceFilters: Swift.Equatable {
        /// Filters the results by compliance.
        /// 		       The allowed values are COMPLIANT and NON_COMPLIANT. INSUFFICIENT_DATA is not supported.
        public let complianceType: ConfigClientTypes.ConformancePackComplianceType?
        /// Filters the results by AWS Config rule names.
        public let configRuleNames: [Swift.String]?

        public init (
            complianceType: ConfigClientTypes.ConformancePackComplianceType? = nil,
            configRuleNames: [Swift.String]? = nil
        )
        {
            self.complianceType = complianceType
            self.configRuleNames = configRuleNames
        }
    }

}

extension ConfigClientTypes.ConformancePackComplianceSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackComplianceStatus = "ConformancePackComplianceStatus"
        case conformancePackName = "ConformancePackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackComplianceStatus = conformancePackComplianceStatus {
            try encodeContainer.encode(conformancePackComplianceStatus.rawValue, forKey: .conformancePackComplianceStatus)
        }
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let conformancePackComplianceStatusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceType.self, forKey: .conformancePackComplianceStatus)
        conformancePackComplianceStatus = conformancePackComplianceStatusDecoded
    }
}

extension ConfigClientTypes.ConformancePackComplianceSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConformancePackComplianceSummary(conformancePackComplianceStatus: \(Swift.String(describing: conformancePackComplianceStatus)), conformancePackName: \(Swift.String(describing: conformancePackName)))"}
}

extension ConfigClientTypes {
    /// Summary includes the name and status of the conformance pack.
    public struct ConformancePackComplianceSummary: Swift.Equatable {
        /// The status of the conformance pack. The allowed values are COMPLIANT, NON_COMPLIANT and INSUFFICIENT_DATA.
        /// This member is required.
        public let conformancePackComplianceStatus: ConfigClientTypes.ConformancePackComplianceType?
        /// The name of the conformance pack name.
        /// This member is required.
        public let conformancePackName: Swift.String?

        public init (
            conformancePackComplianceStatus: ConfigClientTypes.ConformancePackComplianceType? = nil,
            conformancePackName: Swift.String? = nil
        )
        {
            self.conformancePackComplianceStatus = conformancePackComplianceStatus
            self.conformancePackName = conformancePackName
        }
    }

}

extension ConfigClientTypes {
    public enum ConformancePackComplianceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case compliant
        case insufficientData
        case nonCompliant
        case sdkUnknown(Swift.String)

        public static var allCases: [ConformancePackComplianceType] {
            return [
                .compliant,
                .insufficientData,
                .nonCompliant,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .compliant: return "COMPLIANT"
            case .insufficientData: return "INSUFFICIENT_DATA"
            case .nonCompliant: return "NON_COMPLIANT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConformancePackComplianceType(rawValue: rawValue) ?? ConformancePackComplianceType.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.ConformancePackDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackArn = "ConformancePackArn"
        case conformancePackId = "ConformancePackId"
        case conformancePackInputParameters = "ConformancePackInputParameters"
        case conformancePackName = "ConformancePackName"
        case createdBy = "CreatedBy"
        case deliveryS3Bucket = "DeliveryS3Bucket"
        case deliveryS3KeyPrefix = "DeliveryS3KeyPrefix"
        case lastUpdateRequestedTime = "LastUpdateRequestedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackArn = conformancePackArn {
            try encodeContainer.encode(conformancePackArn, forKey: .conformancePackArn)
        }
        if let conformancePackId = conformancePackId {
            try encodeContainer.encode(conformancePackId, forKey: .conformancePackId)
        }
        if let conformancePackInputParameters = conformancePackInputParameters {
            var conformancePackInputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conformancePackInputParameters)
            for conformancepackinputparameters0 in conformancePackInputParameters {
                try conformancePackInputParametersContainer.encode(conformancepackinputparameters0)
            }
        }
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
        if let createdBy = createdBy {
            try encodeContainer.encode(createdBy, forKey: .createdBy)
        }
        if let deliveryS3Bucket = deliveryS3Bucket {
            try encodeContainer.encode(deliveryS3Bucket, forKey: .deliveryS3Bucket)
        }
        if let deliveryS3KeyPrefix = deliveryS3KeyPrefix {
            try encodeContainer.encode(deliveryS3KeyPrefix, forKey: .deliveryS3KeyPrefix)
        }
        if let lastUpdateRequestedTime = lastUpdateRequestedTime {
            try encodeContainer.encode(lastUpdateRequestedTime.timeIntervalSince1970, forKey: .lastUpdateRequestedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let conformancePackArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackArn)
        conformancePackArn = conformancePackArnDecoded
        let conformancePackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackId)
        conformancePackId = conformancePackIdDecoded
        let deliveryS3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryS3Bucket)
        deliveryS3Bucket = deliveryS3BucketDecoded
        let deliveryS3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryS3KeyPrefix)
        deliveryS3KeyPrefix = deliveryS3KeyPrefixDecoded
        let conformancePackInputParametersContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConformancePackInputParameter?].self, forKey: .conformancePackInputParameters)
        var conformancePackInputParametersDecoded0:[ConfigClientTypes.ConformancePackInputParameter]? = nil
        if let conformancePackInputParametersContainer = conformancePackInputParametersContainer {
            conformancePackInputParametersDecoded0 = [ConfigClientTypes.ConformancePackInputParameter]()
            for structure0 in conformancePackInputParametersContainer {
                if let structure0 = structure0 {
                    conformancePackInputParametersDecoded0?.append(structure0)
                }
            }
        }
        conformancePackInputParameters = conformancePackInputParametersDecoded0
        let lastUpdateRequestedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateRequestedTime)
        lastUpdateRequestedTime = lastUpdateRequestedTimeDecoded
        let createdByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdBy)
        createdBy = createdByDecoded
    }
}

extension ConfigClientTypes.ConformancePackDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConformancePackDetail(conformancePackArn: \(Swift.String(describing: conformancePackArn)), conformancePackId: \(Swift.String(describing: conformancePackId)), conformancePackInputParameters: \(Swift.String(describing: conformancePackInputParameters)), conformancePackName: \(Swift.String(describing: conformancePackName)), createdBy: \(Swift.String(describing: createdBy)), deliveryS3Bucket: \(Swift.String(describing: deliveryS3Bucket)), deliveryS3KeyPrefix: \(Swift.String(describing: deliveryS3KeyPrefix)), lastUpdateRequestedTime: \(Swift.String(describing: lastUpdateRequestedTime)))"}
}

extension ConfigClientTypes {
    /// Returns details of a conformance pack. A conformance pack is a collection of AWS Config rules and remediation actions that can be easily deployed in an account and a region.
    public struct ConformancePackDetail: Swift.Equatable {
        /// Amazon Resource Name (ARN) of the conformance pack.
        /// This member is required.
        public let conformancePackArn: Swift.String?
        /// ID of the conformance pack.
        /// This member is required.
        public let conformancePackId: Swift.String?
        /// A list of ConformancePackInputParameter objects.
        public let conformancePackInputParameters: [ConfigClientTypes.ConformancePackInputParameter]?
        /// Name of the conformance pack.
        /// This member is required.
        public let conformancePackName: Swift.String?
        /// AWS service that created the conformance pack.
        public let createdBy: Swift.String?
        /// Amazon S3 bucket where AWS Config stores conformance pack templates.
        /// 	
        ///             This field is optional.
        ///
        public let deliveryS3Bucket: Swift.String?
        /// The prefix for the Amazon S3 bucket.
        /// 		
        ///             This field is optional.
        ///
        public let deliveryS3KeyPrefix: Swift.String?
        /// Last time when conformation pack update was requested.
        public let lastUpdateRequestedTime: ClientRuntime.Date?

        public init (
            conformancePackArn: Swift.String? = nil,
            conformancePackId: Swift.String? = nil,
            conformancePackInputParameters: [ConfigClientTypes.ConformancePackInputParameter]? = nil,
            conformancePackName: Swift.String? = nil,
            createdBy: Swift.String? = nil,
            deliveryS3Bucket: Swift.String? = nil,
            deliveryS3KeyPrefix: Swift.String? = nil,
            lastUpdateRequestedTime: ClientRuntime.Date? = nil
        )
        {
            self.conformancePackArn = conformancePackArn
            self.conformancePackId = conformancePackId
            self.conformancePackInputParameters = conformancePackInputParameters
            self.conformancePackName = conformancePackName
            self.createdBy = createdBy
            self.deliveryS3Bucket = deliveryS3Bucket
            self.deliveryS3KeyPrefix = deliveryS3KeyPrefix
            self.lastUpdateRequestedTime = lastUpdateRequestedTime
        }
    }

}

extension ConfigClientTypes.ConformancePackEvaluationFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceType = "ComplianceType"
        case configRuleNames = "ConfigRuleNames"
        case resourceIds = "ResourceIds"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleNames = configRuleNames {
            var configRuleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configRuleNames)
            for conformancepackconfigrulenames0 in configRuleNames {
                try configRuleNamesContainer.encode(conformancepackconfigrulenames0)
            }
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for conformancepackcomplianceresourceids0 in resourceIds {
                try resourceIdsContainer.encode(conformancepackcomplianceresourceids0)
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configRuleNames)
        var configRuleNamesDecoded0:[Swift.String]? = nil
        if let configRuleNamesContainer = configRuleNamesContainer {
            configRuleNamesDecoded0 = [Swift.String]()
            for string0 in configRuleNamesContainer {
                if let string0 = string0 {
                    configRuleNamesDecoded0?.append(string0)
                }
            }
        }
        configRuleNames = configRuleNamesDecoded0
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Swift.String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Swift.String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
    }
}

extension ConfigClientTypes.ConformancePackEvaluationFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConformancePackEvaluationFilters(complianceType: \(Swift.String(describing: complianceType)), configRuleNames: \(Swift.String(describing: configRuleNames)), resourceIds: \(Swift.String(describing: resourceIds)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConfigClientTypes {
    /// Filters a conformance pack by AWS Config rule names, compliance types, AWS resource types, and resource IDs.
    public struct ConformancePackEvaluationFilters: Swift.Equatable {
        /// Filters the results by compliance.
        /// 		       The allowed values are COMPLIANT and NON_COMPLIANT. INSUFFICIENT_DATA is not supported.
        public let complianceType: ConfigClientTypes.ConformancePackComplianceType?
        /// Filters the results by AWS Config rule names.
        public let configRuleNames: [Swift.String]?
        /// Filters the results by resource IDs.
        /// 		
        ///             This is valid only when you provide resource type. If there is no resource type, you will see an error.
        ///
        public let resourceIds: [Swift.String]?
        /// Filters the results by the resource type (for example, "AWS::EC2::Instance").
        public let resourceType: Swift.String?

        public init (
            complianceType: ConfigClientTypes.ConformancePackComplianceType? = nil,
            configRuleNames: [Swift.String]? = nil,
            resourceIds: [Swift.String]? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.complianceType = complianceType
            self.configRuleNames = configRuleNames
            self.resourceIds = resourceIds
            self.resourceType = resourceType
        }
    }

}

extension ConfigClientTypes.ConformancePackEvaluationResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case annotation = "Annotation"
        case complianceType = "ComplianceType"
        case configRuleInvokedTime = "ConfigRuleInvokedTime"
        case evaluationResultIdentifier = "EvaluationResultIdentifier"
        case resultRecordedTime = "ResultRecordedTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotation = annotation {
            try encodeContainer.encode(annotation, forKey: .annotation)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleInvokedTime = configRuleInvokedTime {
            try encodeContainer.encode(configRuleInvokedTime.timeIntervalSince1970, forKey: .configRuleInvokedTime)
        }
        if let evaluationResultIdentifier = evaluationResultIdentifier {
            try encodeContainer.encode(evaluationResultIdentifier, forKey: .evaluationResultIdentifier)
        }
        if let resultRecordedTime = resultRecordedTime {
            try encodeContainer.encode(resultRecordedTime.timeIntervalSince1970, forKey: .resultRecordedTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let evaluationResultIdentifierDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.EvaluationResultIdentifier.self, forKey: .evaluationResultIdentifier)
        evaluationResultIdentifier = evaluationResultIdentifierDecoded
        let configRuleInvokedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .configRuleInvokedTime)
        configRuleInvokedTime = configRuleInvokedTimeDecoded
        let resultRecordedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .resultRecordedTime)
        resultRecordedTime = resultRecordedTimeDecoded
        let annotationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .annotation)
        annotation = annotationDecoded
    }
}

extension ConfigClientTypes.ConformancePackEvaluationResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConformancePackEvaluationResult(annotation: \(Swift.String(describing: annotation)), complianceType: \(Swift.String(describing: complianceType)), configRuleInvokedTime: \(Swift.String(describing: configRuleInvokedTime)), evaluationResultIdentifier: \(Swift.String(describing: evaluationResultIdentifier)), resultRecordedTime: \(Swift.String(describing: resultRecordedTime)))"}
}

extension ConfigClientTypes {
    /// The details of a conformance pack evaluation. Provides AWS Config rule and AWS resource type that was evaluated, the compliance of the conformance pack, related time stamps, and supplementary information.
    public struct ConformancePackEvaluationResult: Swift.Equatable {
        /// Supplementary information about how the evaluation determined the compliance.
        public let annotation: Swift.String?
        /// The compliance type. The allowed values are COMPLIANT and NON_COMPLIANT. INSUFFICIENT_DATA is not supported.
        /// This member is required.
        public let complianceType: ConfigClientTypes.ConformancePackComplianceType?
        /// The time when AWS Config rule evaluated AWS resource.
        /// This member is required.
        public let configRuleInvokedTime: ClientRuntime.Date?
        /// Uniquely identifies an evaluation result.
        /// This member is required.
        public let evaluationResultIdentifier: ConfigClientTypes.EvaluationResultIdentifier?
        /// The time when AWS Config recorded the evaluation result.
        /// This member is required.
        public let resultRecordedTime: ClientRuntime.Date?

        public init (
            annotation: Swift.String? = nil,
            complianceType: ConfigClientTypes.ConformancePackComplianceType? = nil,
            configRuleInvokedTime: ClientRuntime.Date? = nil,
            evaluationResultIdentifier: ConfigClientTypes.EvaluationResultIdentifier? = nil,
            resultRecordedTime: ClientRuntime.Date? = nil
        )
        {
            self.annotation = annotation
            self.complianceType = complianceType
            self.configRuleInvokedTime = configRuleInvokedTime
            self.evaluationResultIdentifier = evaluationResultIdentifier
            self.resultRecordedTime = resultRecordedTime
        }
    }

}

extension ConfigClientTypes.ConformancePackInputParameter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterName = "ParameterName"
        case parameterValue = "ParameterValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameterName = parameterName {
            try encodeContainer.encode(parameterName, forKey: .parameterName)
        }
        if let parameterValue = parameterValue {
            try encodeContainer.encode(parameterValue, forKey: .parameterValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterValue)
        parameterValue = parameterValueDecoded
    }
}

extension ConfigClientTypes.ConformancePackInputParameter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConformancePackInputParameter(parameterName: \(Swift.String(describing: parameterName)), parameterValue: \(Swift.String(describing: parameterValue)))"}
}

extension ConfigClientTypes {
    /// Input parameters in the form of key-value pairs for the conformance pack, both of which you define.
    /// 			Keys can have a maximum character length of 255 characters, and values can have a maximum length of 4096 characters.
    public struct ConformancePackInputParameter: Swift.Equatable {
        /// One part of a key-value pair.
        /// This member is required.
        public let parameterName: Swift.String?
        /// Another part of the key-value pair.
        /// This member is required.
        public let parameterValue: Swift.String?

        public init (
            parameterName: Swift.String? = nil,
            parameterValue: Swift.String? = nil
        )
        {
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }
    }

}

extension ConfigClientTypes.ConformancePackRuleCompliance: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceType = "ComplianceType"
        case configRuleName = "ConfigRuleName"
        case controls = "Controls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let controls = controls {
            var controlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .controls)
            for controlslist0 in controls {
                try controlsContainer.encode(controlslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let controlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .controls)
        var controlsDecoded0:[Swift.String]? = nil
        if let controlsContainer = controlsContainer {
            controlsDecoded0 = [Swift.String]()
            for string0 in controlsContainer {
                if let string0 = string0 {
                    controlsDecoded0?.append(string0)
                }
            }
        }
        controls = controlsDecoded0
    }
}

extension ConfigClientTypes.ConformancePackRuleCompliance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConformancePackRuleCompliance(complianceType: \(Swift.String(describing: complianceType)), configRuleName: \(Swift.String(describing: configRuleName)), controls: \(Swift.String(describing: controls)))"}
}

extension ConfigClientTypes {
    /// Compliance information of one or more AWS Config rules within a conformance pack. You can filter using AWS Config rule names and compliance types.
    public struct ConformancePackRuleCompliance: Swift.Equatable {
        /// Compliance of the AWS Config rule.
        /// 		       The allowed values are COMPLIANT, NON_COMPLIANT, and INSUFFICIENT_DATA.
        public let complianceType: ConfigClientTypes.ConformancePackComplianceType?
        /// Name of the config rule.
        public let configRuleName: Swift.String?
        /// Controls for the conformance pack. A control is a process to prevent or detect problems while meeting objectives.
        /// 			A control can align with a specific compliance regime or map to internal controls defined by an organization.
        public let controls: [Swift.String]?

        public init (
            complianceType: ConfigClientTypes.ConformancePackComplianceType? = nil,
            configRuleName: Swift.String? = nil,
            controls: [Swift.String]? = nil
        )
        {
            self.complianceType = complianceType
            self.configRuleName = configRuleName
            self.controls = controls
        }
    }

}

extension ConfigClientTypes {
    public enum ConformancePackState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createComplete
        case createFailed
        case createInProgress
        case deleteFailed
        case deleteInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ConformancePackState] {
            return [
                .createComplete,
                .createFailed,
                .createInProgress,
                .deleteFailed,
                .deleteInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createComplete: return "CREATE_COMPLETE"
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConformancePackState(rawValue: rawValue) ?? ConformancePackState.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.ConformancePackStatusDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackArn = "ConformancePackArn"
        case conformancePackId = "ConformancePackId"
        case conformancePackName = "ConformancePackName"
        case conformancePackState = "ConformancePackState"
        case conformancePackStatusReason = "ConformancePackStatusReason"
        case lastUpdateCompletedTime = "LastUpdateCompletedTime"
        case lastUpdateRequestedTime = "LastUpdateRequestedTime"
        case stackArn = "StackArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackArn = conformancePackArn {
            try encodeContainer.encode(conformancePackArn, forKey: .conformancePackArn)
        }
        if let conformancePackId = conformancePackId {
            try encodeContainer.encode(conformancePackId, forKey: .conformancePackId)
        }
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
        if let conformancePackState = conformancePackState {
            try encodeContainer.encode(conformancePackState.rawValue, forKey: .conformancePackState)
        }
        if let conformancePackStatusReason = conformancePackStatusReason {
            try encodeContainer.encode(conformancePackStatusReason, forKey: .conformancePackStatusReason)
        }
        if let lastUpdateCompletedTime = lastUpdateCompletedTime {
            try encodeContainer.encode(lastUpdateCompletedTime.timeIntervalSince1970, forKey: .lastUpdateCompletedTime)
        }
        if let lastUpdateRequestedTime = lastUpdateRequestedTime {
            try encodeContainer.encode(lastUpdateRequestedTime.timeIntervalSince1970, forKey: .lastUpdateRequestedTime)
        }
        if let stackArn = stackArn {
            try encodeContainer.encode(stackArn, forKey: .stackArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let conformancePackIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackId)
        conformancePackId = conformancePackIdDecoded
        let conformancePackArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackArn)
        conformancePackArn = conformancePackArnDecoded
        let conformancePackStateDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackState.self, forKey: .conformancePackState)
        conformancePackState = conformancePackStateDecoded
        let stackArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stackArn)
        stackArn = stackArnDecoded
        let conformancePackStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackStatusReason)
        conformancePackStatusReason = conformancePackStatusReasonDecoded
        let lastUpdateRequestedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateRequestedTime)
        lastUpdateRequestedTime = lastUpdateRequestedTimeDecoded
        let lastUpdateCompletedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateCompletedTime)
        lastUpdateCompletedTime = lastUpdateCompletedTimeDecoded
    }
}

extension ConfigClientTypes.ConformancePackStatusDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConformancePackStatusDetail(conformancePackArn: \(Swift.String(describing: conformancePackArn)), conformancePackId: \(Swift.String(describing: conformancePackId)), conformancePackName: \(Swift.String(describing: conformancePackName)), conformancePackState: \(Swift.String(describing: conformancePackState)), conformancePackStatusReason: \(Swift.String(describing: conformancePackStatusReason)), lastUpdateCompletedTime: \(Swift.String(describing: lastUpdateCompletedTime)), lastUpdateRequestedTime: \(Swift.String(describing: lastUpdateRequestedTime)), stackArn: \(Swift.String(describing: stackArn)))"}
}

extension ConfigClientTypes {
    /// Status details of a conformance pack.
    public struct ConformancePackStatusDetail: Swift.Equatable {
        /// Amazon Resource Name (ARN) of comformance pack.
        /// This member is required.
        public let conformancePackArn: Swift.String?
        /// ID of the conformance pack.
        /// This member is required.
        public let conformancePackId: Swift.String?
        /// Name of the conformance pack.
        /// This member is required.
        public let conformancePackName: Swift.String?
        /// Indicates deployment status of conformance pack.
        /// 		       AWS Config sets the state of the conformance pack to:
        /// 		
        ///
        ///                CREATE_IN_PROGRESS when a conformance pack creation is in progress for an account.
        ///
        ///
        ///                CREATE_COMPLETE when a conformance pack has been successfully created in your account.
        ///
        ///
        ///                CREATE_FAILED when a conformance pack creation failed in your account.
        ///
        ///
        ///                DELETE_IN_PROGRESS when a conformance pack deletion is in progress.
        ///
        ///
        ///                DELETE_FAILED when a conformance pack deletion failed in your account.
        ///
        ///
        /// This member is required.
        public let conformancePackState: ConfigClientTypes.ConformancePackState?
        /// The reason of conformance pack creation failure.
        public let conformancePackStatusReason: Swift.String?
        /// Last time when conformation pack creation and update was successful.
        public let lastUpdateCompletedTime: ClientRuntime.Date?
        /// Last time when conformation pack creation and update was requested.
        /// This member is required.
        public let lastUpdateRequestedTime: ClientRuntime.Date?
        /// Amazon Resource Name (ARN) of AWS CloudFormation stack.
        /// This member is required.
        public let stackArn: Swift.String?

        public init (
            conformancePackArn: Swift.String? = nil,
            conformancePackId: Swift.String? = nil,
            conformancePackName: Swift.String? = nil,
            conformancePackState: ConfigClientTypes.ConformancePackState? = nil,
            conformancePackStatusReason: Swift.String? = nil,
            lastUpdateCompletedTime: ClientRuntime.Date? = nil,
            lastUpdateRequestedTime: ClientRuntime.Date? = nil,
            stackArn: Swift.String? = nil
        )
        {
            self.conformancePackArn = conformancePackArn
            self.conformancePackId = conformancePackId
            self.conformancePackName = conformancePackName
            self.conformancePackState = conformancePackState
            self.conformancePackStatusReason = conformancePackStatusReason
            self.lastUpdateCompletedTime = lastUpdateCompletedTime
            self.lastUpdateRequestedTime = lastUpdateRequestedTime
            self.stackArn = stackArn
        }
    }

}

extension ConformancePackTemplateValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConformancePackTemplateValidationException(message: \(Swift.String(describing: message)))"}
}

extension ConformancePackTemplateValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConformancePackTemplateValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have specified a template that is not valid or supported.
public struct ConformancePackTemplateValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConformancePackTemplateValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConformancePackTemplateValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct DeleteAggregationAuthorizationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAggregationAuthorizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAggregationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAggregationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAggregationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAggregationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAggregationAuthorizationOutputError>
}

extension DeleteAggregationAuthorizationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAggregationAuthorizationInput(authorizedAccountId: \(Swift.String(describing: authorizedAccountId)), authorizedAwsRegion: \(Swift.String(describing: authorizedAwsRegion)))"}
}

extension DeleteAggregationAuthorizationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedAccountId = "AuthorizedAccountId"
        case authorizedAwsRegion = "AuthorizedAwsRegion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizedAccountId = authorizedAccountId {
            try encodeContainer.encode(authorizedAccountId, forKey: .authorizedAccountId)
        }
        if let authorizedAwsRegion = authorizedAwsRegion {
            try encodeContainer.encode(authorizedAwsRegion, forKey: .authorizedAwsRegion)
        }
    }
}

public struct DeleteAggregationAuthorizationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAggregationAuthorizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAggregationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAggregationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAggregationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAggregationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAggregationAuthorizationOutputError>
}

public struct DeleteAggregationAuthorizationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteAggregationAuthorizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteAggregationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteAggregationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteAggregationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteAggregationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteAggregationAuthorizationOutputError>
}

public struct DeleteAggregationAuthorizationInput: Swift.Equatable {
    /// The 12-digit account ID of the account authorized to aggregate
    /// 			data.
    /// This member is required.
    public let authorizedAccountId: Swift.String?
    /// The region authorized to collect aggregated data.
    /// This member is required.
    public let authorizedAwsRegion: Swift.String?

    public init (
        authorizedAccountId: Swift.String? = nil,
        authorizedAwsRegion: Swift.String? = nil
    )
    {
        self.authorizedAccountId = authorizedAccountId
        self.authorizedAwsRegion = authorizedAwsRegion
    }
}

struct DeleteAggregationAuthorizationInputBody: Swift.Equatable {
    public let authorizedAccountId: Swift.String?
    public let authorizedAwsRegion: Swift.String?
}

extension DeleteAggregationAuthorizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedAccountId = "AuthorizedAccountId"
        case authorizedAwsRegion = "AuthorizedAwsRegion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizedAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizedAccountId)
        authorizedAccountId = authorizedAccountIdDecoded
        let authorizedAwsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizedAwsRegion)
        authorizedAwsRegion = authorizedAwsRegionDecoded
    }
}

extension DeleteAggregationAuthorizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteAggregationAuthorizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteAggregationAuthorizationOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteAggregationAuthorizationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteAggregationAuthorizationOutputResponse()"}
}

extension DeleteAggregationAuthorizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteAggregationAuthorizationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteAggregationAuthorizationOutputResponseBody: Swift.Equatable {
}

extension DeleteAggregationAuthorizationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteConfigRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigRuleOutputError>
}

extension DeleteConfigRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigRuleInput(configRuleName: \(Swift.String(describing: configRuleName)))"}
}

extension DeleteConfigRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
    }
}

public struct DeleteConfigRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigRuleOutputError>
}

public struct DeleteConfigRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigRuleOutputError>
}

///
public struct DeleteConfigRuleInput: Swift.Equatable {
    /// The name of the AWS Config rule that you want to
    /// 			delete.
    /// This member is required.
    public let configRuleName: Swift.String?

    public init (
        configRuleName: Swift.String? = nil
    )
    {
        self.configRuleName = configRuleName
    }
}

struct DeleteConfigRuleInputBody: Swift.Equatable {
    public let configRuleName: Swift.String?
}

extension DeleteConfigRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
    }
}

extension DeleteConfigRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfigRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchConfigRuleException" : self = .noSuchConfigRuleException(try NoSuchConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConfigRuleOutputError: Swift.Error, Swift.Equatable {
    case noSuchConfigRuleException(NoSuchConfigRuleException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigRuleOutputResponse()"}
}

extension DeleteConfigRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteConfigRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteConfigRuleOutputResponseBody: Swift.Equatable {
}

extension DeleteConfigRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteConfigurationAggregatorInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationAggregatorInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationAggregatorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationAggregatorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationAggregatorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationAggregatorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationAggregatorOutputError>
}

extension DeleteConfigurationAggregatorInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationAggregatorInput(configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)))"}
}

extension DeleteConfigurationAggregatorInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
    }
}

public struct DeleteConfigurationAggregatorInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationAggregatorInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationAggregatorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationAggregatorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationAggregatorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationAggregatorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationAggregatorOutputError>
}

public struct DeleteConfigurationAggregatorInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationAggregatorInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationAggregatorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationAggregatorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationAggregatorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationAggregatorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationAggregatorOutputError>
}

public struct DeleteConfigurationAggregatorInput: Swift.Equatable {
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?

    public init (
        configurationAggregatorName: Swift.String? = nil
    )
    {
        self.configurationAggregatorName = configurationAggregatorName
    }
}

struct DeleteConfigurationAggregatorInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
}

extension DeleteConfigurationAggregatorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
    }
}

extension DeleteConfigurationAggregatorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfigurationAggregatorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConfigurationAggregatorOutputError: Swift.Error, Swift.Equatable {
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationAggregatorOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationAggregatorOutputResponse()"}
}

extension DeleteConfigurationAggregatorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteConfigurationAggregatorOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteConfigurationAggregatorOutputResponseBody: Swift.Equatable {
}

extension DeleteConfigurationAggregatorOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteConfigurationRecorderInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationRecorderInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationRecorderOutputError>
}

extension DeleteConfigurationRecorderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationRecorderInput(configurationRecorderName: \(Swift.String(describing: configurationRecorderName)))"}
}

extension DeleteConfigurationRecorderInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorderName = "ConfigurationRecorderName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationRecorderName = configurationRecorderName {
            try encodeContainer.encode(configurationRecorderName, forKey: .configurationRecorderName)
        }
    }
}

public struct DeleteConfigurationRecorderInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationRecorderInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationRecorderOutputError>
}

public struct DeleteConfigurationRecorderInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConfigurationRecorderInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConfigurationRecorderOutputError>
}

/// The request object for the
/// 				DeleteConfigurationRecorder action.
public struct DeleteConfigurationRecorderInput: Swift.Equatable {
    /// The name of the configuration recorder to be deleted. You can
    /// 			retrieve the name of your configuration recorder by using the
    /// 				DescribeConfigurationRecorders action.
    /// This member is required.
    public let configurationRecorderName: Swift.String?

    public init (
        configurationRecorderName: Swift.String? = nil
    )
    {
        self.configurationRecorderName = configurationRecorderName
    }
}

struct DeleteConfigurationRecorderInputBody: Swift.Equatable {
    public let configurationRecorderName: Swift.String?
}

extension DeleteConfigurationRecorderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorderName = "ConfigurationRecorderName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationRecorderNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationRecorderName)
        configurationRecorderName = configurationRecorderNameDecoded
    }
}

extension DeleteConfigurationRecorderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConfigurationRecorderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchConfigurationRecorderException" : self = .noSuchConfigurationRecorderException(try NoSuchConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConfigurationRecorderOutputError: Swift.Error, Swift.Equatable {
    case noSuchConfigurationRecorderException(NoSuchConfigurationRecorderException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConfigurationRecorderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConfigurationRecorderOutputResponse()"}
}

extension DeleteConfigurationRecorderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteConfigurationRecorderOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteConfigurationRecorderOutputResponseBody: Swift.Equatable {
}

extension DeleteConfigurationRecorderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteConformancePackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConformancePackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConformancePackOutputError>
}

extension DeleteConformancePackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConformancePackInput(conformancePackName: \(Swift.String(describing: conformancePackName)))"}
}

extension DeleteConformancePackInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackName = "ConformancePackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
    }
}

public struct DeleteConformancePackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConformancePackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConformancePackOutputError>
}

public struct DeleteConformancePackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteConformancePackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteConformancePackOutputError>
}

public struct DeleteConformancePackInput: Swift.Equatable {
    /// Name of the conformance pack you want to delete.
    /// This member is required.
    public let conformancePackName: Swift.String?

    public init (
        conformancePackName: Swift.String? = nil
    )
    {
        self.conformancePackName = conformancePackName
    }
}

struct DeleteConformancePackInputBody: Swift.Equatable {
    public let conformancePackName: Swift.String?
}

extension DeleteConformancePackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackName = "ConformancePackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
    }
}

extension DeleteConformancePackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteConformancePackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchConformancePackException" : self = .noSuchConformancePackException(try NoSuchConformancePackException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteConformancePackOutputError: Swift.Error, Swift.Equatable {
    case noSuchConformancePackException(NoSuchConformancePackException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteConformancePackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteConformancePackOutputResponse()"}
}

extension DeleteConformancePackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteConformancePackOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteConformancePackOutputResponseBody: Swift.Equatable {
}

extension DeleteConformancePackOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteDeliveryChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDeliveryChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDeliveryChannelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDeliveryChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDeliveryChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDeliveryChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDeliveryChannelOutputError>
}

extension DeleteDeliveryChannelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDeliveryChannelInput(deliveryChannelName: \(Swift.String(describing: deliveryChannelName)))"}
}

extension DeleteDeliveryChannelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannelName = "DeliveryChannelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryChannelName = deliveryChannelName {
            try encodeContainer.encode(deliveryChannelName, forKey: .deliveryChannelName)
        }
    }
}

public struct DeleteDeliveryChannelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDeliveryChannelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDeliveryChannelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDeliveryChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDeliveryChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDeliveryChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDeliveryChannelOutputError>
}

public struct DeleteDeliveryChannelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDeliveryChannelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDeliveryChannelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDeliveryChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDeliveryChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDeliveryChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDeliveryChannelOutputError>
}

/// The input for the DeleteDeliveryChannel
/// 			action. The action accepts the following data, in JSON format.
/// 		
public struct DeleteDeliveryChannelInput: Swift.Equatable {
    /// The name of the delivery channel to delete.
    /// This member is required.
    public let deliveryChannelName: Swift.String?

    public init (
        deliveryChannelName: Swift.String? = nil
    )
    {
        self.deliveryChannelName = deliveryChannelName
    }
}

struct DeleteDeliveryChannelInputBody: Swift.Equatable {
    public let deliveryChannelName: Swift.String?
}

extension DeleteDeliveryChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannelName = "DeliveryChannelName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryChannelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryChannelName)
        deliveryChannelName = deliveryChannelNameDecoded
    }
}

extension DeleteDeliveryChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDeliveryChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "LastDeliveryChannelDeleteFailedException" : self = .lastDeliveryChannelDeleteFailedException(try LastDeliveryChannelDeleteFailedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchDeliveryChannelException" : self = .noSuchDeliveryChannelException(try NoSuchDeliveryChannelException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDeliveryChannelOutputError: Swift.Error, Swift.Equatable {
    case lastDeliveryChannelDeleteFailedException(LastDeliveryChannelDeleteFailedException)
    case noSuchDeliveryChannelException(NoSuchDeliveryChannelException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDeliveryChannelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDeliveryChannelOutputResponse()"}
}

extension DeleteDeliveryChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDeliveryChannelOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteDeliveryChannelOutputResponseBody: Swift.Equatable {
}

extension DeleteDeliveryChannelOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteEvaluationResultsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEvaluationResultsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEvaluationResultsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEvaluationResultsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEvaluationResultsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEvaluationResultsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEvaluationResultsOutputError>
}

extension DeleteEvaluationResultsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteEvaluationResultsInput(configRuleName: \(Swift.String(describing: configRuleName)))"}
}

extension DeleteEvaluationResultsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
    }
}

public struct DeleteEvaluationResultsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEvaluationResultsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEvaluationResultsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEvaluationResultsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEvaluationResultsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEvaluationResultsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEvaluationResultsOutputError>
}

public struct DeleteEvaluationResultsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteEvaluationResultsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteEvaluationResultsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteEvaluationResultsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteEvaluationResultsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteEvaluationResultsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteEvaluationResultsOutputError>
}

///
public struct DeleteEvaluationResultsInput: Swift.Equatable {
    /// The name of the AWS Config rule for which you want to delete
    /// 			the evaluation results.
    /// This member is required.
    public let configRuleName: Swift.String?

    public init (
        configRuleName: Swift.String? = nil
    )
    {
        self.configRuleName = configRuleName
    }
}

struct DeleteEvaluationResultsInputBody: Swift.Equatable {
    public let configRuleName: Swift.String?
}

extension DeleteEvaluationResultsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
    }
}

extension DeleteEvaluationResultsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEvaluationResultsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchConfigRuleException" : self = .noSuchConfigRuleException(try NoSuchConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteEvaluationResultsOutputError: Swift.Error, Swift.Equatable {
    case noSuchConfigRuleException(NoSuchConfigRuleException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEvaluationResultsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteEvaluationResultsOutputResponse()"}
}

extension DeleteEvaluationResultsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The output when you delete the evaluation results for the
/// 			specified AWS Config rule.
public struct DeleteEvaluationResultsOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteEvaluationResultsOutputResponseBody: Swift.Equatable {
}

extension DeleteEvaluationResultsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteOrganizationConfigRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteOrganizationConfigRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteOrganizationConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteOrganizationConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteOrganizationConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteOrganizationConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteOrganizationConfigRuleOutputError>
}

extension DeleteOrganizationConfigRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteOrganizationConfigRuleInput(organizationConfigRuleName: \(Swift.String(describing: organizationConfigRuleName)))"}
}

extension DeleteOrganizationConfigRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationConfigRuleName = "OrganizationConfigRuleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let organizationConfigRuleName = organizationConfigRuleName {
            try encodeContainer.encode(organizationConfigRuleName, forKey: .organizationConfigRuleName)
        }
    }
}

public struct DeleteOrganizationConfigRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteOrganizationConfigRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteOrganizationConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteOrganizationConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteOrganizationConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteOrganizationConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteOrganizationConfigRuleOutputError>
}

public struct DeleteOrganizationConfigRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteOrganizationConfigRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteOrganizationConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteOrganizationConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteOrganizationConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteOrganizationConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteOrganizationConfigRuleOutputError>
}

public struct DeleteOrganizationConfigRuleInput: Swift.Equatable {
    /// The name of organization config rule that you want to delete.
    /// This member is required.
    public let organizationConfigRuleName: Swift.String?

    public init (
        organizationConfigRuleName: Swift.String? = nil
    )
    {
        self.organizationConfigRuleName = organizationConfigRuleName
    }
}

struct DeleteOrganizationConfigRuleInputBody: Swift.Equatable {
    public let organizationConfigRuleName: Swift.String?
}

extension DeleteOrganizationConfigRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationConfigRuleName = "OrganizationConfigRuleName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConfigRuleName)
        organizationConfigRuleName = organizationConfigRuleNameDecoded
    }
}

extension DeleteOrganizationConfigRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteOrganizationConfigRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchOrganizationConfigRuleException" : self = .noSuchOrganizationConfigRuleException(try NoSuchOrganizationConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAccessDeniedException" : self = .organizationAccessDeniedException(try OrganizationAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteOrganizationConfigRuleOutputError: Swift.Error, Swift.Equatable {
    case noSuchOrganizationConfigRuleException(NoSuchOrganizationConfigRuleException)
    case organizationAccessDeniedException(OrganizationAccessDeniedException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteOrganizationConfigRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteOrganizationConfigRuleOutputResponse()"}
}

extension DeleteOrganizationConfigRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteOrganizationConfigRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteOrganizationConfigRuleOutputResponseBody: Swift.Equatable {
}

extension DeleteOrganizationConfigRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteOrganizationConformancePackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteOrganizationConformancePackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteOrganizationConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteOrganizationConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteOrganizationConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteOrganizationConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteOrganizationConformancePackOutputError>
}

extension DeleteOrganizationConformancePackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteOrganizationConformancePackInput(organizationConformancePackName: \(Swift.String(describing: organizationConformancePackName)))"}
}

extension DeleteOrganizationConformancePackInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationConformancePackName = "OrganizationConformancePackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let organizationConformancePackName = organizationConformancePackName {
            try encodeContainer.encode(organizationConformancePackName, forKey: .organizationConformancePackName)
        }
    }
}

public struct DeleteOrganizationConformancePackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteOrganizationConformancePackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteOrganizationConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteOrganizationConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteOrganizationConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteOrganizationConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteOrganizationConformancePackOutputError>
}

public struct DeleteOrganizationConformancePackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteOrganizationConformancePackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteOrganizationConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteOrganizationConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteOrganizationConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteOrganizationConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteOrganizationConformancePackOutputError>
}

public struct DeleteOrganizationConformancePackInput: Swift.Equatable {
    /// The name of organization conformance pack that you want to delete.
    /// This member is required.
    public let organizationConformancePackName: Swift.String?

    public init (
        organizationConformancePackName: Swift.String? = nil
    )
    {
        self.organizationConformancePackName = organizationConformancePackName
    }
}

struct DeleteOrganizationConformancePackInputBody: Swift.Equatable {
    public let organizationConformancePackName: Swift.String?
}

extension DeleteOrganizationConformancePackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationConformancePackName = "OrganizationConformancePackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConformancePackName)
        organizationConformancePackName = organizationConformancePackNameDecoded
    }
}

extension DeleteOrganizationConformancePackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteOrganizationConformancePackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchOrganizationConformancePackException" : self = .noSuchOrganizationConformancePackException(try NoSuchOrganizationConformancePackException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAccessDeniedException" : self = .organizationAccessDeniedException(try OrganizationAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteOrganizationConformancePackOutputError: Swift.Error, Swift.Equatable {
    case noSuchOrganizationConformancePackException(NoSuchOrganizationConformancePackException)
    case organizationAccessDeniedException(OrganizationAccessDeniedException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteOrganizationConformancePackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteOrganizationConformancePackOutputResponse()"}
}

extension DeleteOrganizationConformancePackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteOrganizationConformancePackOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteOrganizationConformancePackOutputResponseBody: Swift.Equatable {
}

extension DeleteOrganizationConformancePackOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeletePendingAggregationRequestInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePendingAggregationRequestInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePendingAggregationRequestInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePendingAggregationRequestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePendingAggregationRequestInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePendingAggregationRequestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePendingAggregationRequestOutputError>
}

extension DeletePendingAggregationRequestInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePendingAggregationRequestInput(requesterAccountId: \(Swift.String(describing: requesterAccountId)), requesterAwsRegion: \(Swift.String(describing: requesterAwsRegion)))"}
}

extension DeletePendingAggregationRequestInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requesterAccountId = "RequesterAccountId"
        case requesterAwsRegion = "RequesterAwsRegion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let requesterAccountId = requesterAccountId {
            try encodeContainer.encode(requesterAccountId, forKey: .requesterAccountId)
        }
        if let requesterAwsRegion = requesterAwsRegion {
            try encodeContainer.encode(requesterAwsRegion, forKey: .requesterAwsRegion)
        }
    }
}

public struct DeletePendingAggregationRequestInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePendingAggregationRequestInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePendingAggregationRequestInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePendingAggregationRequestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePendingAggregationRequestInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePendingAggregationRequestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePendingAggregationRequestOutputError>
}

public struct DeletePendingAggregationRequestInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePendingAggregationRequestInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePendingAggregationRequestInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePendingAggregationRequestOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePendingAggregationRequestInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePendingAggregationRequestOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePendingAggregationRequestOutputError>
}

public struct DeletePendingAggregationRequestInput: Swift.Equatable {
    /// The 12-digit account ID of the account requesting to aggregate
    /// 			data.
    /// This member is required.
    public let requesterAccountId: Swift.String?
    /// The region requesting to aggregate data.
    /// This member is required.
    public let requesterAwsRegion: Swift.String?

    public init (
        requesterAccountId: Swift.String? = nil,
        requesterAwsRegion: Swift.String? = nil
    )
    {
        self.requesterAccountId = requesterAccountId
        self.requesterAwsRegion = requesterAwsRegion
    }
}

struct DeletePendingAggregationRequestInputBody: Swift.Equatable {
    public let requesterAccountId: Swift.String?
    public let requesterAwsRegion: Swift.String?
}

extension DeletePendingAggregationRequestInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requesterAccountId = "RequesterAccountId"
        case requesterAwsRegion = "RequesterAwsRegion"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requesterAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterAccountId)
        requesterAccountId = requesterAccountIdDecoded
        let requesterAwsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterAwsRegion)
        requesterAwsRegion = requesterAwsRegionDecoded
    }
}

extension DeletePendingAggregationRequestOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePendingAggregationRequestOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePendingAggregationRequestOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePendingAggregationRequestOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePendingAggregationRequestOutputResponse()"}
}

extension DeletePendingAggregationRequestOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePendingAggregationRequestOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeletePendingAggregationRequestOutputResponseBody: Swift.Equatable {
}

extension DeletePendingAggregationRequestOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteRemediationConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRemediationConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRemediationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRemediationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRemediationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRemediationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRemediationConfigurationOutputError>
}

extension DeleteRemediationConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRemediationConfigurationInput(configRuleName: \(Swift.String(describing: configRuleName)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension DeleteRemediationConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }
}

public struct DeleteRemediationConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRemediationConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRemediationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRemediationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRemediationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRemediationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRemediationConfigurationOutputError>
}

public struct DeleteRemediationConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRemediationConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRemediationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRemediationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRemediationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRemediationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRemediationConfigurationOutputError>
}

public struct DeleteRemediationConfigurationInput: Swift.Equatable {
    /// The name of the AWS Config rule for which you want to delete remediation configuration.
    /// This member is required.
    public let configRuleName: Swift.String?
    /// The type of a resource.
    public let resourceType: Swift.String?

    public init (
        configRuleName: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.configRuleName = configRuleName
        self.resourceType = resourceType
    }
}

struct DeleteRemediationConfigurationInputBody: Swift.Equatable {
    public let configRuleName: Swift.String?
    public let resourceType: Swift.String?
}

extension DeleteRemediationConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension DeleteRemediationConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRemediationConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchRemediationConfigurationException" : self = .noSuchRemediationConfigurationException(try NoSuchRemediationConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RemediationInProgressException" : self = .remediationInProgressException(try RemediationInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRemediationConfigurationOutputError: Swift.Error, Swift.Equatable {
    case insufficientPermissionsException(InsufficientPermissionsException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchRemediationConfigurationException(NoSuchRemediationConfigurationException)
    case remediationInProgressException(RemediationInProgressException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRemediationConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRemediationConfigurationOutputResponse()"}
}

extension DeleteRemediationConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRemediationConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteRemediationConfigurationOutputResponseBody: Swift.Equatable {
}

extension DeleteRemediationConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteRemediationExceptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRemediationExceptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRemediationExceptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRemediationExceptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRemediationExceptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRemediationExceptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRemediationExceptionsOutputError>
}

extension DeleteRemediationExceptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRemediationExceptionsInput(configRuleName: \(Swift.String(describing: configRuleName)), resourceKeys: \(Swift.String(describing: resourceKeys)))"}
}

extension DeleteRemediationExceptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case resourceKeys = "ResourceKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let resourceKeys = resourceKeys {
            var resourceKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceKeys)
            for remediationexceptionresourcekeys0 in resourceKeys {
                try resourceKeysContainer.encode(remediationexceptionresourcekeys0)
            }
        }
    }
}

public struct DeleteRemediationExceptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRemediationExceptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRemediationExceptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRemediationExceptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRemediationExceptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRemediationExceptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRemediationExceptionsOutputError>
}

public struct DeleteRemediationExceptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRemediationExceptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRemediationExceptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRemediationExceptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRemediationExceptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRemediationExceptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRemediationExceptionsOutputError>
}

public struct DeleteRemediationExceptionsInput: Swift.Equatable {
    /// The name of the AWS Config rule for which you want to delete remediation exception configuration.
    /// This member is required.
    public let configRuleName: Swift.String?
    /// An exception list of resource exception keys to be processed with the current request. AWS Config adds exception for each resource key. For example, AWS Config adds 3 exceptions for 3 resource keys.
    /// This member is required.
    public let resourceKeys: [ConfigClientTypes.RemediationExceptionResourceKey]?

    public init (
        configRuleName: Swift.String? = nil,
        resourceKeys: [ConfigClientTypes.RemediationExceptionResourceKey]? = nil
    )
    {
        self.configRuleName = configRuleName
        self.resourceKeys = resourceKeys
    }
}

struct DeleteRemediationExceptionsInputBody: Swift.Equatable {
    public let configRuleName: Swift.String?
    public let resourceKeys: [ConfigClientTypes.RemediationExceptionResourceKey]?
}

extension DeleteRemediationExceptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case resourceKeys = "ResourceKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let resourceKeysContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationExceptionResourceKey?].self, forKey: .resourceKeys)
        var resourceKeysDecoded0:[ConfigClientTypes.RemediationExceptionResourceKey]? = nil
        if let resourceKeysContainer = resourceKeysContainer {
            resourceKeysDecoded0 = [ConfigClientTypes.RemediationExceptionResourceKey]()
            for structure0 in resourceKeysContainer {
                if let structure0 = structure0 {
                    resourceKeysDecoded0?.append(structure0)
                }
            }
        }
        resourceKeys = resourceKeysDecoded0
    }
}

extension DeleteRemediationExceptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRemediationExceptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchRemediationExceptionException" : self = .noSuchRemediationExceptionException(try NoSuchRemediationExceptionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRemediationExceptionsOutputError: Swift.Error, Swift.Equatable {
    case noSuchRemediationExceptionException(NoSuchRemediationExceptionException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRemediationExceptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRemediationExceptionsOutputResponse(failedBatches: \(Swift.String(describing: failedBatches)))"}
}

extension DeleteRemediationExceptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteRemediationExceptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedBatches = output.failedBatches
        } else {
            self.failedBatches = nil
        }
    }
}

public struct DeleteRemediationExceptionsOutputResponse: Swift.Equatable {
    /// Returns a list of failed delete remediation exceptions batch objects. Each object in the batch consists of a list of failed items and failure messages.
    public let failedBatches: [ConfigClientTypes.FailedDeleteRemediationExceptionsBatch]?

    public init (
        failedBatches: [ConfigClientTypes.FailedDeleteRemediationExceptionsBatch]? = nil
    )
    {
        self.failedBatches = failedBatches
    }
}

struct DeleteRemediationExceptionsOutputResponseBody: Swift.Equatable {
    public let failedBatches: [ConfigClientTypes.FailedDeleteRemediationExceptionsBatch]?
}

extension DeleteRemediationExceptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedBatches = "FailedBatches"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedBatchesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.FailedDeleteRemediationExceptionsBatch?].self, forKey: .failedBatches)
        var failedBatchesDecoded0:[ConfigClientTypes.FailedDeleteRemediationExceptionsBatch]? = nil
        if let failedBatchesContainer = failedBatchesContainer {
            failedBatchesDecoded0 = [ConfigClientTypes.FailedDeleteRemediationExceptionsBatch]()
            for structure0 in failedBatchesContainer {
                if let structure0 = structure0 {
                    failedBatchesDecoded0?.append(structure0)
                }
            }
        }
        failedBatches = failedBatchesDecoded0
    }
}

public struct DeleteResourceConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteResourceConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteResourceConfigOutputError>
}

extension DeleteResourceConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteResourceConfigInput(resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension DeleteResourceConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }
}

public struct DeleteResourceConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteResourceConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteResourceConfigOutputError>
}

public struct DeleteResourceConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteResourceConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteResourceConfigOutputError>
}

public struct DeleteResourceConfigInput: Swift.Equatable {
    /// Unique identifier of the resource.
    /// This member is required.
    public let resourceId: Swift.String?
    /// The type of the resource.
    /// This member is required.
    public let resourceType: Swift.String?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct DeleteResourceConfigInputBody: Swift.Equatable {
    public let resourceType: Swift.String?
    public let resourceId: Swift.String?
}

extension DeleteResourceConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
    }
}

extension DeleteResourceConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourceConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoRunningConfigurationRecorderException" : self = .noRunningConfigurationRecorderException(try NoRunningConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteResourceConfigOutputError: Swift.Error, Swift.Equatable {
    case noRunningConfigurationRecorderException(NoRunningConfigurationRecorderException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteResourceConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteResourceConfigOutputResponse()"}
}

extension DeleteResourceConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteResourceConfigOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteResourceConfigOutputResponseBody: Swift.Equatable {
}

extension DeleteResourceConfigOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteRetentionConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRetentionConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRetentionConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRetentionConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRetentionConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRetentionConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRetentionConfigurationOutputError>
}

extension DeleteRetentionConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRetentionConfigurationInput(retentionConfigurationName: \(Swift.String(describing: retentionConfigurationName)))"}
}

extension DeleteRetentionConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retentionConfigurationName = "RetentionConfigurationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let retentionConfigurationName = retentionConfigurationName {
            try encodeContainer.encode(retentionConfigurationName, forKey: .retentionConfigurationName)
        }
    }
}

public struct DeleteRetentionConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRetentionConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRetentionConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRetentionConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRetentionConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRetentionConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRetentionConfigurationOutputError>
}

public struct DeleteRetentionConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRetentionConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRetentionConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRetentionConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRetentionConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRetentionConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRetentionConfigurationOutputError>
}

public struct DeleteRetentionConfigurationInput: Swift.Equatable {
    /// The name of the retention configuration to delete.
    /// This member is required.
    public let retentionConfigurationName: Swift.String?

    public init (
        retentionConfigurationName: Swift.String? = nil
    )
    {
        self.retentionConfigurationName = retentionConfigurationName
    }
}

struct DeleteRetentionConfigurationInputBody: Swift.Equatable {
    public let retentionConfigurationName: Swift.String?
}

extension DeleteRetentionConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retentionConfigurationName = "RetentionConfigurationName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retentionConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .retentionConfigurationName)
        retentionConfigurationName = retentionConfigurationNameDecoded
    }
}

extension DeleteRetentionConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRetentionConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchRetentionConfigurationException" : self = .noSuchRetentionConfigurationException(try NoSuchRetentionConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRetentionConfigurationOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchRetentionConfigurationException(NoSuchRetentionConfigurationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRetentionConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRetentionConfigurationOutputResponse()"}
}

extension DeleteRetentionConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRetentionConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteRetentionConfigurationOutputResponseBody: Swift.Equatable {
}

extension DeleteRetentionConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteStoredQueryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStoredQueryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStoredQueryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStoredQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStoredQueryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStoredQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStoredQueryOutputError>
}

extension DeleteStoredQueryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteStoredQueryInput(queryName: \(Swift.String(describing: queryName)))"}
}

extension DeleteStoredQueryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryName = "QueryName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryName = queryName {
            try encodeContainer.encode(queryName, forKey: .queryName)
        }
    }
}

public struct DeleteStoredQueryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStoredQueryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStoredQueryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStoredQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStoredQueryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStoredQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStoredQueryOutputError>
}

public struct DeleteStoredQueryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteStoredQueryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteStoredQueryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteStoredQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteStoredQueryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteStoredQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteStoredQueryOutputError>
}

public struct DeleteStoredQueryInput: Swift.Equatable {
    /// The name of the query that you want to delete.
    /// This member is required.
    public let queryName: Swift.String?

    public init (
        queryName: Swift.String? = nil
    )
    {
        self.queryName = queryName
    }
}

struct DeleteStoredQueryInputBody: Swift.Equatable {
    public let queryName: Swift.String?
}

extension DeleteStoredQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryName = "QueryName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryName)
        queryName = queryNameDecoded
    }
}

extension DeleteStoredQueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteStoredQueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteStoredQueryOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteStoredQueryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteStoredQueryOutputResponse()"}
}

extension DeleteStoredQueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteStoredQueryOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteStoredQueryOutputResponseBody: Swift.Equatable {
}

extension DeleteStoredQueryOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeliverConfigSnapshotInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeliverConfigSnapshotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeliverConfigSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeliverConfigSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeliverConfigSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeliverConfigSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeliverConfigSnapshotOutputError>
}

extension DeliverConfigSnapshotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeliverConfigSnapshotInput(deliveryChannelName: \(Swift.String(describing: deliveryChannelName)))"}
}

extension DeliverConfigSnapshotInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannelName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryChannelName = deliveryChannelName {
            try encodeContainer.encode(deliveryChannelName, forKey: .deliveryChannelName)
        }
    }
}

public struct DeliverConfigSnapshotInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeliverConfigSnapshotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeliverConfigSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeliverConfigSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeliverConfigSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeliverConfigSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeliverConfigSnapshotOutputError>
}

public struct DeliverConfigSnapshotInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeliverConfigSnapshotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeliverConfigSnapshotInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeliverConfigSnapshotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeliverConfigSnapshotInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeliverConfigSnapshotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeliverConfigSnapshotOutputError>
}

/// The input for the DeliverConfigSnapshot
/// 			action.
public struct DeliverConfigSnapshotInput: Swift.Equatable {
    /// The name of the delivery channel through which the snapshot is
    /// 			delivered.
    /// This member is required.
    public let deliveryChannelName: Swift.String?

    public init (
        deliveryChannelName: Swift.String? = nil
    )
    {
        self.deliveryChannelName = deliveryChannelName
    }
}

struct DeliverConfigSnapshotInputBody: Swift.Equatable {
    public let deliveryChannelName: Swift.String?
}

extension DeliverConfigSnapshotInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannelName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryChannelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryChannelName)
        deliveryChannelName = deliveryChannelNameDecoded
    }
}

extension DeliverConfigSnapshotOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeliverConfigSnapshotOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoAvailableConfigurationRecorderException" : self = .noAvailableConfigurationRecorderException(try NoAvailableConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoRunningConfigurationRecorderException" : self = .noRunningConfigurationRecorderException(try NoRunningConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchDeliveryChannelException" : self = .noSuchDeliveryChannelException(try NoSuchDeliveryChannelException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeliverConfigSnapshotOutputError: Swift.Error, Swift.Equatable {
    case noAvailableConfigurationRecorderException(NoAvailableConfigurationRecorderException)
    case noRunningConfigurationRecorderException(NoRunningConfigurationRecorderException)
    case noSuchDeliveryChannelException(NoSuchDeliveryChannelException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeliverConfigSnapshotOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeliverConfigSnapshotOutputResponse(configSnapshotId: \(Swift.String(describing: configSnapshotId)))"}
}

extension DeliverConfigSnapshotOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeliverConfigSnapshotOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configSnapshotId = output.configSnapshotId
        } else {
            self.configSnapshotId = nil
        }
    }
}

/// The output for the DeliverConfigSnapshot
/// 			action, in JSON format.
public struct DeliverConfigSnapshotOutputResponse: Swift.Equatable {
    /// The ID of the snapshot that is being created.
    public let configSnapshotId: Swift.String?

    public init (
        configSnapshotId: Swift.String? = nil
    )
    {
        self.configSnapshotId = configSnapshotId
    }
}

struct DeliverConfigSnapshotOutputResponseBody: Swift.Equatable {
    public let configSnapshotId: Swift.String?
}

extension DeliverConfigSnapshotOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configSnapshotId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configSnapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configSnapshotId)
        configSnapshotId = configSnapshotIdDecoded
    }
}

extension ConfigClientTypes.DeliveryChannel: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configSnapshotDeliveryProperties
        case name
        case s3BucketName
        case s3KeyPrefix
        case s3KmsKeyArn
        case snsTopicARN
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configSnapshotDeliveryProperties = configSnapshotDeliveryProperties {
            try encodeContainer.encode(configSnapshotDeliveryProperties, forKey: .configSnapshotDeliveryProperties)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let s3BucketName = s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let s3KeyPrefix = s3KeyPrefix {
            try encodeContainer.encode(s3KeyPrefix, forKey: .s3KeyPrefix)
        }
        if let s3KmsKeyArn = s3KmsKeyArn {
            try encodeContainer.encode(s3KmsKeyArn, forKey: .s3KmsKeyArn)
        }
        if let snsTopicARN = snsTopicARN {
            try encodeContainer.encode(snsTopicARN, forKey: .snsTopicARN)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let s3KmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KmsKeyArn)
        s3KmsKeyArn = s3KmsKeyArnDecoded
        let snsTopicARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicARN)
        snsTopicARN = snsTopicARNDecoded
        let configSnapshotDeliveryPropertiesDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigSnapshotDeliveryProperties.self, forKey: .configSnapshotDeliveryProperties)
        configSnapshotDeliveryProperties = configSnapshotDeliveryPropertiesDecoded
    }
}

extension ConfigClientTypes.DeliveryChannel: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeliveryChannel(configSnapshotDeliveryProperties: \(Swift.String(describing: configSnapshotDeliveryProperties)), name: \(Swift.String(describing: name)), s3BucketName: \(Swift.String(describing: s3BucketName)), s3KeyPrefix: \(Swift.String(describing: s3KeyPrefix)), s3KmsKeyArn: \(Swift.String(describing: s3KmsKeyArn)), snsTopicARN: \(Swift.String(describing: snsTopicARN)))"}
}

extension ConfigClientTypes {
    /// The channel through which AWS Config delivers notifications and
    /// 			updated configuration states.
    public struct DeliveryChannel: Swift.Equatable {
        /// The options for how often AWS Config delivers configuration
        /// 			snapshots to the Amazon S3 bucket.
        public let configSnapshotDeliveryProperties: ConfigClientTypes.ConfigSnapshotDeliveryProperties?
        /// The name of the delivery channel. By default, AWS Config
        /// 			assigns the name "default" when creating the delivery channel. To
        /// 			change the delivery channel name, you must use the
        /// 			DeleteDeliveryChannel action to delete your current delivery
        /// 			channel, and then you must use the PutDeliveryChannel command to
        /// 			create a delivery channel that has the desired name.
        public let name: Swift.String?
        /// The name of the Amazon S3 bucket to which AWS Config delivers
        /// 			configuration snapshots and configuration history files.
        /// 		       If you specify a bucket that belongs to another AWS account,
        /// 			that bucket must have policies that grant access permissions to AWS
        /// 			Config. For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-policy.html">Permissions for the Amazon S3 Bucket in the AWS Config
        /// 			Developer Guide.
        public let s3BucketName: Swift.String?
        /// The prefix for the specified Amazon S3 bucket.
        public let s3KeyPrefix: Swift.String?
        /// The Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) customer managed key (CMK) used to encrypt objects delivered by AWS Config.
        /// 			Must belong to the same Region as the destination S3 bucket.
        public let s3KmsKeyArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which
        /// 			AWS Config sends notifications about configuration
        /// 			changes.
        /// 		       If you choose a topic from another account, the topic must have
        /// 			policies that grant access permissions to AWS Config. For more
        /// 			information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/sns-topic-policy.html">Permissions for the Amazon SNS Topic in the AWS Config
        /// 			Developer Guide.
        public let snsTopicARN: Swift.String?

        public init (
            configSnapshotDeliveryProperties: ConfigClientTypes.ConfigSnapshotDeliveryProperties? = nil,
            name: Swift.String? = nil,
            s3BucketName: Swift.String? = nil,
            s3KeyPrefix: Swift.String? = nil,
            s3KmsKeyArn: Swift.String? = nil,
            snsTopicARN: Swift.String? = nil
        )
        {
            self.configSnapshotDeliveryProperties = configSnapshotDeliveryProperties
            self.name = name
            self.s3BucketName = s3BucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.s3KmsKeyArn = s3KmsKeyArn
            self.snsTopicARN = snsTopicARN
        }
    }

}

extension ConfigClientTypes.DeliveryChannelStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configHistoryDeliveryInfo
        case configSnapshotDeliveryInfo
        case configStreamDeliveryInfo
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configHistoryDeliveryInfo = configHistoryDeliveryInfo {
            try encodeContainer.encode(configHistoryDeliveryInfo, forKey: .configHistoryDeliveryInfo)
        }
        if let configSnapshotDeliveryInfo = configSnapshotDeliveryInfo {
            try encodeContainer.encode(configSnapshotDeliveryInfo, forKey: .configSnapshotDeliveryInfo)
        }
        if let configStreamDeliveryInfo = configStreamDeliveryInfo {
            try encodeContainer.encode(configStreamDeliveryInfo, forKey: .configStreamDeliveryInfo)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let configSnapshotDeliveryInfoDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigExportDeliveryInfo.self, forKey: .configSnapshotDeliveryInfo)
        configSnapshotDeliveryInfo = configSnapshotDeliveryInfoDecoded
        let configHistoryDeliveryInfoDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigExportDeliveryInfo.self, forKey: .configHistoryDeliveryInfo)
        configHistoryDeliveryInfo = configHistoryDeliveryInfoDecoded
        let configStreamDeliveryInfoDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigStreamDeliveryInfo.self, forKey: .configStreamDeliveryInfo)
        configStreamDeliveryInfo = configStreamDeliveryInfoDecoded
    }
}

extension ConfigClientTypes.DeliveryChannelStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeliveryChannelStatus(configHistoryDeliveryInfo: \(Swift.String(describing: configHistoryDeliveryInfo)), configSnapshotDeliveryInfo: \(Swift.String(describing: configSnapshotDeliveryInfo)), configStreamDeliveryInfo: \(Swift.String(describing: configStreamDeliveryInfo)), name: \(Swift.String(describing: name)))"}
}

extension ConfigClientTypes {
    /// The status of a specified delivery channel.
    /// 		       Valid values: Success | Failure
    /// 		
    public struct DeliveryChannelStatus: Swift.Equatable {
        /// A list that contains the status of the delivery of the
        /// 			configuration history to the specified Amazon S3 bucket.
        public let configHistoryDeliveryInfo: ConfigClientTypes.ConfigExportDeliveryInfo?
        /// A list containing the status of the delivery of the snapshot to
        /// 			the specified Amazon S3 bucket.
        public let configSnapshotDeliveryInfo: ConfigClientTypes.ConfigExportDeliveryInfo?
        /// A list containing the status of the delivery of the
        /// 			configuration stream notification to the specified Amazon SNS
        /// 			topic.
        public let configStreamDeliveryInfo: ConfigClientTypes.ConfigStreamDeliveryInfo?
        /// The name of the delivery channel.
        public let name: Swift.String?

        public init (
            configHistoryDeliveryInfo: ConfigClientTypes.ConfigExportDeliveryInfo? = nil,
            configSnapshotDeliveryInfo: ConfigClientTypes.ConfigExportDeliveryInfo? = nil,
            configStreamDeliveryInfo: ConfigClientTypes.ConfigStreamDeliveryInfo? = nil,
            name: Swift.String? = nil
        )
        {
            self.configHistoryDeliveryInfo = configHistoryDeliveryInfo
            self.configSnapshotDeliveryInfo = configSnapshotDeliveryInfo
            self.configStreamDeliveryInfo = configStreamDeliveryInfo
            self.name = name
        }
    }

}

extension ConfigClientTypes {
    public enum DeliveryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failure
        case notApplicable
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryStatus] {
            return [
                .failure,
                .notApplicable,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failure: return "Failure"
            case .notApplicable: return "Not_Applicable"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliveryStatus(rawValue: rawValue) ?? DeliveryStatus.sdkUnknown(rawValue)
        }
    }
}

public struct DescribeAggregateComplianceByConfigRulesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAggregateComplianceByConfigRulesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConfigRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAggregateComplianceByConfigRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConfigRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAggregateComplianceByConfigRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAggregateComplianceByConfigRulesOutputError>
}

extension DescribeAggregateComplianceByConfigRulesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAggregateComplianceByConfigRulesInput(configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), filters: \(Swift.String(describing: filters)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAggregateComplianceByConfigRulesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeAggregateComplianceByConfigRulesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAggregateComplianceByConfigRulesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConfigRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAggregateComplianceByConfigRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConfigRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAggregateComplianceByConfigRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAggregateComplianceByConfigRulesOutputError>
}

public struct DescribeAggregateComplianceByConfigRulesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAggregateComplianceByConfigRulesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConfigRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAggregateComplianceByConfigRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConfigRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAggregateComplianceByConfigRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAggregateComplianceByConfigRulesOutputError>
}

public struct DescribeAggregateComplianceByConfigRulesInput: Swift.Equatable {
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// Filters the results by ConfigRuleComplianceFilters object.
    /// 		
    public let filters: ConfigClientTypes.ConfigRuleComplianceFilters?
    /// The maximum number of evaluation results returned on each page.
    /// 			The default is
    /// 			maximum.
    /// 			If you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        configurationAggregatorName: Swift.String? = nil,
        filters: ConfigClientTypes.ConfigRuleComplianceFilters? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationAggregatorName = configurationAggregatorName
        self.filters = filters
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeAggregateComplianceByConfigRulesInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
    public let filters: ConfigClientTypes.ConfigRuleComplianceFilters?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeAggregateComplianceByConfigRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigRuleComplianceFilters.self, forKey: .filters)
        filters = filtersDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeAggregateComplianceByConfigRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAggregateComplianceByConfigRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAggregateComplianceByConfigRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAggregateComplianceByConfigRulesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAggregateComplianceByConfigRulesOutputResponse(aggregateComplianceByConfigRules: \(Swift.String(describing: aggregateComplianceByConfigRules)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAggregateComplianceByConfigRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAggregateComplianceByConfigRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aggregateComplianceByConfigRules = output.aggregateComplianceByConfigRules
            self.nextToken = output.nextToken
        } else {
            self.aggregateComplianceByConfigRules = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAggregateComplianceByConfigRulesOutputResponse: Swift.Equatable {
    /// Returns a list of AggregateComplianceByConfigRule
    /// 			object.
    public let aggregateComplianceByConfigRules: [ConfigClientTypes.AggregateComplianceByConfigRule]?
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        aggregateComplianceByConfigRules: [ConfigClientTypes.AggregateComplianceByConfigRule]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aggregateComplianceByConfigRules = aggregateComplianceByConfigRules
        self.nextToken = nextToken
    }
}

struct DescribeAggregateComplianceByConfigRulesOutputResponseBody: Swift.Equatable {
    public let aggregateComplianceByConfigRules: [ConfigClientTypes.AggregateComplianceByConfigRule]?
    public let nextToken: Swift.String?
}

extension DescribeAggregateComplianceByConfigRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateComplianceByConfigRules = "AggregateComplianceByConfigRules"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregateComplianceByConfigRulesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregateComplianceByConfigRule?].self, forKey: .aggregateComplianceByConfigRules)
        var aggregateComplianceByConfigRulesDecoded0:[ConfigClientTypes.AggregateComplianceByConfigRule]? = nil
        if let aggregateComplianceByConfigRulesContainer = aggregateComplianceByConfigRulesContainer {
            aggregateComplianceByConfigRulesDecoded0 = [ConfigClientTypes.AggregateComplianceByConfigRule]()
            for structure0 in aggregateComplianceByConfigRulesContainer {
                if let structure0 = structure0 {
                    aggregateComplianceByConfigRulesDecoded0?.append(structure0)
                }
            }
        }
        aggregateComplianceByConfigRules = aggregateComplianceByConfigRulesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeAggregateComplianceByConformancePacksInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAggregateComplianceByConformancePacksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConformancePacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAggregateComplianceByConformancePacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConformancePacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAggregateComplianceByConformancePacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAggregateComplianceByConformancePacksOutputError>
}

extension DescribeAggregateComplianceByConformancePacksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAggregateComplianceByConformancePacksInput(configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), filters: \(Swift.String(describing: filters)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAggregateComplianceByConformancePacksInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeAggregateComplianceByConformancePacksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAggregateComplianceByConformancePacksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConformancePacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAggregateComplianceByConformancePacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConformancePacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAggregateComplianceByConformancePacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAggregateComplianceByConformancePacksOutputError>
}

public struct DescribeAggregateComplianceByConformancePacksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAggregateComplianceByConformancePacksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConformancePacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAggregateComplianceByConformancePacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAggregateComplianceByConformancePacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAggregateComplianceByConformancePacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAggregateComplianceByConformancePacksOutputError>
}

public struct DescribeAggregateComplianceByConformancePacksInput: Swift.Equatable {
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// Filters the result by AggregateConformancePackComplianceFilters object.
    public let filters: ConfigClientTypes.AggregateConformancePackComplianceFilters?
    /// The maximum number of conformance packs compliance details returned on each page. The default is maximum. If you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        configurationAggregatorName: Swift.String? = nil,
        filters: ConfigClientTypes.AggregateConformancePackComplianceFilters? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationAggregatorName = configurationAggregatorName
        self.filters = filters
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeAggregateComplianceByConformancePacksInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
    public let filters: ConfigClientTypes.AggregateConformancePackComplianceFilters?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeAggregateComplianceByConformancePacksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.AggregateConformancePackComplianceFilters.self, forKey: .filters)
        filters = filtersDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeAggregateComplianceByConformancePacksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAggregateComplianceByConformancePacksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAggregateComplianceByConformancePacksOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAggregateComplianceByConformancePacksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAggregateComplianceByConformancePacksOutputResponse(aggregateComplianceByConformancePacks: \(Swift.String(describing: aggregateComplianceByConformancePacks)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAggregateComplianceByConformancePacksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAggregateComplianceByConformancePacksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aggregateComplianceByConformancePacks = output.aggregateComplianceByConformancePacks
            self.nextToken = output.nextToken
        } else {
            self.aggregateComplianceByConformancePacks = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAggregateComplianceByConformancePacksOutputResponse: Swift.Equatable {
    /// Returns the AggregateComplianceByConformancePack object.
    public let aggregateComplianceByConformancePacks: [ConfigClientTypes.AggregateComplianceByConformancePack]?
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        aggregateComplianceByConformancePacks: [ConfigClientTypes.AggregateComplianceByConformancePack]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aggregateComplianceByConformancePacks = aggregateComplianceByConformancePacks
        self.nextToken = nextToken
    }
}

struct DescribeAggregateComplianceByConformancePacksOutputResponseBody: Swift.Equatable {
    public let aggregateComplianceByConformancePacks: [ConfigClientTypes.AggregateComplianceByConformancePack]?
    public let nextToken: Swift.String?
}

extension DescribeAggregateComplianceByConformancePacksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateComplianceByConformancePacks = "AggregateComplianceByConformancePacks"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregateComplianceByConformancePacksContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregateComplianceByConformancePack?].self, forKey: .aggregateComplianceByConformancePacks)
        var aggregateComplianceByConformancePacksDecoded0:[ConfigClientTypes.AggregateComplianceByConformancePack]? = nil
        if let aggregateComplianceByConformancePacksContainer = aggregateComplianceByConformancePacksContainer {
            aggregateComplianceByConformancePacksDecoded0 = [ConfigClientTypes.AggregateComplianceByConformancePack]()
            for structure0 in aggregateComplianceByConformancePacksContainer {
                if let structure0 = structure0 {
                    aggregateComplianceByConformancePacksDecoded0?.append(structure0)
                }
            }
        }
        aggregateComplianceByConformancePacks = aggregateComplianceByConformancePacksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeAggregationAuthorizationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAggregationAuthorizationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAggregationAuthorizationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAggregationAuthorizationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAggregationAuthorizationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAggregationAuthorizationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAggregationAuthorizationsOutputError>
}

extension DescribeAggregationAuthorizationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAggregationAuthorizationsInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAggregationAuthorizationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeAggregationAuthorizationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAggregationAuthorizationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAggregationAuthorizationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAggregationAuthorizationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAggregationAuthorizationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAggregationAuthorizationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAggregationAuthorizationsOutputError>
}

public struct DescribeAggregationAuthorizationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeAggregationAuthorizationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeAggregationAuthorizationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeAggregationAuthorizationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeAggregationAuthorizationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeAggregationAuthorizationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeAggregationAuthorizationsOutputError>
}

public struct DescribeAggregationAuthorizationsInput: Swift.Equatable {
    /// The maximum number of AggregationAuthorizations returned on
    /// 			each page. The default is maximum. If you specify 0, AWS Config uses
    /// 			the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeAggregationAuthorizationsInputBody: Swift.Equatable {
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeAggregationAuthorizationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeAggregationAuthorizationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeAggregationAuthorizationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeAggregationAuthorizationsOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeAggregationAuthorizationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeAggregationAuthorizationsOutputResponse(aggregationAuthorizations: \(Swift.String(describing: aggregationAuthorizations)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeAggregationAuthorizationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeAggregationAuthorizationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aggregationAuthorizations = output.aggregationAuthorizations
            self.nextToken = output.nextToken
        } else {
            self.aggregationAuthorizations = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeAggregationAuthorizationsOutputResponse: Swift.Equatable {
    /// Returns a list of authorizations granted to various aggregator
    /// 			accounts and regions.
    public let aggregationAuthorizations: [ConfigClientTypes.AggregationAuthorization]?
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        aggregationAuthorizations: [ConfigClientTypes.AggregationAuthorization]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aggregationAuthorizations = aggregationAuthorizations
        self.nextToken = nextToken
    }
}

struct DescribeAggregationAuthorizationsOutputResponseBody: Swift.Equatable {
    public let aggregationAuthorizations: [ConfigClientTypes.AggregationAuthorization]?
    public let nextToken: Swift.String?
}

extension DescribeAggregationAuthorizationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregationAuthorizations = "AggregationAuthorizations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregationAuthorizationsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregationAuthorization?].self, forKey: .aggregationAuthorizations)
        var aggregationAuthorizationsDecoded0:[ConfigClientTypes.AggregationAuthorization]? = nil
        if let aggregationAuthorizationsContainer = aggregationAuthorizationsContainer {
            aggregationAuthorizationsDecoded0 = [ConfigClientTypes.AggregationAuthorization]()
            for structure0 in aggregationAuthorizationsContainer {
                if let structure0 = structure0 {
                    aggregationAuthorizationsDecoded0?.append(structure0)
                }
            }
        }
        aggregationAuthorizations = aggregationAuthorizationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeComplianceByConfigRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeComplianceByConfigRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeComplianceByConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeComplianceByConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeComplianceByConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeComplianceByConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeComplianceByConfigRuleOutputError>
}

extension DescribeComplianceByConfigRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeComplianceByConfigRuleInput(complianceTypes: \(Swift.String(describing: complianceTypes)), configRuleNames: \(Swift.String(describing: configRuleNames)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeComplianceByConfigRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceTypes = "ComplianceTypes"
        case configRuleNames = "ConfigRuleNames"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceTypes = complianceTypes {
            var complianceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .complianceTypes)
            for compliancetypes0 in complianceTypes {
                try complianceTypesContainer.encode(compliancetypes0.rawValue)
            }
        }
        if let configRuleNames = configRuleNames {
            var configRuleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configRuleNames)
            for configrulenames0 in configRuleNames {
                try configRuleNamesContainer.encode(configrulenames0)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeComplianceByConfigRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeComplianceByConfigRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeComplianceByConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeComplianceByConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeComplianceByConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeComplianceByConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeComplianceByConfigRuleOutputError>
}

public struct DescribeComplianceByConfigRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeComplianceByConfigRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeComplianceByConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeComplianceByConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeComplianceByConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeComplianceByConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeComplianceByConfigRuleOutputError>
}

///
public struct DescribeComplianceByConfigRuleInput: Swift.Equatable {
    /// Filters the results by compliance.
    /// 		       The allowed values are COMPLIANT and NON_COMPLIANT.
    public let complianceTypes: [ConfigClientTypes.ComplianceType]?
    /// Specify one or more AWS Config rule names to filter the results
    /// 			by rule.
    public let configRuleNames: [Swift.String]?
    /// The nextToken string returned on a previous page
    /// 			that you use to get the next page of results in a paginated
    /// 			response.
    public let nextToken: Swift.String?

    public init (
        complianceTypes: [ConfigClientTypes.ComplianceType]? = nil,
        configRuleNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.complianceTypes = complianceTypes
        self.configRuleNames = configRuleNames
        self.nextToken = nextToken
    }
}

struct DescribeComplianceByConfigRuleInputBody: Swift.Equatable {
    public let configRuleNames: [Swift.String]?
    public let complianceTypes: [ConfigClientTypes.ComplianceType]?
    public let nextToken: Swift.String?
}

extension DescribeComplianceByConfigRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceTypes = "ComplianceTypes"
        case configRuleNames = "ConfigRuleNames"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configRuleNames)
        var configRuleNamesDecoded0:[Swift.String]? = nil
        if let configRuleNamesContainer = configRuleNamesContainer {
            configRuleNamesDecoded0 = [Swift.String]()
            for string0 in configRuleNamesContainer {
                if let string0 = string0 {
                    configRuleNamesDecoded0?.append(string0)
                }
            }
        }
        configRuleNames = configRuleNamesDecoded0
        let complianceTypesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ComplianceType?].self, forKey: .complianceTypes)
        var complianceTypesDecoded0:[ConfigClientTypes.ComplianceType]? = nil
        if let complianceTypesContainer = complianceTypesContainer {
            complianceTypesDecoded0 = [ConfigClientTypes.ComplianceType]()
            for string0 in complianceTypesContainer {
                if let string0 = string0 {
                    complianceTypesDecoded0?.append(string0)
                }
            }
        }
        complianceTypes = complianceTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeComplianceByConfigRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeComplianceByConfigRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigRuleException" : self = .noSuchConfigRuleException(try NoSuchConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeComplianceByConfigRuleOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchConfigRuleException(NoSuchConfigRuleException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeComplianceByConfigRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeComplianceByConfigRuleOutputResponse(complianceByConfigRules: \(Swift.String(describing: complianceByConfigRules)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeComplianceByConfigRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeComplianceByConfigRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.complianceByConfigRules = output.complianceByConfigRules
            self.nextToken = output.nextToken
        } else {
            self.complianceByConfigRules = nil
            self.nextToken = nil
        }
    }
}

///
public struct DescribeComplianceByConfigRuleOutputResponse: Swift.Equatable {
    /// Indicates whether each of the specified AWS Config rules is
    /// 			compliant.
    public let complianceByConfigRules: [ConfigClientTypes.ComplianceByConfigRule]?
    /// The string that you use in a subsequent request to get the next
    /// 			page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        complianceByConfigRules: [ConfigClientTypes.ComplianceByConfigRule]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.complianceByConfigRules = complianceByConfigRules
        self.nextToken = nextToken
    }
}

struct DescribeComplianceByConfigRuleOutputResponseBody: Swift.Equatable {
    public let complianceByConfigRules: [ConfigClientTypes.ComplianceByConfigRule]?
    public let nextToken: Swift.String?
}

extension DescribeComplianceByConfigRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceByConfigRules = "ComplianceByConfigRules"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceByConfigRulesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ComplianceByConfigRule?].self, forKey: .complianceByConfigRules)
        var complianceByConfigRulesDecoded0:[ConfigClientTypes.ComplianceByConfigRule]? = nil
        if let complianceByConfigRulesContainer = complianceByConfigRulesContainer {
            complianceByConfigRulesDecoded0 = [ConfigClientTypes.ComplianceByConfigRule]()
            for structure0 in complianceByConfigRulesContainer {
                if let structure0 = structure0 {
                    complianceByConfigRulesDecoded0?.append(structure0)
                }
            }
        }
        complianceByConfigRules = complianceByConfigRulesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeComplianceByResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeComplianceByResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeComplianceByResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeComplianceByResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeComplianceByResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeComplianceByResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeComplianceByResourceOutputError>
}

extension DescribeComplianceByResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeComplianceByResourceInput(complianceTypes: \(Swift.String(describing: complianceTypes)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension DescribeComplianceByResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceTypes = "ComplianceTypes"
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceTypes = complianceTypes {
            var complianceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .complianceTypes)
            for compliancetypes0 in complianceTypes {
                try complianceTypesContainer.encode(compliancetypes0.rawValue)
            }
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }
}

public struct DescribeComplianceByResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeComplianceByResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeComplianceByResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeComplianceByResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeComplianceByResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeComplianceByResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeComplianceByResourceOutputError>
}

public struct DescribeComplianceByResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeComplianceByResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeComplianceByResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeComplianceByResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeComplianceByResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeComplianceByResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeComplianceByResourceOutputError>
}

///
public struct DescribeComplianceByResourceInput: Swift.Equatable {
    /// Filters the results by compliance.
    /// 		       The allowed values are COMPLIANT, NON_COMPLIANT, and INSUFFICIENT_DATA.
    public let complianceTypes: [ConfigClientTypes.ComplianceType]?
    /// The maximum number of evaluation results returned on each page.
    /// 			The default is 10. You cannot specify a number greater than 100. If
    /// 			you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page
    /// 			that you use to get the next page of results in a paginated
    /// 			response.
    public let nextToken: Swift.String?
    /// The ID of the AWS resource for which you want compliance
    /// 			information. You can specify only one resource ID. If you specify a
    /// 			resource ID, you must also specify a type for
    /// 				ResourceType.
    public let resourceId: Swift.String?
    /// The types of AWS resources for which you want compliance
    /// 			information (for example, AWS::EC2::Instance). For this
    /// 			action, you can specify that the resource type is an AWS account by
    /// 			specifying AWS::::Account.
    public let resourceType: Swift.String?

    public init (
        complianceTypes: [ConfigClientTypes.ComplianceType]? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.complianceTypes = complianceTypes
        self.limit = limit
        self.nextToken = nextToken
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct DescribeComplianceByResourceInputBody: Swift.Equatable {
    public let resourceType: Swift.String?
    public let resourceId: Swift.String?
    public let complianceTypes: [ConfigClientTypes.ComplianceType]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeComplianceByResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceTypes = "ComplianceTypes"
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let complianceTypesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ComplianceType?].self, forKey: .complianceTypes)
        var complianceTypesDecoded0:[ConfigClientTypes.ComplianceType]? = nil
        if let complianceTypesContainer = complianceTypesContainer {
            complianceTypesDecoded0 = [ConfigClientTypes.ComplianceType]()
            for string0 in complianceTypesContainer {
                if let string0 = string0 {
                    complianceTypesDecoded0?.append(string0)
                }
            }
        }
        complianceTypes = complianceTypesDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeComplianceByResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeComplianceByResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeComplianceByResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeComplianceByResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeComplianceByResourceOutputResponse(complianceByResources: \(Swift.String(describing: complianceByResources)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeComplianceByResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeComplianceByResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.complianceByResources = output.complianceByResources
            self.nextToken = output.nextToken
        } else {
            self.complianceByResources = nil
            self.nextToken = nil
        }
    }
}

///
public struct DescribeComplianceByResourceOutputResponse: Swift.Equatable {
    /// Indicates whether the specified AWS resource complies with all
    /// 			of the AWS Config rules that evaluate it.
    public let complianceByResources: [ConfigClientTypes.ComplianceByResource]?
    /// The string that you use in a subsequent request to get the next
    /// 			page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        complianceByResources: [ConfigClientTypes.ComplianceByResource]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.complianceByResources = complianceByResources
        self.nextToken = nextToken
    }
}

struct DescribeComplianceByResourceOutputResponseBody: Swift.Equatable {
    public let complianceByResources: [ConfigClientTypes.ComplianceByResource]?
    public let nextToken: Swift.String?
}

extension DescribeComplianceByResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceByResources = "ComplianceByResources"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceByResourcesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ComplianceByResource?].self, forKey: .complianceByResources)
        var complianceByResourcesDecoded0:[ConfigClientTypes.ComplianceByResource]? = nil
        if let complianceByResourcesContainer = complianceByResourcesContainer {
            complianceByResourcesDecoded0 = [ConfigClientTypes.ComplianceByResource]()
            for structure0 in complianceByResourcesContainer {
                if let structure0 = structure0 {
                    complianceByResourcesDecoded0?.append(structure0)
                }
            }
        }
        complianceByResources = complianceByResourcesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeConfigRuleEvaluationStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigRuleEvaluationStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigRuleEvaluationStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigRuleEvaluationStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigRuleEvaluationStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigRuleEvaluationStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigRuleEvaluationStatusOutputError>
}

extension DescribeConfigRuleEvaluationStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigRuleEvaluationStatusInput(configRuleNames: \(Swift.String(describing: configRuleNames)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConfigRuleEvaluationStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleNames = "ConfigRuleNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleNames = configRuleNames {
            var configRuleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configRuleNames)
            for configrulenames0 in configRuleNames {
                try configRuleNamesContainer.encode(configrulenames0)
            }
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeConfigRuleEvaluationStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigRuleEvaluationStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigRuleEvaluationStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigRuleEvaluationStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigRuleEvaluationStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigRuleEvaluationStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigRuleEvaluationStatusOutputError>
}

public struct DescribeConfigRuleEvaluationStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigRuleEvaluationStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigRuleEvaluationStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigRuleEvaluationStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigRuleEvaluationStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigRuleEvaluationStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigRuleEvaluationStatusOutputError>
}

///
public struct DescribeConfigRuleEvaluationStatusInput: Swift.Equatable {
    /// The name of the AWS managed Config rules for which you want
    /// 			status information. If you do not specify any names, AWS Config
    /// 			returns status information for all AWS managed Config rules that you
    /// 			use.
    public let configRuleNames: [Swift.String]?
    /// The number of rule evaluation results that you want
    /// 			returned.
    /// 		
    /// 		       This parameter is required if the rule limit for your account
    /// 			is more than the default of 150 rules.
    /// 		       For information about requesting a rule limit increase, see
    /// 				<a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_config">AWS Config Limits in the AWS General
    /// 				Reference Guide.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page
    /// 			that you use to get the next page of results in a paginated
    /// 			response.
    public let nextToken: Swift.String?

    public init (
        configRuleNames: [Swift.String]? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.configRuleNames = configRuleNames
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeConfigRuleEvaluationStatusInputBody: Swift.Equatable {
    public let configRuleNames: [Swift.String]?
    public let nextToken: Swift.String?
    public let limit: Swift.Int
}

extension DescribeConfigRuleEvaluationStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleNames = "ConfigRuleNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configRuleNames)
        var configRuleNamesDecoded0:[Swift.String]? = nil
        if let configRuleNamesContainer = configRuleNamesContainer {
            configRuleNamesDecoded0 = [Swift.String]()
            for string0 in configRuleNamesContainer {
                if let string0 = string0 {
                    configRuleNamesDecoded0?.append(string0)
                }
            }
        }
        configRuleNames = configRuleNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeConfigRuleEvaluationStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConfigRuleEvaluationStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigRuleException" : self = .noSuchConfigRuleException(try NoSuchConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConfigRuleEvaluationStatusOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchConfigRuleException(NoSuchConfigRuleException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConfigRuleEvaluationStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigRuleEvaluationStatusOutputResponse(configRulesEvaluationStatus: \(Swift.String(describing: configRulesEvaluationStatus)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConfigRuleEvaluationStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConfigRuleEvaluationStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configRulesEvaluationStatus = output.configRulesEvaluationStatus
            self.nextToken = output.nextToken
        } else {
            self.configRulesEvaluationStatus = nil
            self.nextToken = nil
        }
    }
}

///
public struct DescribeConfigRuleEvaluationStatusOutputResponse: Swift.Equatable {
    /// Status information about your AWS managed Config
    /// 			rules.
    public let configRulesEvaluationStatus: [ConfigClientTypes.ConfigRuleEvaluationStatus]?
    /// The string that you use in a subsequent request to get the next
    /// 			page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        configRulesEvaluationStatus: [ConfigClientTypes.ConfigRuleEvaluationStatus]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configRulesEvaluationStatus = configRulesEvaluationStatus
        self.nextToken = nextToken
    }
}

struct DescribeConfigRuleEvaluationStatusOutputResponseBody: Swift.Equatable {
    public let configRulesEvaluationStatus: [ConfigClientTypes.ConfigRuleEvaluationStatus]?
    public let nextToken: Swift.String?
}

extension DescribeConfigRuleEvaluationStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRulesEvaluationStatus = "ConfigRulesEvaluationStatus"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRulesEvaluationStatusContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConfigRuleEvaluationStatus?].self, forKey: .configRulesEvaluationStatus)
        var configRulesEvaluationStatusDecoded0:[ConfigClientTypes.ConfigRuleEvaluationStatus]? = nil
        if let configRulesEvaluationStatusContainer = configRulesEvaluationStatusContainer {
            configRulesEvaluationStatusDecoded0 = [ConfigClientTypes.ConfigRuleEvaluationStatus]()
            for structure0 in configRulesEvaluationStatusContainer {
                if let structure0 = structure0 {
                    configRulesEvaluationStatusDecoded0?.append(structure0)
                }
            }
        }
        configRulesEvaluationStatus = configRulesEvaluationStatusDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeConfigRulesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigRulesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigRulesOutputError>
}

extension DescribeConfigRulesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigRulesInput(configRuleNames: \(Swift.String(describing: configRuleNames)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConfigRulesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleNames = "ConfigRuleNames"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleNames = configRuleNames {
            var configRuleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configRuleNames)
            for configrulenames0 in configRuleNames {
                try configRuleNamesContainer.encode(configrulenames0)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeConfigRulesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigRulesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigRulesOutputError>
}

public struct DescribeConfigRulesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigRulesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigRulesOutputError>
}

///
public struct DescribeConfigRulesInput: Swift.Equatable {
    /// The names of the AWS Config rules for which you want details.
    /// 			If you do not specify any names, AWS Config returns details for all
    /// 			your rules.
    public let configRuleNames: [Swift.String]?
    /// The nextToken string returned on a previous page
    /// 			that you use to get the next page of results in a paginated
    /// 			response.
    public let nextToken: Swift.String?

    public init (
        configRuleNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configRuleNames = configRuleNames
        self.nextToken = nextToken
    }
}

struct DescribeConfigRulesInputBody: Swift.Equatable {
    public let configRuleNames: [Swift.String]?
    public let nextToken: Swift.String?
}

extension DescribeConfigRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleNames = "ConfigRuleNames"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configRuleNames)
        var configRuleNamesDecoded0:[Swift.String]? = nil
        if let configRuleNamesContainer = configRuleNamesContainer {
            configRuleNamesDecoded0 = [Swift.String]()
            for string0 in configRuleNamesContainer {
                if let string0 = string0 {
                    configRuleNamesDecoded0?.append(string0)
                }
            }
        }
        configRuleNames = configRuleNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeConfigRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConfigRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigRuleException" : self = .noSuchConfigRuleException(try NoSuchConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConfigRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchConfigRuleException(NoSuchConfigRuleException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConfigRulesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigRulesOutputResponse(configRules: \(Swift.String(describing: configRules)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConfigRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConfigRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configRules = output.configRules
            self.nextToken = output.nextToken
        } else {
            self.configRules = nil
            self.nextToken = nil
        }
    }
}

///
public struct DescribeConfigRulesOutputResponse: Swift.Equatable {
    /// The details about your AWS Config rules.
    public let configRules: [ConfigClientTypes.ConfigRule]?
    /// The string that you use in a subsequent request to get the next
    /// 			page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        configRules: [ConfigClientTypes.ConfigRule]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configRules = configRules
        self.nextToken = nextToken
    }
}

struct DescribeConfigRulesOutputResponseBody: Swift.Equatable {
    public let configRules: [ConfigClientTypes.ConfigRule]?
    public let nextToken: Swift.String?
}

extension DescribeConfigRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRules = "ConfigRules"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRulesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConfigRule?].self, forKey: .configRules)
        var configRulesDecoded0:[ConfigClientTypes.ConfigRule]? = nil
        if let configRulesContainer = configRulesContainer {
            configRulesDecoded0 = [ConfigClientTypes.ConfigRule]()
            for structure0 in configRulesContainer {
                if let structure0 = structure0 {
                    configRulesDecoded0?.append(structure0)
                }
            }
        }
        configRules = configRulesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeConfigurationAggregatorSourcesStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationAggregatorSourcesStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorSourcesStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationAggregatorSourcesStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorSourcesStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationAggregatorSourcesStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationAggregatorSourcesStatusOutputError>
}

extension DescribeConfigurationAggregatorSourcesStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigurationAggregatorSourcesStatusInput(configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), updateStatus: \(Swift.String(describing: updateStatus)))"}
}

extension DescribeConfigurationAggregatorSourcesStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case updateStatus = "UpdateStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let updateStatus = updateStatus {
            var updateStatusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updateStatus)
            for aggregatedsourcestatustypelist0 in updateStatus {
                try updateStatusContainer.encode(aggregatedsourcestatustypelist0.rawValue)
            }
        }
    }
}

public struct DescribeConfigurationAggregatorSourcesStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationAggregatorSourcesStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorSourcesStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationAggregatorSourcesStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorSourcesStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationAggregatorSourcesStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationAggregatorSourcesStatusOutputError>
}

public struct DescribeConfigurationAggregatorSourcesStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationAggregatorSourcesStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorSourcesStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationAggregatorSourcesStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorSourcesStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationAggregatorSourcesStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationAggregatorSourcesStatusOutputError>
}

public struct DescribeConfigurationAggregatorSourcesStatusInput: Swift.Equatable {
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// The maximum number of AggregatorSourceStatus returned on each
    /// 			page. The default is maximum. If you specify 0, AWS Config uses the
    /// 			default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// Filters the status type.
    /// 		
    ///
    /// 				           Valid value FAILED indicates errors while moving
    /// 					data.
    /// 			
    ///
    /// 				           Valid value SUCCEEDED indicates the data was
    /// 					successfully moved.
    /// 			
    ///
    /// 				           Valid value OUTDATED indicates the data is not the most
    /// 					recent.
    /// 			
    ///
    public let updateStatus: [ConfigClientTypes.AggregatedSourceStatusType]?

    public init (
        configurationAggregatorName: Swift.String? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        updateStatus: [ConfigClientTypes.AggregatedSourceStatusType]? = nil
    )
    {
        self.configurationAggregatorName = configurationAggregatorName
        self.limit = limit
        self.nextToken = nextToken
        self.updateStatus = updateStatus
    }
}

struct DescribeConfigurationAggregatorSourcesStatusInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
    public let updateStatus: [ConfigClientTypes.AggregatedSourceStatusType]?
    public let nextToken: Swift.String?
    public let limit: Swift.Int
}

extension DescribeConfigurationAggregatorSourcesStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case updateStatus = "UpdateStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let updateStatusContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregatedSourceStatusType?].self, forKey: .updateStatus)
        var updateStatusDecoded0:[ConfigClientTypes.AggregatedSourceStatusType]? = nil
        if let updateStatusContainer = updateStatusContainer {
            updateStatusDecoded0 = [ConfigClientTypes.AggregatedSourceStatusType]()
            for string0 in updateStatusContainer {
                if let string0 = string0 {
                    updateStatusDecoded0?.append(string0)
                }
            }
        }
        updateStatus = updateStatusDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeConfigurationAggregatorSourcesStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConfigurationAggregatorSourcesStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConfigurationAggregatorSourcesStatusOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConfigurationAggregatorSourcesStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigurationAggregatorSourcesStatusOutputResponse(aggregatedSourceStatusList: \(Swift.String(describing: aggregatedSourceStatusList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConfigurationAggregatorSourcesStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConfigurationAggregatorSourcesStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aggregatedSourceStatusList = output.aggregatedSourceStatusList
            self.nextToken = output.nextToken
        } else {
            self.aggregatedSourceStatusList = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeConfigurationAggregatorSourcesStatusOutputResponse: Swift.Equatable {
    /// Returns an AggregatedSourceStatus object.
    /// 			
    public let aggregatedSourceStatusList: [ConfigClientTypes.AggregatedSourceStatus]?
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        aggregatedSourceStatusList: [ConfigClientTypes.AggregatedSourceStatus]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aggregatedSourceStatusList = aggregatedSourceStatusList
        self.nextToken = nextToken
    }
}

struct DescribeConfigurationAggregatorSourcesStatusOutputResponseBody: Swift.Equatable {
    public let aggregatedSourceStatusList: [ConfigClientTypes.AggregatedSourceStatus]?
    public let nextToken: Swift.String?
}

extension DescribeConfigurationAggregatorSourcesStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregatedSourceStatusList = "AggregatedSourceStatusList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregatedSourceStatusListContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregatedSourceStatus?].self, forKey: .aggregatedSourceStatusList)
        var aggregatedSourceStatusListDecoded0:[ConfigClientTypes.AggregatedSourceStatus]? = nil
        if let aggregatedSourceStatusListContainer = aggregatedSourceStatusListContainer {
            aggregatedSourceStatusListDecoded0 = [ConfigClientTypes.AggregatedSourceStatus]()
            for structure0 in aggregatedSourceStatusListContainer {
                if let structure0 = structure0 {
                    aggregatedSourceStatusListDecoded0?.append(structure0)
                }
            }
        }
        aggregatedSourceStatusList = aggregatedSourceStatusListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeConfigurationAggregatorsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationAggregatorsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationAggregatorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationAggregatorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationAggregatorsOutputError>
}

extension DescribeConfigurationAggregatorsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigurationAggregatorsInput(configurationAggregatorNames: \(Swift.String(describing: configurationAggregatorNames)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConfigurationAggregatorsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorNames = "ConfigurationAggregatorNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorNames = configurationAggregatorNames {
            var configurationAggregatorNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurationAggregatorNames)
            for configurationaggregatornamelist0 in configurationAggregatorNames {
                try configurationAggregatorNamesContainer.encode(configurationaggregatornamelist0)
            }
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeConfigurationAggregatorsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationAggregatorsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationAggregatorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationAggregatorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationAggregatorsOutputError>
}

public struct DescribeConfigurationAggregatorsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationAggregatorsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationAggregatorsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationAggregatorsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationAggregatorsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationAggregatorsOutputError>
}

public struct DescribeConfigurationAggregatorsInput: Swift.Equatable {
    /// The name of the configuration aggregators.
    public let configurationAggregatorNames: [Swift.String]?
    /// The maximum number of configuration aggregators returned on
    /// 			each page. The default is maximum. If you specify 0, AWS Config uses
    /// 			the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        configurationAggregatorNames: [Swift.String]? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationAggregatorNames = configurationAggregatorNames
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeConfigurationAggregatorsInputBody: Swift.Equatable {
    public let configurationAggregatorNames: [Swift.String]?
    public let nextToken: Swift.String?
    public let limit: Swift.Int
}

extension DescribeConfigurationAggregatorsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorNames = "ConfigurationAggregatorNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configurationAggregatorNames)
        var configurationAggregatorNamesDecoded0:[Swift.String]? = nil
        if let configurationAggregatorNamesContainer = configurationAggregatorNamesContainer {
            configurationAggregatorNamesDecoded0 = [Swift.String]()
            for string0 in configurationAggregatorNamesContainer {
                if let string0 = string0 {
                    configurationAggregatorNamesDecoded0?.append(string0)
                }
            }
        }
        configurationAggregatorNames = configurationAggregatorNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeConfigurationAggregatorsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConfigurationAggregatorsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConfigurationAggregatorsOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConfigurationAggregatorsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigurationAggregatorsOutputResponse(configurationAggregators: \(Swift.String(describing: configurationAggregators)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConfigurationAggregatorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConfigurationAggregatorsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationAggregators = output.configurationAggregators
            self.nextToken = output.nextToken
        } else {
            self.configurationAggregators = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeConfigurationAggregatorsOutputResponse: Swift.Equatable {
    /// Returns a ConfigurationAggregators object.
    public let configurationAggregators: [ConfigClientTypes.ConfigurationAggregator]?
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        configurationAggregators: [ConfigClientTypes.ConfigurationAggregator]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationAggregators = configurationAggregators
        self.nextToken = nextToken
    }
}

struct DescribeConfigurationAggregatorsOutputResponseBody: Swift.Equatable {
    public let configurationAggregators: [ConfigClientTypes.ConfigurationAggregator]?
    public let nextToken: Swift.String?
}

extension DescribeConfigurationAggregatorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregators = "ConfigurationAggregators"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConfigurationAggregator?].self, forKey: .configurationAggregators)
        var configurationAggregatorsDecoded0:[ConfigClientTypes.ConfigurationAggregator]? = nil
        if let configurationAggregatorsContainer = configurationAggregatorsContainer {
            configurationAggregatorsDecoded0 = [ConfigClientTypes.ConfigurationAggregator]()
            for structure0 in configurationAggregatorsContainer {
                if let structure0 = structure0 {
                    configurationAggregatorsDecoded0?.append(structure0)
                }
            }
        }
        configurationAggregators = configurationAggregatorsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeConfigurationRecorderStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationRecorderStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationRecorderStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationRecorderStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationRecorderStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationRecorderStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationRecorderStatusOutputError>
}

extension DescribeConfigurationRecorderStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigurationRecorderStatusInput(configurationRecorderNames: \(Swift.String(describing: configurationRecorderNames)))"}
}

extension DescribeConfigurationRecorderStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorderNames = "ConfigurationRecorderNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationRecorderNames = configurationRecorderNames {
            var configurationRecorderNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurationRecorderNames)
            for configurationrecordernamelist0 in configurationRecorderNames {
                try configurationRecorderNamesContainer.encode(configurationrecordernamelist0)
            }
        }
    }
}

public struct DescribeConfigurationRecorderStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationRecorderStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationRecorderStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationRecorderStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationRecorderStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationRecorderStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationRecorderStatusOutputError>
}

public struct DescribeConfigurationRecorderStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationRecorderStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationRecorderStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationRecorderStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationRecorderStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationRecorderStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationRecorderStatusOutputError>
}

/// The input for the DescribeConfigurationRecorderStatus
/// 			action.
public struct DescribeConfigurationRecorderStatusInput: Swift.Equatable {
    /// The name(s) of the configuration recorder. If the name is not
    /// 			specified, the action returns the current status of all the
    /// 			configuration recorders associated with the account.
    public let configurationRecorderNames: [Swift.String]?

    public init (
        configurationRecorderNames: [Swift.String]? = nil
    )
    {
        self.configurationRecorderNames = configurationRecorderNames
    }
}

struct DescribeConfigurationRecorderStatusInputBody: Swift.Equatable {
    public let configurationRecorderNames: [Swift.String]?
}

extension DescribeConfigurationRecorderStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorderNames = "ConfigurationRecorderNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationRecorderNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configurationRecorderNames)
        var configurationRecorderNamesDecoded0:[Swift.String]? = nil
        if let configurationRecorderNamesContainer = configurationRecorderNamesContainer {
            configurationRecorderNamesDecoded0 = [Swift.String]()
            for string0 in configurationRecorderNamesContainer {
                if let string0 = string0 {
                    configurationRecorderNamesDecoded0?.append(string0)
                }
            }
        }
        configurationRecorderNames = configurationRecorderNamesDecoded0
    }
}

extension DescribeConfigurationRecorderStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConfigurationRecorderStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchConfigurationRecorderException" : self = .noSuchConfigurationRecorderException(try NoSuchConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConfigurationRecorderStatusOutputError: Swift.Error, Swift.Equatable {
    case noSuchConfigurationRecorderException(NoSuchConfigurationRecorderException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConfigurationRecorderStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigurationRecorderStatusOutputResponse(configurationRecordersStatus: \(Swift.String(describing: configurationRecordersStatus)))"}
}

extension DescribeConfigurationRecorderStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConfigurationRecorderStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationRecordersStatus = output.configurationRecordersStatus
        } else {
            self.configurationRecordersStatus = nil
        }
    }
}

/// The output for the DescribeConfigurationRecorderStatus action, in JSON
/// 			format.
public struct DescribeConfigurationRecorderStatusOutputResponse: Swift.Equatable {
    /// A list that contains status of the specified
    /// 			recorders.
    public let configurationRecordersStatus: [ConfigClientTypes.ConfigurationRecorderStatus]?

    public init (
        configurationRecordersStatus: [ConfigClientTypes.ConfigurationRecorderStatus]? = nil
    )
    {
        self.configurationRecordersStatus = configurationRecordersStatus
    }
}

struct DescribeConfigurationRecorderStatusOutputResponseBody: Swift.Equatable {
    public let configurationRecordersStatus: [ConfigClientTypes.ConfigurationRecorderStatus]?
}

extension DescribeConfigurationRecorderStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecordersStatus = "ConfigurationRecordersStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationRecordersStatusContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConfigurationRecorderStatus?].self, forKey: .configurationRecordersStatus)
        var configurationRecordersStatusDecoded0:[ConfigClientTypes.ConfigurationRecorderStatus]? = nil
        if let configurationRecordersStatusContainer = configurationRecordersStatusContainer {
            configurationRecordersStatusDecoded0 = [ConfigClientTypes.ConfigurationRecorderStatus]()
            for structure0 in configurationRecordersStatusContainer {
                if let structure0 = structure0 {
                    configurationRecordersStatusDecoded0?.append(structure0)
                }
            }
        }
        configurationRecordersStatus = configurationRecordersStatusDecoded0
    }
}

public struct DescribeConfigurationRecordersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationRecordersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationRecordersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationRecordersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationRecordersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationRecordersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationRecordersOutputError>
}

extension DescribeConfigurationRecordersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigurationRecordersInput(configurationRecorderNames: \(Swift.String(describing: configurationRecorderNames)))"}
}

extension DescribeConfigurationRecordersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorderNames = "ConfigurationRecorderNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationRecorderNames = configurationRecorderNames {
            var configurationRecorderNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configurationRecorderNames)
            for configurationrecordernamelist0 in configurationRecorderNames {
                try configurationRecorderNamesContainer.encode(configurationrecordernamelist0)
            }
        }
    }
}

public struct DescribeConfigurationRecordersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationRecordersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationRecordersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationRecordersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationRecordersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationRecordersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationRecordersOutputError>
}

public struct DescribeConfigurationRecordersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConfigurationRecordersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConfigurationRecordersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConfigurationRecordersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConfigurationRecordersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConfigurationRecordersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConfigurationRecordersOutputError>
}

/// The input for the DescribeConfigurationRecorders action.
public struct DescribeConfigurationRecordersInput: Swift.Equatable {
    /// A list of configuration recorder names.
    public let configurationRecorderNames: [Swift.String]?

    public init (
        configurationRecorderNames: [Swift.String]? = nil
    )
    {
        self.configurationRecorderNames = configurationRecorderNames
    }
}

struct DescribeConfigurationRecordersInputBody: Swift.Equatable {
    public let configurationRecorderNames: [Swift.String]?
}

extension DescribeConfigurationRecordersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorderNames = "ConfigurationRecorderNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationRecorderNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configurationRecorderNames)
        var configurationRecorderNamesDecoded0:[Swift.String]? = nil
        if let configurationRecorderNamesContainer = configurationRecorderNamesContainer {
            configurationRecorderNamesDecoded0 = [Swift.String]()
            for string0 in configurationRecorderNamesContainer {
                if let string0 = string0 {
                    configurationRecorderNamesDecoded0?.append(string0)
                }
            }
        }
        configurationRecorderNames = configurationRecorderNamesDecoded0
    }
}

extension DescribeConfigurationRecordersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConfigurationRecordersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchConfigurationRecorderException" : self = .noSuchConfigurationRecorderException(try NoSuchConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConfigurationRecordersOutputError: Swift.Error, Swift.Equatable {
    case noSuchConfigurationRecorderException(NoSuchConfigurationRecorderException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConfigurationRecordersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConfigurationRecordersOutputResponse(configurationRecorders: \(Swift.String(describing: configurationRecorders)))"}
}

extension DescribeConfigurationRecordersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConfigurationRecordersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationRecorders = output.configurationRecorders
        } else {
            self.configurationRecorders = nil
        }
    }
}

/// The output for the DescribeConfigurationRecorders action.
public struct DescribeConfigurationRecordersOutputResponse: Swift.Equatable {
    /// A list that contains the descriptions of the specified
    /// 			configuration recorders.
    public let configurationRecorders: [ConfigClientTypes.ConfigurationRecorder]?

    public init (
        configurationRecorders: [ConfigClientTypes.ConfigurationRecorder]? = nil
    )
    {
        self.configurationRecorders = configurationRecorders
    }
}

struct DescribeConfigurationRecordersOutputResponseBody: Swift.Equatable {
    public let configurationRecorders: [ConfigClientTypes.ConfigurationRecorder]?
}

extension DescribeConfigurationRecordersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorders = "ConfigurationRecorders"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationRecordersContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConfigurationRecorder?].self, forKey: .configurationRecorders)
        var configurationRecordersDecoded0:[ConfigClientTypes.ConfigurationRecorder]? = nil
        if let configurationRecordersContainer = configurationRecordersContainer {
            configurationRecordersDecoded0 = [ConfigClientTypes.ConfigurationRecorder]()
            for structure0 in configurationRecordersContainer {
                if let structure0 = structure0 {
                    configurationRecordersDecoded0?.append(structure0)
                }
            }
        }
        configurationRecorders = configurationRecordersDecoded0
    }
}

public struct DescribeConformancePackComplianceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConformancePackComplianceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConformancePackComplianceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConformancePackComplianceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConformancePackComplianceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConformancePackComplianceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConformancePackComplianceOutputError>
}

extension DescribeConformancePackComplianceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConformancePackComplianceInput(conformancePackName: \(Swift.String(describing: conformancePackName)), filters: \(Swift.String(describing: filters)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConformancePackComplianceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackName = "ConformancePackName"
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeConformancePackComplianceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConformancePackComplianceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConformancePackComplianceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConformancePackComplianceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConformancePackComplianceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConformancePackComplianceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConformancePackComplianceOutputError>
}

public struct DescribeConformancePackComplianceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConformancePackComplianceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConformancePackComplianceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConformancePackComplianceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConformancePackComplianceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConformancePackComplianceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConformancePackComplianceOutputError>
}

public struct DescribeConformancePackComplianceInput: Swift.Equatable {
    /// Name of the conformance pack.
    /// This member is required.
    public let conformancePackName: Swift.String?
    /// A ConformancePackComplianceFilters object.
    public let filters: ConfigClientTypes.ConformancePackComplianceFilters?
    /// The maximum number of AWS Config rules within a conformance pack are returned on each page.
    public let limit: Swift.Int
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        conformancePackName: Swift.String? = nil,
        filters: ConfigClientTypes.ConformancePackComplianceFilters? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.conformancePackName = conformancePackName
        self.filters = filters
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeConformancePackComplianceInputBody: Swift.Equatable {
    public let conformancePackName: Swift.String?
    public let filters: ConfigClientTypes.ConformancePackComplianceFilters?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeConformancePackComplianceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackName = "ConformancePackName"
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackComplianceFilters.self, forKey: .filters)
        filters = filtersDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeConformancePackComplianceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConformancePackComplianceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigRuleInConformancePackException" : self = .noSuchConfigRuleInConformancePackException(try NoSuchConfigRuleInConformancePackException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConformancePackException" : self = .noSuchConformancePackException(try NoSuchConformancePackException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConformancePackComplianceOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchConfigRuleInConformancePackException(NoSuchConfigRuleInConformancePackException)
    case noSuchConformancePackException(NoSuchConformancePackException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConformancePackComplianceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConformancePackComplianceOutputResponse(conformancePackName: \(Swift.String(describing: conformancePackName)), conformancePackRuleComplianceList: \(Swift.String(describing: conformancePackRuleComplianceList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConformancePackComplianceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConformancePackComplianceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.conformancePackName = output.conformancePackName
            self.conformancePackRuleComplianceList = output.conformancePackRuleComplianceList
            self.nextToken = output.nextToken
        } else {
            self.conformancePackName = nil
            self.conformancePackRuleComplianceList = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeConformancePackComplianceOutputResponse: Swift.Equatable {
    /// Name of the conformance pack.
    /// This member is required.
    public let conformancePackName: Swift.String?
    /// Returns a list of ConformancePackRuleCompliance objects.
    /// This member is required.
    public let conformancePackRuleComplianceList: [ConfigClientTypes.ConformancePackRuleCompliance]?
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        conformancePackName: Swift.String? = nil,
        conformancePackRuleComplianceList: [ConfigClientTypes.ConformancePackRuleCompliance]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.conformancePackName = conformancePackName
        self.conformancePackRuleComplianceList = conformancePackRuleComplianceList
        self.nextToken = nextToken
    }
}

struct DescribeConformancePackComplianceOutputResponseBody: Swift.Equatable {
    public let conformancePackName: Swift.String?
    public let conformancePackRuleComplianceList: [ConfigClientTypes.ConformancePackRuleCompliance]?
    public let nextToken: Swift.String?
}

extension DescribeConformancePackComplianceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackName = "ConformancePackName"
        case conformancePackRuleComplianceList = "ConformancePackRuleComplianceList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let conformancePackRuleComplianceListContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConformancePackRuleCompliance?].self, forKey: .conformancePackRuleComplianceList)
        var conformancePackRuleComplianceListDecoded0:[ConfigClientTypes.ConformancePackRuleCompliance]? = nil
        if let conformancePackRuleComplianceListContainer = conformancePackRuleComplianceListContainer {
            conformancePackRuleComplianceListDecoded0 = [ConfigClientTypes.ConformancePackRuleCompliance]()
            for structure0 in conformancePackRuleComplianceListContainer {
                if let structure0 = structure0 {
                    conformancePackRuleComplianceListDecoded0?.append(structure0)
                }
            }
        }
        conformancePackRuleComplianceList = conformancePackRuleComplianceListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeConformancePackStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConformancePackStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConformancePackStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConformancePackStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConformancePackStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConformancePackStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConformancePackStatusOutputError>
}

extension DescribeConformancePackStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConformancePackStatusInput(conformancePackNames: \(Swift.String(describing: conformancePackNames)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConformancePackStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackNames = "ConformancePackNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackNames = conformancePackNames {
            var conformancePackNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conformancePackNames)
            for conformancepacknameslist0 in conformancePackNames {
                try conformancePackNamesContainer.encode(conformancepacknameslist0)
            }
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeConformancePackStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConformancePackStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConformancePackStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConformancePackStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConformancePackStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConformancePackStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConformancePackStatusOutputError>
}

public struct DescribeConformancePackStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConformancePackStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConformancePackStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConformancePackStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConformancePackStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConformancePackStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConformancePackStatusOutputError>
}

public struct DescribeConformancePackStatusInput: Swift.Equatable {
    /// Comma-separated list of conformance pack names.
    public let conformancePackNames: [Swift.String]?
    /// The maximum number of conformance packs status returned on each page.
    public let limit: Swift.Int
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        conformancePackNames: [Swift.String]? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.conformancePackNames = conformancePackNames
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeConformancePackStatusInputBody: Swift.Equatable {
    public let conformancePackNames: [Swift.String]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeConformancePackStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackNames = "ConformancePackNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .conformancePackNames)
        var conformancePackNamesDecoded0:[Swift.String]? = nil
        if let conformancePackNamesContainer = conformancePackNamesContainer {
            conformancePackNamesDecoded0 = [Swift.String]()
            for string0 in conformancePackNamesContainer {
                if let string0 = string0 {
                    conformancePackNamesDecoded0?.append(string0)
                }
            }
        }
        conformancePackNames = conformancePackNamesDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeConformancePackStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConformancePackStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConformancePackStatusOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConformancePackStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConformancePackStatusOutputResponse(conformancePackStatusDetails: \(Swift.String(describing: conformancePackStatusDetails)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConformancePackStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConformancePackStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.conformancePackStatusDetails = output.conformancePackStatusDetails
            self.nextToken = output.nextToken
        } else {
            self.conformancePackStatusDetails = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeConformancePackStatusOutputResponse: Swift.Equatable {
    /// A list of ConformancePackStatusDetail objects.
    public let conformancePackStatusDetails: [ConfigClientTypes.ConformancePackStatusDetail]?
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        conformancePackStatusDetails: [ConfigClientTypes.ConformancePackStatusDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.conformancePackStatusDetails = conformancePackStatusDetails
        self.nextToken = nextToken
    }
}

struct DescribeConformancePackStatusOutputResponseBody: Swift.Equatable {
    public let conformancePackStatusDetails: [ConfigClientTypes.ConformancePackStatusDetail]?
    public let nextToken: Swift.String?
}

extension DescribeConformancePackStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackStatusDetails = "ConformancePackStatusDetails"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackStatusDetailsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConformancePackStatusDetail?].self, forKey: .conformancePackStatusDetails)
        var conformancePackStatusDetailsDecoded0:[ConfigClientTypes.ConformancePackStatusDetail]? = nil
        if let conformancePackStatusDetailsContainer = conformancePackStatusDetailsContainer {
            conformancePackStatusDetailsDecoded0 = [ConfigClientTypes.ConformancePackStatusDetail]()
            for structure0 in conformancePackStatusDetailsContainer {
                if let structure0 = structure0 {
                    conformancePackStatusDetailsDecoded0?.append(structure0)
                }
            }
        }
        conformancePackStatusDetails = conformancePackStatusDetailsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeConformancePacksInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConformancePacksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConformancePacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConformancePacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConformancePacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConformancePacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConformancePacksOutputError>
}

extension DescribeConformancePacksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConformancePacksInput(conformancePackNames: \(Swift.String(describing: conformancePackNames)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConformancePacksInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackNames = "ConformancePackNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackNames = conformancePackNames {
            var conformancePackNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conformancePackNames)
            for conformancepacknameslist0 in conformancePackNames {
                try conformancePackNamesContainer.encode(conformancepacknameslist0)
            }
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeConformancePacksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConformancePacksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConformancePacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConformancePacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConformancePacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConformancePacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConformancePacksOutputError>
}

public struct DescribeConformancePacksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeConformancePacksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeConformancePacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeConformancePacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeConformancePacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeConformancePacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeConformancePacksOutputError>
}

public struct DescribeConformancePacksInput: Swift.Equatable {
    /// Comma-separated list of conformance pack names for which you want details. If you do not specify any names, AWS Config returns details for all your conformance packs.
    public let conformancePackNames: [Swift.String]?
    /// The maximum number of conformance packs returned on each page.
    public let limit: Swift.Int
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        conformancePackNames: [Swift.String]? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.conformancePackNames = conformancePackNames
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeConformancePacksInputBody: Swift.Equatable {
    public let conformancePackNames: [Swift.String]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeConformancePacksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackNames = "ConformancePackNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .conformancePackNames)
        var conformancePackNamesDecoded0:[Swift.String]? = nil
        if let conformancePackNamesContainer = conformancePackNamesContainer {
            conformancePackNamesDecoded0 = [Swift.String]()
            for string0 in conformancePackNamesContainer {
                if let string0 = string0 {
                    conformancePackNamesDecoded0?.append(string0)
                }
            }
        }
        conformancePackNames = conformancePackNamesDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeConformancePacksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeConformancePacksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConformancePackException" : self = .noSuchConformancePackException(try NoSuchConformancePackException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeConformancePacksOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchConformancePackException(NoSuchConformancePackException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeConformancePacksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeConformancePacksOutputResponse(conformancePackDetails: \(Swift.String(describing: conformancePackDetails)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeConformancePacksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeConformancePacksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.conformancePackDetails = output.conformancePackDetails
            self.nextToken = output.nextToken
        } else {
            self.conformancePackDetails = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeConformancePacksOutputResponse: Swift.Equatable {
    /// Returns a list of ConformancePackDetail objects.
    public let conformancePackDetails: [ConfigClientTypes.ConformancePackDetail]?
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        conformancePackDetails: [ConfigClientTypes.ConformancePackDetail]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.conformancePackDetails = conformancePackDetails
        self.nextToken = nextToken
    }
}

struct DescribeConformancePacksOutputResponseBody: Swift.Equatable {
    public let conformancePackDetails: [ConfigClientTypes.ConformancePackDetail]?
    public let nextToken: Swift.String?
}

extension DescribeConformancePacksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackDetails = "ConformancePackDetails"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackDetailsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConformancePackDetail?].self, forKey: .conformancePackDetails)
        var conformancePackDetailsDecoded0:[ConfigClientTypes.ConformancePackDetail]? = nil
        if let conformancePackDetailsContainer = conformancePackDetailsContainer {
            conformancePackDetailsDecoded0 = [ConfigClientTypes.ConformancePackDetail]()
            for structure0 in conformancePackDetailsContainer {
                if let structure0 = structure0 {
                    conformancePackDetailsDecoded0?.append(structure0)
                }
            }
        }
        conformancePackDetails = conformancePackDetailsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeDeliveryChannelStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDeliveryChannelStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDeliveryChannelStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDeliveryChannelStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDeliveryChannelStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDeliveryChannelStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDeliveryChannelStatusOutputError>
}

extension DescribeDeliveryChannelStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDeliveryChannelStatusInput(deliveryChannelNames: \(Swift.String(describing: deliveryChannelNames)))"}
}

extension DescribeDeliveryChannelStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannelNames = "DeliveryChannelNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryChannelNames = deliveryChannelNames {
            var deliveryChannelNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deliveryChannelNames)
            for deliverychannelnamelist0 in deliveryChannelNames {
                try deliveryChannelNamesContainer.encode(deliverychannelnamelist0)
            }
        }
    }
}

public struct DescribeDeliveryChannelStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDeliveryChannelStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDeliveryChannelStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDeliveryChannelStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDeliveryChannelStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDeliveryChannelStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDeliveryChannelStatusOutputError>
}

public struct DescribeDeliveryChannelStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDeliveryChannelStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDeliveryChannelStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDeliveryChannelStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDeliveryChannelStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDeliveryChannelStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDeliveryChannelStatusOutputError>
}

/// The input for the DeliveryChannelStatus
/// 			action.
public struct DescribeDeliveryChannelStatusInput: Swift.Equatable {
    /// A list of delivery channel names.
    public let deliveryChannelNames: [Swift.String]?

    public init (
        deliveryChannelNames: [Swift.String]? = nil
    )
    {
        self.deliveryChannelNames = deliveryChannelNames
    }
}

struct DescribeDeliveryChannelStatusInputBody: Swift.Equatable {
    public let deliveryChannelNames: [Swift.String]?
}

extension DescribeDeliveryChannelStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannelNames = "DeliveryChannelNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryChannelNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deliveryChannelNames)
        var deliveryChannelNamesDecoded0:[Swift.String]? = nil
        if let deliveryChannelNamesContainer = deliveryChannelNamesContainer {
            deliveryChannelNamesDecoded0 = [Swift.String]()
            for string0 in deliveryChannelNamesContainer {
                if let string0 = string0 {
                    deliveryChannelNamesDecoded0?.append(string0)
                }
            }
        }
        deliveryChannelNames = deliveryChannelNamesDecoded0
    }
}

extension DescribeDeliveryChannelStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDeliveryChannelStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchDeliveryChannelException" : self = .noSuchDeliveryChannelException(try NoSuchDeliveryChannelException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDeliveryChannelStatusOutputError: Swift.Error, Swift.Equatable {
    case noSuchDeliveryChannelException(NoSuchDeliveryChannelException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDeliveryChannelStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDeliveryChannelStatusOutputResponse(deliveryChannelsStatus: \(Swift.String(describing: deliveryChannelsStatus)))"}
}

extension DescribeDeliveryChannelStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDeliveryChannelStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliveryChannelsStatus = output.deliveryChannelsStatus
        } else {
            self.deliveryChannelsStatus = nil
        }
    }
}

/// The output for the DescribeDeliveryChannelStatus action.
public struct DescribeDeliveryChannelStatusOutputResponse: Swift.Equatable {
    /// A list that contains the status of a specified delivery
    /// 			channel.
    public let deliveryChannelsStatus: [ConfigClientTypes.DeliveryChannelStatus]?

    public init (
        deliveryChannelsStatus: [ConfigClientTypes.DeliveryChannelStatus]? = nil
    )
    {
        self.deliveryChannelsStatus = deliveryChannelsStatus
    }
}

struct DescribeDeliveryChannelStatusOutputResponseBody: Swift.Equatable {
    public let deliveryChannelsStatus: [ConfigClientTypes.DeliveryChannelStatus]?
}

extension DescribeDeliveryChannelStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannelsStatus = "DeliveryChannelsStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryChannelsStatusContainer = try containerValues.decodeIfPresent([ConfigClientTypes.DeliveryChannelStatus?].self, forKey: .deliveryChannelsStatus)
        var deliveryChannelsStatusDecoded0:[ConfigClientTypes.DeliveryChannelStatus]? = nil
        if let deliveryChannelsStatusContainer = deliveryChannelsStatusContainer {
            deliveryChannelsStatusDecoded0 = [ConfigClientTypes.DeliveryChannelStatus]()
            for structure0 in deliveryChannelsStatusContainer {
                if let structure0 = structure0 {
                    deliveryChannelsStatusDecoded0?.append(structure0)
                }
            }
        }
        deliveryChannelsStatus = deliveryChannelsStatusDecoded0
    }
}

public struct DescribeDeliveryChannelsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDeliveryChannelsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDeliveryChannelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDeliveryChannelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDeliveryChannelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDeliveryChannelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDeliveryChannelsOutputError>
}

extension DescribeDeliveryChannelsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDeliveryChannelsInput(deliveryChannelNames: \(Swift.String(describing: deliveryChannelNames)))"}
}

extension DescribeDeliveryChannelsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannelNames = "DeliveryChannelNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryChannelNames = deliveryChannelNames {
            var deliveryChannelNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deliveryChannelNames)
            for deliverychannelnamelist0 in deliveryChannelNames {
                try deliveryChannelNamesContainer.encode(deliverychannelnamelist0)
            }
        }
    }
}

public struct DescribeDeliveryChannelsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDeliveryChannelsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDeliveryChannelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDeliveryChannelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDeliveryChannelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDeliveryChannelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDeliveryChannelsOutputError>
}

public struct DescribeDeliveryChannelsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDeliveryChannelsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDeliveryChannelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDeliveryChannelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDeliveryChannelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDeliveryChannelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDeliveryChannelsOutputError>
}

/// The input for the DescribeDeliveryChannels
/// 			action.
public struct DescribeDeliveryChannelsInput: Swift.Equatable {
    /// A list of delivery channel names.
    public let deliveryChannelNames: [Swift.String]?

    public init (
        deliveryChannelNames: [Swift.String]? = nil
    )
    {
        self.deliveryChannelNames = deliveryChannelNames
    }
}

struct DescribeDeliveryChannelsInputBody: Swift.Equatable {
    public let deliveryChannelNames: [Swift.String]?
}

extension DescribeDeliveryChannelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannelNames = "DeliveryChannelNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryChannelNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .deliveryChannelNames)
        var deliveryChannelNamesDecoded0:[Swift.String]? = nil
        if let deliveryChannelNamesContainer = deliveryChannelNamesContainer {
            deliveryChannelNamesDecoded0 = [Swift.String]()
            for string0 in deliveryChannelNamesContainer {
                if let string0 = string0 {
                    deliveryChannelNamesDecoded0?.append(string0)
                }
            }
        }
        deliveryChannelNames = deliveryChannelNamesDecoded0
    }
}

extension DescribeDeliveryChannelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDeliveryChannelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchDeliveryChannelException" : self = .noSuchDeliveryChannelException(try NoSuchDeliveryChannelException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDeliveryChannelsOutputError: Swift.Error, Swift.Equatable {
    case noSuchDeliveryChannelException(NoSuchDeliveryChannelException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDeliveryChannelsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDeliveryChannelsOutputResponse(deliveryChannels: \(Swift.String(describing: deliveryChannels)))"}
}

extension DescribeDeliveryChannelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDeliveryChannelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.deliveryChannels = output.deliveryChannels
        } else {
            self.deliveryChannels = nil
        }
    }
}

/// The output for the DescribeDeliveryChannels
/// 			action.
public struct DescribeDeliveryChannelsOutputResponse: Swift.Equatable {
    /// A list that contains the descriptions of the specified delivery
    /// 			channel.
    public let deliveryChannels: [ConfigClientTypes.DeliveryChannel]?

    public init (
        deliveryChannels: [ConfigClientTypes.DeliveryChannel]? = nil
    )
    {
        self.deliveryChannels = deliveryChannels
    }
}

struct DescribeDeliveryChannelsOutputResponseBody: Swift.Equatable {
    public let deliveryChannels: [ConfigClientTypes.DeliveryChannel]?
}

extension DescribeDeliveryChannelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannels = "DeliveryChannels"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryChannelsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.DeliveryChannel?].self, forKey: .deliveryChannels)
        var deliveryChannelsDecoded0:[ConfigClientTypes.DeliveryChannel]? = nil
        if let deliveryChannelsContainer = deliveryChannelsContainer {
            deliveryChannelsDecoded0 = [ConfigClientTypes.DeliveryChannel]()
            for structure0 in deliveryChannelsContainer {
                if let structure0 = structure0 {
                    deliveryChannelsDecoded0?.append(structure0)
                }
            }
        }
        deliveryChannels = deliveryChannelsDecoded0
    }
}

public struct DescribeOrganizationConfigRuleStatusesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConfigRuleStatusesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRuleStatusesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConfigRuleStatusesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRuleStatusesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConfigRuleStatusesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConfigRuleStatusesOutputError>
}

extension DescribeOrganizationConfigRuleStatusesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOrganizationConfigRuleStatusesInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), organizationConfigRuleNames: \(Swift.String(describing: organizationConfigRuleNames)))"}
}

extension DescribeOrganizationConfigRuleStatusesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConfigRuleNames = "OrganizationConfigRuleNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let organizationConfigRuleNames = organizationConfigRuleNames {
            var organizationConfigRuleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .organizationConfigRuleNames)
            for organizationconfigrulenames0 in organizationConfigRuleNames {
                try organizationConfigRuleNamesContainer.encode(organizationconfigrulenames0)
            }
        }
    }
}

public struct DescribeOrganizationConfigRuleStatusesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConfigRuleStatusesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRuleStatusesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConfigRuleStatusesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRuleStatusesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConfigRuleStatusesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConfigRuleStatusesOutputError>
}

public struct DescribeOrganizationConfigRuleStatusesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConfigRuleStatusesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRuleStatusesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConfigRuleStatusesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRuleStatusesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConfigRuleStatusesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConfigRuleStatusesOutputError>
}

public struct DescribeOrganizationConfigRuleStatusesInput: Swift.Equatable {
    /// The maximum number of OrganizationConfigRuleStatuses returned on each page. If you do no specify a number, AWS Config uses the default. The default is 100.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// The names of organization config rules for which you want status details. If you do not specify any names, AWS Config returns details for all your organization AWS Confg rules.
    public let organizationConfigRuleNames: [Swift.String]?

    public init (
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        organizationConfigRuleNames: [Swift.String]? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.organizationConfigRuleNames = organizationConfigRuleNames
    }
}

struct DescribeOrganizationConfigRuleStatusesInputBody: Swift.Equatable {
    public let organizationConfigRuleNames: [Swift.String]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeOrganizationConfigRuleStatusesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConfigRuleNames = "OrganizationConfigRuleNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRuleNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .organizationConfigRuleNames)
        var organizationConfigRuleNamesDecoded0:[Swift.String]? = nil
        if let organizationConfigRuleNamesContainer = organizationConfigRuleNamesContainer {
            organizationConfigRuleNamesDecoded0 = [Swift.String]()
            for string0 in organizationConfigRuleNamesContainer {
                if let string0 = string0 {
                    organizationConfigRuleNamesDecoded0?.append(string0)
                }
            }
        }
        organizationConfigRuleNames = organizationConfigRuleNamesDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeOrganizationConfigRuleStatusesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOrganizationConfigRuleStatusesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchOrganizationConfigRuleException" : self = .noSuchOrganizationConfigRuleException(try NoSuchOrganizationConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAccessDeniedException" : self = .organizationAccessDeniedException(try OrganizationAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeOrganizationConfigRuleStatusesOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchOrganizationConfigRuleException(NoSuchOrganizationConfigRuleException)
    case organizationAccessDeniedException(OrganizationAccessDeniedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOrganizationConfigRuleStatusesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOrganizationConfigRuleStatusesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), organizationConfigRuleStatuses: \(Swift.String(describing: organizationConfigRuleStatuses)))"}
}

extension DescribeOrganizationConfigRuleStatusesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeOrganizationConfigRuleStatusesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.organizationConfigRuleStatuses = output.organizationConfigRuleStatuses
        } else {
            self.nextToken = nil
            self.organizationConfigRuleStatuses = nil
        }
    }
}

public struct DescribeOrganizationConfigRuleStatusesOutputResponse: Swift.Equatable {
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// A list of OrganizationConfigRuleStatus objects.
    public let organizationConfigRuleStatuses: [ConfigClientTypes.OrganizationConfigRuleStatus]?

    public init (
        nextToken: Swift.String? = nil,
        organizationConfigRuleStatuses: [ConfigClientTypes.OrganizationConfigRuleStatus]? = nil
    )
    {
        self.nextToken = nextToken
        self.organizationConfigRuleStatuses = organizationConfigRuleStatuses
    }
}

struct DescribeOrganizationConfigRuleStatusesOutputResponseBody: Swift.Equatable {
    public let organizationConfigRuleStatuses: [ConfigClientTypes.OrganizationConfigRuleStatus]?
    public let nextToken: Swift.String?
}

extension DescribeOrganizationConfigRuleStatusesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case organizationConfigRuleStatuses = "OrganizationConfigRuleStatuses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRuleStatusesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.OrganizationConfigRuleStatus?].self, forKey: .organizationConfigRuleStatuses)
        var organizationConfigRuleStatusesDecoded0:[ConfigClientTypes.OrganizationConfigRuleStatus]? = nil
        if let organizationConfigRuleStatusesContainer = organizationConfigRuleStatusesContainer {
            organizationConfigRuleStatusesDecoded0 = [ConfigClientTypes.OrganizationConfigRuleStatus]()
            for structure0 in organizationConfigRuleStatusesContainer {
                if let structure0 = structure0 {
                    organizationConfigRuleStatusesDecoded0?.append(structure0)
                }
            }
        }
        organizationConfigRuleStatuses = organizationConfigRuleStatusesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeOrganizationConfigRulesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConfigRulesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConfigRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConfigRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConfigRulesOutputError>
}

extension DescribeOrganizationConfigRulesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOrganizationConfigRulesInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), organizationConfigRuleNames: \(Swift.String(describing: organizationConfigRuleNames)))"}
}

extension DescribeOrganizationConfigRulesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConfigRuleNames = "OrganizationConfigRuleNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let organizationConfigRuleNames = organizationConfigRuleNames {
            var organizationConfigRuleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .organizationConfigRuleNames)
            for organizationconfigrulenames0 in organizationConfigRuleNames {
                try organizationConfigRuleNamesContainer.encode(organizationconfigrulenames0)
            }
        }
    }
}

public struct DescribeOrganizationConfigRulesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConfigRulesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConfigRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConfigRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConfigRulesOutputError>
}

public struct DescribeOrganizationConfigRulesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConfigRulesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConfigRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConfigRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConfigRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConfigRulesOutputError>
}

public struct DescribeOrganizationConfigRulesInput: Swift.Equatable {
    /// The maximum number of organization config rules returned on each page. If you do no specify a number, AWS Config uses the default. The default is 100.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// The names of organization config rules for which you want details. If you do not specify any names, AWS Config returns details for all your organization config rules.
    public let organizationConfigRuleNames: [Swift.String]?

    public init (
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        organizationConfigRuleNames: [Swift.String]? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.organizationConfigRuleNames = organizationConfigRuleNames
    }
}

struct DescribeOrganizationConfigRulesInputBody: Swift.Equatable {
    public let organizationConfigRuleNames: [Swift.String]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeOrganizationConfigRulesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConfigRuleNames = "OrganizationConfigRuleNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRuleNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .organizationConfigRuleNames)
        var organizationConfigRuleNamesDecoded0:[Swift.String]? = nil
        if let organizationConfigRuleNamesContainer = organizationConfigRuleNamesContainer {
            organizationConfigRuleNamesDecoded0 = [Swift.String]()
            for string0 in organizationConfigRuleNamesContainer {
                if let string0 = string0 {
                    organizationConfigRuleNamesDecoded0?.append(string0)
                }
            }
        }
        organizationConfigRuleNames = organizationConfigRuleNamesDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeOrganizationConfigRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOrganizationConfigRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchOrganizationConfigRuleException" : self = .noSuchOrganizationConfigRuleException(try NoSuchOrganizationConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAccessDeniedException" : self = .organizationAccessDeniedException(try OrganizationAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeOrganizationConfigRulesOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchOrganizationConfigRuleException(NoSuchOrganizationConfigRuleException)
    case organizationAccessDeniedException(OrganizationAccessDeniedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOrganizationConfigRulesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOrganizationConfigRulesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), organizationConfigRules: \(Swift.String(describing: organizationConfigRules)))"}
}

extension DescribeOrganizationConfigRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeOrganizationConfigRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.organizationConfigRules = output.organizationConfigRules
        } else {
            self.nextToken = nil
            self.organizationConfigRules = nil
        }
    }
}

public struct DescribeOrganizationConfigRulesOutputResponse: Swift.Equatable {
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// Returns a list of OrganizationConfigRule objects.
    public let organizationConfigRules: [ConfigClientTypes.OrganizationConfigRule]?

    public init (
        nextToken: Swift.String? = nil,
        organizationConfigRules: [ConfigClientTypes.OrganizationConfigRule]? = nil
    )
    {
        self.nextToken = nextToken
        self.organizationConfigRules = organizationConfigRules
    }
}

struct DescribeOrganizationConfigRulesOutputResponseBody: Swift.Equatable {
    public let organizationConfigRules: [ConfigClientTypes.OrganizationConfigRule]?
    public let nextToken: Swift.String?
}

extension DescribeOrganizationConfigRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case organizationConfigRules = "OrganizationConfigRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRulesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.OrganizationConfigRule?].self, forKey: .organizationConfigRules)
        var organizationConfigRulesDecoded0:[ConfigClientTypes.OrganizationConfigRule]? = nil
        if let organizationConfigRulesContainer = organizationConfigRulesContainer {
            organizationConfigRulesDecoded0 = [ConfigClientTypes.OrganizationConfigRule]()
            for structure0 in organizationConfigRulesContainer {
                if let structure0 = structure0 {
                    organizationConfigRulesDecoded0?.append(structure0)
                }
            }
        }
        organizationConfigRules = organizationConfigRulesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeOrganizationConformancePackStatusesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConformancePackStatusesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePackStatusesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConformancePackStatusesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePackStatusesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConformancePackStatusesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConformancePackStatusesOutputError>
}

extension DescribeOrganizationConformancePackStatusesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOrganizationConformancePackStatusesInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), organizationConformancePackNames: \(Swift.String(describing: organizationConformancePackNames)))"}
}

extension DescribeOrganizationConformancePackStatusesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConformancePackNames = "OrganizationConformancePackNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let organizationConformancePackNames = organizationConformancePackNames {
            var organizationConformancePackNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .organizationConformancePackNames)
            for organizationconformancepacknames0 in organizationConformancePackNames {
                try organizationConformancePackNamesContainer.encode(organizationconformancepacknames0)
            }
        }
    }
}

public struct DescribeOrganizationConformancePackStatusesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConformancePackStatusesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePackStatusesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConformancePackStatusesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePackStatusesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConformancePackStatusesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConformancePackStatusesOutputError>
}

public struct DescribeOrganizationConformancePackStatusesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConformancePackStatusesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePackStatusesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConformancePackStatusesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePackStatusesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConformancePackStatusesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConformancePackStatusesOutputError>
}

public struct DescribeOrganizationConformancePackStatusesInput: Swift.Equatable {
    /// The maximum number of OrganizationConformancePackStatuses returned on each page.
    /// 			If you do no specify a number, AWS Config uses the default. The default is 100.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// The names of organization conformance packs for which you want status details.
    /// 			If you do not specify any names, AWS Config returns details for all your organization conformance packs.
    public let organizationConformancePackNames: [Swift.String]?

    public init (
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        organizationConformancePackNames: [Swift.String]? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.organizationConformancePackNames = organizationConformancePackNames
    }
}

struct DescribeOrganizationConformancePackStatusesInputBody: Swift.Equatable {
    public let organizationConformancePackNames: [Swift.String]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeOrganizationConformancePackStatusesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConformancePackNames = "OrganizationConformancePackNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .organizationConformancePackNames)
        var organizationConformancePackNamesDecoded0:[Swift.String]? = nil
        if let organizationConformancePackNamesContainer = organizationConformancePackNamesContainer {
            organizationConformancePackNamesDecoded0 = [Swift.String]()
            for string0 in organizationConformancePackNamesContainer {
                if let string0 = string0 {
                    organizationConformancePackNamesDecoded0?.append(string0)
                }
            }
        }
        organizationConformancePackNames = organizationConformancePackNamesDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeOrganizationConformancePackStatusesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOrganizationConformancePackStatusesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchOrganizationConformancePackException" : self = .noSuchOrganizationConformancePackException(try NoSuchOrganizationConformancePackException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAccessDeniedException" : self = .organizationAccessDeniedException(try OrganizationAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeOrganizationConformancePackStatusesOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchOrganizationConformancePackException(NoSuchOrganizationConformancePackException)
    case organizationAccessDeniedException(OrganizationAccessDeniedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOrganizationConformancePackStatusesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOrganizationConformancePackStatusesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), organizationConformancePackStatuses: \(Swift.String(describing: organizationConformancePackStatuses)))"}
}

extension DescribeOrganizationConformancePackStatusesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeOrganizationConformancePackStatusesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.organizationConformancePackStatuses = output.organizationConformancePackStatuses
        } else {
            self.nextToken = nil
            self.organizationConformancePackStatuses = nil
        }
    }
}

public struct DescribeOrganizationConformancePackStatusesOutputResponse: Swift.Equatable {
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// A list of OrganizationConformancePackStatus objects.
    public let organizationConformancePackStatuses: [ConfigClientTypes.OrganizationConformancePackStatus]?

    public init (
        nextToken: Swift.String? = nil,
        organizationConformancePackStatuses: [ConfigClientTypes.OrganizationConformancePackStatus]? = nil
    )
    {
        self.nextToken = nextToken
        self.organizationConformancePackStatuses = organizationConformancePackStatuses
    }
}

struct DescribeOrganizationConformancePackStatusesOutputResponseBody: Swift.Equatable {
    public let organizationConformancePackStatuses: [ConfigClientTypes.OrganizationConformancePackStatus]?
    public let nextToken: Swift.String?
}

extension DescribeOrganizationConformancePackStatusesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case organizationConformancePackStatuses = "OrganizationConformancePackStatuses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackStatusesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.OrganizationConformancePackStatus?].self, forKey: .organizationConformancePackStatuses)
        var organizationConformancePackStatusesDecoded0:[ConfigClientTypes.OrganizationConformancePackStatus]? = nil
        if let organizationConformancePackStatusesContainer = organizationConformancePackStatusesContainer {
            organizationConformancePackStatusesDecoded0 = [ConfigClientTypes.OrganizationConformancePackStatus]()
            for structure0 in organizationConformancePackStatusesContainer {
                if let structure0 = structure0 {
                    organizationConformancePackStatusesDecoded0?.append(structure0)
                }
            }
        }
        organizationConformancePackStatuses = organizationConformancePackStatusesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeOrganizationConformancePacksInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConformancePacksInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConformancePacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConformancePacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConformancePacksOutputError>
}

extension DescribeOrganizationConformancePacksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOrganizationConformancePacksInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), organizationConformancePackNames: \(Swift.String(describing: organizationConformancePackNames)))"}
}

extension DescribeOrganizationConformancePacksInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConformancePackNames = "OrganizationConformancePackNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let organizationConformancePackNames = organizationConformancePackNames {
            var organizationConformancePackNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .organizationConformancePackNames)
            for organizationconformancepacknames0 in organizationConformancePackNames {
                try organizationConformancePackNamesContainer.encode(organizationconformancepacknames0)
            }
        }
    }
}

public struct DescribeOrganizationConformancePacksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConformancePacksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConformancePacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConformancePacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConformancePacksOutputError>
}

public struct DescribeOrganizationConformancePacksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConformancePacksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePacksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConformancePacksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConformancePacksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConformancePacksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConformancePacksOutputError>
}

public struct DescribeOrganizationConformancePacksInput: Swift.Equatable {
    /// The maximum number of organization config packs returned on each page. If you do no specify a
    /// 			number, AWS Config uses the default. The default is 100.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a
    /// 			paginated response.
    public let nextToken: Swift.String?
    /// The name that you assign to an organization conformance pack.
    public let organizationConformancePackNames: [Swift.String]?

    public init (
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        organizationConformancePackNames: [Swift.String]? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.organizationConformancePackNames = organizationConformancePackNames
    }
}

struct DescribeOrganizationConformancePacksInputBody: Swift.Equatable {
    public let organizationConformancePackNames: [Swift.String]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeOrganizationConformancePacksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConformancePackNames = "OrganizationConformancePackNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .organizationConformancePackNames)
        var organizationConformancePackNamesDecoded0:[Swift.String]? = nil
        if let organizationConformancePackNamesContainer = organizationConformancePackNamesContainer {
            organizationConformancePackNamesDecoded0 = [Swift.String]()
            for string0 in organizationConformancePackNamesContainer {
                if let string0 = string0 {
                    organizationConformancePackNamesDecoded0?.append(string0)
                }
            }
        }
        organizationConformancePackNames = organizationConformancePackNamesDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeOrganizationConformancePacksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOrganizationConformancePacksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchOrganizationConformancePackException" : self = .noSuchOrganizationConformancePackException(try NoSuchOrganizationConformancePackException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAccessDeniedException" : self = .organizationAccessDeniedException(try OrganizationAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeOrganizationConformancePacksOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchOrganizationConformancePackException(NoSuchOrganizationConformancePackException)
    case organizationAccessDeniedException(OrganizationAccessDeniedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOrganizationConformancePacksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOrganizationConformancePacksOutputResponse(nextToken: \(Swift.String(describing: nextToken)), organizationConformancePacks: \(Swift.String(describing: organizationConformancePacks)))"}
}

extension DescribeOrganizationConformancePacksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeOrganizationConformancePacksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.organizationConformancePacks = output.organizationConformancePacks
        } else {
            self.nextToken = nil
            self.organizationConformancePacks = nil
        }
    }
}

public struct DescribeOrganizationConformancePacksOutputResponse: Swift.Equatable {
    /// The nextToken string returned on a previous page that you use to get the next page of results in a
    /// 			paginated response.
    public let nextToken: Swift.String?
    /// Returns a list of OrganizationConformancePacks objects.
    public let organizationConformancePacks: [ConfigClientTypes.OrganizationConformancePack]?

    public init (
        nextToken: Swift.String? = nil,
        organizationConformancePacks: [ConfigClientTypes.OrganizationConformancePack]? = nil
    )
    {
        self.nextToken = nextToken
        self.organizationConformancePacks = organizationConformancePacks
    }
}

struct DescribeOrganizationConformancePacksOutputResponseBody: Swift.Equatable {
    public let organizationConformancePacks: [ConfigClientTypes.OrganizationConformancePack]?
    public let nextToken: Swift.String?
}

extension DescribeOrganizationConformancePacksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case organizationConformancePacks = "OrganizationConformancePacks"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePacksContainer = try containerValues.decodeIfPresent([ConfigClientTypes.OrganizationConformancePack?].self, forKey: .organizationConformancePacks)
        var organizationConformancePacksDecoded0:[ConfigClientTypes.OrganizationConformancePack]? = nil
        if let organizationConformancePacksContainer = organizationConformancePacksContainer {
            organizationConformancePacksDecoded0 = [ConfigClientTypes.OrganizationConformancePack]()
            for structure0 in organizationConformancePacksContainer {
                if let structure0 = structure0 {
                    organizationConformancePacksDecoded0?.append(structure0)
                }
            }
        }
        organizationConformancePacks = organizationConformancePacksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribePendingAggregationRequestsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePendingAggregationRequestsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePendingAggregationRequestsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePendingAggregationRequestsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePendingAggregationRequestsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePendingAggregationRequestsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePendingAggregationRequestsOutputError>
}

extension DescribePendingAggregationRequestsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribePendingAggregationRequestsInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribePendingAggregationRequestsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribePendingAggregationRequestsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePendingAggregationRequestsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePendingAggregationRequestsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePendingAggregationRequestsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePendingAggregationRequestsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePendingAggregationRequestsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePendingAggregationRequestsOutputError>
}

public struct DescribePendingAggregationRequestsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePendingAggregationRequestsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePendingAggregationRequestsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePendingAggregationRequestsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePendingAggregationRequestsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePendingAggregationRequestsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePendingAggregationRequestsOutputError>
}

public struct DescribePendingAggregationRequestsInput: Swift.Equatable {
    /// The maximum number of evaluation results returned on each page.
    /// 			The default is maximum. If you specify 0, AWS Config uses the
    /// 			default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribePendingAggregationRequestsInputBody: Swift.Equatable {
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribePendingAggregationRequestsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribePendingAggregationRequestsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePendingAggregationRequestsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribePendingAggregationRequestsOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePendingAggregationRequestsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribePendingAggregationRequestsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), pendingAggregationRequests: \(Swift.String(describing: pendingAggregationRequests)))"}
}

extension DescribePendingAggregationRequestsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribePendingAggregationRequestsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.pendingAggregationRequests = output.pendingAggregationRequests
        } else {
            self.nextToken = nil
            self.pendingAggregationRequests = nil
        }
    }
}

public struct DescribePendingAggregationRequestsOutputResponse: Swift.Equatable {
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// Returns a PendingAggregationRequests object.
    public let pendingAggregationRequests: [ConfigClientTypes.PendingAggregationRequest]?

    public init (
        nextToken: Swift.String? = nil,
        pendingAggregationRequests: [ConfigClientTypes.PendingAggregationRequest]? = nil
    )
    {
        self.nextToken = nextToken
        self.pendingAggregationRequests = pendingAggregationRequests
    }
}

struct DescribePendingAggregationRequestsOutputResponseBody: Swift.Equatable {
    public let pendingAggregationRequests: [ConfigClientTypes.PendingAggregationRequest]?
    public let nextToken: Swift.String?
}

extension DescribePendingAggregationRequestsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case pendingAggregationRequests = "PendingAggregationRequests"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pendingAggregationRequestsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.PendingAggregationRequest?].self, forKey: .pendingAggregationRequests)
        var pendingAggregationRequestsDecoded0:[ConfigClientTypes.PendingAggregationRequest]? = nil
        if let pendingAggregationRequestsContainer = pendingAggregationRequestsContainer {
            pendingAggregationRequestsDecoded0 = [ConfigClientTypes.PendingAggregationRequest]()
            for structure0 in pendingAggregationRequestsContainer {
                if let structure0 = structure0 {
                    pendingAggregationRequestsDecoded0?.append(structure0)
                }
            }
        }
        pendingAggregationRequests = pendingAggregationRequestsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeRemediationConfigurationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRemediationConfigurationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRemediationConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRemediationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRemediationConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRemediationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRemediationConfigurationsOutputError>
}

extension DescribeRemediationConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRemediationConfigurationsInput(configRuleNames: \(Swift.String(describing: configRuleNames)))"}
}

extension DescribeRemediationConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleNames = "ConfigRuleNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleNames = configRuleNames {
            var configRuleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configRuleNames)
            for configrulenames0 in configRuleNames {
                try configRuleNamesContainer.encode(configrulenames0)
            }
        }
    }
}

public struct DescribeRemediationConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRemediationConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRemediationConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRemediationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRemediationConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRemediationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRemediationConfigurationsOutputError>
}

public struct DescribeRemediationConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRemediationConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRemediationConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRemediationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRemediationConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRemediationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRemediationConfigurationsOutputError>
}

public struct DescribeRemediationConfigurationsInput: Swift.Equatable {
    /// A list of AWS Config rule names of remediation configurations for which you want details.
    /// This member is required.
    public let configRuleNames: [Swift.String]?

    public init (
        configRuleNames: [Swift.String]? = nil
    )
    {
        self.configRuleNames = configRuleNames
    }
}

struct DescribeRemediationConfigurationsInputBody: Swift.Equatable {
    public let configRuleNames: [Swift.String]?
}

extension DescribeRemediationConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleNames = "ConfigRuleNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configRuleNames)
        var configRuleNamesDecoded0:[Swift.String]? = nil
        if let configRuleNamesContainer = configRuleNamesContainer {
            configRuleNamesDecoded0 = [Swift.String]()
            for string0 in configRuleNamesContainer {
                if let string0 = string0 {
                    configRuleNamesDecoded0?.append(string0)
                }
            }
        }
        configRuleNames = configRuleNamesDecoded0
    }
}

extension DescribeRemediationConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRemediationConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeRemediationConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRemediationConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRemediationConfigurationsOutputResponse(remediationConfigurations: \(Swift.String(describing: remediationConfigurations)))"}
}

extension DescribeRemediationConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeRemediationConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.remediationConfigurations = output.remediationConfigurations
        } else {
            self.remediationConfigurations = nil
        }
    }
}

public struct DescribeRemediationConfigurationsOutputResponse: Swift.Equatable {
    /// Returns a remediation configuration object.
    public let remediationConfigurations: [ConfigClientTypes.RemediationConfiguration]?

    public init (
        remediationConfigurations: [ConfigClientTypes.RemediationConfiguration]? = nil
    )
    {
        self.remediationConfigurations = remediationConfigurations
    }
}

struct DescribeRemediationConfigurationsOutputResponseBody: Swift.Equatable {
    public let remediationConfigurations: [ConfigClientTypes.RemediationConfiguration]?
}

extension DescribeRemediationConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case remediationConfigurations = "RemediationConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let remediationConfigurationsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationConfiguration?].self, forKey: .remediationConfigurations)
        var remediationConfigurationsDecoded0:[ConfigClientTypes.RemediationConfiguration]? = nil
        if let remediationConfigurationsContainer = remediationConfigurationsContainer {
            remediationConfigurationsDecoded0 = [ConfigClientTypes.RemediationConfiguration]()
            for structure0 in remediationConfigurationsContainer {
                if let structure0 = structure0 {
                    remediationConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        remediationConfigurations = remediationConfigurationsDecoded0
    }
}

public struct DescribeRemediationExceptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRemediationExceptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRemediationExceptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRemediationExceptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRemediationExceptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRemediationExceptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRemediationExceptionsOutputError>
}

extension DescribeRemediationExceptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRemediationExceptionsInput(configRuleName: \(Swift.String(describing: configRuleName)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), resourceKeys: \(Swift.String(describing: resourceKeys)))"}
}

extension DescribeRemediationExceptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceKeys = "ResourceKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceKeys = resourceKeys {
            var resourceKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceKeys)
            for remediationexceptionresourcekeys0 in resourceKeys {
                try resourceKeysContainer.encode(remediationexceptionresourcekeys0)
            }
        }
    }
}

public struct DescribeRemediationExceptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRemediationExceptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRemediationExceptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRemediationExceptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRemediationExceptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRemediationExceptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRemediationExceptionsOutputError>
}

public struct DescribeRemediationExceptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRemediationExceptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRemediationExceptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRemediationExceptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRemediationExceptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRemediationExceptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRemediationExceptionsOutputError>
}

public struct DescribeRemediationExceptionsInput: Swift.Equatable {
    /// The name of the AWS Config rule.
    /// This member is required.
    public let configRuleName: Swift.String?
    /// The maximum number of RemediationExceptionResourceKey returned on each page. The default is 25. If you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// An exception list of resource exception keys to be processed with the current request. AWS Config adds exception for each resource key. For example, AWS Config adds 3 exceptions for 3 resource keys.
    public let resourceKeys: [ConfigClientTypes.RemediationExceptionResourceKey]?

    public init (
        configRuleName: Swift.String? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        resourceKeys: [ConfigClientTypes.RemediationExceptionResourceKey]? = nil
    )
    {
        self.configRuleName = configRuleName
        self.limit = limit
        self.nextToken = nextToken
        self.resourceKeys = resourceKeys
    }
}

struct DescribeRemediationExceptionsInputBody: Swift.Equatable {
    public let configRuleName: Swift.String?
    public let resourceKeys: [ConfigClientTypes.RemediationExceptionResourceKey]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeRemediationExceptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceKeys = "ResourceKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let resourceKeysContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationExceptionResourceKey?].self, forKey: .resourceKeys)
        var resourceKeysDecoded0:[ConfigClientTypes.RemediationExceptionResourceKey]? = nil
        if let resourceKeysContainer = resourceKeysContainer {
            resourceKeysDecoded0 = [ConfigClientTypes.RemediationExceptionResourceKey]()
            for structure0 in resourceKeysContainer {
                if let structure0 = structure0 {
                    resourceKeysDecoded0?.append(structure0)
                }
            }
        }
        resourceKeys = resourceKeysDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeRemediationExceptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRemediationExceptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeRemediationExceptionsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRemediationExceptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRemediationExceptionsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), remediationExceptions: \(Swift.String(describing: remediationExceptions)))"}
}

extension DescribeRemediationExceptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeRemediationExceptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.remediationExceptions = output.remediationExceptions
        } else {
            self.nextToken = nil
            self.remediationExceptions = nil
        }
    }
}

public struct DescribeRemediationExceptionsOutputResponse: Swift.Equatable {
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// Returns a list of remediation exception objects.
    public let remediationExceptions: [ConfigClientTypes.RemediationException]?

    public init (
        nextToken: Swift.String? = nil,
        remediationExceptions: [ConfigClientTypes.RemediationException]? = nil
    )
    {
        self.nextToken = nextToken
        self.remediationExceptions = remediationExceptions
    }
}

struct DescribeRemediationExceptionsOutputResponseBody: Swift.Equatable {
    public let remediationExceptions: [ConfigClientTypes.RemediationException]?
    public let nextToken: Swift.String?
}

extension DescribeRemediationExceptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case remediationExceptions = "RemediationExceptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let remediationExceptionsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationException?].self, forKey: .remediationExceptions)
        var remediationExceptionsDecoded0:[ConfigClientTypes.RemediationException]? = nil
        if let remediationExceptionsContainer = remediationExceptionsContainer {
            remediationExceptionsDecoded0 = [ConfigClientTypes.RemediationException]()
            for structure0 in remediationExceptionsContainer {
                if let structure0 = structure0 {
                    remediationExceptionsDecoded0?.append(structure0)
                }
            }
        }
        remediationExceptions = remediationExceptionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeRemediationExecutionStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRemediationExecutionStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRemediationExecutionStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRemediationExecutionStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRemediationExecutionStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRemediationExecutionStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRemediationExecutionStatusOutputError>
}

extension DescribeRemediationExecutionStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRemediationExecutionStatusInput(configRuleName: \(Swift.String(describing: configRuleName)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), resourceKeys: \(Swift.String(describing: resourceKeys)))"}
}

extension DescribeRemediationExecutionStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceKeys = "ResourceKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceKeys = resourceKeys {
            var resourceKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceKeys)
            for resourcekeys0 in resourceKeys {
                try resourceKeysContainer.encode(resourcekeys0)
            }
        }
    }
}

public struct DescribeRemediationExecutionStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRemediationExecutionStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRemediationExecutionStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRemediationExecutionStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRemediationExecutionStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRemediationExecutionStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRemediationExecutionStatusOutputError>
}

public struct DescribeRemediationExecutionStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRemediationExecutionStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRemediationExecutionStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRemediationExecutionStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRemediationExecutionStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRemediationExecutionStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRemediationExecutionStatusOutputError>
}

public struct DescribeRemediationExecutionStatusInput: Swift.Equatable {
    /// A list of AWS Config rule names.
    /// This member is required.
    public let configRuleName: Swift.String?
    /// The maximum number of RemediationExecutionStatuses returned on each page. The default is maximum. If you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID.
    public let resourceKeys: [ConfigClientTypes.ResourceKey]?

    public init (
        configRuleName: Swift.String? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        resourceKeys: [ConfigClientTypes.ResourceKey]? = nil
    )
    {
        self.configRuleName = configRuleName
        self.limit = limit
        self.nextToken = nextToken
        self.resourceKeys = resourceKeys
    }
}

struct DescribeRemediationExecutionStatusInputBody: Swift.Equatable {
    public let configRuleName: Swift.String?
    public let resourceKeys: [ConfigClientTypes.ResourceKey]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension DescribeRemediationExecutionStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceKeys = "ResourceKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let resourceKeysContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ResourceKey?].self, forKey: .resourceKeys)
        var resourceKeysDecoded0:[ConfigClientTypes.ResourceKey]? = nil
        if let resourceKeysContainer = resourceKeysContainer {
            resourceKeysDecoded0 = [ConfigClientTypes.ResourceKey]()
            for structure0 in resourceKeysContainer {
                if let structure0 = structure0 {
                    resourceKeysDecoded0?.append(structure0)
                }
            }
        }
        resourceKeys = resourceKeysDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeRemediationExecutionStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRemediationExecutionStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchRemediationConfigurationException" : self = .noSuchRemediationConfigurationException(try NoSuchRemediationConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeRemediationExecutionStatusOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchRemediationConfigurationException(NoSuchRemediationConfigurationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRemediationExecutionStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRemediationExecutionStatusOutputResponse(nextToken: \(Swift.String(describing: nextToken)), remediationExecutionStatuses: \(Swift.String(describing: remediationExecutionStatuses)))"}
}

extension DescribeRemediationExecutionStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeRemediationExecutionStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.remediationExecutionStatuses = output.remediationExecutionStatuses
        } else {
            self.nextToken = nil
            self.remediationExecutionStatuses = nil
        }
    }
}

public struct DescribeRemediationExecutionStatusOutputResponse: Swift.Equatable {
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// Returns a list of remediation execution statuses objects.
    public let remediationExecutionStatuses: [ConfigClientTypes.RemediationExecutionStatus]?

    public init (
        nextToken: Swift.String? = nil,
        remediationExecutionStatuses: [ConfigClientTypes.RemediationExecutionStatus]? = nil
    )
    {
        self.nextToken = nextToken
        self.remediationExecutionStatuses = remediationExecutionStatuses
    }
}

struct DescribeRemediationExecutionStatusOutputResponseBody: Swift.Equatable {
    public let remediationExecutionStatuses: [ConfigClientTypes.RemediationExecutionStatus]?
    public let nextToken: Swift.String?
}

extension DescribeRemediationExecutionStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case remediationExecutionStatuses = "RemediationExecutionStatuses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let remediationExecutionStatusesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationExecutionStatus?].self, forKey: .remediationExecutionStatuses)
        var remediationExecutionStatusesDecoded0:[ConfigClientTypes.RemediationExecutionStatus]? = nil
        if let remediationExecutionStatusesContainer = remediationExecutionStatusesContainer {
            remediationExecutionStatusesDecoded0 = [ConfigClientTypes.RemediationExecutionStatus]()
            for structure0 in remediationExecutionStatusesContainer {
                if let structure0 = structure0 {
                    remediationExecutionStatusesDecoded0?.append(structure0)
                }
            }
        }
        remediationExecutionStatuses = remediationExecutionStatusesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct DescribeRetentionConfigurationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRetentionConfigurationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRetentionConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRetentionConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRetentionConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRetentionConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRetentionConfigurationsOutputError>
}

extension DescribeRetentionConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRetentionConfigurationsInput(nextToken: \(Swift.String(describing: nextToken)), retentionConfigurationNames: \(Swift.String(describing: retentionConfigurationNames)))"}
}

extension DescribeRetentionConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case retentionConfigurationNames = "RetentionConfigurationNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let retentionConfigurationNames = retentionConfigurationNames {
            var retentionConfigurationNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .retentionConfigurationNames)
            for retentionconfigurationnamelist0 in retentionConfigurationNames {
                try retentionConfigurationNamesContainer.encode(retentionconfigurationnamelist0)
            }
        }
    }
}

public struct DescribeRetentionConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRetentionConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRetentionConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRetentionConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRetentionConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRetentionConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRetentionConfigurationsOutputError>
}

public struct DescribeRetentionConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRetentionConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRetentionConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRetentionConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRetentionConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRetentionConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRetentionConfigurationsOutputError>
}

public struct DescribeRetentionConfigurationsInput: Swift.Equatable {
    /// The nextToken string returned on a previous page
    /// 			that you use to get the next page of results in a paginated
    /// 			response.
    public let nextToken: Swift.String?
    /// A list of names of retention configurations for which you want
    /// 			details. If you do not specify a name, AWS Config returns details
    /// 			for all the retention configurations for that account.
    /// 		
    /// 			         Currently, AWS Config supports only one retention
    /// 				configuration per region in your account.
    /// 		
    public let retentionConfigurationNames: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        retentionConfigurationNames: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.retentionConfigurationNames = retentionConfigurationNames
    }
}

struct DescribeRetentionConfigurationsInputBody: Swift.Equatable {
    public let retentionConfigurationNames: [Swift.String]?
    public let nextToken: Swift.String?
}

extension DescribeRetentionConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case retentionConfigurationNames = "RetentionConfigurationNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retentionConfigurationNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .retentionConfigurationNames)
        var retentionConfigurationNamesDecoded0:[Swift.String]? = nil
        if let retentionConfigurationNamesContainer = retentionConfigurationNamesContainer {
            retentionConfigurationNamesDecoded0 = [Swift.String]()
            for string0 in retentionConfigurationNamesContainer {
                if let string0 = string0 {
                    retentionConfigurationNamesDecoded0?.append(string0)
                }
            }
        }
        retentionConfigurationNames = retentionConfigurationNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeRetentionConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRetentionConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchRetentionConfigurationException" : self = .noSuchRetentionConfigurationException(try NoSuchRetentionConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeRetentionConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchRetentionConfigurationException(NoSuchRetentionConfigurationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRetentionConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRetentionConfigurationsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), retentionConfigurations: \(Swift.String(describing: retentionConfigurations)))"}
}

extension DescribeRetentionConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeRetentionConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.retentionConfigurations = output.retentionConfigurations
        } else {
            self.nextToken = nil
            self.retentionConfigurations = nil
        }
    }
}

public struct DescribeRetentionConfigurationsOutputResponse: Swift.Equatable {
    /// The nextToken string returned on a previous page
    /// 			that you use to get the next page of results in a paginated
    /// 			response.
    public let nextToken: Swift.String?
    /// Returns a retention configuration object.
    public let retentionConfigurations: [ConfigClientTypes.RetentionConfiguration]?

    public init (
        nextToken: Swift.String? = nil,
        retentionConfigurations: [ConfigClientTypes.RetentionConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.retentionConfigurations = retentionConfigurations
    }
}

struct DescribeRetentionConfigurationsOutputResponseBody: Swift.Equatable {
    public let retentionConfigurations: [ConfigClientTypes.RetentionConfiguration]?
    public let nextToken: Swift.String?
}

extension DescribeRetentionConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case retentionConfigurations = "RetentionConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retentionConfigurationsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RetentionConfiguration?].self, forKey: .retentionConfigurations)
        var retentionConfigurationsDecoded0:[ConfigClientTypes.RetentionConfiguration]? = nil
        if let retentionConfigurationsContainer = retentionConfigurationsContainer {
            retentionConfigurationsDecoded0 = [ConfigClientTypes.RetentionConfiguration]()
            for structure0 in retentionConfigurationsContainer {
                if let structure0 = structure0 {
                    retentionConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        retentionConfigurations = retentionConfigurationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ConfigClientTypes.Evaluation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case annotation = "Annotation"
        case complianceResourceId = "ComplianceResourceId"
        case complianceResourceType = "ComplianceResourceType"
        case complianceType = "ComplianceType"
        case orderingTimestamp = "OrderingTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotation = annotation {
            try encodeContainer.encode(annotation, forKey: .annotation)
        }
        if let complianceResourceId = complianceResourceId {
            try encodeContainer.encode(complianceResourceId, forKey: .complianceResourceId)
        }
        if let complianceResourceType = complianceResourceType {
            try encodeContainer.encode(complianceResourceType, forKey: .complianceResourceType)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let orderingTimestamp = orderingTimestamp {
            try encodeContainer.encode(orderingTimestamp.timeIntervalSince1970, forKey: .orderingTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceResourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complianceResourceType)
        complianceResourceType = complianceResourceTypeDecoded
        let complianceResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complianceResourceId)
        complianceResourceId = complianceResourceIdDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let annotationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .annotation)
        annotation = annotationDecoded
        let orderingTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .orderingTimestamp)
        orderingTimestamp = orderingTimestampDecoded
    }
}

extension ConfigClientTypes.Evaluation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Evaluation(annotation: \(Swift.String(describing: annotation)), complianceResourceId: \(Swift.String(describing: complianceResourceId)), complianceResourceType: \(Swift.String(describing: complianceResourceType)), complianceType: \(Swift.String(describing: complianceType)), orderingTimestamp: \(Swift.String(describing: orderingTimestamp)))"}
}

extension ConfigClientTypes {
    /// Identifies an AWS resource and indicates whether it complies
    /// 			with the AWS Config rule that it was evaluated against.
    public struct Evaluation: Swift.Equatable {
        /// Supplementary information about how the evaluation determined
        /// 			the compliance.
        public let annotation: Swift.String?
        /// The ID of the AWS resource that was evaluated.
        /// This member is required.
        public let complianceResourceId: Swift.String?
        /// The type of AWS resource that was evaluated.
        /// This member is required.
        public let complianceResourceType: Swift.String?
        /// Indicates whether the AWS resource complies with the AWS Config
        /// 			rule that it was evaluated against.
        /// 		       For the Evaluation data type, AWS Config supports
        /// 			only the COMPLIANT, NON_COMPLIANT, and
        /// 				NOT_APPLICABLE values. AWS Config does not support
        /// 			the INSUFFICIENT_DATA value for this data
        /// 			type.
        /// 		       Similarly, AWS Config does not accept
        /// 				INSUFFICIENT_DATA as the value for
        /// 				ComplianceType from a PutEvaluations
        /// 			request. For example, an AWS Lambda function for a custom AWS Config
        /// 			rule cannot pass an INSUFFICIENT_DATA value to AWS
        /// 			Config.
        /// This member is required.
        public let complianceType: ConfigClientTypes.ComplianceType?
        /// The time of the event in AWS Config that triggered the
        /// 			evaluation. For event-based evaluations, the time indicates when AWS
        /// 			Config created the configuration item that triggered the evaluation.
        /// 			For periodic evaluations, the time indicates when AWS Config
        /// 			triggered the evaluation at the frequency that you specified (for
        /// 			example, every 24 hours).
        /// This member is required.
        public let orderingTimestamp: ClientRuntime.Date?

        public init (
            annotation: Swift.String? = nil,
            complianceResourceId: Swift.String? = nil,
            complianceResourceType: Swift.String? = nil,
            complianceType: ConfigClientTypes.ComplianceType? = nil,
            orderingTimestamp: ClientRuntime.Date? = nil
        )
        {
            self.annotation = annotation
            self.complianceResourceId = complianceResourceId
            self.complianceResourceType = complianceResourceType
            self.complianceType = complianceType
            self.orderingTimestamp = orderingTimestamp
        }
    }

}

extension ConfigClientTypes.EvaluationResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case annotation = "Annotation"
        case complianceType = "ComplianceType"
        case configRuleInvokedTime = "ConfigRuleInvokedTime"
        case evaluationResultIdentifier = "EvaluationResultIdentifier"
        case resultRecordedTime = "ResultRecordedTime"
        case resultToken = "ResultToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotation = annotation {
            try encodeContainer.encode(annotation, forKey: .annotation)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleInvokedTime = configRuleInvokedTime {
            try encodeContainer.encode(configRuleInvokedTime.timeIntervalSince1970, forKey: .configRuleInvokedTime)
        }
        if let evaluationResultIdentifier = evaluationResultIdentifier {
            try encodeContainer.encode(evaluationResultIdentifier, forKey: .evaluationResultIdentifier)
        }
        if let resultRecordedTime = resultRecordedTime {
            try encodeContainer.encode(resultRecordedTime.timeIntervalSince1970, forKey: .resultRecordedTime)
        }
        if let resultToken = resultToken {
            try encodeContainer.encode(resultToken, forKey: .resultToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationResultIdentifierDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.EvaluationResultIdentifier.self, forKey: .evaluationResultIdentifier)
        evaluationResultIdentifier = evaluationResultIdentifierDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let resultRecordedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .resultRecordedTime)
        resultRecordedTime = resultRecordedTimeDecoded
        let configRuleInvokedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .configRuleInvokedTime)
        configRuleInvokedTime = configRuleInvokedTimeDecoded
        let annotationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .annotation)
        annotation = annotationDecoded
        let resultTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resultToken)
        resultToken = resultTokenDecoded
    }
}

extension ConfigClientTypes.EvaluationResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EvaluationResult(annotation: \(Swift.String(describing: annotation)), complianceType: \(Swift.String(describing: complianceType)), configRuleInvokedTime: \(Swift.String(describing: configRuleInvokedTime)), evaluationResultIdentifier: \(Swift.String(describing: evaluationResultIdentifier)), resultRecordedTime: \(Swift.String(describing: resultRecordedTime)), resultToken: \(Swift.String(describing: resultToken)))"}
}

extension ConfigClientTypes {
    /// The details of an AWS Config evaluation. Provides the AWS
    /// 			resource that was evaluated, the compliance of the resource, related
    /// 			time stamps, and supplementary information.
    public struct EvaluationResult: Swift.Equatable {
        /// Supplementary information about how the evaluation determined
        /// 			the compliance.
        public let annotation: Swift.String?
        /// Indicates whether the AWS resource complies with the AWS Config
        /// 			rule that evaluated it.
        /// 		       For the EvaluationResult data type, AWS Config
        /// 			supports only the COMPLIANT,
        /// 			NON_COMPLIANT, and NOT_APPLICABLE values.
        /// 			AWS Config does not support the INSUFFICIENT_DATA value
        /// 			for the EvaluationResult data type.
        public let complianceType: ConfigClientTypes.ComplianceType?
        /// The time when the AWS Config rule evaluated the AWS
        /// 			resource.
        public let configRuleInvokedTime: ClientRuntime.Date?
        /// Uniquely identifies the evaluation result.
        public let evaluationResultIdentifier: ConfigClientTypes.EvaluationResultIdentifier?
        /// The time when AWS Config recorded the evaluation
        /// 			result.
        public let resultRecordedTime: ClientRuntime.Date?
        /// An encrypted token that associates an evaluation with an AWS
        /// 			Config rule. The token identifies the rule, the AWS resource being
        /// 			evaluated, and the event that triggered the evaluation.
        public let resultToken: Swift.String?

        public init (
            annotation: Swift.String? = nil,
            complianceType: ConfigClientTypes.ComplianceType? = nil,
            configRuleInvokedTime: ClientRuntime.Date? = nil,
            evaluationResultIdentifier: ConfigClientTypes.EvaluationResultIdentifier? = nil,
            resultRecordedTime: ClientRuntime.Date? = nil,
            resultToken: Swift.String? = nil
        )
        {
            self.annotation = annotation
            self.complianceType = complianceType
            self.configRuleInvokedTime = configRuleInvokedTime
            self.evaluationResultIdentifier = evaluationResultIdentifier
            self.resultRecordedTime = resultRecordedTime
            self.resultToken = resultToken
        }
    }

}

extension ConfigClientTypes.EvaluationResultIdentifier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationResultQualifier = "EvaluationResultQualifier"
        case orderingTimestamp = "OrderingTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationResultQualifier = evaluationResultQualifier {
            try encodeContainer.encode(evaluationResultQualifier, forKey: .evaluationResultQualifier)
        }
        if let orderingTimestamp = orderingTimestamp {
            try encodeContainer.encode(orderingTimestamp.timeIntervalSince1970, forKey: .orderingTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationResultQualifierDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.EvaluationResultQualifier.self, forKey: .evaluationResultQualifier)
        evaluationResultQualifier = evaluationResultQualifierDecoded
        let orderingTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .orderingTimestamp)
        orderingTimestamp = orderingTimestampDecoded
    }
}

extension ConfigClientTypes.EvaluationResultIdentifier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EvaluationResultIdentifier(evaluationResultQualifier: \(Swift.String(describing: evaluationResultQualifier)), orderingTimestamp: \(Swift.String(describing: orderingTimestamp)))"}
}

extension ConfigClientTypes {
    /// Uniquely identifies an evaluation result.
    public struct EvaluationResultIdentifier: Swift.Equatable {
        /// Identifies an AWS Config rule used to evaluate an AWS resource,
        /// 			and provides the type and ID of the evaluated resource.
        public let evaluationResultQualifier: ConfigClientTypes.EvaluationResultQualifier?
        /// The time of the event that triggered the evaluation of your AWS
        /// 			resources. The time can indicate when AWS Config delivered a
        /// 			configuration item change notification, or it can indicate when AWS
        /// 			Config delivered the configuration snapshot, depending on which
        /// 			event triggered the evaluation.
        public let orderingTimestamp: ClientRuntime.Date?

        public init (
            evaluationResultQualifier: ConfigClientTypes.EvaluationResultQualifier? = nil,
            orderingTimestamp: ClientRuntime.Date? = nil
        )
        {
            self.evaluationResultQualifier = evaluationResultQualifier
            self.orderingTimestamp = orderingTimestamp
        }
    }

}

extension ConfigClientTypes.EvaluationResultQualifier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
    }
}

extension ConfigClientTypes.EvaluationResultQualifier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EvaluationResultQualifier(configRuleName: \(Swift.String(describing: configRuleName)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConfigClientTypes {
    /// Identifies an AWS Config rule that evaluated an AWS resource,
    /// 			and provides the type and ID of the resource that the rule
    /// 			evaluated.
    public struct EvaluationResultQualifier: Swift.Equatable {
        /// The name of the AWS Config rule that was used in the
        /// 			evaluation.
        public let configRuleName: Swift.String?
        /// The ID of the evaluated AWS resource.
        public let resourceId: Swift.String?
        /// The type of AWS resource that was evaluated.
        public let resourceType: Swift.String?

        public init (
            configRuleName: Swift.String? = nil,
            resourceId: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.configRuleName = configRuleName
            self.resourceId = resourceId
            self.resourceType = resourceType
        }
    }

}

extension ConfigClientTypes {
    public enum EventSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case awsConfig
        case sdkUnknown(Swift.String)

        public static var allCases: [EventSource] {
            return [
                .awsConfig,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .awsConfig: return "aws.config"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EventSource(rawValue: rawValue) ?? EventSource.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.ExecutionControls: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ssmControls = "SsmControls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ssmControls = ssmControls {
            try encodeContainer.encode(ssmControls, forKey: .ssmControls)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ssmControlsDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.SsmControls.self, forKey: .ssmControls)
        ssmControls = ssmControlsDecoded
    }
}

extension ConfigClientTypes.ExecutionControls: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExecutionControls(ssmControls: \(Swift.String(describing: ssmControls)))"}
}

extension ConfigClientTypes {
    /// The controls that AWS Config uses for executing remediations.
    public struct ExecutionControls: Swift.Equatable {
        /// A SsmControls object.
        public let ssmControls: ConfigClientTypes.SsmControls?

        public init (
            ssmControls: ConfigClientTypes.SsmControls? = nil
        )
        {
            self.ssmControls = ssmControls
        }
    }

}

extension ConfigClientTypes.ExternalEvaluation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case annotation = "Annotation"
        case complianceResourceId = "ComplianceResourceId"
        case complianceResourceType = "ComplianceResourceType"
        case complianceType = "ComplianceType"
        case orderingTimestamp = "OrderingTimestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let annotation = annotation {
            try encodeContainer.encode(annotation, forKey: .annotation)
        }
        if let complianceResourceId = complianceResourceId {
            try encodeContainer.encode(complianceResourceId, forKey: .complianceResourceId)
        }
        if let complianceResourceType = complianceResourceType {
            try encodeContainer.encode(complianceResourceType, forKey: .complianceResourceType)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let orderingTimestamp = orderingTimestamp {
            try encodeContainer.encode(orderingTimestamp.timeIntervalSince1970, forKey: .orderingTimestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceResourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complianceResourceType)
        complianceResourceType = complianceResourceTypeDecoded
        let complianceResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complianceResourceId)
        complianceResourceId = complianceResourceIdDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let annotationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .annotation)
        annotation = annotationDecoded
        let orderingTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .orderingTimestamp)
        orderingTimestamp = orderingTimestampDecoded
    }
}

extension ConfigClientTypes.ExternalEvaluation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExternalEvaluation(annotation: \(Swift.String(describing: annotation)), complianceResourceId: \(Swift.String(describing: complianceResourceId)), complianceResourceType: \(Swift.String(describing: complianceResourceType)), complianceType: \(Swift.String(describing: complianceType)), orderingTimestamp: \(Swift.String(describing: orderingTimestamp)))"}
}

extension ConfigClientTypes {
    /// Identifies an AWS resource and indicates whether it complies with the AWS Config rule that it was evaluated against.
    public struct ExternalEvaluation: Swift.Equatable {
        /// Supplementary information about the reason of compliance. For example, this task was completed on a specific date.
        public let annotation: Swift.String?
        /// The evaluated compliance resource ID. AWS Config accepts only AWS account ID.
        /// This member is required.
        public let complianceResourceId: Swift.String?
        /// The evaluated compliance resource type. AWS Config accepts AWS::::Account resource type.
        /// This member is required.
        public let complianceResourceType: Swift.String?
        /// The compliance of the AWS resource. The valid values are COMPLIANT, NON_COMPLIANT,  and NOT_APPLICABLE.
        /// This member is required.
        public let complianceType: ConfigClientTypes.ComplianceType?
        /// The time when the compliance was recorded.
        /// This member is required.
        public let orderingTimestamp: ClientRuntime.Date?

        public init (
            annotation: Swift.String? = nil,
            complianceResourceId: Swift.String? = nil,
            complianceResourceType: Swift.String? = nil,
            complianceType: ConfigClientTypes.ComplianceType? = nil,
            orderingTimestamp: ClientRuntime.Date? = nil
        )
        {
            self.annotation = annotation
            self.complianceResourceId = complianceResourceId
            self.complianceResourceType = complianceResourceType
            self.complianceType = complianceType
            self.orderingTimestamp = orderingTimestamp
        }
    }

}

extension ConfigClientTypes.FailedDeleteRemediationExceptionsBatch: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedItems = "FailedItems"
        case failureMessage = "FailureMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failedItems = failedItems {
            var failedItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failedItems)
            for remediationexceptionresourcekeys0 in failedItems {
                try failedItemsContainer.encode(remediationexceptionresourcekeys0)
            }
        }
        if let failureMessage = failureMessage {
            try encodeContainer.encode(failureMessage, forKey: .failureMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureMessage)
        failureMessage = failureMessageDecoded
        let failedItemsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationExceptionResourceKey?].self, forKey: .failedItems)
        var failedItemsDecoded0:[ConfigClientTypes.RemediationExceptionResourceKey]? = nil
        if let failedItemsContainer = failedItemsContainer {
            failedItemsDecoded0 = [ConfigClientTypes.RemediationExceptionResourceKey]()
            for structure0 in failedItemsContainer {
                if let structure0 = structure0 {
                    failedItemsDecoded0?.append(structure0)
                }
            }
        }
        failedItems = failedItemsDecoded0
    }
}

extension ConfigClientTypes.FailedDeleteRemediationExceptionsBatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FailedDeleteRemediationExceptionsBatch(failedItems: \(Swift.String(describing: failedItems)), failureMessage: \(Swift.String(describing: failureMessage)))"}
}

extension ConfigClientTypes {
    /// List of each of the failed delete remediation exceptions with specific reasons.
    public struct FailedDeleteRemediationExceptionsBatch: Swift.Equatable {
        /// Returns remediation exception resource key object of the failed items.
        public let failedItems: [ConfigClientTypes.RemediationExceptionResourceKey]?
        /// Returns a failure message for delete remediation exception. For example, AWS Config creates an exception due to an internal error.
        public let failureMessage: Swift.String?

        public init (
            failedItems: [ConfigClientTypes.RemediationExceptionResourceKey]? = nil,
            failureMessage: Swift.String? = nil
        )
        {
            self.failedItems = failedItems
            self.failureMessage = failureMessage
        }
    }

}

extension ConfigClientTypes.FailedRemediationBatch: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedItems = "FailedItems"
        case failureMessage = "FailureMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failedItems = failedItems {
            var failedItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failedItems)
            for remediationconfigurations0 in failedItems {
                try failedItemsContainer.encode(remediationconfigurations0)
            }
        }
        if let failureMessage = failureMessage {
            try encodeContainer.encode(failureMessage, forKey: .failureMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureMessage)
        failureMessage = failureMessageDecoded
        let failedItemsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationConfiguration?].self, forKey: .failedItems)
        var failedItemsDecoded0:[ConfigClientTypes.RemediationConfiguration]? = nil
        if let failedItemsContainer = failedItemsContainer {
            failedItemsDecoded0 = [ConfigClientTypes.RemediationConfiguration]()
            for structure0 in failedItemsContainer {
                if let structure0 = structure0 {
                    failedItemsDecoded0?.append(structure0)
                }
            }
        }
        failedItems = failedItemsDecoded0
    }
}

extension ConfigClientTypes.FailedRemediationBatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FailedRemediationBatch(failedItems: \(Swift.String(describing: failedItems)), failureMessage: \(Swift.String(describing: failureMessage)))"}
}

extension ConfigClientTypes {
    /// List of each of the failed remediations with specific reasons.
    public struct FailedRemediationBatch: Swift.Equatable {
        /// Returns remediation configurations of the failed items.
        public let failedItems: [ConfigClientTypes.RemediationConfiguration]?
        /// Returns a failure message. For example, the resource is already compliant.
        public let failureMessage: Swift.String?

        public init (
            failedItems: [ConfigClientTypes.RemediationConfiguration]? = nil,
            failureMessage: Swift.String? = nil
        )
        {
            self.failedItems = failedItems
            self.failureMessage = failureMessage
        }
    }

}

extension ConfigClientTypes.FailedRemediationExceptionBatch: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedItems = "FailedItems"
        case failureMessage = "FailureMessage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failedItems = failedItems {
            var failedItemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .failedItems)
            for remediationexceptions0 in failedItems {
                try failedItemsContainer.encode(remediationexceptions0)
            }
        }
        if let failureMessage = failureMessage {
            try encodeContainer.encode(failureMessage, forKey: .failureMessage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureMessage)
        failureMessage = failureMessageDecoded
        let failedItemsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationException?].self, forKey: .failedItems)
        var failedItemsDecoded0:[ConfigClientTypes.RemediationException]? = nil
        if let failedItemsContainer = failedItemsContainer {
            failedItemsDecoded0 = [ConfigClientTypes.RemediationException]()
            for structure0 in failedItemsContainer {
                if let structure0 = structure0 {
                    failedItemsDecoded0?.append(structure0)
                }
            }
        }
        failedItems = failedItemsDecoded0
    }
}

extension ConfigClientTypes.FailedRemediationExceptionBatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FailedRemediationExceptionBatch(failedItems: \(Swift.String(describing: failedItems)), failureMessage: \(Swift.String(describing: failureMessage)))"}
}

extension ConfigClientTypes {
    /// List of each of the failed remediation exceptions with specific reasons.
    public struct FailedRemediationExceptionBatch: Swift.Equatable {
        /// Returns remediation exception resource key object of the failed items.
        public let failedItems: [ConfigClientTypes.RemediationException]?
        /// Returns a failure message. For example, the auto-remediation has failed.
        public let failureMessage: Swift.String?

        public init (
            failedItems: [ConfigClientTypes.RemediationException]? = nil,
            failureMessage: Swift.String? = nil
        )
        {
            self.failedItems = failedItems
            self.failureMessage = failureMessage
        }
    }

}

extension ConfigClientTypes.FieldInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension ConfigClientTypes.FieldInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FieldInfo(name: \(Swift.String(describing: name)))"}
}

extension ConfigClientTypes {
    /// Details about the fields such as name of the field.
    public struct FieldInfo: Swift.Equatable {
        /// Name of the field.
        public let name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

public struct GetAggregateComplianceDetailsByConfigRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateComplianceDetailsByConfigRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateComplianceDetailsByConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateComplianceDetailsByConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateComplianceDetailsByConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateComplianceDetailsByConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateComplianceDetailsByConfigRuleOutputError>
}

extension GetAggregateComplianceDetailsByConfigRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAggregateComplianceDetailsByConfigRuleInput(accountId: \(Swift.String(describing: accountId)), awsRegion: \(Swift.String(describing: awsRegion)), complianceType: \(Swift.String(describing: complianceType)), configRuleName: \(Swift.String(describing: configRuleName)), configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetAggregateComplianceDetailsByConfigRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case awsRegion = "AwsRegion"
        case complianceType = "ComplianceType"
        case configRuleName = "ConfigRuleName"
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let awsRegion = awsRegion {
            try encodeContainer.encode(awsRegion, forKey: .awsRegion)
        }
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType.rawValue, forKey: .complianceType)
        }
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetAggregateComplianceDetailsByConfigRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateComplianceDetailsByConfigRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateComplianceDetailsByConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateComplianceDetailsByConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateComplianceDetailsByConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateComplianceDetailsByConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateComplianceDetailsByConfigRuleOutputError>
}

public struct GetAggregateComplianceDetailsByConfigRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateComplianceDetailsByConfigRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateComplianceDetailsByConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateComplianceDetailsByConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateComplianceDetailsByConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateComplianceDetailsByConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateComplianceDetailsByConfigRuleOutputError>
}

public struct GetAggregateComplianceDetailsByConfigRuleInput: Swift.Equatable {
    /// The 12-digit account ID of the source account.
    /// This member is required.
    public let accountId: Swift.String?
    /// The source region from where the data is aggregated.
    /// This member is required.
    public let awsRegion: Swift.String?
    /// The resource compliance status.
    /// 		
    /// 			         For the
    /// 					GetAggregateComplianceDetailsByConfigRuleRequest
    /// 				data type, AWS Config supports only the COMPLIANT
    /// 				and NON_COMPLIANT. AWS Config does not support the
    /// 					NOT_APPLICABLE and
    /// 					INSUFFICIENT_DATA values.
    /// 		
    public let complianceType: ConfigClientTypes.ComplianceType?
    /// The name of the AWS Config rule for which you want compliance
    /// 			information.
    /// This member is required.
    public let configRuleName: Swift.String?
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// The maximum number of evaluation results returned on each page.
    /// 			The default is 50. You cannot specify a number greater than 100. If
    /// 			you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        accountId: Swift.String? = nil,
        awsRegion: Swift.String? = nil,
        complianceType: ConfigClientTypes.ComplianceType? = nil,
        configRuleName: Swift.String? = nil,
        configurationAggregatorName: Swift.String? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.accountId = accountId
        self.awsRegion = awsRegion
        self.complianceType = complianceType
        self.configRuleName = configRuleName
        self.configurationAggregatorName = configurationAggregatorName
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct GetAggregateComplianceDetailsByConfigRuleInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
    public let configRuleName: Swift.String?
    public let accountId: Swift.String?
    public let awsRegion: Swift.String?
    public let complianceType: ConfigClientTypes.ComplianceType?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension GetAggregateComplianceDetailsByConfigRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case awsRegion = "AwsRegion"
        case complianceType = "ComplianceType"
        case configRuleName = "ConfigRuleName"
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let awsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsRegion)
        awsRegion = awsRegionDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceType.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetAggregateComplianceDetailsByConfigRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAggregateComplianceDetailsByConfigRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAggregateComplianceDetailsByConfigRuleOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAggregateComplianceDetailsByConfigRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAggregateComplianceDetailsByConfigRuleOutputResponse(aggregateEvaluationResults: \(Swift.String(describing: aggregateEvaluationResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetAggregateComplianceDetailsByConfigRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAggregateComplianceDetailsByConfigRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aggregateEvaluationResults = output.aggregateEvaluationResults
            self.nextToken = output.nextToken
        } else {
            self.aggregateEvaluationResults = nil
            self.nextToken = nil
        }
    }
}

public struct GetAggregateComplianceDetailsByConfigRuleOutputResponse: Swift.Equatable {
    /// Returns an AggregateEvaluationResults object.
    public let aggregateEvaluationResults: [ConfigClientTypes.AggregateEvaluationResult]?
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        aggregateEvaluationResults: [ConfigClientTypes.AggregateEvaluationResult]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aggregateEvaluationResults = aggregateEvaluationResults
        self.nextToken = nextToken
    }
}

struct GetAggregateComplianceDetailsByConfigRuleOutputResponseBody: Swift.Equatable {
    public let aggregateEvaluationResults: [ConfigClientTypes.AggregateEvaluationResult]?
    public let nextToken: Swift.String?
}

extension GetAggregateComplianceDetailsByConfigRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateEvaluationResults = "AggregateEvaluationResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregateEvaluationResultsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregateEvaluationResult?].self, forKey: .aggregateEvaluationResults)
        var aggregateEvaluationResultsDecoded0:[ConfigClientTypes.AggregateEvaluationResult]? = nil
        if let aggregateEvaluationResultsContainer = aggregateEvaluationResultsContainer {
            aggregateEvaluationResultsDecoded0 = [ConfigClientTypes.AggregateEvaluationResult]()
            for structure0 in aggregateEvaluationResultsContainer {
                if let structure0 = structure0 {
                    aggregateEvaluationResultsDecoded0?.append(structure0)
                }
            }
        }
        aggregateEvaluationResults = aggregateEvaluationResultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetAggregateConfigRuleComplianceSummaryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateConfigRuleComplianceSummaryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateConfigRuleComplianceSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateConfigRuleComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateConfigRuleComplianceSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateConfigRuleComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateConfigRuleComplianceSummaryOutputError>
}

extension GetAggregateConfigRuleComplianceSummaryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAggregateConfigRuleComplianceSummaryInput(configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), filters: \(Swift.String(describing: filters)), groupByKey: \(Swift.String(describing: groupByKey)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetAggregateConfigRuleComplianceSummaryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case groupByKey = "GroupByKey"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let groupByKey = groupByKey {
            try encodeContainer.encode(groupByKey.rawValue, forKey: .groupByKey)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetAggregateConfigRuleComplianceSummaryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateConfigRuleComplianceSummaryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateConfigRuleComplianceSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateConfigRuleComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateConfigRuleComplianceSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateConfigRuleComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateConfigRuleComplianceSummaryOutputError>
}

public struct GetAggregateConfigRuleComplianceSummaryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateConfigRuleComplianceSummaryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateConfigRuleComplianceSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateConfigRuleComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateConfigRuleComplianceSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateConfigRuleComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateConfigRuleComplianceSummaryOutputError>
}

public struct GetAggregateConfigRuleComplianceSummaryInput: Swift.Equatable {
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// Filters the results based on the
    /// 			ConfigRuleComplianceSummaryFilters object.
    public let filters: ConfigClientTypes.ConfigRuleComplianceSummaryFilters?
    /// Groups the result based on ACCOUNT_ID or AWS_REGION.
    public let groupByKey: ConfigClientTypes.ConfigRuleComplianceSummaryGroupKey?
    /// The maximum number of evaluation results returned on each page.
    /// 			The default is 1000. You cannot specify a number greater than 1000.
    /// 			If you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        configurationAggregatorName: Swift.String? = nil,
        filters: ConfigClientTypes.ConfigRuleComplianceSummaryFilters? = nil,
        groupByKey: ConfigClientTypes.ConfigRuleComplianceSummaryGroupKey? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationAggregatorName = configurationAggregatorName
        self.filters = filters
        self.groupByKey = groupByKey
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct GetAggregateConfigRuleComplianceSummaryInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
    public let filters: ConfigClientTypes.ConfigRuleComplianceSummaryFilters?
    public let groupByKey: ConfigClientTypes.ConfigRuleComplianceSummaryGroupKey?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension GetAggregateConfigRuleComplianceSummaryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case groupByKey = "GroupByKey"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigRuleComplianceSummaryFilters.self, forKey: .filters)
        filters = filtersDecoded
        let groupByKeyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigRuleComplianceSummaryGroupKey.self, forKey: .groupByKey)
        groupByKey = groupByKeyDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetAggregateConfigRuleComplianceSummaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAggregateConfigRuleComplianceSummaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAggregateConfigRuleComplianceSummaryOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAggregateConfigRuleComplianceSummaryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAggregateConfigRuleComplianceSummaryOutputResponse(aggregateComplianceCounts: \(Swift.String(describing: aggregateComplianceCounts)), groupByKey: \(Swift.String(describing: groupByKey)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetAggregateConfigRuleComplianceSummaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAggregateConfigRuleComplianceSummaryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aggregateComplianceCounts = output.aggregateComplianceCounts
            self.groupByKey = output.groupByKey
            self.nextToken = output.nextToken
        } else {
            self.aggregateComplianceCounts = nil
            self.groupByKey = nil
            self.nextToken = nil
        }
    }
}

public struct GetAggregateConfigRuleComplianceSummaryOutputResponse: Swift.Equatable {
    /// Returns a list of AggregateComplianceCounts object.
    public let aggregateComplianceCounts: [ConfigClientTypes.AggregateComplianceCount]?
    /// Groups the result based on ACCOUNT_ID or AWS_REGION.
    public let groupByKey: Swift.String?
    /// The nextToken string returned on a previous page that you use
    /// 			to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        aggregateComplianceCounts: [ConfigClientTypes.AggregateComplianceCount]? = nil,
        groupByKey: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aggregateComplianceCounts = aggregateComplianceCounts
        self.groupByKey = groupByKey
        self.nextToken = nextToken
    }
}

struct GetAggregateConfigRuleComplianceSummaryOutputResponseBody: Swift.Equatable {
    public let groupByKey: Swift.String?
    public let aggregateComplianceCounts: [ConfigClientTypes.AggregateComplianceCount]?
    public let nextToken: Swift.String?
}

extension GetAggregateConfigRuleComplianceSummaryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateComplianceCounts = "AggregateComplianceCounts"
        case groupByKey = "GroupByKey"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupByKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupByKey)
        groupByKey = groupByKeyDecoded
        let aggregateComplianceCountsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregateComplianceCount?].self, forKey: .aggregateComplianceCounts)
        var aggregateComplianceCountsDecoded0:[ConfigClientTypes.AggregateComplianceCount]? = nil
        if let aggregateComplianceCountsContainer = aggregateComplianceCountsContainer {
            aggregateComplianceCountsDecoded0 = [ConfigClientTypes.AggregateComplianceCount]()
            for structure0 in aggregateComplianceCountsContainer {
                if let structure0 = structure0 {
                    aggregateComplianceCountsDecoded0?.append(structure0)
                }
            }
        }
        aggregateComplianceCounts = aggregateComplianceCountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetAggregateConformancePackComplianceSummaryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateConformancePackComplianceSummaryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateConformancePackComplianceSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateConformancePackComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateConformancePackComplianceSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateConformancePackComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateConformancePackComplianceSummaryOutputError>
}

extension GetAggregateConformancePackComplianceSummaryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAggregateConformancePackComplianceSummaryInput(configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), filters: \(Swift.String(describing: filters)), groupByKey: \(Swift.String(describing: groupByKey)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetAggregateConformancePackComplianceSummaryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case groupByKey = "GroupByKey"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let groupByKey = groupByKey {
            try encodeContainer.encode(groupByKey.rawValue, forKey: .groupByKey)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetAggregateConformancePackComplianceSummaryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateConformancePackComplianceSummaryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateConformancePackComplianceSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateConformancePackComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateConformancePackComplianceSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateConformancePackComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateConformancePackComplianceSummaryOutputError>
}

public struct GetAggregateConformancePackComplianceSummaryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateConformancePackComplianceSummaryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateConformancePackComplianceSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateConformancePackComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateConformancePackComplianceSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateConformancePackComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateConformancePackComplianceSummaryOutputError>
}

public struct GetAggregateConformancePackComplianceSummaryInput: Swift.Equatable {
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// Filters the results based on the AggregateConformancePackComplianceSummaryFilters object.
    public let filters: ConfigClientTypes.AggregateConformancePackComplianceSummaryFilters?
    /// Groups the result based on AWS Account ID or AWS Region.
    public let groupByKey: ConfigClientTypes.AggregateConformancePackComplianceSummaryGroupKey?
    /// The maximum number of results returned on each page. The default is maximum. If you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        configurationAggregatorName: Swift.String? = nil,
        filters: ConfigClientTypes.AggregateConformancePackComplianceSummaryFilters? = nil,
        groupByKey: ConfigClientTypes.AggregateConformancePackComplianceSummaryGroupKey? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationAggregatorName = configurationAggregatorName
        self.filters = filters
        self.groupByKey = groupByKey
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct GetAggregateConformancePackComplianceSummaryInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
    public let filters: ConfigClientTypes.AggregateConformancePackComplianceSummaryFilters?
    public let groupByKey: ConfigClientTypes.AggregateConformancePackComplianceSummaryGroupKey?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension GetAggregateConformancePackComplianceSummaryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case groupByKey = "GroupByKey"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.AggregateConformancePackComplianceSummaryFilters.self, forKey: .filters)
        filters = filtersDecoded
        let groupByKeyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.AggregateConformancePackComplianceSummaryGroupKey.self, forKey: .groupByKey)
        groupByKey = groupByKeyDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetAggregateConformancePackComplianceSummaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAggregateConformancePackComplianceSummaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAggregateConformancePackComplianceSummaryOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAggregateConformancePackComplianceSummaryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAggregateConformancePackComplianceSummaryOutputResponse(aggregateConformancePackComplianceSummaries: \(Swift.String(describing: aggregateConformancePackComplianceSummaries)), groupByKey: \(Swift.String(describing: groupByKey)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetAggregateConformancePackComplianceSummaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAggregateConformancePackComplianceSummaryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aggregateConformancePackComplianceSummaries = output.aggregateConformancePackComplianceSummaries
            self.groupByKey = output.groupByKey
            self.nextToken = output.nextToken
        } else {
            self.aggregateConformancePackComplianceSummaries = nil
            self.groupByKey = nil
            self.nextToken = nil
        }
    }
}

public struct GetAggregateConformancePackComplianceSummaryOutputResponse: Swift.Equatable {
    /// Returns a list of AggregateConformancePackComplianceSummary object.
    public let aggregateConformancePackComplianceSummaries: [ConfigClientTypes.AggregateConformancePackComplianceSummary]?
    /// Groups the result based on AWS Account ID or AWS Region.
    public let groupByKey: Swift.String?
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        aggregateConformancePackComplianceSummaries: [ConfigClientTypes.AggregateConformancePackComplianceSummary]? = nil,
        groupByKey: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.aggregateConformancePackComplianceSummaries = aggregateConformancePackComplianceSummaries
        self.groupByKey = groupByKey
        self.nextToken = nextToken
    }
}

struct GetAggregateConformancePackComplianceSummaryOutputResponseBody: Swift.Equatable {
    public let aggregateConformancePackComplianceSummaries: [ConfigClientTypes.AggregateConformancePackComplianceSummary]?
    public let groupByKey: Swift.String?
    public let nextToken: Swift.String?
}

extension GetAggregateConformancePackComplianceSummaryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregateConformancePackComplianceSummaries = "AggregateConformancePackComplianceSummaries"
        case groupByKey = "GroupByKey"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregateConformancePackComplianceSummariesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregateConformancePackComplianceSummary?].self, forKey: .aggregateConformancePackComplianceSummaries)
        var aggregateConformancePackComplianceSummariesDecoded0:[ConfigClientTypes.AggregateConformancePackComplianceSummary]? = nil
        if let aggregateConformancePackComplianceSummariesContainer = aggregateConformancePackComplianceSummariesContainer {
            aggregateConformancePackComplianceSummariesDecoded0 = [ConfigClientTypes.AggregateConformancePackComplianceSummary]()
            for structure0 in aggregateConformancePackComplianceSummariesContainer {
                if let structure0 = structure0 {
                    aggregateConformancePackComplianceSummariesDecoded0?.append(structure0)
                }
            }
        }
        aggregateConformancePackComplianceSummaries = aggregateConformancePackComplianceSummariesDecoded0
        let groupByKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupByKey)
        groupByKey = groupByKeyDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetAggregateDiscoveredResourceCountsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateDiscoveredResourceCountsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateDiscoveredResourceCountsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateDiscoveredResourceCountsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateDiscoveredResourceCountsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateDiscoveredResourceCountsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateDiscoveredResourceCountsOutputError>
}

extension GetAggregateDiscoveredResourceCountsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAggregateDiscoveredResourceCountsInput(configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), filters: \(Swift.String(describing: filters)), groupByKey: \(Swift.String(describing: groupByKey)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetAggregateDiscoveredResourceCountsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case groupByKey = "GroupByKey"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let groupByKey = groupByKey {
            try encodeContainer.encode(groupByKey.rawValue, forKey: .groupByKey)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetAggregateDiscoveredResourceCountsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateDiscoveredResourceCountsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateDiscoveredResourceCountsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateDiscoveredResourceCountsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateDiscoveredResourceCountsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateDiscoveredResourceCountsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateDiscoveredResourceCountsOutputError>
}

public struct GetAggregateDiscoveredResourceCountsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateDiscoveredResourceCountsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateDiscoveredResourceCountsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateDiscoveredResourceCountsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateDiscoveredResourceCountsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateDiscoveredResourceCountsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateDiscoveredResourceCountsOutputError>
}

public struct GetAggregateDiscoveredResourceCountsInput: Swift.Equatable {
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// Filters the results based on the ResourceCountFilters object.
    public let filters: ConfigClientTypes.ResourceCountFilters?
    /// The key to group the resource counts.
    public let groupByKey: ConfigClientTypes.ResourceCountGroupKey?
    /// The maximum number of GroupedResourceCount objects returned on each page. The default is 1000. You cannot specify a number greater than 1000. If you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        configurationAggregatorName: Swift.String? = nil,
        filters: ConfigClientTypes.ResourceCountFilters? = nil,
        groupByKey: ConfigClientTypes.ResourceCountGroupKey? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationAggregatorName = configurationAggregatorName
        self.filters = filters
        self.groupByKey = groupByKey
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct GetAggregateDiscoveredResourceCountsInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
    public let filters: ConfigClientTypes.ResourceCountFilters?
    public let groupByKey: ConfigClientTypes.ResourceCountGroupKey?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension GetAggregateDiscoveredResourceCountsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case groupByKey = "GroupByKey"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceCountFilters.self, forKey: .filters)
        filters = filtersDecoded
        let groupByKeyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceCountGroupKey.self, forKey: .groupByKey)
        groupByKey = groupByKeyDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetAggregateDiscoveredResourceCountsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAggregateDiscoveredResourceCountsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAggregateDiscoveredResourceCountsOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAggregateDiscoveredResourceCountsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAggregateDiscoveredResourceCountsOutputResponse(groupByKey: \(Swift.String(describing: groupByKey)), groupedResourceCounts: \(Swift.String(describing: groupedResourceCounts)), nextToken: \(Swift.String(describing: nextToken)), totalDiscoveredResources: \(Swift.String(describing: totalDiscoveredResources)))"}
}

extension GetAggregateDiscoveredResourceCountsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAggregateDiscoveredResourceCountsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.groupByKey = output.groupByKey
            self.groupedResourceCounts = output.groupedResourceCounts
            self.nextToken = output.nextToken
            self.totalDiscoveredResources = output.totalDiscoveredResources
        } else {
            self.groupByKey = nil
            self.groupedResourceCounts = nil
            self.nextToken = nil
            self.totalDiscoveredResources = 0
        }
    }
}

public struct GetAggregateDiscoveredResourceCountsOutputResponse: Swift.Equatable {
    /// The key passed into the request object. If GroupByKey is not provided, the result will be empty.
    public let groupByKey: Swift.String?
    /// Returns a list of GroupedResourceCount objects.
    public let groupedResourceCounts: [ConfigClientTypes.GroupedResourceCount]?
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// The total number of resources that are present in an aggregator with the filters that you provide.
    /// This member is required.
    public let totalDiscoveredResources: Swift.Int

    public init (
        groupByKey: Swift.String? = nil,
        groupedResourceCounts: [ConfigClientTypes.GroupedResourceCount]? = nil,
        nextToken: Swift.String? = nil,
        totalDiscoveredResources: Swift.Int = 0
    )
    {
        self.groupByKey = groupByKey
        self.groupedResourceCounts = groupedResourceCounts
        self.nextToken = nextToken
        self.totalDiscoveredResources = totalDiscoveredResources
    }
}

struct GetAggregateDiscoveredResourceCountsOutputResponseBody: Swift.Equatable {
    public let totalDiscoveredResources: Swift.Int
    public let groupByKey: Swift.String?
    public let groupedResourceCounts: [ConfigClientTypes.GroupedResourceCount]?
    public let nextToken: Swift.String?
}

extension GetAggregateDiscoveredResourceCountsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupByKey = "GroupByKey"
        case groupedResourceCounts = "GroupedResourceCounts"
        case nextToken = "NextToken"
        case totalDiscoveredResources = "TotalDiscoveredResources"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalDiscoveredResourcesDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalDiscoveredResources)
        totalDiscoveredResources = totalDiscoveredResourcesDecoded
        let groupByKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupByKey)
        groupByKey = groupByKeyDecoded
        let groupedResourceCountsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.GroupedResourceCount?].self, forKey: .groupedResourceCounts)
        var groupedResourceCountsDecoded0:[ConfigClientTypes.GroupedResourceCount]? = nil
        if let groupedResourceCountsContainer = groupedResourceCountsContainer {
            groupedResourceCountsDecoded0 = [ConfigClientTypes.GroupedResourceCount]()
            for structure0 in groupedResourceCountsContainer {
                if let structure0 = structure0 {
                    groupedResourceCountsDecoded0?.append(structure0)
                }
            }
        }
        groupedResourceCounts = groupedResourceCountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetAggregateResourceConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateResourceConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateResourceConfigOutputError>
}

extension GetAggregateResourceConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAggregateResourceConfigInput(configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), resourceIdentifier: \(Swift.String(describing: resourceIdentifier)))"}
}

extension GetAggregateResourceConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case resourceIdentifier = "ResourceIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let resourceIdentifier = resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
    }
}

public struct GetAggregateResourceConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateResourceConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateResourceConfigOutputError>
}

public struct GetAggregateResourceConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAggregateResourceConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAggregateResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAggregateResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAggregateResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAggregateResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAggregateResourceConfigOutputError>
}

public struct GetAggregateResourceConfigInput: Swift.Equatable {
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// An object that identifies aggregate resource.
    /// This member is required.
    public let resourceIdentifier: ConfigClientTypes.AggregateResourceIdentifier?

    public init (
        configurationAggregatorName: Swift.String? = nil,
        resourceIdentifier: ConfigClientTypes.AggregateResourceIdentifier? = nil
    )
    {
        self.configurationAggregatorName = configurationAggregatorName
        self.resourceIdentifier = resourceIdentifier
    }
}

struct GetAggregateResourceConfigInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
    public let resourceIdentifier: ConfigClientTypes.AggregateResourceIdentifier?
}

extension GetAggregateResourceConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case resourceIdentifier = "ResourceIdentifier"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.AggregateResourceIdentifier.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
    }
}

extension GetAggregateResourceConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAggregateResourceConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OversizedConfigurationItemException" : self = .oversizedConfigurationItemException(try OversizedConfigurationItemException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotDiscoveredException" : self = .resourceNotDiscoveredException(try ResourceNotDiscoveredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAggregateResourceConfigOutputError: Swift.Error, Swift.Equatable {
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case oversizedConfigurationItemException(OversizedConfigurationItemException)
    case resourceNotDiscoveredException(ResourceNotDiscoveredException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAggregateResourceConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAggregateResourceConfigOutputResponse(configurationItem: \(Swift.String(describing: configurationItem)))"}
}

extension GetAggregateResourceConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAggregateResourceConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationItem = output.configurationItem
        } else {
            self.configurationItem = nil
        }
    }
}

public struct GetAggregateResourceConfigOutputResponse: Swift.Equatable {
    /// Returns a ConfigurationItem object.
    public let configurationItem: ConfigClientTypes.ConfigurationItem?

    public init (
        configurationItem: ConfigClientTypes.ConfigurationItem? = nil
    )
    {
        self.configurationItem = configurationItem
    }
}

struct GetAggregateResourceConfigOutputResponseBody: Swift.Equatable {
    public let configurationItem: ConfigClientTypes.ConfigurationItem?
}

extension GetAggregateResourceConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationItem = "ConfigurationItem"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationItemDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigurationItem.self, forKey: .configurationItem)
        configurationItem = configurationItemDecoded
    }
}

public struct GetComplianceDetailsByConfigRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetComplianceDetailsByConfigRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetComplianceDetailsByConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetComplianceDetailsByConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetComplianceDetailsByConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetComplianceDetailsByConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetComplianceDetailsByConfigRuleOutputError>
}

extension GetComplianceDetailsByConfigRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetComplianceDetailsByConfigRuleInput(complianceTypes: \(Swift.String(describing: complianceTypes)), configRuleName: \(Swift.String(describing: configRuleName)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetComplianceDetailsByConfigRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceTypes = "ComplianceTypes"
        case configRuleName = "ConfigRuleName"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceTypes = complianceTypes {
            var complianceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .complianceTypes)
            for compliancetypes0 in complianceTypes {
                try complianceTypesContainer.encode(compliancetypes0.rawValue)
            }
        }
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetComplianceDetailsByConfigRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetComplianceDetailsByConfigRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetComplianceDetailsByConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetComplianceDetailsByConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetComplianceDetailsByConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetComplianceDetailsByConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetComplianceDetailsByConfigRuleOutputError>
}

public struct GetComplianceDetailsByConfigRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetComplianceDetailsByConfigRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetComplianceDetailsByConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetComplianceDetailsByConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetComplianceDetailsByConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetComplianceDetailsByConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetComplianceDetailsByConfigRuleOutputError>
}

///
public struct GetComplianceDetailsByConfigRuleInput: Swift.Equatable {
    /// Filters the results by compliance.
    /// 		       The allowed values are COMPLIANT,
    /// 				NON_COMPLIANT, and
    /// 			NOT_APPLICABLE.
    public let complianceTypes: [ConfigClientTypes.ComplianceType]?
    /// The name of the AWS Config rule for which you want compliance
    /// 			information.
    /// This member is required.
    public let configRuleName: Swift.String?
    /// The maximum number of evaluation results returned on each page.
    /// 			The default is 10. You cannot specify a number greater than 100. If
    /// 			you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page
    /// 			that you use to get the next page of results in a paginated
    /// 			response.
    public let nextToken: Swift.String?

    public init (
        complianceTypes: [ConfigClientTypes.ComplianceType]? = nil,
        configRuleName: Swift.String? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.complianceTypes = complianceTypes
        self.configRuleName = configRuleName
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct GetComplianceDetailsByConfigRuleInputBody: Swift.Equatable {
    public let configRuleName: Swift.String?
    public let complianceTypes: [ConfigClientTypes.ComplianceType]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension GetComplianceDetailsByConfigRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceTypes = "ComplianceTypes"
        case configRuleName = "ConfigRuleName"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let complianceTypesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ComplianceType?].self, forKey: .complianceTypes)
        var complianceTypesDecoded0:[ConfigClientTypes.ComplianceType]? = nil
        if let complianceTypesContainer = complianceTypesContainer {
            complianceTypesDecoded0 = [ConfigClientTypes.ComplianceType]()
            for string0 in complianceTypesContainer {
                if let string0 = string0 {
                    complianceTypesDecoded0?.append(string0)
                }
            }
        }
        complianceTypes = complianceTypesDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetComplianceDetailsByConfigRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetComplianceDetailsByConfigRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigRuleException" : self = .noSuchConfigRuleException(try NoSuchConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetComplianceDetailsByConfigRuleOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchConfigRuleException(NoSuchConfigRuleException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetComplianceDetailsByConfigRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetComplianceDetailsByConfigRuleOutputResponse(evaluationResults: \(Swift.String(describing: evaluationResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetComplianceDetailsByConfigRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetComplianceDetailsByConfigRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.evaluationResults = output.evaluationResults
            self.nextToken = output.nextToken
        } else {
            self.evaluationResults = nil
            self.nextToken = nil
        }
    }
}

///
public struct GetComplianceDetailsByConfigRuleOutputResponse: Swift.Equatable {
    /// Indicates whether the AWS resource complies with the specified
    /// 			AWS Config rule.
    public let evaluationResults: [ConfigClientTypes.EvaluationResult]?
    /// The string that you use in a subsequent request to get the next
    /// 			page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        evaluationResults: [ConfigClientTypes.EvaluationResult]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.evaluationResults = evaluationResults
        self.nextToken = nextToken
    }
}

struct GetComplianceDetailsByConfigRuleOutputResponseBody: Swift.Equatable {
    public let evaluationResults: [ConfigClientTypes.EvaluationResult]?
    public let nextToken: Swift.String?
}

extension GetComplianceDetailsByConfigRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationResults = "EvaluationResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationResultsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.EvaluationResult?].self, forKey: .evaluationResults)
        var evaluationResultsDecoded0:[ConfigClientTypes.EvaluationResult]? = nil
        if let evaluationResultsContainer = evaluationResultsContainer {
            evaluationResultsDecoded0 = [ConfigClientTypes.EvaluationResult]()
            for structure0 in evaluationResultsContainer {
                if let structure0 = structure0 {
                    evaluationResultsDecoded0?.append(structure0)
                }
            }
        }
        evaluationResults = evaluationResultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetComplianceDetailsByResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetComplianceDetailsByResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetComplianceDetailsByResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetComplianceDetailsByResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetComplianceDetailsByResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetComplianceDetailsByResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetComplianceDetailsByResourceOutputError>
}

extension GetComplianceDetailsByResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetComplianceDetailsByResourceInput(complianceTypes: \(Swift.String(describing: complianceTypes)), nextToken: \(Swift.String(describing: nextToken)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension GetComplianceDetailsByResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceTypes = "ComplianceTypes"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceTypes = complianceTypes {
            var complianceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .complianceTypes)
            for compliancetypes0 in complianceTypes {
                try complianceTypesContainer.encode(compliancetypes0.rawValue)
            }
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }
}

public struct GetComplianceDetailsByResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetComplianceDetailsByResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetComplianceDetailsByResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetComplianceDetailsByResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetComplianceDetailsByResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetComplianceDetailsByResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetComplianceDetailsByResourceOutputError>
}

public struct GetComplianceDetailsByResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetComplianceDetailsByResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetComplianceDetailsByResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetComplianceDetailsByResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetComplianceDetailsByResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetComplianceDetailsByResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetComplianceDetailsByResourceOutputError>
}

///
public struct GetComplianceDetailsByResourceInput: Swift.Equatable {
    /// Filters the results by compliance.
    /// 		       The allowed values are COMPLIANT,
    /// 				NON_COMPLIANT, and
    /// 			NOT_APPLICABLE.
    public let complianceTypes: [ConfigClientTypes.ComplianceType]?
    /// The nextToken string returned on a previous page
    /// 			that you use to get the next page of results in a paginated
    /// 			response.
    public let nextToken: Swift.String?
    /// The ID of the AWS resource for which you want compliance
    /// 			information.
    /// This member is required.
    public let resourceId: Swift.String?
    /// The type of the AWS resource for which you want compliance
    /// 			information.
    /// This member is required.
    public let resourceType: Swift.String?

    public init (
        complianceTypes: [ConfigClientTypes.ComplianceType]? = nil,
        nextToken: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.complianceTypes = complianceTypes
        self.nextToken = nextToken
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct GetComplianceDetailsByResourceInputBody: Swift.Equatable {
    public let resourceType: Swift.String?
    public let resourceId: Swift.String?
    public let complianceTypes: [ConfigClientTypes.ComplianceType]?
    public let nextToken: Swift.String?
}

extension GetComplianceDetailsByResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceTypes = "ComplianceTypes"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let complianceTypesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ComplianceType?].self, forKey: .complianceTypes)
        var complianceTypesDecoded0:[ConfigClientTypes.ComplianceType]? = nil
        if let complianceTypesContainer = complianceTypesContainer {
            complianceTypesDecoded0 = [ConfigClientTypes.ComplianceType]()
            for string0 in complianceTypesContainer {
                if let string0 = string0 {
                    complianceTypesDecoded0?.append(string0)
                }
            }
        }
        complianceTypes = complianceTypesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetComplianceDetailsByResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetComplianceDetailsByResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetComplianceDetailsByResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetComplianceDetailsByResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetComplianceDetailsByResourceOutputResponse(evaluationResults: \(Swift.String(describing: evaluationResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetComplianceDetailsByResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetComplianceDetailsByResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.evaluationResults = output.evaluationResults
            self.nextToken = output.nextToken
        } else {
            self.evaluationResults = nil
            self.nextToken = nil
        }
    }
}

///
public struct GetComplianceDetailsByResourceOutputResponse: Swift.Equatable {
    /// Indicates whether the specified AWS resource complies each AWS
    /// 			Config rule.
    public let evaluationResults: [ConfigClientTypes.EvaluationResult]?
    /// The string that you use in a subsequent request to get the next
    /// 			page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        evaluationResults: [ConfigClientTypes.EvaluationResult]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.evaluationResults = evaluationResults
        self.nextToken = nextToken
    }
}

struct GetComplianceDetailsByResourceOutputResponseBody: Swift.Equatable {
    public let evaluationResults: [ConfigClientTypes.EvaluationResult]?
    public let nextToken: Swift.String?
}

extension GetComplianceDetailsByResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationResults = "EvaluationResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationResultsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.EvaluationResult?].self, forKey: .evaluationResults)
        var evaluationResultsDecoded0:[ConfigClientTypes.EvaluationResult]? = nil
        if let evaluationResultsContainer = evaluationResultsContainer {
            evaluationResultsDecoded0 = [ConfigClientTypes.EvaluationResult]()
            for structure0 in evaluationResultsContainer {
                if let structure0 = structure0 {
                    evaluationResultsDecoded0?.append(structure0)
                }
            }
        }
        evaluationResults = evaluationResultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetComplianceSummaryByConfigRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetComplianceSummaryByConfigRuleInput()"}
}

extension GetComplianceSummaryByConfigRuleInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetComplianceSummaryByConfigRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetComplianceSummaryByConfigRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetComplianceSummaryByConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetComplianceSummaryByConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetComplianceSummaryByConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetComplianceSummaryByConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetComplianceSummaryByConfigRuleOutputError>
}

public struct GetComplianceSummaryByConfigRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetComplianceSummaryByConfigRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetComplianceSummaryByConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetComplianceSummaryByConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetComplianceSummaryByConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetComplianceSummaryByConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetComplianceSummaryByConfigRuleOutputError>
}

public struct GetComplianceSummaryByConfigRuleInput: Swift.Equatable {

    public init() {}
}

struct GetComplianceSummaryByConfigRuleInputBody: Swift.Equatable {
}

extension GetComplianceSummaryByConfigRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetComplianceSummaryByConfigRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetComplianceSummaryByConfigRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetComplianceSummaryByConfigRuleOutputError: Swift.Error, Swift.Equatable {
    case unknown(UnknownAWSHttpServiceError)
}

extension GetComplianceSummaryByConfigRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetComplianceSummaryByConfigRuleOutputResponse(complianceSummary: \(Swift.String(describing: complianceSummary)))"}
}

extension GetComplianceSummaryByConfigRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetComplianceSummaryByConfigRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.complianceSummary = output.complianceSummary
        } else {
            self.complianceSummary = nil
        }
    }
}

///
public struct GetComplianceSummaryByConfigRuleOutputResponse: Swift.Equatable {
    /// The number of AWS Config rules that are compliant and the
    /// 			number that are noncompliant, up to a maximum of 25 for
    /// 			each.
    public let complianceSummary: ConfigClientTypes.ComplianceSummary?

    public init (
        complianceSummary: ConfigClientTypes.ComplianceSummary? = nil
    )
    {
        self.complianceSummary = complianceSummary
    }
}

struct GetComplianceSummaryByConfigRuleOutputResponseBody: Swift.Equatable {
    public let complianceSummary: ConfigClientTypes.ComplianceSummary?
}

extension GetComplianceSummaryByConfigRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceSummary = "ComplianceSummary"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceSummaryDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ComplianceSummary.self, forKey: .complianceSummary)
        complianceSummary = complianceSummaryDecoded
    }
}

public struct GetComplianceSummaryByResourceTypeInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetComplianceSummaryByResourceTypeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetComplianceSummaryByResourceTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetComplianceSummaryByResourceTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetComplianceSummaryByResourceTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetComplianceSummaryByResourceTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetComplianceSummaryByResourceTypeOutputError>
}

extension GetComplianceSummaryByResourceTypeInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetComplianceSummaryByResourceTypeInput(resourceTypes: \(Swift.String(describing: resourceTypes)))"}
}

extension GetComplianceSummaryByResourceTypeInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceTypes = "ResourceTypes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceTypes = resourceTypes {
            var resourceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypes)
            for resourcetypes0 in resourceTypes {
                try resourceTypesContainer.encode(resourcetypes0)
            }
        }
    }
}

public struct GetComplianceSummaryByResourceTypeInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetComplianceSummaryByResourceTypeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetComplianceSummaryByResourceTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetComplianceSummaryByResourceTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetComplianceSummaryByResourceTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetComplianceSummaryByResourceTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetComplianceSummaryByResourceTypeOutputError>
}

public struct GetComplianceSummaryByResourceTypeInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetComplianceSummaryByResourceTypeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetComplianceSummaryByResourceTypeInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetComplianceSummaryByResourceTypeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetComplianceSummaryByResourceTypeInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetComplianceSummaryByResourceTypeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetComplianceSummaryByResourceTypeOutputError>
}

///
public struct GetComplianceSummaryByResourceTypeInput: Swift.Equatable {
    /// Specify one or more resource types to get the number of
    /// 			resources that are compliant and the number that are noncompliant
    /// 			for each resource type.
    /// 		       For this request, you can specify an AWS resource type such as
    /// 				AWS::EC2::Instance. You can specify that the
    /// 			resource type is an AWS account by specifying
    /// 				AWS::::Account.
    public let resourceTypes: [Swift.String]?

    public init (
        resourceTypes: [Swift.String]? = nil
    )
    {
        self.resourceTypes = resourceTypes
    }
}

struct GetComplianceSummaryByResourceTypeInputBody: Swift.Equatable {
    public let resourceTypes: [Swift.String]?
}

extension GetComplianceSummaryByResourceTypeInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceTypes = "ResourceTypes"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceTypes)
        var resourceTypesDecoded0:[Swift.String]? = nil
        if let resourceTypesContainer = resourceTypesContainer {
            resourceTypesDecoded0 = [Swift.String]()
            for string0 in resourceTypesContainer {
                if let string0 = string0 {
                    resourceTypesDecoded0?.append(string0)
                }
            }
        }
        resourceTypes = resourceTypesDecoded0
    }
}

extension GetComplianceSummaryByResourceTypeOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetComplianceSummaryByResourceTypeOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetComplianceSummaryByResourceTypeOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetComplianceSummaryByResourceTypeOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetComplianceSummaryByResourceTypeOutputResponse(complianceSummariesByResourceType: \(Swift.String(describing: complianceSummariesByResourceType)))"}
}

extension GetComplianceSummaryByResourceTypeOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetComplianceSummaryByResourceTypeOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.complianceSummariesByResourceType = output.complianceSummariesByResourceType
        } else {
            self.complianceSummariesByResourceType = nil
        }
    }
}

///
public struct GetComplianceSummaryByResourceTypeOutputResponse: Swift.Equatable {
    /// The number of resources that are compliant and the number that
    /// 			are noncompliant. If one or more resource types were provided with
    /// 			the request, the numbers are returned for each resource type. The
    /// 			maximum number returned is 100.
    public let complianceSummariesByResourceType: [ConfigClientTypes.ComplianceSummaryByResourceType]?

    public init (
        complianceSummariesByResourceType: [ConfigClientTypes.ComplianceSummaryByResourceType]? = nil
    )
    {
        self.complianceSummariesByResourceType = complianceSummariesByResourceType
    }
}

struct GetComplianceSummaryByResourceTypeOutputResponseBody: Swift.Equatable {
    public let complianceSummariesByResourceType: [ConfigClientTypes.ComplianceSummaryByResourceType]?
}

extension GetComplianceSummaryByResourceTypeOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceSummariesByResourceType = "ComplianceSummariesByResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceSummariesByResourceTypeContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ComplianceSummaryByResourceType?].self, forKey: .complianceSummariesByResourceType)
        var complianceSummariesByResourceTypeDecoded0:[ConfigClientTypes.ComplianceSummaryByResourceType]? = nil
        if let complianceSummariesByResourceTypeContainer = complianceSummariesByResourceTypeContainer {
            complianceSummariesByResourceTypeDecoded0 = [ConfigClientTypes.ComplianceSummaryByResourceType]()
            for structure0 in complianceSummariesByResourceTypeContainer {
                if let structure0 = structure0 {
                    complianceSummariesByResourceTypeDecoded0?.append(structure0)
                }
            }
        }
        complianceSummariesByResourceType = complianceSummariesByResourceTypeDecoded0
    }
}

public struct GetConformancePackComplianceDetailsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetConformancePackComplianceDetailsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetConformancePackComplianceDetailsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetConformancePackComplianceDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetConformancePackComplianceDetailsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetConformancePackComplianceDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetConformancePackComplianceDetailsOutputError>
}

extension GetConformancePackComplianceDetailsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetConformancePackComplianceDetailsInput(conformancePackName: \(Swift.String(describing: conformancePackName)), filters: \(Swift.String(describing: filters)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetConformancePackComplianceDetailsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackName = "ConformancePackName"
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetConformancePackComplianceDetailsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetConformancePackComplianceDetailsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetConformancePackComplianceDetailsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetConformancePackComplianceDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetConformancePackComplianceDetailsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetConformancePackComplianceDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetConformancePackComplianceDetailsOutputError>
}

public struct GetConformancePackComplianceDetailsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetConformancePackComplianceDetailsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetConformancePackComplianceDetailsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetConformancePackComplianceDetailsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetConformancePackComplianceDetailsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetConformancePackComplianceDetailsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetConformancePackComplianceDetailsOutputError>
}

public struct GetConformancePackComplianceDetailsInput: Swift.Equatable {
    /// Name of the conformance pack.
    /// This member is required.
    public let conformancePackName: Swift.String?
    /// A ConformancePackEvaluationFilters object.
    public let filters: ConfigClientTypes.ConformancePackEvaluationFilters?
    /// The maximum number of evaluation results returned on each page. If you do no specify a number, AWS Config uses the default. The default is 100.
    public let limit: Swift.Int
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        conformancePackName: Swift.String? = nil,
        filters: ConfigClientTypes.ConformancePackEvaluationFilters? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.conformancePackName = conformancePackName
        self.filters = filters
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct GetConformancePackComplianceDetailsInputBody: Swift.Equatable {
    public let conformancePackName: Swift.String?
    public let filters: ConfigClientTypes.ConformancePackEvaluationFilters?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension GetConformancePackComplianceDetailsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackName = "ConformancePackName"
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConformancePackEvaluationFilters.self, forKey: .filters)
        filters = filtersDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetConformancePackComplianceDetailsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConformancePackComplianceDetailsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigRuleInConformancePackException" : self = .noSuchConfigRuleInConformancePackException(try NoSuchConfigRuleInConformancePackException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConformancePackException" : self = .noSuchConformancePackException(try NoSuchConformancePackException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetConformancePackComplianceDetailsOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchConfigRuleInConformancePackException(NoSuchConfigRuleInConformancePackException)
    case noSuchConformancePackException(NoSuchConformancePackException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConformancePackComplianceDetailsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetConformancePackComplianceDetailsOutputResponse(conformancePackName: \(Swift.String(describing: conformancePackName)), conformancePackRuleEvaluationResults: \(Swift.String(describing: conformancePackRuleEvaluationResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetConformancePackComplianceDetailsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetConformancePackComplianceDetailsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.conformancePackName = output.conformancePackName
            self.conformancePackRuleEvaluationResults = output.conformancePackRuleEvaluationResults
            self.nextToken = output.nextToken
        } else {
            self.conformancePackName = nil
            self.conformancePackRuleEvaluationResults = nil
            self.nextToken = nil
        }
    }
}

public struct GetConformancePackComplianceDetailsOutputResponse: Swift.Equatable {
    /// Name of the conformance pack.
    /// This member is required.
    public let conformancePackName: Swift.String?
    /// Returns a list of ConformancePackEvaluationResult objects.
    public let conformancePackRuleEvaluationResults: [ConfigClientTypes.ConformancePackEvaluationResult]?
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        conformancePackName: Swift.String? = nil,
        conformancePackRuleEvaluationResults: [ConfigClientTypes.ConformancePackEvaluationResult]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.conformancePackName = conformancePackName
        self.conformancePackRuleEvaluationResults = conformancePackRuleEvaluationResults
        self.nextToken = nextToken
    }
}

struct GetConformancePackComplianceDetailsOutputResponseBody: Swift.Equatable {
    public let conformancePackName: Swift.String?
    public let conformancePackRuleEvaluationResults: [ConfigClientTypes.ConformancePackEvaluationResult]?
    public let nextToken: Swift.String?
}

extension GetConformancePackComplianceDetailsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackName = "ConformancePackName"
        case conformancePackRuleEvaluationResults = "ConformancePackRuleEvaluationResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let conformancePackRuleEvaluationResultsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConformancePackEvaluationResult?].self, forKey: .conformancePackRuleEvaluationResults)
        var conformancePackRuleEvaluationResultsDecoded0:[ConfigClientTypes.ConformancePackEvaluationResult]? = nil
        if let conformancePackRuleEvaluationResultsContainer = conformancePackRuleEvaluationResultsContainer {
            conformancePackRuleEvaluationResultsDecoded0 = [ConfigClientTypes.ConformancePackEvaluationResult]()
            for structure0 in conformancePackRuleEvaluationResultsContainer {
                if let structure0 = structure0 {
                    conformancePackRuleEvaluationResultsDecoded0?.append(structure0)
                }
            }
        }
        conformancePackRuleEvaluationResults = conformancePackRuleEvaluationResultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetConformancePackComplianceSummaryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetConformancePackComplianceSummaryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetConformancePackComplianceSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetConformancePackComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetConformancePackComplianceSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetConformancePackComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetConformancePackComplianceSummaryOutputError>
}

extension GetConformancePackComplianceSummaryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetConformancePackComplianceSummaryInput(conformancePackNames: \(Swift.String(describing: conformancePackNames)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetConformancePackComplianceSummaryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackNames = "ConformancePackNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackNames = conformancePackNames {
            var conformancePackNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conformancePackNames)
            for conformancepacknamestosummarizelist0 in conformancePackNames {
                try conformancePackNamesContainer.encode(conformancepacknamestosummarizelist0)
            }
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetConformancePackComplianceSummaryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetConformancePackComplianceSummaryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetConformancePackComplianceSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetConformancePackComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetConformancePackComplianceSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetConformancePackComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetConformancePackComplianceSummaryOutputError>
}

public struct GetConformancePackComplianceSummaryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetConformancePackComplianceSummaryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetConformancePackComplianceSummaryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetConformancePackComplianceSummaryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetConformancePackComplianceSummaryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetConformancePackComplianceSummaryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetConformancePackComplianceSummaryOutputError>
}

public struct GetConformancePackComplianceSummaryInput: Swift.Equatable {
    /// Names of conformance packs.
    /// This member is required.
    public let conformancePackNames: [Swift.String]?
    /// The maximum number of conformance packs returned on each page.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        conformancePackNames: [Swift.String]? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.conformancePackNames = conformancePackNames
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct GetConformancePackComplianceSummaryInputBody: Swift.Equatable {
    public let conformancePackNames: [Swift.String]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension GetConformancePackComplianceSummaryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackNames = "ConformancePackNames"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .conformancePackNames)
        var conformancePackNamesDecoded0:[Swift.String]? = nil
        if let conformancePackNamesContainer = conformancePackNamesContainer {
            conformancePackNamesDecoded0 = [Swift.String]()
            for string0 in conformancePackNamesContainer {
                if let string0 = string0 {
                    conformancePackNamesDecoded0?.append(string0)
                }
            }
        }
        conformancePackNames = conformancePackNamesDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetConformancePackComplianceSummaryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetConformancePackComplianceSummaryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConformancePackException" : self = .noSuchConformancePackException(try NoSuchConformancePackException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetConformancePackComplianceSummaryOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchConformancePackException(NoSuchConformancePackException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetConformancePackComplianceSummaryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetConformancePackComplianceSummaryOutputResponse(conformancePackComplianceSummaryList: \(Swift.String(describing: conformancePackComplianceSummaryList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetConformancePackComplianceSummaryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetConformancePackComplianceSummaryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.conformancePackComplianceSummaryList = output.conformancePackComplianceSummaryList
            self.nextToken = output.nextToken
        } else {
            self.conformancePackComplianceSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct GetConformancePackComplianceSummaryOutputResponse: Swift.Equatable {
    /// A list of ConformancePackComplianceSummary objects.
    public let conformancePackComplianceSummaryList: [ConfigClientTypes.ConformancePackComplianceSummary]?
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        conformancePackComplianceSummaryList: [ConfigClientTypes.ConformancePackComplianceSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.conformancePackComplianceSummaryList = conformancePackComplianceSummaryList
        self.nextToken = nextToken
    }
}

struct GetConformancePackComplianceSummaryOutputResponseBody: Swift.Equatable {
    public let conformancePackComplianceSummaryList: [ConfigClientTypes.ConformancePackComplianceSummary]?
    public let nextToken: Swift.String?
}

extension GetConformancePackComplianceSummaryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackComplianceSummaryList = "ConformancePackComplianceSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackComplianceSummaryListContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConformancePackComplianceSummary?].self, forKey: .conformancePackComplianceSummaryList)
        var conformancePackComplianceSummaryListDecoded0:[ConfigClientTypes.ConformancePackComplianceSummary]? = nil
        if let conformancePackComplianceSummaryListContainer = conformancePackComplianceSummaryListContainer {
            conformancePackComplianceSummaryListDecoded0 = [ConfigClientTypes.ConformancePackComplianceSummary]()
            for structure0 in conformancePackComplianceSummaryListContainer {
                if let structure0 = structure0 {
                    conformancePackComplianceSummaryListDecoded0?.append(structure0)
                }
            }
        }
        conformancePackComplianceSummaryList = conformancePackComplianceSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetDiscoveredResourceCountsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiscoveredResourceCountsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiscoveredResourceCountsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiscoveredResourceCountsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiscoveredResourceCountsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiscoveredResourceCountsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiscoveredResourceCountsOutputError>
}

extension GetDiscoveredResourceCountsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDiscoveredResourceCountsInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), resourceTypes: \(Swift.String(describing: resourceTypes)))"}
}

extension GetDiscoveredResourceCountsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
        case resourceTypes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceTypes = resourceTypes {
            var resourceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypes)
            for resourcetypes0 in resourceTypes {
                try resourceTypesContainer.encode(resourcetypes0)
            }
        }
    }
}

public struct GetDiscoveredResourceCountsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiscoveredResourceCountsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiscoveredResourceCountsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiscoveredResourceCountsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiscoveredResourceCountsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiscoveredResourceCountsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiscoveredResourceCountsOutputError>
}

public struct GetDiscoveredResourceCountsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetDiscoveredResourceCountsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetDiscoveredResourceCountsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetDiscoveredResourceCountsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetDiscoveredResourceCountsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetDiscoveredResourceCountsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetDiscoveredResourceCountsOutputError>
}

public struct GetDiscoveredResourceCountsInput: Swift.Equatable {
    /// The maximum number of ResourceCount objects
    /// 			returned on each page. The default is 100. You cannot specify a
    /// 			number greater than 100. If you specify 0, AWS Config uses the
    /// 			default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page
    /// 			that you use to get the next page of results in a paginated
    /// 			response.
    public let nextToken: Swift.String?
    /// The comma-separated list that specifies the resource types that
    /// 			you want AWS Config to return (for example,
    /// 				"AWS::EC2::Instance",
    /// 			"AWS::IAM::User").
    ///
    /// 		       If a value for resourceTypes is not specified, AWS
    /// 			Config returns all resource types that AWS Config is recording in
    /// 			the region for your account.
    /// 		
    /// 			         If the configuration recorder is turned off, AWS Config
    /// 				returns an empty list of ResourceCount
    /// 				objects. If the configuration recorder is not recording a
    /// 				specific resource type (for example, S3 buckets), that resource
    /// 				type is not returned in the list of ResourceCount objects.
    /// 		
    public let resourceTypes: [Swift.String]?

    public init (
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        resourceTypes: [Swift.String]? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.resourceTypes = resourceTypes
    }
}

struct GetDiscoveredResourceCountsInputBody: Swift.Equatable {
    public let resourceTypes: [Swift.String]?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension GetDiscoveredResourceCountsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
        case resourceTypes
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceTypes)
        var resourceTypesDecoded0:[Swift.String]? = nil
        if let resourceTypesContainer = resourceTypesContainer {
            resourceTypesDecoded0 = [Swift.String]()
            for string0 in resourceTypesContainer {
                if let string0 = string0 {
                    resourceTypesDecoded0?.append(string0)
                }
            }
        }
        resourceTypes = resourceTypesDecoded0
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetDiscoveredResourceCountsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDiscoveredResourceCountsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetDiscoveredResourceCountsOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDiscoveredResourceCountsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetDiscoveredResourceCountsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), resourceCounts: \(Swift.String(describing: resourceCounts)), totalDiscoveredResources: \(Swift.String(describing: totalDiscoveredResources)))"}
}

extension GetDiscoveredResourceCountsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetDiscoveredResourceCountsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.resourceCounts = output.resourceCounts
            self.totalDiscoveredResources = output.totalDiscoveredResources
        } else {
            self.nextToken = nil
            self.resourceCounts = nil
            self.totalDiscoveredResources = 0
        }
    }
}

public struct GetDiscoveredResourceCountsOutputResponse: Swift.Equatable {
    /// The string that you use in a subsequent request to get the next
    /// 			page of results in a paginated response.
    public let nextToken: Swift.String?
    /// The list of ResourceCount objects. Each object is
    /// 			listed in descending order by the number of resources.
    public let resourceCounts: [ConfigClientTypes.ResourceCount]?
    /// The total number of resources that AWS Config is recording in
    /// 			the region for your account. If you specify resource types in the
    /// 			request, AWS Config returns only the total number of resources for
    /// 			those resource types.
    ///
    ///
    /// 		       <p class="title">
    ///             Example
    ///
    ///          <ol>
    ///
    /// 				           AWS Config is recording three resource types in the US
    /// 					East (Ohio) Region for your account: 25 EC2 instances, 20
    /// 					IAM users, and 15 S3 buckets, for a total of 60
    /// 					resources.
    /// 			
    ///
    /// 				           You make a call to the
    /// 						GetDiscoveredResourceCounts action and
    /// 					specify the resource type,
    /// 						"AWS::EC2::Instances", in the
    /// 					request.
    /// 			
    ///
    /// 				           AWS Config returns 25 for
    /// 						totalDiscoveredResources.
    /// 			
    ///          </ol>
    public let totalDiscoveredResources: Swift.Int

    public init (
        nextToken: Swift.String? = nil,
        resourceCounts: [ConfigClientTypes.ResourceCount]? = nil,
        totalDiscoveredResources: Swift.Int = 0
    )
    {
        self.nextToken = nextToken
        self.resourceCounts = resourceCounts
        self.totalDiscoveredResources = totalDiscoveredResources
    }
}

struct GetDiscoveredResourceCountsOutputResponseBody: Swift.Equatable {
    public let totalDiscoveredResources: Swift.Int
    public let resourceCounts: [ConfigClientTypes.ResourceCount]?
    public let nextToken: Swift.String?
}

extension GetDiscoveredResourceCountsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case resourceCounts
        case totalDiscoveredResources
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let totalDiscoveredResourcesDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalDiscoveredResources)
        totalDiscoveredResources = totalDiscoveredResourcesDecoded
        let resourceCountsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ResourceCount?].self, forKey: .resourceCounts)
        var resourceCountsDecoded0:[ConfigClientTypes.ResourceCount]? = nil
        if let resourceCountsContainer = resourceCountsContainer {
            resourceCountsDecoded0 = [ConfigClientTypes.ResourceCount]()
            for structure0 in resourceCountsContainer {
                if let structure0 = structure0 {
                    resourceCountsDecoded0?.append(structure0)
                }
            }
        }
        resourceCounts = resourceCountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetOrganizationConfigRuleDetailedStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOrganizationConfigRuleDetailedStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOrganizationConfigRuleDetailedStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOrganizationConfigRuleDetailedStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOrganizationConfigRuleDetailedStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOrganizationConfigRuleDetailedStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOrganizationConfigRuleDetailedStatusOutputError>
}

extension GetOrganizationConfigRuleDetailedStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOrganizationConfigRuleDetailedStatusInput(filters: \(Swift.String(describing: filters)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), organizationConfigRuleName: \(Swift.String(describing: organizationConfigRuleName)))"}
}

extension GetOrganizationConfigRuleDetailedStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConfigRuleName = "OrganizationConfigRuleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let organizationConfigRuleName = organizationConfigRuleName {
            try encodeContainer.encode(organizationConfigRuleName, forKey: .organizationConfigRuleName)
        }
    }
}

public struct GetOrganizationConfigRuleDetailedStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOrganizationConfigRuleDetailedStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOrganizationConfigRuleDetailedStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOrganizationConfigRuleDetailedStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOrganizationConfigRuleDetailedStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOrganizationConfigRuleDetailedStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOrganizationConfigRuleDetailedStatusOutputError>
}

public struct GetOrganizationConfigRuleDetailedStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOrganizationConfigRuleDetailedStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOrganizationConfigRuleDetailedStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOrganizationConfigRuleDetailedStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOrganizationConfigRuleDetailedStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOrganizationConfigRuleDetailedStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOrganizationConfigRuleDetailedStatusOutputError>
}

public struct GetOrganizationConfigRuleDetailedStatusInput: Swift.Equatable {
    /// A StatusDetailFilters object.
    public let filters: ConfigClientTypes.StatusDetailFilters?
    /// The maximum number of OrganizationConfigRuleDetailedStatus returned on each page. If you do not specify a number, AWS Config uses the default. The default is 100.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// The name of organization config rule for which you want status details for member accounts.
    /// This member is required.
    public let organizationConfigRuleName: Swift.String?

    public init (
        filters: ConfigClientTypes.StatusDetailFilters? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        organizationConfigRuleName: Swift.String? = nil
    )
    {
        self.filters = filters
        self.limit = limit
        self.nextToken = nextToken
        self.organizationConfigRuleName = organizationConfigRuleName
    }
}

struct GetOrganizationConfigRuleDetailedStatusInputBody: Swift.Equatable {
    public let organizationConfigRuleName: Swift.String?
    public let filters: ConfigClientTypes.StatusDetailFilters?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension GetOrganizationConfigRuleDetailedStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConfigRuleName = "OrganizationConfigRuleName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConfigRuleName)
        organizationConfigRuleName = organizationConfigRuleNameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.StatusDetailFilters.self, forKey: .filters)
        filters = filtersDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetOrganizationConfigRuleDetailedStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetOrganizationConfigRuleDetailedStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchOrganizationConfigRuleException" : self = .noSuchOrganizationConfigRuleException(try NoSuchOrganizationConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAccessDeniedException" : self = .organizationAccessDeniedException(try OrganizationAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetOrganizationConfigRuleDetailedStatusOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchOrganizationConfigRuleException(NoSuchOrganizationConfigRuleException)
    case organizationAccessDeniedException(OrganizationAccessDeniedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOrganizationConfigRuleDetailedStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOrganizationConfigRuleDetailedStatusOutputResponse(nextToken: \(Swift.String(describing: nextToken)), organizationConfigRuleDetailedStatus: \(Swift.String(describing: organizationConfigRuleDetailedStatus)))"}
}

extension GetOrganizationConfigRuleDetailedStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetOrganizationConfigRuleDetailedStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.organizationConfigRuleDetailedStatus = output.organizationConfigRuleDetailedStatus
        } else {
            self.nextToken = nil
            self.organizationConfigRuleDetailedStatus = nil
        }
    }
}

public struct GetOrganizationConfigRuleDetailedStatusOutputResponse: Swift.Equatable {
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// A list of MemberAccountStatus objects.
    public let organizationConfigRuleDetailedStatus: [ConfigClientTypes.MemberAccountStatus]?

    public init (
        nextToken: Swift.String? = nil,
        organizationConfigRuleDetailedStatus: [ConfigClientTypes.MemberAccountStatus]? = nil
    )
    {
        self.nextToken = nextToken
        self.organizationConfigRuleDetailedStatus = organizationConfigRuleDetailedStatus
    }
}

struct GetOrganizationConfigRuleDetailedStatusOutputResponseBody: Swift.Equatable {
    public let organizationConfigRuleDetailedStatus: [ConfigClientTypes.MemberAccountStatus]?
    public let nextToken: Swift.String?
}

extension GetOrganizationConfigRuleDetailedStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case organizationConfigRuleDetailedStatus = "OrganizationConfigRuleDetailedStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRuleDetailedStatusContainer = try containerValues.decodeIfPresent([ConfigClientTypes.MemberAccountStatus?].self, forKey: .organizationConfigRuleDetailedStatus)
        var organizationConfigRuleDetailedStatusDecoded0:[ConfigClientTypes.MemberAccountStatus]? = nil
        if let organizationConfigRuleDetailedStatusContainer = organizationConfigRuleDetailedStatusContainer {
            organizationConfigRuleDetailedStatusDecoded0 = [ConfigClientTypes.MemberAccountStatus]()
            for structure0 in organizationConfigRuleDetailedStatusContainer {
                if let structure0 = structure0 {
                    organizationConfigRuleDetailedStatusDecoded0?.append(structure0)
                }
            }
        }
        organizationConfigRuleDetailedStatus = organizationConfigRuleDetailedStatusDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetOrganizationConformancePackDetailedStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOrganizationConformancePackDetailedStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOrganizationConformancePackDetailedStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOrganizationConformancePackDetailedStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOrganizationConformancePackDetailedStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOrganizationConformancePackDetailedStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOrganizationConformancePackDetailedStatusOutputError>
}

extension GetOrganizationConformancePackDetailedStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOrganizationConformancePackDetailedStatusInput(filters: \(Swift.String(describing: filters)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), organizationConformancePackName: \(Swift.String(describing: organizationConformancePackName)))"}
}

extension GetOrganizationConformancePackDetailedStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConformancePackName = "OrganizationConformancePackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let organizationConformancePackName = organizationConformancePackName {
            try encodeContainer.encode(organizationConformancePackName, forKey: .organizationConformancePackName)
        }
    }
}

public struct GetOrganizationConformancePackDetailedStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOrganizationConformancePackDetailedStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOrganizationConformancePackDetailedStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOrganizationConformancePackDetailedStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOrganizationConformancePackDetailedStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOrganizationConformancePackDetailedStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOrganizationConformancePackDetailedStatusOutputError>
}

public struct GetOrganizationConformancePackDetailedStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetOrganizationConformancePackDetailedStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetOrganizationConformancePackDetailedStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetOrganizationConformancePackDetailedStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetOrganizationConformancePackDetailedStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetOrganizationConformancePackDetailedStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetOrganizationConformancePackDetailedStatusOutputError>
}

public struct GetOrganizationConformancePackDetailedStatusInput: Swift.Equatable {
    /// An OrganizationResourceDetailedStatusFilters object.
    public let filters: ConfigClientTypes.OrganizationResourceDetailedStatusFilters?
    /// The maximum number of OrganizationConformancePackDetailedStatuses returned on each page.
    /// 			If you do not specify a number, AWS Config uses the default. The default is 100.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// The name of organization conformance pack for which you want status details for member accounts.
    /// This member is required.
    public let organizationConformancePackName: Swift.String?

    public init (
        filters: ConfigClientTypes.OrganizationResourceDetailedStatusFilters? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        organizationConformancePackName: Swift.String? = nil
    )
    {
        self.filters = filters
        self.limit = limit
        self.nextToken = nextToken
        self.organizationConformancePackName = organizationConformancePackName
    }
}

struct GetOrganizationConformancePackDetailedStatusInputBody: Swift.Equatable {
    public let organizationConformancePackName: Swift.String?
    public let filters: ConfigClientTypes.OrganizationResourceDetailedStatusFilters?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension GetOrganizationConformancePackDetailedStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
        case organizationConformancePackName = "OrganizationConformancePackName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConformancePackName)
        organizationConformancePackName = organizationConformancePackNameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationResourceDetailedStatusFilters.self, forKey: .filters)
        filters = filtersDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetOrganizationConformancePackDetailedStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetOrganizationConformancePackDetailedStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchOrganizationConformancePackException" : self = .noSuchOrganizationConformancePackException(try NoSuchOrganizationConformancePackException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAccessDeniedException" : self = .organizationAccessDeniedException(try OrganizationAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetOrganizationConformancePackDetailedStatusOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchOrganizationConformancePackException(NoSuchOrganizationConformancePackException)
    case organizationAccessDeniedException(OrganizationAccessDeniedException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetOrganizationConformancePackDetailedStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetOrganizationConformancePackDetailedStatusOutputResponse(nextToken: \(Swift.String(describing: nextToken)), organizationConformancePackDetailedStatuses: \(Swift.String(describing: organizationConformancePackDetailedStatuses)))"}
}

extension GetOrganizationConformancePackDetailedStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetOrganizationConformancePackDetailedStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.organizationConformancePackDetailedStatuses = output.organizationConformancePackDetailedStatuses
        } else {
            self.nextToken = nil
            self.organizationConformancePackDetailedStatuses = nil
        }
    }
}

public struct GetOrganizationConformancePackDetailedStatusOutputResponse: Swift.Equatable {
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// A list of OrganizationConformancePackDetailedStatus objects.
    public let organizationConformancePackDetailedStatuses: [ConfigClientTypes.OrganizationConformancePackDetailedStatus]?

    public init (
        nextToken: Swift.String? = nil,
        organizationConformancePackDetailedStatuses: [ConfigClientTypes.OrganizationConformancePackDetailedStatus]? = nil
    )
    {
        self.nextToken = nextToken
        self.organizationConformancePackDetailedStatuses = organizationConformancePackDetailedStatuses
    }
}

struct GetOrganizationConformancePackDetailedStatusOutputResponseBody: Swift.Equatable {
    public let organizationConformancePackDetailedStatuses: [ConfigClientTypes.OrganizationConformancePackDetailedStatus]?
    public let nextToken: Swift.String?
}

extension GetOrganizationConformancePackDetailedStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case organizationConformancePackDetailedStatuses = "OrganizationConformancePackDetailedStatuses"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackDetailedStatusesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.OrganizationConformancePackDetailedStatus?].self, forKey: .organizationConformancePackDetailedStatuses)
        var organizationConformancePackDetailedStatusesDecoded0:[ConfigClientTypes.OrganizationConformancePackDetailedStatus]? = nil
        if let organizationConformancePackDetailedStatusesContainer = organizationConformancePackDetailedStatusesContainer {
            organizationConformancePackDetailedStatusesDecoded0 = [ConfigClientTypes.OrganizationConformancePackDetailedStatus]()
            for structure0 in organizationConformancePackDetailedStatusesContainer {
                if let structure0 = structure0 {
                    organizationConformancePackDetailedStatusesDecoded0?.append(structure0)
                }
            }
        }
        organizationConformancePackDetailedStatuses = organizationConformancePackDetailedStatusesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetResourceConfigHistoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetResourceConfigHistoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetResourceConfigHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetResourceConfigHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetResourceConfigHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetResourceConfigHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetResourceConfigHistoryOutputError>
}

extension GetResourceConfigHistoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetResourceConfigHistoryInput(chronologicalOrder: \(Swift.String(describing: chronologicalOrder)), earlierTime: \(Swift.String(describing: earlierTime)), laterTime: \(Swift.String(describing: laterTime)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension GetResourceConfigHistoryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case chronologicalOrder
        case earlierTime
        case laterTime
        case limit
        case nextToken
        case resourceId
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let chronologicalOrder = chronologicalOrder {
            try encodeContainer.encode(chronologicalOrder.rawValue, forKey: .chronologicalOrder)
        }
        if let earlierTime = earlierTime {
            try encodeContainer.encode(earlierTime.timeIntervalSince1970, forKey: .earlierTime)
        }
        if let laterTime = laterTime {
            try encodeContainer.encode(laterTime.timeIntervalSince1970, forKey: .laterTime)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }
}

public struct GetResourceConfigHistoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetResourceConfigHistoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetResourceConfigHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetResourceConfigHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetResourceConfigHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetResourceConfigHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetResourceConfigHistoryOutputError>
}

public struct GetResourceConfigHistoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetResourceConfigHistoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetResourceConfigHistoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetResourceConfigHistoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetResourceConfigHistoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetResourceConfigHistoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetResourceConfigHistoryOutputError>
}

/// The input for the GetResourceConfigHistory
/// 			action.
public struct GetResourceConfigHistoryInput: Swift.Equatable {
    /// The chronological order for configuration items listed. By
    /// 			default, the results are listed in reverse chronological
    /// 			order.
    public let chronologicalOrder: ConfigClientTypes.ChronologicalOrder?
    /// The time stamp that indicates an earlier time. If not
    /// 			specified, the action returns paginated results that contain
    /// 			configuration items that start when the first configuration item was
    /// 			recorded.
    public let earlierTime: ClientRuntime.Date?
    /// The time stamp that indicates a later time. If not specified,
    /// 			current time is taken.
    public let laterTime: ClientRuntime.Date?
    /// The maximum number of configuration items returned on each
    /// 			page. The default is 10. You cannot specify a number greater than
    /// 			100. If you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page
    /// 			that you use to get the next page of results in a paginated
    /// 			response.
    public let nextToken: Swift.String?
    /// The ID of the resource (for example.,
    /// 			sg-xxxxxx).
    /// This member is required.
    public let resourceId: Swift.String?
    /// The resource type.
    /// This member is required.
    public let resourceType: ConfigClientTypes.ResourceType?

    public init (
        chronologicalOrder: ConfigClientTypes.ChronologicalOrder? = nil,
        earlierTime: ClientRuntime.Date? = nil,
        laterTime: ClientRuntime.Date? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: ConfigClientTypes.ResourceType? = nil
    )
    {
        self.chronologicalOrder = chronologicalOrder
        self.earlierTime = earlierTime
        self.laterTime = laterTime
        self.limit = limit
        self.nextToken = nextToken
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct GetResourceConfigHistoryInputBody: Swift.Equatable {
    public let resourceType: ConfigClientTypes.ResourceType?
    public let resourceId: Swift.String?
    public let laterTime: ClientRuntime.Date?
    public let earlierTime: ClientRuntime.Date?
    public let chronologicalOrder: ConfigClientTypes.ChronologicalOrder?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension GetResourceConfigHistoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case chronologicalOrder
        case earlierTime
        case laterTime
        case limit
        case nextToken
        case resourceId
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let laterTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .laterTime)
        laterTime = laterTimeDecoded
        let earlierTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .earlierTime)
        earlierTime = earlierTimeDecoded
        let chronologicalOrderDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ChronologicalOrder.self, forKey: .chronologicalOrder)
        chronologicalOrder = chronologicalOrderDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetResourceConfigHistoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetResourceConfigHistoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTimeRangeException" : self = .invalidTimeRangeException(try InvalidTimeRangeException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoAvailableConfigurationRecorderException" : self = .noAvailableConfigurationRecorderException(try NoAvailableConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotDiscoveredException" : self = .resourceNotDiscoveredException(try ResourceNotDiscoveredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetResourceConfigHistoryOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case invalidTimeRangeException(InvalidTimeRangeException)
    case noAvailableConfigurationRecorderException(NoAvailableConfigurationRecorderException)
    case resourceNotDiscoveredException(ResourceNotDiscoveredException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetResourceConfigHistoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetResourceConfigHistoryOutputResponse(configurationItems: \(Swift.String(describing: configurationItems)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetResourceConfigHistoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetResourceConfigHistoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationItems = output.configurationItems
            self.nextToken = output.nextToken
        } else {
            self.configurationItems = nil
            self.nextToken = nil
        }
    }
}

/// The output for the GetResourceConfigHistory
/// 			action.
public struct GetResourceConfigHistoryOutputResponse: Swift.Equatable {
    /// A list that contains the configuration history of one or more
    /// 			resources.
    public let configurationItems: [ConfigClientTypes.ConfigurationItem]?
    /// The string that you use in a subsequent request to get the next
    /// 			page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        configurationItems: [ConfigClientTypes.ConfigurationItem]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationItems = configurationItems
        self.nextToken = nextToken
    }
}

struct GetResourceConfigHistoryOutputResponseBody: Swift.Equatable {
    public let configurationItems: [ConfigClientTypes.ConfigurationItem]?
    public let nextToken: Swift.String?
}

extension GetResourceConfigHistoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationItems
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationItemsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConfigurationItem?].self, forKey: .configurationItems)
        var configurationItemsDecoded0:[ConfigClientTypes.ConfigurationItem]? = nil
        if let configurationItemsContainer = configurationItemsContainer {
            configurationItemsDecoded0 = [ConfigClientTypes.ConfigurationItem]()
            for structure0 in configurationItemsContainer {
                if let structure0 = structure0 {
                    configurationItemsDecoded0?.append(structure0)
                }
            }
        }
        configurationItems = configurationItemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetStoredQueryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStoredQueryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStoredQueryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStoredQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStoredQueryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStoredQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStoredQueryOutputError>
}

extension GetStoredQueryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetStoredQueryInput(queryName: \(Swift.String(describing: queryName)))"}
}

extension GetStoredQueryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryName = "QueryName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryName = queryName {
            try encodeContainer.encode(queryName, forKey: .queryName)
        }
    }
}

public struct GetStoredQueryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStoredQueryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStoredQueryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStoredQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStoredQueryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStoredQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStoredQueryOutputError>
}

public struct GetStoredQueryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetStoredQueryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetStoredQueryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetStoredQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetStoredQueryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetStoredQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetStoredQueryOutputError>
}

public struct GetStoredQueryInput: Swift.Equatable {
    /// The name of the query.
    /// This member is required.
    public let queryName: Swift.String?

    public init (
        queryName: Swift.String? = nil
    )
    {
        self.queryName = queryName
    }
}

struct GetStoredQueryInputBody: Swift.Equatable {
    public let queryName: Swift.String?
}

extension GetStoredQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryName = "QueryName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryName)
        queryName = queryNameDecoded
    }
}

extension GetStoredQueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetStoredQueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetStoredQueryOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetStoredQueryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetStoredQueryOutputResponse(storedQuery: \(Swift.String(describing: storedQuery)))"}
}

extension GetStoredQueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetStoredQueryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.storedQuery = output.storedQuery
        } else {
            self.storedQuery = nil
        }
    }
}

public struct GetStoredQueryOutputResponse: Swift.Equatable {
    /// Returns a StoredQuery object.
    public let storedQuery: ConfigClientTypes.StoredQuery?

    public init (
        storedQuery: ConfigClientTypes.StoredQuery? = nil
    )
    {
        self.storedQuery = storedQuery
    }
}

struct GetStoredQueryOutputResponseBody: Swift.Equatable {
    public let storedQuery: ConfigClientTypes.StoredQuery?
}

extension GetStoredQueryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storedQuery = "StoredQuery"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storedQueryDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.StoredQuery.self, forKey: .storedQuery)
        storedQuery = storedQueryDecoded
    }
}

extension ConfigClientTypes.GroupedResourceCount: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case resourceCount = "ResourceCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if resourceCount != 0 {
            try encodeContainer.encode(resourceCount, forKey: .resourceCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let resourceCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .resourceCount)
        resourceCount = resourceCountDecoded
    }
}

extension ConfigClientTypes.GroupedResourceCount: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GroupedResourceCount(groupName: \(Swift.String(describing: groupName)), resourceCount: \(Swift.String(describing: resourceCount)))"}
}

extension ConfigClientTypes {
    /// The count of resources that are grouped by the group name.
    public struct GroupedResourceCount: Swift.Equatable {
        /// The name of the group that can be region, account ID, or resource type. For example, region1, region2 if the region was chosen as GroupByKey.
        /// This member is required.
        public let groupName: Swift.String?
        /// The number of resources in the group.
        /// This member is required.
        public let resourceCount: Swift.Int

        public init (
            groupName: Swift.String? = nil,
            resourceCount: Swift.Int = 0
        )
        {
            self.groupName = groupName
            self.resourceCount = resourceCount
        }
    }

}

extension InsufficientDeliveryPolicyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsufficientDeliveryPolicyException(message: \(Swift.String(describing: message)))"}
}

extension InsufficientDeliveryPolicyException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InsufficientDeliveryPolicyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Your Amazon S3 bucket policy does not permit AWS Config to
/// 			write to it.
public struct InsufficientDeliveryPolicyException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InsufficientDeliveryPolicyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InsufficientDeliveryPolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InsufficientPermissionsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsufficientPermissionsException(message: \(Swift.String(describing: message)))"}
}

extension InsufficientPermissionsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InsufficientPermissionsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Indicates one of the following errors:
/// 		
///
///                For PutConfigRule, the rule cannot be created because the IAM role assigned to AWS Config lacks permissions to perform the config:Put* action.
///
///
///                For PutConfigRule, the AWS Lambda function cannot be invoked. Check the function ARN, and check the function's permissions.
///
///
///                For PutOrganizationConfigRule, organization config rule cannot be created because you do not have permissions to call IAM GetRole action or create a service linked role.
///
///
///                For PutConformancePack and PutOrganizationConformancePack, a conformance pack cannot be created because you do not have permissions:
/// 				
///
///                      To call IAM GetRole action or create a service linked role.
///
///
///                      To read Amazon S3 bucket.
///
///
/// 			
///
public struct InsufficientPermissionsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InsufficientPermissionsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InsufficientPermissionsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidConfigurationRecorderNameException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidConfigurationRecorderNameException(message: \(Swift.String(describing: message)))"}
}

extension InvalidConfigurationRecorderNameException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidConfigurationRecorderNameExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have provided a configuration recorder name that is not
/// 			valid.
public struct InvalidConfigurationRecorderNameException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidConfigurationRecorderNameExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidConfigurationRecorderNameExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDeliveryChannelNameException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidDeliveryChannelNameException(message: \(Swift.String(describing: message)))"}
}

extension InvalidDeliveryChannelNameException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidDeliveryChannelNameExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified delivery channel name is not valid.
public struct InvalidDeliveryChannelNameException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDeliveryChannelNameExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidDeliveryChannelNameExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidExpressionException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidExpressionException(message: \(Swift.String(describing: message)))"}
}

extension InvalidExpressionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidExpressionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The syntax of the query is incorrect.
public struct InvalidExpressionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidExpressionExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidExpressionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidLimitException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidLimitException(message: \(Swift.String(describing: message)))"}
}

extension InvalidLimitException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidLimitExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified limit is outside the allowable range.
public struct InvalidLimitException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidLimitExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidLimitExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidNextTokenException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidNextTokenException(message: \(Swift.String(describing: message)))"}
}

extension InvalidNextTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidNextTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified next token is invalid. Specify the
/// 				nextToken string that was returned in the previous
/// 			response to get the next page of results.
public struct InvalidNextTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidNextTokenExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidNextTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterValueException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidParameterValueException(message: \(Swift.String(describing: message)))"}
}

extension InvalidParameterValueException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidParameterValueExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// One or more of the specified parameters are invalid. Verify
/// 			that your parameters are valid and try again.
public struct InvalidParameterValueException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterValueExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidParameterValueExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRecordingGroupException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidRecordingGroupException(message: \(Swift.String(describing: message)))"}
}

extension InvalidRecordingGroupException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidRecordingGroupExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// AWS Config throws an exception if the recording group does not contain a valid list of resource types. Invalid values might also be incorrectly formatted.
public struct InvalidRecordingGroupException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRecordingGroupExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidRecordingGroupExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidResultTokenException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidResultTokenException(message: \(Swift.String(describing: message)))"}
}

extension InvalidResultTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidResultTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified ResultToken is invalid.
public struct InvalidResultTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidResultTokenExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidResultTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRoleException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidRoleException(message: \(Swift.String(describing: message)))"}
}

extension InvalidRoleException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidRoleExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have provided a null or empty role ARN.
public struct InvalidRoleException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRoleExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidRoleExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidS3KeyPrefixException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidS3KeyPrefixException(message: \(Swift.String(describing: message)))"}
}

extension InvalidS3KeyPrefixException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidS3KeyPrefixExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified Amazon S3 key prefix is not valid.
public struct InvalidS3KeyPrefixException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidS3KeyPrefixExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidS3KeyPrefixExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidS3KmsKeyArnException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidS3KmsKeyArnException(message: \(Swift.String(describing: message)))"}
}

extension InvalidS3KmsKeyArnException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidS3KmsKeyArnExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified Amazon KMS Key ARN is not valid.
public struct InvalidS3KmsKeyArnException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidS3KmsKeyArnExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidS3KmsKeyArnExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSNSTopicARNException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidSNSTopicARNException(message: \(Swift.String(describing: message)))"}
}

extension InvalidSNSTopicARNException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidSNSTopicARNExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified Amazon SNS topic does not exist.
public struct InvalidSNSTopicARNException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidSNSTopicARNExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidSNSTopicARNExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTimeRangeException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidTimeRangeException(message: \(Swift.String(describing: message)))"}
}

extension InvalidTimeRangeException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidTimeRangeExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified time range is not valid. The earlier time is not
/// 			chronologically before the later time.
public struct InvalidTimeRangeException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTimeRangeExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidTimeRangeExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LastDeliveryChannelDeleteFailedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LastDeliveryChannelDeleteFailedException(message: \(Swift.String(describing: message)))"}
}

extension LastDeliveryChannelDeleteFailedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LastDeliveryChannelDeleteFailedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You cannot delete the delivery channel you specified because
/// 			the configuration recorder is running.
public struct LastDeliveryChannelDeleteFailedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LastDeliveryChannelDeleteFailedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LastDeliveryChannelDeleteFailedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// For StartConfigRulesEvaluation API, this exception
/// 			is thrown if an evaluation is in progress or if you call the StartConfigRulesEvaluation API more than once per
/// 			minute.
/// 		       For PutConfigurationAggregator API, this exception
/// 			is thrown if the number of accounts and aggregators exceeds the
/// 			limit.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListAggregateDiscoveredResourcesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAggregateDiscoveredResourcesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAggregateDiscoveredResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAggregateDiscoveredResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAggregateDiscoveredResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAggregateDiscoveredResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAggregateDiscoveredResourcesOutputError>
}

extension ListAggregateDiscoveredResourcesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAggregateDiscoveredResourcesInput(configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), filters: \(Swift.String(describing: filters)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ListAggregateDiscoveredResourcesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }
}

public struct ListAggregateDiscoveredResourcesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAggregateDiscoveredResourcesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAggregateDiscoveredResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAggregateDiscoveredResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAggregateDiscoveredResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAggregateDiscoveredResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAggregateDiscoveredResourcesOutputError>
}

public struct ListAggregateDiscoveredResourcesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAggregateDiscoveredResourcesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAggregateDiscoveredResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAggregateDiscoveredResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAggregateDiscoveredResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAggregateDiscoveredResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAggregateDiscoveredResourcesOutputError>
}

public struct ListAggregateDiscoveredResourcesInput: Swift.Equatable {
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// Filters the results based on the ResourceFilters object.
    public let filters: ConfigClientTypes.ResourceFilters?
    /// The maximum number of resource identifiers returned on each page. You cannot specify a number greater than 100. If you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// The type of resources that you want AWS Config to list in the response.
    /// This member is required.
    public let resourceType: ConfigClientTypes.ResourceType?

    public init (
        configurationAggregatorName: Swift.String? = nil,
        filters: ConfigClientTypes.ResourceFilters? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        resourceType: ConfigClientTypes.ResourceType? = nil
    )
    {
        self.configurationAggregatorName = configurationAggregatorName
        self.filters = filters
        self.limit = limit
        self.nextToken = nextToken
        self.resourceType = resourceType
    }
}

struct ListAggregateDiscoveredResourcesInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
    public let resourceType: ConfigClientTypes.ResourceType?
    public let filters: ConfigClientTypes.ResourceFilters?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension ListAggregateDiscoveredResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case filters = "Filters"
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceFilters.self, forKey: .filters)
        filters = filtersDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAggregateDiscoveredResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAggregateDiscoveredResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAggregateDiscoveredResourcesOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAggregateDiscoveredResourcesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAggregateDiscoveredResourcesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), resourceIdentifiers: \(Swift.String(describing: resourceIdentifiers)))"}
}

extension ListAggregateDiscoveredResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAggregateDiscoveredResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.resourceIdentifiers = output.resourceIdentifiers
        } else {
            self.nextToken = nil
            self.resourceIdentifiers = nil
        }
    }
}

public struct ListAggregateDiscoveredResourcesOutputResponse: Swift.Equatable {
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// Returns a list of ResourceIdentifiers objects.
    public let resourceIdentifiers: [ConfigClientTypes.AggregateResourceIdentifier]?

    public init (
        nextToken: Swift.String? = nil,
        resourceIdentifiers: [ConfigClientTypes.AggregateResourceIdentifier]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceIdentifiers = resourceIdentifiers
    }
}

struct ListAggregateDiscoveredResourcesOutputResponseBody: Swift.Equatable {
    public let resourceIdentifiers: [ConfigClientTypes.AggregateResourceIdentifier]?
    public let nextToken: Swift.String?
}

extension ListAggregateDiscoveredResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case resourceIdentifiers = "ResourceIdentifiers"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdentifiersContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AggregateResourceIdentifier?].self, forKey: .resourceIdentifiers)
        var resourceIdentifiersDecoded0:[ConfigClientTypes.AggregateResourceIdentifier]? = nil
        if let resourceIdentifiersContainer = resourceIdentifiersContainer {
            resourceIdentifiersDecoded0 = [ConfigClientTypes.AggregateResourceIdentifier]()
            for structure0 in resourceIdentifiersContainer {
                if let structure0 = structure0 {
                    resourceIdentifiersDecoded0?.append(structure0)
                }
            }
        }
        resourceIdentifiers = resourceIdentifiersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListDiscoveredResourcesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDiscoveredResourcesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDiscoveredResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDiscoveredResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDiscoveredResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDiscoveredResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDiscoveredResourcesOutputError>
}

extension ListDiscoveredResourcesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDiscoveredResourcesInput(includeDeletedResources: \(Swift.String(describing: includeDeletedResources)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), resourceIds: \(Swift.String(describing: resourceIds)), resourceName: \(Swift.String(describing: resourceName)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ListDiscoveredResourcesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeDeletedResources
        case limit
        case nextToken
        case resourceIds
        case resourceName
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if includeDeletedResources != false {
            try encodeContainer.encode(includeDeletedResources, forKey: .includeDeletedResources)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for resourceidlist0 in resourceIds {
                try resourceIdsContainer.encode(resourceidlist0)
            }
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }
}

public struct ListDiscoveredResourcesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDiscoveredResourcesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDiscoveredResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDiscoveredResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDiscoveredResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDiscoveredResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDiscoveredResourcesOutputError>
}

public struct ListDiscoveredResourcesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDiscoveredResourcesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDiscoveredResourcesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDiscoveredResourcesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDiscoveredResourcesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDiscoveredResourcesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDiscoveredResourcesOutputError>
}

///
public struct ListDiscoveredResourcesInput: Swift.Equatable {
    /// Specifies whether AWS Config includes deleted resources in the
    /// 			results. By default, deleted resources are not included.
    public let includeDeletedResources: Swift.Bool
    /// The maximum number of resource identifiers returned on each
    /// 			page. The default is 100. You cannot specify a number greater than
    /// 			100. If you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page
    /// 			that you use to get the next page of results in a paginated
    /// 			response.
    public let nextToken: Swift.String?
    /// The IDs of only those resources that you want AWS Config to
    /// 			list in the response. If you do not specify this parameter, AWS
    /// 			Config lists all resources of the specified type that it has
    /// 			discovered.
    public let resourceIds: [Swift.String]?
    /// The custom name of only those resources that you want AWS
    /// 			Config to list in the response. If you do not specify this
    /// 			parameter, AWS Config lists all resources of the specified type that
    /// 			it has discovered.
    public let resourceName: Swift.String?
    /// The type of resources that you want AWS Config to list in the
    /// 			response.
    /// This member is required.
    public let resourceType: ConfigClientTypes.ResourceType?

    public init (
        includeDeletedResources: Swift.Bool = false,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        resourceIds: [Swift.String]? = nil,
        resourceName: Swift.String? = nil,
        resourceType: ConfigClientTypes.ResourceType? = nil
    )
    {
        self.includeDeletedResources = includeDeletedResources
        self.limit = limit
        self.nextToken = nextToken
        self.resourceIds = resourceIds
        self.resourceName = resourceName
        self.resourceType = resourceType
    }
}

struct ListDiscoveredResourcesInputBody: Swift.Equatable {
    public let resourceType: ConfigClientTypes.ResourceType?
    public let resourceIds: [Swift.String]?
    public let resourceName: Swift.String?
    public let limit: Swift.Int
    public let includeDeletedResources: Swift.Bool
    public let nextToken: Swift.String?
}

extension ListDiscoveredResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeDeletedResources
        case limit
        case nextToken
        case resourceIds
        case resourceName
        case resourceType
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Swift.String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Swift.String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let includeDeletedResourcesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeDeletedResources)
        includeDeletedResources = includeDeletedResourcesDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDiscoveredResourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDiscoveredResourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoAvailableConfigurationRecorderException" : self = .noAvailableConfigurationRecorderException(try NoAvailableConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDiscoveredResourcesOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noAvailableConfigurationRecorderException(NoAvailableConfigurationRecorderException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDiscoveredResourcesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDiscoveredResourcesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), resourceIdentifiers: \(Swift.String(describing: resourceIdentifiers)))"}
}

extension ListDiscoveredResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDiscoveredResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.resourceIdentifiers = output.resourceIdentifiers
        } else {
            self.nextToken = nil
            self.resourceIdentifiers = nil
        }
    }
}

///
public struct ListDiscoveredResourcesOutputResponse: Swift.Equatable {
    /// The string that you use in a subsequent request to get the next
    /// 			page of results in a paginated response.
    public let nextToken: Swift.String?
    /// The details that identify a resource that is discovered by AWS
    /// 			Config, including the resource type, ID, and (if available) the
    /// 			custom resource name.
    public let resourceIdentifiers: [ConfigClientTypes.ResourceIdentifier]?

    public init (
        nextToken: Swift.String? = nil,
        resourceIdentifiers: [ConfigClientTypes.ResourceIdentifier]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceIdentifiers = resourceIdentifiers
    }
}

struct ListDiscoveredResourcesOutputResponseBody: Swift.Equatable {
    public let resourceIdentifiers: [ConfigClientTypes.ResourceIdentifier]?
    public let nextToken: Swift.String?
}

extension ListDiscoveredResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case resourceIdentifiers
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdentifiersContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ResourceIdentifier?].self, forKey: .resourceIdentifiers)
        var resourceIdentifiersDecoded0:[ConfigClientTypes.ResourceIdentifier]? = nil
        if let resourceIdentifiersContainer = resourceIdentifiersContainer {
            resourceIdentifiersDecoded0 = [ConfigClientTypes.ResourceIdentifier]()
            for structure0 in resourceIdentifiersContainer {
                if let structure0 = structure0 {
                    resourceIdentifiersDecoded0?.append(structure0)
                }
            }
        }
        resourceIdentifiers = resourceIdentifiersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListStoredQueriesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStoredQueriesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStoredQueriesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStoredQueriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStoredQueriesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStoredQueriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStoredQueriesOutputError>
}

extension ListStoredQueriesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStoredQueriesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListStoredQueriesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListStoredQueriesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStoredQueriesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStoredQueriesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStoredQueriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStoredQueriesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStoredQueriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStoredQueriesOutputError>
}

public struct ListStoredQueriesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListStoredQueriesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListStoredQueriesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListStoredQueriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListStoredQueriesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListStoredQueriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListStoredQueriesOutputError>
}

public struct ListStoredQueriesInput: Swift.Equatable {
    /// The maximum number of results to be returned with a single call.
    public let maxResults: Swift.Int
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListStoredQueriesInputBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int
}

extension ListStoredQueriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension ListStoredQueriesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListStoredQueriesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListStoredQueriesOutputError: Swift.Error, Swift.Equatable {
    case invalidNextTokenException(InvalidNextTokenException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListStoredQueriesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListStoredQueriesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), storedQueryMetadata: \(Swift.String(describing: storedQueryMetadata)))"}
}

extension ListStoredQueriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListStoredQueriesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.storedQueryMetadata = output.storedQueryMetadata
        } else {
            self.nextToken = nil
            self.storedQueryMetadata = nil
        }
    }
}

public struct ListStoredQueriesOutputResponse: Swift.Equatable {
    /// If the previous paginated request didn't return all of the remaining results, the response object's NextToken parameter value is set to a token.
    /// 			To retrieve the next set of results, call this action again and assign that token to the request object's NextToken parameter.
    /// 			If there are no remaining results, the previous response object's NextToken parameter is set to null.
    public let nextToken: Swift.String?
    /// A list of StoredQueryMetadata objects.
    public let storedQueryMetadata: [ConfigClientTypes.StoredQueryMetadata]?

    public init (
        nextToken: Swift.String? = nil,
        storedQueryMetadata: [ConfigClientTypes.StoredQueryMetadata]? = nil
    )
    {
        self.nextToken = nextToken
        self.storedQueryMetadata = storedQueryMetadata
    }
}

struct ListStoredQueriesOutputResponseBody: Swift.Equatable {
    public let storedQueryMetadata: [ConfigClientTypes.StoredQueryMetadata]?
    public let nextToken: Swift.String?
}

extension ListStoredQueriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case storedQueryMetadata = "StoredQueryMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storedQueryMetadataContainer = try containerValues.decodeIfPresent([ConfigClientTypes.StoredQueryMetadata?].self, forKey: .storedQueryMetadata)
        var storedQueryMetadataDecoded0:[ConfigClientTypes.StoredQueryMetadata]? = nil
        if let storedQueryMetadataContainer = storedQueryMetadataContainer {
            storedQueryMetadataDecoded0 = [ConfigClientTypes.StoredQueryMetadata]()
            for structure0 in storedQueryMetadataContainer {
                if let structure0 = structure0 {
                    storedQueryMetadataDecoded0?.append(structure0)
                }
            }
        }
        storedQueryMetadata = storedQueryMetadataDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct ListTagsForResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)), resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The maximum number of tags returned on each page. The limit maximum is 50. You cannot specify a number greater than 50. If you specify 0, AWS Config uses the default.
    public let limit: Swift.Int
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the supported resources are ConfigRule, ConfigurationAggregator and AggregatorAuthorization.
    /// This member is required.
    public let resourceArn: Swift.String?

    public init (
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit = "Limit"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(nextToken: \(Swift.String(describing: nextToken)), tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// The tags for the resource.
    public let tags: [ConfigClientTypes.Tag]?

    public init (
        nextToken: Swift.String? = nil,
        tags: [ConfigClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [ConfigClientTypes.Tag]?
    public let nextToken: Swift.String?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ConfigClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ConfigClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension MaxActiveResourcesExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MaxActiveResourcesExceededException(message: \(Swift.String(describing: message)))"}
}

extension MaxActiveResourcesExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MaxActiveResourcesExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have reached the limit (100,000) of active custom resource types in your account.
/// 			Delete unused resources using DeleteResourceConfig.
public struct MaxActiveResourcesExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MaxActiveResourcesExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MaxActiveResourcesExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MaxNumberOfConfigRulesExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MaxNumberOfConfigRulesExceededException(message: \(Swift.String(describing: message)))"}
}

extension MaxNumberOfConfigRulesExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MaxNumberOfConfigRulesExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Failed to add the AWS Config rule because the account already
/// 			contains the maximum number of 150 rules. Consider deleting any
/// 			deactivated rules before you add new rules.
public struct MaxNumberOfConfigRulesExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MaxNumberOfConfigRulesExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MaxNumberOfConfigRulesExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MaxNumberOfConfigurationRecordersExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MaxNumberOfConfigurationRecordersExceededException(message: \(Swift.String(describing: message)))"}
}

extension MaxNumberOfConfigurationRecordersExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MaxNumberOfConfigurationRecordersExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have reached the limit of the number of recorders you can
/// 			create.
public struct MaxNumberOfConfigurationRecordersExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MaxNumberOfConfigurationRecordersExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MaxNumberOfConfigurationRecordersExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MaxNumberOfConformancePacksExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MaxNumberOfConformancePacksExceededException(message: \(Swift.String(describing: message)))"}
}

extension MaxNumberOfConformancePacksExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MaxNumberOfConformancePacksExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have reached the limit (6) of the number of conformance packs in an account (6 conformance pack with 25 AWS Config rules per pack).
public struct MaxNumberOfConformancePacksExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MaxNumberOfConformancePacksExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MaxNumberOfConformancePacksExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MaxNumberOfDeliveryChannelsExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MaxNumberOfDeliveryChannelsExceededException(message: \(Swift.String(describing: message)))"}
}

extension MaxNumberOfDeliveryChannelsExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MaxNumberOfDeliveryChannelsExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have reached the limit of the number of delivery channels
/// 			you can create.
public struct MaxNumberOfDeliveryChannelsExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MaxNumberOfDeliveryChannelsExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MaxNumberOfDeliveryChannelsExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MaxNumberOfOrganizationConfigRulesExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MaxNumberOfOrganizationConfigRulesExceededException(message: \(Swift.String(describing: message)))"}
}

extension MaxNumberOfOrganizationConfigRulesExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MaxNumberOfOrganizationConfigRulesExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have reached the limit of the number of organization config rules you can create.
public struct MaxNumberOfOrganizationConfigRulesExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MaxNumberOfOrganizationConfigRulesExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MaxNumberOfOrganizationConfigRulesExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MaxNumberOfOrganizationConformancePacksExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MaxNumberOfOrganizationConformancePacksExceededException(message: \(Swift.String(describing: message)))"}
}

extension MaxNumberOfOrganizationConformancePacksExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MaxNumberOfOrganizationConformancePacksExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have reached the limit (6) of the number of organization conformance packs in an account (6 conformance pack with 25 AWS Config rules per pack per account).
public struct MaxNumberOfOrganizationConformancePacksExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MaxNumberOfOrganizationConformancePacksExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MaxNumberOfOrganizationConformancePacksExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MaxNumberOfRetentionConfigurationsExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MaxNumberOfRetentionConfigurationsExceededException(message: \(Swift.String(describing: message)))"}
}

extension MaxNumberOfRetentionConfigurationsExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MaxNumberOfRetentionConfigurationsExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Failed to add the retention configuration because a retention configuration with that name already exists.
public struct MaxNumberOfRetentionConfigurationsExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MaxNumberOfRetentionConfigurationsExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MaxNumberOfRetentionConfigurationsExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfigClientTypes {
    public enum MaximumExecutionFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case oneHour
        case sixHours
        case threeHours
        case twelveHours
        case twentyfourHours
        case sdkUnknown(Swift.String)

        public static var allCases: [MaximumExecutionFrequency] {
            return [
                .oneHour,
                .sixHours,
                .threeHours,
                .twelveHours,
                .twentyfourHours,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .oneHour: return "One_Hour"
            case .sixHours: return "Six_Hours"
            case .threeHours: return "Three_Hours"
            case .twelveHours: return "Twelve_Hours"
            case .twentyfourHours: return "TwentyFour_Hours"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MaximumExecutionFrequency(rawValue: rawValue) ?? MaximumExecutionFrequency.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes {
    public enum MemberAccountRuleStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createFailed
        case createInProgress
        case createSuccessful
        case deleteFailed
        case deleteInProgress
        case deleteSuccessful
        case updateFailed
        case updateInProgress
        case updateSuccessful
        case sdkUnknown(Swift.String)

        public static var allCases: [MemberAccountRuleStatus] {
            return [
                .createFailed,
                .createInProgress,
                .createSuccessful,
                .deleteFailed,
                .deleteInProgress,
                .deleteSuccessful,
                .updateFailed,
                .updateInProgress,
                .updateSuccessful,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createSuccessful: return "CREATE_SUCCESSFUL"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deleteSuccessful: return "DELETE_SUCCESSFUL"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updateSuccessful: return "UPDATE_SUCCESSFUL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MemberAccountRuleStatus(rawValue: rawValue) ?? MemberAccountRuleStatus.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.MemberAccountStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case configRuleName = "ConfigRuleName"
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case lastUpdateTime = "LastUpdateTime"
        case memberAccountRuleStatus = "MemberAccountRuleStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let memberAccountRuleStatus = memberAccountRuleStatus {
            try encodeContainer.encode(memberAccountRuleStatus.rawValue, forKey: .memberAccountRuleStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let memberAccountRuleStatusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.MemberAccountRuleStatus.self, forKey: .memberAccountRuleStatus)
        memberAccountRuleStatus = memberAccountRuleStatusDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension ConfigClientTypes.MemberAccountStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MemberAccountStatus(accountId: \(Swift.String(describing: accountId)), configRuleName: \(Swift.String(describing: configRuleName)), errorCode: \(Swift.String(describing: errorCode)), errorMessage: \(Swift.String(describing: errorMessage)), lastUpdateTime: \(Swift.String(describing: lastUpdateTime)), memberAccountRuleStatus: \(Swift.String(describing: memberAccountRuleStatus)))"}
}

extension ConfigClientTypes {
    /// Organization config rule creation or deletion status in each member account. This includes the name of the rule, the status, error code and error message when the rule creation or deletion failed.
    public struct MemberAccountStatus: Swift.Equatable {
        /// The 12-digit account ID of a member account.
        /// This member is required.
        public let accountId: Swift.String?
        /// The name of config rule deployed in the member account.
        /// This member is required.
        public let configRuleName: Swift.String?
        /// An error code that is returned when config rule creation or deletion failed in the member account.
        public let errorCode: Swift.String?
        /// An error message indicating that config rule account creation or deletion has failed due to an error in the member account.
        public let errorMessage: Swift.String?
        /// The timestamp of the last status update.
        public let lastUpdateTime: ClientRuntime.Date?
        /// Indicates deployment status for config rule in the member account.
        /// 			When master account calls PutOrganizationConfigRule action for the first time, config rule status is created in the member account.
        /// 			When master account calls PutOrganizationConfigRule action for the second time, config rule status is updated in the member account.
        /// 			Config rule status is deleted when the master account deletes OrganizationConfigRule and disables service access for config-multiaccountsetup.amazonaws.com.
        /// 		
        /// 		        AWS Config sets the state of the rule to:
        /// 		
        ///
        ///
        ///                   CREATE_SUCCESSFUL when config rule has been created in the member account.
        ///
        ///
        ///
        ///                   CREATE_IN_PROGRESS when config rule is being created in the member account.
        ///
        ///
        ///
        ///                   CREATE_FAILED when config rule creation has failed in the member account.
        ///
        ///
        ///
        ///                   DELETE_FAILED when config rule deletion has failed in the member account.
        ///
        ///
        ///
        ///                   DELETE_IN_PROGRESS when config rule is being deleted in the member account.
        ///
        ///
        ///
        ///                   DELETE_SUCCESSFUL when config rule has been deleted in the member account.
        ///
        ///
        ///
        ///                   UPDATE_SUCCESSFUL when config rule has been updated in the member account.
        ///
        ///
        ///
        ///                   UPDATE_IN_PROGRESS when config rule is being updated in the member account.
        ///
        ///
        ///
        ///                   UPDATE_FAILED when config rule deletion has failed in the member account.
        ///
        ///
        /// This member is required.
        public let memberAccountRuleStatus: ConfigClientTypes.MemberAccountRuleStatus?

        public init (
            accountId: Swift.String? = nil,
            configRuleName: Swift.String? = nil,
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            memberAccountRuleStatus: ConfigClientTypes.MemberAccountRuleStatus? = nil
        )
        {
            self.accountId = accountId
            self.configRuleName = configRuleName
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.lastUpdateTime = lastUpdateTime
            self.memberAccountRuleStatus = memberAccountRuleStatus
        }
    }

}

extension ConfigClientTypes {
    public enum MessageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case configurationitemchangenotification
        case configurationsnapshotdeliverycompleted
        case oversizedconfigurationitemchangenotification
        case schedulednotification
        case sdkUnknown(Swift.String)

        public static var allCases: [MessageType] {
            return [
                .configurationitemchangenotification,
                .configurationsnapshotdeliverycompleted,
                .oversizedconfigurationitemchangenotification,
                .schedulednotification,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .configurationitemchangenotification: return "ConfigurationItemChangeNotification"
            case .configurationsnapshotdeliverycompleted: return "ConfigurationSnapshotDeliveryCompleted"
            case .oversizedconfigurationitemchangenotification: return "OversizedConfigurationItemChangeNotification"
            case .schedulednotification: return "ScheduledNotification"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MessageType(rawValue: rawValue) ?? MessageType.sdkUnknown(rawValue)
        }
    }
}

extension NoAvailableConfigurationRecorderException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoAvailableConfigurationRecorderException(message: \(Swift.String(describing: message)))"}
}

extension NoAvailableConfigurationRecorderException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoAvailableConfigurationRecorderExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There are no configuration recorders available to provide the
/// 			role needed to describe your resources. Create a configuration
/// 			recorder.
public struct NoAvailableConfigurationRecorderException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoAvailableConfigurationRecorderExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoAvailableConfigurationRecorderExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoAvailableDeliveryChannelException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoAvailableDeliveryChannelException(message: \(Swift.String(describing: message)))"}
}

extension NoAvailableDeliveryChannelException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoAvailableDeliveryChannelExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There is no delivery channel available to record
/// 			configurations.
public struct NoAvailableDeliveryChannelException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoAvailableDeliveryChannelExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoAvailableDeliveryChannelExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoAvailableOrganizationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoAvailableOrganizationException(message: \(Swift.String(describing: message)))"}
}

extension NoAvailableOrganizationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoAvailableOrganizationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Organization is no longer available.
public struct NoAvailableOrganizationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoAvailableOrganizationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoAvailableOrganizationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoRunningConfigurationRecorderException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoRunningConfigurationRecorderException(message: \(Swift.String(describing: message)))"}
}

extension NoRunningConfigurationRecorderException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoRunningConfigurationRecorderExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There is no configuration recorder running.
public struct NoRunningConfigurationRecorderException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoRunningConfigurationRecorderExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoRunningConfigurationRecorderExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchBucketException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchBucketException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchBucketException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchBucketExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified Amazon S3 bucket does not exist.
public struct NoSuchBucketException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchBucketExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchBucketExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchConfigRuleException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchConfigRuleException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchConfigRuleException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchConfigRuleExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// One or more AWS Config rules in the request are invalid. Verify
/// 			that the rule names are correct and try again.
public struct NoSuchConfigRuleException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchConfigRuleExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchConfigRuleExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchConfigRuleInConformancePackException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchConfigRuleInConformancePackException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchConfigRuleInConformancePackException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchConfigRuleInConformancePackExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// AWS Config rule that you passed in the filter does not exist.
public struct NoSuchConfigRuleInConformancePackException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchConfigRuleInConformancePackExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchConfigRuleInConformancePackExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchConfigurationAggregatorException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchConfigurationAggregatorException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchConfigurationAggregatorException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchConfigurationAggregatorExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have specified a configuration aggregator that does not exist.
public struct NoSuchConfigurationAggregatorException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchConfigurationAggregatorExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchConfigurationAggregatorExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchConfigurationRecorderException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchConfigurationRecorderException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchConfigurationRecorderException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchConfigurationRecorderExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have specified a configuration recorder that does not
/// 			exist.
public struct NoSuchConfigurationRecorderException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchConfigurationRecorderExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchConfigurationRecorderExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchConformancePackException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchConformancePackException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchConformancePackException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchConformancePackExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You specified one or more conformance packs that do not exist.
public struct NoSuchConformancePackException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchConformancePackExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchConformancePackExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchDeliveryChannelException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchDeliveryChannelException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchDeliveryChannelException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchDeliveryChannelExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have specified a delivery channel that does not
/// 			exist.
public struct NoSuchDeliveryChannelException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchDeliveryChannelExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchDeliveryChannelExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchOrganizationConfigRuleException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchOrganizationConfigRuleException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchOrganizationConfigRuleException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchOrganizationConfigRuleExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You specified one or more organization config rules that do not exist.
public struct NoSuchOrganizationConfigRuleException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchOrganizationConfigRuleExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchOrganizationConfigRuleExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchOrganizationConformancePackException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchOrganizationConformancePackException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchOrganizationConformancePackException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchOrganizationConformancePackExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// AWS Config organization conformance pack that you passed in the filter does not exist.
/// 		       For DeleteOrganizationConformancePack, you tried to delete an organization conformance pack that does not exist.
public struct NoSuchOrganizationConformancePackException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchOrganizationConformancePackExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchOrganizationConformancePackExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchRemediationConfigurationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchRemediationConfigurationException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchRemediationConfigurationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchRemediationConfigurationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You specified an AWS Config rule without a remediation configuration.
public struct NoSuchRemediationConfigurationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchRemediationConfigurationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchRemediationConfigurationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchRemediationExceptionException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchRemediationExceptionException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchRemediationExceptionException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchRemediationExceptionExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You tried to delete a remediation exception that does not exist.
public struct NoSuchRemediationExceptionException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchRemediationExceptionExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchRemediationExceptionExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension NoSuchRetentionConfigurationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoSuchRetentionConfigurationException(message: \(Swift.String(describing: message)))"}
}

extension NoSuchRetentionConfigurationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NoSuchRetentionConfigurationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have specified a retention configuration that does not exist.
public struct NoSuchRetentionConfigurationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NoSuchRetentionConfigurationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NoSuchRetentionConfigurationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OrganizationAccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationAccessDeniedException(message: \(Swift.String(describing: message)))"}
}

extension OrganizationAccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: OrganizationAccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// For PutConfigurationAggregator API, you can see this exception for the following reasons:
/// 		
///
///                No permission to call EnableAWSServiceAccess API
///
///
///                The configuration aggregator cannot be updated because your AWS Organization management account or the delegated administrator role changed.
/// 				Delete this aggregator and create a new one with the current AWS Organization.
///
///
///                The configuration aggregator is associated with a previous AWS Organization and AWS Config cannot aggregate data with current AWS Organization.
/// 				Delete this aggregator and create a new one with the current AWS Organization.
///
///
///                You are not a registered delegated administrator for AWS Config with permissions to call ListDelegatedAdministrators API.
/// 			Ensure that the management account registers delagated administrator for AWS Config service principle name before the delegated administrator creates an aggregator.
///
///          	
/// 		       For all OrganizationConfigRule and OrganizationConformancePack APIs, AWS Config throws an exception if APIs are called from member accounts. All APIs must be called from organization master account.
public struct OrganizationAccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OrganizationAccessDeniedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension OrganizationAccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfigClientTypes.OrganizationAggregationSource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allAwsRegions = "AllAwsRegions"
        case awsRegions = "AwsRegions"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allAwsRegions != false {
            try encodeContainer.encode(allAwsRegions, forKey: .allAwsRegions)
        }
        if let awsRegions = awsRegions {
            var awsRegionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .awsRegions)
            for aggregatorregionlist0 in awsRegions {
                try awsRegionsContainer.encode(aggregatorregionlist0)
            }
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let awsRegionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .awsRegions)
        var awsRegionsDecoded0:[Swift.String]? = nil
        if let awsRegionsContainer = awsRegionsContainer {
            awsRegionsDecoded0 = [Swift.String]()
            for string0 in awsRegionsContainer {
                if let string0 = string0 {
                    awsRegionsDecoded0?.append(string0)
                }
            }
        }
        awsRegions = awsRegionsDecoded0
        let allAwsRegionsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allAwsRegions)
        allAwsRegions = allAwsRegionsDecoded
    }
}

extension ConfigClientTypes.OrganizationAggregationSource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationAggregationSource(allAwsRegions: \(Swift.String(describing: allAwsRegions)), awsRegions: \(Swift.String(describing: awsRegions)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension ConfigClientTypes {
    /// This object contains regions to set up the aggregator and an IAM
    /// 			role to retrieve organization details.
    public struct OrganizationAggregationSource: Swift.Equatable {
        /// If true, aggregate existing AWS Config regions and future
        /// 			regions.
        public let allAwsRegions: Swift.Bool
        /// The source regions being aggregated.
        public let awsRegions: [Swift.String]?
        /// ARN of the IAM role used to retrieve AWS Organization details
        /// 			associated with the aggregator account.
        /// This member is required.
        public let roleArn: Swift.String?

        public init (
            allAwsRegions: Swift.Bool = false,
            awsRegions: [Swift.String]? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.allAwsRegions = allAwsRegions
            self.awsRegions = awsRegions
            self.roleArn = roleArn
        }
    }

}

extension OrganizationAllFeaturesNotEnabledException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationAllFeaturesNotEnabledException(message: \(Swift.String(describing: message)))"}
}

extension OrganizationAllFeaturesNotEnabledException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: OrganizationAllFeaturesNotEnabledExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// AWS Config resource cannot be created because your organization does not have all features enabled.
public struct OrganizationAllFeaturesNotEnabledException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OrganizationAllFeaturesNotEnabledExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension OrganizationAllFeaturesNotEnabledExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfigClientTypes.OrganizationConfigRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludedAccounts = "ExcludedAccounts"
        case lastUpdateTime = "LastUpdateTime"
        case organizationConfigRuleArn = "OrganizationConfigRuleArn"
        case organizationConfigRuleName = "OrganizationConfigRuleName"
        case organizationCustomRuleMetadata = "OrganizationCustomRuleMetadata"
        case organizationManagedRuleMetadata = "OrganizationManagedRuleMetadata"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excludedAccounts = excludedAccounts {
            var excludedAccountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedAccounts)
            for excludedaccounts0 in excludedAccounts {
                try excludedAccountsContainer.encode(excludedaccounts0)
            }
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let organizationConfigRuleArn = organizationConfigRuleArn {
            try encodeContainer.encode(organizationConfigRuleArn, forKey: .organizationConfigRuleArn)
        }
        if let organizationConfigRuleName = organizationConfigRuleName {
            try encodeContainer.encode(organizationConfigRuleName, forKey: .organizationConfigRuleName)
        }
        if let organizationCustomRuleMetadata = organizationCustomRuleMetadata {
            try encodeContainer.encode(organizationCustomRuleMetadata, forKey: .organizationCustomRuleMetadata)
        }
        if let organizationManagedRuleMetadata = organizationManagedRuleMetadata {
            try encodeContainer.encode(organizationManagedRuleMetadata, forKey: .organizationManagedRuleMetadata)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConfigRuleName)
        organizationConfigRuleName = organizationConfigRuleNameDecoded
        let organizationConfigRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConfigRuleArn)
        organizationConfigRuleArn = organizationConfigRuleArnDecoded
        let organizationManagedRuleMetadataDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationManagedRuleMetadata.self, forKey: .organizationManagedRuleMetadata)
        organizationManagedRuleMetadata = organizationManagedRuleMetadataDecoded
        let organizationCustomRuleMetadataDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationCustomRuleMetadata.self, forKey: .organizationCustomRuleMetadata)
        organizationCustomRuleMetadata = organizationCustomRuleMetadataDecoded
        let excludedAccountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludedAccounts)
        var excludedAccountsDecoded0:[Swift.String]? = nil
        if let excludedAccountsContainer = excludedAccountsContainer {
            excludedAccountsDecoded0 = [Swift.String]()
            for string0 in excludedAccountsContainer {
                if let string0 = string0 {
                    excludedAccountsDecoded0?.append(string0)
                }
            }
        }
        excludedAccounts = excludedAccountsDecoded0
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension ConfigClientTypes.OrganizationConfigRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationConfigRule(excludedAccounts: \(Swift.String(describing: excludedAccounts)), lastUpdateTime: \(Swift.String(describing: lastUpdateTime)), organizationConfigRuleArn: \(Swift.String(describing: organizationConfigRuleArn)), organizationConfigRuleName: \(Swift.String(describing: organizationConfigRuleName)), organizationCustomRuleMetadata: \(Swift.String(describing: organizationCustomRuleMetadata)), organizationManagedRuleMetadata: \(Swift.String(describing: organizationManagedRuleMetadata)))"}
}

extension ConfigClientTypes {
    /// An organization config rule that has information about config rules that AWS Config creates in member accounts.
    public struct OrganizationConfigRule: Swift.Equatable {
        /// A comma-separated list of accounts excluded from organization config rule.
        public let excludedAccounts: [Swift.String]?
        /// The timestamp of the last update.
        public let lastUpdateTime: ClientRuntime.Date?
        /// Amazon Resource Name (ARN) of organization config rule.
        /// This member is required.
        public let organizationConfigRuleArn: Swift.String?
        /// The name that you assign to organization config rule.
        /// This member is required.
        public let organizationConfigRuleName: Swift.String?
        /// An OrganizationCustomRuleMetadata object.
        public let organizationCustomRuleMetadata: ConfigClientTypes.OrganizationCustomRuleMetadata?
        /// An OrganizationManagedRuleMetadata object.
        public let organizationManagedRuleMetadata: ConfigClientTypes.OrganizationManagedRuleMetadata?

        public init (
            excludedAccounts: [Swift.String]? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            organizationConfigRuleArn: Swift.String? = nil,
            organizationConfigRuleName: Swift.String? = nil,
            organizationCustomRuleMetadata: ConfigClientTypes.OrganizationCustomRuleMetadata? = nil,
            organizationManagedRuleMetadata: ConfigClientTypes.OrganizationManagedRuleMetadata? = nil
        )
        {
            self.excludedAccounts = excludedAccounts
            self.lastUpdateTime = lastUpdateTime
            self.organizationConfigRuleArn = organizationConfigRuleArn
            self.organizationConfigRuleName = organizationConfigRuleName
            self.organizationCustomRuleMetadata = organizationCustomRuleMetadata
            self.organizationManagedRuleMetadata = organizationManagedRuleMetadata
        }
    }

}

extension ConfigClientTypes.OrganizationConfigRuleStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case lastUpdateTime = "LastUpdateTime"
        case organizationConfigRuleName = "OrganizationConfigRuleName"
        case organizationRuleStatus = "OrganizationRuleStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let organizationConfigRuleName = organizationConfigRuleName {
            try encodeContainer.encode(organizationConfigRuleName, forKey: .organizationConfigRuleName)
        }
        if let organizationRuleStatus = organizationRuleStatus {
            try encodeContainer.encode(organizationRuleStatus.rawValue, forKey: .organizationRuleStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConfigRuleName)
        organizationConfigRuleName = organizationConfigRuleNameDecoded
        let organizationRuleStatusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationRuleStatus.self, forKey: .organizationRuleStatus)
        organizationRuleStatus = organizationRuleStatusDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension ConfigClientTypes.OrganizationConfigRuleStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationConfigRuleStatus(errorCode: \(Swift.String(describing: errorCode)), errorMessage: \(Swift.String(describing: errorMessage)), lastUpdateTime: \(Swift.String(describing: lastUpdateTime)), organizationConfigRuleName: \(Swift.String(describing: organizationConfigRuleName)), organizationRuleStatus: \(Swift.String(describing: organizationRuleStatus)))"}
}

extension ConfigClientTypes {
    /// Returns the status for an organization config rule in an organization.
    public struct OrganizationConfigRuleStatus: Swift.Equatable {
        /// An error code that is returned when organization config rule creation or deletion has failed.
        public let errorCode: Swift.String?
        /// An error message indicating that organization config rule creation or deletion failed due to an error.
        public let errorMessage: Swift.String?
        /// The timestamp of the last update.
        public let lastUpdateTime: ClientRuntime.Date?
        /// The name that you assign to organization config rule.
        /// This member is required.
        public let organizationConfigRuleName: Swift.String?
        /// Indicates deployment status of an organization config rule.
        /// 			When master account calls PutOrganizationConfigRule action for the first time, config rule status is created in all the member accounts.
        /// 			When master account calls PutOrganizationConfigRule action for the second time, config rule status is updated in all the member accounts. Additionally, config rule status is updated when one or more member accounts join or leave an organization.
        /// 			Config rule status is deleted when the master account deletes OrganizationConfigRule in all the member accounts and disables service access for config-multiaccountsetup.amazonaws.com.
        /// 			      AWS Config sets the state of the rule to:
        /// 		
        ///
        ///
        ///                   CREATE_SUCCESSFUL when an organization config rule has been successfully created in all the member accounts.
        ///
        ///
        ///
        ///                   CREATE_IN_PROGRESS when an organization config rule creation is in progress.
        ///
        ///
        ///
        ///                   CREATE_FAILED when an organization config rule creation failed in one or more member accounts within that organization.
        ///
        ///
        ///
        ///                   DELETE_FAILED when an organization config rule deletion failed in one or more member accounts within that organization.
        ///
        ///
        ///
        ///                   DELETE_IN_PROGRESS when an organization config rule deletion is in progress.
        ///
        ///
        ///
        ///                   DELETE_SUCCESSFUL when an organization config rule has been successfully deleted from all the member accounts.
        ///
        ///
        ///
        ///                   UPDATE_SUCCESSFUL when an organization config rule has been successfully updated in all the member accounts.
        ///
        ///
        ///
        ///                   UPDATE_IN_PROGRESS when an organization config rule update is in progress.
        ///
        ///
        ///
        ///                   UPDATE_FAILED when an organization config rule update failed in one or more member accounts within that organization.
        ///
        ///
        /// This member is required.
        public let organizationRuleStatus: ConfigClientTypes.OrganizationRuleStatus?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            organizationConfigRuleName: Swift.String? = nil,
            organizationRuleStatus: ConfigClientTypes.OrganizationRuleStatus? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.lastUpdateTime = lastUpdateTime
            self.organizationConfigRuleName = organizationConfigRuleName
            self.organizationRuleStatus = organizationRuleStatus
        }
    }

}

extension ConfigClientTypes {
    public enum OrganizationConfigRuleTriggerType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case configurationItemChangeNotification
        case oversizedConfigurationItemChangeNotifcation
        case scheduledNotification
        case sdkUnknown(Swift.String)

        public static var allCases: [OrganizationConfigRuleTriggerType] {
            return [
                .configurationItemChangeNotification,
                .oversizedConfigurationItemChangeNotifcation,
                .scheduledNotification,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .configurationItemChangeNotification: return "ConfigurationItemChangeNotification"
            case .oversizedConfigurationItemChangeNotifcation: return "OversizedConfigurationItemChangeNotification"
            case .scheduledNotification: return "ScheduledNotification"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrganizationConfigRuleTriggerType(rawValue: rawValue) ?? OrganizationConfigRuleTriggerType.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.OrganizationConformancePack: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackInputParameters = "ConformancePackInputParameters"
        case deliveryS3Bucket = "DeliveryS3Bucket"
        case deliveryS3KeyPrefix = "DeliveryS3KeyPrefix"
        case excludedAccounts = "ExcludedAccounts"
        case lastUpdateTime = "LastUpdateTime"
        case organizationConformancePackArn = "OrganizationConformancePackArn"
        case organizationConformancePackName = "OrganizationConformancePackName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackInputParameters = conformancePackInputParameters {
            var conformancePackInputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conformancePackInputParameters)
            for conformancepackinputparameters0 in conformancePackInputParameters {
                try conformancePackInputParametersContainer.encode(conformancepackinputparameters0)
            }
        }
        if let deliveryS3Bucket = deliveryS3Bucket {
            try encodeContainer.encode(deliveryS3Bucket, forKey: .deliveryS3Bucket)
        }
        if let deliveryS3KeyPrefix = deliveryS3KeyPrefix {
            try encodeContainer.encode(deliveryS3KeyPrefix, forKey: .deliveryS3KeyPrefix)
        }
        if let excludedAccounts = excludedAccounts {
            var excludedAccountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedAccounts)
            for excludedaccounts0 in excludedAccounts {
                try excludedAccountsContainer.encode(excludedaccounts0)
            }
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let organizationConformancePackArn = organizationConformancePackArn {
            try encodeContainer.encode(organizationConformancePackArn, forKey: .organizationConformancePackArn)
        }
        if let organizationConformancePackName = organizationConformancePackName {
            try encodeContainer.encode(organizationConformancePackName, forKey: .organizationConformancePackName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConformancePackName)
        organizationConformancePackName = organizationConformancePackNameDecoded
        let organizationConformancePackArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConformancePackArn)
        organizationConformancePackArn = organizationConformancePackArnDecoded
        let deliveryS3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryS3Bucket)
        deliveryS3Bucket = deliveryS3BucketDecoded
        let deliveryS3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryS3KeyPrefix)
        deliveryS3KeyPrefix = deliveryS3KeyPrefixDecoded
        let conformancePackInputParametersContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConformancePackInputParameter?].self, forKey: .conformancePackInputParameters)
        var conformancePackInputParametersDecoded0:[ConfigClientTypes.ConformancePackInputParameter]? = nil
        if let conformancePackInputParametersContainer = conformancePackInputParametersContainer {
            conformancePackInputParametersDecoded0 = [ConfigClientTypes.ConformancePackInputParameter]()
            for structure0 in conformancePackInputParametersContainer {
                if let structure0 = structure0 {
                    conformancePackInputParametersDecoded0?.append(structure0)
                }
            }
        }
        conformancePackInputParameters = conformancePackInputParametersDecoded0
        let excludedAccountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludedAccounts)
        var excludedAccountsDecoded0:[Swift.String]? = nil
        if let excludedAccountsContainer = excludedAccountsContainer {
            excludedAccountsDecoded0 = [Swift.String]()
            for string0 in excludedAccountsContainer {
                if let string0 = string0 {
                    excludedAccountsDecoded0?.append(string0)
                }
            }
        }
        excludedAccounts = excludedAccountsDecoded0
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension ConfigClientTypes.OrganizationConformancePack: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationConformancePack(conformancePackInputParameters: \(Swift.String(describing: conformancePackInputParameters)), deliveryS3Bucket: \(Swift.String(describing: deliveryS3Bucket)), deliveryS3KeyPrefix: \(Swift.String(describing: deliveryS3KeyPrefix)), excludedAccounts: \(Swift.String(describing: excludedAccounts)), lastUpdateTime: \(Swift.String(describing: lastUpdateTime)), organizationConformancePackArn: \(Swift.String(describing: organizationConformancePackArn)), organizationConformancePackName: \(Swift.String(describing: organizationConformancePackName)))"}
}

extension ConfigClientTypes {
    /// An organization conformance pack that has information about conformance packs that AWS Config creates in member accounts.
    public struct OrganizationConformancePack: Swift.Equatable {
        /// A list of ConformancePackInputParameter objects.
        public let conformancePackInputParameters: [ConfigClientTypes.ConformancePackInputParameter]?
        /// Amazon S3 bucket where AWS Config stores conformance pack templates.
        /// 		
        ///             This field is optional.
        ///
        public let deliveryS3Bucket: Swift.String?
        /// Any folder structure you want to add to an Amazon S3 bucket.
        /// 		
        ///             This field is optional.
        ///
        public let deliveryS3KeyPrefix: Swift.String?
        /// A comma-separated list of accounts excluded from organization conformance pack.
        public let excludedAccounts: [Swift.String]?
        /// Last time when organization conformation pack was updated.
        /// This member is required.
        public let lastUpdateTime: ClientRuntime.Date?
        /// Amazon Resource Name (ARN) of organization conformance pack.
        /// This member is required.
        public let organizationConformancePackArn: Swift.String?
        /// The name you assign to an organization conformance pack.
        /// This member is required.
        public let organizationConformancePackName: Swift.String?

        public init (
            conformancePackInputParameters: [ConfigClientTypes.ConformancePackInputParameter]? = nil,
            deliveryS3Bucket: Swift.String? = nil,
            deliveryS3KeyPrefix: Swift.String? = nil,
            excludedAccounts: [Swift.String]? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            organizationConformancePackArn: Swift.String? = nil,
            organizationConformancePackName: Swift.String? = nil
        )
        {
            self.conformancePackInputParameters = conformancePackInputParameters
            self.deliveryS3Bucket = deliveryS3Bucket
            self.deliveryS3KeyPrefix = deliveryS3KeyPrefix
            self.excludedAccounts = excludedAccounts
            self.lastUpdateTime = lastUpdateTime
            self.organizationConformancePackArn = organizationConformancePackArn
            self.organizationConformancePackName = organizationConformancePackName
        }
    }

}

extension ConfigClientTypes.OrganizationConformancePackDetailedStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case conformancePackName = "ConformancePackName"
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case lastUpdateTime = "LastUpdateTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationResourceDetailedStatus.self, forKey: .status)
        status = statusDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension ConfigClientTypes.OrganizationConformancePackDetailedStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationConformancePackDetailedStatus(accountId: \(Swift.String(describing: accountId)), conformancePackName: \(Swift.String(describing: conformancePackName)), errorCode: \(Swift.String(describing: errorCode)), errorMessage: \(Swift.String(describing: errorMessage)), lastUpdateTime: \(Swift.String(describing: lastUpdateTime)), status: \(Swift.String(describing: status)))"}
}

extension ConfigClientTypes {
    /// Organization conformance pack creation or deletion status in each member account.
    /// 			This includes the name of the conformance pack, the status, error code and error message
    /// 			when the conformance pack creation or deletion failed.
    public struct OrganizationConformancePackDetailedStatus: Swift.Equatable {
        /// The 12-digit account ID of a member account.
        /// This member is required.
        public let accountId: Swift.String?
        /// The name of conformance pack deployed in the member account.
        /// This member is required.
        public let conformancePackName: Swift.String?
        /// An error code that is returned when conformance pack creation or
        /// 			deletion failed in the member account.
        public let errorCode: Swift.String?
        /// An error message indicating that conformance pack account creation or deletion
        /// 			has failed due to an error in the member account.
        public let errorMessage: Swift.String?
        /// The timestamp of the last status update.
        public let lastUpdateTime: ClientRuntime.Date?
        /// Indicates deployment status for conformance pack in a member account.
        /// 			When master account calls PutOrganizationConformancePack action for the first time, conformance pack status is created in the member account.
        /// 			When master account calls PutOrganizationConformancePack action for the second time, conformance pack status is updated in the member account.
        /// 			Conformance pack status is deleted when the master account deletes OrganizationConformancePack and disables service access for config-multiaccountsetup.amazonaws.com.
        /// 		
        /// 		        AWS Config sets the state of the conformance pack to:
        /// 		
        ///
        ///
        ///                   CREATE_SUCCESSFUL when conformance pack has been created in the member account.
        ///
        ///
        ///
        ///                   CREATE_IN_PROGRESS when conformance pack is being created in the member account.
        ///
        ///
        ///
        ///                   CREATE_FAILED when conformance pack creation has failed in the member account.
        ///
        ///
        ///
        ///                   DELETE_FAILED when conformance pack deletion has failed in the member account.
        ///
        ///
        ///
        ///                   DELETE_IN_PROGRESS when conformance pack is being deleted in the member account.
        ///
        ///
        ///
        ///                   DELETE_SUCCESSFUL when conformance pack has been deleted in the member account.
        ///
        ///
        ///
        ///                   UPDATE_SUCCESSFUL when conformance pack has been updated in the member account.
        ///
        ///
        ///
        ///                   UPDATE_IN_PROGRESS when conformance pack is being updated in the member account.
        ///
        ///
        ///
        ///                   UPDATE_FAILED when conformance pack deletion has failed in the member account.
        ///
        ///
        /// This member is required.
        public let status: ConfigClientTypes.OrganizationResourceDetailedStatus?

        public init (
            accountId: Swift.String? = nil,
            conformancePackName: Swift.String? = nil,
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            status: ConfigClientTypes.OrganizationResourceDetailedStatus? = nil
        )
        {
            self.accountId = accountId
            self.conformancePackName = conformancePackName
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.lastUpdateTime = lastUpdateTime
            self.status = status
        }
    }

}

extension ConfigClientTypes.OrganizationConformancePackStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case lastUpdateTime = "LastUpdateTime"
        case organizationConformancePackName = "OrganizationConformancePackName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let organizationConformancePackName = organizationConformancePackName {
            try encodeContainer.encode(organizationConformancePackName, forKey: .organizationConformancePackName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConformancePackName)
        organizationConformancePackName = organizationConformancePackNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationResourceStatus.self, forKey: .status)
        status = statusDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension ConfigClientTypes.OrganizationConformancePackStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationConformancePackStatus(errorCode: \(Swift.String(describing: errorCode)), errorMessage: \(Swift.String(describing: errorMessage)), lastUpdateTime: \(Swift.String(describing: lastUpdateTime)), organizationConformancePackName: \(Swift.String(describing: organizationConformancePackName)), status: \(Swift.String(describing: status)))"}
}

extension ConfigClientTypes {
    /// Returns the status for an organization conformance pack in an organization.
    public struct OrganizationConformancePackStatus: Swift.Equatable {
        /// An error code that is returned when organization conformance pack creation or deletion has failed in a member account.
        public let errorCode: Swift.String?
        /// An error message indicating that organization conformance pack creation or deletion failed due to an error.
        public let errorMessage: Swift.String?
        /// The timestamp of the last update.
        public let lastUpdateTime: ClientRuntime.Date?
        /// The name that you assign to organization conformance pack.
        /// This member is required.
        public let organizationConformancePackName: Swift.String?
        /// Indicates deployment status of an organization conformance pack.
        /// 			When master account calls PutOrganizationConformancePack for the first time,
        /// 			conformance pack status is created in all the member accounts.
        /// 			When master account calls PutOrganizationConformancePack for the second time,
        /// 			conformance pack status is updated in all the member accounts.
        /// 			Additionally, conformance pack status is updated when one or more member accounts join or leave an
        /// 			organization.
        /// 			Conformance pack status is deleted when the master account deletes
        /// 			OrganizationConformancePack in all the member accounts and disables service
        /// 			access for config-multiaccountsetup.amazonaws.com.
        /// 		       AWS Config sets the state of the conformance pack to:
        /// 		
        ///
        ///
        ///                   CREATE_SUCCESSFUL when an organization conformance pack has been successfully created in all the member accounts.
        ///
        ///
        ///
        ///                   CREATE_IN_PROGRESS when an organization conformance pack creation is in progress.
        ///
        ///
        ///
        ///                   CREATE_FAILED when an organization conformance pack creation failed in one or more member accounts within that organization.
        ///
        ///
        ///
        ///                   DELETE_FAILED when an organization conformance pack deletion failed in one or more member accounts within that organization.
        ///
        ///
        ///
        ///                   DELETE_IN_PROGRESS when an organization conformance pack deletion is in progress.
        ///
        ///
        ///
        ///                   DELETE_SUCCESSFUL when an organization conformance pack has been successfully deleted from all the member accounts.
        ///
        ///
        ///
        ///                   UPDATE_SUCCESSFUL when an organization conformance pack has been successfully updated in all the member accounts.
        ///
        ///
        ///
        ///                   UPDATE_IN_PROGRESS when an organization conformance pack update is in progress.
        ///
        ///
        ///
        ///                   UPDATE_FAILED when an organization conformance pack update failed in one or more member accounts within that organization.
        ///
        ///
        /// This member is required.
        public let status: ConfigClientTypes.OrganizationResourceStatus?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            organizationConformancePackName: Swift.String? = nil,
            status: ConfigClientTypes.OrganizationResourceStatus? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.lastUpdateTime = lastUpdateTime
            self.organizationConformancePackName = organizationConformancePackName
            self.status = status
        }
    }

}

extension OrganizationConformancePackTemplateValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationConformancePackTemplateValidationException(message: \(Swift.String(describing: message)))"}
}

extension OrganizationConformancePackTemplateValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: OrganizationConformancePackTemplateValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have specified a template that is not valid or supported.
public struct OrganizationConformancePackTemplateValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OrganizationConformancePackTemplateValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension OrganizationConformancePackTemplateValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfigClientTypes.OrganizationCustomRuleMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case inputParameters = "InputParameters"
        case lambdaFunctionArn = "LambdaFunctionArn"
        case maximumExecutionFrequency = "MaximumExecutionFrequency"
        case organizationConfigRuleTriggerTypes = "OrganizationConfigRuleTriggerTypes"
        case resourceIdScope = "ResourceIdScope"
        case resourceTypesScope = "ResourceTypesScope"
        case tagKeyScope = "TagKeyScope"
        case tagValueScope = "TagValueScope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let inputParameters = inputParameters {
            try encodeContainer.encode(inputParameters, forKey: .inputParameters)
        }
        if let lambdaFunctionArn = lambdaFunctionArn {
            try encodeContainer.encode(lambdaFunctionArn, forKey: .lambdaFunctionArn)
        }
        if let maximumExecutionFrequency = maximumExecutionFrequency {
            try encodeContainer.encode(maximumExecutionFrequency.rawValue, forKey: .maximumExecutionFrequency)
        }
        if let organizationConfigRuleTriggerTypes = organizationConfigRuleTriggerTypes {
            var organizationConfigRuleTriggerTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .organizationConfigRuleTriggerTypes)
            for organizationconfigruletriggertypes0 in organizationConfigRuleTriggerTypes {
                try organizationConfigRuleTriggerTypesContainer.encode(organizationconfigruletriggertypes0.rawValue)
            }
        }
        if let resourceIdScope = resourceIdScope {
            try encodeContainer.encode(resourceIdScope, forKey: .resourceIdScope)
        }
        if let resourceTypesScope = resourceTypesScope {
            var resourceTypesScopeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypesScope)
            for resourcetypesscope0 in resourceTypesScope {
                try resourceTypesScopeContainer.encode(resourcetypesscope0)
            }
        }
        if let tagKeyScope = tagKeyScope {
            try encodeContainer.encode(tagKeyScope, forKey: .tagKeyScope)
        }
        if let tagValueScope = tagValueScope {
            try encodeContainer.encode(tagValueScope, forKey: .tagValueScope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let lambdaFunctionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lambdaFunctionArn)
        lambdaFunctionArn = lambdaFunctionArnDecoded
        let organizationConfigRuleTriggerTypesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.OrganizationConfigRuleTriggerType?].self, forKey: .organizationConfigRuleTriggerTypes)
        var organizationConfigRuleTriggerTypesDecoded0:[ConfigClientTypes.OrganizationConfigRuleTriggerType]? = nil
        if let organizationConfigRuleTriggerTypesContainer = organizationConfigRuleTriggerTypesContainer {
            organizationConfigRuleTriggerTypesDecoded0 = [ConfigClientTypes.OrganizationConfigRuleTriggerType]()
            for string0 in organizationConfigRuleTriggerTypesContainer {
                if let string0 = string0 {
                    organizationConfigRuleTriggerTypesDecoded0?.append(string0)
                }
            }
        }
        organizationConfigRuleTriggerTypes = organizationConfigRuleTriggerTypesDecoded0
        let inputParametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputParameters)
        inputParameters = inputParametersDecoded
        let maximumExecutionFrequencyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.MaximumExecutionFrequency.self, forKey: .maximumExecutionFrequency)
        maximumExecutionFrequency = maximumExecutionFrequencyDecoded
        let resourceTypesScopeContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceTypesScope)
        var resourceTypesScopeDecoded0:[Swift.String]? = nil
        if let resourceTypesScopeContainer = resourceTypesScopeContainer {
            resourceTypesScopeDecoded0 = [Swift.String]()
            for string0 in resourceTypesScopeContainer {
                if let string0 = string0 {
                    resourceTypesScopeDecoded0?.append(string0)
                }
            }
        }
        resourceTypesScope = resourceTypesScopeDecoded0
        let resourceIdScopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceIdScope)
        resourceIdScope = resourceIdScopeDecoded
        let tagKeyScopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagKeyScope)
        tagKeyScope = tagKeyScopeDecoded
        let tagValueScopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagValueScope)
        tagValueScope = tagValueScopeDecoded
    }
}

extension ConfigClientTypes.OrganizationCustomRuleMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationCustomRuleMetadata(description: \(Swift.String(describing: description)), inputParameters: \(Swift.String(describing: inputParameters)), lambdaFunctionArn: \(Swift.String(describing: lambdaFunctionArn)), maximumExecutionFrequency: \(Swift.String(describing: maximumExecutionFrequency)), organizationConfigRuleTriggerTypes: \(Swift.String(describing: organizationConfigRuleTriggerTypes)), resourceIdScope: \(Swift.String(describing: resourceIdScope)), resourceTypesScope: \(Swift.String(describing: resourceTypesScope)), tagKeyScope: \(Swift.String(describing: tagKeyScope)), tagValueScope: \(Swift.String(describing: tagValueScope)))"}
}

extension ConfigClientTypes {
    /// An object that specifies organization custom rule metadata such as resource type, resource ID of AWS resource, Lamdba function ARN,
    /// 			and organization trigger types that trigger AWS Config to evaluate your AWS resources against a rule.
    /// 			It also provides the frequency with which you want AWS Config to run evaluations for the rule if the trigger type is periodic.
    public struct OrganizationCustomRuleMetadata: Swift.Equatable {
        /// The description that you provide for organization config rule.
        public let description: Swift.String?
        /// A string, in JSON format, that is passed to organization config rule Lambda function.
        public let inputParameters: Swift.String?
        /// The lambda function ARN.
        /// This member is required.
        public let lambdaFunctionArn: Swift.String?
        /// The maximum frequency with which AWS Config runs evaluations for a rule.
        /// 			Your custom rule is triggered when AWS Config delivers the configuration snapshot. For more information, see ConfigSnapshotDeliveryProperties.
        /// 		
        ///             By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid
        /// 			value for the MaximumExecutionFrequency parameter.
        ///
        public let maximumExecutionFrequency: ConfigClientTypes.MaximumExecutionFrequency?
        /// The type of notification that triggers AWS Config to run an evaluation for a rule. You can specify the following notification types:
        /// 		
        /// 		
        ///
        ///
        ///                   ConfigurationItemChangeNotification - Triggers an evaluation when AWS Config delivers a configuration item as a result of a resource change.
        ///
        ///
        ///
        ///                   OversizedConfigurationItemChangeNotification - Triggers an evaluation when AWS Config delivers an oversized configuration item.
        /// 			         	AWS Config may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.
        ///
        ///
        ///
        ///                   ScheduledNotification - Triggers a periodic evaluation at the frequency specified for MaximumExecutionFrequency.
        ///
        ///
        /// This member is required.
        public let organizationConfigRuleTriggerTypes: [ConfigClientTypes.OrganizationConfigRuleTriggerType]?
        /// The ID of the AWS resource that was evaluated.
        public let resourceIdScope: Swift.String?
        /// The type of the AWS resource that was evaluated.
        public let resourceTypesScope: [Swift.String]?
        /// One part of a key-value pair that make up a tag.
        /// 			A key is a general label that acts like a category for more specific tag values.
        public let tagKeyScope: Swift.String?
        /// The optional part of a key-value pair that make up a tag.
        /// 			A value acts as a descriptor within a tag category (key).
        public let tagValueScope: Swift.String?

        public init (
            description: Swift.String? = nil,
            inputParameters: Swift.String? = nil,
            lambdaFunctionArn: Swift.String? = nil,
            maximumExecutionFrequency: ConfigClientTypes.MaximumExecutionFrequency? = nil,
            organizationConfigRuleTriggerTypes: [ConfigClientTypes.OrganizationConfigRuleTriggerType]? = nil,
            resourceIdScope: Swift.String? = nil,
            resourceTypesScope: [Swift.String]? = nil,
            tagKeyScope: Swift.String? = nil,
            tagValueScope: Swift.String? = nil
        )
        {
            self.description = description
            self.inputParameters = inputParameters
            self.lambdaFunctionArn = lambdaFunctionArn
            self.maximumExecutionFrequency = maximumExecutionFrequency
            self.organizationConfigRuleTriggerTypes = organizationConfigRuleTriggerTypes
            self.resourceIdScope = resourceIdScope
            self.resourceTypesScope = resourceTypesScope
            self.tagKeyScope = tagKeyScope
            self.tagValueScope = tagValueScope
        }
    }

}

extension ConfigClientTypes.OrganizationManagedRuleMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case inputParameters = "InputParameters"
        case maximumExecutionFrequency = "MaximumExecutionFrequency"
        case resourceIdScope = "ResourceIdScope"
        case resourceTypesScope = "ResourceTypesScope"
        case ruleIdentifier = "RuleIdentifier"
        case tagKeyScope = "TagKeyScope"
        case tagValueScope = "TagValueScope"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let inputParameters = inputParameters {
            try encodeContainer.encode(inputParameters, forKey: .inputParameters)
        }
        if let maximumExecutionFrequency = maximumExecutionFrequency {
            try encodeContainer.encode(maximumExecutionFrequency.rawValue, forKey: .maximumExecutionFrequency)
        }
        if let resourceIdScope = resourceIdScope {
            try encodeContainer.encode(resourceIdScope, forKey: .resourceIdScope)
        }
        if let resourceTypesScope = resourceTypesScope {
            var resourceTypesScopeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypesScope)
            for resourcetypesscope0 in resourceTypesScope {
                try resourceTypesScopeContainer.encode(resourcetypesscope0)
            }
        }
        if let ruleIdentifier = ruleIdentifier {
            try encodeContainer.encode(ruleIdentifier, forKey: .ruleIdentifier)
        }
        if let tagKeyScope = tagKeyScope {
            try encodeContainer.encode(tagKeyScope, forKey: .tagKeyScope)
        }
        if let tagValueScope = tagValueScope {
            try encodeContainer.encode(tagValueScope, forKey: .tagValueScope)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let ruleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleIdentifier)
        ruleIdentifier = ruleIdentifierDecoded
        let inputParametersDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputParameters)
        inputParameters = inputParametersDecoded
        let maximumExecutionFrequencyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.MaximumExecutionFrequency.self, forKey: .maximumExecutionFrequency)
        maximumExecutionFrequency = maximumExecutionFrequencyDecoded
        let resourceTypesScopeContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceTypesScope)
        var resourceTypesScopeDecoded0:[Swift.String]? = nil
        if let resourceTypesScopeContainer = resourceTypesScopeContainer {
            resourceTypesScopeDecoded0 = [Swift.String]()
            for string0 in resourceTypesScopeContainer {
                if let string0 = string0 {
                    resourceTypesScopeDecoded0?.append(string0)
                }
            }
        }
        resourceTypesScope = resourceTypesScopeDecoded0
        let resourceIdScopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceIdScope)
        resourceIdScope = resourceIdScopeDecoded
        let tagKeyScopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagKeyScope)
        tagKeyScope = tagKeyScopeDecoded
        let tagValueScopeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagValueScope)
        tagValueScope = tagValueScopeDecoded
    }
}

extension ConfigClientTypes.OrganizationManagedRuleMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationManagedRuleMetadata(description: \(Swift.String(describing: description)), inputParameters: \(Swift.String(describing: inputParameters)), maximumExecutionFrequency: \(Swift.String(describing: maximumExecutionFrequency)), resourceIdScope: \(Swift.String(describing: resourceIdScope)), resourceTypesScope: \(Swift.String(describing: resourceTypesScope)), ruleIdentifier: \(Swift.String(describing: ruleIdentifier)), tagKeyScope: \(Swift.String(describing: tagKeyScope)), tagValueScope: \(Swift.String(describing: tagValueScope)))"}
}

extension ConfigClientTypes {
    /// An object that specifies organization managed rule metadata such as resource type and ID of AWS resource along with the rule identifier.
    /// 			It also provides the frequency with which you want AWS Config to run evaluations for the rule if the trigger type is periodic.
    public struct OrganizationManagedRuleMetadata: Swift.Equatable {
        /// The description that you provide for organization config rule.
        public let description: Swift.String?
        /// A string, in JSON format, that is passed to organization config rule Lambda function.
        public let inputParameters: Swift.String?
        /// The maximum frequency with which AWS Config runs evaluations for a rule. You are using an AWS managed rule that is triggered at a periodic frequency.
        /// 		
        ///             By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid
        /// 			value for the MaximumExecutionFrequency parameter.
        ///
        public let maximumExecutionFrequency: ConfigClientTypes.MaximumExecutionFrequency?
        /// The ID of the AWS resource that was evaluated.
        public let resourceIdScope: Swift.String?
        /// The type of the AWS resource that was evaluated.
        public let resourceTypesScope: [Swift.String]?
        /// For organization config managed rules, a predefined identifier from a
        /// 			list. For example, IAM_PASSWORD_POLICY is a managed
        /// 			rule. To reference a managed rule, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">Using AWS Managed Config Rules.
        /// This member is required.
        public let ruleIdentifier: Swift.String?
        /// One part of a key-value pair that make up a tag.
        /// 			A key is a general label that acts like a category for more specific tag values.
        public let tagKeyScope: Swift.String?
        /// The optional part of a key-value pair that make up a tag.
        /// 			A value acts as a descriptor within a tag category (key).
        public let tagValueScope: Swift.String?

        public init (
            description: Swift.String? = nil,
            inputParameters: Swift.String? = nil,
            maximumExecutionFrequency: ConfigClientTypes.MaximumExecutionFrequency? = nil,
            resourceIdScope: Swift.String? = nil,
            resourceTypesScope: [Swift.String]? = nil,
            ruleIdentifier: Swift.String? = nil,
            tagKeyScope: Swift.String? = nil,
            tagValueScope: Swift.String? = nil
        )
        {
            self.description = description
            self.inputParameters = inputParameters
            self.maximumExecutionFrequency = maximumExecutionFrequency
            self.resourceIdScope = resourceIdScope
            self.resourceTypesScope = resourceTypesScope
            self.ruleIdentifier = ruleIdentifier
            self.tagKeyScope = tagKeyScope
            self.tagValueScope = tagValueScope
        }
    }

}

extension ConfigClientTypes {
    public enum OrganizationResourceDetailedStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createFailed
        case createInProgress
        case createSuccessful
        case deleteFailed
        case deleteInProgress
        case deleteSuccessful
        case updateFailed
        case updateInProgress
        case updateSuccessful
        case sdkUnknown(Swift.String)

        public static var allCases: [OrganizationResourceDetailedStatus] {
            return [
                .createFailed,
                .createInProgress,
                .createSuccessful,
                .deleteFailed,
                .deleteInProgress,
                .deleteSuccessful,
                .updateFailed,
                .updateInProgress,
                .updateSuccessful,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createSuccessful: return "CREATE_SUCCESSFUL"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deleteSuccessful: return "DELETE_SUCCESSFUL"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updateSuccessful: return "UPDATE_SUCCESSFUL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrganizationResourceDetailedStatus(rawValue: rawValue) ?? OrganizationResourceDetailedStatus.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.OrganizationResourceDetailedStatusFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationResourceDetailedStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ConfigClientTypes.OrganizationResourceDetailedStatusFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OrganizationResourceDetailedStatusFilters(accountId: \(Swift.String(describing: accountId)), status: \(Swift.String(describing: status)))"}
}

extension ConfigClientTypes {
    /// Status filter object to filter results based on specific member account ID or status type for an organization conformance pack.
    public struct OrganizationResourceDetailedStatusFilters: Swift.Equatable {
        /// The 12-digit account ID of the member account within an organization.
        public let accountId: Swift.String?
        /// Indicates deployment status for conformance pack in a member account.
        /// 			When master account calls PutOrganizationConformancePack action for the first time, conformance pack status is created in the member account.
        /// 			When master account calls PutOrganizationConformancePack action for the second time, conformance pack status is updated in the member account.
        /// 			Conformance pack status is deleted when the master account deletes OrganizationConformancePack and disables service access for config-multiaccountsetup.amazonaws.com.
        /// 		
        /// 		        AWS Config sets the state of the conformance pack to:
        /// 		
        ///
        ///
        ///                   CREATE_SUCCESSFUL when conformance pack has been created in the member account.
        ///
        ///
        ///
        ///                   CREATE_IN_PROGRESS when conformance pack is being created in the member account.
        ///
        ///
        ///
        ///                   CREATE_FAILED when conformance pack creation has failed in the member account.
        ///
        ///
        ///
        ///                   DELETE_FAILED when conformance pack deletion has failed in the member account.
        ///
        ///
        ///
        ///                   DELETE_IN_PROGRESS when conformance pack is being deleted in the member account.
        ///
        ///
        ///
        ///                   DELETE_SUCCESSFUL when conformance pack has been deleted in the member account.
        ///
        ///
        ///
        ///                   UPDATE_SUCCESSFUL when conformance pack has been updated in the member account.
        ///
        ///
        ///
        ///                   UPDATE_IN_PROGRESS when conformance pack is being updated in the member account.
        ///
        ///
        ///
        ///                   UPDATE_FAILED when conformance pack deletion has failed in the member account.
        ///
        ///
        public let status: ConfigClientTypes.OrganizationResourceDetailedStatus?

        public init (
            accountId: Swift.String? = nil,
            status: ConfigClientTypes.OrganizationResourceDetailedStatus? = nil
        )
        {
            self.accountId = accountId
            self.status = status
        }
    }

}

extension ConfigClientTypes {
    public enum OrganizationResourceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createFailed
        case createInProgress
        case createSuccessful
        case deleteFailed
        case deleteInProgress
        case deleteSuccessful
        case updateFailed
        case updateInProgress
        case updateSuccessful
        case sdkUnknown(Swift.String)

        public static var allCases: [OrganizationResourceStatus] {
            return [
                .createFailed,
                .createInProgress,
                .createSuccessful,
                .deleteFailed,
                .deleteInProgress,
                .deleteSuccessful,
                .updateFailed,
                .updateInProgress,
                .updateSuccessful,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createSuccessful: return "CREATE_SUCCESSFUL"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deleteSuccessful: return "DELETE_SUCCESSFUL"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updateSuccessful: return "UPDATE_SUCCESSFUL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrganizationResourceStatus(rawValue: rawValue) ?? OrganizationResourceStatus.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes {
    public enum OrganizationRuleStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createFailed
        case createInProgress
        case createSuccessful
        case deleteFailed
        case deleteInProgress
        case deleteSuccessful
        case updateFailed
        case updateInProgress
        case updateSuccessful
        case sdkUnknown(Swift.String)

        public static var allCases: [OrganizationRuleStatus] {
            return [
                .createFailed,
                .createInProgress,
                .createSuccessful,
                .deleteFailed,
                .deleteInProgress,
                .deleteSuccessful,
                .updateFailed,
                .updateInProgress,
                .updateSuccessful,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CREATE_FAILED"
            case .createInProgress: return "CREATE_IN_PROGRESS"
            case .createSuccessful: return "CREATE_SUCCESSFUL"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleteInProgress: return "DELETE_IN_PROGRESS"
            case .deleteSuccessful: return "DELETE_SUCCESSFUL"
            case .updateFailed: return "UPDATE_FAILED"
            case .updateInProgress: return "UPDATE_IN_PROGRESS"
            case .updateSuccessful: return "UPDATE_SUCCESSFUL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrganizationRuleStatus(rawValue: rawValue) ?? OrganizationRuleStatus.sdkUnknown(rawValue)
        }
    }
}

extension OversizedConfigurationItemException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OversizedConfigurationItemException(message: \(Swift.String(describing: message)))"}
}

extension OversizedConfigurationItemException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: OversizedConfigurationItemExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The configuration item size is outside the allowable range.
public struct OversizedConfigurationItemException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OversizedConfigurationItemExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension OversizedConfigurationItemExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfigClientTypes {
    public enum Owner: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aws
        case customLambda
        case sdkUnknown(Swift.String)

        public static var allCases: [Owner] {
            return [
                .aws,
                .customLambda,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aws: return "AWS"
            case .customLambda: return "CUSTOM_LAMBDA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Owner(rawValue: rawValue) ?? Owner.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.PendingAggregationRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requesterAccountId = "RequesterAccountId"
        case requesterAwsRegion = "RequesterAwsRegion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let requesterAccountId = requesterAccountId {
            try encodeContainer.encode(requesterAccountId, forKey: .requesterAccountId)
        }
        if let requesterAwsRegion = requesterAwsRegion {
            try encodeContainer.encode(requesterAwsRegion, forKey: .requesterAwsRegion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requesterAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterAccountId)
        requesterAccountId = requesterAccountIdDecoded
        let requesterAwsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requesterAwsRegion)
        requesterAwsRegion = requesterAwsRegionDecoded
    }
}

extension ConfigClientTypes.PendingAggregationRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PendingAggregationRequest(requesterAccountId: \(Swift.String(describing: requesterAccountId)), requesterAwsRegion: \(Swift.String(describing: requesterAwsRegion)))"}
}

extension ConfigClientTypes {
    /// An object that represents the account ID and region of an
    /// 			aggregator account that is requesting authorization but is not yet
    /// 			authorized.
    public struct PendingAggregationRequest: Swift.Equatable {
        /// The 12-digit account ID of the account requesting to aggregate
        /// 			data.
        public let requesterAccountId: Swift.String?
        /// The region requesting to aggregate data.
        public let requesterAwsRegion: Swift.String?

        public init (
            requesterAccountId: Swift.String? = nil,
            requesterAwsRegion: Swift.String? = nil
        )
        {
            self.requesterAccountId = requesterAccountId
            self.requesterAwsRegion = requesterAwsRegion
        }
    }

}

public struct PutAggregationAuthorizationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAggregationAuthorizationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAggregationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAggregationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAggregationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAggregationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAggregationAuthorizationOutputError>
}

extension PutAggregationAuthorizationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAggregationAuthorizationInput(authorizedAccountId: \(Swift.String(describing: authorizedAccountId)), authorizedAwsRegion: \(Swift.String(describing: authorizedAwsRegion)), tags: \(Swift.String(describing: tags)))"}
}

extension PutAggregationAuthorizationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedAccountId = "AuthorizedAccountId"
        case authorizedAwsRegion = "AuthorizedAwsRegion"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let authorizedAccountId = authorizedAccountId {
            try encodeContainer.encode(authorizedAccountId, forKey: .authorizedAccountId)
        }
        if let authorizedAwsRegion = authorizedAwsRegion {
            try encodeContainer.encode(authorizedAwsRegion, forKey: .authorizedAwsRegion)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tagslist0 in tags {
                try tagsContainer.encode(tagslist0)
            }
        }
    }
}

public struct PutAggregationAuthorizationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAggregationAuthorizationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAggregationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAggregationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAggregationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAggregationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAggregationAuthorizationOutputError>
}

public struct PutAggregationAuthorizationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAggregationAuthorizationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAggregationAuthorizationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAggregationAuthorizationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAggregationAuthorizationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAggregationAuthorizationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAggregationAuthorizationOutputError>
}

public struct PutAggregationAuthorizationInput: Swift.Equatable {
    /// The 12-digit account ID of the account authorized to aggregate data.
    /// This member is required.
    public let authorizedAccountId: Swift.String?
    /// The region authorized to collect aggregated data.
    /// This member is required.
    public let authorizedAwsRegion: Swift.String?
    /// An array of tag object.
    public let tags: [ConfigClientTypes.Tag]?

    public init (
        authorizedAccountId: Swift.String? = nil,
        authorizedAwsRegion: Swift.String? = nil,
        tags: [ConfigClientTypes.Tag]? = nil
    )
    {
        self.authorizedAccountId = authorizedAccountId
        self.authorizedAwsRegion = authorizedAwsRegion
        self.tags = tags
    }
}

struct PutAggregationAuthorizationInputBody: Swift.Equatable {
    public let authorizedAccountId: Swift.String?
    public let authorizedAwsRegion: Swift.String?
    public let tags: [ConfigClientTypes.Tag]?
}

extension PutAggregationAuthorizationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case authorizedAccountId = "AuthorizedAccountId"
        case authorizedAwsRegion = "AuthorizedAwsRegion"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let authorizedAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizedAccountId)
        authorizedAccountId = authorizedAccountIdDecoded
        let authorizedAwsRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .authorizedAwsRegion)
        authorizedAwsRegion = authorizedAwsRegionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ConfigClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ConfigClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutAggregationAuthorizationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAggregationAuthorizationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutAggregationAuthorizationOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAggregationAuthorizationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAggregationAuthorizationOutputResponse(aggregationAuthorization: \(Swift.String(describing: aggregationAuthorization)))"}
}

extension PutAggregationAuthorizationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutAggregationAuthorizationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.aggregationAuthorization = output.aggregationAuthorization
        } else {
            self.aggregationAuthorization = nil
        }
    }
}

public struct PutAggregationAuthorizationOutputResponse: Swift.Equatable {
    /// Returns an AggregationAuthorization object.
    /// 			
    /// 		
    public let aggregationAuthorization: ConfigClientTypes.AggregationAuthorization?

    public init (
        aggregationAuthorization: ConfigClientTypes.AggregationAuthorization? = nil
    )
    {
        self.aggregationAuthorization = aggregationAuthorization
    }
}

struct PutAggregationAuthorizationOutputResponseBody: Swift.Equatable {
    public let aggregationAuthorization: ConfigClientTypes.AggregationAuthorization?
}

extension PutAggregationAuthorizationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aggregationAuthorization = "AggregationAuthorization"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregationAuthorizationDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.AggregationAuthorization.self, forKey: .aggregationAuthorization)
        aggregationAuthorization = aggregationAuthorizationDecoded
    }
}

public struct PutConfigRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigRuleOutputError>
}

extension PutConfigRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigRuleInput(configRule: \(Swift.String(describing: configRule)), tags: \(Swift.String(describing: tags)))"}
}

extension PutConfigRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRule = "ConfigRule"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRule = configRule {
            try encodeContainer.encode(configRule, forKey: .configRule)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tagslist0 in tags {
                try tagsContainer.encode(tagslist0)
            }
        }
    }
}

public struct PutConfigRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigRuleOutputError>
}

public struct PutConfigRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigRuleOutputError>
}

public struct PutConfigRuleInput: Swift.Equatable {
    /// The rule that you want to add to your account.
    /// This member is required.
    public let configRule: ConfigClientTypes.ConfigRule?
    /// An array of tag object.
    public let tags: [ConfigClientTypes.Tag]?

    public init (
        configRule: ConfigClientTypes.ConfigRule? = nil,
        tags: [ConfigClientTypes.Tag]? = nil
    )
    {
        self.configRule = configRule
        self.tags = tags
    }
}

struct PutConfigRuleInputBody: Swift.Equatable {
    public let configRule: ConfigClientTypes.ConfigRule?
    public let tags: [ConfigClientTypes.Tag]?
}

extension PutConfigRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRule = "ConfigRule"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigRule.self, forKey: .configRule)
        configRule = configRuleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ConfigClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ConfigClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutConfigRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaxNumberOfConfigRulesExceededException" : self = .maxNumberOfConfigRulesExceededException(try MaxNumberOfConfigRulesExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoAvailableConfigurationRecorderException" : self = .noAvailableConfigurationRecorderException(try NoAvailableConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutConfigRuleOutputError: Swift.Error, Swift.Equatable {
    case insufficientPermissionsException(InsufficientPermissionsException)
    case invalidParameterValueException(InvalidParameterValueException)
    case maxNumberOfConfigRulesExceededException(MaxNumberOfConfigRulesExceededException)
    case noAvailableConfigurationRecorderException(NoAvailableConfigurationRecorderException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigRuleOutputResponse()"}
}

extension PutConfigRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutConfigRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutConfigRuleOutputResponseBody: Swift.Equatable {
}

extension PutConfigRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutConfigurationAggregatorInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationAggregatorInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationAggregatorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationAggregatorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationAggregatorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationAggregatorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationAggregatorOutputError>
}

extension PutConfigurationAggregatorInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationAggregatorInput(accountAggregationSources: \(Swift.String(describing: accountAggregationSources)), configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), organizationAggregationSource: \(Swift.String(describing: organizationAggregationSource)), tags: \(Swift.String(describing: tags)))"}
}

extension PutConfigurationAggregatorInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountAggregationSources = "AccountAggregationSources"
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case organizationAggregationSource = "OrganizationAggregationSource"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountAggregationSources = accountAggregationSources {
            var accountAggregationSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountAggregationSources)
            for accountaggregationsourcelist0 in accountAggregationSources {
                try accountAggregationSourcesContainer.encode(accountaggregationsourcelist0)
            }
        }
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let organizationAggregationSource = organizationAggregationSource {
            try encodeContainer.encode(organizationAggregationSource, forKey: .organizationAggregationSource)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tagslist0 in tags {
                try tagsContainer.encode(tagslist0)
            }
        }
    }
}

public struct PutConfigurationAggregatorInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationAggregatorInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationAggregatorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationAggregatorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationAggregatorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationAggregatorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationAggregatorOutputError>
}

public struct PutConfigurationAggregatorInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationAggregatorInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationAggregatorInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationAggregatorOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationAggregatorInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationAggregatorOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationAggregatorOutputError>
}

public struct PutConfigurationAggregatorInput: Swift.Equatable {
    /// A list of AccountAggregationSource object.
    /// 			
    /// 		
    public let accountAggregationSources: [ConfigClientTypes.AccountAggregationSource]?
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// An OrganizationAggregationSource object.
    public let organizationAggregationSource: ConfigClientTypes.OrganizationAggregationSource?
    /// An array of tag object.
    public let tags: [ConfigClientTypes.Tag]?

    public init (
        accountAggregationSources: [ConfigClientTypes.AccountAggregationSource]? = nil,
        configurationAggregatorName: Swift.String? = nil,
        organizationAggregationSource: ConfigClientTypes.OrganizationAggregationSource? = nil,
        tags: [ConfigClientTypes.Tag]? = nil
    )
    {
        self.accountAggregationSources = accountAggregationSources
        self.configurationAggregatorName = configurationAggregatorName
        self.organizationAggregationSource = organizationAggregationSource
        self.tags = tags
    }
}

struct PutConfigurationAggregatorInputBody: Swift.Equatable {
    public let configurationAggregatorName: Swift.String?
    public let accountAggregationSources: [ConfigClientTypes.AccountAggregationSource]?
    public let organizationAggregationSource: ConfigClientTypes.OrganizationAggregationSource?
    public let tags: [ConfigClientTypes.Tag]?
}

extension PutConfigurationAggregatorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountAggregationSources = "AccountAggregationSources"
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case organizationAggregationSource = "OrganizationAggregationSource"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let accountAggregationSourcesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.AccountAggregationSource?].self, forKey: .accountAggregationSources)
        var accountAggregationSourcesDecoded0:[ConfigClientTypes.AccountAggregationSource]? = nil
        if let accountAggregationSourcesContainer = accountAggregationSourcesContainer {
            accountAggregationSourcesDecoded0 = [ConfigClientTypes.AccountAggregationSource]()
            for structure0 in accountAggregationSourcesContainer {
                if let structure0 = structure0 {
                    accountAggregationSourcesDecoded0?.append(structure0)
                }
            }
        }
        accountAggregationSources = accountAggregationSourcesDecoded0
        let organizationAggregationSourceDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationAggregationSource.self, forKey: .organizationAggregationSource)
        organizationAggregationSource = organizationAggregationSourceDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ConfigClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ConfigClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutConfigurationAggregatorOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationAggregatorOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoAvailableOrganizationException" : self = .noAvailableOrganizationException(try NoAvailableOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAccessDeniedException" : self = .organizationAccessDeniedException(try OrganizationAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAllFeaturesNotEnabledException" : self = .organizationAllFeaturesNotEnabledException(try OrganizationAllFeaturesNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutConfigurationAggregatorOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidRoleException(InvalidRoleException)
    case limitExceededException(LimitExceededException)
    case noAvailableOrganizationException(NoAvailableOrganizationException)
    case organizationAccessDeniedException(OrganizationAccessDeniedException)
    case organizationAllFeaturesNotEnabledException(OrganizationAllFeaturesNotEnabledException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationAggregatorOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationAggregatorOutputResponse(configurationAggregator: \(Swift.String(describing: configurationAggregator)))"}
}

extension PutConfigurationAggregatorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutConfigurationAggregatorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.configurationAggregator = output.configurationAggregator
        } else {
            self.configurationAggregator = nil
        }
    }
}

public struct PutConfigurationAggregatorOutputResponse: Swift.Equatable {
    /// Returns a ConfigurationAggregator object.
    public let configurationAggregator: ConfigClientTypes.ConfigurationAggregator?

    public init (
        configurationAggregator: ConfigClientTypes.ConfigurationAggregator? = nil
    )
    {
        self.configurationAggregator = configurationAggregator
    }
}

struct PutConfigurationAggregatorOutputResponseBody: Swift.Equatable {
    public let configurationAggregator: ConfigClientTypes.ConfigurationAggregator?
}

extension PutConfigurationAggregatorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregator = "ConfigurationAggregator"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationAggregatorDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigurationAggregator.self, forKey: .configurationAggregator)
        configurationAggregator = configurationAggregatorDecoded
    }
}

public struct PutConfigurationRecorderInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationRecorderInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationRecorderOutputError>
}

extension PutConfigurationRecorderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationRecorderInput(configurationRecorder: \(Swift.String(describing: configurationRecorder)))"}
}

extension PutConfigurationRecorderInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorder = "ConfigurationRecorder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationRecorder = configurationRecorder {
            try encodeContainer.encode(configurationRecorder, forKey: .configurationRecorder)
        }
    }
}

public struct PutConfigurationRecorderInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationRecorderInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationRecorderOutputError>
}

public struct PutConfigurationRecorderInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConfigurationRecorderInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConfigurationRecorderOutputError>
}

/// The input for the PutConfigurationRecorder
/// 			action.
public struct PutConfigurationRecorderInput: Swift.Equatable {
    /// The configuration recorder object that records each
    /// 			configuration change made to the resources.
    /// This member is required.
    public let configurationRecorder: ConfigClientTypes.ConfigurationRecorder?

    public init (
        configurationRecorder: ConfigClientTypes.ConfigurationRecorder? = nil
    )
    {
        self.configurationRecorder = configurationRecorder
    }
}

struct PutConfigurationRecorderInputBody: Swift.Equatable {
    public let configurationRecorder: ConfigClientTypes.ConfigurationRecorder?
}

extension PutConfigurationRecorderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorder = "ConfigurationRecorder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationRecorderDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ConfigurationRecorder.self, forKey: .configurationRecorder)
        configurationRecorder = configurationRecorderDecoded
    }
}

extension PutConfigurationRecorderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConfigurationRecorderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidConfigurationRecorderNameException" : self = .invalidConfigurationRecorderNameException(try InvalidConfigurationRecorderNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRecordingGroupException" : self = .invalidRecordingGroupException(try InvalidRecordingGroupException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRoleException" : self = .invalidRoleException(try InvalidRoleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaxNumberOfConfigurationRecordersExceededException" : self = .maxNumberOfConfigurationRecordersExceededException(try MaxNumberOfConfigurationRecordersExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutConfigurationRecorderOutputError: Swift.Error, Swift.Equatable {
    case invalidConfigurationRecorderNameException(InvalidConfigurationRecorderNameException)
    case invalidRecordingGroupException(InvalidRecordingGroupException)
    case invalidRoleException(InvalidRoleException)
    case maxNumberOfConfigurationRecordersExceededException(MaxNumberOfConfigurationRecordersExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConfigurationRecorderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConfigurationRecorderOutputResponse()"}
}

extension PutConfigurationRecorderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutConfigurationRecorderOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutConfigurationRecorderOutputResponseBody: Swift.Equatable {
}

extension PutConfigurationRecorderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutConformancePackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConformancePackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConformancePackOutputError>
}

extension PutConformancePackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConformancePackInput(conformancePackInputParameters: \(Swift.String(describing: conformancePackInputParameters)), conformancePackName: \(Swift.String(describing: conformancePackName)), deliveryS3Bucket: \(Swift.String(describing: deliveryS3Bucket)), deliveryS3KeyPrefix: \(Swift.String(describing: deliveryS3KeyPrefix)), templateBody: \(Swift.String(describing: templateBody)), templateS3Uri: \(Swift.String(describing: templateS3Uri)))"}
}

extension PutConformancePackInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackInputParameters = "ConformancePackInputParameters"
        case conformancePackName = "ConformancePackName"
        case deliveryS3Bucket = "DeliveryS3Bucket"
        case deliveryS3KeyPrefix = "DeliveryS3KeyPrefix"
        case templateBody = "TemplateBody"
        case templateS3Uri = "TemplateS3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackInputParameters = conformancePackInputParameters {
            var conformancePackInputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conformancePackInputParameters)
            for conformancepackinputparameters0 in conformancePackInputParameters {
                try conformancePackInputParametersContainer.encode(conformancepackinputparameters0)
            }
        }
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
        if let deliveryS3Bucket = deliveryS3Bucket {
            try encodeContainer.encode(deliveryS3Bucket, forKey: .deliveryS3Bucket)
        }
        if let deliveryS3KeyPrefix = deliveryS3KeyPrefix {
            try encodeContainer.encode(deliveryS3KeyPrefix, forKey: .deliveryS3KeyPrefix)
        }
        if let templateBody = templateBody {
            try encodeContainer.encode(templateBody, forKey: .templateBody)
        }
        if let templateS3Uri = templateS3Uri {
            try encodeContainer.encode(templateS3Uri, forKey: .templateS3Uri)
        }
    }
}

public struct PutConformancePackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConformancePackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConformancePackOutputError>
}

public struct PutConformancePackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutConformancePackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutConformancePackOutputError>
}

public struct PutConformancePackInput: Swift.Equatable {
    /// A list of ConformancePackInputParameter objects.
    public let conformancePackInputParameters: [ConfigClientTypes.ConformancePackInputParameter]?
    /// Name of the conformance pack you want to create.
    /// This member is required.
    public let conformancePackName: Swift.String?
    /// Amazon S3 bucket where AWS Config stores conformance pack templates.
    /// 		
    ///             This field is optional.
    ///
    public let deliveryS3Bucket: Swift.String?
    /// The prefix for the Amazon S3 bucket.
    /// 		
    ///             This field is optional.
    ///
    public let deliveryS3KeyPrefix: Swift.String?
    /// A string containing full conformance pack template body. Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes.
    /// 		
    ///             You can only use a YAML template with one resource type, that is, config rule and a remediation action.
    ///
    public let templateBody: Swift.String?
    /// Location of file containing the template body (s3://bucketname/prefix). The uri must point to the conformance pack template (max size: 300 KB) that is located in an Amazon S3 bucket in the same region as the conformance pack.
    /// 		
    ///             You must have access to read Amazon S3 bucket.
    ///
    public let templateS3Uri: Swift.String?

    public init (
        conformancePackInputParameters: [ConfigClientTypes.ConformancePackInputParameter]? = nil,
        conformancePackName: Swift.String? = nil,
        deliveryS3Bucket: Swift.String? = nil,
        deliveryS3KeyPrefix: Swift.String? = nil,
        templateBody: Swift.String? = nil,
        templateS3Uri: Swift.String? = nil
    )
    {
        self.conformancePackInputParameters = conformancePackInputParameters
        self.conformancePackName = conformancePackName
        self.deliveryS3Bucket = deliveryS3Bucket
        self.deliveryS3KeyPrefix = deliveryS3KeyPrefix
        self.templateBody = templateBody
        self.templateS3Uri = templateS3Uri
    }
}

struct PutConformancePackInputBody: Swift.Equatable {
    public let conformancePackName: Swift.String?
    public let templateS3Uri: Swift.String?
    public let templateBody: Swift.String?
    public let deliveryS3Bucket: Swift.String?
    public let deliveryS3KeyPrefix: Swift.String?
    public let conformancePackInputParameters: [ConfigClientTypes.ConformancePackInputParameter]?
}

extension PutConformancePackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackInputParameters = "ConformancePackInputParameters"
        case conformancePackName = "ConformancePackName"
        case deliveryS3Bucket = "DeliveryS3Bucket"
        case deliveryS3KeyPrefix = "DeliveryS3KeyPrefix"
        case templateBody = "TemplateBody"
        case templateS3Uri = "TemplateS3Uri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackName)
        conformancePackName = conformancePackNameDecoded
        let templateS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateS3Uri)
        templateS3Uri = templateS3UriDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let deliveryS3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryS3Bucket)
        deliveryS3Bucket = deliveryS3BucketDecoded
        let deliveryS3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryS3KeyPrefix)
        deliveryS3KeyPrefix = deliveryS3KeyPrefixDecoded
        let conformancePackInputParametersContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConformancePackInputParameter?].self, forKey: .conformancePackInputParameters)
        var conformancePackInputParametersDecoded0:[ConfigClientTypes.ConformancePackInputParameter]? = nil
        if let conformancePackInputParametersContainer = conformancePackInputParametersContainer {
            conformancePackInputParametersDecoded0 = [ConfigClientTypes.ConformancePackInputParameter]()
            for structure0 in conformancePackInputParametersContainer {
                if let structure0 = structure0 {
                    conformancePackInputParametersDecoded0?.append(structure0)
                }
            }
        }
        conformancePackInputParameters = conformancePackInputParametersDecoded0
    }
}

extension PutConformancePackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutConformancePackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ConformancePackTemplateValidationException" : self = .conformancePackTemplateValidationException(try ConformancePackTemplateValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaxNumberOfConformancePacksExceededException" : self = .maxNumberOfConformancePacksExceededException(try MaxNumberOfConformancePacksExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutConformancePackOutputError: Swift.Error, Swift.Equatable {
    case conformancePackTemplateValidationException(ConformancePackTemplateValidationException)
    case insufficientPermissionsException(InsufficientPermissionsException)
    case invalidParameterValueException(InvalidParameterValueException)
    case maxNumberOfConformancePacksExceededException(MaxNumberOfConformancePacksExceededException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutConformancePackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutConformancePackOutputResponse(conformancePackArn: \(Swift.String(describing: conformancePackArn)))"}
}

extension PutConformancePackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutConformancePackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.conformancePackArn = output.conformancePackArn
        } else {
            self.conformancePackArn = nil
        }
    }
}

public struct PutConformancePackOutputResponse: Swift.Equatable {
    /// ARN of the conformance pack.
    public let conformancePackArn: Swift.String?

    public init (
        conformancePackArn: Swift.String? = nil
    )
    {
        self.conformancePackArn = conformancePackArn
    }
}

struct PutConformancePackOutputResponseBody: Swift.Equatable {
    public let conformancePackArn: Swift.String?
}

extension PutConformancePackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackArn = "ConformancePackArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let conformancePackArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .conformancePackArn)
        conformancePackArn = conformancePackArnDecoded
    }
}

public struct PutDeliveryChannelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDeliveryChannelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDeliveryChannelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDeliveryChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDeliveryChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDeliveryChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDeliveryChannelOutputError>
}

extension PutDeliveryChannelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutDeliveryChannelInput(deliveryChannel: \(Swift.String(describing: deliveryChannel)))"}
}

extension PutDeliveryChannelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannel = "DeliveryChannel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryChannel = deliveryChannel {
            try encodeContainer.encode(deliveryChannel, forKey: .deliveryChannel)
        }
    }
}

public struct PutDeliveryChannelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDeliveryChannelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDeliveryChannelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDeliveryChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDeliveryChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDeliveryChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDeliveryChannelOutputError>
}

public struct PutDeliveryChannelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutDeliveryChannelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutDeliveryChannelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutDeliveryChannelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutDeliveryChannelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutDeliveryChannelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutDeliveryChannelOutputError>
}

/// The input for the PutDeliveryChannel
/// 			action.
public struct PutDeliveryChannelInput: Swift.Equatable {
    /// The configuration delivery channel object that delivers the
    /// 			configuration information to an Amazon S3 bucket and to an Amazon
    /// 			SNS topic.
    /// This member is required.
    public let deliveryChannel: ConfigClientTypes.DeliveryChannel?

    public init (
        deliveryChannel: ConfigClientTypes.DeliveryChannel? = nil
    )
    {
        self.deliveryChannel = deliveryChannel
    }
}

struct PutDeliveryChannelInputBody: Swift.Equatable {
    public let deliveryChannel: ConfigClientTypes.DeliveryChannel?
}

extension PutDeliveryChannelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryChannel = "DeliveryChannel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryChannelDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.DeliveryChannel.self, forKey: .deliveryChannel)
        deliveryChannel = deliveryChannelDecoded
    }
}

extension PutDeliveryChannelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDeliveryChannelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientDeliveryPolicyException" : self = .insufficientDeliveryPolicyException(try InsufficientDeliveryPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDeliveryChannelNameException" : self = .invalidDeliveryChannelNameException(try InvalidDeliveryChannelNameException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3KeyPrefixException" : self = .invalidS3KeyPrefixException(try InvalidS3KeyPrefixException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidS3KmsKeyArnException" : self = .invalidS3KmsKeyArnException(try InvalidS3KmsKeyArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSNSTopicARNException" : self = .invalidSNSTopicARNException(try InvalidSNSTopicARNException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaxNumberOfDeliveryChannelsExceededException" : self = .maxNumberOfDeliveryChannelsExceededException(try MaxNumberOfDeliveryChannelsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoAvailableConfigurationRecorderException" : self = .noAvailableConfigurationRecorderException(try NoAvailableConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchBucketException" : self = .noSuchBucketException(try NoSuchBucketException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutDeliveryChannelOutputError: Swift.Error, Swift.Equatable {
    case insufficientDeliveryPolicyException(InsufficientDeliveryPolicyException)
    case invalidDeliveryChannelNameException(InvalidDeliveryChannelNameException)
    case invalidS3KeyPrefixException(InvalidS3KeyPrefixException)
    case invalidS3KmsKeyArnException(InvalidS3KmsKeyArnException)
    case invalidSNSTopicARNException(InvalidSNSTopicARNException)
    case maxNumberOfDeliveryChannelsExceededException(MaxNumberOfDeliveryChannelsExceededException)
    case noAvailableConfigurationRecorderException(NoAvailableConfigurationRecorderException)
    case noSuchBucketException(NoSuchBucketException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDeliveryChannelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutDeliveryChannelOutputResponse()"}
}

extension PutDeliveryChannelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutDeliveryChannelOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutDeliveryChannelOutputResponseBody: Swift.Equatable {
}

extension PutDeliveryChannelOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutEvaluationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEvaluationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEvaluationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEvaluationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEvaluationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEvaluationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEvaluationsOutputError>
}

extension PutEvaluationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEvaluationsInput(evaluations: \(Swift.String(describing: evaluations)), resultToken: \(Swift.String(describing: resultToken)), testMode: \(Swift.String(describing: testMode)))"}
}

extension PutEvaluationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluations = "Evaluations"
        case resultToken = "ResultToken"
        case testMode = "TestMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluations = evaluations {
            var evaluationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .evaluations)
            for evaluations0 in evaluations {
                try evaluationsContainer.encode(evaluations0)
            }
        }
        if let resultToken = resultToken {
            try encodeContainer.encode(resultToken, forKey: .resultToken)
        }
        if testMode != false {
            try encodeContainer.encode(testMode, forKey: .testMode)
        }
    }
}

public struct PutEvaluationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEvaluationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEvaluationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEvaluationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEvaluationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEvaluationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEvaluationsOutputError>
}

public struct PutEvaluationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutEvaluationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutEvaluationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutEvaluationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutEvaluationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutEvaluationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutEvaluationsOutputError>
}

///
public struct PutEvaluationsInput: Swift.Equatable {
    /// The assessments that the AWS Lambda function performs. Each
    /// 			evaluation identifies an AWS resource and indicates whether it
    /// 			complies with the AWS Config rule that invokes the AWS Lambda
    /// 			function.
    public let evaluations: [ConfigClientTypes.Evaluation]?
    /// An encrypted token that associates an evaluation with an AWS
    /// 			Config rule. Identifies the rule and the event that triggered the
    /// 			evaluation.
    /// This member is required.
    public let resultToken: Swift.String?
    /// Use this parameter to specify a test run for
    /// 				PutEvaluations. You can verify whether your AWS
    /// 			Lambda function will deliver evaluation results to AWS Config. No
    /// 			updates occur to your existing evaluations, and evaluation results
    /// 			are not sent to AWS Config.
    ///
    /// 		
    /// 			         When TestMode is true,
    /// 					PutEvaluations doesn't require a valid value
    /// 				for the ResultToken parameter, but the value cannot
    /// 				be null.
    /// 		
    public let testMode: Swift.Bool

    public init (
        evaluations: [ConfigClientTypes.Evaluation]? = nil,
        resultToken: Swift.String? = nil,
        testMode: Swift.Bool = false
    )
    {
        self.evaluations = evaluations
        self.resultToken = resultToken
        self.testMode = testMode
    }
}

struct PutEvaluationsInputBody: Swift.Equatable {
    public let evaluations: [ConfigClientTypes.Evaluation]?
    public let resultToken: Swift.String?
    public let testMode: Swift.Bool
}

extension PutEvaluationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluations = "Evaluations"
        case resultToken = "ResultToken"
        case testMode = "TestMode"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.Evaluation?].self, forKey: .evaluations)
        var evaluationsDecoded0:[ConfigClientTypes.Evaluation]? = nil
        if let evaluationsContainer = evaluationsContainer {
            evaluationsDecoded0 = [ConfigClientTypes.Evaluation]()
            for structure0 in evaluationsContainer {
                if let structure0 = structure0 {
                    evaluationsDecoded0?.append(structure0)
                }
            }
        }
        evaluations = evaluationsDecoded0
        let resultTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resultToken)
        resultToken = resultTokenDecoded
        let testModeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .testMode)
        testMode = testModeDecoded
    }
}

extension PutEvaluationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutEvaluationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidResultTokenException" : self = .invalidResultTokenException(try InvalidResultTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigRuleException" : self = .noSuchConfigRuleException(try NoSuchConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutEvaluationsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case invalidResultTokenException(InvalidResultTokenException)
    case noSuchConfigRuleException(NoSuchConfigRuleException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutEvaluationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutEvaluationsOutputResponse(failedEvaluations: \(Swift.String(describing: failedEvaluations)))"}
}

extension PutEvaluationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutEvaluationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedEvaluations = output.failedEvaluations
        } else {
            self.failedEvaluations = nil
        }
    }
}

///
public struct PutEvaluationsOutputResponse: Swift.Equatable {
    /// Requests that failed because of a client or server
    /// 			error.
    public let failedEvaluations: [ConfigClientTypes.Evaluation]?

    public init (
        failedEvaluations: [ConfigClientTypes.Evaluation]? = nil
    )
    {
        self.failedEvaluations = failedEvaluations
    }
}

struct PutEvaluationsOutputResponseBody: Swift.Equatable {
    public let failedEvaluations: [ConfigClientTypes.Evaluation]?
}

extension PutEvaluationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedEvaluations = "FailedEvaluations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedEvaluationsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.Evaluation?].self, forKey: .failedEvaluations)
        var failedEvaluationsDecoded0:[ConfigClientTypes.Evaluation]? = nil
        if let failedEvaluationsContainer = failedEvaluationsContainer {
            failedEvaluationsDecoded0 = [ConfigClientTypes.Evaluation]()
            for structure0 in failedEvaluationsContainer {
                if let structure0 = structure0 {
                    failedEvaluationsDecoded0?.append(structure0)
                }
            }
        }
        failedEvaluations = failedEvaluationsDecoded0
    }
}

public struct PutExternalEvaluationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutExternalEvaluationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutExternalEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutExternalEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutExternalEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutExternalEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutExternalEvaluationOutputError>
}

extension PutExternalEvaluationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutExternalEvaluationInput(configRuleName: \(Swift.String(describing: configRuleName)), externalEvaluation: \(Swift.String(describing: externalEvaluation)))"}
}

extension PutExternalEvaluationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case externalEvaluation = "ExternalEvaluation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let externalEvaluation = externalEvaluation {
            try encodeContainer.encode(externalEvaluation, forKey: .externalEvaluation)
        }
    }
}

public struct PutExternalEvaluationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutExternalEvaluationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutExternalEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutExternalEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutExternalEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutExternalEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutExternalEvaluationOutputError>
}

public struct PutExternalEvaluationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutExternalEvaluationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutExternalEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutExternalEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutExternalEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutExternalEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutExternalEvaluationOutputError>
}

public struct PutExternalEvaluationInput: Swift.Equatable {
    /// The name of the AWS Config rule.
    /// This member is required.
    public let configRuleName: Swift.String?
    /// An ExternalEvaluation object that provides details about compliance.
    /// This member is required.
    public let externalEvaluation: ConfigClientTypes.ExternalEvaluation?

    public init (
        configRuleName: Swift.String? = nil,
        externalEvaluation: ConfigClientTypes.ExternalEvaluation? = nil
    )
    {
        self.configRuleName = configRuleName
        self.externalEvaluation = externalEvaluation
    }
}

struct PutExternalEvaluationInputBody: Swift.Equatable {
    public let configRuleName: Swift.String?
    public let externalEvaluation: ConfigClientTypes.ExternalEvaluation?
}

extension PutExternalEvaluationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case externalEvaluation = "ExternalEvaluation"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let externalEvaluationDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ExternalEvaluation.self, forKey: .externalEvaluation)
        externalEvaluation = externalEvaluationDecoded
    }
}

extension PutExternalEvaluationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutExternalEvaluationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigRuleException" : self = .noSuchConfigRuleException(try NoSuchConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutExternalEvaluationOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchConfigRuleException(NoSuchConfigRuleException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutExternalEvaluationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutExternalEvaluationOutputResponse()"}
}

extension PutExternalEvaluationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutExternalEvaluationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutExternalEvaluationOutputResponseBody: Swift.Equatable {
}

extension PutExternalEvaluationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutOrganizationConfigRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutOrganizationConfigRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutOrganizationConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutOrganizationConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutOrganizationConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutOrganizationConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutOrganizationConfigRuleOutputError>
}

extension PutOrganizationConfigRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutOrganizationConfigRuleInput(excludedAccounts: \(Swift.String(describing: excludedAccounts)), organizationConfigRuleName: \(Swift.String(describing: organizationConfigRuleName)), organizationCustomRuleMetadata: \(Swift.String(describing: organizationCustomRuleMetadata)), organizationManagedRuleMetadata: \(Swift.String(describing: organizationManagedRuleMetadata)))"}
}

extension PutOrganizationConfigRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludedAccounts = "ExcludedAccounts"
        case organizationConfigRuleName = "OrganizationConfigRuleName"
        case organizationCustomRuleMetadata = "OrganizationCustomRuleMetadata"
        case organizationManagedRuleMetadata = "OrganizationManagedRuleMetadata"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excludedAccounts = excludedAccounts {
            var excludedAccountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedAccounts)
            for excludedaccounts0 in excludedAccounts {
                try excludedAccountsContainer.encode(excludedaccounts0)
            }
        }
        if let organizationConfigRuleName = organizationConfigRuleName {
            try encodeContainer.encode(organizationConfigRuleName, forKey: .organizationConfigRuleName)
        }
        if let organizationCustomRuleMetadata = organizationCustomRuleMetadata {
            try encodeContainer.encode(organizationCustomRuleMetadata, forKey: .organizationCustomRuleMetadata)
        }
        if let organizationManagedRuleMetadata = organizationManagedRuleMetadata {
            try encodeContainer.encode(organizationManagedRuleMetadata, forKey: .organizationManagedRuleMetadata)
        }
    }
}

public struct PutOrganizationConfigRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutOrganizationConfigRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutOrganizationConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutOrganizationConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutOrganizationConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutOrganizationConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutOrganizationConfigRuleOutputError>
}

public struct PutOrganizationConfigRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutOrganizationConfigRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutOrganizationConfigRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutOrganizationConfigRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutOrganizationConfigRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutOrganizationConfigRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutOrganizationConfigRuleOutputError>
}

public struct PutOrganizationConfigRuleInput: Swift.Equatable {
    /// A comma-separated list of accounts that you want to exclude from an organization config rule.
    public let excludedAccounts: [Swift.String]?
    /// The name that you assign to an organization config rule.
    /// This member is required.
    public let organizationConfigRuleName: Swift.String?
    /// An OrganizationCustomRuleMetadata object.
    public let organizationCustomRuleMetadata: ConfigClientTypes.OrganizationCustomRuleMetadata?
    /// An OrganizationManagedRuleMetadata object.
    public let organizationManagedRuleMetadata: ConfigClientTypes.OrganizationManagedRuleMetadata?

    public init (
        excludedAccounts: [Swift.String]? = nil,
        organizationConfigRuleName: Swift.String? = nil,
        organizationCustomRuleMetadata: ConfigClientTypes.OrganizationCustomRuleMetadata? = nil,
        organizationManagedRuleMetadata: ConfigClientTypes.OrganizationManagedRuleMetadata? = nil
    )
    {
        self.excludedAccounts = excludedAccounts
        self.organizationConfigRuleName = organizationConfigRuleName
        self.organizationCustomRuleMetadata = organizationCustomRuleMetadata
        self.organizationManagedRuleMetadata = organizationManagedRuleMetadata
    }
}

struct PutOrganizationConfigRuleInputBody: Swift.Equatable {
    public let organizationConfigRuleName: Swift.String?
    public let organizationManagedRuleMetadata: ConfigClientTypes.OrganizationManagedRuleMetadata?
    public let organizationCustomRuleMetadata: ConfigClientTypes.OrganizationCustomRuleMetadata?
    public let excludedAccounts: [Swift.String]?
}

extension PutOrganizationConfigRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludedAccounts = "ExcludedAccounts"
        case organizationConfigRuleName = "OrganizationConfigRuleName"
        case organizationCustomRuleMetadata = "OrganizationCustomRuleMetadata"
        case organizationManagedRuleMetadata = "OrganizationManagedRuleMetadata"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConfigRuleName)
        organizationConfigRuleName = organizationConfigRuleNameDecoded
        let organizationManagedRuleMetadataDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationManagedRuleMetadata.self, forKey: .organizationManagedRuleMetadata)
        organizationManagedRuleMetadata = organizationManagedRuleMetadataDecoded
        let organizationCustomRuleMetadataDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.OrganizationCustomRuleMetadata.self, forKey: .organizationCustomRuleMetadata)
        organizationCustomRuleMetadata = organizationCustomRuleMetadataDecoded
        let excludedAccountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludedAccounts)
        var excludedAccountsDecoded0:[Swift.String]? = nil
        if let excludedAccountsContainer = excludedAccountsContainer {
            excludedAccountsDecoded0 = [Swift.String]()
            for string0 in excludedAccountsContainer {
                if let string0 = string0 {
                    excludedAccountsDecoded0?.append(string0)
                }
            }
        }
        excludedAccounts = excludedAccountsDecoded0
    }
}

extension PutOrganizationConfigRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutOrganizationConfigRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaxNumberOfOrganizationConfigRulesExceededException" : self = .maxNumberOfOrganizationConfigRulesExceededException(try MaxNumberOfOrganizationConfigRulesExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoAvailableOrganizationException" : self = .noAvailableOrganizationException(try NoAvailableOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAccessDeniedException" : self = .organizationAccessDeniedException(try OrganizationAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAllFeaturesNotEnabledException" : self = .organizationAllFeaturesNotEnabledException(try OrganizationAllFeaturesNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutOrganizationConfigRuleOutputError: Swift.Error, Swift.Equatable {
    case insufficientPermissionsException(InsufficientPermissionsException)
    case invalidParameterValueException(InvalidParameterValueException)
    case maxNumberOfOrganizationConfigRulesExceededException(MaxNumberOfOrganizationConfigRulesExceededException)
    case noAvailableOrganizationException(NoAvailableOrganizationException)
    case organizationAccessDeniedException(OrganizationAccessDeniedException)
    case organizationAllFeaturesNotEnabledException(OrganizationAllFeaturesNotEnabledException)
    case resourceInUseException(ResourceInUseException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutOrganizationConfigRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutOrganizationConfigRuleOutputResponse(organizationConfigRuleArn: \(Swift.String(describing: organizationConfigRuleArn)))"}
}

extension PutOrganizationConfigRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutOrganizationConfigRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.organizationConfigRuleArn = output.organizationConfigRuleArn
        } else {
            self.organizationConfigRuleArn = nil
        }
    }
}

public struct PutOrganizationConfigRuleOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of an organization config rule.
    public let organizationConfigRuleArn: Swift.String?

    public init (
        organizationConfigRuleArn: Swift.String? = nil
    )
    {
        self.organizationConfigRuleArn = organizationConfigRuleArn
    }
}

struct PutOrganizationConfigRuleOutputResponseBody: Swift.Equatable {
    public let organizationConfigRuleArn: Swift.String?
}

extension PutOrganizationConfigRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationConfigRuleArn = "OrganizationConfigRuleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConfigRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConfigRuleArn)
        organizationConfigRuleArn = organizationConfigRuleArnDecoded
    }
}

public struct PutOrganizationConformancePackInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutOrganizationConformancePackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutOrganizationConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutOrganizationConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutOrganizationConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutOrganizationConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutOrganizationConformancePackOutputError>
}

extension PutOrganizationConformancePackInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutOrganizationConformancePackInput(conformancePackInputParameters: \(Swift.String(describing: conformancePackInputParameters)), deliveryS3Bucket: \(Swift.String(describing: deliveryS3Bucket)), deliveryS3KeyPrefix: \(Swift.String(describing: deliveryS3KeyPrefix)), excludedAccounts: \(Swift.String(describing: excludedAccounts)), organizationConformancePackName: \(Swift.String(describing: organizationConformancePackName)), templateBody: \(Swift.String(describing: templateBody)), templateS3Uri: \(Swift.String(describing: templateS3Uri)))"}
}

extension PutOrganizationConformancePackInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackInputParameters = "ConformancePackInputParameters"
        case deliveryS3Bucket = "DeliveryS3Bucket"
        case deliveryS3KeyPrefix = "DeliveryS3KeyPrefix"
        case excludedAccounts = "ExcludedAccounts"
        case organizationConformancePackName = "OrganizationConformancePackName"
        case templateBody = "TemplateBody"
        case templateS3Uri = "TemplateS3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackInputParameters = conformancePackInputParameters {
            var conformancePackInputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conformancePackInputParameters)
            for conformancepackinputparameters0 in conformancePackInputParameters {
                try conformancePackInputParametersContainer.encode(conformancepackinputparameters0)
            }
        }
        if let deliveryS3Bucket = deliveryS3Bucket {
            try encodeContainer.encode(deliveryS3Bucket, forKey: .deliveryS3Bucket)
        }
        if let deliveryS3KeyPrefix = deliveryS3KeyPrefix {
            try encodeContainer.encode(deliveryS3KeyPrefix, forKey: .deliveryS3KeyPrefix)
        }
        if let excludedAccounts = excludedAccounts {
            var excludedAccountsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedAccounts)
            for excludedaccounts0 in excludedAccounts {
                try excludedAccountsContainer.encode(excludedaccounts0)
            }
        }
        if let organizationConformancePackName = organizationConformancePackName {
            try encodeContainer.encode(organizationConformancePackName, forKey: .organizationConformancePackName)
        }
        if let templateBody = templateBody {
            try encodeContainer.encode(templateBody, forKey: .templateBody)
        }
        if let templateS3Uri = templateS3Uri {
            try encodeContainer.encode(templateS3Uri, forKey: .templateS3Uri)
        }
    }
}

public struct PutOrganizationConformancePackInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutOrganizationConformancePackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutOrganizationConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutOrganizationConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutOrganizationConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutOrganizationConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutOrganizationConformancePackOutputError>
}

public struct PutOrganizationConformancePackInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutOrganizationConformancePackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutOrganizationConformancePackInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutOrganizationConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutOrganizationConformancePackInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutOrganizationConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutOrganizationConformancePackOutputError>
}

public struct PutOrganizationConformancePackInput: Swift.Equatable {
    /// A list of ConformancePackInputParameter objects.
    public let conformancePackInputParameters: [ConfigClientTypes.ConformancePackInputParameter]?
    /// Amazon S3 bucket where AWS Config stores conformance pack templates.
    /// 		
    ///             This field is optional. If used, it must be prefixed with awsconfigconforms.
    ///
    public let deliveryS3Bucket: Swift.String?
    /// The prefix for the Amazon S3 bucket.
    /// 		
    ///             This field is optional.
    ///
    public let deliveryS3KeyPrefix: Swift.String?
    /// A list of AWS accounts to be excluded from an organization conformance pack while deploying a conformance pack.
    public let excludedAccounts: [Swift.String]?
    /// Name of the organization conformance pack you want to create.
    /// This member is required.
    public let organizationConformancePackName: Swift.String?
    /// A string containing full conformance pack template body. Structure containing the template body
    /// 			with a minimum length of 1 byte and a maximum length of 51,200 bytes.
    public let templateBody: Swift.String?
    /// Location of file containing the template body. The uri must point to the conformance pack template
    /// 			(max size: 300 KB).
    /// 		
    ///             You must have access to read Amazon S3 bucket.
    ///
    public let templateS3Uri: Swift.String?

    public init (
        conformancePackInputParameters: [ConfigClientTypes.ConformancePackInputParameter]? = nil,
        deliveryS3Bucket: Swift.String? = nil,
        deliveryS3KeyPrefix: Swift.String? = nil,
        excludedAccounts: [Swift.String]? = nil,
        organizationConformancePackName: Swift.String? = nil,
        templateBody: Swift.String? = nil,
        templateS3Uri: Swift.String? = nil
    )
    {
        self.conformancePackInputParameters = conformancePackInputParameters
        self.deliveryS3Bucket = deliveryS3Bucket
        self.deliveryS3KeyPrefix = deliveryS3KeyPrefix
        self.excludedAccounts = excludedAccounts
        self.organizationConformancePackName = organizationConformancePackName
        self.templateBody = templateBody
        self.templateS3Uri = templateS3Uri
    }
}

struct PutOrganizationConformancePackInputBody: Swift.Equatable {
    public let organizationConformancePackName: Swift.String?
    public let templateS3Uri: Swift.String?
    public let templateBody: Swift.String?
    public let deliveryS3Bucket: Swift.String?
    public let deliveryS3KeyPrefix: Swift.String?
    public let conformancePackInputParameters: [ConfigClientTypes.ConformancePackInputParameter]?
    public let excludedAccounts: [Swift.String]?
}

extension PutOrganizationConformancePackInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case conformancePackInputParameters = "ConformancePackInputParameters"
        case deliveryS3Bucket = "DeliveryS3Bucket"
        case deliveryS3KeyPrefix = "DeliveryS3KeyPrefix"
        case excludedAccounts = "ExcludedAccounts"
        case organizationConformancePackName = "OrganizationConformancePackName"
        case templateBody = "TemplateBody"
        case templateS3Uri = "TemplateS3Uri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConformancePackName)
        organizationConformancePackName = organizationConformancePackNameDecoded
        let templateS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateS3Uri)
        templateS3Uri = templateS3UriDecoded
        let templateBodyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateBody)
        templateBody = templateBodyDecoded
        let deliveryS3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryS3Bucket)
        deliveryS3Bucket = deliveryS3BucketDecoded
        let deliveryS3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryS3KeyPrefix)
        deliveryS3KeyPrefix = deliveryS3KeyPrefixDecoded
        let conformancePackInputParametersContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ConformancePackInputParameter?].self, forKey: .conformancePackInputParameters)
        var conformancePackInputParametersDecoded0:[ConfigClientTypes.ConformancePackInputParameter]? = nil
        if let conformancePackInputParametersContainer = conformancePackInputParametersContainer {
            conformancePackInputParametersDecoded0 = [ConfigClientTypes.ConformancePackInputParameter]()
            for structure0 in conformancePackInputParametersContainer {
                if let structure0 = structure0 {
                    conformancePackInputParametersDecoded0?.append(structure0)
                }
            }
        }
        conformancePackInputParameters = conformancePackInputParametersDecoded0
        let excludedAccountsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .excludedAccounts)
        var excludedAccountsDecoded0:[Swift.String]? = nil
        if let excludedAccountsContainer = excludedAccountsContainer {
            excludedAccountsDecoded0 = [Swift.String]()
            for string0 in excludedAccountsContainer {
                if let string0 = string0 {
                    excludedAccountsDecoded0?.append(string0)
                }
            }
        }
        excludedAccounts = excludedAccountsDecoded0
    }
}

extension PutOrganizationConformancePackOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutOrganizationConformancePackOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaxNumberOfOrganizationConformancePacksExceededException" : self = .maxNumberOfOrganizationConformancePacksExceededException(try MaxNumberOfOrganizationConformancePacksExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoAvailableOrganizationException" : self = .noAvailableOrganizationException(try NoAvailableOrganizationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAccessDeniedException" : self = .organizationAccessDeniedException(try OrganizationAccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationAllFeaturesNotEnabledException" : self = .organizationAllFeaturesNotEnabledException(try OrganizationAllFeaturesNotEnabledException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OrganizationConformancePackTemplateValidationException" : self = .organizationConformancePackTemplateValidationException(try OrganizationConformancePackTemplateValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutOrganizationConformancePackOutputError: Swift.Error, Swift.Equatable {
    case insufficientPermissionsException(InsufficientPermissionsException)
    case maxNumberOfOrganizationConformancePacksExceededException(MaxNumberOfOrganizationConformancePacksExceededException)
    case noAvailableOrganizationException(NoAvailableOrganizationException)
    case organizationAccessDeniedException(OrganizationAccessDeniedException)
    case organizationAllFeaturesNotEnabledException(OrganizationAllFeaturesNotEnabledException)
    case organizationConformancePackTemplateValidationException(OrganizationConformancePackTemplateValidationException)
    case resourceInUseException(ResourceInUseException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutOrganizationConformancePackOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutOrganizationConformancePackOutputResponse(organizationConformancePackArn: \(Swift.String(describing: organizationConformancePackArn)))"}
}

extension PutOrganizationConformancePackOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutOrganizationConformancePackOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.organizationConformancePackArn = output.organizationConformancePackArn
        } else {
            self.organizationConformancePackArn = nil
        }
    }
}

public struct PutOrganizationConformancePackOutputResponse: Swift.Equatable {
    /// ARN of the organization conformance pack.
    public let organizationConformancePackArn: Swift.String?

    public init (
        organizationConformancePackArn: Swift.String? = nil
    )
    {
        self.organizationConformancePackArn = organizationConformancePackArn
    }
}

struct PutOrganizationConformancePackOutputResponseBody: Swift.Equatable {
    public let organizationConformancePackArn: Swift.String?
}

extension PutOrganizationConformancePackOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case organizationConformancePackArn = "OrganizationConformancePackArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let organizationConformancePackArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .organizationConformancePackArn)
        organizationConformancePackArn = organizationConformancePackArnDecoded
    }
}

public struct PutRemediationConfigurationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutRemediationConfigurationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutRemediationConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutRemediationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutRemediationConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutRemediationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutRemediationConfigurationsOutputError>
}

extension PutRemediationConfigurationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutRemediationConfigurationsInput(remediationConfigurations: \(Swift.String(describing: remediationConfigurations)))"}
}

extension PutRemediationConfigurationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case remediationConfigurations = "RemediationConfigurations"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let remediationConfigurations = remediationConfigurations {
            var remediationConfigurationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .remediationConfigurations)
            for remediationconfigurations0 in remediationConfigurations {
                try remediationConfigurationsContainer.encode(remediationconfigurations0)
            }
        }
    }
}

public struct PutRemediationConfigurationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutRemediationConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutRemediationConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutRemediationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutRemediationConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutRemediationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutRemediationConfigurationsOutputError>
}

public struct PutRemediationConfigurationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutRemediationConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutRemediationConfigurationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutRemediationConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutRemediationConfigurationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutRemediationConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutRemediationConfigurationsOutputError>
}

public struct PutRemediationConfigurationsInput: Swift.Equatable {
    /// A list of remediation configuration objects.
    /// This member is required.
    public let remediationConfigurations: [ConfigClientTypes.RemediationConfiguration]?

    public init (
        remediationConfigurations: [ConfigClientTypes.RemediationConfiguration]? = nil
    )
    {
        self.remediationConfigurations = remediationConfigurations
    }
}

struct PutRemediationConfigurationsInputBody: Swift.Equatable {
    public let remediationConfigurations: [ConfigClientTypes.RemediationConfiguration]?
}

extension PutRemediationConfigurationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case remediationConfigurations = "RemediationConfigurations"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let remediationConfigurationsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationConfiguration?].self, forKey: .remediationConfigurations)
        var remediationConfigurationsDecoded0:[ConfigClientTypes.RemediationConfiguration]? = nil
        if let remediationConfigurationsContainer = remediationConfigurationsContainer {
            remediationConfigurationsDecoded0 = [ConfigClientTypes.RemediationConfiguration]()
            for structure0 in remediationConfigurationsContainer {
                if let structure0 = structure0 {
                    remediationConfigurationsDecoded0?.append(structure0)
                }
            }
        }
        remediationConfigurations = remediationConfigurationsDecoded0
    }
}

extension PutRemediationConfigurationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutRemediationConfigurationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutRemediationConfigurationsOutputError: Swift.Error, Swift.Equatable {
    case insufficientPermissionsException(InsufficientPermissionsException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRemediationConfigurationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutRemediationConfigurationsOutputResponse(failedBatches: \(Swift.String(describing: failedBatches)))"}
}

extension PutRemediationConfigurationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutRemediationConfigurationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedBatches = output.failedBatches
        } else {
            self.failedBatches = nil
        }
    }
}

public struct PutRemediationConfigurationsOutputResponse: Swift.Equatable {
    /// Returns a list of failed remediation batch objects.
    public let failedBatches: [ConfigClientTypes.FailedRemediationBatch]?

    public init (
        failedBatches: [ConfigClientTypes.FailedRemediationBatch]? = nil
    )
    {
        self.failedBatches = failedBatches
    }
}

struct PutRemediationConfigurationsOutputResponseBody: Swift.Equatable {
    public let failedBatches: [ConfigClientTypes.FailedRemediationBatch]?
}

extension PutRemediationConfigurationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedBatches = "FailedBatches"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedBatchesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.FailedRemediationBatch?].self, forKey: .failedBatches)
        var failedBatchesDecoded0:[ConfigClientTypes.FailedRemediationBatch]? = nil
        if let failedBatchesContainer = failedBatchesContainer {
            failedBatchesDecoded0 = [ConfigClientTypes.FailedRemediationBatch]()
            for structure0 in failedBatchesContainer {
                if let structure0 = structure0 {
                    failedBatchesDecoded0?.append(structure0)
                }
            }
        }
        failedBatches = failedBatchesDecoded0
    }
}

public struct PutRemediationExceptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutRemediationExceptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutRemediationExceptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutRemediationExceptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutRemediationExceptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutRemediationExceptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutRemediationExceptionsOutputError>
}

extension PutRemediationExceptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutRemediationExceptionsInput(configRuleName: \(Swift.String(describing: configRuleName)), expirationTime: \(Swift.String(describing: expirationTime)), message: \(Swift.String(describing: message)), resourceKeys: \(Swift.String(describing: resourceKeys)))"}
}

extension PutRemediationExceptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case expirationTime = "ExpirationTime"
        case message = "Message"
        case resourceKeys = "ResourceKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let expirationTime = expirationTime {
            try encodeContainer.encode(expirationTime.timeIntervalSince1970, forKey: .expirationTime)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let resourceKeys = resourceKeys {
            var resourceKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceKeys)
            for remediationexceptionresourcekeys0 in resourceKeys {
                try resourceKeysContainer.encode(remediationexceptionresourcekeys0)
            }
        }
    }
}

public struct PutRemediationExceptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutRemediationExceptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutRemediationExceptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutRemediationExceptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutRemediationExceptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutRemediationExceptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutRemediationExceptionsOutputError>
}

public struct PutRemediationExceptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutRemediationExceptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutRemediationExceptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutRemediationExceptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutRemediationExceptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutRemediationExceptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutRemediationExceptionsOutputError>
}

public struct PutRemediationExceptionsInput: Swift.Equatable {
    /// The name of the AWS Config rule for which you want to create remediation exception.
    /// This member is required.
    public let configRuleName: Swift.String?
    /// The exception is automatically deleted after the expiration date.
    public let expirationTime: ClientRuntime.Date?
    /// The message contains an explanation of the exception.
    public let message: Swift.String?
    /// An exception list of resource exception keys to be processed with the current request. AWS Config adds exception for each resource key. For example, AWS Config adds 3 exceptions for 3 resource keys.
    /// This member is required.
    public let resourceKeys: [ConfigClientTypes.RemediationExceptionResourceKey]?

    public init (
        configRuleName: Swift.String? = nil,
        expirationTime: ClientRuntime.Date? = nil,
        message: Swift.String? = nil,
        resourceKeys: [ConfigClientTypes.RemediationExceptionResourceKey]? = nil
    )
    {
        self.configRuleName = configRuleName
        self.expirationTime = expirationTime
        self.message = message
        self.resourceKeys = resourceKeys
    }
}

struct PutRemediationExceptionsInputBody: Swift.Equatable {
    public let configRuleName: Swift.String?
    public let resourceKeys: [ConfigClientTypes.RemediationExceptionResourceKey]?
    public let message: Swift.String?
    public let expirationTime: ClientRuntime.Date?
}

extension PutRemediationExceptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case expirationTime = "ExpirationTime"
        case message = "Message"
        case resourceKeys = "ResourceKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let resourceKeysContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationExceptionResourceKey?].self, forKey: .resourceKeys)
        var resourceKeysDecoded0:[ConfigClientTypes.RemediationExceptionResourceKey]? = nil
        if let resourceKeysContainer = resourceKeysContainer {
            resourceKeysDecoded0 = [ConfigClientTypes.RemediationExceptionResourceKey]()
            for structure0 in resourceKeysContainer {
                if let structure0 = structure0 {
                    resourceKeysDecoded0?.append(structure0)
                }
            }
        }
        resourceKeys = resourceKeysDecoded0
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let expirationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationTime)
        expirationTime = expirationTimeDecoded
    }
}

extension PutRemediationExceptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutRemediationExceptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutRemediationExceptionsOutputError: Swift.Error, Swift.Equatable {
    case insufficientPermissionsException(InsufficientPermissionsException)
    case invalidParameterValueException(InvalidParameterValueException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRemediationExceptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutRemediationExceptionsOutputResponse(failedBatches: \(Swift.String(describing: failedBatches)))"}
}

extension PutRemediationExceptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutRemediationExceptionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedBatches = output.failedBatches
        } else {
            self.failedBatches = nil
        }
    }
}

public struct PutRemediationExceptionsOutputResponse: Swift.Equatable {
    /// Returns a list of failed remediation exceptions batch objects. Each object in the batch consists of a list of failed items and failure messages.
    public let failedBatches: [ConfigClientTypes.FailedRemediationExceptionBatch]?

    public init (
        failedBatches: [ConfigClientTypes.FailedRemediationExceptionBatch]? = nil
    )
    {
        self.failedBatches = failedBatches
    }
}

struct PutRemediationExceptionsOutputResponseBody: Swift.Equatable {
    public let failedBatches: [ConfigClientTypes.FailedRemediationExceptionBatch]?
}

extension PutRemediationExceptionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedBatches = "FailedBatches"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedBatchesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.FailedRemediationExceptionBatch?].self, forKey: .failedBatches)
        var failedBatchesDecoded0:[ConfigClientTypes.FailedRemediationExceptionBatch]? = nil
        if let failedBatchesContainer = failedBatchesContainer {
            failedBatchesDecoded0 = [ConfigClientTypes.FailedRemediationExceptionBatch]()
            for structure0 in failedBatchesContainer {
                if let structure0 = structure0 {
                    failedBatchesDecoded0?.append(structure0)
                }
            }
        }
        failedBatches = failedBatchesDecoded0
    }
}

public struct PutResourceConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutResourceConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutResourceConfigOutputError>
}

extension PutResourceConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutResourceConfigInput(configuration: \(Swift.String(describing: configuration)), resourceId: \(Swift.String(describing: resourceId)), resourceName: \(Swift.String(describing: resourceName)), resourceType: \(Swift.String(describing: resourceType)), schemaVersionId: \(Swift.String(describing: schemaVersionId)), tags: \(Swift.String(describing: tags)))"}
}

extension PutResourceConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case resourceId = "ResourceId"
        case resourceName = "ResourceName"
        case resourceType = "ResourceType"
        case schemaVersionId = "SchemaVersionId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let schemaVersionId = schemaVersionId {
            try encodeContainer.encode(schemaVersionId, forKey: .schemaVersionId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct PutResourceConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutResourceConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutResourceConfigOutputError>
}

public struct PutResourceConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutResourceConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutResourceConfigOutputError>
}

public struct PutResourceConfigInput: Swift.Equatable {
    /// The configuration object of the resource in valid JSON format. It must match the schema registered with AWS CloudFormation.
    /// 		
    ///             The configuration JSON must not exceed 64 KB.
    ///
    /// This member is required.
    public let configuration: Swift.String?
    /// Unique identifier of the resource.
    /// This member is required.
    public let resourceId: Swift.String?
    /// Name of the resource.
    public let resourceName: Swift.String?
    /// The type of the resource. The custom resource type must be registered with AWS CloudFormation.
    /// 		
    ///             You cannot use the organization names “aws”, “amzn”, “amazon”, “alexa”, “custom” with custom resource types. It is the first part of the ResourceType up to the first ::.
    ///
    /// This member is required.
    public let resourceType: Swift.String?
    /// Version of the schema registered for the ResourceType in AWS CloudFormation.
    /// This member is required.
    public let schemaVersionId: Swift.String?
    /// Tags associated with the resource.
    public let tags: [Swift.String:Swift.String]?

    public init (
        configuration: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceName: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        schemaVersionId: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.configuration = configuration
        self.resourceId = resourceId
        self.resourceName = resourceName
        self.resourceType = resourceType
        self.schemaVersionId = schemaVersionId
        self.tags = tags
    }
}

struct PutResourceConfigInputBody: Swift.Equatable {
    public let resourceType: Swift.String?
    public let schemaVersionId: Swift.String?
    public let resourceId: Swift.String?
    public let resourceName: Swift.String?
    public let configuration: Swift.String?
    public let tags: [Swift.String:Swift.String]?
}

extension PutResourceConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration = "Configuration"
        case resourceId = "ResourceId"
        case resourceName = "ResourceName"
        case resourceType = "ResourceType"
        case schemaVersionId = "SchemaVersionId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let schemaVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersionId)
        schemaVersionId = schemaVersionIdDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let configurationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configuration)
        configuration = configurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in tagsContainer {
                if let value0 = value0 {
                    tagsDecoded0?[key0] = value0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutResourceConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutResourceConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaxActiveResourcesExceededException" : self = .maxActiveResourcesExceededException(try MaxActiveResourcesExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoRunningConfigurationRecorderException" : self = .noRunningConfigurationRecorderException(try NoRunningConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutResourceConfigOutputError: Swift.Error, Swift.Equatable {
    case insufficientPermissionsException(InsufficientPermissionsException)
    case maxActiveResourcesExceededException(MaxActiveResourcesExceededException)
    case noRunningConfigurationRecorderException(NoRunningConfigurationRecorderException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutResourceConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutResourceConfigOutputResponse()"}
}

extension PutResourceConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutResourceConfigOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutResourceConfigOutputResponseBody: Swift.Equatable {
}

extension PutResourceConfigOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct PutRetentionConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutRetentionConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutRetentionConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutRetentionConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutRetentionConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutRetentionConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutRetentionConfigurationOutputError>
}

extension PutRetentionConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutRetentionConfigurationInput(retentionPeriodInDays: \(Swift.String(describing: retentionPeriodInDays)))"}
}

extension PutRetentionConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retentionPeriodInDays = "RetentionPeriodInDays"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if retentionPeriodInDays != 0 {
            try encodeContainer.encode(retentionPeriodInDays, forKey: .retentionPeriodInDays)
        }
    }
}

public struct PutRetentionConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutRetentionConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutRetentionConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutRetentionConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutRetentionConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutRetentionConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutRetentionConfigurationOutputError>
}

public struct PutRetentionConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutRetentionConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutRetentionConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutRetentionConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutRetentionConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutRetentionConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutRetentionConfigurationOutputError>
}

public struct PutRetentionConfigurationInput: Swift.Equatable {
    /// Number of days AWS Config stores your historical
    /// 			information.
    /// 		
    /// 			         Currently, only applicable to the configuration item
    /// 				history.
    /// 		
    /// This member is required.
    public let retentionPeriodInDays: Swift.Int

    public init (
        retentionPeriodInDays: Swift.Int = 0
    )
    {
        self.retentionPeriodInDays = retentionPeriodInDays
    }
}

struct PutRetentionConfigurationInputBody: Swift.Equatable {
    public let retentionPeriodInDays: Swift.Int
}

extension PutRetentionConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retentionPeriodInDays = "RetentionPeriodInDays"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retentionPeriodInDaysDecoded = try containerValues.decode(Swift.Int.self, forKey: .retentionPeriodInDays)
        retentionPeriodInDays = retentionPeriodInDaysDecoded
    }
}

extension PutRetentionConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutRetentionConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MaxNumberOfRetentionConfigurationsExceededException" : self = .maxNumberOfRetentionConfigurationsExceededException(try MaxNumberOfRetentionConfigurationsExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutRetentionConfigurationOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case maxNumberOfRetentionConfigurationsExceededException(MaxNumberOfRetentionConfigurationsExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRetentionConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutRetentionConfigurationOutputResponse(retentionConfiguration: \(Swift.String(describing: retentionConfiguration)))"}
}

extension PutRetentionConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutRetentionConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.retentionConfiguration = output.retentionConfiguration
        } else {
            self.retentionConfiguration = nil
        }
    }
}

public struct PutRetentionConfigurationOutputResponse: Swift.Equatable {
    /// Returns a retention configuration object.
    public let retentionConfiguration: ConfigClientTypes.RetentionConfiguration?

    public init (
        retentionConfiguration: ConfigClientTypes.RetentionConfiguration? = nil
    )
    {
        self.retentionConfiguration = retentionConfiguration
    }
}

struct PutRetentionConfigurationOutputResponseBody: Swift.Equatable {
    public let retentionConfiguration: ConfigClientTypes.RetentionConfiguration?
}

extension PutRetentionConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case retentionConfiguration = "RetentionConfiguration"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let retentionConfigurationDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.RetentionConfiguration.self, forKey: .retentionConfiguration)
        retentionConfiguration = retentionConfigurationDecoded
    }
}

public struct PutStoredQueryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutStoredQueryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutStoredQueryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutStoredQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutStoredQueryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutStoredQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutStoredQueryOutputError>
}

extension PutStoredQueryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutStoredQueryInput(storedQuery: \(Swift.String(describing: storedQuery)), tags: \(Swift.String(describing: tags)))"}
}

extension PutStoredQueryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storedQuery = "StoredQuery"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let storedQuery = storedQuery {
            try encodeContainer.encode(storedQuery, forKey: .storedQuery)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tagslist0 in tags {
                try tagsContainer.encode(tagslist0)
            }
        }
    }
}

public struct PutStoredQueryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutStoredQueryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutStoredQueryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutStoredQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutStoredQueryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutStoredQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutStoredQueryOutputError>
}

public struct PutStoredQueryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutStoredQueryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutStoredQueryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutStoredQueryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutStoredQueryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutStoredQueryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutStoredQueryOutputError>
}

public struct PutStoredQueryInput: Swift.Equatable {
    /// A list of StoredQuery objects.
    /// 			The mandatory fields are QueryName and Expression.
    /// 		
    ///             When you are creating a query, you must provide a query name and an expression.
    /// 			When you are updating a query, you must provide a query name but updating the description is optional.
    ///
    /// This member is required.
    public let storedQuery: ConfigClientTypes.StoredQuery?
    /// A list of Tags object.
    public let tags: [ConfigClientTypes.Tag]?

    public init (
        storedQuery: ConfigClientTypes.StoredQuery? = nil,
        tags: [ConfigClientTypes.Tag]? = nil
    )
    {
        self.storedQuery = storedQuery
        self.tags = tags
    }
}

struct PutStoredQueryInputBody: Swift.Equatable {
    public let storedQuery: ConfigClientTypes.StoredQuery?
    public let tags: [ConfigClientTypes.Tag]?
}

extension PutStoredQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storedQuery = "StoredQuery"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storedQueryDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.StoredQuery.self, forKey: .storedQuery)
        storedQuery = storedQueryDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ConfigClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ConfigClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutStoredQueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutStoredQueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceConcurrentModificationException" : self = .resourceConcurrentModificationException(try ResourceConcurrentModificationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutStoredQueryOutputError: Swift.Error, Swift.Equatable {
    case resourceConcurrentModificationException(ResourceConcurrentModificationException)
    case tooManyTagsException(TooManyTagsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutStoredQueryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutStoredQueryOutputResponse(queryArn: \(Swift.String(describing: queryArn)))"}
}

extension PutStoredQueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutStoredQueryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.queryArn = output.queryArn
        } else {
            self.queryArn = nil
        }
    }
}

public struct PutStoredQueryOutputResponse: Swift.Equatable {
    /// Amazon Resource Name (ARN) of the query.
    /// 			For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.
    public let queryArn: Swift.String?

    public init (
        queryArn: Swift.String? = nil
    )
    {
        self.queryArn = queryArn
    }
}

struct PutStoredQueryOutputResponseBody: Swift.Equatable {
    public let queryArn: Swift.String?
}

extension PutStoredQueryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryArn = "QueryArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryArn)
        queryArn = queryArnDecoded
    }
}

extension ConfigClientTypes.QueryInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case selectFields = "SelectFields"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let selectFields = selectFields {
            var selectFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectFields)
            for fieldinfolist0 in selectFields {
                try selectFieldsContainer.encode(fieldinfolist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let selectFieldsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.FieldInfo?].self, forKey: .selectFields)
        var selectFieldsDecoded0:[ConfigClientTypes.FieldInfo]? = nil
        if let selectFieldsContainer = selectFieldsContainer {
            selectFieldsDecoded0 = [ConfigClientTypes.FieldInfo]()
            for structure0 in selectFieldsContainer {
                if let structure0 = structure0 {
                    selectFieldsDecoded0?.append(structure0)
                }
            }
        }
        selectFields = selectFieldsDecoded0
    }
}

extension ConfigClientTypes.QueryInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueryInfo(selectFields: \(Swift.String(describing: selectFields)))"}
}

extension ConfigClientTypes {
    /// Details about the query.
    public struct QueryInfo: Swift.Equatable {
        /// Returns a FieldInfo object.
        public let selectFields: [ConfigClientTypes.FieldInfo]?

        public init (
            selectFields: [ConfigClientTypes.FieldInfo]? = nil
        )
        {
            self.selectFields = selectFields
        }
    }

}

extension ConfigClientTypes {
    public enum RecorderStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failure
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [RecorderStatus] {
            return [
                .failure,
                .pending,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failure: return "Failure"
            case .pending: return "Pending"
            case .success: return "Success"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecorderStatus(rawValue: rawValue) ?? RecorderStatus.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.RecordingGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allSupported
        case includeGlobalResourceTypes
        case resourceTypes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allSupported != false {
            try encodeContainer.encode(allSupported, forKey: .allSupported)
        }
        if includeGlobalResourceTypes != false {
            try encodeContainer.encode(includeGlobalResourceTypes, forKey: .includeGlobalResourceTypes)
        }
        if let resourceTypes = resourceTypes {
            var resourceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTypes)
            for resourcetypelist0 in resourceTypes {
                try resourceTypesContainer.encode(resourcetypelist0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allSupportedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allSupported)
        allSupported = allSupportedDecoded
        let includeGlobalResourceTypesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeGlobalResourceTypes)
        includeGlobalResourceTypes = includeGlobalResourceTypesDecoded
        let resourceTypesContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ResourceType?].self, forKey: .resourceTypes)
        var resourceTypesDecoded0:[ConfigClientTypes.ResourceType]? = nil
        if let resourceTypesContainer = resourceTypesContainer {
            resourceTypesDecoded0 = [ConfigClientTypes.ResourceType]()
            for string0 in resourceTypesContainer {
                if let string0 = string0 {
                    resourceTypesDecoded0?.append(string0)
                }
            }
        }
        resourceTypes = resourceTypesDecoded0
    }
}

extension ConfigClientTypes.RecordingGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecordingGroup(allSupported: \(Swift.String(describing: allSupported)), includeGlobalResourceTypes: \(Swift.String(describing: includeGlobalResourceTypes)), resourceTypes: \(Swift.String(describing: resourceTypes)))"}
}

extension ConfigClientTypes {
    /// Specifies the types of AWS resource for which AWS Config
    /// 			records configuration changes.
    /// 		       In the recording group, you specify whether all supported types
    /// 			or specific types of resources are recorded.
    /// 		       By default, AWS Config records configuration changes for all
    /// 			supported types of regional resources that AWS Config discovers in
    /// 			the region in which it is running. Regional resources are tied to a
    /// 			region and can be used only in that region. Examples of regional
    /// 			resources are EC2 instances and EBS volumes.
    /// 		       You can also have AWS Config record configuration changes for
    /// 			supported types of global resources (for example, IAM resources).
    /// 			Global resources are not tied to an individual region and can be
    /// 			used in all regions.
    /// 		
    /// 			         The configuration details for any global resource are the
    /// 				same in all regions. If you customize AWS Config in multiple
    /// 				regions to record global resources, it will create multiple
    /// 				configuration items each time a global resource changes: one
    /// 				configuration item for each region. These configuration items
    /// 				will contain identical data. To prevent duplicate configuration
    /// 				items, you should consider customizing AWS Config in only one
    /// 				region to record global resources, unless you want the
    /// 				configuration items to be available in multiple
    /// 				regions.
    /// 		
    /// 		       If you don't want AWS Config to record all resources, you can
    /// 			specify which types of resources it will record with the
    /// 				resourceTypes parameter.
    /// 		       For a list of supported resource types, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported Resource Types.
    /// 		       For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/select-resources.html">Selecting Which Resources AWS Config Records.
    public struct RecordingGroup: Swift.Equatable {
        /// Specifies whether AWS Config records configuration changes for
        /// 			every supported type of regional resource.
        /// 		       If you set this option to true, when AWS Config
        /// 			adds support for a new type of regional resource, it starts
        /// 			recording resources of that type automatically.
        /// 		       If you set this option to true, you cannot
        /// 			enumerate a list of resourceTypes.
        public let allSupported: Swift.Bool
        /// Specifies whether AWS Config includes all supported types of
        /// 			global resources (for example, IAM resources) with the resources
        /// 			that it records.
        /// 		       Before you can set this option to true, you must
        /// 			set the allSupported option to
        /// 			true.
        /// 		       If you set this option to true, when AWS Config
        /// 			adds support for a new type of global resource, it starts recording
        /// 			resources of that type automatically.
        /// 		       The configuration details for any global resource are the same
        /// 			in all regions. To prevent duplicate configuration items, you should
        /// 			consider customizing AWS Config in only one region to record global
        /// 			resources.
        public let includeGlobalResourceTypes: Swift.Bool
        /// A comma-separated list that specifies the types of AWS
        /// 			resources for which AWS Config records configuration changes (for
        /// 			example, AWS::EC2::Instance or
        /// 				AWS::CloudTrail::Trail).
        /// 		       To record all configuration changes, you must
        /// 			set the allSupported option to
        /// 			true.
        /// 		       If you set this option to false, when AWS Config
        /// 			adds support for a new type of resource, it will not record
        /// 			resources of that type unless you manually add that type to your
        /// 			recording group.
        /// 		       For a list of valid resourceTypes values, see the
        /// 				resourceType Value column in
        /// 				<a href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported AWS Resource Types.
        public let resourceTypes: [ConfigClientTypes.ResourceType]?

        public init (
            allSupported: Swift.Bool = false,
            includeGlobalResourceTypes: Swift.Bool = false,
            resourceTypes: [ConfigClientTypes.ResourceType]? = nil
        )
        {
            self.allSupported = allSupported
            self.includeGlobalResourceTypes = includeGlobalResourceTypes
            self.resourceTypes = resourceTypes
        }
    }

}

extension ConfigClientTypes.Relationship: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relationshipName
        case resourceId
        case resourceName
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relationshipName = relationshipName {
            try encodeContainer.encode(relationshipName, forKey: .relationshipName)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let relationshipNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .relationshipName)
        relationshipName = relationshipNameDecoded
    }
}

extension ConfigClientTypes.Relationship: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Relationship(relationshipName: \(Swift.String(describing: relationshipName)), resourceId: \(Swift.String(describing: resourceId)), resourceName: \(Swift.String(describing: resourceName)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConfigClientTypes {
    /// The relationship of the related resource to the main
    /// 			resource.
    public struct Relationship: Swift.Equatable {
        /// The type of relationship with the related resource.
        public let relationshipName: Swift.String?
        /// The ID of the related resource (for example,
        /// 				sg-xxxxxx).
        public let resourceId: Swift.String?
        /// The custom name of the related resource, if
        /// 			available.
        public let resourceName: Swift.String?
        /// The resource type of the related resource.
        public let resourceType: ConfigClientTypes.ResourceType?

        public init (
            relationshipName: Swift.String? = nil,
            resourceId: Swift.String? = nil,
            resourceName: Swift.String? = nil,
            resourceType: ConfigClientTypes.ResourceType? = nil
        )
        {
            self.relationshipName = relationshipName
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.resourceType = resourceType
        }
    }

}

extension ConfigClientTypes.RemediationConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case automatic = "Automatic"
        case configRuleName = "ConfigRuleName"
        case createdByService = "CreatedByService"
        case executionControls = "ExecutionControls"
        case maximumAutomaticAttempts = "MaximumAutomaticAttempts"
        case parameters = "Parameters"
        case resourceType = "ResourceType"
        case retryAttemptSeconds = "RetryAttemptSeconds"
        case targetId = "TargetId"
        case targetType = "TargetType"
        case targetVersion = "TargetVersion"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if automatic != false {
            try encodeContainer.encode(automatic, forKey: .automatic)
        }
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let createdByService = createdByService {
            try encodeContainer.encode(createdByService, forKey: .createdByService)
        }
        if let executionControls = executionControls {
            try encodeContainer.encode(executionControls, forKey: .executionControls)
        }
        if let maximumAutomaticAttempts = maximumAutomaticAttempts {
            try encodeContainer.encode(maximumAutomaticAttempts, forKey: .maximumAutomaticAttempts)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, remediationparameters0) in parameters {
                try parametersContainer.encode(remediationparameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
        if let retryAttemptSeconds = retryAttemptSeconds {
            try encodeContainer.encode(retryAttemptSeconds, forKey: .retryAttemptSeconds)
        }
        if let targetId = targetId {
            try encodeContainer.encode(targetId, forKey: .targetId)
        }
        if let targetType = targetType {
            try encodeContainer.encode(targetType.rawValue, forKey: .targetType)
        }
        if let targetVersion = targetVersion {
            try encodeContainer.encode(targetVersion, forKey: .targetVersion)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let targetTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.RemediationTargetType.self, forKey: .targetType)
        targetType = targetTypeDecoded
        let targetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetId)
        targetId = targetIdDecoded
        let targetVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetVersion)
        targetVersion = targetVersionDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: ConfigClientTypes.RemediationParameterValue?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:ConfigClientTypes.RemediationParameterValue]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:ConfigClientTypes.RemediationParameterValue]()
            for (key0, remediationparametervalue0) in parametersContainer {
                if let remediationparametervalue0 = remediationparametervalue0 {
                    parametersDecoded0?[key0] = remediationparametervalue0
                }
            }
        }
        parameters = parametersDecoded0
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let automaticDecoded = try containerValues.decode(Swift.Bool.self, forKey: .automatic)
        automatic = automaticDecoded
        let executionControlsDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ExecutionControls.self, forKey: .executionControls)
        executionControls = executionControlsDecoded
        let maximumAutomaticAttemptsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maximumAutomaticAttempts)
        maximumAutomaticAttempts = maximumAutomaticAttemptsDecoded
        let retryAttemptSecondsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retryAttemptSeconds)
        retryAttemptSeconds = retryAttemptSecondsDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createdByServiceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByService)
        createdByService = createdByServiceDecoded
    }
}

extension ConfigClientTypes.RemediationConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemediationConfiguration(arn: \(Swift.String(describing: arn)), automatic: \(Swift.String(describing: automatic)), configRuleName: \(Swift.String(describing: configRuleName)), createdByService: \(Swift.String(describing: createdByService)), executionControls: \(Swift.String(describing: executionControls)), maximumAutomaticAttempts: \(Swift.String(describing: maximumAutomaticAttempts)), parameters: \(Swift.String(describing: parameters)), resourceType: \(Swift.String(describing: resourceType)), retryAttemptSeconds: \(Swift.String(describing: retryAttemptSeconds)), targetId: \(Swift.String(describing: targetId)), targetType: \(Swift.String(describing: targetType)), targetVersion: \(Swift.String(describing: targetVersion)))"}
}

extension ConfigClientTypes {
    /// An object that represents the details about the remediation configuration that includes the remediation action, parameters, and data to execute the action.
    public struct RemediationConfiguration: Swift.Equatable {
        /// Amazon Resource Name (ARN) of remediation configuration.
        public let arn: Swift.String?
        /// The remediation is triggered automatically.
        public let automatic: Swift.Bool
        /// The name of the AWS Config rule.
        /// This member is required.
        public let configRuleName: Swift.String?
        /// Name of the service that owns the service linked rule, if applicable.
        public let createdByService: Swift.String?
        /// An ExecutionControls object.
        public let executionControls: ConfigClientTypes.ExecutionControls?
        /// The maximum number of failed attempts for auto-remediation. If you do not select a number, the default is 5.
        /// 		       For example, if you specify MaximumAutomaticAttempts as 5 with RetryAttemptSeconds as 50 seconds,
        /// 			
        /// 			AWS Config will put a RemediationException on your behalf for the failing resource after the 5th failed attempt within 50 seconds.
        public let maximumAutomaticAttempts: Swift.Int?
        /// An object of the RemediationParameterValue.
        public let parameters: [Swift.String:ConfigClientTypes.RemediationParameterValue]?
        /// The type of a resource.
        public let resourceType: Swift.String?
        /// Maximum time in seconds that AWS Config runs auto-remediation. If you do not select a number, the default is 60 seconds.
        /// 		       For example, if you specify RetryAttemptSeconds as 50 seconds and MaximumAutomaticAttempts as 5,
        /// 		AWS Config will run auto-remediations 5 times within 50 seconds before throwing an exception.
        public let retryAttemptSeconds: Swift.Int?
        /// Target ID is the name of the public document.
        /// This member is required.
        public let targetId: Swift.String?
        /// The type of the target. Target executes remediation. For example, SSM document.
        /// This member is required.
        public let targetType: ConfigClientTypes.RemediationTargetType?
        /// Version of the target. For example, version of the SSM document.
        /// 		
        ///             If you make backward incompatible changes to the SSM document,
        /// 			you must call PutRemediationConfiguration API again to ensure the remediations can run.
        ///
        public let targetVersion: Swift.String?

        public init (
            arn: Swift.String? = nil,
            automatic: Swift.Bool = false,
            configRuleName: Swift.String? = nil,
            createdByService: Swift.String? = nil,
            executionControls: ConfigClientTypes.ExecutionControls? = nil,
            maximumAutomaticAttempts: Swift.Int? = nil,
            parameters: [Swift.String:ConfigClientTypes.RemediationParameterValue]? = nil,
            resourceType: Swift.String? = nil,
            retryAttemptSeconds: Swift.Int? = nil,
            targetId: Swift.String? = nil,
            targetType: ConfigClientTypes.RemediationTargetType? = nil,
            targetVersion: Swift.String? = nil
        )
        {
            self.arn = arn
            self.automatic = automatic
            self.configRuleName = configRuleName
            self.createdByService = createdByService
            self.executionControls = executionControls
            self.maximumAutomaticAttempts = maximumAutomaticAttempts
            self.parameters = parameters
            self.resourceType = resourceType
            self.retryAttemptSeconds = retryAttemptSeconds
            self.targetId = targetId
            self.targetType = targetType
            self.targetVersion = targetVersion
        }
    }

}

extension ConfigClientTypes.RemediationException: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case expirationTime = "ExpirationTime"
        case message = "Message"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let expirationTime = expirationTime {
            try encodeContainer.encode(expirationTime.timeIntervalSince1970, forKey: .expirationTime)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let expirationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .expirationTime)
        expirationTime = expirationTimeDecoded
    }
}

extension ConfigClientTypes.RemediationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemediationException(configRuleName: \(Swift.String(describing: configRuleName)), expirationTime: \(Swift.String(describing: expirationTime)), message: \(Swift.String(describing: message)), resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConfigClientTypes {
    /// An object that represents the details about the remediation exception. The details include the rule name, an explanation of an exception, the time when the exception will be deleted, the resource ID, and resource type.
    public struct RemediationException: Swift.Equatable {
        /// The name of the AWS Config rule.
        /// This member is required.
        public let configRuleName: Swift.String?
        /// The time when the remediation exception will be deleted.
        public let expirationTime: ClientRuntime.Date?
        /// An explanation of an remediation exception.
        public let message: Swift.String?
        /// The ID of the resource (for example., sg-xxxxxx).
        /// This member is required.
        public let resourceId: Swift.String?
        /// The type of a resource.
        /// This member is required.
        public let resourceType: Swift.String?

        public init (
            configRuleName: Swift.String? = nil,
            expirationTime: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            resourceId: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.configRuleName = configRuleName
            self.expirationTime = expirationTime
            self.message = message
            self.resourceId = resourceId
            self.resourceType = resourceType
        }
    }

}

extension ConfigClientTypes.RemediationExceptionResourceKey: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
    }
}

extension ConfigClientTypes.RemediationExceptionResourceKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemediationExceptionResourceKey(resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConfigClientTypes {
    /// The details that identify a resource within AWS Config, including the resource type and resource ID.
    public struct RemediationExceptionResourceKey: Swift.Equatable {
        /// The ID of the resource (for example., sg-xxxxxx).
        public let resourceId: Swift.String?
        /// The type of a resource.
        public let resourceType: Swift.String?

        public init (
            resourceId: Swift.String? = nil,
            resourceType: Swift.String? = nil
        )
        {
            self.resourceId = resourceId
            self.resourceType = resourceType
        }
    }

}

extension ConfigClientTypes {
    public enum RemediationExecutionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case queued
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [RemediationExecutionState] {
            return [
                .failed,
                .inProgress,
                .queued,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .queued: return "QUEUED"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RemediationExecutionState(rawValue: rawValue) ?? RemediationExecutionState.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.RemediationExecutionStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invocationTime = "InvocationTime"
        case lastUpdatedTime = "LastUpdatedTime"
        case resourceKey = "ResourceKey"
        case state = "State"
        case stepDetails = "StepDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invocationTime = invocationTime {
            try encodeContainer.encode(invocationTime.timeIntervalSince1970, forKey: .invocationTime)
        }
        if let lastUpdatedTime = lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime.timeIntervalSince1970, forKey: .lastUpdatedTime)
        }
        if let resourceKey = resourceKey {
            try encodeContainer.encode(resourceKey, forKey: .resourceKey)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stepDetails = stepDetails {
            var stepDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .stepDetails)
            for remediationexecutionsteps0 in stepDetails {
                try stepDetailsContainer.encode(remediationexecutionsteps0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceKeyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceKey.self, forKey: .resourceKey)
        resourceKey = resourceKeyDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.RemediationExecutionState.self, forKey: .state)
        state = stateDecoded
        let stepDetailsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.RemediationExecutionStep?].self, forKey: .stepDetails)
        var stepDetailsDecoded0:[ConfigClientTypes.RemediationExecutionStep]? = nil
        if let stepDetailsContainer = stepDetailsContainer {
            stepDetailsDecoded0 = [ConfigClientTypes.RemediationExecutionStep]()
            for structure0 in stepDetailsContainer {
                if let structure0 = structure0 {
                    stepDetailsDecoded0?.append(structure0)
                }
            }
        }
        stepDetails = stepDetailsDecoded0
        let invocationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .invocationTime)
        invocationTime = invocationTimeDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

extension ConfigClientTypes.RemediationExecutionStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemediationExecutionStatus(invocationTime: \(Swift.String(describing: invocationTime)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), resourceKey: \(Swift.String(describing: resourceKey)), state: \(Swift.String(describing: state)), stepDetails: \(Swift.String(describing: stepDetails)))"}
}

extension ConfigClientTypes {
    /// Provides details of the current status of the invoked remediation action for that resource.
    public struct RemediationExecutionStatus: Swift.Equatable {
        /// Start time when the remediation was executed.
        public let invocationTime: ClientRuntime.Date?
        /// The time when the remediation execution was last updated.
        public let lastUpdatedTime: ClientRuntime.Date?
        /// The details that identify a resource within AWS Config, including
        /// 			the resource type and resource ID.
        public let resourceKey: ConfigClientTypes.ResourceKey?
        /// ENUM of the values.
        public let state: ConfigClientTypes.RemediationExecutionState?
        /// Details of every step.
        public let stepDetails: [ConfigClientTypes.RemediationExecutionStep]?

        public init (
            invocationTime: ClientRuntime.Date? = nil,
            lastUpdatedTime: ClientRuntime.Date? = nil,
            resourceKey: ConfigClientTypes.ResourceKey? = nil,
            state: ConfigClientTypes.RemediationExecutionState? = nil,
            stepDetails: [ConfigClientTypes.RemediationExecutionStep]? = nil
        )
        {
            self.invocationTime = invocationTime
            self.lastUpdatedTime = lastUpdatedTime
            self.resourceKey = resourceKey
            self.state = state
            self.stepDetails = stepDetails
        }
    }

}

extension ConfigClientTypes.RemediationExecutionStep: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorMessage = "ErrorMessage"
        case name = "Name"
        case startTime = "StartTime"
        case state = "State"
        case stopTime = "StopTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let stopTime = stopTime {
            try encodeContainer.encode(stopTime.timeIntervalSince1970, forKey: .stopTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let stateDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.RemediationExecutionStepState.self, forKey: .state)
        state = stateDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let stopTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .stopTime)
        stopTime = stopTimeDecoded
    }
}

extension ConfigClientTypes.RemediationExecutionStep: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemediationExecutionStep(errorMessage: \(Swift.String(describing: errorMessage)), name: \(Swift.String(describing: name)), startTime: \(Swift.String(describing: startTime)), state: \(Swift.String(describing: state)), stopTime: \(Swift.String(describing: stopTime)))"}
}

extension ConfigClientTypes {
    /// Name of the step from the SSM document.
    public struct RemediationExecutionStep: Swift.Equatable {
        /// An error message if the step was interrupted during execution.
        public let errorMessage: Swift.String?
        /// The details of the step.
        public let name: Swift.String?
        /// The time when the step started.
        public let startTime: ClientRuntime.Date?
        /// The valid status of the step.
        public let state: ConfigClientTypes.RemediationExecutionStepState?
        /// The time when the step stopped.
        public let stopTime: ClientRuntime.Date?

        public init (
            errorMessage: Swift.String? = nil,
            name: Swift.String? = nil,
            startTime: ClientRuntime.Date? = nil,
            state: ConfigClientTypes.RemediationExecutionStepState? = nil,
            stopTime: ClientRuntime.Date? = nil
        )
        {
            self.errorMessage = errorMessage
            self.name = name
            self.startTime = startTime
            self.state = state
            self.stopTime = stopTime
        }
    }

}

extension ConfigClientTypes {
    public enum RemediationExecutionStepState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [RemediationExecutionStepState] {
            return [
                .failed,
                .pending,
                .succeeded,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .succeeded: return "SUCCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RemediationExecutionStepState(rawValue: rawValue) ?? RemediationExecutionStepState.sdkUnknown(rawValue)
        }
    }
}

extension RemediationInProgressException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemediationInProgressException(message: \(Swift.String(describing: message)))"}
}

extension RemediationInProgressException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RemediationInProgressExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Remediation action is in progress. You can either cancel execution in AWS Systems Manager or wait and try again later.
public struct RemediationInProgressException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct RemediationInProgressExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension RemediationInProgressExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfigClientTypes.RemediationParameterValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceValue = "ResourceValue"
        case staticValue = "StaticValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceValue = resourceValue {
            try encodeContainer.encode(resourceValue, forKey: .resourceValue)
        }
        if let staticValue = staticValue {
            try encodeContainer.encode(staticValue, forKey: .staticValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceValueDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceValue.self, forKey: .resourceValue)
        resourceValue = resourceValueDecoded
        let staticValueDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.StaticValue.self, forKey: .staticValue)
        staticValue = staticValueDecoded
    }
}

extension ConfigClientTypes.RemediationParameterValue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemediationParameterValue(resourceValue: \(Swift.String(describing: resourceValue)), staticValue: \(Swift.String(describing: staticValue)))"}
}

extension ConfigClientTypes {
    /// The value is either a dynamic (resource) value or a static value. You must select either a dynamic value or a static value.
    public struct RemediationParameterValue: Swift.Equatable {
        /// The value is dynamic and changes at run-time.
        public let resourceValue: ConfigClientTypes.ResourceValue?
        /// The value is static and does not change at run-time.
        public let staticValue: ConfigClientTypes.StaticValue?

        public init (
            resourceValue: ConfigClientTypes.ResourceValue? = nil,
            staticValue: ConfigClientTypes.StaticValue? = nil
        )
        {
            self.resourceValue = resourceValue
            self.staticValue = staticValue
        }
    }

}

extension ConfigClientTypes {
    public enum RemediationTargetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ssmDocument
        case sdkUnknown(Swift.String)

        public static var allCases: [RemediationTargetType] {
            return [
                .ssmDocument,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ssmDocument: return "SSM_DOCUMENT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RemediationTargetType(rawValue: rawValue) ?? RemediationTargetType.sdkUnknown(rawValue)
        }
    }
}

extension ResourceConcurrentModificationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceConcurrentModificationException(message: \(Swift.String(describing: message)))"}
}

extension ResourceConcurrentModificationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceConcurrentModificationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Two users are trying to modify the same query at the same time. Wait for a moment and try again.
public struct ResourceConcurrentModificationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceConcurrentModificationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceConcurrentModificationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfigClientTypes.ResourceCount: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let countDecoded = try containerValues.decode(Swift.Int.self, forKey: .count)
        count = countDecoded
    }
}

extension ConfigClientTypes.ResourceCount: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceCount(count: \(Swift.String(describing: count)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConfigClientTypes {
    /// An object that contains the resource type and the number of
    /// 			resources.
    public struct ResourceCount: Swift.Equatable {
        /// The number of resources.
        public let count: Swift.Int
        /// The resource type (for example,
        /// 				"AWS::EC2::Instance").
        public let resourceType: ConfigClientTypes.ResourceType?

        public init (
            count: Swift.Int = 0,
            resourceType: ConfigClientTypes.ResourceType? = nil
        )
        {
            self.count = count
            self.resourceType = resourceType
        }
    }

}

extension ConfigClientTypes.ResourceCountFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case region = "Region"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension ConfigClientTypes.ResourceCountFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceCountFilters(accountId: \(Swift.String(describing: accountId)), region: \(Swift.String(describing: region)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConfigClientTypes {
    /// Filters the resource count based on account ID, region, and resource type.
    public struct ResourceCountFilters: Swift.Equatable {
        /// The 12-digit ID of the account.
        public let accountId: Swift.String?
        /// The region where the account is located.
        public let region: Swift.String?
        /// The type of the AWS resource.
        public let resourceType: ConfigClientTypes.ResourceType?

        public init (
            accountId: Swift.String? = nil,
            region: Swift.String? = nil,
            resourceType: ConfigClientTypes.ResourceType? = nil
        )
        {
            self.accountId = accountId
            self.region = region
            self.resourceType = resourceType
        }
    }

}

extension ConfigClientTypes {
    public enum ResourceCountGroupKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case awsRegion
        case resourceType
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceCountGroupKey] {
            return [
                .accountId,
                .awsRegion,
                .resourceType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "ACCOUNT_ID"
            case .awsRegion: return "AWS_REGION"
            case .resourceType: return "RESOURCE_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceCountGroupKey(rawValue: rawValue) ?? ResourceCountGroupKey.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.ResourceFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case region = "Region"
        case resourceId = "ResourceId"
        case resourceName = "ResourceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension ConfigClientTypes.ResourceFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceFilters(accountId: \(Swift.String(describing: accountId)), region: \(Swift.String(describing: region)), resourceId: \(Swift.String(describing: resourceId)), resourceName: \(Swift.String(describing: resourceName)))"}
}

extension ConfigClientTypes {
    /// Filters the results by resource account ID, region, resource ID, and resource name.
    public struct ResourceFilters: Swift.Equatable {
        /// The 12-digit source account ID.
        public let accountId: Swift.String?
        /// The source region.
        public let region: Swift.String?
        /// The ID of the resource.
        public let resourceId: Swift.String?
        /// The name of the resource.
        public let resourceName: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            region: Swift.String? = nil,
            resourceId: Swift.String? = nil,
            resourceName: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.region = region
            self.resourceId = resourceId
            self.resourceName = resourceName
        }
    }

}

extension ConfigClientTypes.ResourceIdentifier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceDeletionTime
        case resourceId
        case resourceName
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceDeletionTime = resourceDeletionTime {
            try encodeContainer.encode(resourceDeletionTime.timeIntervalSince1970, forKey: .resourceDeletionTime)
        }
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let resourceDeletionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .resourceDeletionTime)
        resourceDeletionTime = resourceDeletionTimeDecoded
    }
}

extension ConfigClientTypes.ResourceIdentifier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceIdentifier(resourceDeletionTime: \(Swift.String(describing: resourceDeletionTime)), resourceId: \(Swift.String(describing: resourceId)), resourceName: \(Swift.String(describing: resourceName)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConfigClientTypes {
    /// The details that identify a resource that is discovered by AWS
    /// 			Config, including the resource type, ID, and (if available) the
    /// 			custom resource name.
    public struct ResourceIdentifier: Swift.Equatable {
        /// The time that the resource was deleted.
        public let resourceDeletionTime: ClientRuntime.Date?
        /// The ID of the resource (for example,
        /// 			sg-xxxxxx).
        public let resourceId: Swift.String?
        /// The custom name of the resource (if available).
        public let resourceName: Swift.String?
        /// The type of resource.
        public let resourceType: ConfigClientTypes.ResourceType?

        public init (
            resourceDeletionTime: ClientRuntime.Date? = nil,
            resourceId: Swift.String? = nil,
            resourceName: Swift.String? = nil,
            resourceType: ConfigClientTypes.ResourceType? = nil
        )
        {
            self.resourceDeletionTime = resourceDeletionTime
            self.resourceId = resourceId
            self.resourceName = resourceName
            self.resourceType = resourceType
        }
    }

}

extension ResourceInUseException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceInUseException(message: \(Swift.String(describing: message)))"}
}

extension ResourceInUseException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You see this exception in the following cases:
/// 		
///
///                For DeleteConfigRule, AWS Config is deleting this rule. Try your request again later.
///
///
///                For DeleteConfigRule, the rule is deleting your evaluation results. Try your request again later.
///
///
///                For DeleteConfigRule, a remediation action is associated with the rule and AWS Config cannot delete this rule. Delete the remediation action associated with the rule before deleting the rule and try your request again later.
///
///
///                For PutConfigOrganizationRule, organization config rule deletion is in progress. Try your request again later.
///
///
///                For DeleteOrganizationConfigRule, organization config rule creation is in progress. Try your request again later.
///
///
///                For PutConformancePack and PutOrganizationConformancePack, a conformance pack creation, update, and deletion is in progress. Try your request again later.
///
///
///                For DeleteConformancePack, a conformance pack creation, update, and deletion is in progress. Try your request again later.
///
///
public struct ResourceInUseException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfigClientTypes.ResourceKey: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId
        case resourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
    }
}

extension ConfigClientTypes.ResourceKey: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceKey(resourceId: \(Swift.String(describing: resourceId)), resourceType: \(Swift.String(describing: resourceType)))"}
}

extension ConfigClientTypes {
    /// The details that identify a resource within AWS Config, including
    /// 			the resource type and resource ID.
    public struct ResourceKey: Swift.Equatable {
        /// The ID of the resource (for example., sg-xxxxxx).
        /// This member is required.
        public let resourceId: Swift.String?
        /// The resource type.
        /// This member is required.
        public let resourceType: ConfigClientTypes.ResourceType?

        public init (
            resourceId: Swift.String? = nil,
            resourceType: ConfigClientTypes.ResourceType? = nil
        )
        {
            self.resourceId = resourceId
            self.resourceType = resourceType
        }
    }

}

extension ResourceNotDiscoveredException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotDiscoveredException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotDiscoveredException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotDiscoveredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have specified a resource that is either unknown or has not
/// 			been discovered.
public struct ResourceNotDiscoveredException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotDiscoveredExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotDiscoveredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have specified a resource that does not exist.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConfigClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountpublicaccessblock
        case alarm
        case api
        case application
        case applicationversion
        case associationcompliance
        case autoscalinggroup
        case backupplan
        case backuprecoverypoint
        case backupselection
        case backupvault
        case bucket
        case certificate
        case cloudformationproduct
        case cloudformationprovisionedproduct
        case cluster
        case clusterparametergroup
        case clustersecuritygroup
        case clustersnapshot
        case clustersubnetgroup
        case conformancepackcompliance
        case customergateway
        case dbcluster
        case dbclustersnapshot
        case dbinstance
        case dbsecuritygroup
        case dbsnapshot
        case dbsubnetgroup
        case distribution
        case domain
        case ecrrepository
        case ecscluster
        case ecsservice
        case ecstaskdefinition
        case efsaccesspoint
        case efsfilesystem
        case eip
        case ekscluster
        case egressonlyinternetgateway
        case encryptionconfig
        case environment
        case eventsubscription
        case filedata
        case flowlog
        case function
        case group
        case host
        case ipsetv2
        case instance
        case internetgateway
        case key
        case launchconfiguration
        case loadbalancer
        case loadbalancerv2
        case managedinstanceinventory
        case managedrulesetv2
        case natgateway
        case networkacl
        case networkfirewallfirewall
        case networkfirewallfirewallpolicy
        case networkfirewallrulegroup
        case networkinterface
        case patchcompliance
        case pipeline
        case policy
        case portfolio
        case project
        case protection
        case qldbledger
        case queue
        case ratebasedrule
        case redshifteventsubscription
        case regexpatternsetv2
        case regionalprotection
        case regionalratebasedrule
        case regionalrule
        case regionalrulegroup
        case regionalwebacl
        case registeredhainstance
        case resourcecompliance
        case restapi
        case role
        case routetable
        case rule
        case rulegroup
        case rulegroupv2
        case scalingpolicy
        case scheduledaction
        case secret
        case securitygroup
        case stack
        case stage
        case stagev2
        case streamingdistribution
        case subnet
        case table
        case topic
        case trail
        case user
        case vpc
        case vpcendpoint
        case vpcendpointservice
        case vpcpeeringconnection
        case vpnconnection
        case vpngateway
        case volume
        case webacl
        case webaclv2
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .accountpublicaccessblock,
                .alarm,
                .api,
                .application,
                .applicationversion,
                .associationcompliance,
                .autoscalinggroup,
                .backupplan,
                .backuprecoverypoint,
                .backupselection,
                .backupvault,
                .bucket,
                .certificate,
                .cloudformationproduct,
                .cloudformationprovisionedproduct,
                .cluster,
                .clusterparametergroup,
                .clustersecuritygroup,
                .clustersnapshot,
                .clustersubnetgroup,
                .conformancepackcompliance,
                .customergateway,
                .dbcluster,
                .dbclustersnapshot,
                .dbinstance,
                .dbsecuritygroup,
                .dbsnapshot,
                .dbsubnetgroup,
                .distribution,
                .domain,
                .ecrrepository,
                .ecscluster,
                .ecsservice,
                .ecstaskdefinition,
                .efsaccesspoint,
                .efsfilesystem,
                .eip,
                .ekscluster,
                .egressonlyinternetgateway,
                .encryptionconfig,
                .environment,
                .eventsubscription,
                .filedata,
                .flowlog,
                .function,
                .group,
                .host,
                .ipsetv2,
                .instance,
                .internetgateway,
                .key,
                .launchconfiguration,
                .loadbalancer,
                .loadbalancerv2,
                .managedinstanceinventory,
                .managedrulesetv2,
                .natgateway,
                .networkacl,
                .networkfirewallfirewall,
                .networkfirewallfirewallpolicy,
                .networkfirewallrulegroup,
                .networkinterface,
                .patchcompliance,
                .pipeline,
                .policy,
                .portfolio,
                .project,
                .protection,
                .qldbledger,
                .queue,
                .ratebasedrule,
                .redshifteventsubscription,
                .regexpatternsetv2,
                .regionalprotection,
                .regionalratebasedrule,
                .regionalrule,
                .regionalrulegroup,
                .regionalwebacl,
                .registeredhainstance,
                .resourcecompliance,
                .restapi,
                .role,
                .routetable,
                .rule,
                .rulegroup,
                .rulegroupv2,
                .scalingpolicy,
                .scheduledaction,
                .secret,
                .securitygroup,
                .stack,
                .stage,
                .stagev2,
                .streamingdistribution,
                .subnet,
                .table,
                .topic,
                .trail,
                .user,
                .vpc,
                .vpcendpoint,
                .vpcendpointservice,
                .vpcpeeringconnection,
                .vpnconnection,
                .vpngateway,
                .volume,
                .webacl,
                .webaclv2,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountpublicaccessblock: return "AWS::S3::AccountPublicAccessBlock"
            case .alarm: return "AWS::CloudWatch::Alarm"
            case .api: return "AWS::ApiGatewayV2::Api"
            case .application: return "AWS::ElasticBeanstalk::Application"
            case .applicationversion: return "AWS::ElasticBeanstalk::ApplicationVersion"
            case .associationcompliance: return "AWS::SSM::AssociationCompliance"
            case .autoscalinggroup: return "AWS::AutoScaling::AutoScalingGroup"
            case .backupplan: return "AWS::Backup::BackupPlan"
            case .backuprecoverypoint: return "AWS::Backup::RecoveryPoint"
            case .backupselection: return "AWS::Backup::BackupSelection"
            case .backupvault: return "AWS::Backup::BackupVault"
            case .bucket: return "AWS::S3::Bucket"
            case .certificate: return "AWS::ACM::Certificate"
            case .cloudformationproduct: return "AWS::ServiceCatalog::CloudFormationProduct"
            case .cloudformationprovisionedproduct: return "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
            case .cluster: return "AWS::Redshift::Cluster"
            case .clusterparametergroup: return "AWS::Redshift::ClusterParameterGroup"
            case .clustersecuritygroup: return "AWS::Redshift::ClusterSecurityGroup"
            case .clustersnapshot: return "AWS::Redshift::ClusterSnapshot"
            case .clustersubnetgroup: return "AWS::Redshift::ClusterSubnetGroup"
            case .conformancepackcompliance: return "AWS::Config::ConformancePackCompliance"
            case .customergateway: return "AWS::EC2::CustomerGateway"
            case .dbcluster: return "AWS::RDS::DBCluster"
            case .dbclustersnapshot: return "AWS::RDS::DBClusterSnapshot"
            case .dbinstance: return "AWS::RDS::DBInstance"
            case .dbsecuritygroup: return "AWS::RDS::DBSecurityGroup"
            case .dbsnapshot: return "AWS::RDS::DBSnapshot"
            case .dbsubnetgroup: return "AWS::RDS::DBSubnetGroup"
            case .distribution: return "AWS::CloudFront::Distribution"
            case .domain: return "AWS::Elasticsearch::Domain"
            case .ecrrepository: return "AWS::ECR::Repository"
            case .ecscluster: return "AWS::ECS::Cluster"
            case .ecsservice: return "AWS::ECS::Service"
            case .ecstaskdefinition: return "AWS::ECS::TaskDefinition"
            case .efsaccesspoint: return "AWS::EFS::AccessPoint"
            case .efsfilesystem: return "AWS::EFS::FileSystem"
            case .eip: return "AWS::EC2::EIP"
            case .ekscluster: return "AWS::EKS::Cluster"
            case .egressonlyinternetgateway: return "AWS::EC2::EgressOnlyInternetGateway"
            case .encryptionconfig: return "AWS::XRay::EncryptionConfig"
            case .environment: return "AWS::ElasticBeanstalk::Environment"
            case .eventsubscription: return "AWS::RDS::EventSubscription"
            case .filedata: return "AWS::SSM::FileData"
            case .flowlog: return "AWS::EC2::FlowLog"
            case .function: return "AWS::Lambda::Function"
            case .group: return "AWS::IAM::Group"
            case .host: return "AWS::EC2::Host"
            case .ipsetv2: return "AWS::WAFv2::IPSet"
            case .instance: return "AWS::EC2::Instance"
            case .internetgateway: return "AWS::EC2::InternetGateway"
            case .key: return "AWS::KMS::Key"
            case .launchconfiguration: return "AWS::AutoScaling::LaunchConfiguration"
            case .loadbalancer: return "AWS::ElasticLoadBalancing::LoadBalancer"
            case .loadbalancerv2: return "AWS::ElasticLoadBalancingV2::LoadBalancer"
            case .managedinstanceinventory: return "AWS::SSM::ManagedInstanceInventory"
            case .managedrulesetv2: return "AWS::WAFv2::ManagedRuleSet"
            case .natgateway: return "AWS::EC2::NatGateway"
            case .networkacl: return "AWS::EC2::NetworkAcl"
            case .networkfirewallfirewall: return "AWS::NetworkFirewall::Firewall"
            case .networkfirewallfirewallpolicy: return "AWS::NetworkFirewall::FirewallPolicy"
            case .networkfirewallrulegroup: return "AWS::NetworkFirewall::RuleGroup"
            case .networkinterface: return "AWS::EC2::NetworkInterface"
            case .patchcompliance: return "AWS::SSM::PatchCompliance"
            case .pipeline: return "AWS::CodePipeline::Pipeline"
            case .policy: return "AWS::IAM::Policy"
            case .portfolio: return "AWS::ServiceCatalog::Portfolio"
            case .project: return "AWS::CodeBuild::Project"
            case .protection: return "AWS::Shield::Protection"
            case .qldbledger: return "AWS::QLDB::Ledger"
            case .queue: return "AWS::SQS::Queue"
            case .ratebasedrule: return "AWS::WAF::RateBasedRule"
            case .redshifteventsubscription: return "AWS::Redshift::EventSubscription"
            case .regexpatternsetv2: return "AWS::WAFv2::RegexPatternSet"
            case .regionalprotection: return "AWS::ShieldRegional::Protection"
            case .regionalratebasedrule: return "AWS::WAFRegional::RateBasedRule"
            case .regionalrule: return "AWS::WAFRegional::Rule"
            case .regionalrulegroup: return "AWS::WAFRegional::RuleGroup"
            case .regionalwebacl: return "AWS::WAFRegional::WebACL"
            case .registeredhainstance: return "AWS::EC2::RegisteredHAInstance"
            case .resourcecompliance: return "AWS::Config::ResourceCompliance"
            case .restapi: return "AWS::ApiGateway::RestApi"
            case .role: return "AWS::IAM::Role"
            case .routetable: return "AWS::EC2::RouteTable"
            case .rule: return "AWS::WAF::Rule"
            case .rulegroup: return "AWS::WAF::RuleGroup"
            case .rulegroupv2: return "AWS::WAFv2::RuleGroup"
            case .scalingpolicy: return "AWS::AutoScaling::ScalingPolicy"
            case .scheduledaction: return "AWS::AutoScaling::ScheduledAction"
            case .secret: return "AWS::SecretsManager::Secret"
            case .securitygroup: return "AWS::EC2::SecurityGroup"
            case .stack: return "AWS::CloudFormation::Stack"
            case .stage: return "AWS::ApiGateway::Stage"
            case .stagev2: return "AWS::ApiGatewayV2::Stage"
            case .streamingdistribution: return "AWS::CloudFront::StreamingDistribution"
            case .subnet: return "AWS::EC2::Subnet"
            case .table: return "AWS::DynamoDB::Table"
            case .topic: return "AWS::SNS::Topic"
            case .trail: return "AWS::CloudTrail::Trail"
            case .user: return "AWS::IAM::User"
            case .vpc: return "AWS::EC2::VPC"
            case .vpcendpoint: return "AWS::EC2::VPCEndpoint"
            case .vpcendpointservice: return "AWS::EC2::VPCEndpointService"
            case .vpcpeeringconnection: return "AWS::EC2::VPCPeeringConnection"
            case .vpnconnection: return "AWS::EC2::VPNConnection"
            case .vpngateway: return "AWS::EC2::VPNGateway"
            case .volume: return "AWS::EC2::Volume"
            case .webacl: return "AWS::WAF::WebACL"
            case .webaclv2: return "AWS::WAFv2::WebACL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.ResourceValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let value = value {
            try encodeContainer.encode(value.rawValue, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.ResourceValueType.self, forKey: .value)
        value = valueDecoded
    }
}

extension ConfigClientTypes.ResourceValue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceValue(value: \(Swift.String(describing: value)))"}
}

extension ConfigClientTypes {
    /// The dynamic value of the resource.
    public struct ResourceValue: Swift.Equatable {
        /// The value is a resource ID.
        /// This member is required.
        public let value: ConfigClientTypes.ResourceValueType?

        public init (
            value: ConfigClientTypes.ResourceValueType? = nil
        )
        {
            self.value = value
        }
    }

}

extension ConfigClientTypes {
    public enum ResourceValueType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case resourceId
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceValueType] {
            return [
                .resourceId,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .resourceId: return "RESOURCE_ID"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceValueType(rawValue: rawValue) ?? ResourceValueType.sdkUnknown(rawValue)
        }
    }
}

extension ConfigClientTypes.RetentionConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case retentionPeriodInDays = "RetentionPeriodInDays"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if retentionPeriodInDays != 0 {
            try encodeContainer.encode(retentionPeriodInDays, forKey: .retentionPeriodInDays)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let retentionPeriodInDaysDecoded = try containerValues.decode(Swift.Int.self, forKey: .retentionPeriodInDays)
        retentionPeriodInDays = retentionPeriodInDaysDecoded
    }
}

extension ConfigClientTypes.RetentionConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RetentionConfiguration(name: \(Swift.String(describing: name)), retentionPeriodInDays: \(Swift.String(describing: retentionPeriodInDays)))"}
}

extension ConfigClientTypes {
    /// An object with the name of the retention configuration and the retention period in days. The object stores the configuration for data retention in AWS Config.
    public struct RetentionConfiguration: Swift.Equatable {
        /// The name of the retention configuration object.
        /// This member is required.
        public let name: Swift.String?
        /// Number of days AWS Config stores your historical information.
        /// 		
        ///             Currently, only applicable to the configuration item history.
        ///
        /// This member is required.
        public let retentionPeriodInDays: Swift.Int

        public init (
            name: Swift.String? = nil,
            retentionPeriodInDays: Swift.Int = 0
        )
        {
            self.name = name
            self.retentionPeriodInDays = retentionPeriodInDays
        }
    }

}

extension ConfigClientTypes.Scope: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceResourceId = "ComplianceResourceId"
        case complianceResourceTypes = "ComplianceResourceTypes"
        case tagKey = "TagKey"
        case tagValue = "TagValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceResourceId = complianceResourceId {
            try encodeContainer.encode(complianceResourceId, forKey: .complianceResourceId)
        }
        if let complianceResourceTypes = complianceResourceTypes {
            var complianceResourceTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .complianceResourceTypes)
            for complianceresourcetypes0 in complianceResourceTypes {
                try complianceResourceTypesContainer.encode(complianceresourcetypes0)
            }
        }
        if let tagKey = tagKey {
            try encodeContainer.encode(tagKey, forKey: .tagKey)
        }
        if let tagValue = tagValue {
            try encodeContainer.encode(tagValue, forKey: .tagValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceResourceTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .complianceResourceTypes)
        var complianceResourceTypesDecoded0:[Swift.String]? = nil
        if let complianceResourceTypesContainer = complianceResourceTypesContainer {
            complianceResourceTypesDecoded0 = [Swift.String]()
            for string0 in complianceResourceTypesContainer {
                if let string0 = string0 {
                    complianceResourceTypesDecoded0?.append(string0)
                }
            }
        }
        complianceResourceTypes = complianceResourceTypesDecoded0
        let tagKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagKey)
        tagKey = tagKeyDecoded
        let tagValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tagValue)
        tagValue = tagValueDecoded
        let complianceResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complianceResourceId)
        complianceResourceId = complianceResourceIdDecoded
    }
}

extension ConfigClientTypes.Scope: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Scope(complianceResourceId: \(Swift.String(describing: complianceResourceId)), complianceResourceTypes: \(Swift.String(describing: complianceResourceTypes)), tagKey: \(Swift.String(describing: tagKey)), tagValue: \(Swift.String(describing: tagValue)))"}
}

extension ConfigClientTypes {
    /// Defines which resources trigger an evaluation for an AWS Config
    /// 			rule. The scope can include one or more resource types, a
    /// 			combination of a tag key and value, or a combination of one resource
    /// 			type and one resource ID. Specify a scope to constrain which
    /// 			resources trigger an evaluation for a rule. Otherwise, evaluations
    /// 			for the rule are triggered when any resource in your recording group
    /// 			changes in configuration.
    public struct Scope: Swift.Equatable {
        /// The ID of the only AWS resource that you want to trigger an
        /// 			evaluation for the rule. If you specify a resource ID, you must
        /// 			specify one resource type for
        /// 			ComplianceResourceTypes.
        public let complianceResourceId: Swift.String?
        /// The resource types of only those AWS resources that you want to
        /// 			trigger an evaluation for the rule. You can only specify one type if
        /// 			you also specify a resource ID for
        /// 			ComplianceResourceId.
        public let complianceResourceTypes: [Swift.String]?
        /// The tag key that is applied to only those AWS resources that
        /// 			you want to trigger an evaluation for the rule.
        public let tagKey: Swift.String?
        /// The tag value applied to only those AWS resources that you want
        /// 			to trigger an evaluation for the rule. If you specify a value for
        /// 				TagValue, you must also specify a value for
        /// 				TagKey.
        public let tagValue: Swift.String?

        public init (
            complianceResourceId: Swift.String? = nil,
            complianceResourceTypes: [Swift.String]? = nil,
            tagKey: Swift.String? = nil,
            tagValue: Swift.String? = nil
        )
        {
            self.complianceResourceId = complianceResourceId
            self.complianceResourceTypes = complianceResourceTypes
            self.tagKey = tagKey
            self.tagValue = tagValue
        }
    }

}

public struct SelectAggregateResourceConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SelectAggregateResourceConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SelectAggregateResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SelectAggregateResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SelectAggregateResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SelectAggregateResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SelectAggregateResourceConfigOutputError>
}

extension SelectAggregateResourceConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelectAggregateResourceConfigInput(configurationAggregatorName: \(Swift.String(describing: configurationAggregatorName)), expression: \(Swift.String(describing: expression)), limit: \(Swift.String(describing: limit)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension SelectAggregateResourceConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case expression = "Expression"
        case limit = "Limit"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationAggregatorName = configurationAggregatorName {
            try encodeContainer.encode(configurationAggregatorName, forKey: .configurationAggregatorName)
        }
        if let expression = expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct SelectAggregateResourceConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SelectAggregateResourceConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SelectAggregateResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SelectAggregateResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SelectAggregateResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SelectAggregateResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SelectAggregateResourceConfigOutputError>
}

public struct SelectAggregateResourceConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SelectAggregateResourceConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SelectAggregateResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SelectAggregateResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SelectAggregateResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SelectAggregateResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SelectAggregateResourceConfigOutputError>
}

public struct SelectAggregateResourceConfigInput: Swift.Equatable {
    /// The name of the configuration aggregator.
    /// This member is required.
    public let configurationAggregatorName: Swift.String?
    /// The SQL query SELECT command.
    /// This member is required.
    public let expression: Swift.String?
    /// The maximum number of query results returned on each page.
    public let limit: Swift.Int
    /// The maximum number of query results returned on each page. AWS Config also allows the Limit request parameter.
    public let maxResults: Swift.Int
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        configurationAggregatorName: Swift.String? = nil,
        expression: Swift.String? = nil,
        limit: Swift.Int = 0,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationAggregatorName = configurationAggregatorName
        self.expression = expression
        self.limit = limit
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct SelectAggregateResourceConfigInputBody: Swift.Equatable {
    public let expression: Swift.String?
    public let configurationAggregatorName: Swift.String?
    public let limit: Swift.Int
    public let maxResults: Swift.Int
    public let nextToken: Swift.String?
}

extension SelectAggregateResourceConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationAggregatorName = "ConfigurationAggregatorName"
        case expression = "Expression"
        case limit = "Limit"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let configurationAggregatorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationAggregatorName)
        configurationAggregatorName = configurationAggregatorNameDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SelectAggregateResourceConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SelectAggregateResourceConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidExpressionException" : self = .invalidExpressionException(try InvalidExpressionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigurationAggregatorException" : self = .noSuchConfigurationAggregatorException(try NoSuchConfigurationAggregatorException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SelectAggregateResourceConfigOutputError: Swift.Error, Swift.Equatable {
    case invalidExpressionException(InvalidExpressionException)
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case noSuchConfigurationAggregatorException(NoSuchConfigurationAggregatorException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SelectAggregateResourceConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelectAggregateResourceConfigOutputResponse(nextToken: \(Swift.String(describing: nextToken)), queryInfo: \(Swift.String(describing: queryInfo)), results: \(Swift.String(describing: results)))"}
}

extension SelectAggregateResourceConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SelectAggregateResourceConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queryInfo = output.queryInfo
            self.results = output.results
        } else {
            self.nextToken = nil
            self.queryInfo = nil
            self.results = nil
        }
    }
}

public struct SelectAggregateResourceConfigOutputResponse: Swift.Equatable {
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// Details about the query.
    public let queryInfo: ConfigClientTypes.QueryInfo?
    /// Returns the results for the SQL query.
    public let results: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        queryInfo: ConfigClientTypes.QueryInfo? = nil,
        results: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.queryInfo = queryInfo
        self.results = results
    }
}

struct SelectAggregateResourceConfigOutputResponseBody: Swift.Equatable {
    public let results: [Swift.String]?
    public let queryInfo: ConfigClientTypes.QueryInfo?
    public let nextToken: Swift.String?
}

extension SelectAggregateResourceConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case queryInfo = "QueryInfo"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .results)
        var resultsDecoded0:[Swift.String]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [Swift.String]()
            for string0 in resultsContainer {
                if let string0 = string0 {
                    resultsDecoded0?.append(string0)
                }
            }
        }
        results = resultsDecoded0
        let queryInfoDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.QueryInfo.self, forKey: .queryInfo)
        queryInfo = queryInfoDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct SelectResourceConfigInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SelectResourceConfigInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SelectResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SelectResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SelectResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SelectResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SelectResourceConfigOutputError>
}

extension SelectResourceConfigInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelectResourceConfigInput(expression: \(Swift.String(describing: expression)), limit: \(Swift.String(describing: limit)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension SelectResourceConfigInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression = "Expression"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expression = expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if limit != 0 {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct SelectResourceConfigInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SelectResourceConfigInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SelectResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SelectResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SelectResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SelectResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SelectResourceConfigOutputError>
}

public struct SelectResourceConfigInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SelectResourceConfigInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SelectResourceConfigInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SelectResourceConfigOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SelectResourceConfigInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SelectResourceConfigOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SelectResourceConfigOutputError>
}

public struct SelectResourceConfigInput: Swift.Equatable {
    /// The SQL query SELECT command.
    /// This member is required.
    public let expression: Swift.String?
    /// The maximum number of query results returned on each page.
    public let limit: Swift.Int
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?

    public init (
        expression: Swift.String? = nil,
        limit: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.expression = expression
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct SelectResourceConfigInputBody: Swift.Equatable {
    public let expression: Swift.String?
    public let limit: Swift.Int
    public let nextToken: Swift.String?
}

extension SelectResourceConfigInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression = "Expression"
        case limit = "Limit"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
        let limitDecoded = try containerValues.decode(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension SelectResourceConfigOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SelectResourceConfigOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidExpressionException" : self = .invalidExpressionException(try InvalidExpressionException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidLimitException" : self = .invalidLimitException(try InvalidLimitException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidNextTokenException" : self = .invalidNextTokenException(try InvalidNextTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SelectResourceConfigOutputError: Swift.Error, Swift.Equatable {
    case invalidExpressionException(InvalidExpressionException)
    case invalidLimitException(InvalidLimitException)
    case invalidNextTokenException(InvalidNextTokenException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SelectResourceConfigOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SelectResourceConfigOutputResponse(nextToken: \(Swift.String(describing: nextToken)), queryInfo: \(Swift.String(describing: queryInfo)), results: \(Swift.String(describing: results)))"}
}

extension SelectResourceConfigOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: SelectResourceConfigOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queryInfo = output.queryInfo
            self.results = output.results
        } else {
            self.nextToken = nil
            self.queryInfo = nil
            self.results = nil
        }
    }
}

public struct SelectResourceConfigOutputResponse: Swift.Equatable {
    /// The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    public let nextToken: Swift.String?
    /// Returns the QueryInfo object.
    public let queryInfo: ConfigClientTypes.QueryInfo?
    /// Returns the results for the SQL query.
    public let results: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        queryInfo: ConfigClientTypes.QueryInfo? = nil,
        results: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.queryInfo = queryInfo
        self.results = results
    }
}

struct SelectResourceConfigOutputResponseBody: Swift.Equatable {
    public let results: [Swift.String]?
    public let queryInfo: ConfigClientTypes.QueryInfo?
    public let nextToken: Swift.String?
}

extension SelectResourceConfigOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case queryInfo = "QueryInfo"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .results)
        var resultsDecoded0:[Swift.String]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [Swift.String]()
            for string0 in resultsContainer {
                if let string0 = string0 {
                    resultsDecoded0?.append(string0)
                }
            }
        }
        results = resultsDecoded0
        let queryInfoDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.QueryInfo.self, forKey: .queryInfo)
        queryInfo = queryInfoDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ConfigClientTypes.Source: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case owner = "Owner"
        case sourceDetails = "SourceDetails"
        case sourceIdentifier = "SourceIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let owner = owner {
            try encodeContainer.encode(owner.rawValue, forKey: .owner)
        }
        if let sourceDetails = sourceDetails {
            var sourceDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceDetails)
            for sourcedetails0 in sourceDetails {
                try sourceDetailsContainer.encode(sourcedetails0)
            }
        }
        if let sourceIdentifier = sourceIdentifier {
            try encodeContainer.encode(sourceIdentifier, forKey: .sourceIdentifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.Owner.self, forKey: .owner)
        owner = ownerDecoded
        let sourceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIdentifier)
        sourceIdentifier = sourceIdentifierDecoded
        let sourceDetailsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.SourceDetail?].self, forKey: .sourceDetails)
        var sourceDetailsDecoded0:[ConfigClientTypes.SourceDetail]? = nil
        if let sourceDetailsContainer = sourceDetailsContainer {
            sourceDetailsDecoded0 = [ConfigClientTypes.SourceDetail]()
            for structure0 in sourceDetailsContainer {
                if let structure0 = structure0 {
                    sourceDetailsDecoded0?.append(structure0)
                }
            }
        }
        sourceDetails = sourceDetailsDecoded0
    }
}

extension ConfigClientTypes.Source: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Source(owner: \(Swift.String(describing: owner)), sourceDetails: \(Swift.String(describing: sourceDetails)), sourceIdentifier: \(Swift.String(describing: sourceIdentifier)))"}
}

extension ConfigClientTypes {
    /// Provides the AWS Config rule owner (AWS or customer), the rule
    /// 			identifier, and the events that trigger the evaluation of your AWS
    /// 			resources.
    public struct Source: Swift.Equatable {
        /// Indicates whether AWS or the customer owns and manages the AWS
        /// 			Config rule.
        /// This member is required.
        public let owner: ConfigClientTypes.Owner?
        /// Provides the source and type of the event that causes AWS
        /// 			Config to evaluate your AWS resources.
        public let sourceDetails: [ConfigClientTypes.SourceDetail]?
        /// For AWS Config managed rules, a predefined identifier from a
        /// 			list. For example, IAM_PASSWORD_POLICY is a managed
        /// 			rule. To reference a managed rule, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">Using AWS Managed Config Rules.
        /// 		       For custom rules, the identifier is the Amazon Resource Name
        /// 			(ARN) of the rule's AWS Lambda function, such as
        /// 				arn:aws:lambda:us-east-2:123456789012:function:custom_rule_name.
        /// This member is required.
        public let sourceIdentifier: Swift.String?

        public init (
            owner: ConfigClientTypes.Owner? = nil,
            sourceDetails: [ConfigClientTypes.SourceDetail]? = nil,
            sourceIdentifier: Swift.String? = nil
        )
        {
            self.owner = owner
            self.sourceDetails = sourceDetails
            self.sourceIdentifier = sourceIdentifier
        }
    }

}

extension ConfigClientTypes.SourceDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventSource = "EventSource"
        case maximumExecutionFrequency = "MaximumExecutionFrequency"
        case messageType = "MessageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventSource = eventSource {
            try encodeContainer.encode(eventSource.rawValue, forKey: .eventSource)
        }
        if let maximumExecutionFrequency = maximumExecutionFrequency {
            try encodeContainer.encode(maximumExecutionFrequency.rawValue, forKey: .maximumExecutionFrequency)
        }
        if let messageType = messageType {
            try encodeContainer.encode(messageType.rawValue, forKey: .messageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventSourceDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.EventSource.self, forKey: .eventSource)
        eventSource = eventSourceDecoded
        let messageTypeDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.MessageType.self, forKey: .messageType)
        messageType = messageTypeDecoded
        let maximumExecutionFrequencyDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.MaximumExecutionFrequency.self, forKey: .maximumExecutionFrequency)
        maximumExecutionFrequency = maximumExecutionFrequencyDecoded
    }
}

extension ConfigClientTypes.SourceDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SourceDetail(eventSource: \(Swift.String(describing: eventSource)), maximumExecutionFrequency: \(Swift.String(describing: maximumExecutionFrequency)), messageType: \(Swift.String(describing: messageType)))"}
}

extension ConfigClientTypes {
    /// Provides the source and the message types that trigger AWS
    /// 			Config to evaluate your AWS resources against a rule. It also
    /// 			provides the frequency with which you want AWS Config to run
    /// 			evaluations for the rule if the trigger type is periodic. You can
    /// 			specify the parameter values for SourceDetail only for
    /// 			custom rules.
    public struct SourceDetail: Swift.Equatable {
        /// The source of the event, such as an AWS service, that triggers
        /// 			AWS Config to evaluate your AWS resources.
        public let eventSource: ConfigClientTypes.EventSource?
        /// The frequency at which you want AWS Config to run evaluations
        /// 			for a custom rule with a periodic trigger. If you specify a value
        /// 			for MaximumExecutionFrequency, then
        /// 				MessageType must use the
        /// 				ScheduledNotification value.
        ///
        ///
        /// 		
        ///
        ///
        /// 		
        /// 			         By default, rules with a periodic trigger are evaluated
        /// 				every 24 hours. To change the frequency, specify a valid value
        /// 				for the MaximumExecutionFrequency
        /// 				parameter.
        /// 			         Based on the valid value you choose, AWS Config runs
        /// 				evaluations once for each valid value. For example, if you
        /// 				choose Three_Hours, AWS Config runs evaluations
        /// 				once every three hours. In this case, Three_Hours
        /// 				is the frequency of this rule.
        /// 		
        public let maximumExecutionFrequency: ConfigClientTypes.MaximumExecutionFrequency?
        /// The type of notification that triggers AWS Config to run an
        /// 			evaluation for a rule. You can specify the following notification
        /// 			types:
        ///
        ///
        /// 		
        ///
        /// 				
        /// 					             ConfigurationItemChangeNotification - Triggers
        /// 					an evaluation when AWS Config delivers a configuration item
        /// 					as a result of a resource change.
        /// 			
        ///
        /// 				
        ///                   OversizedConfigurationItemChangeNotification
        /// 					- Triggers an evaluation when AWS Config delivers an
        /// 					oversized configuration item. AWS Config may generate this
        /// 					notification type when a resource changes and the
        /// 					notification exceeds the maximum size allowed by Amazon
        /// 					SNS.
        /// 			
        ///
        /// 				
        ///                   ScheduledNotification - Triggers a
        /// 					periodic evaluation at the frequency specified for
        /// 						MaximumExecutionFrequency.
        /// 			
        ///
        /// 				
        ///                   ConfigurationSnapshotDeliveryCompleted -
        /// 					Triggers a periodic evaluation when AWS Config delivers a
        /// 					configuration snapshot.
        /// 			
        ///
        ///
        /// 		       If you want your custom rule to be triggered by configuration
        /// 			changes, specify two SourceDetail objects, one for
        /// 				ConfigurationItemChangeNotification and one for
        /// 				OversizedConfigurationItemChangeNotification.
        public let messageType: ConfigClientTypes.MessageType?

        public init (
            eventSource: ConfigClientTypes.EventSource? = nil,
            maximumExecutionFrequency: ConfigClientTypes.MaximumExecutionFrequency? = nil,
            messageType: ConfigClientTypes.MessageType? = nil
        )
        {
            self.eventSource = eventSource
            self.maximumExecutionFrequency = maximumExecutionFrequency
            self.messageType = messageType
        }
    }

}

extension ConfigClientTypes.SsmControls: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case concurrentExecutionRatePercentage = "ConcurrentExecutionRatePercentage"
        case errorPercentage = "ErrorPercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let concurrentExecutionRatePercentage = concurrentExecutionRatePercentage {
            try encodeContainer.encode(concurrentExecutionRatePercentage, forKey: .concurrentExecutionRatePercentage)
        }
        if let errorPercentage = errorPercentage {
            try encodeContainer.encode(errorPercentage, forKey: .errorPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let concurrentExecutionRatePercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .concurrentExecutionRatePercentage)
        concurrentExecutionRatePercentage = concurrentExecutionRatePercentageDecoded
        let errorPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .errorPercentage)
        errorPercentage = errorPercentageDecoded
    }
}

extension ConfigClientTypes.SsmControls: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SsmControls(concurrentExecutionRatePercentage: \(Swift.String(describing: concurrentExecutionRatePercentage)), errorPercentage: \(Swift.String(describing: errorPercentage)))"}
}

extension ConfigClientTypes {
    /// AWS Systems Manager (SSM) specific remediation controls.
    public struct SsmControls: Swift.Equatable {
        /// The maximum percentage of remediation actions allowed to run in parallel on the non-compliant resources for that specific rule. You can specify a percentage, such as 10%. The default value is 10.
        public let concurrentExecutionRatePercentage: Swift.Int?
        /// The percentage of errors that are allowed before SSM stops running automations on non-compliant resources for that specific rule.
        /// 			You can specify a percentage of errors, for example 10%. If you do not specifiy a percentage, the default is 50%.
        /// 			For example, if you set the ErrorPercentage to 40% for 10 non-compliant resources, then SSM stops running the automations when the fifth error is received.
        public let errorPercentage: Swift.Int?

        public init (
            concurrentExecutionRatePercentage: Swift.Int? = nil,
            errorPercentage: Swift.Int? = nil
        )
        {
            self.concurrentExecutionRatePercentage = concurrentExecutionRatePercentage
            self.errorPercentage = errorPercentage
        }
    }

}

public struct StartConfigRulesEvaluationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartConfigRulesEvaluationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartConfigRulesEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartConfigRulesEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartConfigRulesEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartConfigRulesEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartConfigRulesEvaluationOutputError>
}

extension StartConfigRulesEvaluationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartConfigRulesEvaluationInput(configRuleNames: \(Swift.String(describing: configRuleNames)))"}
}

extension StartConfigRulesEvaluationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleNames = "ConfigRuleNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleNames = configRuleNames {
            var configRuleNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .configRuleNames)
            for reevaluateconfigrulenames0 in configRuleNames {
                try configRuleNamesContainer.encode(reevaluateconfigrulenames0)
            }
        }
    }
}

public struct StartConfigRulesEvaluationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartConfigRulesEvaluationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartConfigRulesEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartConfigRulesEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartConfigRulesEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartConfigRulesEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartConfigRulesEvaluationOutputError>
}

public struct StartConfigRulesEvaluationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartConfigRulesEvaluationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartConfigRulesEvaluationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartConfigRulesEvaluationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartConfigRulesEvaluationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartConfigRulesEvaluationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartConfigRulesEvaluationOutputError>
}

///
public struct StartConfigRulesEvaluationInput: Swift.Equatable {
    /// The list of names of AWS Config rules that you want to run
    /// 			evaluations for.
    public let configRuleNames: [Swift.String]?

    public init (
        configRuleNames: [Swift.String]? = nil
    )
    {
        self.configRuleNames = configRuleNames
    }
}

struct StartConfigRulesEvaluationInputBody: Swift.Equatable {
    public let configRuleNames: [Swift.String]?
}

extension StartConfigRulesEvaluationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleNames = "ConfigRuleNames"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .configRuleNames)
        var configRuleNamesDecoded0:[Swift.String]? = nil
        if let configRuleNamesContainer = configRuleNamesContainer {
            configRuleNamesDecoded0 = [Swift.String]()
            for string0 in configRuleNamesContainer {
                if let string0 = string0 {
                    configRuleNamesDecoded0?.append(string0)
                }
            }
        }
        configRuleNames = configRuleNamesDecoded0
    }
}

extension StartConfigRulesEvaluationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartConfigRulesEvaluationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigRuleException" : self = .noSuchConfigRuleException(try NoSuchConfigRuleException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartConfigRulesEvaluationOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case noSuchConfigRuleException(NoSuchConfigRuleException)
    case resourceInUseException(ResourceInUseException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartConfigRulesEvaluationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartConfigRulesEvaluationOutputResponse()"}
}

extension StartConfigRulesEvaluationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// The output when you start the evaluation for the specified AWS
/// 			Config rule.
public struct StartConfigRulesEvaluationOutputResponse: Swift.Equatable {

    public init() {}
}

struct StartConfigRulesEvaluationOutputResponseBody: Swift.Equatable {
}

extension StartConfigRulesEvaluationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct StartConfigurationRecorderInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartConfigurationRecorderInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartConfigurationRecorderOutputError>
}

extension StartConfigurationRecorderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartConfigurationRecorderInput(configurationRecorderName: \(Swift.String(describing: configurationRecorderName)))"}
}

extension StartConfigurationRecorderInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorderName = "ConfigurationRecorderName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationRecorderName = configurationRecorderName {
            try encodeContainer.encode(configurationRecorderName, forKey: .configurationRecorderName)
        }
    }
}

public struct StartConfigurationRecorderInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartConfigurationRecorderInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartConfigurationRecorderOutputError>
}

public struct StartConfigurationRecorderInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartConfigurationRecorderInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartConfigurationRecorderOutputError>
}

/// The input for the StartConfigurationRecorder
/// 			action.
public struct StartConfigurationRecorderInput: Swift.Equatable {
    /// The name of the recorder object that records each configuration
    /// 			change made to the resources.
    /// This member is required.
    public let configurationRecorderName: Swift.String?

    public init (
        configurationRecorderName: Swift.String? = nil
    )
    {
        self.configurationRecorderName = configurationRecorderName
    }
}

struct StartConfigurationRecorderInputBody: Swift.Equatable {
    public let configurationRecorderName: Swift.String?
}

extension StartConfigurationRecorderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorderName = "ConfigurationRecorderName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationRecorderNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationRecorderName)
        configurationRecorderName = configurationRecorderNameDecoded
    }
}

extension StartConfigurationRecorderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartConfigurationRecorderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoAvailableDeliveryChannelException" : self = .noAvailableDeliveryChannelException(try NoAvailableDeliveryChannelException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchConfigurationRecorderException" : self = .noSuchConfigurationRecorderException(try NoSuchConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartConfigurationRecorderOutputError: Swift.Error, Swift.Equatable {
    case noAvailableDeliveryChannelException(NoAvailableDeliveryChannelException)
    case noSuchConfigurationRecorderException(NoSuchConfigurationRecorderException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartConfigurationRecorderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartConfigurationRecorderOutputResponse()"}
}

extension StartConfigurationRecorderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StartConfigurationRecorderOutputResponse: Swift.Equatable {

    public init() {}
}

struct StartConfigurationRecorderOutputResponseBody: Swift.Equatable {
}

extension StartConfigurationRecorderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct StartRemediationExecutionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartRemediationExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartRemediationExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartRemediationExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartRemediationExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartRemediationExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartRemediationExecutionOutputError>
}

extension StartRemediationExecutionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartRemediationExecutionInput(configRuleName: \(Swift.String(describing: configRuleName)), resourceKeys: \(Swift.String(describing: resourceKeys)))"}
}

extension StartRemediationExecutionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case resourceKeys = "ResourceKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configRuleName = configRuleName {
            try encodeContainer.encode(configRuleName, forKey: .configRuleName)
        }
        if let resourceKeys = resourceKeys {
            var resourceKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceKeys)
            for resourcekeys0 in resourceKeys {
                try resourceKeysContainer.encode(resourcekeys0)
            }
        }
    }
}

public struct StartRemediationExecutionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartRemediationExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartRemediationExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartRemediationExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartRemediationExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartRemediationExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartRemediationExecutionOutputError>
}

public struct StartRemediationExecutionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartRemediationExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartRemediationExecutionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartRemediationExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartRemediationExecutionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartRemediationExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartRemediationExecutionOutputError>
}

public struct StartRemediationExecutionInput: Swift.Equatable {
    /// The list of names of AWS Config rules that you want to run remediation execution for.
    /// This member is required.
    public let configRuleName: Swift.String?
    /// A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID.
    /// This member is required.
    public let resourceKeys: [ConfigClientTypes.ResourceKey]?

    public init (
        configRuleName: Swift.String? = nil,
        resourceKeys: [ConfigClientTypes.ResourceKey]? = nil
    )
    {
        self.configRuleName = configRuleName
        self.resourceKeys = resourceKeys
    }
}

struct StartRemediationExecutionInputBody: Swift.Equatable {
    public let configRuleName: Swift.String?
    public let resourceKeys: [ConfigClientTypes.ResourceKey]?
}

extension StartRemediationExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configRuleName = "ConfigRuleName"
        case resourceKeys = "ResourceKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configRuleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configRuleName)
        configRuleName = configRuleNameDecoded
        let resourceKeysContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ResourceKey?].self, forKey: .resourceKeys)
        var resourceKeysDecoded0:[ConfigClientTypes.ResourceKey]? = nil
        if let resourceKeysContainer = resourceKeysContainer {
            resourceKeysDecoded0 = [ConfigClientTypes.ResourceKey]()
            for structure0 in resourceKeysContainer {
                if let structure0 = structure0 {
                    resourceKeysDecoded0?.append(structure0)
                }
            }
        }
        resourceKeys = resourceKeysDecoded0
    }
}

extension StartRemediationExecutionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartRemediationExecutionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InsufficientPermissionsException" : self = .insufficientPermissionsException(try InsufficientPermissionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NoSuchRemediationConfigurationException" : self = .noSuchRemediationConfigurationException(try NoSuchRemediationConfigurationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartRemediationExecutionOutputError: Swift.Error, Swift.Equatable {
    case insufficientPermissionsException(InsufficientPermissionsException)
    case invalidParameterValueException(InvalidParameterValueException)
    case noSuchRemediationConfigurationException(NoSuchRemediationConfigurationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartRemediationExecutionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartRemediationExecutionOutputResponse(failedItems: \(Swift.String(describing: failedItems)), failureMessage: \(Swift.String(describing: failureMessage)))"}
}

extension StartRemediationExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartRemediationExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedItems = output.failedItems
            self.failureMessage = output.failureMessage
        } else {
            self.failedItems = nil
            self.failureMessage = nil
        }
    }
}

public struct StartRemediationExecutionOutputResponse: Swift.Equatable {
    /// For resources that have failed to start execution, the API returns a resource key object.
    public let failedItems: [ConfigClientTypes.ResourceKey]?
    /// Returns a failure message. For example, the resource is already compliant.
    public let failureMessage: Swift.String?

    public init (
        failedItems: [ConfigClientTypes.ResourceKey]? = nil,
        failureMessage: Swift.String? = nil
    )
    {
        self.failedItems = failedItems
        self.failureMessage = failureMessage
    }
}

struct StartRemediationExecutionOutputResponseBody: Swift.Equatable {
    public let failureMessage: Swift.String?
    public let failedItems: [ConfigClientTypes.ResourceKey]?
}

extension StartRemediationExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedItems = "FailedItems"
        case failureMessage = "FailureMessage"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failureMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureMessage)
        failureMessage = failureMessageDecoded
        let failedItemsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.ResourceKey?].self, forKey: .failedItems)
        var failedItemsDecoded0:[ConfigClientTypes.ResourceKey]? = nil
        if let failedItemsContainer = failedItemsContainer {
            failedItemsDecoded0 = [ConfigClientTypes.ResourceKey]()
            for structure0 in failedItemsContainer {
                if let structure0 = structure0 {
                    failedItemsDecoded0?.append(structure0)
                }
            }
        }
        failedItems = failedItemsDecoded0
    }
}

extension ConfigClientTypes.StaticValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for staticparametervalues0 in values {
                try valuesContainer.encode(staticparametervalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ConfigClientTypes.StaticValue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StaticValue(values: \(Swift.String(describing: values)))"}
}

extension ConfigClientTypes {
    /// The static value of the resource.
    public struct StaticValue: Swift.Equatable {
        /// A list of values. For example, the ARN of the assumed role.
        /// This member is required.
        public let values: [Swift.String]?

        public init (
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension ConfigClientTypes.StatusDetailFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case memberAccountRuleStatus = "MemberAccountRuleStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let memberAccountRuleStatus = memberAccountRuleStatus {
            try encodeContainer.encode(memberAccountRuleStatus.rawValue, forKey: .memberAccountRuleStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let memberAccountRuleStatusDecoded = try containerValues.decodeIfPresent(ConfigClientTypes.MemberAccountRuleStatus.self, forKey: .memberAccountRuleStatus)
        memberAccountRuleStatus = memberAccountRuleStatusDecoded
    }
}

extension ConfigClientTypes.StatusDetailFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StatusDetailFilters(accountId: \(Swift.String(describing: accountId)), memberAccountRuleStatus: \(Swift.String(describing: memberAccountRuleStatus)))"}
}

extension ConfigClientTypes {
    /// Status filter object to filter results based on specific member account ID or status type for an organization config rule.
    public struct StatusDetailFilters: Swift.Equatable {
        /// The 12-digit account ID of the member account within an organization.
        public let accountId: Swift.String?
        /// Indicates deployment status for config rule in the member account.
        /// 			When master account calls PutOrganizationConfigRule action for the first time, config rule status is created in the member account.
        /// 			When master account calls PutOrganizationConfigRule action for the second time, config rule status is updated in the member account.
        /// 			Config rule status is deleted when the master account deletes OrganizationConfigRule and disables service access for config-multiaccountsetup.amazonaws.com.
        /// 			
        /// 		       AWS Config sets the state of the rule to:
        /// 		
        ///
        ///
        ///                   CREATE_SUCCESSFUL when config rule has been created in the member account.
        ///
        ///
        ///
        ///                   CREATE_IN_PROGRESS when config rule is being created in the member account.
        ///
        ///
        ///
        ///                   CREATE_FAILED when config rule creation has failed in the member account.
        ///
        ///
        ///
        ///                   DELETE_FAILED when config rule deletion has failed in the member account.
        ///
        ///
        ///
        ///                   DELETE_IN_PROGRESS when config rule is being deleted in the member account.
        ///
        ///
        ///
        ///                   DELETE_SUCCESSFUL when config rule has been deleted in the member account.
        ///
        ///
        ///
        ///                   UPDATE_SUCCESSFUL when config rule has been updated in the member account.
        ///
        ///
        ///
        ///                   UPDATE_IN_PROGRESS when config rule is being updated in the member account.
        ///
        ///
        ///
        ///                   UPDATE_FAILED when config rule deletion has failed in the member account.
        ///
        ///
        public let memberAccountRuleStatus: ConfigClientTypes.MemberAccountRuleStatus?

        public init (
            accountId: Swift.String? = nil,
            memberAccountRuleStatus: ConfigClientTypes.MemberAccountRuleStatus? = nil
        )
        {
            self.accountId = accountId
            self.memberAccountRuleStatus = memberAccountRuleStatus
        }
    }

}

public struct StopConfigurationRecorderInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopConfigurationRecorderInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopConfigurationRecorderOutputError>
}

extension StopConfigurationRecorderInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopConfigurationRecorderInput(configurationRecorderName: \(Swift.String(describing: configurationRecorderName)))"}
}

extension StopConfigurationRecorderInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorderName = "ConfigurationRecorderName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configurationRecorderName = configurationRecorderName {
            try encodeContainer.encode(configurationRecorderName, forKey: .configurationRecorderName)
        }
    }
}

public struct StopConfigurationRecorderInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopConfigurationRecorderInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopConfigurationRecorderOutputError>
}

public struct StopConfigurationRecorderInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopConfigurationRecorderInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopConfigurationRecorderInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopConfigurationRecorderOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopConfigurationRecorderInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopConfigurationRecorderOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopConfigurationRecorderOutputError>
}

/// The input for the StopConfigurationRecorder action.
public struct StopConfigurationRecorderInput: Swift.Equatable {
    /// The name of the recorder object that records each configuration change made to the resources.
    /// This member is required.
    public let configurationRecorderName: Swift.String?

    public init (
        configurationRecorderName: Swift.String? = nil
    )
    {
        self.configurationRecorderName = configurationRecorderName
    }
}

struct StopConfigurationRecorderInputBody: Swift.Equatable {
    public let configurationRecorderName: Swift.String?
}

extension StopConfigurationRecorderInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configurationRecorderName = "ConfigurationRecorderName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationRecorderNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .configurationRecorderName)
        configurationRecorderName = configurationRecorderNameDecoded
    }
}

extension StopConfigurationRecorderOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopConfigurationRecorderOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "NoSuchConfigurationRecorderException" : self = .noSuchConfigurationRecorderException(try NoSuchConfigurationRecorderException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopConfigurationRecorderOutputError: Swift.Error, Swift.Equatable {
    case noSuchConfigurationRecorderException(NoSuchConfigurationRecorderException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopConfigurationRecorderOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopConfigurationRecorderOutputResponse()"}
}

extension StopConfigurationRecorderOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct StopConfigurationRecorderOutputResponse: Swift.Equatable {

    public init() {}
}

struct StopConfigurationRecorderOutputResponseBody: Swift.Equatable {
}

extension StopConfigurationRecorderOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ConfigClientTypes.StoredQuery: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case expression = "Expression"
        case queryArn = "QueryArn"
        case queryId = "QueryId"
        case queryName = "QueryName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let expression = expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if let queryArn = queryArn {
            try encodeContainer.encode(queryArn, forKey: .queryArn)
        }
        if let queryId = queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
        if let queryName = queryName {
            try encodeContainer.encode(queryName, forKey: .queryName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
        let queryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryArn)
        queryArn = queryArnDecoded
        let queryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryName)
        queryName = queryNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
    }
}

extension ConfigClientTypes.StoredQuery: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StoredQuery(description: \(Swift.String(describing: description)), expression: \(Swift.String(describing: expression)), queryArn: \(Swift.String(describing: queryArn)), queryId: \(Swift.String(describing: queryId)), queryName: \(Swift.String(describing: queryName)))"}
}

extension ConfigClientTypes {
    /// Provides the details of a stored query.
    public struct StoredQuery: Swift.Equatable {
        /// A unique description for the query.
        public let description: Swift.String?
        /// The expression of the query. For example, SELECT
        /// 			resourceId,
        /// 			resourceType,
        /// 			supplementaryConfiguration.BucketVersioningConfiguration.status
        /// 			WHERE
        /// 			resourceType = 'AWS::S3::Bucket'
        /// 			AND supplementaryConfiguration.BucketVersioningConfiguration.status = 'Off'.
        ///
        public let expression: Swift.String?
        /// Amazon Resource Name (ARN) of the query. For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.
        public let queryArn: Swift.String?
        /// The ID of the query.
        public let queryId: Swift.String?
        /// The name of the query.
        /// This member is required.
        public let queryName: Swift.String?

        public init (
            description: Swift.String? = nil,
            expression: Swift.String? = nil,
            queryArn: Swift.String? = nil,
            queryId: Swift.String? = nil,
            queryName: Swift.String? = nil
        )
        {
            self.description = description
            self.expression = expression
            self.queryArn = queryArn
            self.queryId = queryId
            self.queryName = queryName
        }
    }

}

extension ConfigClientTypes.StoredQueryMetadata: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case queryArn = "QueryArn"
        case queryId = "QueryId"
        case queryName = "QueryName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let queryArn = queryArn {
            try encodeContainer.encode(queryArn, forKey: .queryArn)
        }
        if let queryId = queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
        if let queryName = queryName {
            try encodeContainer.encode(queryName, forKey: .queryName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
        let queryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryArn)
        queryArn = queryArnDecoded
        let queryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryName)
        queryName = queryNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension ConfigClientTypes.StoredQueryMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StoredQueryMetadata(description: \(Swift.String(describing: description)), queryArn: \(Swift.String(describing: queryArn)), queryId: \(Swift.String(describing: queryId)), queryName: \(Swift.String(describing: queryName)))"}
}

extension ConfigClientTypes {
    /// Returns details of a specific query.
    public struct StoredQueryMetadata: Swift.Equatable {
        /// A unique description for the query.
        public let description: Swift.String?
        /// Amazon Resource Name (ARN) of the query. For example, arn:partition:service:region:account-id:resource-type/resource-name/resource-id.
        /// This member is required.
        public let queryArn: Swift.String?
        /// The ID of the query.
        /// This member is required.
        public let queryId: Swift.String?
        /// The name of the query.
        /// This member is required.
        public let queryName: Swift.String?

        public init (
            description: Swift.String? = nil,
            queryArn: Swift.String? = nil,
            queryId: Swift.String? = nil,
            queryName: Swift.String? = nil
        )
        {
            self.description = description
            self.queryArn = queryArn
            self.queryId = queryId
            self.queryName = queryName
        }
    }

}

extension ConfigClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension ConfigClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension ConfigClientTypes {
    /// The tags for the resource. The metadata that you apply to a resource to help you categorize and organize them.
    /// 			Each tag consists of a key and an optional value, both of which you define.
    /// 			Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    public struct Tag: Swift.Equatable {
        /// One part of a key-value pair that make up a tag. A key is a general label that acts like a category for more specific tag values.
        public let key: Swift.String?
        /// The optional part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key).
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the supported resources are ConfigRule, ConfigurationAggregator and AggregatorAuthorization.
    /// This member is required.
    public let resourceArn: Swift.String?
    /// An array of tag object.
    /// This member is required.
    public let tags: [ConfigClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [ConfigClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let tags: [ConfigClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([ConfigClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[ConfigClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [ConfigClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFoundException(ResourceNotFoundException)
    case tooManyTagsException(TooManyTagsException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension TooManyTagsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyTagsException(message: \(Swift.String(describing: message)))"}
}

extension TooManyTagsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TooManyTagsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have reached the limit of the number of tags you can use. You have more than 50 tags.
public struct TooManyTagsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTagsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyTagsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UntagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. Currently, the supported resources are ConfigRule, ConfigurationAggregator and AggregatorAuthorization.
    /// This member is required.
    public let resourceArn: Swift.String?
    /// The keys of the tags to be removed.
    /// This member is required.
    public let tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationException(message: \(Swift.String(describing: message)))"}
}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The requested action is not valid.
/// 		       For PutStoredQuery, you will see this exception if there are missing required fields or if the input value fails the validation, or if you are trying to create more than 300 queries.
/// 		       For GetStoredQuery, ListStoredQuery, and DeleteStoredQuery you will see this exception if there are missing required fields or if the input value fails the validation.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Error executing the command
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
