// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutConformancePackInputHeadersMiddleware: Middleware {
    public let id: String = "PutConformancePackInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutConformancePackInput>,
                  next: H) -> Swift.Result<OperationOutput<PutConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutConformancePackInput>
    public typealias MOutput = OperationOutput<PutConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutConformancePackOutputError>
}

public struct PutConformancePackInputQueryItemMiddleware: Middleware {
    public let id: String = "PutConformancePackInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutConformancePackInput>,
                  next: H) -> Swift.Result<OperationOutput<PutConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutConformancePackInput>
    public typealias MOutput = OperationOutput<PutConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutConformancePackOutputError>
}

public struct PutConformancePackInputBodyMiddleware: Middleware {
    public let id: String = "PutConformancePackInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutConformancePackInput>,
                  next: H) -> Swift.Result<OperationOutput<PutConformancePackOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutConformancePackInput>
    public typealias MOutput = OperationOutput<PutConformancePackOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutConformancePackOutputError>
}

extension PutConformancePackInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case conformancePackInputParameters = "ConformancePackInputParameters"
        case conformancePackName = "ConformancePackName"
        case deliveryS3Bucket = "DeliveryS3Bucket"
        case deliveryS3KeyPrefix = "DeliveryS3KeyPrefix"
        case templateBody = "TemplateBody"
        case templateS3Uri = "TemplateS3Uri"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let conformancePackInputParameters = conformancePackInputParameters {
            var conformancePackInputParametersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .conformancePackInputParameters)
            for conformancepackinputparameters0 in conformancePackInputParameters {
                try conformancePackInputParametersContainer.encode(conformancepackinputparameters0)
            }
        }
        if let conformancePackName = conformancePackName {
            try encodeContainer.encode(conformancePackName, forKey: .conformancePackName)
        }
        if let deliveryS3Bucket = deliveryS3Bucket {
            try encodeContainer.encode(deliveryS3Bucket, forKey: .deliveryS3Bucket)
        }
        if let deliveryS3KeyPrefix = deliveryS3KeyPrefix {
            try encodeContainer.encode(deliveryS3KeyPrefix, forKey: .deliveryS3KeyPrefix)
        }
        if let templateBody = templateBody {
            try encodeContainer.encode(templateBody, forKey: .templateBody)
        }
        if let templateS3Uri = templateS3Uri {
            try encodeContainer.encode(templateS3Uri, forKey: .templateS3Uri)
        }
    }
}
