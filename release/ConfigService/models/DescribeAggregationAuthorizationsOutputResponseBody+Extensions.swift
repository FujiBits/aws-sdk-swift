// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeAggregationAuthorizationsOutputResponseBody: Equatable {
    public let aggregationAuthorizations: [AggregationAuthorization]?
    public let nextToken: String?
}

extension DescribeAggregationAuthorizationsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case aggregationAuthorizations = "AggregationAuthorizations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aggregationAuthorizationsContainer = try containerValues.decodeIfPresent([AggregationAuthorization?].self, forKey: .aggregationAuthorizations)
        var aggregationAuthorizationsDecoded0:[AggregationAuthorization]? = nil
        if let aggregationAuthorizationsContainer = aggregationAuthorizationsContainer {
            aggregationAuthorizationsDecoded0 = [AggregationAuthorization]()
            for structure0 in aggregationAuthorizationsContainer {
                if let structure0 = structure0 {
                    aggregationAuthorizationsDecoded0?.append(structure0)
                }
            }
        }
        aggregationAuthorizations = aggregationAuthorizationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
