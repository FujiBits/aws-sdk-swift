// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension DaxClient {
    /// Creates a DAX cluster. All nodes in the cluster run the same DAX caching software.
    func createCluster(input: CreateClusterInput) async throws -> CreateClusterOutputResponse
    {
        typealias createClusterContinuation = CheckedContinuation<CreateClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createClusterContinuation) in
            createCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new parameter group. A parameter group is a collection of parameters that
    ///             you apply to all of the nodes in a DAX cluster.
    func createParameterGroup(input: CreateParameterGroupInput) async throws -> CreateParameterGroupOutputResponse
    {
        typealias createParameterGroupContinuation = CheckedContinuation<CreateParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createParameterGroupContinuation) in
            createParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new subnet group.
    func createSubnetGroup(input: CreateSubnetGroupInput) async throws -> CreateSubnetGroupOutputResponse
    {
        typealias createSubnetGroupContinuation = CheckedContinuation<CreateSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSubnetGroupContinuation) in
            createSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes one or more nodes from a DAX cluster.
    ///
    ///             You cannot use DecreaseReplicationFactor to remove the last node in a DAX cluster. If you need to do this, use DeleteCluster instead.
    ///
    func decreaseReplicationFactor(input: DecreaseReplicationFactorInput) async throws -> DecreaseReplicationFactorOutputResponse
    {
        typealias decreaseReplicationFactorContinuation = CheckedContinuation<DecreaseReplicationFactorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: decreaseReplicationFactorContinuation) in
            decreaseReplicationFactor(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a previously provisioned DAX cluster.
    ///                 DeleteCluster deletes all associated nodes, node endpoints
    ///             and the DAX cluster itself. When you receive a successful response from this action,
    ///             DAX immediately begins deleting the cluster; you cannot cancel or revert this
    ///             action.
    func deleteCluster(input: DeleteClusterInput) async throws -> DeleteClusterOutputResponse
    {
        typealias deleteClusterContinuation = CheckedContinuation<DeleteClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteClusterContinuation) in
            deleteCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified parameter group. You cannot delete a parameter group if it is
    ///             associated with any DAX clusters.
    func deleteParameterGroup(input: DeleteParameterGroupInput) async throws -> DeleteParameterGroupOutputResponse
    {
        typealias deleteParameterGroupContinuation = CheckedContinuation<DeleteParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteParameterGroupContinuation) in
            deleteParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a subnet group.
    ///
    ///             You cannot delete a subnet group if it is associated with any DAX
    ///                 clusters.
    ///
    func deleteSubnetGroup(input: DeleteSubnetGroupInput) async throws -> DeleteSubnetGroupOutputResponse
    {
        typealias deleteSubnetGroupContinuation = CheckedContinuation<DeleteSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSubnetGroupContinuation) in
            deleteSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about all provisioned DAX clusters if no cluster identifier
    ///             is specified, or about a specific DAX cluster if a cluster identifier is
    ///             supplied.
    ///         If the cluster is in the CREATING state, only cluster level information will be
    ///             displayed until all of the nodes are successfully provisioned.
    ///         If the cluster is in the DELETING state, only cluster level information will be
    ///             displayed.
    ///         If nodes are currently being added to the DAX cluster, node endpoint information
    ///             and creation time for the additional nodes will not be displayed until they are
    ///             completely provisioned. When the DAX cluster state is available,
    ///             the cluster is ready for use.
    ///         If nodes are currently being removed from the DAX cluster, no endpoint
    ///             information for the removed nodes is displayed.
    func describeClusters(input: DescribeClustersInput) async throws -> DescribeClustersOutputResponse
    {
        typealias describeClustersContinuation = CheckedContinuation<DescribeClustersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeClustersContinuation) in
            describeClusters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the default system parameter information for the DAX caching
    ///             software.
    func describeDefaultParameters(input: DescribeDefaultParametersInput) async throws -> DescribeDefaultParametersOutputResponse
    {
        typealias describeDefaultParametersContinuation = CheckedContinuation<DescribeDefaultParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDefaultParametersContinuation) in
            describeDefaultParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns events related to DAX clusters and parameter groups. You can obtain
    ///             events specific to a particular DAX cluster or parameter group by providing the name
    ///             as a parameter.
    ///         By default, only the events occurring within the last 24 hours are returned; however,
    ///             you can retrieve up to 14 days' worth of events if necessary.
    func describeEvents(input: DescribeEventsInput) async throws -> DescribeEventsOutputResponse
    {
        typealias describeEventsContinuation = CheckedContinuation<DescribeEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventsContinuation) in
            describeEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of parameter group descriptions. If a parameter group name is
    ///             specified, the list will contain only the descriptions for that group.
    func describeParameterGroups(input: DescribeParameterGroupsInput) async throws -> DescribeParameterGroupsOutputResponse
    {
        typealias describeParameterGroupsContinuation = CheckedContinuation<DescribeParameterGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeParameterGroupsContinuation) in
            describeParameterGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the detailed parameter list for a particular parameter group.
    func describeParameters(input: DescribeParametersInput) async throws -> DescribeParametersOutputResponse
    {
        typealias describeParametersContinuation = CheckedContinuation<DescribeParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeParametersContinuation) in
            describeParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of subnet group descriptions. If a subnet group name is specified,
    ///             the list will contain only the description of that group.
    func describeSubnetGroups(input: DescribeSubnetGroupsInput) async throws -> DescribeSubnetGroupsOutputResponse
    {
        typealias describeSubnetGroupsContinuation = CheckedContinuation<DescribeSubnetGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSubnetGroupsContinuation) in
            describeSubnetGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds one or more nodes to a DAX cluster.
    func increaseReplicationFactor(input: IncreaseReplicationFactorInput) async throws -> IncreaseReplicationFactorOutputResponse
    {
        typealias increaseReplicationFactorContinuation = CheckedContinuation<IncreaseReplicationFactorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: increaseReplicationFactorContinuation) in
            increaseReplicationFactor(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all of the tags for a DAX cluster. You can call ListTags up to
    ///             10 times per second, per account.
    func listTags(input: ListTagsInput) async throws -> ListTagsOutputResponse
    {
        typealias listTagsContinuation = CheckedContinuation<ListTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsContinuation) in
            listTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Reboots a single node of a DAX cluster. The reboot action takes place
    ///             as soon as possible. During the
    ///             reboot, the node status is set to REBOOTING.
    ///
    ///
    ///                RebootNode restarts the DAX engine process and does not remove the contents of the cache.
    ///
    func rebootNode(input: RebootNodeInput) async throws -> RebootNodeOutputResponse
    {
        typealias rebootNodeContinuation = CheckedContinuation<RebootNodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rebootNodeContinuation) in
            rebootNode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a set of tags with a DAX resource.  You can call TagResource up to 5 times per second, per
    ///             account.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the association of tags from a DAX resource. You can call
    ///             UntagResource up to 5 times per second, per account.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies the settings for a DAX cluster. You can use this action to change one or
    ///             more cluster configuration parameters by specifying the parameters and the new
    ///             values.
    func updateCluster(input: UpdateClusterInput) async throws -> UpdateClusterOutputResponse
    {
        typealias updateClusterContinuation = CheckedContinuation<UpdateClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateClusterContinuation) in
            updateCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies the parameters of a parameter group. You can modify up to 20
    ///             parameters in a single request by submitting a list parameter name and value
    ///             pairs.
    func updateParameterGroup(input: UpdateParameterGroupInput) async throws -> UpdateParameterGroupOutputResponse
    {
        typealias updateParameterGroupContinuation = CheckedContinuation<UpdateParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateParameterGroupContinuation) in
            updateParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies an existing subnet group.
    func updateSubnetGroup(input: UpdateSubnetGroupInput) async throws -> UpdateSubnetGroupOutputResponse
    {
        typealias updateSubnetGroupContinuation = CheckedContinuation<UpdateSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSubnetGroupContinuation) in
            updateSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
