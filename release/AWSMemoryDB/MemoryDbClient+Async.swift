// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension MemoryDbClient {
    /// Apply the service update to a list of clusters supplied. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/managing-updates.html#applying-updates">Applying the service updates.
    func batchUpdateCluster(input: BatchUpdateClusterInput) async throws -> BatchUpdateClusterOutputResponse
    {
        typealias batchUpdateClusterContinuation = CheckedContinuation<BatchUpdateClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchUpdateClusterContinuation) in
            batchUpdateCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Makes a copy of an existing snapshot.
    func copySnapshot(input: CopySnapshotInput) async throws -> CopySnapshotOutputResponse
    {
        typealias copySnapshotContinuation = CheckedContinuation<CopySnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: copySnapshotContinuation) in
            copySnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an Access Control List. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs).
    func createACL(input: CreateACLInput) async throws -> CreateACLOutputResponse
    {
        typealias createACLContinuation = CheckedContinuation<CreateACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createACLContinuation) in
            createACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a cluster. All nodes in the cluster run the same protocol-compliant engine software.
    func createCluster(input: CreateClusterInput) async throws -> CreateClusterOutputResponse
    {
        typealias createClusterContinuation = CheckedContinuation<CreateClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createClusterContinuation) in
            createCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new MemoryDB parameter group. A parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster. For
    ///          more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/parametergroups.html">Configuring engine parameters using parameter groups.
    ///
    ///
    func createParameterGroup(input: CreateParameterGroupInput) async throws -> CreateParameterGroupOutputResponse
    {
        typealias createParameterGroupContinuation = CheckedContinuation<CreateParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createParameterGroupContinuation) in
            createParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a copy of an entire cluster at a specific moment in time.
    func createSnapshot(input: CreateSnapshotInput) async throws -> CreateSnapshotOutputResponse
    {
        typealias createSnapshotContinuation = CheckedContinuation<CreateSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSnapshotContinuation) in
            createSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a subnet group. A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment.
    ///
    ///          When you create a cluster in an Amazon VPC, you must specify a subnet group. MemoryDB uses that subnet group to choose a subnet and IP addresses within that subnet to associate with your nodes.
    ///          For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/subnetgroups.html">Subnets and subnet groups.
    func createSubnetGroup(input: CreateSubnetGroupInput) async throws -> CreateSubnetGroupOutputResponse
    {
        typealias createSubnetGroupContinuation = CheckedContinuation<CreateSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSubnetGroupContinuation) in
            createSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a MemoryDB user. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs).
    func createUser(input: CreateUserInput) async throws -> CreateUserOutputResponse
    {
        typealias createUserContinuation = CheckedContinuation<CreateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserContinuation) in
            createUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an Access Control List. The ACL must first be disassociated from the cluster before it can be deleted. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs).
    func deleteACL(input: DeleteACLInput) async throws -> DeleteACLOutputResponse
    {
        typealias deleteACLContinuation = CheckedContinuation<DeleteACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteACLContinuation) in
            deleteACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a cluster. It also deletes all associated nodes and node endpoints
    func deleteCluster(input: DeleteClusterInput) async throws -> DeleteClusterOutputResponse
    {
        typealias deleteClusterContinuation = CheckedContinuation<DeleteClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteClusterContinuation) in
            deleteCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any clusters.
    ///          You cannot delete the default parameter groups in your account.
    func deleteParameterGroup(input: DeleteParameterGroupInput) async throws -> DeleteParameterGroupOutputResponse
    {
        typealias deleteParameterGroupContinuation = CheckedContinuation<DeleteParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteParameterGroupContinuation) in
            deleteParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing snapshot. When you receive a successful response from this operation, MemoryDB immediately begins deleting the snapshot; you cannot cancel or revert this operation.
    func deleteSnapshot(input: DeleteSnapshotInput) async throws -> DeleteSnapshotOutputResponse
    {
        typealias deleteSnapshotContinuation = CheckedContinuation<DeleteSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSnapshotContinuation) in
            deleteSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a subnet group. You cannot delete a default subnet group or one that is associated with any clusters.
    func deleteSubnetGroup(input: DeleteSubnetGroupInput) async throws -> DeleteSubnetGroupOutputResponse
    {
        typealias deleteSubnetGroupContinuation = CheckedContinuation<DeleteSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSubnetGroupContinuation) in
            deleteSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a user. The user will be removed from all ACLs and in turn removed from all clusters.
    func deleteUser(input: DeleteUserInput) async throws -> DeleteUserOutputResponse
    {
        typealias deleteUserContinuation = CheckedContinuation<DeleteUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserContinuation) in
            deleteUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of ACLs
    func describeACLs(input: DescribeACLsInput) async throws -> DescribeACLsOutputResponse
    {
        typealias describeACLsContinuation = CheckedContinuation<DescribeACLsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeACLsContinuation) in
            describeACLs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cluster if a cluster name is supplied.
    func describeClusters(input: DescribeClustersInput) async throws -> DescribeClustersOutputResponse
    {
        typealias describeClustersContinuation = CheckedContinuation<DescribeClustersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeClustersContinuation) in
            describeClusters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the available Redis engine versions.
    func describeEngineVersions(input: DescribeEngineVersionsInput) async throws -> DescribeEngineVersionsOutputResponse
    {
        typealias describeEngineVersionsContinuation = CheckedContinuation<DescribeEngineVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEngineVersionsContinuation) in
            describeEngineVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns events related to clusters, security groups, and parameter groups. You can obtain events specific to a particular cluster, security group, or parameter group by providing the name as a parameter.
    ///
    ///          By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.
    func describeEvents(input: DescribeEventsInput) async throws -> DescribeEventsOutputResponse
    {
        typealias describeEventsContinuation = CheckedContinuation<DescribeEventsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventsContinuation) in
            describeEvents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of parameter group descriptions. If a parameter group name is specified, the list contains only the descriptions for that group.
    func describeParameterGroups(input: DescribeParameterGroupsInput) async throws -> DescribeParameterGroupsOutputResponse
    {
        typealias describeParameterGroupsContinuation = CheckedContinuation<DescribeParameterGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeParameterGroupsContinuation) in
            describeParameterGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the detailed parameter list for a particular parameter group.
    func describeParameters(input: DescribeParametersInput) async throws -> DescribeParametersOutputResponse
    {
        typealias describeParametersContinuation = CheckedContinuation<DescribeParametersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeParametersContinuation) in
            describeParameters(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns details of the service updates
    func describeServiceUpdates(input: DescribeServiceUpdatesInput) async throws -> DescribeServiceUpdatesOutputResponse
    {
        typealias describeServiceUpdatesContinuation = CheckedContinuation<DescribeServiceUpdatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeServiceUpdatesContinuation) in
            describeServiceUpdates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about cluster snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot,
    ///          or just the snapshots associated with a particular cluster.
    func describeSnapshots(input: DescribeSnapshotsInput) async throws -> DescribeSnapshotsOutputResponse
    {
        typealias describeSnapshotsContinuation = CheckedContinuation<DescribeSnapshotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSnapshotsContinuation) in
            describeSnapshots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group.
    func describeSubnetGroups(input: DescribeSubnetGroupsInput) async throws -> DescribeSubnetGroupsOutputResponse
    {
        typealias describeSubnetGroupsContinuation = CheckedContinuation<DescribeSubnetGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSubnetGroupsContinuation) in
            describeSubnetGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of users.
    func describeUsers(input: DescribeUsersInput) async throws -> DescribeUsersOutputResponse
    {
        typealias describeUsersContinuation = CheckedContinuation<DescribeUsersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUsersContinuation) in
            describeUsers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used to failover a shard
    func failoverShard(input: FailoverShardInput) async throws -> FailoverShardOutputResponse
    {
        typealias failoverShardContinuation = CheckedContinuation<FailoverShardOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: failoverShardContinuation) in
            failoverShard(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all available node types that you can scale to from your cluster's current node type.
    ///
    ///          When you use the UpdateCluster operation to scale your cluster, the value of the NodeType parameter must be one of the node types returned by this operation.
    func listAllowedNodeTypeUpdates(input: ListAllowedNodeTypeUpdatesInput) async throws -> ListAllowedNodeTypeUpdatesOutputResponse
    {
        typealias listAllowedNodeTypeUpdatesContinuation = CheckedContinuation<ListAllowedNodeTypeUpdatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAllowedNodeTypeUpdatesContinuation) in
            listAllowedNodeTypeUpdates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all tags currently on a named resource.
    ///
    ///          A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track your MemoryDB resources.
    ///          For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/Tagging-Resources.html">Tagging your MemoryDB resources
    ///
    func listTags(input: ListTagsInput) async throws -> ListTagsOutputResponse
    {
        typealias listTagsContinuation = CheckedContinuation<ListTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsContinuation) in
            listTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies the parameters of a parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire parameter group, specify the AllParameters and ParameterGroupName parameters.
    func resetParameterGroup(input: ResetParameterGroupInput) async throws -> ResetParameterGroupOutputResponse
    {
        typealias resetParameterGroupContinuation = CheckedContinuation<ResetParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetParameterGroupContinuation) in
            resetParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your MemoryDB resources.
    ///
    ///          When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. For more information, see
    ///
    ///          <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/iam.resourcelevelpermissions.html">Resource-level permissions.
    ///
    ///          For example, you can use cost-allocation tags to your MemoryDB resources, Amazon generates a cost allocation report as a comma-separated value
    ///           (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories
    ///           (such as cost centers, application names, or owners) to organize your costs across multiple services.
    ///
    ///          For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging.html">Using Cost Allocation Tags.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Use this operation to remove tags on a resource
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes the list of users that belong to the Access Control List.
    func updateACL(input: UpdateACLInput) async throws -> UpdateACLOutputResponse
    {
        typealias updateACLContinuation = CheckedContinuation<UpdateACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateACLContinuation) in
            updateACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration settings by specifying the settings and the new values.
    func updateCluster(input: UpdateClusterInput) async throws -> UpdateClusterOutputResponse
    {
        typealias updateClusterContinuation = CheckedContinuation<UpdateClusterOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateClusterContinuation) in
            updateCluster(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
    func updateParameterGroup(input: UpdateParameterGroupInput) async throws -> UpdateParameterGroupOutputResponse
    {
        typealias updateParameterGroupContinuation = CheckedContinuation<UpdateParameterGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateParameterGroupContinuation) in
            updateParameterGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a subnet group. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/ubnetGroups.Modifying.html">Updating a subnet group
    ///
    func updateSubnetGroup(input: UpdateSubnetGroupInput) async throws -> UpdateSubnetGroupOutputResponse
    {
        typealias updateSubnetGroupContinuation = CheckedContinuation<UpdateSubnetGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSubnetGroupContinuation) in
            updateSubnetGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes user password(s) and/or access string.
    func updateUser(input: UpdateUserInput) async throws -> UpdateUserOutputResponse
    {
        typealias updateUserContinuation = CheckedContinuation<UpdateUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserContinuation) in
            updateUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
