// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// MemoryDB for Redis is a fully managed, Redis-compatible, in-memory database that delivers ultra-fast performance and Multi-AZ durability for modern applications built using microservices architectures.
///
///        MemoryDB stores the entire database in-memory, enabling low latency and high throughput data access. It is compatible with Redis, a popular open source data store, enabling you to leverage Redisâ€™ flexible and friendly data structures, APIs, and commands.
public protocol MemoryDbClientProtocol {
    /// Apply the service update to a list of clusters supplied. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/managing-updates.html#applying-updates">Applying the service updates.
    func batchUpdateCluster(input: BatchUpdateClusterInput, completion: @escaping (ClientRuntime.SdkResult<BatchUpdateClusterOutputResponse, BatchUpdateClusterOutputError>) -> Void)
    /// Makes a copy of an existing snapshot.
    func copySnapshot(input: CopySnapshotInput, completion: @escaping (ClientRuntime.SdkResult<CopySnapshotOutputResponse, CopySnapshotOutputError>) -> Void)
    /// Creates an Access Control List. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs).
    func createACL(input: CreateACLInput, completion: @escaping (ClientRuntime.SdkResult<CreateACLOutputResponse, CreateACLOutputError>) -> Void)
    /// Creates a cluster. All nodes in the cluster run the same protocol-compliant engine software.
    func createCluster(input: CreateClusterInput, completion: @escaping (ClientRuntime.SdkResult<CreateClusterOutputResponse, CreateClusterOutputError>) -> Void)
    /// Creates a new MemoryDB parameter group. A parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster. For
    ///          more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/parametergroups.html">Configuring engine parameters using parameter groups.
    ///
    ///
    func createParameterGroup(input: CreateParameterGroupInput, completion: @escaping (ClientRuntime.SdkResult<CreateParameterGroupOutputResponse, CreateParameterGroupOutputError>) -> Void)
    /// Creates a copy of an entire cluster at a specific moment in time.
    func createSnapshot(input: CreateSnapshotInput, completion: @escaping (ClientRuntime.SdkResult<CreateSnapshotOutputResponse, CreateSnapshotOutputError>) -> Void)
    /// Creates a subnet group. A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment.
    ///
    ///          When you create a cluster in an Amazon VPC, you must specify a subnet group. MemoryDB uses that subnet group to choose a subnet and IP addresses within that subnet to associate with your nodes.
    ///          For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/subnetgroups.html">Subnets and subnet groups.
    func createSubnetGroup(input: CreateSubnetGroupInput, completion: @escaping (ClientRuntime.SdkResult<CreateSubnetGroupOutputResponse, CreateSubnetGroupOutputError>) -> Void)
    /// Creates a MemoryDB user. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs).
    func createUser(input: CreateUserInput, completion: @escaping (ClientRuntime.SdkResult<CreateUserOutputResponse, CreateUserOutputError>) -> Void)
    /// Deletes an Access Control List. The ACL must first be disassociated from the cluster before it can be deleted. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs).
    func deleteACL(input: DeleteACLInput, completion: @escaping (ClientRuntime.SdkResult<DeleteACLOutputResponse, DeleteACLOutputError>) -> Void)
    /// Deletes a cluster. It also deletes all associated nodes and node endpoints
    func deleteCluster(input: DeleteClusterInput, completion: @escaping (ClientRuntime.SdkResult<DeleteClusterOutputResponse, DeleteClusterOutputError>) -> Void)
    /// Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any clusters.
    ///          You cannot delete the default parameter groups in your account.
    func deleteParameterGroup(input: DeleteParameterGroupInput, completion: @escaping (ClientRuntime.SdkResult<DeleteParameterGroupOutputResponse, DeleteParameterGroupOutputError>) -> Void)
    /// Deletes an existing snapshot. When you receive a successful response from this operation, MemoryDB immediately begins deleting the snapshot; you cannot cancel or revert this operation.
    func deleteSnapshot(input: DeleteSnapshotInput, completion: @escaping (ClientRuntime.SdkResult<DeleteSnapshotOutputResponse, DeleteSnapshotOutputError>) -> Void)
    /// Deletes a subnet group. You cannot delete a default subnet group or one that is associated with any clusters.
    func deleteSubnetGroup(input: DeleteSubnetGroupInput, completion: @escaping (ClientRuntime.SdkResult<DeleteSubnetGroupOutputResponse, DeleteSubnetGroupOutputError>) -> Void)
    /// Deletes a user. The user will be removed from all ACLs and in turn removed from all clusters.
    func deleteUser(input: DeleteUserInput, completion: @escaping (ClientRuntime.SdkResult<DeleteUserOutputResponse, DeleteUserOutputError>) -> Void)
    /// Returns a list of ACLs
    func describeACLs(input: DescribeACLsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeACLsOutputResponse, DescribeACLsOutputError>) -> Void)
    /// Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cluster if a cluster name is supplied.
    func describeClusters(input: DescribeClustersInput, completion: @escaping (ClientRuntime.SdkResult<DescribeClustersOutputResponse, DescribeClustersOutputError>) -> Void)
    /// Returns a list of the available Redis engine versions.
    func describeEngineVersions(input: DescribeEngineVersionsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeEngineVersionsOutputResponse, DescribeEngineVersionsOutputError>) -> Void)
    /// Returns events related to clusters, security groups, and parameter groups. You can obtain events specific to a particular cluster, security group, or parameter group by providing the name as a parameter.
    ///
    ///          By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.
    func describeEvents(input: DescribeEventsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeEventsOutputResponse, DescribeEventsOutputError>) -> Void)
    /// Returns a list of parameter group descriptions. If a parameter group name is specified, the list contains only the descriptions for that group.
    func describeParameterGroups(input: DescribeParameterGroupsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeParameterGroupsOutputResponse, DescribeParameterGroupsOutputError>) -> Void)
    /// Returns the detailed parameter list for a particular parameter group.
    func describeParameters(input: DescribeParametersInput, completion: @escaping (ClientRuntime.SdkResult<DescribeParametersOutputResponse, DescribeParametersOutputError>) -> Void)
    /// Returns details of the service updates
    func describeServiceUpdates(input: DescribeServiceUpdatesInput, completion: @escaping (ClientRuntime.SdkResult<DescribeServiceUpdatesOutputResponse, DescribeServiceUpdatesOutputError>) -> Void)
    /// Returns information about cluster snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot,
    ///          or just the snapshots associated with a particular cluster.
    func describeSnapshots(input: DescribeSnapshotsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeSnapshotsOutputResponse, DescribeSnapshotsOutputError>) -> Void)
    /// Returns a list of subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group.
    func describeSubnetGroups(input: DescribeSubnetGroupsInput, completion: @escaping (ClientRuntime.SdkResult<DescribeSubnetGroupsOutputResponse, DescribeSubnetGroupsOutputError>) -> Void)
    /// Returns a list of users.
    func describeUsers(input: DescribeUsersInput, completion: @escaping (ClientRuntime.SdkResult<DescribeUsersOutputResponse, DescribeUsersOutputError>) -> Void)
    /// Used to failover a shard
    func failoverShard(input: FailoverShardInput, completion: @escaping (ClientRuntime.SdkResult<FailoverShardOutputResponse, FailoverShardOutputError>) -> Void)
    /// Lists all available node types that you can scale to from your cluster's current node type.
    ///
    ///          When you use the UpdateCluster operation to scale your cluster, the value of the NodeType parameter must be one of the node types returned by this operation.
    func listAllowedNodeTypeUpdates(input: ListAllowedNodeTypeUpdatesInput, completion: @escaping (ClientRuntime.SdkResult<ListAllowedNodeTypeUpdatesOutputResponse, ListAllowedNodeTypeUpdatesOutputError>) -> Void)
    /// Lists all tags currently on a named resource.
    ///
    ///          A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track your MemoryDB resources.
    ///          For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/Tagging-Resources.html">Tagging your MemoryDB resources
    ///
    func listTags(input: ListTagsInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsOutputResponse, ListTagsOutputError>) -> Void)
    /// Modifies the parameters of a parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire parameter group, specify the AllParameters and ParameterGroupName parameters.
    func resetParameterGroup(input: ResetParameterGroupInput, completion: @escaping (ClientRuntime.SdkResult<ResetParameterGroupOutputResponse, ResetParameterGroupOutputError>) -> Void)
    /// A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your MemoryDB resources.
    ///
    ///          When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. For more information, see
    ///
    ///          <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/iam.resourcelevelpermissions.html">Resource-level permissions.
    ///
    ///          For example, you can use cost-allocation tags to your MemoryDB resources, Amazon generates a cost allocation report as a comma-separated value
    ///           (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories
    ///           (such as cost centers, application names, or owners) to organize your costs across multiple services.
    ///
    ///          For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging.html">Using Cost Allocation Tags.
    func tagResource(input: TagResourceInput, completion: @escaping (ClientRuntime.SdkResult<TagResourceOutputResponse, TagResourceOutputError>) -> Void)
    /// Use this operation to remove tags on a resource
    func untagResource(input: UntagResourceInput, completion: @escaping (ClientRuntime.SdkResult<UntagResourceOutputResponse, UntagResourceOutputError>) -> Void)
    /// Changes the list of users that belong to the Access Control List.
    func updateACL(input: UpdateACLInput, completion: @escaping (ClientRuntime.SdkResult<UpdateACLOutputResponse, UpdateACLOutputError>) -> Void)
    /// Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration settings by specifying the settings and the new values.
    func updateCluster(input: UpdateClusterInput, completion: @escaping (ClientRuntime.SdkResult<UpdateClusterOutputResponse, UpdateClusterOutputError>) -> Void)
    /// Updates the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
    func updateParameterGroup(input: UpdateParameterGroupInput, completion: @escaping (ClientRuntime.SdkResult<UpdateParameterGroupOutputResponse, UpdateParameterGroupOutputError>) -> Void)
    /// Updates a subnet group. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/ubnetGroups.Modifying.html">Updating a subnet group
    ///
    func updateSubnetGroup(input: UpdateSubnetGroupInput, completion: @escaping (ClientRuntime.SdkResult<UpdateSubnetGroupOutputResponse, UpdateSubnetGroupOutputError>) -> Void)
    /// Changes user password(s) and/or access string.
    func updateUser(input: UpdateUserInput, completion: @escaping (ClientRuntime.SdkResult<UpdateUserOutputResponse, UpdateUserOutputError>) -> Void)
}

public enum MemoryDbClientTypes {}
