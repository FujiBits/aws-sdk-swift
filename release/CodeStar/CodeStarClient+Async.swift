// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension CodeStarClient {
    /// <p>Adds an IAM user to the team for an AWS CodeStar project.</p>
    func associateTeamMember(input: AssociateTeamMemberInput) async throws -> AssociateTeamMemberOutputResponse
    {
        typealias associateTeamMemberContinuation = CheckedContinuation<AssociateTeamMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateTeamMemberContinuation) in
            associateTeamMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a project, including project resources. This action creates a project based on
    ///       a submitted project request. A set of source code files and a toolchain template file
    ///       can be included with the project request. If these are not provided, an empty project is created.</p>
    func createProject(input: CreateProjectInput) async throws -> CreateProjectOutputResponse
    {
        typealias createProjectContinuation = CheckedContinuation<CreateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProjectContinuation) in
            createProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a profile for a user that includes user preferences, such as the display name
    ///       and email address assocciated with the user, in AWS CodeStar. The user profile is not
    ///       project-specific. Information in the user profile is displayed wherever the user's information
    ///       appears to other users in AWS CodeStar.</p>
    func createUserProfile(input: CreateUserProfileInput) async throws -> CreateUserProfileOutputResponse
    {
        typealias createUserProfileContinuation = CheckedContinuation<CreateUserProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createUserProfileContinuation) in
            createUserProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a project, including project resources. Does not delete users associated with
    ///       the project, but does delete the IAM roles that allowed access to the project.</p>
    func deleteProject(input: DeleteProjectInput) async throws -> DeleteProjectOutputResponse
    {
        typealias deleteProjectContinuation = CheckedContinuation<DeleteProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProjectContinuation) in
            deleteProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a user profile in AWS CodeStar, including all personal preference data associated with
    ///       that profile, such as display name and email address. It does not delete the history of that
    ///       user, for example the history of commits made by that user.</p>
    func deleteUserProfile(input: DeleteUserProfileInput) async throws -> DeleteUserProfileOutputResponse
    {
        typealias deleteUserProfileContinuation = CheckedContinuation<DeleteUserProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteUserProfileContinuation) in
            deleteUserProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a project and its resources.</p>
    func describeProject(input: DescribeProjectInput) async throws -> DescribeProjectOutputResponse
    {
        typealias describeProjectContinuation = CheckedContinuation<DescribeProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProjectContinuation) in
            describeProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Describes a user in AWS CodeStar and the user attributes across all projects.</p>
    func describeUserProfile(input: DescribeUserProfileInput) async throws -> DescribeUserProfileOutputResponse
    {
        typealias describeUserProfileContinuation = CheckedContinuation<DescribeUserProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeUserProfileContinuation) in
            describeUserProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes a user from a project. Removing a user from a project also removes the IAM
    ///       policies from that user that allowed access to the project and its resources. Disassociating a
    ///       team member does not remove that user's profile from AWS CodeStar. It does not remove the user from
    ///       IAM.</p>
    func disassociateTeamMember(input: DisassociateTeamMemberInput) async throws -> DisassociateTeamMemberOutputResponse
    {
        typealias disassociateTeamMemberContinuation = CheckedContinuation<DisassociateTeamMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateTeamMemberContinuation) in
            disassociateTeamMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all projects in AWS CodeStar associated with your AWS account.</p>
    func listProjects(input: ListProjectsInput) async throws -> ListProjectsOutputResponse
    {
        typealias listProjectsContinuation = CheckedContinuation<ListProjectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProjectsContinuation) in
            listProjects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists resources associated with a project in AWS CodeStar.</p>
    func listResources(input: ListResourcesInput) async throws -> ListResourcesOutputResponse
    {
        typealias listResourcesContinuation = CheckedContinuation<ListResourcesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourcesContinuation) in
            listResources(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets the tags for a project.</p>
    func listTagsForProject(input: ListTagsForProjectInput) async throws -> ListTagsForProjectOutputResponse
    {
        typealias listTagsForProjectContinuation = CheckedContinuation<ListTagsForProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForProjectContinuation) in
            listTagsForProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all team members associated with a project.</p>
    func listTeamMembers(input: ListTeamMembersInput) async throws -> ListTeamMembersOutputResponse
    {
        typealias listTeamMembersContinuation = CheckedContinuation<ListTeamMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTeamMembersContinuation) in
            listTeamMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all the user profiles configured for your AWS account in AWS CodeStar.</p>
    func listUserProfiles(input: ListUserProfilesInput) async throws -> ListUserProfilesOutputResponse
    {
        typealias listUserProfilesContinuation = CheckedContinuation<ListUserProfilesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listUserProfilesContinuation) in
            listUserProfiles(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds tags to a project.</p>
    func tagProject(input: TagProjectInput) async throws -> TagProjectOutputResponse
    {
        typealias tagProjectContinuation = CheckedContinuation<TagProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagProjectContinuation) in
            tagProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes tags from a project.</p>
    func untagProject(input: UntagProjectInput) async throws -> UntagProjectOutputResponse
    {
        typealias untagProjectContinuation = CheckedContinuation<UntagProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagProjectContinuation) in
            untagProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a project in AWS CodeStar.</p>
    func updateProject(input: UpdateProjectInput) async throws -> UpdateProjectOutputResponse
    {
        typealias updateProjectContinuation = CheckedContinuation<UpdateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProjectContinuation) in
            updateProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a team member's attributes in an AWS CodeStar project. For example, you can change a
    ///       team member's role in the project, or change whether they have remote access to project
    ///       resources.</p>
    func updateTeamMember(input: UpdateTeamMemberInput) async throws -> UpdateTeamMemberOutputResponse
    {
        typealias updateTeamMemberContinuation = CheckedContinuation<UpdateTeamMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTeamMemberContinuation) in
            updateTeamMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a user's profile in AWS CodeStar. The user profile is not project-specific.
    ///       Information in the user profile is displayed wherever the user's information appears to other
    ///       users in AWS CodeStar. </p>
    func updateUserProfile(input: UpdateUserProfileInput) async throws -> UpdateUserProfileOutputResponse
    {
        typealias updateUserProfileContinuation = CheckedContinuation<UpdateUserProfileOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateUserProfileContinuation) in
            updateUserProfile(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
