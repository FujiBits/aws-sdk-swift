// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct TerminateWorkflowExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "TerminateWorkflowExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<TerminateWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateWorkflowExecutionOutputError>
}

public struct TerminateWorkflowExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "TerminateWorkflowExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<TerminateWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateWorkflowExecutionOutputError>
}

public struct TerminateWorkflowExecutionInputBodyMiddleware: Middleware {
    public let id: String = "TerminateWorkflowExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TerminateWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<TerminateWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TerminateWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<TerminateWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TerminateWorkflowExecutionOutputError>
}

extension TerminateWorkflowExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case details
        case domain
        case reason
        case runId
        case workflowId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let runId = runId {
            try encodeContainer.encode(runId, forKey: .runId)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
    }
}
