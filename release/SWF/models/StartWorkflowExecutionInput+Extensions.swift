// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartWorkflowExecutionInputHeadersMiddleware: Middleware {
    public let id: String = "StartWorkflowExecutionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<StartWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartWorkflowExecutionOutputError>
}

public struct StartWorkflowExecutionInputQueryItemMiddleware: Middleware {
    public let id: String = "StartWorkflowExecutionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<StartWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartWorkflowExecutionOutputError>
}

public struct StartWorkflowExecutionInputBodyMiddleware: Middleware {
    public let id: String = "StartWorkflowExecutionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartWorkflowExecutionInput>,
                  next: H) -> Swift.Result<OperationOutput<StartWorkflowExecutionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartWorkflowExecutionInput>
    public typealias MOutput = OperationOutput<StartWorkflowExecutionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartWorkflowExecutionOutputError>
}

extension StartWorkflowExecutionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case childPolicy
        case domain
        case executionStartToCloseTimeout
        case input
        case lambdaRole
        case tagList
        case taskList
        case taskPriority
        case taskStartToCloseTimeout
        case workflowId
        case workflowType
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let childPolicy = childPolicy {
            try encodeContainer.encode(childPolicy.rawValue, forKey: .childPolicy)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionStartToCloseTimeout = executionStartToCloseTimeout {
            try encodeContainer.encode(executionStartToCloseTimeout, forKey: .executionStartToCloseTimeout)
        }
        if let input = input {
            try encodeContainer.encode(input, forKey: .input)
        }
        if let lambdaRole = lambdaRole {
            try encodeContainer.encode(lambdaRole, forKey: .lambdaRole)
        }
        if let tagList = tagList {
            var tagListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagList)
            for taglist0 in tagList {
                try tagListContainer.encode(taglist0)
            }
        }
        if let taskList = taskList {
            try encodeContainer.encode(taskList, forKey: .taskList)
        }
        if let taskPriority = taskPriority {
            try encodeContainer.encode(taskPriority, forKey: .taskPriority)
        }
        if let taskStartToCloseTimeout = taskStartToCloseTimeout {
            try encodeContainer.encode(taskStartToCloseTimeout, forKey: .taskStartToCloseTimeout)
        }
        if let workflowId = workflowId {
            try encodeContainer.encode(workflowId, forKey: .workflowId)
        }
        if let workflowType = workflowType {
            try encodeContainer.encode(workflowType, forKey: .workflowType)
        }
    }
}
