// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListOpenWorkflowExecutionsInputHeadersMiddleware: Middleware {
    public let id: String = "ListOpenWorkflowExecutionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOpenWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOpenWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOpenWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<ListOpenWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOpenWorkflowExecutionsOutputError>
}

public struct ListOpenWorkflowExecutionsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListOpenWorkflowExecutionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOpenWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOpenWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOpenWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<ListOpenWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOpenWorkflowExecutionsOutputError>
}

public struct ListOpenWorkflowExecutionsInputBodyMiddleware: Middleware {
    public let id: String = "ListOpenWorkflowExecutionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListOpenWorkflowExecutionsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListOpenWorkflowExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListOpenWorkflowExecutionsInput>
    public typealias MOutput = OperationOutput<ListOpenWorkflowExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListOpenWorkflowExecutionsOutputError>
}

extension ListOpenWorkflowExecutionsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case domain
        case executionFilter
        case maximumPageSize
        case nextPageToken
        case reverseOrder
        case startTimeFilter
        case tagFilter
        case typeFilter
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let executionFilter = executionFilter {
            try encodeContainer.encode(executionFilter, forKey: .executionFilter)
        }
        if maximumPageSize != 0 {
            try encodeContainer.encode(maximumPageSize, forKey: .maximumPageSize)
        }
        if let nextPageToken = nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if reverseOrder != false {
            try encodeContainer.encode(reverseOrder, forKey: .reverseOrder)
        }
        if let startTimeFilter = startTimeFilter {
            try encodeContainer.encode(startTimeFilter, forKey: .startTimeFilter)
        }
        if let tagFilter = tagFilter {
            try encodeContainer.encode(tagFilter, forKey: .tagFilter)
        }
        if let typeFilter = typeFilter {
            try encodeContainer.encode(typeFilter, forKey: .typeFilter)
        }
    }
}
