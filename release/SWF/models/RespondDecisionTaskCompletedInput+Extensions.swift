// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RespondDecisionTaskCompletedInputHeadersMiddleware: Middleware {
    public let id: String = "RespondDecisionTaskCompletedInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondDecisionTaskCompletedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondDecisionTaskCompletedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondDecisionTaskCompletedInput>
    public typealias MOutput = OperationOutput<RespondDecisionTaskCompletedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondDecisionTaskCompletedOutputError>
}

public struct RespondDecisionTaskCompletedInputQueryItemMiddleware: Middleware {
    public let id: String = "RespondDecisionTaskCompletedInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondDecisionTaskCompletedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondDecisionTaskCompletedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondDecisionTaskCompletedInput>
    public typealias MOutput = OperationOutput<RespondDecisionTaskCompletedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondDecisionTaskCompletedOutputError>
}

public struct RespondDecisionTaskCompletedInputBodyMiddleware: Middleware {
    public let id: String = "RespondDecisionTaskCompletedInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RespondDecisionTaskCompletedInput>,
                  next: H) -> Swift.Result<OperationOutput<RespondDecisionTaskCompletedOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RespondDecisionTaskCompletedInput>
    public typealias MOutput = OperationOutput<RespondDecisionTaskCompletedOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RespondDecisionTaskCompletedOutputError>
}

extension RespondDecisionTaskCompletedInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case decisions
        case executionContext
        case taskToken
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let decisions = decisions {
            var decisionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .decisions)
            for decisionlist0 in decisions {
                try decisionsContainer.encode(decisionlist0)
            }
        }
        if let executionContext = executionContext {
            try encodeContainer.encode(executionContext, forKey: .executionContext)
        }
        if let taskToken = taskToken {
            try encodeContainer.encode(taskToken, forKey: .taskToken)
        }
    }
}
