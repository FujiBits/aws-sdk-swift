// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension Wafv2Client {
    /// Associates a web ACL with a regional application resource, to protect the resource.
    ///          A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.
    ///          For Amazon CloudFront, don't use this call. Instead, use your CloudFront distribution configuration. To
    ///          associate a web ACL, in the CloudFront call UpdateDistribution, set the web ACL ID
    ///          to the Amazon Resource Name (ARN) of the web ACL. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html">UpdateDistribution.
    func associateWebACL(input: AssociateWebACLInput) async throws -> AssociateWebACLOutputResponse
    {
        typealias associateWebACLContinuation = CheckedContinuation<AssociateWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateWebACLContinuation) in
            associateWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the web ACL capacity unit (WCU) requirements for a specified scope and set of rules.
    ///          You can use this to check the capacity requirements for the rules you want to use in a
    ///          RuleGroup or WebACL.
    ///
    ///          WAF uses WCUs to calculate and control the operating
    ///          resources that are used to run your rules, rule groups, and web ACLs. WAF
    ///          calculates capacity differently for each rule type, to reflect the relative cost of each rule.
    ///          Simple rules that cost little to run use fewer WCUs than more complex rules
    /// 				that use more processing power.
    /// 				Rule group capacity is fixed at creation, which helps users plan their
    ///          web ACL WCU usage when they use a rule group.
    ///          The WCU limit for web ACLs is 1,500.
    func checkCapacity(input: CheckCapacityInput) async throws -> CheckCapacityOutputResponse
    {
        typealias checkCapacityContinuation = CheckedContinuation<CheckCapacityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: checkCapacityContinuation) in
            checkCapacity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an IPSet, which you use to identify web requests that
    ///          originate from specific IP addresses or ranges of IP addresses. For example, if you're
    ///          receiving a lot of requests from a ranges of IP addresses, you can configure WAF to
    ///          block them using an IPSet that lists those IP addresses.
    func createIPSet(input: CreateIPSetInput) async throws -> CreateIPSetOutputResponse
    {
        typealias createIPSetContinuation = CheckedContinuation<CreateIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIPSetContinuation) in
            createIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a RegexPatternSet, which you reference in a RegexPatternSetReferenceStatement, to have WAF inspect a web request
    ///          component for the specified patterns.
    func createRegexPatternSet(input: CreateRegexPatternSetInput) async throws -> CreateRegexPatternSetOutputResponse
    {
        typealias createRegexPatternSetContinuation = CheckedContinuation<CreateRegexPatternSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRegexPatternSetContinuation) in
            createRegexPatternSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a RuleGroup per the specifications provided.
    ///           A rule group defines a collection of rules to inspect and control web requests that you can use in a WebACL. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements.
    func createRuleGroup(input: CreateRuleGroupInput) async throws -> CreateRuleGroupOutputResponse
    {
        typealias createRuleGroupContinuation = CheckedContinuation<CreateRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRuleGroupContinuation) in
            createRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a WebACL per the specifications provided.
    ///           A web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a web ACL can be a combination of the types Rule, RuleGroup, and managed rule group. You can associate a web ACL with one or more Amazon Web Services resources to protect. The resources can be an Amazon CloudFront distribution, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync GraphQL API.
    func createWebACL(input: CreateWebACLInput) async throws -> CreateWebACLOutputResponse
    {
        typealias createWebACLContinuation = CheckedContinuation<CreateWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWebACLContinuation) in
            createWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes all rule groups that are managed by Firewall Manager for the specified web ACL.
    ///          You can only use this if ManagedByFirewallManager is false in the specified
    ///             WebACL.
    func deleteFirewallManagerRuleGroups(input: DeleteFirewallManagerRuleGroupsInput) async throws -> DeleteFirewallManagerRuleGroupsOutputResponse
    {
        typealias deleteFirewallManagerRuleGroupsContinuation = CheckedContinuation<DeleteFirewallManagerRuleGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFirewallManagerRuleGroupsContinuation) in
            deleteFirewallManagerRuleGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified IPSet.
    func deleteIPSet(input: DeleteIPSetInput) async throws -> DeleteIPSetOutputResponse
    {
        typealias deleteIPSetContinuation = CheckedContinuation<DeleteIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteIPSetContinuation) in
            deleteIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the LoggingConfiguration from the specified web ACL.
    func deleteLoggingConfiguration(input: DeleteLoggingConfigurationInput) async throws -> DeleteLoggingConfigurationOutputResponse
    {
        typealias deleteLoggingConfigurationContinuation = CheckedContinuation<DeleteLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLoggingConfigurationContinuation) in
            deleteLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Permanently deletes an IAM policy from the specified rule group.
    ///          You must be the owner of the rule group to perform this operation.
    func deletePermissionPolicy(input: DeletePermissionPolicyInput) async throws -> DeletePermissionPolicyOutputResponse
    {
        typealias deletePermissionPolicyContinuation = CheckedContinuation<DeletePermissionPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePermissionPolicyContinuation) in
            deletePermissionPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified RegexPatternSet.
    func deleteRegexPatternSet(input: DeleteRegexPatternSetInput) async throws -> DeleteRegexPatternSetOutputResponse
    {
        typealias deleteRegexPatternSetContinuation = CheckedContinuation<DeleteRegexPatternSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRegexPatternSetContinuation) in
            deleteRegexPatternSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified RuleGroup.
    func deleteRuleGroup(input: DeleteRuleGroupInput) async throws -> DeleteRuleGroupOutputResponse
    {
        typealias deleteRuleGroupContinuation = CheckedContinuation<DeleteRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRuleGroupContinuation) in
            deleteRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified WebACL.
    ///          You can only use this if ManagedByFirewallManager is false in the specified
    ///             WebACL.
    func deleteWebACL(input: DeleteWebACLInput) async throws -> DeleteWebACLOutputResponse
    {
        typealias deleteWebACLContinuation = CheckedContinuation<DeleteWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWebACLContinuation) in
            deleteWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides high-level information for a managed rule group, including descriptions of the
    ///          rules.
    func describeManagedRuleGroup(input: DescribeManagedRuleGroupInput) async throws -> DescribeManagedRuleGroupOutputResponse
    {
        typealias describeManagedRuleGroupContinuation = CheckedContinuation<DescribeManagedRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeManagedRuleGroupContinuation) in
            describeManagedRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates a web ACL from a regional application resource. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.
    ///          For Amazon CloudFront, don't use this call. Instead, use your CloudFront distribution configuration. To
    ///          disassociate a web ACL, provide an empty web ACL ID in the CloudFront call
    ///             UpdateDistribution. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html">UpdateDistribution.
    func disassociateWebACL(input: DisassociateWebACLInput) async throws -> DisassociateWebACLOutputResponse
    {
        typealias disassociateWebACLContinuation = CheckedContinuation<DisassociateWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateWebACLContinuation) in
            disassociateWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the specified IPSet.
    func getIPSet(input: GetIPSetInput) async throws -> GetIPSetOutputResponse
    {
        typealias getIPSetContinuation = CheckedContinuation<GetIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getIPSetContinuation) in
            getIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the LoggingConfiguration for the specified web ACL.
    func getLoggingConfiguration(input: GetLoggingConfigurationInput) async throws -> GetLoggingConfigurationOutputResponse
    {
        typealias getLoggingConfigurationContinuation = CheckedContinuation<GetLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLoggingConfigurationContinuation) in
            getLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the specified managed rule set.
    ///
    ///             This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Marketplace sellers.
    ///             Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    ///
    func getManagedRuleSet(input: GetManagedRuleSetInput) async throws -> GetManagedRuleSetOutputResponse
    {
        typealias getManagedRuleSetContinuation = CheckedContinuation<GetManagedRuleSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getManagedRuleSetContinuation) in
            getManagedRuleSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the IAM policy that is attached to the specified rule group.
    ///          You must be the owner of the rule group to perform this operation.
    func getPermissionPolicy(input: GetPermissionPolicyInput) async throws -> GetPermissionPolicyOutputResponse
    {
        typealias getPermissionPolicyContinuation = CheckedContinuation<GetPermissionPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getPermissionPolicyContinuation) in
            getPermissionPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the keys that are currently blocked by a rate-based rule. The maximum number
    ///          of managed keys that can be blocked for a single rate-based rule is 10,000. If more than
    ///          10,000 addresses exceed the rate limit, those with the highest rates are blocked.
    func getRateBasedStatementManagedKeys(input: GetRateBasedStatementManagedKeysInput) async throws -> GetRateBasedStatementManagedKeysOutputResponse
    {
        typealias getRateBasedStatementManagedKeysContinuation = CheckedContinuation<GetRateBasedStatementManagedKeysOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRateBasedStatementManagedKeysContinuation) in
            getRateBasedStatementManagedKeys(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the specified RegexPatternSet.
    func getRegexPatternSet(input: GetRegexPatternSetInput) async throws -> GetRegexPatternSetOutputResponse
    {
        typealias getRegexPatternSetContinuation = CheckedContinuation<GetRegexPatternSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRegexPatternSetContinuation) in
            getRegexPatternSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the specified RuleGroup.
    func getRuleGroup(input: GetRuleGroupInput) async throws -> GetRuleGroupOutputResponse
    {
        typealias getRuleGroupContinuation = CheckedContinuation<GetRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRuleGroupContinuation) in
            getRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets detailed information about a specified number of requests--a sample--that WAF
    ///          randomly selects from among the first 5,000 requests that your Amazon Web Services resource received
    ///          during a time range that you choose. You can specify a sample size of up to 500 requests,
    ///          and you can specify any time range in the previous three hours.
    ///
    ///             GetSampledRequests returns a time range, which is usually the time range that
    ///          you specified. However, if your resource (such as a CloudFront distribution) received 5,000
    ///          requests before the specified time range elapsed, GetSampledRequests returns
    ///          an updated time range. This new time range indicates the actual period during which WAF
    ///          selected the requests in the sample.
    func getSampledRequests(input: GetSampledRequestsInput) async throws -> GetSampledRequestsOutputResponse
    {
        typealias getSampledRequestsContinuation = CheckedContinuation<GetSampledRequestsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSampledRequestsContinuation) in
            getSampledRequests(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the specified WebACL.
    func getWebACL(input: GetWebACLInput) async throws -> GetWebACLOutputResponse
    {
        typealias getWebACLContinuation = CheckedContinuation<GetWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWebACLContinuation) in
            getWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the WebACL for the specified resource.
    func getWebACLForResource(input: GetWebACLForResourceInput) async throws -> GetWebACLForResourceOutputResponse
    {
        typealias getWebACLForResourceContinuation = CheckedContinuation<GetWebACLForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getWebACLForResourceContinuation) in
            getWebACLForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the available versions for the specified managed rule group.
    func listAvailableManagedRuleGroupVersions(input: ListAvailableManagedRuleGroupVersionsInput) async throws -> ListAvailableManagedRuleGroupVersionsOutputResponse
    {
        typealias listAvailableManagedRuleGroupVersionsContinuation = CheckedContinuation<ListAvailableManagedRuleGroupVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAvailableManagedRuleGroupVersionsContinuation) in
            listAvailableManagedRuleGroupVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves an array of managed rule groups that are available for you to use. This list
    ///          includes all Amazon Web Services Managed Rules rule groups and all of the Marketplace managed rule groups that you're
    ///          subscribed to.
    func listAvailableManagedRuleGroups(input: ListAvailableManagedRuleGroupsInput) async throws -> ListAvailableManagedRuleGroupsOutputResponse
    {
        typealias listAvailableManagedRuleGroupsContinuation = CheckedContinuation<ListAvailableManagedRuleGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAvailableManagedRuleGroupsContinuation) in
            listAvailableManagedRuleGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves an array of IPSetSummary objects for the IP sets that you
    ///          manage.
    func listIPSets(input: ListIPSetsInput) async throws -> ListIPSetsOutputResponse
    {
        typealias listIPSetsContinuation = CheckedContinuation<ListIPSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIPSetsContinuation) in
            listIPSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves an array of your LoggingConfiguration objects.
    func listLoggingConfigurations(input: ListLoggingConfigurationsInput) async throws -> ListLoggingConfigurationsOutputResponse
    {
        typealias listLoggingConfigurationsContinuation = CheckedContinuation<ListLoggingConfigurationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLoggingConfigurationsContinuation) in
            listLoggingConfigurations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the managed rule sets that you own.
    ///
    ///             This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Marketplace sellers.
    ///             Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    ///
    func listManagedRuleSets(input: ListManagedRuleSetsInput) async throws -> ListManagedRuleSetsOutputResponse
    {
        typealias listManagedRuleSetsContinuation = CheckedContinuation<ListManagedRuleSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listManagedRuleSetsContinuation) in
            listManagedRuleSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves an array of RegexPatternSetSummary objects for the regex
    ///          pattern sets that you manage.
    func listRegexPatternSets(input: ListRegexPatternSetsInput) async throws -> ListRegexPatternSetsOutputResponse
    {
        typealias listRegexPatternSetsContinuation = CheckedContinuation<ListRegexPatternSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRegexPatternSetsContinuation) in
            listRegexPatternSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves an array of the Amazon Resource Names (ARNs) for the regional resources that
    ///          are associated with the specified web ACL. If you want the list of Amazon CloudFront resources, use
    ///          the CloudFront call ListDistributionsByWebACLId.
    func listResourcesForWebACL(input: ListResourcesForWebACLInput) async throws -> ListResourcesForWebACLOutputResponse
    {
        typealias listResourcesForWebACLContinuation = CheckedContinuation<ListResourcesForWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listResourcesForWebACLContinuation) in
            listResourcesForWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves an array of RuleGroupSummary objects for the rule groups
    ///          that you manage.
    func listRuleGroups(input: ListRuleGroupsInput) async throws -> ListRuleGroupsOutputResponse
    {
        typealias listRuleGroupsContinuation = CheckedContinuation<ListRuleGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRuleGroupsContinuation) in
            listRuleGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the TagInfoForResource for the specified resource. Tags are
    ///          key:value pairs that you can use to categorize and manage your resources, for purposes like
    ///          billing. For example, you might set the tag key to "customer" and the value to the customer
    ///          name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags
    ///          for a resource.
    ///          You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule
    ///          groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF
    ///          console.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves an array of WebACLSummary objects for the web ACLs that you
    ///          manage.
    func listWebACLs(input: ListWebACLsInput) async throws -> ListWebACLsOutputResponse
    {
        typealias listWebACLsContinuation = CheckedContinuation<ListWebACLsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWebACLsContinuation) in
            listWebACLs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables the specified LoggingConfiguration, to start logging from a
    ///          web ACL, according to the configuration provided.
    ///          You can access information about all traffic that WAF inspects using the following
    ///          steps:
    ///          <ol>
    ///
    ///                Create an Amazon Kinesis Data Firehose.
    ///                Create the data firehose with a PUT source and in the Region that you are
    ///                operating. If you are capturing logs for Amazon CloudFront, always create the firehose in US
    ///                East (N. Virginia).
    ///                Give the data firehose a name that starts with the prefix
    ///                   aws-waf-logs-. For example,
    ///                   aws-waf-logs-us-east-2-analytics.
    ///
    ///                   Do not create the data firehose using a Kinesis stream as your
    ///                   source.
    ///
    ///
    ///
    ///                Associate that firehose to your web ACL using a
    ///                   PutLoggingConfiguration request.
    ///
    ///          </ol>
    ///          When you successfully enable logging using a PutLoggingConfiguration
    ///          request, WAF will create a service linked role with the necessary permissions to write
    ///          logs to the Amazon Kinesis Data Firehose. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/logging.html">Logging Web ACL
    ///             Traffic Information in the WAF Developer
    ///          Guide.
    ///
    ///             This operation completely replaces the mutable specifications that you already have for the logging configuration with the ones that you provide to this call. To modify the logging configuration, retrieve it by calling GetLoggingConfiguration, update the settings as needed, and then provide the complete logging configuration specification to this call.
    ///
    func putLoggingConfiguration(input: PutLoggingConfigurationInput) async throws -> PutLoggingConfigurationOutputResponse
    {
        typealias putLoggingConfigurationContinuation = CheckedContinuation<PutLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putLoggingConfigurationContinuation) in
            putLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Defines the versions of your managed rule set that you are offering to the customers.
    ///          Customers see your offerings as managed rule groups with versioning.
    ///
    ///             This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Marketplace sellers.
    ///             Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    ///
    ///          Customers retrieve their managed rule group list by calling ListAvailableManagedRuleGroups. The name that you provide here for your
    ///          managed rule set is the name the customer sees for the corresponding managed rule group.
    ///          Customers can retrieve the available versions for a managed rule group by calling ListAvailableManagedRuleGroupVersions. You provide a rule group
    ///          specification for each version. For each managed rule set, you must specify a version that
    ///          you recommend using.
    ///          To initiate the expiration of a managed rule group version, use UpdateManagedRuleSetVersionExpiryDate.
    func putManagedRuleSetVersions(input: PutManagedRuleSetVersionsInput) async throws -> PutManagedRuleSetVersionsOutputResponse
    {
        typealias putManagedRuleSetVersionsContinuation = CheckedContinuation<PutManagedRuleSetVersionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putManagedRuleSetVersionsContinuation) in
            putManagedRuleSetVersions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Attaches an IAM policy to the specified resource. Use this to share a rule group across
    ///          accounts.
    ///          You must be the owner of the rule group to perform this operation.
    ///          This action is subject to the following restrictions:
    ///
    ///
    ///                You can attach only one policy with each PutPermissionPolicy
    ///                request.
    ///
    ///
    ///                The ARN in the request must be a valid WAF RuleGroup ARN and the
    ///                rule group must exist in the same Region.
    ///
    ///
    ///                The user making the request must be the owner of the rule group.
    ///
    ///
    func putPermissionPolicy(input: PutPermissionPolicyInput) async throws -> PutPermissionPolicyOutputResponse
    {
        typealias putPermissionPolicyContinuation = CheckedContinuation<PutPermissionPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putPermissionPolicyContinuation) in
            putPermissionPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates tags with the specified Amazon Web Services resource. Tags are key:value pairs that you can
    ///          use to categorize and manage your resources, for purposes like billing. For example, you
    ///          might set the tag key to "customer" and the value to the customer name or ID. You can
    ///          specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a
    ///          resource.
    ///          You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule
    ///          groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF
    ///          console.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disassociates tags from an Amazon Web Services resource. Tags are key:value pairs that you can
    ///          associate with Amazon Web Services resources. For example, the tag key might be "customer" and the tag
    ///          value might be "companyA." You can specify one or more tags to add to each container. You
    ///          can add up to 50 tags to each Amazon Web Services resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified IPSet.
    ///
    ///             This operation completely replaces the mutable specifications that you already have for the IP set with the ones that you provide to this call. To modify the IP set, retrieve it by calling GetIPSet, update the settings as needed, and then provide the complete IP set specification to this call.
    ///
    func updateIPSet(input: UpdateIPSetInput) async throws -> UpdateIPSetOutputResponse
    {
        typealias updateIPSetContinuation = CheckedContinuation<UpdateIPSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateIPSetContinuation) in
            updateIPSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the expiration information for your managed rule set. Use this to initiate the
    ///          expiration of a managed rule group version. After you initiate expiration for a version,
    ///          WAF excludes it from the reponse to ListAvailableManagedRuleGroupVersions for the managed rule group.
    ///
    ///             This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Marketplace sellers.
    ///             Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are ListManagedRuleSets, GetManagedRuleSet, PutManagedRuleSetVersions, and UpdateManagedRuleSetVersionExpiryDate.
    ///
    func updateManagedRuleSetVersionExpiryDate(input: UpdateManagedRuleSetVersionExpiryDateInput) async throws -> UpdateManagedRuleSetVersionExpiryDateOutputResponse
    {
        typealias updateManagedRuleSetVersionExpiryDateContinuation = CheckedContinuation<UpdateManagedRuleSetVersionExpiryDateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateManagedRuleSetVersionExpiryDateContinuation) in
            updateManagedRuleSetVersionExpiryDate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified RegexPatternSet.
    ///
    ///             This operation completely replaces the mutable specifications that you already have for the regex pattern set with the ones that you provide to this call. To modify the regex pattern set, retrieve it by calling GetRegexPatternSet, update the settings as needed, and then provide the complete regex pattern set specification to this call.
    ///
    func updateRegexPatternSet(input: UpdateRegexPatternSetInput) async throws -> UpdateRegexPatternSetOutputResponse
    {
        typealias updateRegexPatternSetContinuation = CheckedContinuation<UpdateRegexPatternSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRegexPatternSetContinuation) in
            updateRegexPatternSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified RuleGroup.
    ///
    ///             This operation completely replaces the mutable specifications that you already have for the rule group with the ones that you provide to this call. To modify the rule group, retrieve it by calling GetRuleGroup, update the settings as needed, and then provide the complete rule group specification to this call.
    ///
    ///           A rule group defines a collection of rules to inspect and control web requests that you can use in a WebACL. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements.
    func updateRuleGroup(input: UpdateRuleGroupInput) async throws -> UpdateRuleGroupOutputResponse
    {
        typealias updateRuleGroupContinuation = CheckedContinuation<UpdateRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRuleGroupContinuation) in
            updateRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified WebACL.
    ///
    ///             This operation completely replaces the mutable specifications that you already have for the web ACL with the ones that you provide to this call. To modify the web ACL, retrieve it by calling GetWebACL, update the settings as needed, and then provide the complete web ACL specification to this call.
    ///
    ///           A web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a web ACL can be a combination of the types Rule, RuleGroup, and managed rule group. You can associate a web ACL with one or more Amazon Web Services resources to protect. The resources can be an Amazon CloudFront distribution, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync GraphQL API.
    func updateWebACL(input: UpdateWebACLInput) async throws -> UpdateWebACLOutputResponse
    {
        typealias updateWebACLContinuation = CheckedContinuation<UpdateWebACLOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWebACLContinuation) in
            updateWebACL(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
