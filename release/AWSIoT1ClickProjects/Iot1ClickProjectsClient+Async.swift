// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension Iot1ClickProjectsClient {
    /// Associates a physical device with a placement.
    func associateDeviceWithPlacement(input: AssociateDeviceWithPlacementInput) async throws -> AssociateDeviceWithPlacementOutputResponse
    {
        typealias associateDeviceWithPlacementContinuation = CheckedContinuation<AssociateDeviceWithPlacementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateDeviceWithPlacementContinuation) in
            associateDeviceWithPlacement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an empty placement.
    func createPlacement(input: CreatePlacementInput) async throws -> CreatePlacementOutputResponse
    {
        typealias createPlacementContinuation = CheckedContinuation<CreatePlacementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPlacementContinuation) in
            createPlacement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an empty project with a placement template. A project contains zero or more placements that adhere to the placement template defined in the project.
    func createProject(input: CreateProjectInput) async throws -> CreateProjectOutputResponse
    {
        typealias createProjectContinuation = CheckedContinuation<CreateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProjectContinuation) in
            createProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a placement. To delete a placement, it must not have any devices associated with it. When you delete a placement, all associated data becomes irretrievable.
    func deletePlacement(input: DeletePlacementInput) async throws -> DeletePlacementOutputResponse
    {
        typealias deletePlacementContinuation = CheckedContinuation<DeletePlacementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deletePlacementContinuation) in
            deletePlacement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a project. To delete a project, it must not have any placements associated with it. When you delete a project, all associated data becomes irretrievable.
    func deleteProject(input: DeleteProjectInput) async throws -> DeleteProjectOutputResponse
    {
        typealias deleteProjectContinuation = CheckedContinuation<DeleteProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteProjectContinuation) in
            deleteProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a placement in a project.
    func describePlacement(input: DescribePlacementInput) async throws -> DescribePlacementOutputResponse
    {
        typealias describePlacementContinuation = CheckedContinuation<DescribePlacementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePlacementContinuation) in
            describePlacement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns an object describing a project.
    func describeProject(input: DescribeProjectInput) async throws -> DescribeProjectOutputResponse
    {
        typealias describeProjectContinuation = CheckedContinuation<DescribeProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeProjectContinuation) in
            describeProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a physical device from a placement.
    func disassociateDeviceFromPlacement(input: DisassociateDeviceFromPlacementInput) async throws -> DisassociateDeviceFromPlacementOutputResponse
    {
        typealias disassociateDeviceFromPlacementContinuation = CheckedContinuation<DisassociateDeviceFromPlacementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateDeviceFromPlacementContinuation) in
            disassociateDeviceFromPlacement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns an object enumerating the devices in a placement.
    func getDevicesInPlacement(input: GetDevicesInPlacementInput) async throws -> GetDevicesInPlacementOutputResponse
    {
        typealias getDevicesInPlacementContinuation = CheckedContinuation<GetDevicesInPlacementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDevicesInPlacementContinuation) in
            getDevicesInPlacement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the placement(s) of a project.
    func listPlacements(input: ListPlacementsInput) async throws -> ListPlacementsOutputResponse
    {
        typealias listPlacementsContinuation = CheckedContinuation<ListPlacementsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPlacementsContinuation) in
            listPlacements(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the AWS IoT 1-Click project(s) associated with your AWS account and region.
    func listProjects(input: ListProjectsInput) async throws -> ListProjectsOutputResponse
    {
        typealias listProjectsContinuation = CheckedContinuation<ListProjectsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProjectsContinuation) in
            listProjects(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags (metadata key/value pairs) which you have assigned to the resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates or modifies tags for a resource. Tags are key/value pairs (metadata) that can be used to manage a resource. For more information, see [AWS Tagging Strategies](https://aws.amazon.com/answers/account-management/aws-tagging-strategies/).
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes one or more tags (metadata key/value pairs) from a resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a placement with the given attributes. To clear an attribute, pass an empty value (i.e., "").
    func updatePlacement(input: UpdatePlacementInput) async throws -> UpdatePlacementOutputResponse
    {
        typealias updatePlacementContinuation = CheckedContinuation<UpdatePlacementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updatePlacementContinuation) in
            updatePlacement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a project associated with your AWS account and region. With the exception of device template names, you can pass just the values that need to be updated because the update request will change only the values that are provided. To clear a value, pass the empty string (i.e., "").
    func updateProject(input: UpdateProjectInput) async throws -> UpdateProjectOutputResponse
    {
        typealias updateProjectContinuation = CheckedContinuation<UpdateProjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateProjectContinuation) in
            updateProject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
