// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetCostCategoriesInputHeadersMiddleware: Middleware {
    public let id: String = "GetCostCategoriesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetCostCategoriesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetCostCategoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetCostCategoriesInput>
    public typealias MOutput = OperationOutput<GetCostCategoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetCostCategoriesOutputError>
}

public struct GetCostCategoriesInputQueryItemMiddleware: Middleware {
    public let id: String = "GetCostCategoriesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetCostCategoriesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetCostCategoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetCostCategoriesInput>
    public typealias MOutput = OperationOutput<GetCostCategoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetCostCategoriesOutputError>
}

public struct GetCostCategoriesInputBodyMiddleware: Middleware {
    public let id: String = "GetCostCategoriesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetCostCategoriesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetCostCategoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetCostCategoriesInput>
    public typealias MOutput = OperationOutput<GetCostCategoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetCostCategoriesOutputError>
}

extension GetCostCategoriesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case costCategoryName = "CostCategoryName"
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextPageToken = "NextPageToken"
        case searchString = "SearchString"
        case sortBy = "SortBy"
        case timePeriod = "TimePeriod"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let costCategoryName = costCategoryName {
            try encodeContainer.encode(costCategoryName, forKey: .costCategoryName)
        }
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextPageToken = nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if let searchString = searchString {
            try encodeContainer.encode(searchString, forKey: .searchString)
        }
        if let sortBy = sortBy {
            var sortByContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sortBy)
            for sortdefinitions0 in sortBy {
                try sortByContainer.encode(sortdefinitions0)
            }
        }
        if let timePeriod = timePeriod {
            try encodeContainer.encode(timePeriod, forKey: .timePeriod)
        }
    }
}
