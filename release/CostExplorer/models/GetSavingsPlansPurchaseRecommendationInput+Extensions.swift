// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetSavingsPlansPurchaseRecommendationInputHeadersMiddleware: Middleware {
    public let id: String = "GetSavingsPlansPurchaseRecommendationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetSavingsPlansPurchaseRecommendationInput>,
                  next: H) -> Swift.Result<OperationOutput<GetSavingsPlansPurchaseRecommendationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetSavingsPlansPurchaseRecommendationInput>
    public typealias MOutput = OperationOutput<GetSavingsPlansPurchaseRecommendationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetSavingsPlansPurchaseRecommendationOutputError>
}

public struct GetSavingsPlansPurchaseRecommendationInputQueryItemMiddleware: Middleware {
    public let id: String = "GetSavingsPlansPurchaseRecommendationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetSavingsPlansPurchaseRecommendationInput>,
                  next: H) -> Swift.Result<OperationOutput<GetSavingsPlansPurchaseRecommendationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetSavingsPlansPurchaseRecommendationInput>
    public typealias MOutput = OperationOutput<GetSavingsPlansPurchaseRecommendationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetSavingsPlansPurchaseRecommendationOutputError>
}

public struct GetSavingsPlansPurchaseRecommendationInputBodyMiddleware: Middleware {
    public let id: String = "GetSavingsPlansPurchaseRecommendationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetSavingsPlansPurchaseRecommendationInput>,
                  next: H) -> Swift.Result<OperationOutput<GetSavingsPlansPurchaseRecommendationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetSavingsPlansPurchaseRecommendationInput>
    public typealias MOutput = OperationOutput<GetSavingsPlansPurchaseRecommendationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetSavingsPlansPurchaseRecommendationOutputError>
}

extension GetSavingsPlansPurchaseRecommendationInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountScope = "AccountScope"
        case filter = "Filter"
        case lookbackPeriodInDays = "LookbackPeriodInDays"
        case nextPageToken = "NextPageToken"
        case pageSize = "PageSize"
        case paymentOption = "PaymentOption"
        case savingsPlansType = "SavingsPlansType"
        case termInYears = "TermInYears"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountScope = accountScope {
            try encodeContainer.encode(accountScope.rawValue, forKey: .accountScope)
        }
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let lookbackPeriodInDays = lookbackPeriodInDays {
            try encodeContainer.encode(lookbackPeriodInDays.rawValue, forKey: .lookbackPeriodInDays)
        }
        if let nextPageToken = nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if pageSize != 0 {
            try encodeContainer.encode(pageSize, forKey: .pageSize)
        }
        if let paymentOption = paymentOption {
            try encodeContainer.encode(paymentOption.rawValue, forKey: .paymentOption)
        }
        if let savingsPlansType = savingsPlansType {
            try encodeContainer.encode(savingsPlansType.rawValue, forKey: .savingsPlansType)
        }
        if let termInYears = termInYears {
            try encodeContainer.encode(termInYears.rawValue, forKey: .termInYears)
        }
    }
}
