// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetCostForecastInputHeadersMiddleware: Middleware {
    public let id: String = "GetCostForecastInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetCostForecastInput>,
                  next: H) -> Swift.Result<OperationOutput<GetCostForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetCostForecastInput>
    public typealias MOutput = OperationOutput<GetCostForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetCostForecastOutputError>
}

public struct GetCostForecastInputQueryItemMiddleware: Middleware {
    public let id: String = "GetCostForecastInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetCostForecastInput>,
                  next: H) -> Swift.Result<OperationOutput<GetCostForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetCostForecastInput>
    public typealias MOutput = OperationOutput<GetCostForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetCostForecastOutputError>
}

public struct GetCostForecastInputBodyMiddleware: Middleware {
    public let id: String = "GetCostForecastInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetCostForecastInput>,
                  next: H) -> Swift.Result<OperationOutput<GetCostForecastOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetCostForecastInput>
    public typealias MOutput = OperationOutput<GetCostForecastOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetCostForecastOutputError>
}

extension GetCostForecastInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case filter = "Filter"
        case granularity = "Granularity"
        case metric = "Metric"
        case predictionIntervalLevel = "PredictionIntervalLevel"
        case timePeriod = "TimePeriod"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filter = filter {
            try encodeContainer.encode(filter, forKey: .filter)
        }
        if let granularity = granularity {
            try encodeContainer.encode(granularity.rawValue, forKey: .granularity)
        }
        if let metric = metric {
            try encodeContainer.encode(metric.rawValue, forKey: .metric)
        }
        if let predictionIntervalLevel = predictionIntervalLevel {
            try encodeContainer.encode(predictionIntervalLevel, forKey: .predictionIntervalLevel)
        }
        if let timePeriod = timePeriod {
            try encodeContainer.encode(timePeriod, forKey: .timePeriod)
        }
    }
}
