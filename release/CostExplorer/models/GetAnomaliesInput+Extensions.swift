// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetAnomaliesInputHeadersMiddleware: Middleware {
    public let id: String = "GetAnomaliesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetAnomaliesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetAnomaliesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetAnomaliesInput>
    public typealias MOutput = OperationOutput<GetAnomaliesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetAnomaliesOutputError>
}

public struct GetAnomaliesInputQueryItemMiddleware: Middleware {
    public let id: String = "GetAnomaliesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetAnomaliesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetAnomaliesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetAnomaliesInput>
    public typealias MOutput = OperationOutput<GetAnomaliesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetAnomaliesOutputError>
}

public struct GetAnomaliesInputBodyMiddleware: Middleware {
    public let id: String = "GetAnomaliesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetAnomaliesInput>,
                  next: H) -> Swift.Result<OperationOutput<GetAnomaliesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetAnomaliesInput>
    public typealias MOutput = OperationOutput<GetAnomaliesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetAnomaliesOutputError>
}

extension GetAnomaliesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dateInterval = "DateInterval"
        case feedback = "Feedback"
        case maxResults = "MaxResults"
        case monitorArn = "MonitorArn"
        case nextPageToken = "NextPageToken"
        case totalImpact = "TotalImpact"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dateInterval = dateInterval {
            try encodeContainer.encode(dateInterval, forKey: .dateInterval)
        }
        if let feedback = feedback {
            try encodeContainer.encode(feedback.rawValue, forKey: .feedback)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let monitorArn = monitorArn {
            try encodeContainer.encode(monitorArn, forKey: .monitorArn)
        }
        if let nextPageToken = nextPageToken {
            try encodeContainer.encode(nextPageToken, forKey: .nextPageToken)
        }
        if let totalImpact = totalImpact {
            try encodeContainer.encode(totalImpact, forKey: .totalImpact)
        }
    }
}
