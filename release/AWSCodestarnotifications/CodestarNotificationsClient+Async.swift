// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension CodestarNotificationsClient {
    /// Creates a notification rule for a resource. The rule specifies the events you want
    ///             notifications about and the targets (such as SNS topics) where you want to receive
    ///             them.
    func createNotificationRule(input: CreateNotificationRuleInput) async throws -> CreateNotificationRuleOutputResponse
    {
        typealias createNotificationRuleContinuation = CheckedContinuation<CreateNotificationRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createNotificationRuleContinuation) in
            createNotificationRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a notification rule for a resource.
    func deleteNotificationRule(input: DeleteNotificationRuleInput) async throws -> DeleteNotificationRuleOutputResponse
    {
        typealias deleteNotificationRuleContinuation = CheckedContinuation<DeleteNotificationRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteNotificationRuleContinuation) in
            deleteNotificationRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a specified target for notifications.
    func deleteTarget(input: DeleteTargetInput) async throws -> DeleteTargetOutputResponse
    {
        typealias deleteTargetContinuation = CheckedContinuation<DeleteTargetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTargetContinuation) in
            deleteTarget(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about a specified notification rule.
    func describeNotificationRule(input: DescribeNotificationRuleInput) async throws -> DescribeNotificationRuleOutputResponse
    {
        typealias describeNotificationRuleContinuation = CheckedContinuation<DescribeNotificationRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeNotificationRuleContinuation) in
            describeNotificationRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about the event types available for configuring notifications.
    func listEventTypes(input: ListEventTypesInput) async throws -> ListEventTypesOutputResponse
    {
        typealias listEventTypesContinuation = CheckedContinuation<ListEventTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEventTypesContinuation) in
            listEventTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the notification rules for an AWS account.
    func listNotificationRules(input: ListNotificationRulesInput) async throws -> ListNotificationRulesOutputResponse
    {
        typealias listNotificationRulesContinuation = CheckedContinuation<ListNotificationRulesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNotificationRulesContinuation) in
            listNotificationRules(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the tags associated with a notification rule.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns a list of the notification rule targets for an AWS account.
    func listTargets(input: ListTargetsInput) async throws -> ListTargetsOutputResponse
    {
        typealias listTargetsContinuation = CheckedContinuation<ListTargetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTargetsContinuation) in
            listTargets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an association between a notification rule and an SNS topic so that the
    ///             associated target can receive notifications when the events described in the rule are
    ///             triggered.
    func subscribe(input: SubscribeInput) async throws -> SubscribeOutputResponse
    {
        typealias subscribeContinuation = CheckedContinuation<SubscribeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: subscribeContinuation) in
            subscribe(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a set of provided tags with a notification rule.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes an association between a notification rule and an Amazon SNS topic so that
    ///             subscribers to that topic stop receiving notifications when the events described in the
    ///             rule are triggered.
    func unsubscribe(input: UnsubscribeInput) async throws -> UnsubscribeOutputResponse
    {
        typealias unsubscribeContinuation = CheckedContinuation<UnsubscribeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: unsubscribeContinuation) in
            unsubscribe(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the association between one or more provided tags and a notification
    ///             rule.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a notification rule for a resource. You can change the events that trigger the
    ///             notification rule, the status of the rule, and the targets that receive the
    ///             notifications.
    ///
    ///             To add or remove tags for a notification rule, you must use TagResource and UntagResource.
    ///
    func updateNotificationRule(input: UpdateNotificationRuleInput) async throws -> UpdateNotificationRuleOutputResponse
    {
        typealias updateNotificationRuleContinuation = CheckedContinuation<UpdateNotificationRuleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateNotificationRuleContinuation) in
            updateNotificationRule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
