// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension AmpClient {
    /// Create an alert manager definition.
    func createAlertManagerDefinition(input: CreateAlertManagerDefinitionInput) async throws -> CreateAlertManagerDefinitionOutputResponse
    {
        typealias createAlertManagerDefinitionContinuation = CheckedContinuation<CreateAlertManagerDefinitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAlertManagerDefinitionContinuation) in
            createAlertManagerDefinition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a rule group namespace.
    func createRuleGroupsNamespace(input: CreateRuleGroupsNamespaceInput) async throws -> CreateRuleGroupsNamespaceOutputResponse
    {
        typealias createRuleGroupsNamespaceContinuation = CheckedContinuation<CreateRuleGroupsNamespaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRuleGroupsNamespaceContinuation) in
            createRuleGroupsNamespace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new AMP workspace.
    func createWorkspace(input: CreateWorkspaceInput) async throws -> CreateWorkspaceOutputResponse
    {
        typealias createWorkspaceContinuation = CheckedContinuation<CreateWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createWorkspaceContinuation) in
            createWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an alert manager definition.
    func deleteAlertManagerDefinition(input: DeleteAlertManagerDefinitionInput) async throws -> DeleteAlertManagerDefinitionOutputResponse
    {
        typealias deleteAlertManagerDefinitionContinuation = CheckedContinuation<DeleteAlertManagerDefinitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteAlertManagerDefinitionContinuation) in
            deleteAlertManagerDefinition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete a rule groups namespace.
    func deleteRuleGroupsNamespace(input: DeleteRuleGroupsNamespaceInput) async throws -> DeleteRuleGroupsNamespaceOutputResponse
    {
        typealias deleteRuleGroupsNamespaceContinuation = CheckedContinuation<DeleteRuleGroupsNamespaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRuleGroupsNamespaceContinuation) in
            deleteRuleGroupsNamespace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an AMP workspace.
    func deleteWorkspace(input: DeleteWorkspaceInput) async throws -> DeleteWorkspaceOutputResponse
    {
        typealias deleteWorkspaceContinuation = CheckedContinuation<DeleteWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteWorkspaceContinuation) in
            deleteWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an alert manager definition.
    func describeAlertManagerDefinition(input: DescribeAlertManagerDefinitionInput) async throws -> DescribeAlertManagerDefinitionOutputResponse
    {
        typealias describeAlertManagerDefinitionContinuation = CheckedContinuation<DescribeAlertManagerDefinitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAlertManagerDefinitionContinuation) in
            describeAlertManagerDefinition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describe a rule groups namespace.
    func describeRuleGroupsNamespace(input: DescribeRuleGroupsNamespaceInput) async throws -> DescribeRuleGroupsNamespaceOutputResponse
    {
        typealias describeRuleGroupsNamespaceContinuation = CheckedContinuation<DescribeRuleGroupsNamespaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRuleGroupsNamespaceContinuation) in
            describeRuleGroupsNamespace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an existing AMP workspace.
    func describeWorkspace(input: DescribeWorkspaceInput) async throws -> DescribeWorkspaceOutputResponse
    {
        typealias describeWorkspaceContinuation = CheckedContinuation<DescribeWorkspaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeWorkspaceContinuation) in
            describeWorkspace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists rule groups namespaces.
    func listRuleGroupsNamespaces(input: ListRuleGroupsNamespacesInput) async throws -> ListRuleGroupsNamespacesOutputResponse
    {
        typealias listRuleGroupsNamespacesContinuation = CheckedContinuation<ListRuleGroupsNamespacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRuleGroupsNamespacesContinuation) in
            listRuleGroupsNamespaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags you have assigned to the resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all AMP workspaces, including workspaces being created or deleted.
    func listWorkspaces(input: ListWorkspacesInput) async throws -> ListWorkspacesOutputResponse
    {
        typealias listWorkspacesContinuation = CheckedContinuation<ListWorkspacesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listWorkspacesContinuation) in
            listWorkspaces(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update an alert manager definition.
    func putAlertManagerDefinition(input: PutAlertManagerDefinitionInput) async throws -> PutAlertManagerDefinitionOutputResponse
    {
        typealias putAlertManagerDefinitionContinuation = CheckedContinuation<PutAlertManagerDefinitionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putAlertManagerDefinitionContinuation) in
            putAlertManagerDefinition(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update a rule groups namespace.
    func putRuleGroupsNamespace(input: PutRuleGroupsNamespaceInput) async throws -> PutRuleGroupsNamespaceOutputResponse
    {
        typealias putRuleGroupsNamespaceContinuation = CheckedContinuation<PutRuleGroupsNamespaceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putRuleGroupsNamespaceContinuation) in
            putRuleGroupsNamespace(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates tags for the specified resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes tags from the specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an AMP workspace alias.
    func updateWorkspaceAlias(input: UpdateWorkspaceAliasInput) async throws -> UpdateWorkspaceAliasOutputResponse
    {
        typealias updateWorkspaceAliasContinuation = CheckedContinuation<UpdateWorkspaceAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateWorkspaceAliasContinuation) in
            updateWorkspaceAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
