// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartChangeSetInputHeadersMiddleware: Middleware {
    public let id: String = "StartChangeSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartChangeSetInput>,
                  next: H) -> Swift.Result<OperationOutput<StartChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartChangeSetInput>
    public typealias MOutput = OperationOutput<StartChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartChangeSetOutputError>
}

public struct StartChangeSetInputQueryItemMiddleware: Middleware {
    public let id: String = "StartChangeSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartChangeSetInput>,
                  next: H) -> Swift.Result<OperationOutput<StartChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartChangeSetInput>
    public typealias MOutput = OperationOutput<StartChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartChangeSetOutputError>
}

public struct StartChangeSetInputBodyMiddleware: Middleware {
    public let id: String = "StartChangeSetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartChangeSetInput>,
                  next: H) -> Swift.Result<OperationOutput<StartChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartChangeSetInput>
    public typealias MOutput = OperationOutput<StartChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartChangeSetOutputError>
}

extension StartChangeSetInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case catalog = "Catalog"
        case changeSet = "ChangeSet"
        case changeSetName = "ChangeSetName"
        case clientRequestToken = "ClientRequestToken"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let catalog = catalog {
            try encodeContainer.encode(catalog, forKey: .catalog)
        }
        if let changeSet = changeSet {
            var changeSetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .changeSet)
            for requestedchangelist0 in changeSet {
                try changeSetContainer.encode(requestedchangelist0)
            }
        }
        if let changeSetName = changeSetName {
            try encodeContainer.encode(changeSetName, forKey: .changeSetName)
        }
        if let clientRequestToken = clientRequestToken {
            try encodeContainer.encode(clientRequestToken, forKey: .clientRequestToken)
        }
    }
}
