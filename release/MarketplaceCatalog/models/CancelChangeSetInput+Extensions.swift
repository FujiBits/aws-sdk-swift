// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CancelChangeSetInputHeadersMiddleware: Middleware {
    public let id: String = "CancelChangeSetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelChangeSetInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelChangeSetInput>
    public typealias MOutput = OperationOutput<CancelChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelChangeSetOutputError>
}

public struct CancelChangeSetInputQueryItemMiddleware: Middleware {
    public let id: String = "CancelChangeSetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CancelChangeSetInput>,
                  next: H) -> Swift.Result<OperationOutput<CancelChangeSetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let changeSetId = input.operationInput.changeSetId {
            let changeSetIdQueryItem = URLQueryItem(name: "changeSetId".urlPercentEncoding(), value: String(changeSetId).urlPercentEncoding())
            input.builder.withQueryItem(changeSetIdQueryItem)
        }
        if let catalog = input.operationInput.catalog {
            let catalogQueryItem = URLQueryItem(name: "catalog".urlPercentEncoding(), value: String(catalog).urlPercentEncoding())
            input.builder.withQueryItem(catalogQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CancelChangeSetInput>
    public typealias MOutput = OperationOutput<CancelChangeSetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CancelChangeSetOutputError>
}

extension CancelChangeSetInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
