// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension RdsDataClient {
    /// Runs a batch SQL statement over an array of data. You can run bulk update and insert operations for multiple records using a DML statement with different parameter sets. Bulk operations can provide a significant performance improvement over individual insert and update operations. If a call isn't part of a transaction because it doesn't include the transactionID parameter, changes that result from the call are committed automatically.
    func batchExecuteStatement(input: BatchExecuteStatementInput) async throws -> BatchExecuteStatementOutputResponse
    {
        typealias batchExecuteStatementContinuation = CheckedContinuation<BatchExecuteStatementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchExecuteStatementContinuation) in
            batchExecuteStatement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a SQL transaction. A transaction can run for a maximum of 24 hours. A transaction is terminated and rolled back automatically after 24 hours. A transaction times out if no calls use its transaction ID in three minutes. If a transaction times out before it's committed, it's rolled back automatically. DDL statements inside a transaction cause an implicit commit. We recommend that you run each DDL statement in a separate ExecuteStatement call with continueAfterTimeout enabled.
    func beginTransaction(input: BeginTransactionInput) async throws -> BeginTransactionOutputResponse
    {
        typealias beginTransactionContinuation = CheckedContinuation<BeginTransactionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: beginTransactionContinuation) in
            beginTransaction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Ends a SQL transaction started with the BeginTransaction operation and commits the changes.
    func commitTransaction(input: CommitTransactionInput) async throws -> CommitTransactionOutputResponse
    {
        typealias commitTransactionContinuation = CheckedContinuation<CommitTransactionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: commitTransactionContinuation) in
            commitTransaction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Runs one or more SQL statements. This operation is deprecated. Use the BatchExecuteStatement or ExecuteStatement operation.
    @available(*, deprecated, message: "The ExecuteSql API is deprecated, please use the ExecuteStatement API. API deprecated since 2019-03-21")
    func executeSql(input: ExecuteSqlInput) async throws -> ExecuteSqlOutputResponse
    {
        typealias executeSqlContinuation = CheckedContinuation<ExecuteSqlOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: executeSqlContinuation) in
            executeSql(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Runs a SQL statement against a database. If a call isn't part of a transaction because it doesn't include the transactionID parameter, changes that result from the call are committed automatically. The response size limit is 1 MB. If the call returns more than 1 MB of response data, the call is terminated.
    func executeStatement(input: ExecuteStatementInput) async throws -> ExecuteStatementOutputResponse
    {
        typealias executeStatementContinuation = CheckedContinuation<ExecuteStatementOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: executeStatementContinuation) in
            executeStatement(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Performs a rollback of a transaction. Rolling back a transaction cancels its changes.
    func rollbackTransaction(input: RollbackTransactionInput) async throws -> RollbackTransactionOutputResponse
    {
        typealias rollbackTransactionContinuation = CheckedContinuation<RollbackTransactionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rollbackTransactionContinuation) in
            rollbackTransaction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
