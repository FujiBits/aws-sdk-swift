// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(message: \(Swift.String(describing: message)))"}
}

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 403 response - AccessDeniedException. You do not have sufficient access to perform this action.
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.AssertionRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertedControls = "AssertedControls"
        case controlPanelArn = "ControlPanelArn"
        case name = "Name"
        case ruleConfig = "RuleConfig"
        case safetyRuleArn = "SafetyRuleArn"
        case status = "Status"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assertedControls = assertedControls {
            var assertedControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assertedControls)
            for __listof__string0 in assertedControls {
                try assertedControlsContainer.encode(__listof__string0)
            }
        }
        if let controlPanelArn = controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleConfig = ruleConfig {
            try encodeContainer.encode(ruleConfig, forKey: .ruleConfig)
        }
        if let safetyRuleArn = safetyRuleArn {
            try encodeContainer.encode(safetyRuleArn, forKey: .safetyRuleArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertedControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .assertedControls)
        var assertedControlsDecoded0:[Swift.String]? = nil
        if let assertedControlsContainer = assertedControlsContainer {
            assertedControlsDecoded0 = [Swift.String]()
            for string0 in assertedControlsContainer {
                if let string0 = string0 {
                    assertedControlsDecoded0?.append(string0)
                }
            }
        }
        assertedControls = assertedControlsDecoded0
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleConfigDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RuleConfig.self, forKey: .ruleConfig)
        ruleConfig = ruleConfigDecoded
        let safetyRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .safetyRuleArn)
        safetyRuleArn = safetyRuleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let waitPeriodMsDecoded = try containerValues.decode(Swift.Int.self, forKey: .waitPeriodMs)
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.AssertionRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssertionRule(assertedControls: \(Swift.String(describing: assertedControls)), controlPanelArn: \(Swift.String(describing: controlPanelArn)), name: \(Swift.String(describing: name)), ruleConfig: \(Swift.String(describing: ruleConfig)), safetyRuleArn: \(Swift.String(describing: safetyRuleArn)), status: \(Swift.String(describing: status)), waitPeriodMs: \(Swift.String(describing: waitPeriodMs)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// An assertion rule enforces that, when a routing control state is changed, the criteria set by the rule configuration is met. Otherwise, the change to the routing control is not accepted.
    public struct AssertionRule: Swift.Equatable {
        /// The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three Amazon Web Services Regions.
        /// This member is required.
        public let assertedControls: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the control panel.
        /// This member is required.
        public let controlPanelArn: Swift.String?
        /// Name of the assertion rule. You can use any non-white space character in the name.
        /// This member is required.
        public let name: Swift.String?
        /// The criteria that you set for specific assertion controls (routing controls) that designate how many controls must be enabled as the result of a transaction. For example, if you have three assertion controls, you might specify atleast 2 for your rule configuration. This means that at least two assertion controls must be enabled, so that at least two Amazon Web Services Regions are enabled.
        /// This member is required.
        public let ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig?
        /// The Amazon Resource Name (ARN) of the assertion rule.
        /// This member is required.
        public let safetyRuleArn: Swift.String?
        /// The deployment status of an assertion rule. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        /// This member is required.
        public let status: Route53RecoveryControlConfigClientTypes.Status?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public let waitPeriodMs: Swift.Int

        public init (
            assertedControls: [Swift.String]? = nil,
            controlPanelArn: Swift.String? = nil,
            name: Swift.String? = nil,
            ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig? = nil,
            safetyRuleArn: Swift.String? = nil,
            status: Route53RecoveryControlConfigClientTypes.Status? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.assertedControls = assertedControls
            self.controlPanelArn = controlPanelArn
            self.name = name
            self.ruleConfig = ruleConfig
            self.safetyRuleArn = safetyRuleArn
            self.status = status
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.AssertionRuleUpdate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case safetyRuleArn = "SafetyRuleArn"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let safetyRuleArn = safetyRuleArn {
            try encodeContainer.encode(safetyRuleArn, forKey: .safetyRuleArn)
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let safetyRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .safetyRuleArn)
        safetyRuleArn = safetyRuleArnDecoded
        let waitPeriodMsDecoded = try containerValues.decode(Swift.Int.self, forKey: .waitPeriodMs)
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.AssertionRuleUpdate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AssertionRuleUpdate(name: \(Swift.String(describing: name)), safetyRuleArn: \(Swift.String(describing: safetyRuleArn)), waitPeriodMs: \(Swift.String(describing: waitPeriodMs)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// An update to an assertion rule. You can update the name or the evaluation period (wait period). If you don't specify one of the items to update, the item is unchanged.
    public struct AssertionRuleUpdate: Swift.Equatable {
        /// The name of the assertion rule. You can use any non-white space character in the name.
        /// This member is required.
        public let name: Swift.String?
        /// The Amazon Resource Name (ARN) of the assertion rule.
        /// This member is required.
        public let safetyRuleArn: Swift.String?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public let waitPeriodMs: Swift.Int

        public init (
            name: Swift.String? = nil,
            safetyRuleArn: Swift.String? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.name = name
            self.safetyRuleArn = safetyRuleArn
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.Cluster: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterArn = "ClusterArn"
        case clusterEndpoints = "ClusterEndpoints"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterArn = clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let clusterEndpoints = clusterEndpoints {
            var clusterEndpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterEndpoints)
            for __listofclusterendpoint0 in clusterEndpoints {
                try clusterEndpointsContainer.encode(__listofclusterendpoint0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let clusterEndpointsContainer = try containerValues.decodeIfPresent([Route53RecoveryControlConfigClientTypes.ClusterEndpoint?].self, forKey: .clusterEndpoints)
        var clusterEndpointsDecoded0:[Route53RecoveryControlConfigClientTypes.ClusterEndpoint]? = nil
        if let clusterEndpointsContainer = clusterEndpointsContainer {
            clusterEndpointsDecoded0 = [Route53RecoveryControlConfigClientTypes.ClusterEndpoint]()
            for structure0 in clusterEndpointsContainer {
                if let structure0 = structure0 {
                    clusterEndpointsDecoded0?.append(structure0)
                }
            }
        }
        clusterEndpoints = clusterEndpointsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Status.self, forKey: .status)
        status = statusDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.Cluster: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Cluster(clusterArn: \(Swift.String(describing: clusterArn)), clusterEndpoints: \(Swift.String(describing: clusterEndpoints)), name: \(Swift.String(describing: name)), status: \(Swift.String(describing: status)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// A cluster is a set of five consensus-forming Regional endpoints that represent the infrastructure that hosts your routing controls. Typically, you host together on one cluster all of the routing controls for your applications.
    public struct Cluster: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the cluster.
        public let clusterArn: Swift.String?
        /// Endpoints for a cluster. Specify one of these endpoints when you want to set or retrieve a routing control state in the cluster. To get or update the routing control state, see the Amazon Route 53 Application Recovery Controller Cluster (Data Plane) Actions.
        public let clusterEndpoints: [Route53RecoveryControlConfigClientTypes.ClusterEndpoint]?
        /// The name of the cluster.
        public let name: Swift.String?
        /// Deployment status of a resource. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        public let status: Route53RecoveryControlConfigClientTypes.Status?

        public init (
            clusterArn: Swift.String? = nil,
            clusterEndpoints: [Route53RecoveryControlConfigClientTypes.ClusterEndpoint]? = nil,
            name: Swift.String? = nil,
            status: Route53RecoveryControlConfigClientTypes.Status? = nil
        )
        {
            self.clusterArn = clusterArn
            self.clusterEndpoints = clusterEndpoints
            self.name = name
            self.status = status
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.ClusterEndpoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoint = "Endpoint"
        case region = "Region"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.ClusterEndpoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClusterEndpoint(endpoint: \(Swift.String(describing: endpoint)), region: \(Swift.String(describing: region)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// A cluster endpoint. Specify an endpoint when you want to set or retrieve a routing control state in the cluster.
    public struct ClusterEndpoint: Swift.Equatable {
        /// A cluster endpoint. Specify an endpoint and Amazon Web Services Region when you want to set or retrieve a routing control state in the cluster. To get or update the routing control state, see the Amazon Route 53 Application Recovery Controller Cluster (Data Plane) Actions.
        public let endpoint: Swift.String?
        /// The Amazon Web Services Region for a cluster endpoint.
        public let region: Swift.String?

        public init (
            endpoint: Swift.String? = nil,
            region: Swift.String? = nil
        )
        {
            self.endpoint = endpoint
            self.region = region
        }
    }

}

extension ConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictException(message: \(Swift.String(describing: message)))"}
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 409 response - ConflictException.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.ControlPanel: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterArn = "ClusterArn"
        case controlPanelArn = "ControlPanelArn"
        case defaultControlPanel = "DefaultControlPanel"
        case name = "Name"
        case routingControlCount = "RoutingControlCount"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterArn = clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let controlPanelArn = controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if defaultControlPanel != false {
            try encodeContainer.encode(defaultControlPanel, forKey: .defaultControlPanel)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if routingControlCount != 0 {
            try encodeContainer.encode(routingControlCount, forKey: .routingControlCount)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let defaultControlPanelDecoded = try containerValues.decode(Swift.Bool.self, forKey: .defaultControlPanel)
        defaultControlPanel = defaultControlPanelDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let routingControlCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .routingControlCount)
        routingControlCount = routingControlCountDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Status.self, forKey: .status)
        status = statusDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.ControlPanel: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ControlPanel(clusterArn: \(Swift.String(describing: clusterArn)), controlPanelArn: \(Swift.String(describing: controlPanelArn)), defaultControlPanel: \(Swift.String(describing: defaultControlPanel)), name: \(Swift.String(describing: name)), routingControlCount: \(Swift.String(describing: routingControlCount)), status: \(Swift.String(describing: status)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// A control panel represents a group of routing controls that can be changed together in a single transaction.
    public struct ControlPanel: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the cluster that includes the control panel.
        public let clusterArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the control panel.
        public let controlPanelArn: Swift.String?
        /// A flag that Amazon Route 53 Application Recovery Controller sets to true to designate the default control panel for a cluster. When you create a cluster, Amazon Route 53 Application Recovery Controller creates a control panel, and sets this flag for that control panel. If you create a control panel yourself, this flag is set to false.
        public let defaultControlPanel: Swift.Bool
        /// The name of the control panel. You can use any non-white space character in the name.
        public let name: Swift.String?
        /// The number of routing controls in the control panel.
        public let routingControlCount: Swift.Int
        /// The deployment status of control panel. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        public let status: Route53RecoveryControlConfigClientTypes.Status?

        public init (
            clusterArn: Swift.String? = nil,
            controlPanelArn: Swift.String? = nil,
            defaultControlPanel: Swift.Bool = false,
            name: Swift.String? = nil,
            routingControlCount: Swift.Int = 0,
            status: Route53RecoveryControlConfigClientTypes.Status? = nil
        )
        {
            self.clusterArn = clusterArn
            self.controlPanelArn = controlPanelArn
            self.defaultControlPanel = defaultControlPanel
            self.name = name
            self.routingControlCount = routingControlCount
            self.status = status
        }
    }

}

public struct CreateClusterInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateClusterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateClusterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateClusterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateClusterOutputError>
}

extension CreateClusterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateClusterInput(clientToken: \(Swift.String(describing: clientToken)), clusterName: \(Swift.String(describing: clusterName)))"}
}

extension CreateClusterInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterName = "ClusterName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let clusterName = clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
    }
}

public struct CreateClusterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateClusterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateClusterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateClusterOutputError>
}

public struct CreateClusterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateClusterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateClusterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateClusterOutputError>
}

/// Creates a cluster.
public struct CreateClusterInput: Swift.Equatable {
    /// Unique client idempotency token.
    public var clientToken: Swift.String?
    /// The name of the cluster.
    /// This member is required.
    public let clusterName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        clusterName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterName = clusterName
    }
}

struct CreateClusterInputBody: Swift.Equatable {
    public let clientToken: Swift.String?
    public let clusterName: Swift.String?
}

extension CreateClusterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterName = "ClusterName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
    }
}

extension CreateClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateClusterOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateClusterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateClusterOutputResponse(cluster: \(Swift.String(describing: cluster)))"}
}

extension CreateClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct CreateClusterOutputResponse: Swift.Equatable {
    /// The cluster that was created.
    public let cluster: Route53RecoveryControlConfigClientTypes.Cluster?

    public init (
        cluster: Route53RecoveryControlConfigClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct CreateClusterOutputResponseBody: Swift.Equatable {
    public let cluster: Route53RecoveryControlConfigClientTypes.Cluster?
}

extension CreateClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

public struct CreateControlPanelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateControlPanelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateControlPanelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateControlPanelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateControlPanelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateControlPanelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateControlPanelOutputError>
}

extension CreateControlPanelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateControlPanelInput(clientToken: \(Swift.String(describing: clientToken)), clusterArn: \(Swift.String(describing: clusterArn)), controlPanelName: \(Swift.String(describing: controlPanelName)))"}
}

extension CreateControlPanelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterArn = "ClusterArn"
        case controlPanelName = "ControlPanelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let clusterArn = clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let controlPanelName = controlPanelName {
            try encodeContainer.encode(controlPanelName, forKey: .controlPanelName)
        }
    }
}

public struct CreateControlPanelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateControlPanelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateControlPanelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateControlPanelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateControlPanelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateControlPanelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateControlPanelOutputError>
}

public struct CreateControlPanelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateControlPanelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateControlPanelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateControlPanelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateControlPanelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateControlPanelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateControlPanelOutputError>
}

/// The details of the control panel that you're creating.
public struct CreateControlPanelInput: Swift.Equatable {
    /// Unique client idempotency token.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the cluster for the control panel.
    /// This member is required.
    public let clusterArn: Swift.String?
    /// The name of the control panel.
    /// This member is required.
    public let controlPanelName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        clusterArn: Swift.String? = nil,
        controlPanelName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterArn = clusterArn
        self.controlPanelName = controlPanelName
    }
}

struct CreateControlPanelInputBody: Swift.Equatable {
    public let clientToken: Swift.String?
    public let clusterArn: Swift.String?
    public let controlPanelName: Swift.String?
}

extension CreateControlPanelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterArn = "ClusterArn"
        case controlPanelName = "ControlPanelName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let controlPanelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelName)
        controlPanelName = controlPanelNameDecoded
    }
}

extension CreateControlPanelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateControlPanelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateControlPanelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateControlPanelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateControlPanelOutputResponse(controlPanel: \(Swift.String(describing: controlPanel)))"}
}

extension CreateControlPanelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateControlPanelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.controlPanel = output.controlPanel
        } else {
            self.controlPanel = nil
        }
    }
}

public struct CreateControlPanelOutputResponse: Swift.Equatable {
    /// Information about a control panel.
    public let controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?

    public init (
        controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel? = nil
    )
    {
        self.controlPanel = controlPanel
    }
}

struct CreateControlPanelOutputResponseBody: Swift.Equatable {
    public let controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?
}

extension CreateControlPanelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanel = "ControlPanel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.ControlPanel.self, forKey: .controlPanel)
        controlPanel = controlPanelDecoded
    }
}

public struct CreateRoutingControlInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRoutingControlInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRoutingControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRoutingControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRoutingControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRoutingControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRoutingControlOutputError>
}

extension CreateRoutingControlInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRoutingControlInput(clientToken: \(Swift.String(describing: clientToken)), clusterArn: \(Swift.String(describing: clusterArn)), controlPanelArn: \(Swift.String(describing: controlPanelArn)), routingControlName: \(Swift.String(describing: routingControlName)))"}
}

extension CreateRoutingControlInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterArn = "ClusterArn"
        case controlPanelArn = "ControlPanelArn"
        case routingControlName = "RoutingControlName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let clusterArn = clusterArn {
            try encodeContainer.encode(clusterArn, forKey: .clusterArn)
        }
        if let controlPanelArn = controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let routingControlName = routingControlName {
            try encodeContainer.encode(routingControlName, forKey: .routingControlName)
        }
    }
}

public struct CreateRoutingControlInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRoutingControlInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRoutingControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRoutingControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRoutingControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRoutingControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRoutingControlOutputError>
}

public struct CreateRoutingControlInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateRoutingControlInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateRoutingControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateRoutingControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateRoutingControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateRoutingControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateRoutingControlOutputError>
}

/// The details of the routing control that you're creating.
public struct CreateRoutingControlInput: Swift.Equatable {
    /// Unique client idempotency token.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the cluster that includes the routing control.
    /// This member is required.
    public let clusterArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the control panel that includes the routing control.
    public let controlPanelArn: Swift.String?
    /// The name of the routing control.
    /// This member is required.
    public let routingControlName: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        clusterArn: Swift.String? = nil,
        controlPanelArn: Swift.String? = nil,
        routingControlName: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.clusterArn = clusterArn
        self.controlPanelArn = controlPanelArn
        self.routingControlName = routingControlName
    }
}

struct CreateRoutingControlInputBody: Swift.Equatable {
    public let clientToken: Swift.String?
    public let clusterArn: Swift.String?
    public let controlPanelArn: Swift.String?
    public let routingControlName: Swift.String?
}

extension CreateRoutingControlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case clusterArn = "ClusterArn"
        case controlPanelArn = "ControlPanelArn"
        case routingControlName = "RoutingControlName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let clusterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterArn)
        clusterArn = clusterArnDecoded
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let routingControlNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingControlName)
        routingControlName = routingControlNameDecoded
    }
}

extension CreateRoutingControlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRoutingControlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateRoutingControlOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRoutingControlOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateRoutingControlOutputResponse(routingControl: \(Swift.String(describing: routingControl)))"}
}

extension CreateRoutingControlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateRoutingControlOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.routingControl = output.routingControl
        } else {
            self.routingControl = nil
        }
    }
}

public struct CreateRoutingControlOutputResponse: Swift.Equatable {
    /// The routing control that is created.
    public let routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?

    public init (
        routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl? = nil
    )
    {
        self.routingControl = routingControl
    }
}

struct CreateRoutingControlOutputResponseBody: Swift.Equatable {
    public let routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?
}

extension CreateRoutingControlOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingControl = "RoutingControl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingControlDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RoutingControl.self, forKey: .routingControl)
        routingControl = routingControlDecoded
    }
}

public struct CreateSafetyRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSafetyRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSafetyRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSafetyRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSafetyRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSafetyRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSafetyRuleOutputError>
}

extension CreateSafetyRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSafetyRuleInput(assertionRule: \(Swift.String(describing: assertionRule)), clientToken: \(Swift.String(describing: clientToken)), gatingRule: \(Swift.String(describing: gatingRule)))"}
}

extension CreateSafetyRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRule = "AssertionRule"
        case clientToken = "ClientToken"
        case gatingRule = "GatingRule"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assertionRule = assertionRule {
            try encodeContainer.encode(assertionRule, forKey: .assertionRule)
        }
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let gatingRule = gatingRule {
            try encodeContainer.encode(gatingRule, forKey: .gatingRule)
        }
    }
}

public struct CreateSafetyRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSafetyRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSafetyRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSafetyRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSafetyRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSafetyRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSafetyRuleOutputError>
}

public struct CreateSafetyRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateSafetyRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateSafetyRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateSafetyRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateSafetyRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateSafetyRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateSafetyRuleOutputError>
}

/// The request body that you include when you create a safety rule.
public struct CreateSafetyRuleInput: Swift.Equatable {
    /// A new assertion rule for a control panel.
    public let assertionRule: Route53RecoveryControlConfigClientTypes.NewAssertionRule?
    /// Unique client idempotency token.
    public var clientToken: Swift.String?
    /// A new gating rule for a control panel.
    public let gatingRule: Route53RecoveryControlConfigClientTypes.NewGatingRule?

    public init (
        assertionRule: Route53RecoveryControlConfigClientTypes.NewAssertionRule? = nil,
        clientToken: Swift.String? = nil,
        gatingRule: Route53RecoveryControlConfigClientTypes.NewGatingRule? = nil
    )
    {
        self.assertionRule = assertionRule
        self.clientToken = clientToken
        self.gatingRule = gatingRule
    }
}

struct CreateSafetyRuleInputBody: Swift.Equatable {
    public let assertionRule: Route53RecoveryControlConfigClientTypes.NewAssertionRule?
    public let clientToken: Swift.String?
    public let gatingRule: Route53RecoveryControlConfigClientTypes.NewGatingRule?
}

extension CreateSafetyRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRule = "AssertionRule"
        case clientToken = "ClientToken"
        case gatingRule = "GatingRule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertionRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.NewAssertionRule.self, forKey: .assertionRule)
        assertionRule = assertionRuleDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let gatingRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.NewGatingRule.self, forKey: .gatingRule)
        gatingRule = gatingRuleDecoded
    }
}

extension CreateSafetyRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateSafetyRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateSafetyRuleOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateSafetyRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateSafetyRuleOutputResponse(assertionRule: \(Swift.String(describing: assertionRule)), gatingRule: \(Swift.String(describing: gatingRule)))"}
}

extension CreateSafetyRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateSafetyRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.assertionRule = output.assertionRule
            self.gatingRule = output.gatingRule
        } else {
            self.assertionRule = nil
            self.gatingRule = nil
        }
    }
}

public struct CreateSafetyRuleOutputResponse: Swift.Equatable {
    /// An assertion rule enforces that, when a routing control state is changed, the criteria set by the rule configuration is met. Otherwise, the change to the routing control is not accepted.
    public let assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    /// A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify. If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control state changes to run and complete against the set of target controls.
    public let gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?

    public init (
        assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule? = nil,
        gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule? = nil
    )
    {
        self.assertionRule = assertionRule
        self.gatingRule = gatingRule
    }
}

struct CreateSafetyRuleOutputResponseBody: Swift.Equatable {
    public let assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    public let gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?
}

extension CreateSafetyRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRule = "AssertionRule"
        case gatingRule = "GatingRule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertionRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.AssertionRule.self, forKey: .assertionRule)
        assertionRule = assertionRuleDecoded
        let gatingRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.GatingRule.self, forKey: .gatingRule)
        gatingRule = gatingRuleDecoded
    }
}

extension DeleteClusterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteClusterInput(clusterArn: \(Swift.String(describing: clusterArn)))"}
}

extension DeleteClusterInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteClusterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteClusterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteClusterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteClusterOutputError>
}

public struct DeleteClusterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteClusterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteClusterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteClusterOutputError>
}

public struct DeleteClusterInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the cluster that you're deleting.
    /// This member is required.
    public let clusterArn: Swift.String?

    public init (
        clusterArn: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
    }
}

struct DeleteClusterInputBody: Swift.Equatable {
}

extension DeleteClusterInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteClusterOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteClusterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteClusterOutputResponse()"}
}

extension DeleteClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteClusterOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteClusterOutputResponseBody: Swift.Equatable {
}

extension DeleteClusterOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteControlPanelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteControlPanelInput(controlPanelArn: \(Swift.String(describing: controlPanelArn)))"}
}

extension DeleteControlPanelInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteControlPanelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteControlPanelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteControlPanelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteControlPanelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteControlPanelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteControlPanelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteControlPanelOutputError>
}

public struct DeleteControlPanelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteControlPanelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteControlPanelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteControlPanelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteControlPanelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteControlPanelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteControlPanelOutputError>
}

public struct DeleteControlPanelInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the control panel that you're deleting.
    /// This member is required.
    public let controlPanelArn: Swift.String?

    public init (
        controlPanelArn: Swift.String? = nil
    )
    {
        self.controlPanelArn = controlPanelArn
    }
}

struct DeleteControlPanelInputBody: Swift.Equatable {
}

extension DeleteControlPanelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteControlPanelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteControlPanelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteControlPanelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteControlPanelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteControlPanelOutputResponse()"}
}

extension DeleteControlPanelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteControlPanelOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteControlPanelOutputResponseBody: Swift.Equatable {
}

extension DeleteControlPanelOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRoutingControlInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRoutingControlInput(routingControlArn: \(Swift.String(describing: routingControlArn)))"}
}

extension DeleteRoutingControlInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteRoutingControlInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRoutingControlInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRoutingControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRoutingControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRoutingControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRoutingControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRoutingControlOutputError>
}

public struct DeleteRoutingControlInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteRoutingControlInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteRoutingControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteRoutingControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteRoutingControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteRoutingControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteRoutingControlOutputError>
}

public struct DeleteRoutingControlInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the routing control that you're deleting.
    /// This member is required.
    public let routingControlArn: Swift.String?

    public init (
        routingControlArn: Swift.String? = nil
    )
    {
        self.routingControlArn = routingControlArn
    }
}

struct DeleteRoutingControlInputBody: Swift.Equatable {
}

extension DeleteRoutingControlInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteRoutingControlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRoutingControlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteRoutingControlOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRoutingControlOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteRoutingControlOutputResponse()"}
}

extension DeleteRoutingControlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRoutingControlOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteRoutingControlOutputResponseBody: Swift.Equatable {
}

extension DeleteRoutingControlOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSafetyRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSafetyRuleInput(safetyRuleArn: \(Swift.String(describing: safetyRuleArn)))"}
}

extension DeleteSafetyRuleInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteSafetyRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSafetyRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSafetyRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSafetyRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSafetyRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSafetyRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSafetyRuleOutputError>
}

public struct DeleteSafetyRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteSafetyRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteSafetyRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteSafetyRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteSafetyRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteSafetyRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteSafetyRuleOutputError>
}

public struct DeleteSafetyRuleInput: Swift.Equatable {
    /// The request body that you include when you update a safety rule.
    /// This member is required.
    public let safetyRuleArn: Swift.String?

    public init (
        safetyRuleArn: Swift.String? = nil
    )
    {
        self.safetyRuleArn = safetyRuleArn
    }
}

struct DeleteSafetyRuleInputBody: Swift.Equatable {
}

extension DeleteSafetyRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteSafetyRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSafetyRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteSafetyRuleOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSafetyRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteSafetyRuleOutputResponse()"}
}

extension DeleteSafetyRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSafetyRuleOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteSafetyRuleOutputResponseBody: Swift.Equatable {
}

extension DeleteSafetyRuleOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeClusterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeClusterInput(clusterArn: \(Swift.String(describing: clusterArn)))"}
}

extension DescribeClusterInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeClusterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeClusterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeClusterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeClusterOutputError>
}

public struct DescribeClusterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeClusterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeClusterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeClusterOutputError>
}

public struct DescribeClusterInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the cluster that you're getting details for.
    /// This member is required.
    public let clusterArn: Swift.String?

    public init (
        clusterArn: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
    }
}

struct DescribeClusterInputBody: Swift.Equatable {
}

extension DescribeClusterInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeClusterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeClusterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeClusterOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeClusterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeClusterOutputResponse(cluster: \(Swift.String(describing: cluster)))"}
}

extension DescribeClusterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeClusterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cluster = output.cluster
        } else {
            self.cluster = nil
        }
    }
}

public struct DescribeClusterOutputResponse: Swift.Equatable {
    /// The cluster for the DescribeCluster request.
    public let cluster: Route53RecoveryControlConfigClientTypes.Cluster?

    public init (
        cluster: Route53RecoveryControlConfigClientTypes.Cluster? = nil
    )
    {
        self.cluster = cluster
    }
}

struct DescribeClusterOutputResponseBody: Swift.Equatable {
    public let cluster: Route53RecoveryControlConfigClientTypes.Cluster?
}

extension DescribeClusterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cluster = "Cluster"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Cluster.self, forKey: .cluster)
        cluster = clusterDecoded
    }
}

extension DescribeControlPanelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeControlPanelInput(controlPanelArn: \(Swift.String(describing: controlPanelArn)))"}
}

extension DescribeControlPanelInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeControlPanelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeControlPanelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeControlPanelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeControlPanelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeControlPanelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeControlPanelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeControlPanelOutputError>
}

public struct DescribeControlPanelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeControlPanelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeControlPanelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeControlPanelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeControlPanelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeControlPanelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeControlPanelOutputError>
}

public struct DescribeControlPanelInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the control panel that you're getting details for.
    /// This member is required.
    public let controlPanelArn: Swift.String?

    public init (
        controlPanelArn: Swift.String? = nil
    )
    {
        self.controlPanelArn = controlPanelArn
    }
}

struct DescribeControlPanelInputBody: Swift.Equatable {
}

extension DescribeControlPanelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeControlPanelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeControlPanelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeControlPanelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeControlPanelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeControlPanelOutputResponse(controlPanel: \(Swift.String(describing: controlPanel)))"}
}

extension DescribeControlPanelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeControlPanelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.controlPanel = output.controlPanel
        } else {
            self.controlPanel = nil
        }
    }
}

public struct DescribeControlPanelOutputResponse: Swift.Equatable {
    /// Information about the control panel.
    public let controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?

    public init (
        controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel? = nil
    )
    {
        self.controlPanel = controlPanel
    }
}

struct DescribeControlPanelOutputResponseBody: Swift.Equatable {
    public let controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?
}

extension DescribeControlPanelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanel = "ControlPanel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.ControlPanel.self, forKey: .controlPanel)
        controlPanel = controlPanelDecoded
    }
}

extension DescribeRoutingControlInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRoutingControlInput(routingControlArn: \(Swift.String(describing: routingControlArn)))"}
}

extension DescribeRoutingControlInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeRoutingControlInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRoutingControlInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRoutingControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRoutingControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRoutingControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRoutingControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRoutingControlOutputError>
}

public struct DescribeRoutingControlInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRoutingControlInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRoutingControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRoutingControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRoutingControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRoutingControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRoutingControlOutputError>
}

public struct DescribeRoutingControlInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the routing control that you're getting details for.
    /// This member is required.
    public let routingControlArn: Swift.String?

    public init (
        routingControlArn: Swift.String? = nil
    )
    {
        self.routingControlArn = routingControlArn
    }
}

struct DescribeRoutingControlInputBody: Swift.Equatable {
}

extension DescribeRoutingControlInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeRoutingControlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRoutingControlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeRoutingControlOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRoutingControlOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRoutingControlOutputResponse(routingControl: \(Swift.String(describing: routingControl)))"}
}

extension DescribeRoutingControlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeRoutingControlOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.routingControl = output.routingControl
        } else {
            self.routingControl = nil
        }
    }
}

public struct DescribeRoutingControlOutputResponse: Swift.Equatable {
    /// Information about the routing control.
    public let routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?

    public init (
        routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl? = nil
    )
    {
        self.routingControl = routingControl
    }
}

struct DescribeRoutingControlOutputResponseBody: Swift.Equatable {
    public let routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?
}

extension DescribeRoutingControlOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingControl = "RoutingControl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingControlDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RoutingControl.self, forKey: .routingControl)
        routingControl = routingControlDecoded
    }
}

extension DescribeSafetyRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeSafetyRuleInput(safetyRuleArn: \(Swift.String(describing: safetyRuleArn)))"}
}

extension DescribeSafetyRuleInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeSafetyRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeSafetyRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeSafetyRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeSafetyRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeSafetyRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeSafetyRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeSafetyRuleOutputError>
}

public struct DescribeSafetyRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeSafetyRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeSafetyRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeSafetyRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeSafetyRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeSafetyRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeSafetyRuleOutputError>
}

public struct DescribeSafetyRuleInput: Swift.Equatable {
    /// The request body that you include when you update a safety rule.
    /// This member is required.
    public let safetyRuleArn: Swift.String?

    public init (
        safetyRuleArn: Swift.String? = nil
    )
    {
        self.safetyRuleArn = safetyRuleArn
    }
}

struct DescribeSafetyRuleInputBody: Swift.Equatable {
}

extension DescribeSafetyRuleInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeSafetyRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSafetyRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeSafetyRuleOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSafetyRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeSafetyRuleOutputResponse(assertionRule: \(Swift.String(describing: assertionRule)), gatingRule: \(Swift.String(describing: gatingRule)))"}
}

extension DescribeSafetyRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeSafetyRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.assertionRule = output.assertionRule
            self.gatingRule = output.gatingRule
        } else {
            self.assertionRule = nil
            self.gatingRule = nil
        }
    }
}

public struct DescribeSafetyRuleOutputResponse: Swift.Equatable {
    /// An assertion rule enforces that, when a routing control state is changed, the criteria set by the rule configuration is met. Otherwise, the change to the routing control is not accepted.
    public let assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    /// A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify. If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control state changes to run and complete against the set of target controls.
    public let gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?

    public init (
        assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule? = nil,
        gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule? = nil
    )
    {
        self.assertionRule = assertionRule
        self.gatingRule = gatingRule
    }
}

struct DescribeSafetyRuleOutputResponseBody: Swift.Equatable {
    public let assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    public let gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?
}

extension DescribeSafetyRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRule = "AssertionRule"
        case gatingRule = "GatingRule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertionRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.AssertionRule.self, forKey: .assertionRule)
        assertionRule = assertionRuleDecoded
        let gatingRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.GatingRule.self, forKey: .gatingRule)
        gatingRule = gatingRuleDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.GatingRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanelArn = "ControlPanelArn"
        case gatingControls = "GatingControls"
        case name = "Name"
        case ruleConfig = "RuleConfig"
        case safetyRuleArn = "SafetyRuleArn"
        case status = "Status"
        case targetControls = "TargetControls"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlPanelArn = controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let gatingControls = gatingControls {
            var gatingControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gatingControls)
            for __listof__string0 in gatingControls {
                try gatingControlsContainer.encode(__listof__string0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleConfig = ruleConfig {
            try encodeContainer.encode(ruleConfig, forKey: .ruleConfig)
        }
        if let safetyRuleArn = safetyRuleArn {
            try encodeContainer.encode(safetyRuleArn, forKey: .safetyRuleArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let targetControls = targetControls {
            var targetControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetControls)
            for __listof__string0 in targetControls {
                try targetControlsContainer.encode(__listof__string0)
            }
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let gatingControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .gatingControls)
        var gatingControlsDecoded0:[Swift.String]? = nil
        if let gatingControlsContainer = gatingControlsContainer {
            gatingControlsDecoded0 = [Swift.String]()
            for string0 in gatingControlsContainer {
                if let string0 = string0 {
                    gatingControlsDecoded0?.append(string0)
                }
            }
        }
        gatingControls = gatingControlsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleConfigDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RuleConfig.self, forKey: .ruleConfig)
        ruleConfig = ruleConfigDecoded
        let safetyRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .safetyRuleArn)
        safetyRuleArn = safetyRuleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let targetControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetControls)
        var targetControlsDecoded0:[Swift.String]? = nil
        if let targetControlsContainer = targetControlsContainer {
            targetControlsDecoded0 = [Swift.String]()
            for string0 in targetControlsContainer {
                if let string0 = string0 {
                    targetControlsDecoded0?.append(string0)
                }
            }
        }
        targetControls = targetControlsDecoded0
        let waitPeriodMsDecoded = try containerValues.decode(Swift.Int.self, forKey: .waitPeriodMs)
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.GatingRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GatingRule(controlPanelArn: \(Swift.String(describing: controlPanelArn)), gatingControls: \(Swift.String(describing: gatingControls)), name: \(Swift.String(describing: name)), ruleConfig: \(Swift.String(describing: ruleConfig)), safetyRuleArn: \(Swift.String(describing: safetyRuleArn)), status: \(Swift.String(describing: status)), targetControls: \(Swift.String(describing: targetControls)), waitPeriodMs: \(Swift.String(describing: waitPeriodMs)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify. If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control state changes to run and complete against the set of target controls.
    public struct GatingRule: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the control panel.
        /// This member is required.
        public let controlPanelArn: Swift.String?
        /// The gating controls for the gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
        /// This member is required.
        public let gatingControls: [Swift.String]?
        /// The name for the gating rule.
        /// This member is required.
        public let name: Swift.String?
        /// The criteria that you set for specific gating controls (routing controls) that designates how many controls must be enabled to allow you to change (set or unset) the target controls.
        /// This member is required.
        public let ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig?
        /// The Amazon Resource Name (ARN) of the gating rule.
        /// This member is required.
        public let safetyRuleArn: Swift.String?
        /// The deployment status of a gating rule. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        /// This member is required.
        public let status: Route53RecoveryControlConfigClientTypes.Status?
        /// Routing controls that can only be set or unset if the specified RuleConfig evaluates to true for the specified GatingControls. For example, say you have three gating controls, one for each of three Amazon Web Services Regions. Now you specify ATLEAST 2 as your RuleConfig. With these settings, you can only change (set or unset) the routing controls that you have specified as TargetControls if that rule evaluates to true. In other words, your ability to change the routing controls that you have specified as TargetControls is gated by the rule that you set for the routing controls in GatingControls.
        /// This member is required.
        public let targetControls: [Swift.String]?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public let waitPeriodMs: Swift.Int

        public init (
            controlPanelArn: Swift.String? = nil,
            gatingControls: [Swift.String]? = nil,
            name: Swift.String? = nil,
            ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig? = nil,
            safetyRuleArn: Swift.String? = nil,
            status: Route53RecoveryControlConfigClientTypes.Status? = nil,
            targetControls: [Swift.String]? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.controlPanelArn = controlPanelArn
            self.gatingControls = gatingControls
            self.name = name
            self.ruleConfig = ruleConfig
            self.safetyRuleArn = safetyRuleArn
            self.status = status
            self.targetControls = targetControls
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.GatingRuleUpdate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case safetyRuleArn = "SafetyRuleArn"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let safetyRuleArn = safetyRuleArn {
            try encodeContainer.encode(safetyRuleArn, forKey: .safetyRuleArn)
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let safetyRuleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .safetyRuleArn)
        safetyRuleArn = safetyRuleArnDecoded
        let waitPeriodMsDecoded = try containerValues.decode(Swift.Int.self, forKey: .waitPeriodMs)
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.GatingRuleUpdate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GatingRuleUpdate(name: \(Swift.String(describing: name)), safetyRuleArn: \(Swift.String(describing: safetyRuleArn)), waitPeriodMs: \(Swift.String(describing: waitPeriodMs)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// Update to a gating rule. You can update the name or the evaluation period (wait period). If you don't specify one of the items to update, the item is unchanged.
    public struct GatingRuleUpdate: Swift.Equatable {
        /// The name for the gating rule.
        /// This member is required.
        public let name: Swift.String?
        /// The Amazon Resource Name (ARN) of the gating rule.
        /// This member is required.
        public let safetyRuleArn: Swift.String?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public let waitPeriodMs: Swift.Int

        public init (
            name: Swift.String? = nil,
            safetyRuleArn: Swift.String? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.name = name
            self.safetyRuleArn = safetyRuleArn
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension InternalServerException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServerException(message: \(Swift.String(describing: message)))"}
}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 500 response - InternalServiceError. Temporary service error. Retry the request.
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListAssociatedRoute53HealthChecksInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAssociatedRoute53HealthChecksInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), routingControlArn: \(Swift.String(describing: routingControlArn)))"}
}

extension ListAssociatedRoute53HealthChecksInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListAssociatedRoute53HealthChecksInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAssociatedRoute53HealthChecksInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAssociatedRoute53HealthChecksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAssociatedRoute53HealthChecksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAssociatedRoute53HealthChecksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAssociatedRoute53HealthChecksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAssociatedRoute53HealthChecksOutputError>
}

public struct ListAssociatedRoute53HealthChecksInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListAssociatedRoute53HealthChecksInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListAssociatedRoute53HealthChecksInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListAssociatedRoute53HealthChecksOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListAssociatedRoute53HealthChecksInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListAssociatedRoute53HealthChecksOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListAssociatedRoute53HealthChecksOutputError>
}

public struct ListAssociatedRoute53HealthChecksInput: Swift.Equatable {
    /// The number of objects that you want to return with this call.
    public let maxResults: Swift.Int
    /// The token that identifies which batch of results you want to see.
    public let nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the routing control that you're getting details for.
    /// This member is required.
    public let routingControlArn: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        routingControlArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.routingControlArn = routingControlArn
    }
}

struct ListAssociatedRoute53HealthChecksInputBody: Swift.Equatable {
}

extension ListAssociatedRoute53HealthChecksInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListAssociatedRoute53HealthChecksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListAssociatedRoute53HealthChecksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListAssociatedRoute53HealthChecksOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListAssociatedRoute53HealthChecksOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAssociatedRoute53HealthChecksOutputResponse(healthCheckIds: \(Swift.String(describing: healthCheckIds)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListAssociatedRoute53HealthChecksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListAssociatedRoute53HealthChecksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.healthCheckIds = output.healthCheckIds
            self.nextToken = output.nextToken
        } else {
            self.healthCheckIds = nil
            self.nextToken = nil
        }
    }
}

public struct ListAssociatedRoute53HealthChecksOutputResponse: Swift.Equatable {
    /// Identifiers for the health checks.
    public let healthCheckIds: [Swift.String]?
    /// The token that identifies which batch of results you want to see.
    public let nextToken: Swift.String?

    public init (
        healthCheckIds: [Swift.String]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.healthCheckIds = healthCheckIds
        self.nextToken = nextToken
    }
}

struct ListAssociatedRoute53HealthChecksOutputResponseBody: Swift.Equatable {
    public let healthCheckIds: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListAssociatedRoute53HealthChecksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthCheckIds = "HealthCheckIds"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthCheckIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .healthCheckIds)
        var healthCheckIdsDecoded0:[Swift.String]? = nil
        if let healthCheckIdsContainer = healthCheckIdsContainer {
            healthCheckIdsDecoded0 = [Swift.String]()
            for string0 in healthCheckIdsContainer {
                if let string0 = string0 {
                    healthCheckIdsDecoded0?.append(string0)
                }
            }
        }
        healthCheckIds = healthCheckIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListClustersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListClustersInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListClustersInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListClustersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListClustersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListClustersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListClustersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListClustersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListClustersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListClustersOutputError>
}

public struct ListClustersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListClustersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListClustersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListClustersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListClustersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListClustersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListClustersOutputError>
}

public struct ListClustersInput: Swift.Equatable {
    /// The number of objects that you want to return with this call.
    public let maxResults: Swift.Int
    /// The token that identifies which batch of results you want to see.
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListClustersInputBody: Swift.Equatable {
}

extension ListClustersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListClustersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListClustersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListClustersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListClustersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListClustersOutputResponse(clusters: \(Swift.String(describing: clusters)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListClustersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListClustersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.clusters = output.clusters
            self.nextToken = output.nextToken
        } else {
            self.clusters = nil
            self.nextToken = nil
        }
    }
}

public struct ListClustersOutputResponse: Swift.Equatable {
    /// An array of the clusters in an account.
    public let clusters: [Route53RecoveryControlConfigClientTypes.Cluster]?
    /// The token that identifies which batch of results you want to see.
    public let nextToken: Swift.String?

    public init (
        clusters: [Route53RecoveryControlConfigClientTypes.Cluster]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusters = clusters
        self.nextToken = nextToken
    }
}

struct ListClustersOutputResponseBody: Swift.Equatable {
    public let clusters: [Route53RecoveryControlConfigClientTypes.Cluster]?
    public let nextToken: Swift.String?
}

extension ListClustersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusters = "Clusters"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clustersContainer = try containerValues.decodeIfPresent([Route53RecoveryControlConfigClientTypes.Cluster?].self, forKey: .clusters)
        var clustersDecoded0:[Route53RecoveryControlConfigClientTypes.Cluster]? = nil
        if let clustersContainer = clustersContainer {
            clustersDecoded0 = [Route53RecoveryControlConfigClientTypes.Cluster]()
            for structure0 in clustersContainer {
                if let structure0 = structure0 {
                    clustersDecoded0?.append(structure0)
                }
            }
        }
        clusters = clustersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListControlPanelsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListControlPanelsInput(clusterArn: \(Swift.String(describing: clusterArn)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListControlPanelsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListControlPanelsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListControlPanelsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListControlPanelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListControlPanelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListControlPanelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListControlPanelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListControlPanelsOutputError>
}

public struct ListControlPanelsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListControlPanelsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListControlPanelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListControlPanelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let clusterArn = input.operationInput.clusterArn {
            let clusterArnQueryItem = ClientRuntime.URLQueryItem(name: "ClusterArn".urlPercentEncoding(), value: Swift.String(clusterArn).urlPercentEncoding())
            input.builder.withQueryItem(clusterArnQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListControlPanelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListControlPanelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListControlPanelsOutputError>
}

public struct ListControlPanelsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of a cluster.
    public let clusterArn: Swift.String?
    /// The number of objects that you want to return with this call.
    public let maxResults: Swift.Int
    /// The token that identifies which batch of results you want to see.
    public let nextToken: Swift.String?

    public init (
        clusterArn: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListControlPanelsInputBody: Swift.Equatable {
}

extension ListControlPanelsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListControlPanelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListControlPanelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListControlPanelsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListControlPanelsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListControlPanelsOutputResponse(controlPanels: \(Swift.String(describing: controlPanels)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListControlPanelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListControlPanelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.controlPanels = output.controlPanels
            self.nextToken = output.nextToken
        } else {
            self.controlPanels = nil
            self.nextToken = nil
        }
    }
}

public struct ListControlPanelsOutputResponse: Swift.Equatable {
    /// The result of a successful ListControlPanel request.
    public let controlPanels: [Route53RecoveryControlConfigClientTypes.ControlPanel]?
    /// The token that identifies which batch of results you want to see.
    public let nextToken: Swift.String?

    public init (
        controlPanels: [Route53RecoveryControlConfigClientTypes.ControlPanel]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.controlPanels = controlPanels
        self.nextToken = nextToken
    }
}

struct ListControlPanelsOutputResponseBody: Swift.Equatable {
    public let controlPanels: [Route53RecoveryControlConfigClientTypes.ControlPanel]?
    public let nextToken: Swift.String?
}

extension ListControlPanelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanels = "ControlPanels"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelsContainer = try containerValues.decodeIfPresent([Route53RecoveryControlConfigClientTypes.ControlPanel?].self, forKey: .controlPanels)
        var controlPanelsDecoded0:[Route53RecoveryControlConfigClientTypes.ControlPanel]? = nil
        if let controlPanelsContainer = controlPanelsContainer {
            controlPanelsDecoded0 = [Route53RecoveryControlConfigClientTypes.ControlPanel]()
            for structure0 in controlPanelsContainer {
                if let structure0 = structure0 {
                    controlPanelsDecoded0?.append(structure0)
                }
            }
        }
        controlPanels = controlPanelsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListRoutingControlsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoutingControlsInput(controlPanelArn: \(Swift.String(describing: controlPanelArn)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListRoutingControlsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListRoutingControlsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoutingControlsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRoutingControlsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoutingControlsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRoutingControlsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoutingControlsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoutingControlsOutputError>
}

public struct ListRoutingControlsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListRoutingControlsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListRoutingControlsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListRoutingControlsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListRoutingControlsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListRoutingControlsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListRoutingControlsOutputError>
}

public struct ListRoutingControlsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the control panel that you're getting routing control details for.
    /// This member is required.
    public let controlPanelArn: Swift.String?
    /// The number of objects that you want to return with this call.
    public let maxResults: Swift.Int
    /// The token that identifies which batch of results you want to see.
    public let nextToken: Swift.String?

    public init (
        controlPanelArn: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.controlPanelArn = controlPanelArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListRoutingControlsInputBody: Swift.Equatable {
}

extension ListRoutingControlsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListRoutingControlsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListRoutingControlsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListRoutingControlsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListRoutingControlsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListRoutingControlsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), routingControls: \(Swift.String(describing: routingControls)))"}
}

extension ListRoutingControlsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListRoutingControlsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.routingControls = output.routingControls
        } else {
            self.nextToken = nil
            self.routingControls = nil
        }
    }
}

public struct ListRoutingControlsOutputResponse: Swift.Equatable {
    /// The token that identifies which batch of results you want to see.
    public let nextToken: Swift.String?
    /// An array of routing controls.
    public let routingControls: [Route53RecoveryControlConfigClientTypes.RoutingControl]?

    public init (
        nextToken: Swift.String? = nil,
        routingControls: [Route53RecoveryControlConfigClientTypes.RoutingControl]? = nil
    )
    {
        self.nextToken = nextToken
        self.routingControls = routingControls
    }
}

struct ListRoutingControlsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let routingControls: [Route53RecoveryControlConfigClientTypes.RoutingControl]?
}

extension ListRoutingControlsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case routingControls = "RoutingControls"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let routingControlsContainer = try containerValues.decodeIfPresent([Route53RecoveryControlConfigClientTypes.RoutingControl?].self, forKey: .routingControls)
        var routingControlsDecoded0:[Route53RecoveryControlConfigClientTypes.RoutingControl]? = nil
        if let routingControlsContainer = routingControlsContainer {
            routingControlsDecoded0 = [Route53RecoveryControlConfigClientTypes.RoutingControl]()
            for structure0 in routingControlsContainer {
                if let structure0 = structure0 {
                    routingControlsDecoded0?.append(structure0)
                }
            }
        }
        routingControls = routingControlsDecoded0
    }
}

extension ListSafetyRulesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSafetyRulesInput(controlPanelArn: \(Swift.String(describing: controlPanelArn)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListSafetyRulesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListSafetyRulesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSafetyRulesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSafetyRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSafetyRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSafetyRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSafetyRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSafetyRulesOutputError>
}

public struct ListSafetyRulesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListSafetyRulesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListSafetyRulesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListSafetyRulesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListSafetyRulesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListSafetyRulesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListSafetyRulesOutputError>
}

public struct ListSafetyRulesInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the control panel that you're getting details for.
    /// This member is required.
    public let controlPanelArn: Swift.String?
    /// The number of objects that you want to return with this call.
    public let maxResults: Swift.Int
    /// The token that identifies which batch of results you want to see.
    public let nextToken: Swift.String?

    public init (
        controlPanelArn: Swift.String? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.controlPanelArn = controlPanelArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListSafetyRulesInputBody: Swift.Equatable {
}

extension ListSafetyRulesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListSafetyRulesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListSafetyRulesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListSafetyRulesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListSafetyRulesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListSafetyRulesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), safetyRules: \(Swift.String(describing: safetyRules)))"}
}

extension ListSafetyRulesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListSafetyRulesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.safetyRules = output.safetyRules
        } else {
            self.nextToken = nil
            self.safetyRules = nil
        }
    }
}

public struct ListSafetyRulesOutputResponse: Swift.Equatable {
    /// The token that identifies which batch of results you want to see.
    public let nextToken: Swift.String?
    /// The list of safety rules in a control panel.
    public let safetyRules: [Route53RecoveryControlConfigClientTypes.Rule]?

    public init (
        nextToken: Swift.String? = nil,
        safetyRules: [Route53RecoveryControlConfigClientTypes.Rule]? = nil
    )
    {
        self.nextToken = nextToken
        self.safetyRules = safetyRules
    }
}

struct ListSafetyRulesOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let safetyRules: [Route53RecoveryControlConfigClientTypes.Rule]?
}

extension ListSafetyRulesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case safetyRules = "SafetyRules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let safetyRulesContainer = try containerValues.decodeIfPresent([Route53RecoveryControlConfigClientTypes.Rule?].self, forKey: .safetyRules)
        var safetyRulesDecoded0:[Route53RecoveryControlConfigClientTypes.Rule]? = nil
        if let safetyRulesContainer = safetyRulesContainer {
            safetyRulesDecoded0 = [Route53RecoveryControlConfigClientTypes.Rule]()
            for structure0 in safetyRulesContainer {
                if let structure0 = structure0 {
                    safetyRulesDecoded0?.append(structure0)
                }
            }
        }
        safetyRules = safetyRulesDecoded0
    }
}

extension Route53RecoveryControlConfigClientTypes.NewAssertionRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertedControls = "AssertedControls"
        case controlPanelArn = "ControlPanelArn"
        case name = "Name"
        case ruleConfig = "RuleConfig"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assertedControls = assertedControls {
            var assertedControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .assertedControls)
            for __listof__string0 in assertedControls {
                try assertedControlsContainer.encode(__listof__string0)
            }
        }
        if let controlPanelArn = controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleConfig = ruleConfig {
            try encodeContainer.encode(ruleConfig, forKey: .ruleConfig)
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertedControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .assertedControls)
        var assertedControlsDecoded0:[Swift.String]? = nil
        if let assertedControlsContainer = assertedControlsContainer {
            assertedControlsDecoded0 = [Swift.String]()
            for string0 in assertedControlsContainer {
                if let string0 = string0 {
                    assertedControlsDecoded0?.append(string0)
                }
            }
        }
        assertedControls = assertedControlsDecoded0
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleConfigDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RuleConfig.self, forKey: .ruleConfig)
        ruleConfig = ruleConfigDecoded
        let waitPeriodMsDecoded = try containerValues.decode(Swift.Int.self, forKey: .waitPeriodMs)
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.NewAssertionRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NewAssertionRule(assertedControls: \(Swift.String(describing: assertedControls)), controlPanelArn: \(Swift.String(describing: controlPanelArn)), name: \(Swift.String(describing: name)), ruleConfig: \(Swift.String(describing: ruleConfig)), waitPeriodMs: \(Swift.String(describing: waitPeriodMs)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// A new assertion rule for a control panel.
    public struct NewAssertionRule: Swift.Equatable {
        /// The routing controls that are part of transactions that are evaluated to determine if a request to change a routing control state is allowed. For example, you might include three routing controls, one for each of three Amazon Web Services Regions.
        /// This member is required.
        public let assertedControls: [Swift.String]?
        /// The Amazon Resource Name (ARN) for the control panel.
        /// This member is required.
        public let controlPanelArn: Swift.String?
        /// The name of the assertion rule. You can use any non-white space character in the name.
        /// This member is required.
        public let name: Swift.String?
        /// The criteria that you set for specific assertion controls (routing controls) that designate how many controls must be enabled as the result of a transaction. For example, if you have three assertion controls, you might specify atleast 2 for your rule configuration. This means that at least two assertion controls must be enabled, so that at least two Amazon Web Services Regions are enabled.
        /// This member is required.
        public let ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public let waitPeriodMs: Swift.Int

        public init (
            assertedControls: [Swift.String]? = nil,
            controlPanelArn: Swift.String? = nil,
            name: Swift.String? = nil,
            ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.assertedControls = assertedControls
            self.controlPanelArn = controlPanelArn
            self.name = name
            self.ruleConfig = ruleConfig
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.NewGatingRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanelArn = "ControlPanelArn"
        case gatingControls = "GatingControls"
        case name = "Name"
        case ruleConfig = "RuleConfig"
        case targetControls = "TargetControls"
        case waitPeriodMs = "WaitPeriodMs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlPanelArn = controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let gatingControls = gatingControls {
            var gatingControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .gatingControls)
            for __listof__string0 in gatingControls {
                try gatingControlsContainer.encode(__listof__string0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let ruleConfig = ruleConfig {
            try encodeContainer.encode(ruleConfig, forKey: .ruleConfig)
        }
        if let targetControls = targetControls {
            var targetControlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targetControls)
            for __listof__string0 in targetControls {
                try targetControlsContainer.encode(__listof__string0)
            }
        }
        if waitPeriodMs != 0 {
            try encodeContainer.encode(waitPeriodMs, forKey: .waitPeriodMs)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let gatingControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .gatingControls)
        var gatingControlsDecoded0:[Swift.String]? = nil
        if let gatingControlsContainer = gatingControlsContainer {
            gatingControlsDecoded0 = [Swift.String]()
            for string0 in gatingControlsContainer {
                if let string0 = string0 {
                    gatingControlsDecoded0?.append(string0)
                }
            }
        }
        gatingControls = gatingControlsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let ruleConfigDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RuleConfig.self, forKey: .ruleConfig)
        ruleConfig = ruleConfigDecoded
        let targetControlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targetControls)
        var targetControlsDecoded0:[Swift.String]? = nil
        if let targetControlsContainer = targetControlsContainer {
            targetControlsDecoded0 = [Swift.String]()
            for string0 in targetControlsContainer {
                if let string0 = string0 {
                    targetControlsDecoded0?.append(string0)
                }
            }
        }
        targetControls = targetControlsDecoded0
        let waitPeriodMsDecoded = try containerValues.decode(Swift.Int.self, forKey: .waitPeriodMs)
        waitPeriodMs = waitPeriodMsDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.NewGatingRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NewGatingRule(controlPanelArn: \(Swift.String(describing: controlPanelArn)), gatingControls: \(Swift.String(describing: gatingControls)), name: \(Swift.String(describing: name)), ruleConfig: \(Swift.String(describing: ruleConfig)), targetControls: \(Swift.String(describing: targetControls)), waitPeriodMs: \(Swift.String(describing: waitPeriodMs)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// A new gating rule for a control panel.
    public struct NewGatingRule: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the control panel.
        /// This member is required.
        public let controlPanelArn: Swift.String?
        /// The gating controls for the new gating rule. That is, routing controls that are evaluated by the rule configuration that you specify.
        /// This member is required.
        public let gatingControls: [Swift.String]?
        /// The name for the new gating rule.
        /// This member is required.
        public let name: Swift.String?
        /// The criteria that you set for specific gating controls (routing controls) that designates how many controls must be enabled to allow you to change (set or unset) the target controls.
        /// This member is required.
        public let ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig?
        /// Routing controls that can only be set or unset if the specified RuleConfig evaluates to true for the specified GatingControls. For example, say you have three gating controls, one for each of three Amazon Web Services Regions. Now you specify AtLeast 2 as your RuleConfig. With these settings, you can only change (set or unset) the routing controls that you have specified as TargetControls if that rule evaluates to true. In other words, your ability to change the routing controls that you have specified as TargetControls is gated by the rule that you set for the routing controls in GatingControls.
        /// This member is required.
        public let targetControls: [Swift.String]?
        /// An evaluation period, in milliseconds (ms), during which any request against the target routing controls will fail. This helps prevent "flapping" of state. The wait period is 5000 ms by default, but you can choose a custom value.
        /// This member is required.
        public let waitPeriodMs: Swift.Int

        public init (
            controlPanelArn: Swift.String? = nil,
            gatingControls: [Swift.String]? = nil,
            name: Swift.String? = nil,
            ruleConfig: Route53RecoveryControlConfigClientTypes.RuleConfig? = nil,
            targetControls: [Swift.String]? = nil,
            waitPeriodMs: Swift.Int = 0
        )
        {
            self.controlPanelArn = controlPanelArn
            self.gatingControls = gatingControls
            self.name = name
            self.ruleConfig = ruleConfig
            self.targetControls = targetControls
            self.waitPeriodMs = waitPeriodMs
        }
    }

}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 404 response - The query string contains a syntax error or resource not found.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.RoutingControl: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanelArn = "ControlPanelArn"
        case name = "Name"
        case routingControlArn = "RoutingControlArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlPanelArn = controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let routingControlArn = routingControlArn {
            try encodeContainer.encode(routingControlArn, forKey: .routingControlArn)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let routingControlArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingControlArn)
        routingControlArn = routingControlArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.Status.self, forKey: .status)
        status = statusDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.RoutingControl: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RoutingControl(controlPanelArn: \(Swift.String(describing: controlPanelArn)), name: \(Swift.String(describing: name)), routingControlArn: \(Swift.String(describing: routingControlArn)), status: \(Swift.String(describing: status)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// A routing control has one of two states: ON and OFF. You can map the routing control state to the state of an Amazon Route 53 health check, which can be used to control traffic routing.
    public struct RoutingControl: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the control panel that includes the routing control.
        public let controlPanelArn: Swift.String?
        /// The name of the routing control.
        public let name: Swift.String?
        /// The Amazon Resource Name (ARN) of the routing control.
        public let routingControlArn: Swift.String?
        /// The deployment status of a routing control. Status can be one of the following: PENDING, DEPLOYED, PENDING_DELETION.
        public let status: Route53RecoveryControlConfigClientTypes.Status?

        public init (
            controlPanelArn: Swift.String? = nil,
            name: Swift.String? = nil,
            routingControlArn: Swift.String? = nil,
            status: Route53RecoveryControlConfigClientTypes.Status? = nil
        )
        {
            self.controlPanelArn = controlPanelArn
            self.name = name
            self.routingControlArn = routingControlArn
            self.status = status
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.Rule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aSSERTION = "ASSERTION"
        case gATING = "GATING"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aSSERTION = aSSERTION {
            try encodeContainer.encode(aSSERTION, forKey: .aSSERTION)
        }
        if let gATING = gATING {
            try encodeContainer.encode(gATING, forKey: .gATING)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aSSERTIONDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.AssertionRule.self, forKey: .aSSERTION)
        aSSERTION = aSSERTIONDecoded
        let gATINGDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.GatingRule.self, forKey: .gATING)
        gATING = gATINGDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.Rule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Rule(aSSERTION: \(Swift.String(describing: aSSERTION)), gATING: \(Swift.String(describing: gATING)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// A safety rule. A safety rule can be an assertion rule or a gating rule.
    public struct Rule: Swift.Equatable {
        /// An assertion rule enforces that, when a routing control state is changed, the criteria set by the rule configuration is met. Otherwise, the change to the routing control is not accepted.
        public let aSSERTION: Route53RecoveryControlConfigClientTypes.AssertionRule?
        /// A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify. If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control state changes to run and complete against the set of target controls.
        public let gATING: Route53RecoveryControlConfigClientTypes.GatingRule?

        public init (
            aSSERTION: Route53RecoveryControlConfigClientTypes.AssertionRule? = nil,
            gATING: Route53RecoveryControlConfigClientTypes.GatingRule? = nil
        )
        {
            self.aSSERTION = aSSERTION
            self.gATING = gATING
        }
    }

}

extension Route53RecoveryControlConfigClientTypes.RuleConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inverted = "Inverted"
        case threshold = "Threshold"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if inverted != false {
            try encodeContainer.encode(inverted, forKey: .inverted)
        }
        if threshold != 0 {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invertedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .inverted)
        inverted = invertedDecoded
        let thresholdDecoded = try containerValues.decode(Swift.Int.self, forKey: .threshold)
        threshold = thresholdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RuleType.self, forKey: .type)
        type = typeDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes.RuleConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RuleConfig(inverted: \(Swift.String(describing: inverted)), threshold: \(Swift.String(describing: threshold)), type: \(Swift.String(describing: type)))"}
}

extension Route53RecoveryControlConfigClientTypes {
    /// The rule configuration for an assertion rule. That is, the criteria that you set for specific assertion controls (routing controls) that specify how many controls must be enabled after a transaction completes.
    public struct RuleConfig: Swift.Equatable {
        /// Logical negation of the rule. If the rule would usually evaluate true, it's evaluated as false, and vice versa.
        /// This member is required.
        public let inverted: Swift.Bool
        /// The value of N, when you specify an ATLEAST rule type. That is, Threshold is the number of controls that must be set when you specify an ATLEAST type.
        /// This member is required.
        public let threshold: Swift.Int
        /// A rule can be one of the following: ATLEAST, AND, or OR.
        /// This member is required.
        public let type: Route53RecoveryControlConfigClientTypes.RuleType?

        public init (
            inverted: Swift.Bool = false,
            threshold: Swift.Int = 0,
            type: Route53RecoveryControlConfigClientTypes.RuleType? = nil
        )
        {
            self.inverted = inverted
            self.threshold = threshold
            self.type = type
        }
    }

}

extension Route53RecoveryControlConfigClientTypes {
    /// An enumerated type that determines how the evaluated rules are processed. RuleType can be one of the following: ATLEAST - At least N routing controls must be set. You specify N as the Threshold in the rule configuration. AND - All routing controls must be set. This is a shortcut for "At least N," where N is the total number of controls in the rule. OR - Any control must be set. This is a shortcut for "At least N," where N is 1.
    public enum RuleType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case and
        case atleast
        case or
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleType] {
            return [
                .and,
                .atleast,
                .or,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .and: return "AND"
            case .atleast: return "ATLEAST"
            case .or: return "OR"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RuleType(rawValue: rawValue) ?? RuleType.sdkUnknown(rawValue)
        }
    }
}

extension ServiceQuotaExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceQuotaExceededException(message: \(Swift.String(describing: message)))"}
}

extension ServiceQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 402 response
public struct ServiceQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension Route53RecoveryControlConfigClientTypes {
    /// The deployment status of a resource. Status can be one of the following: PENDING: Amazon Route 53 Application Recovery Controller is creating the resource. DEPLOYED: The resource is deployed and ready to use. PENDING_DELETION: Amazon Route 53 Application Recovery Controller is deleting the resource.
    public enum Status: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deployed
        case pending
        case pendingDeletion
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .deployed,
                .pending,
                .pendingDeletion,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deployed: return "DEPLOYED"
            case .pending: return "PENDING"
            case .pendingDeletion: return "PENDING_DELETION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Status(rawValue: rawValue) ?? Status.sdkUnknown(rawValue)
        }
    }
}

extension ThrottlingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThrottlingException(message: \(Swift.String(describing: message)))"}
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 429 response - ThrottlingException.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UpdateControlPanelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateControlPanelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateControlPanelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateControlPanelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateControlPanelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateControlPanelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateControlPanelOutputError>
}

extension UpdateControlPanelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateControlPanelInput(controlPanelArn: \(Swift.String(describing: controlPanelArn)), controlPanelName: \(Swift.String(describing: controlPanelName)))"}
}

extension UpdateControlPanelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanelArn = "ControlPanelArn"
        case controlPanelName = "ControlPanelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlPanelArn = controlPanelArn {
            try encodeContainer.encode(controlPanelArn, forKey: .controlPanelArn)
        }
        if let controlPanelName = controlPanelName {
            try encodeContainer.encode(controlPanelName, forKey: .controlPanelName)
        }
    }
}

public struct UpdateControlPanelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateControlPanelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateControlPanelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateControlPanelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateControlPanelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateControlPanelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateControlPanelOutputError>
}

public struct UpdateControlPanelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateControlPanelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateControlPanelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateControlPanelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateControlPanelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateControlPanelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateControlPanelOutputError>
}

/// The details of the control panel that you're updating.
public struct UpdateControlPanelInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the control panel.
    /// This member is required.
    public let controlPanelArn: Swift.String?
    /// The name of the control panel.
    /// This member is required.
    public let controlPanelName: Swift.String?

    public init (
        controlPanelArn: Swift.String? = nil,
        controlPanelName: Swift.String? = nil
    )
    {
        self.controlPanelArn = controlPanelArn
        self.controlPanelName = controlPanelName
    }
}

struct UpdateControlPanelInputBody: Swift.Equatable {
    public let controlPanelArn: Swift.String?
    public let controlPanelName: Swift.String?
}

extension UpdateControlPanelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanelArn = "ControlPanelArn"
        case controlPanelName = "ControlPanelName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelArn)
        controlPanelArn = controlPanelArnDecoded
        let controlPanelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlPanelName)
        controlPanelName = controlPanelNameDecoded
    }
}

extension UpdateControlPanelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateControlPanelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateControlPanelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateControlPanelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateControlPanelOutputResponse(controlPanel: \(Swift.String(describing: controlPanel)))"}
}

extension UpdateControlPanelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateControlPanelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.controlPanel = output.controlPanel
        } else {
            self.controlPanel = nil
        }
    }
}

public struct UpdateControlPanelOutputResponse: Swift.Equatable {
    /// The control panel to update.
    public let controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?

    public init (
        controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel? = nil
    )
    {
        self.controlPanel = controlPanel
    }
}

struct UpdateControlPanelOutputResponseBody: Swift.Equatable {
    public let controlPanel: Route53RecoveryControlConfigClientTypes.ControlPanel?
}

extension UpdateControlPanelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlPanel = "ControlPanel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlPanelDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.ControlPanel.self, forKey: .controlPanel)
        controlPanel = controlPanelDecoded
    }
}

public struct UpdateRoutingControlInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingControlInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingControlOutputError>
}

extension UpdateRoutingControlInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoutingControlInput(routingControlArn: \(Swift.String(describing: routingControlArn)), routingControlName: \(Swift.String(describing: routingControlName)))"}
}

extension UpdateRoutingControlInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingControlArn = "RoutingControlArn"
        case routingControlName = "RoutingControlName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let routingControlArn = routingControlArn {
            try encodeContainer.encode(routingControlArn, forKey: .routingControlArn)
        }
        if let routingControlName = routingControlName {
            try encodeContainer.encode(routingControlName, forKey: .routingControlName)
        }
    }
}

public struct UpdateRoutingControlInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingControlInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingControlOutputError>
}

public struct UpdateRoutingControlInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateRoutingControlInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateRoutingControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateRoutingControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateRoutingControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateRoutingControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateRoutingControlOutputError>
}

/// The details of the routing control that you're updating.
public struct UpdateRoutingControlInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the routing control.
    /// This member is required.
    public let routingControlArn: Swift.String?
    /// The name of the routing control.
    /// This member is required.
    public let routingControlName: Swift.String?

    public init (
        routingControlArn: Swift.String? = nil,
        routingControlName: Swift.String? = nil
    )
    {
        self.routingControlArn = routingControlArn
        self.routingControlName = routingControlName
    }
}

struct UpdateRoutingControlInputBody: Swift.Equatable {
    public let routingControlArn: Swift.String?
    public let routingControlName: Swift.String?
}

extension UpdateRoutingControlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingControlArn = "RoutingControlArn"
        case routingControlName = "RoutingControlName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingControlArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingControlArn)
        routingControlArn = routingControlArnDecoded
        let routingControlNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routingControlName)
        routingControlName = routingControlNameDecoded
    }
}

extension UpdateRoutingControlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateRoutingControlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateRoutingControlOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateRoutingControlOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateRoutingControlOutputResponse(routingControl: \(Swift.String(describing: routingControl)))"}
}

extension UpdateRoutingControlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateRoutingControlOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.routingControl = output.routingControl
        } else {
            self.routingControl = nil
        }
    }
}

public struct UpdateRoutingControlOutputResponse: Swift.Equatable {
    /// The routing control that was updated.
    public let routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?

    public init (
        routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl? = nil
    )
    {
        self.routingControl = routingControl
    }
}

struct UpdateRoutingControlOutputResponseBody: Swift.Equatable {
    public let routingControl: Route53RecoveryControlConfigClientTypes.RoutingControl?
}

extension UpdateRoutingControlOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case routingControl = "RoutingControl"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let routingControlDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.RoutingControl.self, forKey: .routingControl)
        routingControl = routingControlDecoded
    }
}

public struct UpdateSafetyRuleInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSafetyRuleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSafetyRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateSafetyRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSafetyRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSafetyRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateSafetyRuleOutputError>
}

extension UpdateSafetyRuleInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSafetyRuleInput(assertionRuleUpdate: \(Swift.String(describing: assertionRuleUpdate)), gatingRuleUpdate: \(Swift.String(describing: gatingRuleUpdate)))"}
}

extension UpdateSafetyRuleInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRuleUpdate = "AssertionRuleUpdate"
        case gatingRuleUpdate = "GatingRuleUpdate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assertionRuleUpdate = assertionRuleUpdate {
            try encodeContainer.encode(assertionRuleUpdate, forKey: .assertionRuleUpdate)
        }
        if let gatingRuleUpdate = gatingRuleUpdate {
            try encodeContainer.encode(gatingRuleUpdate, forKey: .gatingRuleUpdate)
        }
    }
}

public struct UpdateSafetyRuleInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSafetyRuleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSafetyRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateSafetyRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSafetyRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSafetyRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateSafetyRuleOutputError>
}

public struct UpdateSafetyRuleInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSafetyRuleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSafetyRuleInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateSafetyRuleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSafetyRuleInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSafetyRuleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateSafetyRuleOutputError>
}

public struct UpdateSafetyRuleInput: Swift.Equatable {
    /// An update to an assertion rule. You can update the name or the evaluation period (wait period). If you don't specify one of the items to update, the item is unchanged.
    public let assertionRuleUpdate: Route53RecoveryControlConfigClientTypes.AssertionRuleUpdate?
    /// Update to a gating rule. You can update the name or the evaluation period (wait period). If you don't specify one of the items to update, the item is unchanged.
    public let gatingRuleUpdate: Route53RecoveryControlConfigClientTypes.GatingRuleUpdate?

    public init (
        assertionRuleUpdate: Route53RecoveryControlConfigClientTypes.AssertionRuleUpdate? = nil,
        gatingRuleUpdate: Route53RecoveryControlConfigClientTypes.GatingRuleUpdate? = nil
    )
    {
        self.assertionRuleUpdate = assertionRuleUpdate
        self.gatingRuleUpdate = gatingRuleUpdate
    }
}

struct UpdateSafetyRuleInputBody: Swift.Equatable {
    public let assertionRuleUpdate: Route53RecoveryControlConfigClientTypes.AssertionRuleUpdate?
    public let gatingRuleUpdate: Route53RecoveryControlConfigClientTypes.GatingRuleUpdate?
}

extension UpdateSafetyRuleInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRuleUpdate = "AssertionRuleUpdate"
        case gatingRuleUpdate = "GatingRuleUpdate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertionRuleUpdateDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.AssertionRuleUpdate.self, forKey: .assertionRuleUpdate)
        assertionRuleUpdate = assertionRuleUpdateDecoded
        let gatingRuleUpdateDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.GatingRuleUpdate.self, forKey: .gatingRuleUpdate)
        gatingRuleUpdate = gatingRuleUpdateDecoded
    }
}

extension UpdateSafetyRuleOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSafetyRuleOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateSafetyRuleOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSafetyRuleOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSafetyRuleOutputResponse(assertionRule: \(Swift.String(describing: assertionRule)), gatingRule: \(Swift.String(describing: gatingRule)))"}
}

extension UpdateSafetyRuleOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateSafetyRuleOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.assertionRule = output.assertionRule
            self.gatingRule = output.gatingRule
        } else {
            self.assertionRule = nil
            self.gatingRule = nil
        }
    }
}

public struct UpdateSafetyRuleOutputResponse: Swift.Equatable {
    /// An assertion rule enforces that, when a routing control state is changed, the criteria set by the rule configuration is met. Otherwise, the change to the routing control is not accepted.
    public let assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    /// A gating rule verifies that a set of gating controls evaluates as true, based on a rule configuration that you specify. If the gating rule evaluates to true, Amazon Route 53 Application Recovery Controller allows a set of routing control state changes to run and complete against the set of target controls.
    public let gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?

    public init (
        assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule? = nil,
        gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule? = nil
    )
    {
        self.assertionRule = assertionRule
        self.gatingRule = gatingRule
    }
}

struct UpdateSafetyRuleOutputResponseBody: Swift.Equatable {
    public let assertionRule: Route53RecoveryControlConfigClientTypes.AssertionRule?
    public let gatingRule: Route53RecoveryControlConfigClientTypes.GatingRule?
}

extension UpdateSafetyRuleOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assertionRule = "AssertionRule"
        case gatingRule = "GatingRule"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assertionRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.AssertionRule.self, forKey: .assertionRule)
        assertionRule = assertionRuleDecoded
        let gatingRuleDecoded = try containerValues.decodeIfPresent(Route53RecoveryControlConfigClientTypes.GatingRule.self, forKey: .gatingRule)
        gatingRule = gatingRuleDecoded
    }
}

extension ValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationException(message: \(Swift.String(describing: message)))"}
}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// 400 response - Multiple causes. For example, you might have a malformed query string and input parameter might be out of range, or you used parameters together incorrectly.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
