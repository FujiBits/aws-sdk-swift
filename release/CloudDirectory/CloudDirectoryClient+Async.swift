// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension CloudDirectoryClient {
    /// <p>Adds a new <a>Facet</a> to an object. An object can have more than one facet applied on it.</p>
    func addFacetToObject(input: AddFacetToObjectInput) async throws -> AddFacetToObjectOutputResponse
    {
        typealias addFacetToObjectContinuation = CheckedContinuation<AddFacetToObjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addFacetToObjectContinuation) in
            addFacetToObject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Copies the input published schema, at the specified version, into the <a>Directory</a> with the same
    ///       name and version as that of the published schema.</p>
    func applySchema(input: ApplySchemaInput) async throws -> ApplySchemaOutputResponse
    {
        typealias applySchemaContinuation = CheckedContinuation<ApplySchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: applySchemaContinuation) in
            applySchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches an existing object to another object. An object can be accessed in two
    ///       ways:</p>
    ///          <ol>
    ///             <li>
    ///                <p>Using the path</p>
    ///             </li>
    ///             <li>
    ///                <p>Using <code>ObjectIdentifier</code>
    ///                </p>
    ///             </li>
    ///          </ol>
    func attachObject(input: AttachObjectInput) async throws -> AttachObjectOutputResponse
    {
        typealias attachObjectContinuation = CheckedContinuation<AttachObjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachObjectContinuation) in
            attachObject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches a policy object to a regular object. An object can have a limited number of attached
    ///       policies.</p>
    func attachPolicy(input: AttachPolicyInput) async throws -> AttachPolicyOutputResponse
    {
        typealias attachPolicyContinuation = CheckedContinuation<AttachPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachPolicyContinuation) in
            attachPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches the specified object to the specified index.</p>
    func attachToIndex(input: AttachToIndexInput) async throws -> AttachToIndexOutputResponse
    {
        typealias attachToIndexContinuation = CheckedContinuation<AttachToIndexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachToIndexContinuation) in
            attachToIndex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Attaches a typed link to a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    func attachTypedLink(input: AttachTypedLinkInput) async throws -> AttachTypedLinkOutputResponse
    {
        typealias attachTypedLinkContinuation = CheckedContinuation<AttachTypedLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: attachTypedLinkContinuation) in
            attachTypedLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Performs all the read operations in a batch. </p>
    func batchRead(input: BatchReadInput) async throws -> BatchReadOutputResponse
    {
        typealias batchReadContinuation = CheckedContinuation<BatchReadOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchReadContinuation) in
            batchRead(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Performs all the write operations in a batch. Either all the operations succeed or
    ///       none.</p>
    func batchWrite(input: BatchWriteInput) async throws -> BatchWriteOutputResponse
    {
        typealias batchWriteContinuation = CheckedContinuation<BatchWriteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchWriteContinuation) in
            batchWrite(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a <a>Directory</a> by copying the published schema into the
    ///       directory. A directory cannot be created without a schema.</p>
    ///          <p>You can also quickly create a directory using a managed schema, called the
    ///         <code>QuickStartSchema</code>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_managed.html">Managed Schema</a> in the <i>Amazon Cloud Directory Developer Guide</i>.</p>
    func createDirectory(input: CreateDirectoryInput) async throws -> CreateDirectoryOutputResponse
    {
        typealias createDirectoryContinuation = CheckedContinuation<CreateDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDirectoryContinuation) in
            createDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new <a>Facet</a> in a schema. Facet creation is allowed only
    ///       in development or applied schemas.</p>
    func createFacet(input: CreateFacetInput) async throws -> CreateFacetOutputResponse
    {
        typealias createFacetContinuation = CheckedContinuation<CreateFacetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFacetContinuation) in
            createFacet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an index object. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.html">Indexing and search</a> for more information.</p>
    func createIndex(input: CreateIndexInput) async throws -> CreateIndexOutputResponse
    {
        typealias createIndexContinuation = CheckedContinuation<CreateIndexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createIndexContinuation) in
            createIndex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates an object in a <a>Directory</a>. Additionally attaches the object to
    ///       a parent, if a parent reference and <code>LinkName</code> is specified. An object is simply a
    ///       collection of <a>Facet</a> attributes. You can also use this API call to create a
    ///       policy object, if the facet from which you create the object is a policy facet. </p>
    func createObject(input: CreateObjectInput) async throws -> CreateObjectOutputResponse
    {
        typealias createObjectContinuation = CheckedContinuation<CreateObjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createObjectContinuation) in
            createObject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new schema in a development state. A schema can exist in three
    ///       phases:</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <i>Development:</i> This is a mutable phase of the schema. All new
    ///           schemas are in the development phase. Once the schema is finalized, it can be
    ///           published.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>Published:</i> Published schemas are immutable and have a version
    ///           associated with them.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <i>Applied:</i> Applied schemas are mutable in a way that allows you
    ///           to add new schema facets. You can also add new, nonrequired attributes to existing schema
    ///           facets. You can apply only published schemas to directories. </p>
    ///             </li>
    ///          </ul>
    func createSchema(input: CreateSchemaInput) async throws -> CreateSchemaOutputResponse
    {
        typealias createSchemaContinuation = CheckedContinuation<CreateSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSchemaContinuation) in
            createSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    func createTypedLinkFacet(input: CreateTypedLinkFacetInput) async throws -> CreateTypedLinkFacetOutputResponse
    {
        typealias createTypedLinkFacetContinuation = CheckedContinuation<CreateTypedLinkFacetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTypedLinkFacetContinuation) in
            createTypedLinkFacet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme
    ///         caution
    ///         when deleting directories.</p>
    func deleteDirectory(input: DeleteDirectoryInput) async throws -> DeleteDirectoryOutputResponse
    {
        typealias deleteDirectoryContinuation = CheckedContinuation<DeleteDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDirectoryContinuation) in
            deleteDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a given <a>Facet</a>. All attributes and <a>Rule</a>s
    ///       that are associated with the facet will be deleted. Only development schema facets are allowed
    ///       deletion.</p>
    func deleteFacet(input: DeleteFacetInput) async throws -> DeleteFacetOutputResponse
    {
        typealias deleteFacetContinuation = CheckedContinuation<DeleteFacetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFacetContinuation) in
            deleteFacet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes an object and its associated attributes. Only objects with no children and no
    ///       parents can be deleted. The maximum number of attributes that can be deleted during an object deletion is 30. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html">Amazon Cloud Directory Limits</a>.</p>
    func deleteObject(input: DeleteObjectInput) async throws -> DeleteObjectOutputResponse
    {
        typealias deleteObjectContinuation = CheckedContinuation<DeleteObjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteObjectContinuation) in
            deleteObject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a given schema. Schemas in a development and published state can only be deleted. </p>
    func deleteSchema(input: DeleteSchemaInput) async throws -> DeleteSchemaOutputResponse
    {
        typealias deleteSchemaContinuation = CheckedContinuation<DeleteSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSchemaContinuation) in
            deleteSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    func deleteTypedLinkFacet(input: DeleteTypedLinkFacetInput) async throws -> DeleteTypedLinkFacetOutputResponse
    {
        typealias deleteTypedLinkFacetContinuation = CheckedContinuation<DeleteTypedLinkFacetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTypedLinkFacetContinuation) in
            deleteTypedLinkFacet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Detaches the specified object from the specified index.</p>
    func detachFromIndex(input: DetachFromIndexInput) async throws -> DetachFromIndexOutputResponse
    {
        typealias detachFromIndexContinuation = CheckedContinuation<DetachFromIndexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachFromIndexContinuation) in
            detachFromIndex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Detaches a given object from the parent object. The object that is to be detached from the
    ///       parent is specified by the link name.</p>
    func detachObject(input: DetachObjectInput) async throws -> DetachObjectOutputResponse
    {
        typealias detachObjectContinuation = CheckedContinuation<DetachObjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachObjectContinuation) in
            detachObject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Detaches a policy from an object.</p>
    func detachPolicy(input: DetachPolicyInput) async throws -> DetachPolicyOutputResponse
    {
        typealias detachPolicyContinuation = CheckedContinuation<DetachPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachPolicyContinuation) in
            detachPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Detaches a typed link from a specified source and target object. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    func detachTypedLink(input: DetachTypedLinkInput) async throws -> DetachTypedLinkOutputResponse
    {
        typealias detachTypedLinkContinuation = CheckedContinuation<DetachTypedLinkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detachTypedLinkContinuation) in
            detachTypedLink(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Disables the specified directory. Disabled directories cannot be read or written to.
    ///       Only enabled directories can be disabled. Disabled directories may be reenabled.</p>
    func disableDirectory(input: DisableDirectoryInput) async throws -> DisableDirectoryOutputResponse
    {
        typealias disableDirectoryContinuation = CheckedContinuation<DisableDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableDirectoryContinuation) in
            disableDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Enables the specified directory. Only disabled directories can be enabled. Once
    ///       enabled, the directory can then be read and written to.</p>
    func enableDirectory(input: EnableDirectoryInput) async throws -> EnableDirectoryOutputResponse
    {
        typealias enableDirectoryContinuation = CheckedContinuation<EnableDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableDirectoryContinuation) in
            enableDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns current applied schema version ARN, including the minor version in use.</p>
    func getAppliedSchemaVersion(input: GetAppliedSchemaVersionInput) async throws -> GetAppliedSchemaVersionOutputResponse
    {
        typealias getAppliedSchemaVersionContinuation = CheckedContinuation<GetAppliedSchemaVersionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAppliedSchemaVersionContinuation) in
            getAppliedSchemaVersion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves metadata about a directory.</p>
    func getDirectory(input: GetDirectoryInput) async throws -> GetDirectoryOutputResponse
    {
        typealias getDirectoryContinuation = CheckedContinuation<GetDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDirectoryContinuation) in
            getDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Gets details of the <a>Facet</a>, such as facet name, attributes, <a>Rule</a>s, or <code>ObjectType</code>. You can call this on all kinds of schema
    ///       facets -- published, development, or applied.</p>
    func getFacet(input: GetFacetInput) async throws -> GetFacetOutputResponse
    {
        typealias getFacetContinuation = CheckedContinuation<GetFacetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getFacetContinuation) in
            getFacet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves attributes that are associated with a typed link.</p>
    func getLinkAttributes(input: GetLinkAttributesInput) async throws -> GetLinkAttributesOutputResponse
    {
        typealias getLinkAttributesContinuation = CheckedContinuation<GetLinkAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLinkAttributesContinuation) in
            getLinkAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves attributes within a facet that are associated with an object.</p>
    func getObjectAttributes(input: GetObjectAttributesInput) async throws -> GetObjectAttributesOutputResponse
    {
        typealias getObjectAttributesContinuation = CheckedContinuation<GetObjectAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getObjectAttributesContinuation) in
            getObjectAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves metadata about an object.</p>
    func getObjectInformation(input: GetObjectInformationInput) async throws -> GetObjectInformationOutputResponse
    {
        typealias getObjectInformationContinuation = CheckedContinuation<GetObjectInformationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getObjectInformationContinuation) in
            getObjectInformation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves a JSON representation of the schema. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json">JSON Schema Format</a> for more information.</p>
    func getSchemaAsJson(input: GetSchemaAsJsonInput) async throws -> GetSchemaAsJsonOutputResponse
    {
        typealias getSchemaAsJsonContinuation = CheckedContinuation<GetSchemaAsJsonOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSchemaAsJsonContinuation) in
            getSchemaAsJson(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the identity attribute order for a specific <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    func getTypedLinkFacetInformation(input: GetTypedLinkFacetInformationInput) async throws -> GetTypedLinkFacetInformationOutputResponse
    {
        typealias getTypedLinkFacetInformationContinuation = CheckedContinuation<GetTypedLinkFacetInformationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getTypedLinkFacetInformationContinuation) in
            getTypedLinkFacetInformation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists schema major versions applied to a directory. If <code>SchemaArn</code> is provided, lists the minor version.</p>
    func listAppliedSchemaArns(input: ListAppliedSchemaArnsInput) async throws -> ListAppliedSchemaArnsOutputResponse
    {
        typealias listAppliedSchemaArnsContinuation = CheckedContinuation<ListAppliedSchemaArnsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAppliedSchemaArnsContinuation) in
            listAppliedSchemaArns(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists indices attached to the specified object.</p>
    func listAttachedIndices(input: ListAttachedIndicesInput) async throws -> ListAttachedIndicesOutputResponse
    {
        typealias listAttachedIndicesContinuation = CheckedContinuation<ListAttachedIndicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listAttachedIndicesContinuation) in
            listAttachedIndices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves each Amazon Resource Name (ARN) of schemas in the development
    ///       state.</p>
    func listDevelopmentSchemaArns(input: ListDevelopmentSchemaArnsInput) async throws -> ListDevelopmentSchemaArnsOutputResponse
    {
        typealias listDevelopmentSchemaArnsContinuation = CheckedContinuation<ListDevelopmentSchemaArnsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDevelopmentSchemaArnsContinuation) in
            listDevelopmentSchemaArns(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists directories created within an account.</p>
    func listDirectories(input: ListDirectoriesInput) async throws -> ListDirectoriesOutputResponse
    {
        typealias listDirectoriesContinuation = CheckedContinuation<ListDirectoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDirectoriesContinuation) in
            listDirectories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves attributes attached to the facet.</p>
    func listFacetAttributes(input: ListFacetAttributesInput) async throws -> ListFacetAttributesOutputResponse
    {
        typealias listFacetAttributesContinuation = CheckedContinuation<ListFacetAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFacetAttributesContinuation) in
            listFacetAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves the names of facets that exist in a schema.</p>
    func listFacetNames(input: ListFacetNamesInput) async throws -> ListFacetNamesOutputResponse
    {
        typealias listFacetNamesContinuation = CheckedContinuation<ListFacetNamesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFacetNamesContinuation) in
            listFacetNames(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a>
    ///       information for an object. It also supports filtering by typed link facet and identity
    ///       attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    func listIncomingTypedLinks(input: ListIncomingTypedLinksInput) async throws -> ListIncomingTypedLinksOutputResponse
    {
        typealias listIncomingTypedLinksContinuation = CheckedContinuation<ListIncomingTypedLinksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIncomingTypedLinksContinuation) in
            listIncomingTypedLinks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists objects attached to the specified index.</p>
    func listIndex(input: ListIndexInput) async throws -> ListIndexOutputResponse
    {
        typealias listIndexContinuation = CheckedContinuation<ListIndexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIndexContinuation) in
            listIndex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the major version families of each managed schema. If a major version ARN is provided as SchemaArn, the minor version revisions in that family are listed instead.</p>
    func listManagedSchemaArns(input: ListManagedSchemaArnsInput) async throws -> ListManagedSchemaArnsOutputResponse
    {
        typealias listManagedSchemaArnsContinuation = CheckedContinuation<ListManagedSchemaArnsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listManagedSchemaArnsContinuation) in
            listManagedSchemaArns(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all attributes that are associated with an object.
    ///       </p>
    func listObjectAttributes(input: ListObjectAttributesInput) async throws -> ListObjectAttributesOutputResponse
    {
        typealias listObjectAttributesContinuation = CheckedContinuation<ListObjectAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listObjectAttributesContinuation) in
            listObjectAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a paginated list of child objects that are associated with a given
    ///       object.</p>
    func listObjectChildren(input: ListObjectChildrenInput) async throws -> ListObjectChildrenOutputResponse
    {
        typealias listObjectChildrenContinuation = CheckedContinuation<ListObjectChildrenOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listObjectChildrenContinuation) in
            listObjectChildren(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Retrieves all available parent paths for any object type such as node, leaf node,
    ///       policy node, and index node objects. For more information about objects, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directorystructure.html">Directory Structure</a>.</p>
    ///          <p>Use this API to evaluate all parents for an object. The call returns all objects from
    ///       the root of the directory up to the requested object. The API returns the number of paths
    ///       based on user-defined <code>MaxResults</code>, in case there are multiple paths to the parent.
    ///       The order of the paths and nodes returned is consistent among multiple API calls unless the
    ///       objects are deleted or moved. Paths not leading to the directory root are ignored from the
    ///       target object.</p>
    func listObjectParentPaths(input: ListObjectParentPathsInput) async throws -> ListObjectParentPathsOutputResponse
    {
        typealias listObjectParentPathsContinuation = CheckedContinuation<ListObjectParentPathsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listObjectParentPathsContinuation) in
            listObjectParentPaths(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists parent objects that are associated with a given object in pagination
    ///       fashion.</p>
    func listObjectParents(input: ListObjectParentsInput) async throws -> ListObjectParentsOutputResponse
    {
        typealias listObjectParentsContinuation = CheckedContinuation<ListObjectParentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listObjectParentsContinuation) in
            listObjectParents(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns policies attached to an object in pagination fashion.</p>
    func listObjectPolicies(input: ListObjectPoliciesInput) async throws -> ListObjectPoliciesOutputResponse
    {
        typealias listObjectPoliciesContinuation = CheckedContinuation<ListObjectPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listObjectPoliciesContinuation) in
            listObjectPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a>
    ///       information for an object. It also supports filtering by typed link facet and identity
    ///       attributes. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    func listOutgoingTypedLinks(input: ListOutgoingTypedLinksInput) async throws -> ListOutgoingTypedLinksOutputResponse
    {
        typealias listOutgoingTypedLinksContinuation = CheckedContinuation<ListOutgoingTypedLinksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOutgoingTypedLinksContinuation) in
            listOutgoingTypedLinks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.</p>
    func listPolicyAttachments(input: ListPolicyAttachmentsInput) async throws -> ListPolicyAttachmentsOutputResponse
    {
        typealias listPolicyAttachmentsContinuation = CheckedContinuation<ListPolicyAttachmentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPolicyAttachmentsContinuation) in
            listPolicyAttachments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists the major version families of each published schema. If a major version ARN is provided as <code>SchemaArn</code>, the minor version revisions in that family are listed instead.</p>
    func listPublishedSchemaArns(input: ListPublishedSchemaArnsInput) async throws -> ListPublishedSchemaArnsOutputResponse
    {
        typealias listPublishedSchemaArnsContinuation = CheckedContinuation<ListPublishedSchemaArnsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPublishedSchemaArnsContinuation) in
            listPublishedSchemaArns(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns tags for a resource. Tagging is currently supported only for directories with a
    ///       limit of 50 tags per directory. All 50 tags are returned for a given directory with this API
    ///       call.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a paginated list of all attribute definitions for a particular <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    func listTypedLinkFacetAttributes(input: ListTypedLinkFacetAttributesInput) async throws -> ListTypedLinkFacetAttributesOutputResponse
    {
        typealias listTypedLinkFacetAttributesContinuation = CheckedContinuation<ListTypedLinkFacetAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTypedLinkFacetAttributesContinuation) in
            listTypedLinkFacetAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a paginated list of <code>TypedLink</code> facet names for a particular schema.
    ///       For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    func listTypedLinkFacetNames(input: ListTypedLinkFacetNamesInput) async throws -> ListTypedLinkFacetNamesOutputResponse
    {
        typealias listTypedLinkFacetNamesContinuation = CheckedContinuation<ListTypedLinkFacetNamesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTypedLinkFacetNamesContinuation) in
            listTypedLinkFacetNames(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Lists all policies from the root of the <a>Directory</a> to the object
    ///       specified. If there are no policies present, an empty list is returned. If policies are
    ///       present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code>
    ///       for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and
    ///       <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more
    ///       information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies">Policies</a>.</p>
    func lookupPolicy(input: LookupPolicyInput) async throws -> LookupPolicyOutputResponse
    {
        typealias lookupPolicyContinuation = CheckedContinuation<LookupPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: lookupPolicyContinuation) in
            lookupPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Publishes a development schema with a major version and a recommended minor version.</p>
    func publishSchema(input: PublishSchemaInput) async throws -> PublishSchemaOutputResponse
    {
        typealias publishSchemaContinuation = CheckedContinuation<PublishSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: publishSchemaContinuation) in
            publishSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Allows a schema to be updated using JSON upload. Only available for development schemas. See <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json">JSON Schema Format</a> for more information.</p>
    func putSchemaFromJson(input: PutSchemaFromJsonInput) async throws -> PutSchemaFromJsonOutputResponse
    {
        typealias putSchemaFromJsonContinuation = CheckedContinuation<PutSchemaFromJsonOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putSchemaFromJsonContinuation) in
            putSchemaFromJson(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the specified facet from the specified object.</p>
    func removeFacetFromObject(input: RemoveFacetFromObjectInput) async throws -> RemoveFacetFromObjectOutputResponse
    {
        typealias removeFacetFromObjectContinuation = CheckedContinuation<RemoveFacetFromObjectOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeFacetFromObjectContinuation) in
            removeFacetFromObject(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>An API operation for adding tags to a resource.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>An API operation for removing tags from a resource.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Does the following:</p>
    ///          <ol>
    ///             <li>
    ///                <p>Adds new <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Updates existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p>
    ///             </li>
    ///             <li>
    ///                <p>Deletes existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p>
    ///             </li>
    ///          </ol>
    func updateFacet(input: UpdateFacetInput) async throws -> UpdateFacetOutputResponse
    {
        typealias updateFacetContinuation = CheckedContinuation<UpdateFacetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFacetContinuation) in
            updateFacet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its <code>IdentityAttributeOrder</code>.</p>
    func updateLinkAttributes(input: UpdateLinkAttributesInput) async throws -> UpdateLinkAttributesOutputResponse
    {
        typealias updateLinkAttributesContinuation = CheckedContinuation<UpdateLinkAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLinkAttributesContinuation) in
            updateLinkAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a given object's attributes.</p>
    func updateObjectAttributes(input: UpdateObjectAttributesInput) async throws -> UpdateObjectAttributesOutputResponse
    {
        typealias updateObjectAttributesContinuation = CheckedContinuation<UpdateObjectAttributesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateObjectAttributesContinuation) in
            updateObjectAttributes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the schema name with a new name. Only development schema names can be
    ///       updated.</p>
    func updateSchema(input: UpdateSchemaInput) async throws -> UpdateSchemaOutputResponse
    {
        typealias updateSchemaContinuation = CheckedContinuation<UpdateSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSchemaContinuation) in
            updateSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a <a>TypedLinkFacet</a>. For more information, see <a href="https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink">Typed Links</a>.</p>
    func updateTypedLinkFacet(input: UpdateTypedLinkFacetInput) async throws -> UpdateTypedLinkFacetOutputResponse
    {
        typealias updateTypedLinkFacetContinuation = CheckedContinuation<UpdateTypedLinkFacetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTypedLinkFacetContinuation) in
            updateTypedLinkFacet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Upgrades a single directory in-place using the <code>PublishedSchemaArn</code> with schema updates found in <code>MinorVersion</code>. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.</p>
    func upgradeAppliedSchema(input: UpgradeAppliedSchemaInput) async throws -> UpgradeAppliedSchemaOutputResponse
    {
        typealias upgradeAppliedSchemaContinuation = CheckedContinuation<UpgradeAppliedSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: upgradeAppliedSchemaContinuation) in
            upgradeAppliedSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Upgrades a published schema under a new minor version revision using the current contents of <code>DevelopmentSchemaArn</code>.</p>
    func upgradePublishedSchema(input: UpgradePublishedSchemaInput) async throws -> UpgradePublishedSchemaOutputResponse
    {
        typealias upgradePublishedSchemaContinuation = CheckedContinuation<UpgradePublishedSchemaOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: upgradePublishedSchemaContinuation) in
            upgradePublishedSchema(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
