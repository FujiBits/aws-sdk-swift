// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension Route53DomainsClient {
    /// Accepts the transfer of a domain from another AWS account to the current AWS account. You initiate a transfer between AWS accounts using
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount.
    /// 		
    ///
    /// 		       Use either
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations or
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail
    /// 			to determine whether the operation succeeded.
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail
    /// 			provides additional information, for example, Domain Transfer from Aws Account 111122223333 has been cancelled.
    /// 		
    func acceptDomainTransferFromAnotherAwsAccount(input: AcceptDomainTransferFromAnotherAwsAccountInput) async throws -> AcceptDomainTransferFromAnotherAwsAccountOutputResponse
    {
        typealias acceptDomainTransferFromAnotherAwsAccountContinuation = CheckedContinuation<AcceptDomainTransferFromAnotherAwsAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptDomainTransferFromAnotherAwsAccountContinuation) in
            acceptDomainTransferFromAnotherAwsAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels the transfer of a domain from the current AWS account to another AWS account. You initiate a transfer between AWS accounts using
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount.
    /// 		
    /// 		
    /// 		
    /// 			         You must cancel the transfer before the other AWS account accepts the transfer using
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount.
    /// 		
    /// 		
    /// 		       Use either
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations or
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail
    /// 			to determine whether the operation succeeded.
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail
    /// 			provides additional information, for example, Domain Transfer from Aws Account 111122223333 has been cancelled.
    /// 		
    func cancelDomainTransferToAnotherAwsAccount(input: CancelDomainTransferToAnotherAwsAccountInput) async throws -> CancelDomainTransferToAnotherAwsAccountOutputResponse
    {
        typealias cancelDomainTransferToAnotherAwsAccountContinuation = CheckedContinuation<CancelDomainTransferToAnotherAwsAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelDomainTransferToAnotherAwsAccountContinuation) in
            cancelDomainTransferToAnotherAwsAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation checks the availability of one domain name. Note that if the availability status of a domain is pending, you must
    /// 			submit another request to determine the availability of the domain name.
    func checkDomainAvailability(input: CheckDomainAvailabilityInput) async throws -> CheckDomainAvailabilityOutputResponse
    {
        typealias checkDomainAvailabilityContinuation = CheckedContinuation<CheckDomainAvailabilityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: checkDomainAvailabilityContinuation) in
            checkDomainAvailability(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Checks whether a domain name can be transferred to Amazon Route 53.
    func checkDomainTransferability(input: CheckDomainTransferabilityInput) async throws -> CheckDomainTransferabilityOutputResponse
    {
        typealias checkDomainTransferabilityContinuation = CheckedContinuation<CheckDomainTransferabilityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: checkDomainTransferabilityContinuation) in
            checkDomainTransferability(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation deletes the specified tags for a domain.
    /// 		       All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.
    func deleteTagsForDomain(input: DeleteTagsForDomainInput) async throws -> DeleteTagsForDomainOutputResponse
    {
        typealias deleteTagsForDomainContinuation = CheckedContinuation<DeleteTagsForDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTagsForDomainContinuation) in
            deleteTagsForDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation disables automatic renewal of domain registration for the specified domain.
    func disableDomainAutoRenew(input: DisableDomainAutoRenewInput) async throws -> DisableDomainAutoRenewOutputResponse
    {
        typealias disableDomainAutoRenewContinuation = CheckedContinuation<DisableDomainAutoRenewOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableDomainAutoRenewContinuation) in
            disableDomainAutoRenew(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation removes the transfer lock on the domain (specifically the
    /// 			clientTransferProhibited status) to allow domain transfers. We recommend
    /// 			you refrain from performing this action unless you intend to transfer the domain to a
    /// 			different registrar. Successful submission returns an operation ID that you can use to track
    /// 			the progress and completion of the action. If the request is not completed successfully, the
    /// 			domain registrant will be notified by email.
    func disableDomainTransferLock(input: DisableDomainTransferLockInput) async throws -> DisableDomainTransferLockOutputResponse
    {
        typealias disableDomainTransferLockContinuation = CheckedContinuation<DisableDomainTransferLockOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableDomainTransferLockContinuation) in
            disableDomainTransferLock(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation configures Amazon Route 53 to automatically renew the specified domain before the domain registration expires.
    /// 			The cost of renewing your domain registration is billed to your AWS account.
    /// 		       The period during which you can renew a domain name varies by TLD. For a list of TLDs and their renewal policies, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains That You Can Register with Amazon Route 53
    /// 			in the Amazon Route 53 Developer Guide. Route 53 requires that you renew before the end of the renewal period
    /// 			so we can complete processing before the deadline.
    func enableDomainAutoRenew(input: EnableDomainAutoRenewInput) async throws -> EnableDomainAutoRenewOutputResponse
    {
        typealias enableDomainAutoRenewContinuation = CheckedContinuation<EnableDomainAutoRenewOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableDomainAutoRenewContinuation) in
            enableDomainAutoRenew(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation sets the transfer lock on the domain (specifically the clientTransferProhibited status)
    /// 			to prevent domain transfers. Successful submission returns an operation ID that you can use to track the progress and
    /// 			completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
    func enableDomainTransferLock(input: EnableDomainTransferLockInput) async throws -> EnableDomainTransferLockOutputResponse
    {
        typealias enableDomainTransferLockContinuation = CheckedContinuation<EnableDomainTransferLockOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableDomainTransferLockContinuation) in
            enableDomainTransferLock(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// For operations that require confirmation that the email address for the registrant contact is valid,
    /// 			such as registering a new domain, this operation returns information about whether the registrant contact has responded.
    /// 		       If you want us to resend the email, use the ResendContactReachabilityEmail operation.
    func getContactReachabilityStatus(input: GetContactReachabilityStatusInput) async throws -> GetContactReachabilityStatusOutputResponse
    {
        typealias getContactReachabilityStatusContinuation = CheckedContinuation<GetContactReachabilityStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getContactReachabilityStatusContinuation) in
            getContactReachabilityStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation returns detailed information about a specified domain that is associated with the current AWS account.
    /// 			Contact information for the domain is also returned as part of the output.
    func getDomainDetail(input: GetDomainDetailInput) async throws -> GetDomainDetailOutputResponse
    {
        typealias getDomainDetailContinuation = CheckedContinuation<GetDomainDetailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainDetailContinuation) in
            getDomainDetail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// The GetDomainSuggestions operation returns a list of suggested domain names.
    func getDomainSuggestions(input: GetDomainSuggestionsInput) async throws -> GetDomainSuggestionsOutputResponse
    {
        typealias getDomainSuggestionsContinuation = CheckedContinuation<GetDomainSuggestionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDomainSuggestionsContinuation) in
            getDomainSuggestions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation returns the current status of an operation that is not completed.
    func getOperationDetail(input: GetOperationDetailInput) async throws -> GetOperationDetailOutputResponse
    {
        typealias getOperationDetailContinuation = CheckedContinuation<GetOperationDetailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getOperationDetailContinuation) in
            getOperationDetail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation returns all the domain names registered with Amazon Route 53 for the current AWS account.
    func listDomains(input: ListDomainsInput) async throws -> ListDomainsOutputResponse
    {
        typealias listDomainsContinuation = CheckedContinuation<ListDomainsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDomainsContinuation) in
            listDomains(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns information about all of the operations that return an operation ID and that have ever been
    /// 			performed on domains that were registered by the current account.
    func listOperations(input: ListOperationsInput) async throws -> ListOperationsOutputResponse
    {
        typealias listOperationsContinuation = CheckedContinuation<ListOperationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOperationsContinuation) in
            listOperations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation returns all of the tags that are associated with the specified domain.
    /// 		       All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.
    func listTagsForDomain(input: ListTagsForDomainInput) async throws -> ListTagsForDomainOutputResponse
    {
        typealias listTagsForDomainContinuation = CheckedContinuation<ListTagsForDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForDomainContinuation) in
            listTagsForDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation registers a domain. Domains are registered either by Amazon Registrar (for .com, .net, and .org domains) or by
    /// 			our registrar associate, Gandi (for all other domains). For some top-level domains (TLDs), this operation requires extra parameters.
    /// 		       When you register a domain, Amazon Route 53 does the following:
    /// 			
    ///
    ///                Creates a Route 53 hosted zone that has the same name as the domain. Route 53 assigns four name servers
    /// 					to your hosted zone and automatically updates your domain registration with the names of these name servers.
    ///
    ///
    ///                Enables autorenew, so your domain registration will renew automatically each year. We'll notify you
    /// 					in advance of the renewal date so you can choose whether to renew the registration.
    ///
    ///
    ///                Optionally enables privacy protection, so WHOIS queries return contact information either for Amazon Registrar
    /// 					(for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you don't enable privacy
    /// 					protection, WHOIS queries return the information that you entered for the registrant, admin, and tech contacts.
    ///
    ///
    ///                If registration is successful, returns an operation ID that you can use to track the progress and
    /// 					completion of the action. If the request is not completed successfully, the domain registrant is notified by email.
    ///
    ///
    ///                Charges your AWS account an amount based on the top-level domain. For more information, see
    /// 					<a href="http://aws.amazon.com/route53/pricing/">Amazon Route 53 Pricing.
    ///
    ///
    func registerDomain(input: RegisterDomainInput) async throws -> RegisterDomainOutputResponse
    {
        typealias registerDomainContinuation = CheckedContinuation<RegisterDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerDomainContinuation) in
            registerDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Rejects the transfer of a domain from another AWS account to the current AWS account. You initiate a transfer between AWS accounts using
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount.
    /// 		
    /// 		
    /// 		       Use either
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations or
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail
    /// 			to determine whether the operation succeeded.
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail
    /// 			provides additional information, for example, Domain Transfer from Aws Account 111122223333 has been cancelled.
    /// 		
    func rejectDomainTransferFromAnotherAwsAccount(input: RejectDomainTransferFromAnotherAwsAccountInput) async throws -> RejectDomainTransferFromAnotherAwsAccountOutputResponse
    {
        typealias rejectDomainTransferFromAnotherAwsAccountContinuation = CheckedContinuation<RejectDomainTransferFromAnotherAwsAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rejectDomainTransferFromAnotherAwsAccountContinuation) in
            rejectDomainTransferFromAnotherAwsAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation renews a domain for the specified number of years. The cost of renewing your domain is billed to your AWS account.
    /// 		       We recommend that you renew your domain several weeks before the expiration date. Some TLD registries delete domains before the
    /// 			expiration date if you haven't renewed far enough in advance. For more information about renewing domain registration, see
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html">Renewing Registration for a Domain
    /// 			in the Amazon Route 53 Developer Guide.
    func renewDomain(input: RenewDomainInput) async throws -> RenewDomainOutputResponse
    {
        typealias renewDomainContinuation = CheckedContinuation<RenewDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: renewDomainContinuation) in
            renewDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// For operations that require confirmation that the email address for the registrant contact is valid,
    /// 			such as registering a new domain, this operation resends the confirmation email to the current email address for the registrant contact.
    func resendContactReachabilityEmail(input: ResendContactReachabilityEmailInput) async throws -> ResendContactReachabilityEmailOutputResponse
    {
        typealias resendContactReachabilityEmailContinuation = CheckedContinuation<ResendContactReachabilityEmailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resendContactReachabilityEmailContinuation) in
            resendContactReachabilityEmail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation returns the AuthCode for the domain. To transfer a domain to another registrar, you provide this value to the new registrar.
    func retrieveDomainAuthCode(input: RetrieveDomainAuthCodeInput) async throws -> RetrieveDomainAuthCodeOutputResponse
    {
        typealias retrieveDomainAuthCodeContinuation = CheckedContinuation<RetrieveDomainAuthCodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: retrieveDomainAuthCodeContinuation) in
            retrieveDomainAuthCode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Transfers a domain from another registrar to Amazon Route 53. When the transfer is complete, the domain is registered either with
    /// 			Amazon Registrar (for .com, .net, and .org domains) or with our registrar associate, Gandi (for all other TLDs).
    /// 		       For more information about transferring domains, see the following topics:
    /// 		
    ///
    ///                For transfer requirements, a detailed procedure, and information about viewing the status of a domain that you're transferring
    /// 				to Route 53, see
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html">Transferring Registration for a
    /// 				Domain to Amazon Route 53 in the Amazon Route 53 Developer Guide.
    ///
    ///
    ///                For information about how to transfer a domain from one AWS account to another, see
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount.
    /// 				
    /// 			
    ///
    ///                For information about how to transfer a domain to another domain registrar, see
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-from-route-53.html">Transferring a Domain from
    /// 				Amazon Route 53 to Another Registrar in the Amazon Route 53 Developer Guide.
    ///
    ///
    /// 		       If the registrar for your domain is also the DNS service provider for the domain, we highly recommend that you
    /// 			transfer your DNS service to Route 53 or to another DNS service provider before you transfer your registration. Some registrars
    /// 			provide free DNS service when you purchase a domain registration. When you transfer the registration, the previous registrar
    /// 			will not renew your domain registration and could end your DNS service at any time.
    /// 		
    /// 			
    /// 				        If the registrar for your domain is also the DNS service provider for the domain and you don't
    /// 					transfer DNS service to another provider, your website, email, and the web applications associated with the domain
    /// 					might become unavailable.
    /// 			
    /// 		
    /// 		       If the transfer is successful, this method returns an operation ID that you can use to track the progress and
    /// 			completion of the action. If the transfer doesn't complete successfully, the domain registrant will be notified by email.
    func transferDomain(input: TransferDomainInput) async throws -> TransferDomainOutputResponse
    {
        typealias transferDomainContinuation = CheckedContinuation<TransferDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: transferDomainContinuation) in
            transferDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Transfers a domain from the current AWS account to another AWS account. Note the following:
    /// 		
    ///
    ///                The AWS account that you're transferring the domain to must accept the transfer. If the other account
    /// 				doesn't accept the transfer within 3 days, we cancel the transfer. See
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount.
    /// 				
    /// 			
    ///
    ///                You can cancel the transfer before the other account accepts it. See
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_CancelDomainTransferToAnotherAwsAccount.html">CancelDomainTransferToAnotherAwsAccount.
    /// 				
    /// 			
    ///
    ///                The other account can reject the transfer. See
    /// 					<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_RejectDomainTransferFromAnotherAwsAccount.html">RejectDomainTransferFromAnotherAwsAccount.
    /// 				
    /// 			
    ///
    /// 		
    /// 		
    /// 			         When you transfer a domain from one AWS account to another, Route 53 doesn't transfer the hosted zone that is associated
    /// 				with the domain. DNS resolution isn't affected if the domain and the hosted zone are owned by separate accounts,
    /// 				so transferring the hosted zone is optional. For information about transferring the hosted zone to another AWS account, see
    /// 				<a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-migrating.html">Migrating a Hosted Zone to a
    /// 				Different AWS Account in the Amazon Route 53 Developer Guide.
    /// 		
    /// 		
    /// 		       Use either
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations or
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail
    /// 			to determine whether the operation succeeded.
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail
    /// 			provides additional information, for example, Domain Transfer from Aws Account 111122223333 has been cancelled.
    /// 		
    func transferDomainToAnotherAwsAccount(input: TransferDomainToAnotherAwsAccountInput) async throws -> TransferDomainToAnotherAwsAccountOutputResponse
    {
        typealias transferDomainToAnotherAwsAccountContinuation = CheckedContinuation<TransferDomainToAnotherAwsAccountOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: transferDomainToAnotherAwsAccountContinuation) in
            transferDomainToAnotherAwsAccount(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation updates the contact information for a particular domain. You must specify information for at least one contact:
    /// 			registrant, administrator, or technical.
    /// 		       If the update is successful, this method returns an operation ID that you can use to track the progress and completion of the action.
    /// 			If the request is not completed successfully, the domain registrant will be notified by email.
    func updateDomainContact(input: UpdateDomainContactInput) async throws -> UpdateDomainContactOutputResponse
    {
        typealias updateDomainContactContinuation = CheckedContinuation<UpdateDomainContactOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDomainContactContinuation) in
            updateDomainContact(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation updates the specified domain contact's privacy setting. When privacy protection is enabled,
    /// 			contact information such as email address is replaced either with contact information for Amazon Registrar (for .com, .net, and .org
    /// 			domains) or with contact information for our registrar associate, Gandi.
    /// 		       This operation affects only the contact information for the specified contact type (registrant, administrator, or tech).
    /// 			If the request succeeds, Amazon Route 53 returns an operation ID that you can use with
    /// 			<a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail
    /// 			to track the progress and completion of the action. If the request doesn't complete successfully, the domain registrant will be notified by email.
    /// 		
    ///             By disabling the privacy service via API, you consent to the publication of the contact information provided for this domain
    /// 			via the public WHOIS database. You certify that you are the registrant of this domain name and have the authority to make this decision.
    /// 			You may withdraw your consent at any time by enabling privacy protection using either UpdateDomainContactPrivacy or the
    /// 			Route 53 console. Enabling privacy protection removes the contact information provided for this domain from the WHOIS database.
    /// 			For more information on our privacy practices, see
    /// 			<a href="https://aws.amazon.com/privacy/">https://aws.amazon.com/privacy/.
    ///
    func updateDomainContactPrivacy(input: UpdateDomainContactPrivacyInput) async throws -> UpdateDomainContactPrivacyOutputResponse
    {
        typealias updateDomainContactPrivacyContinuation = CheckedContinuation<UpdateDomainContactPrivacyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDomainContactPrivacyContinuation) in
            updateDomainContactPrivacy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation replaces the current set of name servers for the domain with the specified set of name servers.
    /// 			If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.
    /// 		       If successful, this operation returns an operation ID that you can use to track the progress and completion of the action.
    /// 			If the request is not completed successfully, the domain registrant will be notified by email.
    func updateDomainNameservers(input: UpdateDomainNameserversInput) async throws -> UpdateDomainNameserversOutputResponse
    {
        typealias updateDomainNameserversContinuation = CheckedContinuation<UpdateDomainNameserversOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateDomainNameserversContinuation) in
            updateDomainNameservers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation adds or updates tags for a specified domain.
    /// 		       All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.
    func updateTagsForDomain(input: UpdateTagsForDomainInput) async throws -> UpdateTagsForDomainOutputResponse
    {
        typealias updateTagsForDomainContinuation = CheckedContinuation<UpdateTagsForDomainOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTagsForDomainContinuation) in
            updateTagsForDomain(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns all the domain-related billing records for the current AWS account for a specified period
    func viewBilling(input: ViewBillingInput) async throws -> ViewBillingOutputResponse
    {
        typealias viewBillingContinuation = CheckedContinuation<ViewBillingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: viewBillingContinuation) in
            viewBilling(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
