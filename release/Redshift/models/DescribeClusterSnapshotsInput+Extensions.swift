// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeClusterSnapshotsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeClusterSnapshotsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeClusterSnapshotsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeClusterSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeClusterSnapshotsInput>
    public typealias MOutput = OperationOutput<DescribeClusterSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeClusterSnapshotsOutputError>
}

public struct DescribeClusterSnapshotsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeClusterSnapshotsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeClusterSnapshotsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeClusterSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeClusterSnapshotsInput>
    public typealias MOutput = OperationOutput<DescribeClusterSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeClusterSnapshotsOutputError>
}

public struct DescribeClusterSnapshotsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeClusterSnapshotsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeClusterSnapshotsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeClusterSnapshotsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeClusterSnapshotsInput>
    public typealias MOutput = OperationOutput<DescribeClusterSnapshotsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeClusterSnapshotsOutputError>
}

extension DescribeClusterSnapshotsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let clusterExists = clusterExists {
            try container.encode(clusterExists, forKey: Key("ClusterExists"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: Key("ClusterIdentifier"))
        }
        if let endTime = endTime {
            try container.encode(TimestampWrapper(endTime, format: .dateTime), forKey: Key("endTime"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let ownerAccount = ownerAccount {
            try container.encode(ownerAccount, forKey: Key("OwnerAccount"))
        }
        if let snapshotIdentifier = snapshotIdentifier {
            try container.encode(snapshotIdentifier, forKey: Key("SnapshotIdentifier"))
        }
        if let snapshotType = snapshotType {
            try container.encode(snapshotType, forKey: Key("SnapshotType"))
        }
        if let sortingEntities = sortingEntities {
            var sortingEntitiesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("SortingEntities"))
            for (index0, snapshotsortingentity0) in sortingEntities.enumerated() {
                try sortingEntitiesContainer.encode(snapshotsortingentity0, forKey: Key("SnapshotSortingEntity.\(index0.advanced(by: 1))"))
            }
        }
        if let startTime = startTime {
            try container.encode(TimestampWrapper(startTime, format: .dateTime), forKey: Key("startTime"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagKeys"))
            for (index0, string0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(string0, forKey: Key("TagKey.\(index0.advanced(by: 1))"))
            }
        }
        if let tagValues = tagValues {
            var tagValuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagValues"))
            for (index0, string0) in tagValues.enumerated() {
                try tagValuesContainer.encode(string0, forKey: Key("TagValue.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DescribeClusterSnapshots", forKey:Key("Action"))
        try container.encode("2012-12-01", forKey:Key("Version"))
    }
}
