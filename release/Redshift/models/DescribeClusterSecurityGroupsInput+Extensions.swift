// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DescribeClusterSecurityGroupsInputHeadersMiddleware: Middleware {
    public let id: String = "DescribeClusterSecurityGroupsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeClusterSecurityGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeClusterSecurityGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeClusterSecurityGroupsInput>
    public typealias MOutput = OperationOutput<DescribeClusterSecurityGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeClusterSecurityGroupsOutputError>
}

public struct DescribeClusterSecurityGroupsInputQueryItemMiddleware: Middleware {
    public let id: String = "DescribeClusterSecurityGroupsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeClusterSecurityGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeClusterSecurityGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeClusterSecurityGroupsInput>
    public typealias MOutput = OperationOutput<DescribeClusterSecurityGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeClusterSecurityGroupsOutputError>
}

public struct DescribeClusterSecurityGroupsInputBodyMiddleware: Middleware {
    public let id: String = "DescribeClusterSecurityGroupsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DescribeClusterSecurityGroupsInput>,
                  next: H) -> Swift.Result<OperationOutput<DescribeClusterSecurityGroupsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DescribeClusterSecurityGroupsInput>
    public typealias MOutput = OperationOutput<DescribeClusterSecurityGroupsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DescribeClusterSecurityGroupsOutputError>
}

extension DescribeClusterSecurityGroupsInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try container.encode(clusterSecurityGroupName, forKey: Key("ClusterSecurityGroupName"))
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxRecords = maxRecords {
            try container.encode(maxRecords, forKey: Key("MaxRecords"))
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagKeys"))
            for (index0, string0) in tagKeys.enumerated() {
                try tagKeysContainer.encode(string0, forKey: Key("TagKey.\(index0.advanced(by: 1))"))
            }
        }
        if let tagValues = tagValues {
            var tagValuesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("TagValues"))
            for (index0, string0) in tagValues.enumerated() {
                try tagValuesContainer.encode(string0, forKey: Key("TagValue.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("DescribeClusterSecurityGroups", forKey:Key("Action"))
        try container.encode("2012-12-01", forKey:Key("Version"))
    }
}
