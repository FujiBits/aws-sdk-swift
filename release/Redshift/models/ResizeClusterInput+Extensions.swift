// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ResizeClusterInputHeadersMiddleware: Middleware {
    public let id: String = "ResizeClusterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResizeClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<ResizeClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResizeClusterInput>
    public typealias MOutput = OperationOutput<ResizeClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResizeClusterOutputError>
}

public struct ResizeClusterInputQueryItemMiddleware: Middleware {
    public let id: String = "ResizeClusterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResizeClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<ResizeClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResizeClusterInput>
    public typealias MOutput = OperationOutput<ResizeClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResizeClusterOutputError>
}

public struct ResizeClusterInputBodyMiddleware: Middleware {
    public let id: String = "ResizeClusterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ResizeClusterInput>,
                  next: H) -> Swift.Result<OperationOutput<ResizeClusterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ResizeClusterInput>
    public typealias MOutput = OperationOutput<ResizeClusterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ResizeClusterOutputError>
}

extension ResizeClusterInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let classic = classic {
            try container.encode(classic, forKey: Key("Classic"))
        }
        if let clusterIdentifier = clusterIdentifier {
            try container.encode(clusterIdentifier, forKey: Key("ClusterIdentifier"))
        }
        if let clusterType = clusterType {
            try container.encode(clusterType, forKey: Key("ClusterType"))
        }
        if let nodeType = nodeType {
            try container.encode(nodeType, forKey: Key("NodeType"))
        }
        if let numberOfNodes = numberOfNodes {
            try container.encode(numberOfNodes, forKey: Key("NumberOfNodes"))
        }
        try container.encode("ResizeCluster", forKey:Key("Action"))
        try container.encode("2012-12-01", forKey:Key("Version"))
    }
}
