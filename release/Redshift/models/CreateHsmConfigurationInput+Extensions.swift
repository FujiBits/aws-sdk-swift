// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateHsmConfigurationInputHeadersMiddleware: Middleware {
    public let id: String = "CreateHsmConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHsmConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHsmConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHsmConfigurationInput>
    public typealias MOutput = OperationOutput<CreateHsmConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHsmConfigurationOutputError>
}

public struct CreateHsmConfigurationInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateHsmConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHsmConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHsmConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHsmConfigurationInput>
    public typealias MOutput = OperationOutput<CreateHsmConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHsmConfigurationOutputError>
}

public struct CreateHsmConfigurationInputBodyMiddleware: Middleware {
    public let id: String = "CreateHsmConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateHsmConfigurationInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateHsmConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateHsmConfigurationInput>
    public typealias MOutput = OperationOutput<CreateHsmConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateHsmConfigurationOutputError>
}

extension CreateHsmConfigurationInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try container.encode(hsmConfigurationIdentifier, forKey: Key("HsmConfigurationIdentifier"))
        }
        if let hsmIpAddress = hsmIpAddress {
            try container.encode(hsmIpAddress, forKey: Key("HsmIpAddress"))
        }
        if let hsmPartitionName = hsmPartitionName {
            try container.encode(hsmPartitionName, forKey: Key("HsmPartitionName"))
        }
        if let hsmPartitionPassword = hsmPartitionPassword {
            try container.encode(hsmPartitionPassword, forKey: Key("HsmPartitionPassword"))
        }
        if let hsmServerPublicCertificate = hsmServerPublicCertificate {
            try container.encode(hsmServerPublicCertificate, forKey: Key("HsmServerPublicCertificate"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("Tag.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreateHsmConfiguration", forKey:Key("Action"))
        try container.encode("2012-12-01", forKey:Key("Version"))
    }
}
