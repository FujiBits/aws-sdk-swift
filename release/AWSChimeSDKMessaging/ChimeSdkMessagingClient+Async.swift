// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ChimeSdkMessagingClient {
    /// Adds a specified number of users to a channel.
    func batchCreateChannelMembership(input: BatchCreateChannelMembershipInput) async throws -> BatchCreateChannelMembershipOutputResponse
    {
        typealias batchCreateChannelMembershipContinuation = CheckedContinuation<BatchCreateChannelMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchCreateChannelMembershipContinuation) in
            batchCreateChannelMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a channel to which you can add users and send messages.
    ///
    ///
    ///             Restriction: You can't change a channel's
    ///          privacy.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func createChannel(input: CreateChannelInput) async throws -> CreateChannelOutputResponse
    {
        typealias createChannelContinuation = CheckedContinuation<CreateChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChannelContinuation) in
            createChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Permanently bans a member from a channel. Moderators can't add banned members to a
    ///          channel. To undo a ban, you first have to DeleteChannelBan, and then
    ///             CreateChannelMembership. Bans are cleaned up when you delete users or
    ///          channels.
    ///          If you ban a user who is already part of a channel, that user is automatically kicked
    ///          from the channel.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func createChannelBan(input: CreateChannelBanInput) async throws -> CreateChannelBanOutputResponse
    {
        typealias createChannelBanContinuation = CheckedContinuation<CreateChannelBanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChannelBanContinuation) in
            createChannelBan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds a user to a channel. The InvitedBy response field is derived from the
    ///          request header. A channel member can:
    ///
    ///
    ///
    ///                List messages
    ///
    ///
    ///                Send messages
    ///
    ///
    ///                Receive messages
    ///
    ///
    ///                Edit their own messages
    ///
    ///
    ///                Leave the channel
    ///
    ///
    ///
    ///          Privacy settings impact this action as follows:
    ///
    ///
    ///
    ///                Public Channels: You do not need to be a member to list messages, but you must be
    ///                a member to send messages.
    ///
    ///
    ///                Private Channels: You must be a member to list or send messages.
    ///
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func createChannelMembership(input: CreateChannelMembershipInput) async throws -> CreateChannelMembershipOutputResponse
    {
        typealias createChannelMembershipContinuation = CheckedContinuation<CreateChannelMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChannelMembershipContinuation) in
            createChannelMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new ChannelModerator. A channel moderator can:
    ///
    ///
    ///
    ///                Add and remove other members of the channel.
    ///
    ///
    ///                Add and remove other moderators of the channel.
    ///
    ///
    ///                Add and remove user bans for the channel.
    ///
    ///
    ///                Redact messages in the channel.
    ///
    ///
    ///                List messages in the channel.
    ///
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func createChannelModerator(input: CreateChannelModeratorInput) async throws -> CreateChannelModeratorOutputResponse
    {
        typealias createChannelModeratorContinuation = CheckedContinuation<CreateChannelModeratorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChannelModeratorContinuation) in
            createChannelModerator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Immediately makes a channel and its memberships inaccessible and marks them for
    ///          deletion. This is an irreversible process.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func deleteChannel(input: DeleteChannelInput) async throws -> DeleteChannelOutputResponse
    {
        typealias deleteChannelContinuation = CheckedContinuation<DeleteChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelContinuation) in
            deleteChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a user from a channel's ban list.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func deleteChannelBan(input: DeleteChannelBanInput) async throws -> DeleteChannelBanOutputResponse
    {
        typealias deleteChannelBanContinuation = CheckedContinuation<DeleteChannelBanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelBanContinuation) in
            deleteChannelBan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a member from a channel.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func deleteChannelMembership(input: DeleteChannelMembershipInput) async throws -> DeleteChannelMembershipOutputResponse
    {
        typealias deleteChannelMembershipContinuation = CheckedContinuation<DeleteChannelMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelMembershipContinuation) in
            deleteChannelMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a channel message. Only admins can perform this action. Deletion makes messages
    ///          inaccessible immediately. A background process deletes any revisions created by
    ///             UpdateChannelMessage.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func deleteChannelMessage(input: DeleteChannelMessageInput) async throws -> DeleteChannelMessageOutputResponse
    {
        typealias deleteChannelMessageContinuation = CheckedContinuation<DeleteChannelMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelMessageContinuation) in
            deleteChannelMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a channel moderator.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func deleteChannelModerator(input: DeleteChannelModeratorInput) async throws -> DeleteChannelModeratorOutputResponse
    {
        typealias deleteChannelModeratorContinuation = CheckedContinuation<DeleteChannelModeratorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelModeratorContinuation) in
            deleteChannelModerator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of a channel in an Amazon Chime
    ///          AppInstance.
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannel(input: DescribeChannelInput) async throws -> DescribeChannelOutputResponse
    {
        typealias describeChannelContinuation = CheckedContinuation<DescribeChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelContinuation) in
            describeChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of a channel ban.
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannelBan(input: DescribeChannelBanInput) async throws -> DescribeChannelBanOutputResponse
    {
        typealias describeChannelBanContinuation = CheckedContinuation<DescribeChannelBanOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelBanContinuation) in
            describeChannelBan(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of a user's channel membership.
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannelMembership(input: DescribeChannelMembershipInput) async throws -> DescribeChannelMembershipOutputResponse
    {
        typealias describeChannelMembershipContinuation = CheckedContinuation<DescribeChannelMembershipOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelMembershipContinuation) in
            describeChannelMembership(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///  Returns the details of a channel based on the membership of the specified
    ///             AppInstanceUser.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannelMembershipForAppInstanceUser(input: DescribeChannelMembershipForAppInstanceUserInput) async throws -> DescribeChannelMembershipForAppInstanceUserOutputResponse
    {
        typealias describeChannelMembershipForAppInstanceUserContinuation = CheckedContinuation<DescribeChannelMembershipForAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelMembershipForAppInstanceUserContinuation) in
            describeChannelMembershipForAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of a channel moderated by the specified
    ///             AppInstanceUser.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannelModeratedByAppInstanceUser(input: DescribeChannelModeratedByAppInstanceUserInput) async throws -> DescribeChannelModeratedByAppInstanceUserOutputResponse
    {
        typealias describeChannelModeratedByAppInstanceUserContinuation = CheckedContinuation<DescribeChannelModeratedByAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelModeratedByAppInstanceUserContinuation) in
            describeChannelModeratedByAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the full details of a single ChannelModerator.
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func describeChannelModerator(input: DescribeChannelModeratorInput) async throws -> DescribeChannelModeratorOutputResponse
    {
        typealias describeChannelModeratorContinuation = CheckedContinuation<DescribeChannelModeratorOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelModeratorContinuation) in
            describeChannelModerator(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the full details of a channel message.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func getChannelMessage(input: GetChannelMessageInput) async throws -> GetChannelMessageOutputResponse
    {
        typealias getChannelMessageContinuation = CheckedContinuation<GetChannelMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getChannelMessageContinuation) in
            getChannelMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// The details of the endpoint for the messaging session.
    func getMessagingSessionEndpoint(input: GetMessagingSessionEndpointInput) async throws -> GetMessagingSessionEndpointOutputResponse
    {
        typealias getMessagingSessionEndpointContinuation = CheckedContinuation<GetMessagingSessionEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMessagingSessionEndpointContinuation) in
            getMessagingSessionEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all the users banned from a particular channel.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelBans(input: ListChannelBansInput) async throws -> ListChannelBansOutputResponse
    {
        typealias listChannelBansContinuation = CheckedContinuation<ListChannelBansOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelBansContinuation) in
            listChannelBans(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all channel memberships in a channel.
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelMemberships(input: ListChannelMembershipsInput) async throws -> ListChannelMembershipsOutputResponse
    {
        typealias listChannelMembershipsContinuation = CheckedContinuation<ListChannelMembershipsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelMembershipsContinuation) in
            listChannelMemberships(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///  Lists all channels that a particular AppInstanceUser is a part of. Only an
    ///             AppInstanceAdmin can call the API with a user ARN that is not their own.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelMembershipsForAppInstanceUser(input: ListChannelMembershipsForAppInstanceUserInput) async throws -> ListChannelMembershipsForAppInstanceUserOutputResponse
    {
        typealias listChannelMembershipsForAppInstanceUserContinuation = CheckedContinuation<ListChannelMembershipsForAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelMembershipsForAppInstanceUserContinuation) in
            listChannelMembershipsForAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List all the messages in a channel. Returns a paginated list of
    ///             ChannelMessages. By default, sorted by creation timestamp in descending
    ///          order.
    ///
    ///             Redacted messages appear in the results as empty, since they are only redacted, not
    ///             deleted. Deleted messages do not appear in the results. This action always returns the
    ///             latest version of an edited message.
    ///             Also, the x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelMessages(input: ListChannelMessagesInput) async throws -> ListChannelMessagesOutputResponse
    {
        typealias listChannelMessagesContinuation = CheckedContinuation<ListChannelMessagesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelMessagesContinuation) in
            listChannelMessages(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all the moderators for a channel.
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelModerators(input: ListChannelModeratorsInput) async throws -> ListChannelModeratorsOutputResponse
    {
        typealias listChannelModeratorsContinuation = CheckedContinuation<ListChannelModeratorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelModeratorsContinuation) in
            listChannelModerators(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all Channels created under a single Chime App as a paginated list. You can specify
    ///          filters to narrow results.
    ///
    ///          <p class="title">
    ///             Functionality & restrictions
    ///
    ///
    ///
    ///                Use privacy = PUBLIC to retrieve all public channels in the
    ///                account.
    ///
    ///
    ///                Only an AppInstanceAdmin can set privacy = PRIVATE to
    ///                list the private channels in an account.
    ///
    ///
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannels(input: ListChannelsInput) async throws -> ListChannelsOutputResponse
    {
        typealias listChannelsContinuation = CheckedContinuation<ListChannelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelsContinuation) in
            listChannels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// A list of the channels moderated by an AppInstanceUser.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func listChannelsModeratedByAppInstanceUser(input: ListChannelsModeratedByAppInstanceUserInput) async throws -> ListChannelsModeratedByAppInstanceUserOutputResponse
    {
        typealias listChannelsModeratedByAppInstanceUserContinuation = CheckedContinuation<ListChannelsModeratedByAppInstanceUserOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelsModeratedByAppInstanceUserContinuation) in
            listChannelsModeratedByAppInstanceUser(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Redacts message content, but not metadata. The message exists in the back end, but the
    ///          action returns null content, and the state shows as redacted.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func redactChannelMessage(input: RedactChannelMessageInput) async throws -> RedactChannelMessageOutputResponse
    {
        typealias redactChannelMessageContinuation = CheckedContinuation<RedactChannelMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: redactChannelMessageContinuation) in
            redactChannelMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sends a message to a particular channel that the member is a part of.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    ///             Also, STANDARD messages can contain 4KB of data and the 1KB of metadata.
    ///                CONTROL messages can contain 30 bytes of data and no metadata.
    ///
    func sendChannelMessage(input: SendChannelMessageInput) async throws -> SendChannelMessageOutputResponse
    {
        typealias sendChannelMessageContinuation = CheckedContinuation<SendChannelMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendChannelMessageContinuation) in
            sendChannelMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update a channel's attributes.
    ///
    ///             Restriction: You can't change a channel's privacy.
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func updateChannel(input: UpdateChannelInput) async throws -> UpdateChannelOutputResponse
    {
        typealias updateChannelContinuation = CheckedContinuation<UpdateChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateChannelContinuation) in
            updateChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the content of a message.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func updateChannelMessage(input: UpdateChannelMessageInput) async throws -> UpdateChannelMessageOutputResponse
    {
        typealias updateChannelMessageContinuation = CheckedContinuation<UpdateChannelMessageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateChannelMessageContinuation) in
            updateChannelMessage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// The details of the time when a user last read messages in a channel.
    ///
    ///
    ///             The x-amz-chime-bearer request header is mandatory. Use the
    ///                AppInstanceUserArn of the user that makes the API call as the value in
    ///             the header.
    ///
    func updateChannelReadMarker(input: UpdateChannelReadMarkerInput) async throws -> UpdateChannelReadMarkerOutputResponse
    {
        typealias updateChannelReadMarkerContinuation = CheckedContinuation<UpdateChannelReadMarkerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateChannelReadMarkerContinuation) in
            updateChannelReadMarker(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
