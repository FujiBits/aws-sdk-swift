// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ManagedBlockchainClient {
    /// <p>Creates a member within a Managed Blockchain network.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func createMember(input: CreateMemberInput) async throws -> CreateMemberOutputResponse
    {
        typealias createMemberContinuation = CheckedContinuation<CreateMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMemberContinuation) in
            createMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a new blockchain network using Amazon Managed Blockchain.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func createNetwork(input: CreateNetworkInput) async throws -> CreateNetworkOutputResponse
    {
        typealias createNetworkContinuation = CheckedContinuation<CreateNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createNetworkContinuation) in
            createNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a node on the specified blockchain network.</p>
    ///          <p>Applies to Hyperledger Fabric and Ethereum.</p>
    func createNode(input: CreateNodeInput) async throws -> CreateNodeOutputResponse
    {
        typealias createNodeContinuation = CheckedContinuation<CreateNodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createNodeContinuation) in
            createNode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Creates a proposal for a change to the network that other members of the network can vote on, for example, a proposal to add a new member to the network. Any member can create a proposal.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func createProposal(input: CreateProposalInput) async throws -> CreateProposalOutputResponse
    {
        typealias createProposalContinuation = CheckedContinuation<CreateProposalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createProposalContinuation) in
            createProposal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a member. Deleting a member removes the member and all associated resources from the network. <code>DeleteMember</code> can only be called for a specified <code>MemberId</code> if the principal performing the action is associated with the AWS account that owns the member. In all other cases, the <code>DeleteMember</code> action is carried out as the result of an approved proposal to remove a member. If <code>MemberId</code> is the last member in a network specified by the last AWS account, the network is deleted also.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func deleteMember(input: DeleteMemberInput) async throws -> DeleteMemberOutputResponse
    {
        typealias deleteMemberContinuation = CheckedContinuation<DeleteMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMemberContinuation) in
            deleteMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Deletes a node that your AWS account owns. All data on the node is lost and cannot be recovered.</p>
    ///          <p>Applies to Hyperledger Fabric and Ethereum.</p>
    func deleteNode(input: DeleteNodeInput) async throws -> DeleteNodeOutputResponse
    {
        typealias deleteNodeContinuation = CheckedContinuation<DeleteNodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteNodeContinuation) in
            deleteNode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns detailed information about a member.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func getMember(input: GetMemberInput) async throws -> GetMemberOutputResponse
    {
        typealias getMemberContinuation = CheckedContinuation<GetMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getMemberContinuation) in
            getMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns detailed information about a network.</p>
    ///          <p>Applies to Hyperledger Fabric and Ethereum.</p>
    func getNetwork(input: GetNetworkInput) async throws -> GetNetworkOutputResponse
    {
        typealias getNetworkContinuation = CheckedContinuation<GetNetworkOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNetworkContinuation) in
            getNetwork(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns detailed information about a node.</p>
    ///          <p>Applies to Hyperledger Fabric and Ethereum.</p>
    func getNode(input: GetNodeInput) async throws -> GetNodeOutputResponse
    {
        typealias getNodeContinuation = CheckedContinuation<GetNodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getNodeContinuation) in
            getNode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns detailed information about a proposal.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func getProposal(input: GetProposalInput) async throws -> GetProposalOutputResponse
    {
        typealias getProposalContinuation = CheckedContinuation<GetProposalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getProposalContinuation) in
            getProposal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of all invitations for the current AWS account.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func listInvitations(input: ListInvitationsInput) async throws -> ListInvitationsOutputResponse
    {
        typealias listInvitationsContinuation = CheckedContinuation<ListInvitationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInvitationsContinuation) in
            listInvitations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of the members in a network and properties of their configurations.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func listMembers(input: ListMembersInput) async throws -> ListMembersOutputResponse
    {
        typealias listMembersContinuation = CheckedContinuation<ListMembersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMembersContinuation) in
            listMembers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the networks in which the current AWS account participates.</p>
    ///          <p>Applies to Hyperledger Fabric and Ethereum.</p>
    func listNetworks(input: ListNetworksInput) async throws -> ListNetworksOutputResponse
    {
        typealias listNetworksContinuation = CheckedContinuation<ListNetworksOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNetworksContinuation) in
            listNetworks(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns information about the nodes within a network.</p>
    ///          <p>Applies to Hyperledger Fabric and Ethereum.</p>
    func listNodes(input: ListNodesInput) async throws -> ListNodesOutputResponse
    {
        typealias listNodesContinuation = CheckedContinuation<ListNodesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listNodesContinuation) in
            listNodes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the list of votes for a specified proposal, including the value of each vote and the unique identifier of the member that cast the vote.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func listProposalVotes(input: ListProposalVotesInput) async throws -> ListProposalVotesOutputResponse
    {
        typealias listProposalVotesContinuation = CheckedContinuation<ListProposalVotesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProposalVotesContinuation) in
            listProposalVotes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of proposals for the network.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func listProposals(input: ListProposalsInput) async throws -> ListProposalsOutputResponse
    {
        typealias listProposalsContinuation = CheckedContinuation<ListProposalsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listProposalsContinuation) in
            listProposals(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns a list of tags for the specified resource. Each tag consists of a key and optional value.</p>
    ///          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Rejects an invitation to join a network. This action can be called by a principal in an AWS account that has received an invitation to create a member and join a network.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func rejectInvitation(input: RejectInvitationInput) async throws -> RejectInvitationOutputResponse
    {
        typealias rejectInvitationContinuation = CheckedContinuation<RejectInvitationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rejectInvitationContinuation) in
            rejectInvitation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Adds or overwrites the specified tags for the specified Amazon Managed Blockchain resource. Each tag consists of a key and optional value.</p>
    ///          <p>When you specify a tag key that already exists, the tag value is overwritten with the new value. Use <code>UntagResource</code> to remove tag keys.</p>
    ///          <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, your request fails and returns an error.</p>
    ///          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Removes the specified tags from the Amazon Managed Blockchain resource.</p>
    ///          <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a member configuration with new parameters.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func updateMember(input: UpdateMemberInput) async throws -> UpdateMemberOutputResponse
    {
        typealias updateMemberContinuation = CheckedContinuation<UpdateMemberOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMemberContinuation) in
            updateMember(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates a node configuration with new parameters.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func updateNode(input: UpdateNodeInput) async throws -> UpdateNodeOutputResponse
    {
        typealias updateNodeContinuation = CheckedContinuation<UpdateNodeOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateNodeContinuation) in
            updateNode(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Casts a vote for a specified <code>ProposalId</code> on behalf of a member. The member to vote as, specified by <code>VoterMemberId</code>, must be in the same AWS account as the principal that calls the action.</p>
    ///          <p>Applies only to Hyperledger Fabric.</p>
    func voteOnProposal(input: VoteOnProposalInput) async throws -> VoteOnProposalOutputResponse
    {
        typealias voteOnProposalContinuation = CheckedContinuation<VoteOnProposalOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: voteOnProposalContinuation) in
            voteOnProposal(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
