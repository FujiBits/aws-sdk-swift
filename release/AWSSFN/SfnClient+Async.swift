// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension SfnClient {
    /// Creates an activity. An activity is a task that you write in any programming language and
    ///       host on any machine that has access to AWS Step Functions. Activities must poll Step Functions using the
    ///         GetActivityTask API action and respond using SendTask* API
    ///       actions. This function lets Step Functions know the existence of your activity and returns an
    ///       identifier for use in a state machine and when polling from the activity.
    ///
    ///             This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.
    ///
    ///
    ///
    ///                CreateActivity is an idempotent API. Subsequent requests won’t create a
    ///         duplicate resource if it was already created. CreateActivity's idempotency
    ///         check is based on the activity name. If a following request has different
    ///           tags values, Step Functions will ignore these differences and treat it as an
    ///         idempotent request of the previous. In this case, tags will not be updated,
    ///         even if they are different.
    ///
    func createActivity(input: CreateActivityInput) async throws -> CreateActivityOutputResponse
    {
        typealias createActivityContinuation = CheckedContinuation<CreateActivityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createActivityContinuation) in
            createActivity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a state machine. A state machine consists of a collection of states that can do
    ///       work (Task states), determine to which states to transition next
    ///         (Choice states), stop an execution with an error (Fail states),
    ///       and so on. State machines are specified using a JSON-based, structured language. For more
    ///       information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States
    ///         Language in the AWS Step Functions User Guide.
    ///
    ///             This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.
    ///
    ///
    ///
    ///                CreateStateMachine is an idempotent API. Subsequent requests won’t create a
    ///         duplicate resource if it was already created. CreateStateMachine's idempotency
    ///         check is based on the state machine name, definition,
    ///           type, LoggingConfiguration and TracingConfiguration. If a following request has a
    ///         different roleArn or tags, Step Functions will ignore these differences and
    ///         treat it as an idempotent request of the previous. In this case, roleArn and
    ///           tags will not be updated, even if they are different.
    ///
    func createStateMachine(input: CreateStateMachineInput) async throws -> CreateStateMachineOutputResponse
    {
        typealias createStateMachineContinuation = CheckedContinuation<CreateStateMachineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createStateMachineContinuation) in
            createStateMachine(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an activity.
    func deleteActivity(input: DeleteActivityInput) async throws -> DeleteActivityOutputResponse
    {
        typealias deleteActivityContinuation = CheckedContinuation<DeleteActivityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteActivityContinuation) in
            deleteActivity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a state machine. This is an asynchronous operation: It sets the state machine's
    ///       status to DELETING and begins the deletion process.
    ///
    ///             For EXPRESSstate machines, the deletion will happen eventually (usually
    ///         less than a minute). Running executions may emit logs after DeleteStateMachine
    ///         API is called.
    ///
    func deleteStateMachine(input: DeleteStateMachineInput) async throws -> DeleteStateMachineOutputResponse
    {
        typealias deleteStateMachineContinuation = CheckedContinuation<DeleteStateMachineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteStateMachineContinuation) in
            deleteStateMachine(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an activity.
    ///
    ///             This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.
    ///
    func describeActivity(input: DescribeActivityInput) async throws -> DescribeActivityOutputResponse
    {
        typealias describeActivityContinuation = CheckedContinuation<DescribeActivityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeActivityContinuation) in
            describeActivity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes an execution.
    ///
    ///             This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.
    ///
    ///          This API action is not supported by EXPRESS state machines.
    func describeExecution(input: DescribeExecutionInput) async throws -> DescribeExecutionOutputResponse
    {
        typealias describeExecutionContinuation = CheckedContinuation<DescribeExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeExecutionContinuation) in
            describeExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes a state machine.
    ///
    ///             This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.
    ///
    func describeStateMachine(input: DescribeStateMachineInput) async throws -> DescribeStateMachineOutputResponse
    {
        typealias describeStateMachineContinuation = CheckedContinuation<DescribeStateMachineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStateMachineContinuation) in
            describeStateMachine(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the state machine associated with a specific execution.
    ///
    ///             This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.
    ///
    ///          This API action is not supported by EXPRESS state machines.
    func describeStateMachineForExecution(input: DescribeStateMachineForExecutionInput) async throws -> DescribeStateMachineForExecutionOutputResponse
    {
        typealias describeStateMachineForExecutionContinuation = CheckedContinuation<DescribeStateMachineForExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeStateMachineForExecutionContinuation) in
            describeStateMachineForExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used by workers to retrieve a task (with the specified activity ARN) which has been
    ///       scheduled for execution by a running state machine. This initiates a long poll, where the
    ///       service holds the HTTP connection open and responds as soon as a task becomes available (i.e.
    ///       an execution of a task of this type is needed.) The maximum time the service holds on to the
    ///       request before responding is 60 seconds. If no task is available within 60 seconds, the poll
    ///       returns a taskToken with a null string.
    ///
    ///             Workers should set their client side socket timeout to at least 65 seconds (5 seconds
    ///         higher than the maximum time the service may hold the poll request).
    ///             Polling with GetActivityTask can cause latency in some implementations. See
    ///           <a href="https://docs.aws.amazon.com/step-functions/latest/dg/bp-activity-pollers.html">Avoid
    ///           Latency When Polling for Activity Tasks in the Step Functions Developer Guide.
    ///
    func getActivityTask(input: GetActivityTaskInput) async throws -> GetActivityTaskOutputResponse
    {
        typealias getActivityTaskContinuation = CheckedContinuation<GetActivityTaskOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getActivityTaskContinuation) in
            getActivityTask(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the history of the specified execution as a list of events. By default, the
    ///       results are returned in ascending order of the timeStamp of the events. Use the
    ///         reverseOrder parameter to get the latest events first.
    ///          If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page.
    ///     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    ///          This API action is not supported by EXPRESS state machines.
    func getExecutionHistory(input: GetExecutionHistoryInput) async throws -> GetExecutionHistoryOutputResponse
    {
        typealias getExecutionHistoryContinuation = CheckedContinuation<GetExecutionHistoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getExecutionHistoryContinuation) in
            getExecutionHistory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the existing activities.
    ///          If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page.
    ///     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    ///
    ///             This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.
    ///
    func listActivities(input: ListActivitiesInput) async throws -> ListActivitiesOutputResponse
    {
        typealias listActivitiesContinuation = CheckedContinuation<ListActivitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listActivitiesContinuation) in
            listActivities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the executions of a state machine that meet the filtering criteria. Results are
    ///       sorted by time, with the most recent execution first.
    ///          If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page.
    ///     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    ///
    ///             This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.
    ///
    ///          This API action is not supported by EXPRESS state machines.
    func listExecutions(input: ListExecutionsInput) async throws -> ListExecutionsOutputResponse
    {
        typealias listExecutionsContinuation = CheckedContinuation<ListExecutionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listExecutionsContinuation) in
            listExecutions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the existing state machines.
    ///          If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page.
    ///     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.
    ///
    ///             This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.
    ///
    func listStateMachines(input: ListStateMachinesInput) async throws -> ListStateMachinesOutputResponse
    {
        typealias listStateMachinesContinuation = CheckedContinuation<ListStateMachinesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listStateMachinesContinuation) in
            listStateMachines(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List tags for a given resource.
    ///          Tags may only contain Unicode letters, digits, white space, or these symbols: _ . : / = + - @.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback
    ///       pattern to report that the task identified by the taskToken failed.
    func sendTaskFailure(input: SendTaskFailureInput) async throws -> SendTaskFailureOutputResponse
    {
        typealias sendTaskFailureContinuation = CheckedContinuation<SendTaskFailureOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendTaskFailureContinuation) in
            sendTaskFailure(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback
    ///       pattern to report to Step Functions that the task represented by the specified
    ///         taskToken is still making progress. This action resets the
    ///         Heartbeat clock. The Heartbeat threshold is specified in the state
    ///       machine's Amazon States Language definition (HeartbeatSeconds). This action does not in itself
    ///       create an event in the execution history. However, if the task times out, the execution
    ///       history contains an ActivityTimedOut entry for activities, or a
    ///         TaskTimedOut entry for for tasks using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync">job run or
    ///         <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback
    ///       pattern.
    ///
    ///             The Timeout of a task, defined in the state machine's Amazon States Language definition, is
    ///         its maximum allowed duration, regardless of the number of SendTaskHeartbeat requests received. Use HeartbeatSeconds to configure the timeout interval
    ///         for heartbeats.
    ///
    func sendTaskHeartbeat(input: SendTaskHeartbeatInput) async throws -> SendTaskHeartbeatOutputResponse
    {
        typealias sendTaskHeartbeatContinuation = CheckedContinuation<SendTaskHeartbeatOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendTaskHeartbeatContinuation) in
            sendTaskHeartbeat(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback
    ///       pattern to report that the task identified by the taskToken completed
    ///       successfully.
    func sendTaskSuccess(input: SendTaskSuccessInput) async throws -> SendTaskSuccessOutputResponse
    {
        typealias sendTaskSuccessContinuation = CheckedContinuation<SendTaskSuccessOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: sendTaskSuccessContinuation) in
            sendTaskSuccess(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a state machine execution.
    ///
    ///
    ///                StartExecution is idempotent. If StartExecution is called with
    ///         the same name and input as a running execution, the call will succeed and return the same
    ///         response as the original request. If the execution is closed or if the input is different,
    ///         it will return a 400 ExecutionAlreadyExists error. Names can be reused after 90
    ///         days.
    ///
    func startExecution(input: StartExecutionInput) async throws -> StartExecutionOutputResponse
    {
        typealias startExecutionContinuation = CheckedContinuation<StartExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startExecutionContinuation) in
            startExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts a Synchronous Express state machine execution.
    func startSyncExecution(input: StartSyncExecutionInput) async throws -> StartSyncExecutionOutputResponse
    {
        typealias startSyncExecutionContinuation = CheckedContinuation<StartSyncExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startSyncExecutionContinuation) in
            startSyncExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops an execution.
    ///          This API action is not supported by EXPRESS state machines.
    func stopExecution(input: StopExecutionInput) async throws -> StopExecutionOutputResponse
    {
        typealias stopExecutionContinuation = CheckedContinuation<StopExecutionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopExecutionContinuation) in
            stopExecution(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Add a tag to a Step Functions resource.
    ///          An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using
    ///       Cost Allocation Tags in the AWS Billing and Cost Management User
    ///         Guide, and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM
    ///           Tags.
    ///          Tags may only contain Unicode letters, digits, white space, or these symbols: _ . : / = + - @.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Remove a tag from a Step Functions resource
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an existing state machine by modifying its definition,
    ///         roleArn, or loggingConfiguration. Running executions will continue
    ///       to use the previous definition and roleArn. You must include at
    ///       least one of definition or roleArn or you will receive a
    ///         MissingRequiredParameter error.
    ///
    ///             All StartExecution calls within a few seconds will use the updated
    ///           definition and roleArn. Executions started immediately after
    ///         calling UpdateStateMachine may use the previous state machine
    ///           definition and roleArn.
    ///
    func updateStateMachine(input: UpdateStateMachineInput) async throws -> UpdateStateMachineOutputResponse
    {
        typealias updateStateMachineContinuation = CheckedContinuation<UpdateStateMachineOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateStateMachineContinuation) in
            updateStateMachine(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
