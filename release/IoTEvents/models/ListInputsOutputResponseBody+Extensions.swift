// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListInputsOutputResponseBody: Equatable {
    public let inputSummaries: [InputSummary]?
    public let nextToken: String?
}

extension ListInputsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case inputSummaries
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inputSummariesContainer = try containerValues.decodeIfPresent([InputSummary?].self, forKey: .inputSummaries)
        var inputSummariesDecoded0:[InputSummary]? = nil
        if let inputSummariesContainer = inputSummariesContainer {
            inputSummariesDecoded0 = [InputSummary]()
            for structure0 in inputSummariesContainer {
                if let structure0 = structure0 {
                    inputSummariesDecoded0?.append(structure0)
                }
            }
        }
        inputSummaries = inputSummariesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
