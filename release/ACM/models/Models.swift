// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(message: \(Swift.String(describing: message)))"}
}

extension AccessDeniedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You do not have access
///       required to perform this action.</p>
public struct AccessDeniedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct AddTagsToCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsToCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsToCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsToCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsToCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsToCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsToCertificateOutputError>
}

extension AddTagsToCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddTagsToCertificateInput(certificateArn: \(Swift.String(describing: certificateArn)), tags: \(Swift.String(describing: tags)))"}
}

extension AddTagsToCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct AddTagsToCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsToCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsToCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsToCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsToCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsToCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsToCertificateOutputError>
}

public struct AddTagsToCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsToCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsToCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsToCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsToCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsToCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsToCertificateOutputError>
}

public struct AddTagsToCertificateInput: Swift.Equatable {
    /// <p>String that contains the ARN of the ACM certificate to which the tag is to be applied.
    ///       This must be of the form:</p>
    ///
    ///          <p>
    ///             <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    ///
    ///          <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    public let certificateArn: Swift.String?
    /// <p>The key-value pair that defines the tag. The tag value is optional.</p>
    public let tags: [AcmClientTypes.Tag]?

    public init (
        certificateArn: Swift.String? = nil,
        tags: [AcmClientTypes.Tag]? = nil
    )
    {
        self.certificateArn = certificateArn
        self.tags = tags
    }
}

struct AddTagsToCertificateInputBody: Swift.Equatable {
    public let certificateArn: Swift.String?
    public let tags: [AcmClientTypes.Tag]?
}

extension AddTagsToCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AcmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[AcmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AcmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension AddTagsToCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsToCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagPolicyException" : self = .tagPolicyException(try TagPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddTagsToCertificateOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case invalidParameterException(InvalidParameterException)
    case invalidTagException(InvalidTagException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tagPolicyException(TagPolicyException)
    case throttlingException(ThrottlingException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsToCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddTagsToCertificateOutputResponse()"}
}

extension AddTagsToCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AddTagsToCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct AddTagsToCertificateOutputResponseBody: Swift.Equatable {
}

extension AddTagsToCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AcmClientTypes.CertificateDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case createdAt = "CreatedAt"
        case domainName = "DomainName"
        case domainValidationOptions = "DomainValidationOptions"
        case extendedKeyUsages = "ExtendedKeyUsages"
        case failureReason = "FailureReason"
        case importedAt = "ImportedAt"
        case inUseBy = "InUseBy"
        case issuedAt = "IssuedAt"
        case issuer = "Issuer"
        case keyAlgorithm = "KeyAlgorithm"
        case keyUsages = "KeyUsages"
        case notAfter = "NotAfter"
        case notBefore = "NotBefore"
        case options = "Options"
        case renewalEligibility = "RenewalEligibility"
        case renewalSummary = "RenewalSummary"
        case revocationReason = "RevocationReason"
        case revokedAt = "RevokedAt"
        case serial = "Serial"
        case signatureAlgorithm = "SignatureAlgorithm"
        case status = "Status"
        case subject = "Subject"
        case subjectAlternativeNames = "SubjectAlternativeNames"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateAuthorityArn = certificateAuthorityArn {
            try encodeContainer.encode(certificateAuthorityArn, forKey: .certificateAuthorityArn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainValidationOptions = domainValidationOptions {
            var domainValidationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationOptions)
            for domainvalidationlist0 in domainValidationOptions {
                try domainValidationOptionsContainer.encode(domainvalidationlist0)
            }
        }
        if let extendedKeyUsages = extendedKeyUsages {
            var extendedKeyUsagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .extendedKeyUsages)
            for extendedkeyusagelist0 in extendedKeyUsages {
                try extendedKeyUsagesContainer.encode(extendedkeyusagelist0)
            }
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason.rawValue, forKey: .failureReason)
        }
        if let importedAt = importedAt {
            try encodeContainer.encode(importedAt.timeIntervalSince1970, forKey: .importedAt)
        }
        if let inUseBy = inUseBy {
            var inUseByContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inUseBy)
            for inuselist0 in inUseBy {
                try inUseByContainer.encode(inuselist0)
            }
        }
        if let issuedAt = issuedAt {
            try encodeContainer.encode(issuedAt.timeIntervalSince1970, forKey: .issuedAt)
        }
        if let issuer = issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let keyAlgorithm = keyAlgorithm {
            try encodeContainer.encode(keyAlgorithm.rawValue, forKey: .keyAlgorithm)
        }
        if let keyUsages = keyUsages {
            var keyUsagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keyUsages)
            for keyusagelist0 in keyUsages {
                try keyUsagesContainer.encode(keyusagelist0)
            }
        }
        if let notAfter = notAfter {
            try encodeContainer.encode(notAfter.timeIntervalSince1970, forKey: .notAfter)
        }
        if let notBefore = notBefore {
            try encodeContainer.encode(notBefore.timeIntervalSince1970, forKey: .notBefore)
        }
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let renewalEligibility = renewalEligibility {
            try encodeContainer.encode(renewalEligibility.rawValue, forKey: .renewalEligibility)
        }
        if let renewalSummary = renewalSummary {
            try encodeContainer.encode(renewalSummary, forKey: .renewalSummary)
        }
        if let revocationReason = revocationReason {
            try encodeContainer.encode(revocationReason.rawValue, forKey: .revocationReason)
        }
        if let revokedAt = revokedAt {
            try encodeContainer.encode(revokedAt.timeIntervalSince1970, forKey: .revokedAt)
        }
        if let serial = serial {
            try encodeContainer.encode(serial, forKey: .serial)
        }
        if let signatureAlgorithm = signatureAlgorithm {
            try encodeContainer.encode(signatureAlgorithm, forKey: .signatureAlgorithm)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let subject = subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for domainlist0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(domainlist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[Swift.String]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in subjectAlternativeNamesContainer {
                if let string0 = string0 {
                    subjectAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
        let domainValidationOptionsContainer = try containerValues.decodeIfPresent([AcmClientTypes.DomainValidation?].self, forKey: .domainValidationOptions)
        var domainValidationOptionsDecoded0:[AcmClientTypes.DomainValidation]? = nil
        if let domainValidationOptionsContainer = domainValidationOptionsContainer {
            domainValidationOptionsDecoded0 = [AcmClientTypes.DomainValidation]()
            for structure0 in domainValidationOptionsContainer {
                if let structure0 = structure0 {
                    domainValidationOptionsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationOptions = domainValidationOptionsDecoded0
        let serialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serial)
        serial = serialDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let issuedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .issuedAt)
        issuedAt = issuedAtDecoded
        let importedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .importedAt)
        importedAt = importedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(AcmClientTypes.CertificateStatus.self, forKey: .status)
        status = statusDecoded
        let revokedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .revokedAt)
        revokedAt = revokedAtDecoded
        let revocationReasonDecoded = try containerValues.decodeIfPresent(AcmClientTypes.RevocationReason.self, forKey: .revocationReason)
        revocationReason = revocationReasonDecoded
        let notBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notBefore)
        notBefore = notBeforeDecoded
        let notAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .notAfter)
        notAfter = notAfterDecoded
        let keyAlgorithmDecoded = try containerValues.decodeIfPresent(AcmClientTypes.KeyAlgorithm.self, forKey: .keyAlgorithm)
        keyAlgorithm = keyAlgorithmDecoded
        let signatureAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signatureAlgorithm)
        signatureAlgorithm = signatureAlgorithmDecoded
        let inUseByContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inUseBy)
        var inUseByDecoded0:[Swift.String]? = nil
        if let inUseByContainer = inUseByContainer {
            inUseByDecoded0 = [Swift.String]()
            for string0 in inUseByContainer {
                if let string0 = string0 {
                    inUseByDecoded0?.append(string0)
                }
            }
        }
        inUseBy = inUseByDecoded0
        let failureReasonDecoded = try containerValues.decodeIfPresent(AcmClientTypes.FailureReason.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let typeDecoded = try containerValues.decodeIfPresent(AcmClientTypes.CertificateType.self, forKey: .type)
        type = typeDecoded
        let renewalSummaryDecoded = try containerValues.decodeIfPresent(AcmClientTypes.RenewalSummary.self, forKey: .renewalSummary)
        renewalSummary = renewalSummaryDecoded
        let keyUsagesContainer = try containerValues.decodeIfPresent([AcmClientTypes.KeyUsage?].self, forKey: .keyUsages)
        var keyUsagesDecoded0:[AcmClientTypes.KeyUsage]? = nil
        if let keyUsagesContainer = keyUsagesContainer {
            keyUsagesDecoded0 = [AcmClientTypes.KeyUsage]()
            for structure0 in keyUsagesContainer {
                if let structure0 = structure0 {
                    keyUsagesDecoded0?.append(structure0)
                }
            }
        }
        keyUsages = keyUsagesDecoded0
        let extendedKeyUsagesContainer = try containerValues.decodeIfPresent([AcmClientTypes.ExtendedKeyUsage?].self, forKey: .extendedKeyUsages)
        var extendedKeyUsagesDecoded0:[AcmClientTypes.ExtendedKeyUsage]? = nil
        if let extendedKeyUsagesContainer = extendedKeyUsagesContainer {
            extendedKeyUsagesDecoded0 = [AcmClientTypes.ExtendedKeyUsage]()
            for structure0 in extendedKeyUsagesContainer {
                if let structure0 = structure0 {
                    extendedKeyUsagesDecoded0?.append(structure0)
                }
            }
        }
        extendedKeyUsages = extendedKeyUsagesDecoded0
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let renewalEligibilityDecoded = try containerValues.decodeIfPresent(AcmClientTypes.RenewalEligibility.self, forKey: .renewalEligibility)
        renewalEligibility = renewalEligibilityDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(AcmClientTypes.CertificateOptions.self, forKey: .options)
        options = optionsDecoded
    }
}

extension AcmClientTypes.CertificateDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateDetail(certificateArn: \(Swift.String(describing: certificateArn)), certificateAuthorityArn: \(Swift.String(describing: certificateAuthorityArn)), createdAt: \(Swift.String(describing: createdAt)), domainName: \(Swift.String(describing: domainName)), domainValidationOptions: \(Swift.String(describing: domainValidationOptions)), extendedKeyUsages: \(Swift.String(describing: extendedKeyUsages)), failureReason: \(Swift.String(describing: failureReason)), importedAt: \(Swift.String(describing: importedAt)), inUseBy: \(Swift.String(describing: inUseBy)), issuedAt: \(Swift.String(describing: issuedAt)), issuer: \(Swift.String(describing: issuer)), keyAlgorithm: \(Swift.String(describing: keyAlgorithm)), keyUsages: \(Swift.String(describing: keyUsages)), notAfter: \(Swift.String(describing: notAfter)), notBefore: \(Swift.String(describing: notBefore)), options: \(Swift.String(describing: options)), renewalEligibility: \(Swift.String(describing: renewalEligibility)), renewalSummary: \(Swift.String(describing: renewalSummary)), revocationReason: \(Swift.String(describing: revocationReason)), revokedAt: \(Swift.String(describing: revokedAt)), serial: \(Swift.String(describing: serial)), signatureAlgorithm: \(Swift.String(describing: signatureAlgorithm)), status: \(Swift.String(describing: status)), subject: \(Swift.String(describing: subject)), subjectAlternativeNames: \(Swift.String(describing: subjectAlternativeNames)), type: \(Swift.String(describing: type)))"}
}

extension AcmClientTypes {
    /// <p>Contains metadata about an ACM certificate. This structure is returned in the response
    ///       to a <a>DescribeCertificate</a> request. </p>
    public struct CertificateDetail: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the certificate. For more information about ARNs, see
        ///         <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
        ///       the <i>AWS General Reference</i>.</p>
        public let certificateArn: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the ACM PCA private certificate authority (CA) that issued
        ///       the certificate. This has the following format: </p>
        ///          <p>
        ///             <code>arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012</code>
        ///          </p>
        public let certificateAuthorityArn: Swift.String?
        /// <p>The time at which the certificate was requested.</p>
        public let createdAt: ClientRuntime.Date?
        /// <p>The fully qualified domain name for the certificate, such as www.example.com or
        ///       example.com.</p>
        public let domainName: Swift.String?
        /// <p>Contains information about the initial validation of each domain name that occurs as a
        ///       result of the <a>RequestCertificate</a> request. This field exists only when the
        ///       certificate type is <code>AMAZON_ISSUED</code>. </p>
        public let domainValidationOptions: [AcmClientTypes.DomainValidation]?
        /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a
        ///       purpose for which the certificate public key can be used and consists of a name and an object
        ///       identifier (OID). </p>
        public let extendedKeyUsages: [AcmClientTypes.ExtendedKeyUsage]?
        /// <p>The reason the certificate request failed. This value exists only when the certificate
        ///       status is <code>FAILED</code>. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting.html#troubleshooting-failed">Certificate Request
        ///         Failed</a> in the <i>AWS Certificate Manager User Guide</i>. </p>
        public let failureReason: AcmClientTypes.FailureReason?
        /// <p>The date and time at which the certificate was imported. This value exists only when the
        ///       certificate type is <code>IMPORTED</code>. </p>
        public let importedAt: ClientRuntime.Date?
        /// <p>A list of ARNs for the AWS resources that are using the certificate. A certificate can
        ///       be used by multiple AWS resources. </p>
        public let inUseBy: [Swift.String]?
        /// <p>The time at which the certificate was issued. This value exists only when the certificate
        ///       type is <code>AMAZON_ISSUED</code>. </p>
        public let issuedAt: ClientRuntime.Date?
        /// <p>The name of the certificate authority that issued and signed the certificate.</p>
        public let issuer: Swift.String?
        /// <p>The algorithm that was used to generate the public-private key pair.</p>
        public let keyAlgorithm: AcmClientTypes.KeyAlgorithm?
        /// <p>A list of Key Usage X.509 v3 extension objects. Each object is a string value that
        ///       identifies the purpose of the public key contained in the certificate. Possible extension
        ///       values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.</p>
        public let keyUsages: [AcmClientTypes.KeyUsage]?
        /// <p>The time after which the certificate is not valid.</p>
        public let notAfter: ClientRuntime.Date?
        /// <p>The time before which the certificate is not valid.</p>
        public let notBefore: ClientRuntime.Date?
        /// <p>Value that specifies whether to add the certificate to a transparency log. Certificate
        ///       transparency makes it possible to detect SSL certificates that have been mistakenly or
        ///       maliciously issued. A browser might respond to certificate that has not been logged by showing
        ///       an error message. The logs are cryptographically secure. </p>
        public let options: AcmClientTypes.CertificateOptions?
        /// <p>Specifies whether the certificate is eligible for renewal. At this time, only exported
        ///       private certificates can be renewed with the <a>RenewCertificate</a>
        ///       command.</p>
        public let renewalEligibility: AcmClientTypes.RenewalEligibility?
        /// <p>Contains information about the status of ACM's <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for the certificate. This field
        ///       exists only when the certificate type is <code>AMAZON_ISSUED</code>.</p>
        public let renewalSummary: AcmClientTypes.RenewalSummary?
        /// <p>The reason the certificate was revoked. This value exists only when the certificate status
        ///       is <code>REVOKED</code>. </p>
        public let revocationReason: AcmClientTypes.RevocationReason?
        /// <p>The time at which the certificate was revoked. This value exists only when the certificate
        ///       status is <code>REVOKED</code>. </p>
        public let revokedAt: ClientRuntime.Date?
        /// <p>The serial number of the certificate.</p>
        public let serial: Swift.String?
        /// <p>The algorithm that was used to sign the certificate.</p>
        public let signatureAlgorithm: Swift.String?
        /// <p>The status of the certificate.</p>
        public let status: AcmClientTypes.CertificateStatus?
        /// <p>The name of the entity that is associated with the public key contained in the
        ///       certificate.</p>
        public let subject: Swift.String?
        /// <p>One or more domain names (subject alternative names) included in the certificate. This
        ///       list contains the domain names that are bound to the public key that is contained in the
        ///       certificate. The subject alternative names include the canonical domain name (CN) of the
        ///       certificate and additional domain names that can be used to connect to the website. </p>
        public let subjectAlternativeNames: [Swift.String]?
        /// <p>The source of the certificate. For certificates provided by ACM, this value is
        ///         <code>AMAZON_ISSUED</code>. For certificates that you imported with <a>ImportCertificate</a>, this value is <code>IMPORTED</code>. ACM does not provide
        ///         <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for
        ///       imported certificates. For more information about the differences between certificates that
        ///       you import and those that ACM provides, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing Certificates</a> in the
        ///         <i>AWS Certificate Manager User Guide</i>. </p>
        public let type: AcmClientTypes.CertificateType?

        public init (
            certificateArn: Swift.String? = nil,
            certificateAuthorityArn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            domainName: Swift.String? = nil,
            domainValidationOptions: [AcmClientTypes.DomainValidation]? = nil,
            extendedKeyUsages: [AcmClientTypes.ExtendedKeyUsage]? = nil,
            failureReason: AcmClientTypes.FailureReason? = nil,
            importedAt: ClientRuntime.Date? = nil,
            inUseBy: [Swift.String]? = nil,
            issuedAt: ClientRuntime.Date? = nil,
            issuer: Swift.String? = nil,
            keyAlgorithm: AcmClientTypes.KeyAlgorithm? = nil,
            keyUsages: [AcmClientTypes.KeyUsage]? = nil,
            notAfter: ClientRuntime.Date? = nil,
            notBefore: ClientRuntime.Date? = nil,
            options: AcmClientTypes.CertificateOptions? = nil,
            renewalEligibility: AcmClientTypes.RenewalEligibility? = nil,
            renewalSummary: AcmClientTypes.RenewalSummary? = nil,
            revocationReason: AcmClientTypes.RevocationReason? = nil,
            revokedAt: ClientRuntime.Date? = nil,
            serial: Swift.String? = nil,
            signatureAlgorithm: Swift.String? = nil,
            status: AcmClientTypes.CertificateStatus? = nil,
            subject: Swift.String? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            type: AcmClientTypes.CertificateType? = nil
        )
        {
            self.certificateArn = certificateArn
            self.certificateAuthorityArn = certificateAuthorityArn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationOptions = domainValidationOptions
            self.extendedKeyUsages = extendedKeyUsages
            self.failureReason = failureReason
            self.importedAt = importedAt
            self.inUseBy = inUseBy
            self.issuedAt = issuedAt
            self.issuer = issuer
            self.keyAlgorithm = keyAlgorithm
            self.keyUsages = keyUsages
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.options = options
            self.renewalEligibility = renewalEligibility
            self.renewalSummary = renewalSummary
            self.revocationReason = revocationReason
            self.revokedAt = revokedAt
            self.serial = serial
            self.signatureAlgorithm = signatureAlgorithm
            self.status = status
            self.subject = subject
            self.subjectAlternativeNames = subjectAlternativeNames
            self.type = type
        }
    }

}

extension AcmClientTypes.CertificateOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateTransparencyLoggingPreference = "CertificateTransparencyLoggingPreference"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateTransparencyLoggingPreference = certificateTransparencyLoggingPreference {
            try encodeContainer.encode(certificateTransparencyLoggingPreference.rawValue, forKey: .certificateTransparencyLoggingPreference)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateTransparencyLoggingPreferenceDecoded = try containerValues.decodeIfPresent(AcmClientTypes.CertificateTransparencyLoggingPreference.self, forKey: .certificateTransparencyLoggingPreference)
        certificateTransparencyLoggingPreference = certificateTransparencyLoggingPreferenceDecoded
    }
}

extension AcmClientTypes.CertificateOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateOptions(certificateTransparencyLoggingPreference: \(Swift.String(describing: certificateTransparencyLoggingPreference)))"}
}

extension AcmClientTypes {
    /// <p>Structure that contains options for your certificate. Currently, you can use this only to
    ///       specify whether to opt in to or out of certificate transparency logging. Some browsers require
    ///       that public certificates issued for your domain be recorded in a log. Certificates that are
    ///       not logged typically generate a browser error. Transparency makes it possible for you to
    ///       detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain.
    ///       For general information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency">Certificate Transparency
    ///         Logging</a>. </p>
    public struct CertificateOptions: Swift.Equatable {
        /// <p>You can opt out of certificate transparency logging by specifying the
        ///         <code>DISABLED</code> option. Opt in by specifying <code>ENABLED</code>. </p>
        public let certificateTransparencyLoggingPreference: AcmClientTypes.CertificateTransparencyLoggingPreference?

        public init (
            certificateTransparencyLoggingPreference: AcmClientTypes.CertificateTransparencyLoggingPreference? = nil
        )
        {
            self.certificateTransparencyLoggingPreference = certificateTransparencyLoggingPreference
        }
    }

}

extension AcmClientTypes {
    public enum CertificateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case expired
        case failed
        case inactive
        case issued
        case pendingValidation
        case revoked
        case validationTimedOut
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateStatus] {
            return [
                .expired,
                .failed,
                .inactive,
                .issued,
                .pendingValidation,
                .revoked,
                .validationTimedOut,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .expired: return "EXPIRED"
            case .failed: return "FAILED"
            case .inactive: return "INACTIVE"
            case .issued: return "ISSUED"
            case .pendingValidation: return "PENDING_VALIDATION"
            case .revoked: return "REVOKED"
            case .validationTimedOut: return "VALIDATION_TIMED_OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateStatus(rawValue: rawValue) ?? CertificateStatus.sdkUnknown(rawValue)
        }
    }
}

extension AcmClientTypes.CertificateSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case domainName = "DomainName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
    }
}

extension AcmClientTypes.CertificateSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CertificateSummary(certificateArn: \(Swift.String(describing: certificateArn)), domainName: \(Swift.String(describing: domainName)))"}
}

extension AcmClientTypes {
    /// <p>This structure is returned in the response object of <a>ListCertificates</a>
    ///       action. </p>
    public struct CertificateSummary: Swift.Equatable {
        /// <p>Amazon Resource Name (ARN) of the certificate. This is of the form:</p>
        ///
        ///          <p>
        ///             <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
        ///          </p>
        ///
        ///          <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
        public let certificateArn: Swift.String?
        /// <p>Fully qualified domain name (FQDN), such as www.example.com or example.com, for the
        ///       certificate.</p>
        public let domainName: Swift.String?

        public init (
            certificateArn: Swift.String? = nil,
            domainName: Swift.String? = nil
        )
        {
            self.certificateArn = certificateArn
            self.domainName = domainName
        }
    }

}

extension AcmClientTypes {
    public enum CertificateTransparencyLoggingPreference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateTransparencyLoggingPreference] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateTransparencyLoggingPreference(rawValue: rawValue) ?? CertificateTransparencyLoggingPreference.sdkUnknown(rawValue)
        }
    }
}

extension AcmClientTypes {
    public enum CertificateType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case amazonIssued
        case imported
        case `private`
        case sdkUnknown(Swift.String)

        public static var allCases: [CertificateType] {
            return [
                .amazonIssued,
                .imported,
                .private,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amazonIssued: return "AMAZON_ISSUED"
            case .imported: return "IMPORTED"
            case .private: return "PRIVATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CertificateType(rawValue: rawValue) ?? CertificateType.sdkUnknown(rawValue)
        }
    }
}

extension ConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictException(message: \(Swift.String(describing: message)))"}
}

extension ConflictException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You are trying to
///       update a resource or configuration that is already being created or updated. Wait for the
///       previous operation to finish and try again.</p>
public struct ConflictException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct DeleteCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCertificateOutputError>
}

extension DeleteCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCertificateInput(certificateArn: \(Swift.String(describing: certificateArn)))"}
}

extension DeleteCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
    }
}

public struct DeleteCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCertificateOutputError>
}

public struct DeleteCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCertificateOutputError>
}

public struct DeleteCertificateInput: Swift.Equatable {
    /// <p>String that contains the ARN of the ACM certificate to be deleted. This must be of the
    ///       form:</p>
    ///          <p>
    ///             <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    ///          <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    public let certificateArn: Swift.String?

    public init (
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

struct DeleteCertificateInputBody: Swift.Equatable {
    public let certificateArn: Swift.String?
}

extension DeleteCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}

extension DeleteCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceInUseException" : self = .resourceInUseException(try ResourceInUseException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCertificateOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case resourceInUseException(ResourceInUseException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCertificateOutputResponse()"}
}

extension DeleteCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteCertificateOutputResponseBody: Swift.Equatable {
}

extension DeleteCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCertificateOutputError>
}

extension DescribeCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCertificateInput(certificateArn: \(Swift.String(describing: certificateArn)))"}
}

extension DescribeCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
    }
}

public struct DescribeCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCertificateOutputError>
}

public struct DescribeCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeCertificateOutputError>
}

public struct DescribeCertificateInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the ACM certificate. The ARN must have the following
    ///       form:</p>
    ///          <p>
    ///             <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    ///          <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    public let certificateArn: Swift.String?

    public init (
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

struct DescribeCertificateInputBody: Swift.Equatable {
    public let certificateArn: Swift.String?
}

extension DescribeCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}

extension DescribeCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeCertificateOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeCertificateOutputResponse(certificate: \(Swift.String(describing: certificate)))"}
}

extension DescribeCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificate = output.certificate
        } else {
            self.certificate = nil
        }
    }
}

public struct DescribeCertificateOutputResponse: Swift.Equatable {
    /// <p>Metadata about an ACM certificate.</p>
    public let certificate: AcmClientTypes.CertificateDetail?

    public init (
        certificate: AcmClientTypes.CertificateDetail? = nil
    )
    {
        self.certificate = certificate
    }
}

struct DescribeCertificateOutputResponseBody: Swift.Equatable {
    public let certificate: AcmClientTypes.CertificateDetail?
}

extension DescribeCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate = "Certificate"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDecoded = try containerValues.decodeIfPresent(AcmClientTypes.CertificateDetail.self, forKey: .certificate)
        certificate = certificateDecoded
    }
}

extension AcmClientTypes {
    public enum DomainStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pendingValidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainStatus] {
            return [
                .failed,
                .pendingValidation,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingValidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DomainStatus(rawValue: rawValue) ?? DomainStatus.sdkUnknown(rawValue)
        }
    }
}

extension AcmClientTypes.DomainValidation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case resourceRecord = "ResourceRecord"
        case validationDomain = "ValidationDomain"
        case validationEmails = "ValidationEmails"
        case validationMethod = "ValidationMethod"
        case validationStatus = "ValidationStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let resourceRecord = resourceRecord {
            try encodeContainer.encode(resourceRecord, forKey: .resourceRecord)
        }
        if let validationDomain = validationDomain {
            try encodeContainer.encode(validationDomain, forKey: .validationDomain)
        }
        if let validationEmails = validationEmails {
            var validationEmailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validationEmails)
            for validationemaillist0 in validationEmails {
                try validationEmailsContainer.encode(validationemaillist0)
            }
        }
        if let validationMethod = validationMethod {
            try encodeContainer.encode(validationMethod.rawValue, forKey: .validationMethod)
        }
        if let validationStatus = validationStatus {
            try encodeContainer.encode(validationStatus.rawValue, forKey: .validationStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let validationEmailsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .validationEmails)
        var validationEmailsDecoded0:[Swift.String]? = nil
        if let validationEmailsContainer = validationEmailsContainer {
            validationEmailsDecoded0 = [Swift.String]()
            for string0 in validationEmailsContainer {
                if let string0 = string0 {
                    validationEmailsDecoded0?.append(string0)
                }
            }
        }
        validationEmails = validationEmailsDecoded0
        let validationDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationDomain)
        validationDomain = validationDomainDecoded
        let validationStatusDecoded = try containerValues.decodeIfPresent(AcmClientTypes.DomainStatus.self, forKey: .validationStatus)
        validationStatus = validationStatusDecoded
        let resourceRecordDecoded = try containerValues.decodeIfPresent(AcmClientTypes.ResourceRecord.self, forKey: .resourceRecord)
        resourceRecord = resourceRecordDecoded
        let validationMethodDecoded = try containerValues.decodeIfPresent(AcmClientTypes.ValidationMethod.self, forKey: .validationMethod)
        validationMethod = validationMethodDecoded
    }
}

extension AcmClientTypes.DomainValidation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainValidation(domainName: \(Swift.String(describing: domainName)), resourceRecord: \(Swift.String(describing: resourceRecord)), validationDomain: \(Swift.String(describing: validationDomain)), validationEmails: \(Swift.String(describing: validationEmails)), validationMethod: \(Swift.String(describing: validationMethod)), validationStatus: \(Swift.String(describing: validationStatus)))"}
}

extension AcmClientTypes {
    /// <p>Contains information about the validation of each domain name in the certificate.</p>
    public struct DomainValidation: Swift.Equatable {
        /// <p>A fully qualified domain name (FQDN) in the certificate. For example,
        ///         <code>www.example.com</code> or <code>example.com</code>. </p>
        public let domainName: Swift.String?
        /// <p>Contains the CNAME record that you add to your DNS database for domain validation. For
        ///       more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html">Use DNS to Validate Domain Ownership</a>.</p>
        ///          <p>Note: The CNAME information that you need does not include the name of your domain. If you
        ///       include  your domain name in the DNS database CNAME record, validation fails.  For example, if
        ///       the name is "_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com", only
        ///       "_a79865eb4cd1a6ab990a45779b4e0b96" must be used.</p>
        public let resourceRecord: AcmClientTypes.ResourceRecord?
        /// <p>The domain name that ACM used to send domain validation emails.</p>
        public let validationDomain: Swift.String?
        /// <p>A list of email addresses that ACM used to send domain validation emails.</p>
        public let validationEmails: [Swift.String]?
        /// <p>Specifies the domain validation method.</p>
        public let validationMethod: AcmClientTypes.ValidationMethod?
        /// <p>The validation status of the domain name. This can be one of the following values:</p>
        ///
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>PENDING_VALIDATION</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code></code>SUCCESS</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code></code>FAILED</p>
        ///             </li>
        ///          </ul>
        public let validationStatus: AcmClientTypes.DomainStatus?

        public init (
            domainName: Swift.String? = nil,
            resourceRecord: AcmClientTypes.ResourceRecord? = nil,
            validationDomain: Swift.String? = nil,
            validationEmails: [Swift.String]? = nil,
            validationMethod: AcmClientTypes.ValidationMethod? = nil,
            validationStatus: AcmClientTypes.DomainStatus? = nil
        )
        {
            self.domainName = domainName
            self.resourceRecord = resourceRecord
            self.validationDomain = validationDomain
            self.validationEmails = validationEmails
            self.validationMethod = validationMethod
            self.validationStatus = validationStatus
        }
    }

}

extension AcmClientTypes.DomainValidationOption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case validationDomain = "ValidationDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let validationDomain = validationDomain {
            try encodeContainer.encode(validationDomain, forKey: .validationDomain)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let validationDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationDomain)
        validationDomain = validationDomainDecoded
    }
}

extension AcmClientTypes.DomainValidationOption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DomainValidationOption(domainName: \(Swift.String(describing: domainName)), validationDomain: \(Swift.String(describing: validationDomain)))"}
}

extension AcmClientTypes {
    /// <p>Contains information about the domain names that you want ACM to use to send you emails
    ///       that enable you to validate domain ownership.</p>
    public struct DomainValidationOption: Swift.Equatable {
        /// <p>A fully qualified domain name (FQDN) in the certificate request.</p>
        public let domainName: Swift.String?
        /// <p>The domain name that you want ACM to use to send you validation emails. This domain name
        ///       is the suffix of the email addresses that you want ACM to use. This must be the same as the
        ///         <code>DomainName</code> value or a superdomain of the <code>DomainName</code> value. For
        ///       example, if you request a certificate for <code>testing.example.com</code>, you can specify
        ///         <code>example.com</code> for this value. In that case, ACM sends domain validation emails
        ///       to the following five addresses:</p>
        ///          <ul>
        ///             <li>
        ///                <p>admin@example.com</p>
        ///             </li>
        ///             <li>
        ///                <p>administrator@example.com</p>
        ///             </li>
        ///             <li>
        ///                <p>hostmaster@example.com</p>
        ///             </li>
        ///             <li>
        ///                <p>postmaster@example.com</p>
        ///             </li>
        ///             <li>
        ///                <p>webmaster@example.com</p>
        ///             </li>
        ///          </ul>
        public let validationDomain: Swift.String?

        public init (
            domainName: Swift.String? = nil,
            validationDomain: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.validationDomain = validationDomain
        }
    }

}

extension AcmClientTypes.ExpiryEventsConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case daysBeforeExpiry = "DaysBeforeExpiry"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let daysBeforeExpiry = daysBeforeExpiry {
            try encodeContainer.encode(daysBeforeExpiry, forKey: .daysBeforeExpiry)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let daysBeforeExpiryDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .daysBeforeExpiry)
        daysBeforeExpiry = daysBeforeExpiryDecoded
    }
}

extension AcmClientTypes.ExpiryEventsConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExpiryEventsConfiguration(daysBeforeExpiry: \(Swift.String(describing: daysBeforeExpiry)))"}
}

extension AcmClientTypes {
    /// <p>Object containing
    ///       expiration events options associated with an AWS account.</p>
    public struct ExpiryEventsConfiguration: Swift.Equatable {
        /// <p>Specifies the number of days prior to certificate expiration when ACM starts generating
        ///         <code>EventBridge</code> events. ACM sends one event per day per certificate until the
        ///       certificate expires. By default, accounts receive events starting 45 days before certificate
        ///       expiration.</p>
        public let daysBeforeExpiry: Swift.Int?

        public init (
            daysBeforeExpiry: Swift.Int? = nil
        )
        {
            self.daysBeforeExpiry = daysBeforeExpiry
        }
    }

}

public struct ExportCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportCertificateOutputError>
}

extension ExportCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportCertificateInput(certificateArn: \(Swift.String(describing: certificateArn)), passphrase: \(Swift.String(describing: passphrase)))"}
}

extension ExportCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case passphrase = "Passphrase"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let passphrase = passphrase {
            try encodeContainer.encode(passphrase.base64EncodedString(), forKey: .passphrase)
        }
    }
}

public struct ExportCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportCertificateOutputError>
}

public struct ExportCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportCertificateOutputError>
}

public struct ExportCertificateInput: Swift.Equatable {
    /// <p>An Amazon Resource Name (ARN) of the issued certificate. This must be of the form:</p>
    ///          <p>
    ///             <code>arn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    public let certificateArn: Swift.String?
    /// <p>Passphrase to associate with the encrypted exported private key. If you want to later
    ///       decrypt the private key, you must have the passphrase. You can use the following OpenSSL
    ///       command to decrypt a private key: </p>
    ///          <p>
    ///             <code>openssl rsa -in encrypted_key.pem -out decrypted_key.pem</code>
    ///          </p>
    public let passphrase: ClientRuntime.Data?

    public init (
        certificateArn: Swift.String? = nil,
        passphrase: ClientRuntime.Data? = nil
    )
    {
        self.certificateArn = certificateArn
        self.passphrase = passphrase
    }
}

struct ExportCertificateInputBody: Swift.Equatable {
    public let certificateArn: Swift.String?
    public let passphrase: ClientRuntime.Data?
}

extension ExportCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case passphrase = "Passphrase"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let passphraseDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .passphrase)
        passphrase = passphraseDecoded
    }
}

extension ExportCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestInProgressException" : self = .requestInProgressException(try RequestInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExportCertificateOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case requestInProgressException(RequestInProgressException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportCertificateOutputResponse(certificate: \(Swift.String(describing: certificate)), certificateChain: \(Swift.String(describing: certificateChain)), privateKey: \(Swift.String(describing: privateKey)))"}
}

extension ExportCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ExportCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificate = output.certificate
            self.certificateChain = output.certificateChain
            self.privateKey = output.privateKey
        } else {
            self.certificate = nil
            self.certificateChain = nil
            self.privateKey = nil
        }
    }
}

public struct ExportCertificateOutputResponse: Swift.Equatable {
    /// <p>The base64 PEM-encoded certificate.</p>
    public let certificate: Swift.String?
    /// <p>The base64 PEM-encoded certificate chain. This does not include the certificate that you
    ///       are exporting.</p>
    public let certificateChain: Swift.String?
    /// <p>The encrypted private key associated with the public key in the certificate. The key is
    ///       output in PKCS #8 format and is base64 PEM-encoded. </p>
    public let privateKey: Swift.String?

    public init (
        certificate: Swift.String? = nil,
        certificateChain: Swift.String? = nil,
        privateKey: Swift.String? = nil
    )
    {
        self.certificate = certificate
        self.certificateChain = certificateChain
        self.privateKey = privateKey
    }
}

struct ExportCertificateOutputResponseBody: Swift.Equatable {
    public let certificate: Swift.String?
    public let certificateChain: Swift.String?
    public let privateKey: Swift.String?
}

extension ExportCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate = "Certificate"
        case certificateChain = "CertificateChain"
        case privateKey = "PrivateKey"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let certificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
    }
}

extension AcmClientTypes.ExtendedKeyUsage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case oID = "OID"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let oID = oID {
            try encodeContainer.encode(oID, forKey: .oID)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(AcmClientTypes.ExtendedKeyUsageName.self, forKey: .name)
        name = nameDecoded
        let oIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .oID)
        oID = oIDDecoded
    }
}

extension AcmClientTypes.ExtendedKeyUsage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExtendedKeyUsage(name: \(Swift.String(describing: name)), oID: \(Swift.String(describing: oID)))"}
}

extension AcmClientTypes {
    /// <p>The Extended Key Usage X.509 v3 extension defines one or more purposes for which the
    ///       public key can be used. This is in addition to or in place of the basic purposes specified by
    ///       the Key Usage extension. </p>
    public struct ExtendedKeyUsage: Swift.Equatable {
        /// <p>The name of an Extended Key Usage value.</p>
        public let name: AcmClientTypes.ExtendedKeyUsageName?
        /// <p>An object identifier (OID) for the extension value. OIDs are strings of numbers separated
        ///       by periods. The following OIDs are defined in RFC 3280 and RFC 5280. </p>
        ///
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>1.3.6.1.5.5.7.3.1 (TLS_WEB_SERVER_AUTHENTICATION)</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>1.3.6.1.5.5.7.3.2 (TLS_WEB_CLIENT_AUTHENTICATION)</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>1.3.6.1.5.5.7.3.3 (CODE_SIGNING)</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>1.3.6.1.5.5.7.3.8 (TIME_STAMPING)</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>1.3.6.1.5.5.7.3.7 (IPSEC_USER)</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let oID: Swift.String?

        public init (
            name: AcmClientTypes.ExtendedKeyUsageName? = nil,
            oID: Swift.String? = nil
        )
        {
            self.name = name
            self.oID = oID
        }
    }

}

extension AcmClientTypes {
    public enum ExtendedKeyUsageName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case any
        case codeSigning
        case custom
        case emailProtection
        case ipsecEndSystem
        case ipsecTunnel
        case ipsecUser
        case `none`
        case ocspSigning
        case timeStamping
        case tlsWebClientAuthentication
        case tlsWebServerAuthentication
        case sdkUnknown(Swift.String)

        public static var allCases: [ExtendedKeyUsageName] {
            return [
                .any,
                .codeSigning,
                .custom,
                .emailProtection,
                .ipsecEndSystem,
                .ipsecTunnel,
                .ipsecUser,
                .none,
                .ocspSigning,
                .timeStamping,
                .tlsWebClientAuthentication,
                .tlsWebServerAuthentication,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .any: return "ANY"
            case .codeSigning: return "CODE_SIGNING"
            case .custom: return "CUSTOM"
            case .emailProtection: return "EMAIL_PROTECTION"
            case .ipsecEndSystem: return "IPSEC_END_SYSTEM"
            case .ipsecTunnel: return "IPSEC_TUNNEL"
            case .ipsecUser: return "IPSEC_USER"
            case .none: return "NONE"
            case .ocspSigning: return "OCSP_SIGNING"
            case .timeStamping: return "TIME_STAMPING"
            case .tlsWebClientAuthentication: return "TLS_WEB_CLIENT_AUTHENTICATION"
            case .tlsWebServerAuthentication: return "TLS_WEB_SERVER_AUTHENTICATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExtendedKeyUsageName(rawValue: rawValue) ?? ExtendedKeyUsageName.sdkUnknown(rawValue)
        }
    }
}

extension AcmClientTypes {
    public enum FailureReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case additionalVerificationRequired
        case caaError
        case domainNotAllowed
        case domainValidationDenied
        case invalidPublicDomain
        case noAvailableContacts
        case other
        case pcaAccessDenied
        case pcaInvalidArgs
        case pcaInvalidArn
        case pcaInvalidDuration
        case pcaInvalidState
        case pcaLimitExceeded
        case pcaNameConstraintsValidation
        case pcaRequestFailed
        case pcaResourceNotFound
        case slrNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [FailureReason] {
            return [
                .additionalVerificationRequired,
                .caaError,
                .domainNotAllowed,
                .domainValidationDenied,
                .invalidPublicDomain,
                .noAvailableContacts,
                .other,
                .pcaAccessDenied,
                .pcaInvalidArgs,
                .pcaInvalidArn,
                .pcaInvalidDuration,
                .pcaInvalidState,
                .pcaLimitExceeded,
                .pcaNameConstraintsValidation,
                .pcaRequestFailed,
                .pcaResourceNotFound,
                .slrNotFound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .additionalVerificationRequired: return "ADDITIONAL_VERIFICATION_REQUIRED"
            case .caaError: return "CAA_ERROR"
            case .domainNotAllowed: return "DOMAIN_NOT_ALLOWED"
            case .domainValidationDenied: return "DOMAIN_VALIDATION_DENIED"
            case .invalidPublicDomain: return "INVALID_PUBLIC_DOMAIN"
            case .noAvailableContacts: return "NO_AVAILABLE_CONTACTS"
            case .other: return "OTHER"
            case .pcaAccessDenied: return "PCA_ACCESS_DENIED"
            case .pcaInvalidArgs: return "PCA_INVALID_ARGS"
            case .pcaInvalidArn: return "PCA_INVALID_ARN"
            case .pcaInvalidDuration: return "PCA_INVALID_DURATION"
            case .pcaInvalidState: return "PCA_INVALID_STATE"
            case .pcaLimitExceeded: return "PCA_LIMIT_EXCEEDED"
            case .pcaNameConstraintsValidation: return "PCA_NAME_CONSTRAINTS_VALIDATION"
            case .pcaRequestFailed: return "PCA_REQUEST_FAILED"
            case .pcaResourceNotFound: return "PCA_RESOURCE_NOT_FOUND"
            case .slrNotFound: return "SLR_NOT_FOUND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FailureReason(rawValue: rawValue) ?? FailureReason.sdkUnknown(rawValue)
        }
    }
}

extension AcmClientTypes.Filters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case extendedKeyUsage
        case keyTypes
        case keyUsage
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let extendedKeyUsage = extendedKeyUsage {
            var extendedKeyUsageContainer = encodeContainer.nestedUnkeyedContainer(forKey: .extendedKeyUsage)
            for extendedkeyusagefilterlist0 in extendedKeyUsage {
                try extendedKeyUsageContainer.encode(extendedkeyusagefilterlist0.rawValue)
            }
        }
        if let keyTypes = keyTypes {
            var keyTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keyTypes)
            for keyalgorithmlist0 in keyTypes {
                try keyTypesContainer.encode(keyalgorithmlist0.rawValue)
            }
        }
        if let keyUsage = keyUsage {
            var keyUsageContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keyUsage)
            for keyusagefilterlist0 in keyUsage {
                try keyUsageContainer.encode(keyusagefilterlist0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let extendedKeyUsageContainer = try containerValues.decodeIfPresent([AcmClientTypes.ExtendedKeyUsageName?].self, forKey: .extendedKeyUsage)
        var extendedKeyUsageDecoded0:[AcmClientTypes.ExtendedKeyUsageName]? = nil
        if let extendedKeyUsageContainer = extendedKeyUsageContainer {
            extendedKeyUsageDecoded0 = [AcmClientTypes.ExtendedKeyUsageName]()
            for string0 in extendedKeyUsageContainer {
                if let string0 = string0 {
                    extendedKeyUsageDecoded0?.append(string0)
                }
            }
        }
        extendedKeyUsage = extendedKeyUsageDecoded0
        let keyUsageContainer = try containerValues.decodeIfPresent([AcmClientTypes.KeyUsageName?].self, forKey: .keyUsage)
        var keyUsageDecoded0:[AcmClientTypes.KeyUsageName]? = nil
        if let keyUsageContainer = keyUsageContainer {
            keyUsageDecoded0 = [AcmClientTypes.KeyUsageName]()
            for string0 in keyUsageContainer {
                if let string0 = string0 {
                    keyUsageDecoded0?.append(string0)
                }
            }
        }
        keyUsage = keyUsageDecoded0
        let keyTypesContainer = try containerValues.decodeIfPresent([AcmClientTypes.KeyAlgorithm?].self, forKey: .keyTypes)
        var keyTypesDecoded0:[AcmClientTypes.KeyAlgorithm]? = nil
        if let keyTypesContainer = keyTypesContainer {
            keyTypesDecoded0 = [AcmClientTypes.KeyAlgorithm]()
            for string0 in keyTypesContainer {
                if let string0 = string0 {
                    keyTypesDecoded0?.append(string0)
                }
            }
        }
        keyTypes = keyTypesDecoded0
    }
}

extension AcmClientTypes.Filters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Filters(extendedKeyUsage: \(Swift.String(describing: extendedKeyUsage)), keyTypes: \(Swift.String(describing: keyTypes)), keyUsage: \(Swift.String(describing: keyUsage)))"}
}

extension AcmClientTypes {
    /// <p>This structure can be used in the <a>ListCertificates</a> action to filter the
    ///       output of the certificate list. </p>
    public struct Filters: Swift.Equatable {
        /// <p>Specify one or more <a>ExtendedKeyUsage</a> extension values.</p>
        public let extendedKeyUsage: [AcmClientTypes.ExtendedKeyUsageName]?
        /// <p>Specify one or more algorithms that can be used to generate key pairs.</p>
        ///          <p>Default filtering returns only <code>RSA_1024</code> and <code>RSA_2048</code>
        ///       certificates that have at least one domain. To return other certificate types, provide the
        ///       desired type signatures in a comma-separated list. For example, <code>"keyTypes":
        ///         ["RSA_2048,RSA_4096"]</code> returns both <code>RSA_2048</code> and <code>RSA_4096</code>
        ///       certificates.</p>
        public let keyTypes: [AcmClientTypes.KeyAlgorithm]?
        /// <p>Specify one or more <a>KeyUsage</a> extension values.</p>
        public let keyUsage: [AcmClientTypes.KeyUsageName]?

        public init (
            extendedKeyUsage: [AcmClientTypes.ExtendedKeyUsageName]? = nil,
            keyTypes: [AcmClientTypes.KeyAlgorithm]? = nil,
            keyUsage: [AcmClientTypes.KeyUsageName]? = nil
        )
        {
            self.extendedKeyUsage = extendedKeyUsage
            self.keyTypes = keyTypes
            self.keyUsage = keyUsage
        }
    }

}

extension GetAccountConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountConfigurationInput()"}
}

extension GetAccountConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetAccountConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAccountConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAccountConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAccountConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAccountConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAccountConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAccountConfigurationOutputError>
}

public struct GetAccountConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAccountConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAccountConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAccountConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAccountConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAccountConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAccountConfigurationOutputError>
}

public struct GetAccountConfigurationInput: Swift.Equatable {

    public init() {}
}

struct GetAccountConfigurationInputBody: Swift.Equatable {
}

extension GetAccountConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetAccountConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAccountConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAccountConfigurationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAccountConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAccountConfigurationOutputResponse(expiryEvents: \(Swift.String(describing: expiryEvents)))"}
}

extension GetAccountConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAccountConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.expiryEvents = output.expiryEvents
        } else {
            self.expiryEvents = nil
        }
    }
}

public struct GetAccountConfigurationOutputResponse: Swift.Equatable {
    /// <p>Expiration events
    ///       configuration options associated with the AWS account.</p>
    public let expiryEvents: AcmClientTypes.ExpiryEventsConfiguration?

    public init (
        expiryEvents: AcmClientTypes.ExpiryEventsConfiguration? = nil
    )
    {
        self.expiryEvents = expiryEvents
    }
}

struct GetAccountConfigurationOutputResponseBody: Swift.Equatable {
    public let expiryEvents: AcmClientTypes.ExpiryEventsConfiguration?
}

extension GetAccountConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiryEvents = "ExpiryEvents"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expiryEventsDecoded = try containerValues.decodeIfPresent(AcmClientTypes.ExpiryEventsConfiguration.self, forKey: .expiryEvents)
        expiryEvents = expiryEventsDecoded
    }
}

public struct GetCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCertificateOutputError>
}

extension GetCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCertificateInput(certificateArn: \(Swift.String(describing: certificateArn)))"}
}

extension GetCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
    }
}

public struct GetCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCertificateOutputError>
}

public struct GetCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCertificateOutputError>
}

public struct GetCertificateInput: Swift.Equatable {
    /// <p>String that contains a certificate ARN in the following format:</p>
    ///          <p>
    ///             <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    ///          <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    public let certificateArn: Swift.String?

    public init (
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

struct GetCertificateInputBody: Swift.Equatable {
    public let certificateArn: Swift.String?
}

extension GetCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}

extension GetCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "RequestInProgressException" : self = .requestInProgressException(try RequestInProgressException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCertificateOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case requestInProgressException(RequestInProgressException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCertificateOutputResponse(certificate: \(Swift.String(describing: certificate)), certificateChain: \(Swift.String(describing: certificateChain)))"}
}

extension GetCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificate = output.certificate
            self.certificateChain = output.certificateChain
        } else {
            self.certificate = nil
            self.certificateChain = nil
        }
    }
}

public struct GetCertificateOutputResponse: Swift.Equatable {
    /// <p>The ACM-issued certificate corresponding to the ARN specified as input.</p>
    public let certificate: Swift.String?
    /// <p>Certificates forming the requested certificate's chain of trust. The chain consists of the
    ///       certificate of the issuing CA and the intermediate certificates of any other subordinate CAs.
    ///     </p>
    public let certificateChain: Swift.String?

    public init (
        certificate: Swift.String? = nil,
        certificateChain: Swift.String? = nil
    )
    {
        self.certificate = certificate
        self.certificateChain = certificateChain
    }
}

struct GetCertificateOutputResponseBody: Swift.Equatable {
    public let certificate: Swift.String?
    public let certificateChain: Swift.String?
}

extension GetCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate = "Certificate"
        case certificateChain = "CertificateChain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let certificateChainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
    }
}

public struct ImportCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ImportCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ImportCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ImportCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ImportCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ImportCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ImportCertificateOutputError>
}

extension ImportCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportCertificateInput(certificate: \(Swift.String(describing: certificate)), certificateArn: \(Swift.String(describing: certificateArn)), certificateChain: \(Swift.String(describing: certificateChain)), privateKey: \(Swift.String(describing: privateKey)), tags: \(Swift.String(describing: tags)))"}
}

extension ImportCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate = "Certificate"
        case certificateArn = "CertificateArn"
        case certificateChain = "CertificateChain"
        case privateKey = "PrivateKey"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = certificate {
            try encodeContainer.encode(certificate.base64EncodedString(), forKey: .certificate)
        }
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let certificateChain = certificateChain {
            try encodeContainer.encode(certificateChain.base64EncodedString(), forKey: .certificateChain)
        }
        if let privateKey = privateKey {
            try encodeContainer.encode(privateKey.base64EncodedString(), forKey: .privateKey)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct ImportCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ImportCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ImportCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ImportCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ImportCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ImportCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ImportCertificateOutputError>
}

public struct ImportCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ImportCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ImportCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ImportCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ImportCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ImportCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ImportCertificateOutputError>
}

public struct ImportCertificateInput: Swift.Equatable {
    /// <p>The certificate to import.</p>
    public let certificate: ClientRuntime.Data?
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name
    ///         (ARN)</a> of an imported certificate to replace. To import a new certificate, omit this
    ///       field. </p>
    public let certificateArn: Swift.String?
    /// <p>The PEM encoded certificate chain.</p>
    public let certificateChain: ClientRuntime.Data?
    /// <p>The private key that matches the public key in the certificate.</p>
    public let privateKey: ClientRuntime.Data?
    /// <p>One or more resource tags to associate with the imported certificate. </p>
    ///          <p>Note: You cannot apply tags when reimporting a certificate.</p>
    public let tags: [AcmClientTypes.Tag]?

    public init (
        certificate: ClientRuntime.Data? = nil,
        certificateArn: Swift.String? = nil,
        certificateChain: ClientRuntime.Data? = nil,
        privateKey: ClientRuntime.Data? = nil,
        tags: [AcmClientTypes.Tag]? = nil
    )
    {
        self.certificate = certificate
        self.certificateArn = certificateArn
        self.certificateChain = certificateChain
        self.privateKey = privateKey
        self.tags = tags
    }
}

struct ImportCertificateInputBody: Swift.Equatable {
    public let certificateArn: Swift.String?
    public let certificate: ClientRuntime.Data?
    public let privateKey: ClientRuntime.Data?
    public let certificateChain: ClientRuntime.Data?
    public let tags: [AcmClientTypes.Tag]?
}

extension ImportCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate = "Certificate"
        case certificateArn = "CertificateArn"
        case certificateChain = "CertificateChain"
        case privateKey = "PrivateKey"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let certificateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .certificate)
        certificate = certificateDecoded
        let privateKeyDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .privateKey)
        privateKey = privateKeyDecoded
        let certificateChainDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .certificateChain)
        certificateChain = certificateChainDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AcmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[AcmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AcmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ImportCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ImportCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagPolicyException" : self = .tagPolicyException(try TagPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ImportCertificateOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case invalidParameterException(InvalidParameterException)
    case invalidTagException(InvalidTagException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tagPolicyException(TagPolicyException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ImportCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportCertificateOutputResponse(certificateArn: \(Swift.String(describing: certificateArn)))"}
}

extension ImportCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ImportCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateArn = output.certificateArn
        } else {
            self.certificateArn = nil
        }
    }
}

public struct ImportCertificateOutputResponse: Swift.Equatable {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name
    ///         (ARN)</a> of the imported certificate.</p>
    public let certificateArn: Swift.String?

    public init (
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

struct ImportCertificateOutputResponseBody: Swift.Equatable {
    public let certificateArn: Swift.String?
}

extension ImportCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}

extension InvalidArgsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidArgsException(message: \(Swift.String(describing: message)))"}
}

extension InvalidArgsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidArgsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>One or more of of request parameters specified is not valid.</p>
public struct InvalidArgsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidArgsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidArgsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidArnException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidArnException(message: \(Swift.String(describing: message)))"}
}

extension InvalidArnException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidArnExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The requested Amazon Resource Name (ARN) does not refer to an existing resource.</p>
public struct InvalidArnException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidArnExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidArnExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidDomainValidationOptionsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidDomainValidationOptionsException(message: \(Swift.String(describing: message)))"}
}

extension InvalidDomainValidationOptionsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidDomainValidationOptionsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>One or more values in the <a>DomainValidationOption</a> structure is
///       incorrect.</p>
public struct InvalidDomainValidationOptionsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidDomainValidationOptionsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidDomainValidationOptionsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidParameterException(message: \(Swift.String(describing: message)))"}
}

extension InvalidParameterException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An input parameter was invalid.</p>
public struct InvalidParameterException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidStateException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidStateException(message: \(Swift.String(describing: message)))"}
}

extension InvalidStateException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidStateExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Processing has reached an invalid state.</p>
public struct InvalidStateException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidStateExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidStateExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidTagException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidTagException(message: \(Swift.String(describing: message)))"}
}

extension InvalidTagException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidTagExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>One or both of the values that make up the key-value pair is not valid. For example, you
///       cannot specify a tag value that begins with <code>aws:</code>.</p>
public struct InvalidTagException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTagExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidTagExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AcmClientTypes {
    public enum KeyAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ecPrime256v1
        case ecSecp384r1
        case ecSecp521r1
        case rsa1024
        case rsa2048
        case rsa4096
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyAlgorithm] {
            return [
                .ecPrime256v1,
                .ecSecp384r1,
                .ecSecp521r1,
                .rsa1024,
                .rsa2048,
                .rsa4096,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ecPrime256v1: return "EC_prime256v1"
            case .ecSecp384r1: return "EC_secp384r1"
            case .ecSecp521r1: return "EC_secp521r1"
            case .rsa1024: return "RSA_1024"
            case .rsa2048: return "RSA_2048"
            case .rsa4096: return "RSA_4096"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyAlgorithm(rawValue: rawValue) ?? KeyAlgorithm.sdkUnknown(rawValue)
        }
    }
}

extension AcmClientTypes.KeyUsage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(AcmClientTypes.KeyUsageName.self, forKey: .name)
        name = nameDecoded
    }
}

extension AcmClientTypes.KeyUsage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeyUsage(name: \(Swift.String(describing: name)))"}
}

extension AcmClientTypes {
    /// <p>The Key Usage X.509 v3 extension defines the purpose of the public key contained in the
    ///       certificate.</p>
    public struct KeyUsage: Swift.Equatable {
        /// <p>A string value that contains a Key Usage extension name.</p>
        public let name: AcmClientTypes.KeyUsageName?

        public init (
            name: AcmClientTypes.KeyUsageName? = nil
        )
        {
            self.name = name
        }
    }

}

extension AcmClientTypes {
    public enum KeyUsageName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case any
        case certificateSigning
        case crlSigning
        case custom
        case dataEncipherment
        case decipherOnly
        case digitalSignature
        case enchiperOnly
        case keyAgreement
        case keyEncipherment
        case nonRepudation
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyUsageName] {
            return [
                .any,
                .certificateSigning,
                .crlSigning,
                .custom,
                .dataEncipherment,
                .decipherOnly,
                .digitalSignature,
                .enchiperOnly,
                .keyAgreement,
                .keyEncipherment,
                .nonRepudation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .any: return "ANY"
            case .certificateSigning: return "CERTIFICATE_SIGNING"
            case .crlSigning: return "CRL_SIGNING"
            case .custom: return "CUSTOM"
            case .dataEncipherment: return "DATA_ENCIPHERMENT"
            case .decipherOnly: return "DECIPHER_ONLY"
            case .digitalSignature: return "DIGITAL_SIGNATURE"
            case .enchiperOnly: return "ENCIPHER_ONLY"
            case .keyAgreement: return "KEY_AGREEMENT"
            case .keyEncipherment: return "KEY_ENCIPHERMENT"
            case .nonRepudation: return "NON_REPUDIATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyUsageName(rawValue: rawValue) ?? KeyUsageName.sdkUnknown(rawValue)
        }
    }
}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An ACM quota has been exceeded.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListCertificatesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCertificatesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCertificatesOutputError>
}

extension ListCertificatesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCertificatesInput(certificateStatuses: \(Swift.String(describing: certificateStatuses)), includes: \(Swift.String(describing: includes)), maxItems: \(Swift.String(describing: maxItems)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListCertificatesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateStatuses = "CertificateStatuses"
        case includes = "Includes"
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateStatuses = certificateStatuses {
            var certificateStatusesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .certificateStatuses)
            for certificatestatuses0 in certificateStatuses {
                try certificateStatusesContainer.encode(certificatestatuses0.rawValue)
            }
        }
        if let includes = includes {
            try encodeContainer.encode(includes, forKey: .includes)
        }
        if let maxItems = maxItems {
            try encodeContainer.encode(maxItems, forKey: .maxItems)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListCertificatesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCertificatesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCertificatesOutputError>
}

public struct ListCertificatesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCertificatesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCertificatesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCertificatesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCertificatesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCertificatesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCertificatesOutputError>
}

public struct ListCertificatesInput: Swift.Equatable {
    /// <p>Filter the certificate list by status value.</p>
    public let certificateStatuses: [AcmClientTypes.CertificateStatus]?
    /// <p>Filter the certificate list. For more information, see the <a>Filters</a>
    ///       structure.</p>
    public let includes: AcmClientTypes.Filters?
    /// <p>Use this parameter when paginating results to specify the maximum number of items to
    ///       return in the response. If additional items exist beyond the number you specify, the
    ///         <code>NextToken</code> element is sent in the response. Use this <code>NextToken</code>
    ///       value in a subsequent request to retrieve additional items.</p>
    public let maxItems: Swift.Int?
    /// <p>Use this parameter only when paginating results and only in a subsequent request after you
    ///       receive a response with truncated results. Set it to the value of <code>NextToken</code> from
    ///       the response you just received.</p>
    public let nextToken: Swift.String?

    public init (
        certificateStatuses: [AcmClientTypes.CertificateStatus]? = nil,
        includes: AcmClientTypes.Filters? = nil,
        maxItems: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.certificateStatuses = certificateStatuses
        self.includes = includes
        self.maxItems = maxItems
        self.nextToken = nextToken
    }
}

struct ListCertificatesInputBody: Swift.Equatable {
    public let certificateStatuses: [AcmClientTypes.CertificateStatus]?
    public let includes: AcmClientTypes.Filters?
    public let nextToken: Swift.String?
    public let maxItems: Swift.Int?
}

extension ListCertificatesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateStatuses = "CertificateStatuses"
        case includes = "Includes"
        case maxItems = "MaxItems"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateStatusesContainer = try containerValues.decodeIfPresent([AcmClientTypes.CertificateStatus?].self, forKey: .certificateStatuses)
        var certificateStatusesDecoded0:[AcmClientTypes.CertificateStatus]? = nil
        if let certificateStatusesContainer = certificateStatusesContainer {
            certificateStatusesDecoded0 = [AcmClientTypes.CertificateStatus]()
            for string0 in certificateStatusesContainer {
                if let string0 = string0 {
                    certificateStatusesDecoded0?.append(string0)
                }
            }
        }
        certificateStatuses = certificateStatusesDecoded0
        let includesDecoded = try containerValues.decodeIfPresent(AcmClientTypes.Filters.self, forKey: .includes)
        includes = includesDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxItemsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxItems)
        maxItems = maxItemsDecoded
    }
}

extension ListCertificatesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCertificatesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArgsException" : self = .invalidArgsException(try InvalidArgsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCertificatesOutputError: Swift.Error, Swift.Equatable {
    case invalidArgsException(InvalidArgsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCertificatesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCertificatesOutputResponse(certificateSummaryList: \(Swift.String(describing: certificateSummaryList)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListCertificatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCertificatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateSummaryList = output.certificateSummaryList
            self.nextToken = output.nextToken
        } else {
            self.certificateSummaryList = nil
            self.nextToken = nil
        }
    }
}

public struct ListCertificatesOutputResponse: Swift.Equatable {
    /// <p>A list of ACM certificates.</p>
    public let certificateSummaryList: [AcmClientTypes.CertificateSummary]?
    /// <p>When the list is truncated, this value is present and contains the value to use for the
    ///         <code>NextToken</code> parameter in a subsequent pagination request.</p>
    public let nextToken: Swift.String?

    public init (
        certificateSummaryList: [AcmClientTypes.CertificateSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.certificateSummaryList = certificateSummaryList
        self.nextToken = nextToken
    }
}

struct ListCertificatesOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let certificateSummaryList: [AcmClientTypes.CertificateSummary]?
}

extension ListCertificatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateSummaryList = "CertificateSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let certificateSummaryListContainer = try containerValues.decodeIfPresent([AcmClientTypes.CertificateSummary?].self, forKey: .certificateSummaryList)
        var certificateSummaryListDecoded0:[AcmClientTypes.CertificateSummary]? = nil
        if let certificateSummaryListContainer = certificateSummaryListContainer {
            certificateSummaryListDecoded0 = [AcmClientTypes.CertificateSummary]()
            for structure0 in certificateSummaryListContainer {
                if let structure0 = structure0 {
                    certificateSummaryListDecoded0?.append(structure0)
                }
            }
        }
        certificateSummaryList = certificateSummaryListDecoded0
    }
}

public struct ListTagsForCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForCertificateOutputError>
}

extension ListTagsForCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForCertificateInput(certificateArn: \(Swift.String(describing: certificateArn)))"}
}

extension ListTagsForCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
    }
}

public struct ListTagsForCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForCertificateOutputError>
}

public struct ListTagsForCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForCertificateOutputError>
}

public struct ListTagsForCertificateInput: Swift.Equatable {
    /// <p>String that contains the ARN of the ACM certificate for which you want to list the tags.
    ///       This must have the following form:</p>
    ///          <p>
    ///             <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    ///          <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    public let certificateArn: Swift.String?

    public init (
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

struct ListTagsForCertificateInputBody: Swift.Equatable {
    public let certificateArn: Swift.String?
}

extension ListTagsForCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}

extension ListTagsForCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForCertificateOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForCertificateOutputResponse(tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForCertificateOutputResponse: Swift.Equatable {
    /// <p>The key-value pairs that define the applied tags.</p>
    public let tags: [AcmClientTypes.Tag]?

    public init (
        tags: [AcmClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForCertificateOutputResponseBody: Swift.Equatable {
    public let tags: [AcmClientTypes.Tag]?
}

extension ListTagsForCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([AcmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[AcmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AcmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public struct PutAccountConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountConfigurationOutputError>
}

extension PutAccountConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountConfigurationInput(expiryEvents: \(Swift.String(describing: expiryEvents)), idempotencyToken: \(Swift.String(describing: idempotencyToken)))"}
}

extension PutAccountConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiryEvents = "ExpiryEvents"
        case idempotencyToken = "IdempotencyToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expiryEvents = expiryEvents {
            try encodeContainer.encode(expiryEvents, forKey: .expiryEvents)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
    }
}

public struct PutAccountConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountConfigurationOutputError>
}

public struct PutAccountConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutAccountConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutAccountConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutAccountConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutAccountConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutAccountConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutAccountConfigurationOutputError>
}

public struct PutAccountConfigurationInput: Swift.Equatable {
    /// <p>Specifies expiration
    ///       events associated with an account.</p>
    public let expiryEvents: AcmClientTypes.ExpiryEventsConfiguration?
    /// <p>Customer-chosen string
    ///       used to distinguish between calls to <code>PutAccountConfiguration</code>. Idempotency tokens
    ///       time out after one hour. If you call <code>PutAccountConfiguration</code> multiple times with
    ///       the same unexpired idempotency token, ACM treats it as the same request and returns the
    ///       original result. If you change the idempotency token for each call, ACM treats each call as
    ///       a new request.</p>
    public let idempotencyToken: Swift.String?

    public init (
        expiryEvents: AcmClientTypes.ExpiryEventsConfiguration? = nil,
        idempotencyToken: Swift.String? = nil
    )
    {
        self.expiryEvents = expiryEvents
        self.idempotencyToken = idempotencyToken
    }
}

struct PutAccountConfigurationInputBody: Swift.Equatable {
    public let expiryEvents: AcmClientTypes.ExpiryEventsConfiguration?
    public let idempotencyToken: Swift.String?
}

extension PutAccountConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiryEvents = "ExpiryEvents"
        case idempotencyToken = "IdempotencyToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expiryEventsDecoded = try containerValues.decodeIfPresent(AcmClientTypes.ExpiryEventsConfiguration.self, forKey: .expiryEvents)
        expiryEvents = expiryEventsDecoded
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
    }
}

extension PutAccountConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutAccountConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutAccountConfigurationOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutAccountConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutAccountConfigurationOutputResponse()"}
}

extension PutAccountConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutAccountConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct PutAccountConfigurationOutputResponseBody: Swift.Equatable {
}

extension PutAccountConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AcmClientTypes {
    public enum RecordType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cname
        case sdkUnknown(Swift.String)

        public static var allCases: [RecordType] {
            return [
                .cname,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cname: return "CNAME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecordType(rawValue: rawValue) ?? RecordType.sdkUnknown(rawValue)
        }
    }
}

public struct RemoveTagsFromCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsFromCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsFromCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsFromCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsFromCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsFromCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsFromCertificateOutputError>
}

extension RemoveTagsFromCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveTagsFromCertificateInput(certificateArn: \(Swift.String(describing: certificateArn)), tags: \(Swift.String(describing: tags)))"}
}

extension RemoveTagsFromCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct RemoveTagsFromCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsFromCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsFromCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsFromCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsFromCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsFromCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsFromCertificateOutputError>
}

public struct RemoveTagsFromCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsFromCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsFromCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsFromCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsFromCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsFromCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsFromCertificateOutputError>
}

public struct RemoveTagsFromCertificateInput: Swift.Equatable {
    /// <p>String that contains the ARN of the ACM Certificate with one or more tags that you want
    ///       to remove. This must be of the form:</p>
    ///
    ///          <p>
    ///             <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    ///
    ///          <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    public let certificateArn: Swift.String?
    /// <p>The key-value pair that defines the tag to remove.</p>
    public let tags: [AcmClientTypes.Tag]?

    public init (
        certificateArn: Swift.String? = nil,
        tags: [AcmClientTypes.Tag]? = nil
    )
    {
        self.certificateArn = certificateArn
        self.tags = tags
    }
}

struct RemoveTagsFromCertificateInputBody: Swift.Equatable {
    public let certificateArn: Swift.String?
    public let tags: [AcmClientTypes.Tag]?
}

extension RemoveTagsFromCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AcmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[AcmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AcmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension RemoveTagsFromCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveTagsFromCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagPolicyException" : self = .tagPolicyException(try TagPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveTagsFromCertificateOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case invalidParameterException(InvalidParameterException)
    case invalidTagException(InvalidTagException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tagPolicyException(TagPolicyException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsFromCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveTagsFromCertificateOutputResponse()"}
}

extension RemoveTagsFromCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RemoveTagsFromCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveTagsFromCertificateOutputResponseBody: Swift.Equatable {
}

extension RemoveTagsFromCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct RenewCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RenewCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RenewCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RenewCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RenewCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RenewCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RenewCertificateOutputError>
}

extension RenewCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RenewCertificateInput(certificateArn: \(Swift.String(describing: certificateArn)))"}
}

extension RenewCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
    }
}

public struct RenewCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RenewCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RenewCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RenewCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RenewCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RenewCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RenewCertificateOutputError>
}

public struct RenewCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RenewCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RenewCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RenewCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RenewCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RenewCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RenewCertificateOutputError>
}

public struct RenewCertificateInput: Swift.Equatable {
    /// <p>String that contains the ARN of the ACM certificate to be renewed. This must be of the
    ///       form:</p>
    ///          <p>
    ///             <code>arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    ///          <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    public let certificateArn: Swift.String?

    public init (
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

struct RenewCertificateInputBody: Swift.Equatable {
    public let certificateArn: Swift.String?
}

extension RenewCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}

extension RenewCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RenewCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RenewCertificateOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RenewCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RenewCertificateOutputResponse()"}
}

extension RenewCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct RenewCertificateOutputResponse: Swift.Equatable {

    public init() {}
}

struct RenewCertificateOutputResponseBody: Swift.Equatable {
}

extension RenewCertificateOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AcmClientTypes {
    public enum RenewalEligibility: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case eligible
        case ineligible
        case sdkUnknown(Swift.String)

        public static var allCases: [RenewalEligibility] {
            return [
                .eligible,
                .ineligible,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .eligible: return "ELIGIBLE"
            case .ineligible: return "INELIGIBLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RenewalEligibility(rawValue: rawValue) ?? RenewalEligibility.sdkUnknown(rawValue)
        }
    }
}

extension AcmClientTypes {
    public enum RenewalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pendingAutoRenewal
        case pendingValidation
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [RenewalStatus] {
            return [
                .failed,
                .pendingAutoRenewal,
                .pendingValidation,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pendingAutoRenewal: return "PENDING_AUTO_RENEWAL"
            case .pendingValidation: return "PENDING_VALIDATION"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RenewalStatus(rawValue: rawValue) ?? RenewalStatus.sdkUnknown(rawValue)
        }
    }
}

extension AcmClientTypes.RenewalSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainValidationOptions = "DomainValidationOptions"
        case renewalStatus = "RenewalStatus"
        case renewalStatusReason = "RenewalStatusReason"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainValidationOptions = domainValidationOptions {
            var domainValidationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationOptions)
            for domainvalidationlist0 in domainValidationOptions {
                try domainValidationOptionsContainer.encode(domainvalidationlist0)
            }
        }
        if let renewalStatus = renewalStatus {
            try encodeContainer.encode(renewalStatus.rawValue, forKey: .renewalStatus)
        }
        if let renewalStatusReason = renewalStatusReason {
            try encodeContainer.encode(renewalStatusReason.rawValue, forKey: .renewalStatusReason)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let renewalStatusDecoded = try containerValues.decodeIfPresent(AcmClientTypes.RenewalStatus.self, forKey: .renewalStatus)
        renewalStatus = renewalStatusDecoded
        let domainValidationOptionsContainer = try containerValues.decodeIfPresent([AcmClientTypes.DomainValidation?].self, forKey: .domainValidationOptions)
        var domainValidationOptionsDecoded0:[AcmClientTypes.DomainValidation]? = nil
        if let domainValidationOptionsContainer = domainValidationOptionsContainer {
            domainValidationOptionsDecoded0 = [AcmClientTypes.DomainValidation]()
            for structure0 in domainValidationOptionsContainer {
                if let structure0 = structure0 {
                    domainValidationOptionsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationOptions = domainValidationOptionsDecoded0
        let renewalStatusReasonDecoded = try containerValues.decodeIfPresent(AcmClientTypes.FailureReason.self, forKey: .renewalStatusReason)
        renewalStatusReason = renewalStatusReasonDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension AcmClientTypes.RenewalSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RenewalSummary(domainValidationOptions: \(Swift.String(describing: domainValidationOptions)), renewalStatus: \(Swift.String(describing: renewalStatus)), renewalStatusReason: \(Swift.String(describing: renewalStatusReason)), updatedAt: \(Swift.String(describing: updatedAt)))"}
}

extension AcmClientTypes {
    /// <p>Contains information about the status of ACM's <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for the certificate. This
    ///       structure exists only when the certificate type is <code>AMAZON_ISSUED</code>.</p>
    public struct RenewalSummary: Swift.Equatable {
        /// <p>Contains information about the validation of each domain name in the certificate, as it
        ///       pertains to ACM's <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed
        ///         renewal</a>. This is different from the initial validation that occurs as a result of
        ///       the <a>RequestCertificate</a> request. This field exists only when the certificate
        ///       type is <code>AMAZON_ISSUED</code>.</p>
        public let domainValidationOptions: [AcmClientTypes.DomainValidation]?
        /// <p>The status of ACM's <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> of the certificate.</p>
        public let renewalStatus: AcmClientTypes.RenewalStatus?
        /// <p>The reason that a renewal request was unsuccessful.</p>
        public let renewalStatusReason: AcmClientTypes.FailureReason?
        /// <p>The time at which the renewal summary was last updated.</p>
        public let updatedAt: ClientRuntime.Date?

        public init (
            domainValidationOptions: [AcmClientTypes.DomainValidation]? = nil,
            renewalStatus: AcmClientTypes.RenewalStatus? = nil,
            renewalStatusReason: AcmClientTypes.FailureReason? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.domainValidationOptions = domainValidationOptions
            self.renewalStatus = renewalStatus
            self.renewalStatusReason = renewalStatusReason
            self.updatedAt = updatedAt
        }
    }

}

public struct RequestCertificateInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RequestCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RequestCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RequestCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RequestCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RequestCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RequestCertificateOutputError>
}

extension RequestCertificateInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RequestCertificateInput(certificateAuthorityArn: \(Swift.String(describing: certificateAuthorityArn)), domainName: \(Swift.String(describing: domainName)), domainValidationOptions: \(Swift.String(describing: domainValidationOptions)), idempotencyToken: \(Swift.String(describing: idempotencyToken)), options: \(Swift.String(describing: options)), subjectAlternativeNames: \(Swift.String(describing: subjectAlternativeNames)), tags: \(Swift.String(describing: tags)), validationMethod: \(Swift.String(describing: validationMethod)))"}
}

extension RequestCertificateInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case domainName = "DomainName"
        case domainValidationOptions = "DomainValidationOptions"
        case idempotencyToken = "IdempotencyToken"
        case options = "Options"
        case subjectAlternativeNames = "SubjectAlternativeNames"
        case tags = "Tags"
        case validationMethod = "ValidationMethod"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityArn = certificateAuthorityArn {
            try encodeContainer.encode(certificateAuthorityArn, forKey: .certificateAuthorityArn)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainValidationOptions = domainValidationOptions {
            var domainValidationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationOptions)
            for domainvalidationoptionlist0 in domainValidationOptions {
                try domainValidationOptionsContainer.encode(domainvalidationoptionlist0)
            }
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for domainlist0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(domainlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let validationMethod = validationMethod {
            try encodeContainer.encode(validationMethod.rawValue, forKey: .validationMethod)
        }
    }
}

public struct RequestCertificateInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RequestCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RequestCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RequestCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RequestCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RequestCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RequestCertificateOutputError>
}

public struct RequestCertificateInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RequestCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RequestCertificateInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RequestCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RequestCertificateInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RequestCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RequestCertificateOutputError>
}

public struct RequestCertificateInput: Swift.Equatable {
    /// <p>The Amazon Resource Name (ARN) of the private certificate authority (CA) that will be used
    ///       to issue the certificate. If you do not provide an ARN and you are trying to request a private
    ///       certificate, ACM will attempt to issue a public certificate. For more information about
    ///       private CAs, see the <a href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaWelcome.html">AWS Certificate Manager Private Certificate Authority (PCA)</a> user guide. The ARN must have the following form: </p>
    ///
    ///          <p>
    ///             <code>arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    public let certificateAuthorityArn: Swift.String?
    /// <p> Fully qualified domain name (FQDN), such as www.example.com, that you want to secure with
    ///       an ACM certificate. Use an asterisk (*) to create a wildcard certificate that protects
    ///       several sites in the same domain. For example, *.example.com protects www.example.com,
    ///       site.example.com, and images.example.com. </p>
    ///
    ///          <p> The first domain name you enter cannot exceed 64 octets, including periods. Each
    ///       subsequent Subject Alternative Name (SAN), however, can be up to 253 octets in length. </p>
    public let domainName: Swift.String?
    /// <p>The domain name that you want ACM to use to send you emails so that you can validate
    ///       domain ownership.</p>
    public let domainValidationOptions: [AcmClientTypes.DomainValidationOption]?
    /// <p>Customer chosen string that can be used to distinguish between calls to
    ///         <code>RequestCertificate</code>. Idempotency tokens time out after one hour. Therefore, if
    ///       you call <code>RequestCertificate</code> multiple times with the same idempotency token within
    ///       one hour, ACM recognizes that you are requesting only one certificate and will issue only
    ///       one. If you change the idempotency token for each call, ACM recognizes that you are
    ///       requesting multiple certificates.</p>
    public let idempotencyToken: Swift.String?
    /// <p>Currently, you can use this parameter to specify whether to add the certificate to a
    ///       certificate transparency log. Certificate transparency makes it possible to detect SSL/TLS
    ///       certificates that have been mistakenly or maliciously issued. Certificates that have not been
    ///       logged typically produce an error message in a browser. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-transparency">Opting Out of Certificate Transparency Logging</a>.</p>
    public let options: AcmClientTypes.CertificateOptions?
    /// <p>Additional FQDNs to be included in the Subject Alternative Name extension of the ACM
    ///       certificate. For example, add the name www.example.net to a certificate for which the
    ///         <code>DomainName</code> field is www.example.com if users can reach your site by using
    ///       either name. The maximum number of domain names that you can add to an ACM certificate is
    ///       100. However, the initial quota is 10 domain names. If you need more than 10 names, you must
    ///       request a quota increase. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-limits.html">Quotas</a>.</p>
    ///
    ///          <p> The maximum length of a SAN DNS name is 253 octets. The name is made up of multiple
    ///       labels separated by periods. No label can be longer than 63 octets. Consider the following
    ///       examples: </p>
    ///
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>(63 octets).(63 octets).(63 octets).(61 octets)</code> is legal because the
    ///           total length is 253 octets (63+1+63+1+63+1+61) and no label exceeds 63 octets.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>(64 octets).(63 octets).(63 octets).(61 octets)</code> is not legal because the
    ///           total length exceeds 253 octets (64+1+63+1+63+1+61) and the first label exceeds 63
    ///           octets.</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>(63 octets).(63 octets).(63 octets).(62 octets)</code> is not legal because the
    ///           total length of the DNS name (63+1+63+1+63+1+62) exceeds 253 octets.</p>
    ///             </li>
    ///          </ul>
    public let subjectAlternativeNames: [Swift.String]?
    /// <p>One or more resource tags to associate with the certificate.</p>
    public let tags: [AcmClientTypes.Tag]?
    /// <p>The method you want to use if you are requesting a public certificate to validate that you
    ///       own or control domain. You can <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html">validate with DNS</a> or <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-email.html">validate with
    ///         email</a>. We recommend that you use DNS validation. </p>
    public let validationMethod: AcmClientTypes.ValidationMethod?

    public init (
        certificateAuthorityArn: Swift.String? = nil,
        domainName: Swift.String? = nil,
        domainValidationOptions: [AcmClientTypes.DomainValidationOption]? = nil,
        idempotencyToken: Swift.String? = nil,
        options: AcmClientTypes.CertificateOptions? = nil,
        subjectAlternativeNames: [Swift.String]? = nil,
        tags: [AcmClientTypes.Tag]? = nil,
        validationMethod: AcmClientTypes.ValidationMethod? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.domainName = domainName
        self.domainValidationOptions = domainValidationOptions
        self.idempotencyToken = idempotencyToken
        self.options = options
        self.subjectAlternativeNames = subjectAlternativeNames
        self.tags = tags
        self.validationMethod = validationMethod
    }
}

struct RequestCertificateInputBody: Swift.Equatable {
    public let domainName: Swift.String?
    public let validationMethod: AcmClientTypes.ValidationMethod?
    public let subjectAlternativeNames: [Swift.String]?
    public let idempotencyToken: Swift.String?
    public let domainValidationOptions: [AcmClientTypes.DomainValidationOption]?
    public let options: AcmClientTypes.CertificateOptions?
    public let certificateAuthorityArn: Swift.String?
    public let tags: [AcmClientTypes.Tag]?
}

extension RequestCertificateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case domainName = "DomainName"
        case domainValidationOptions = "DomainValidationOptions"
        case idempotencyToken = "IdempotencyToken"
        case options = "Options"
        case subjectAlternativeNames = "SubjectAlternativeNames"
        case tags = "Tags"
        case validationMethod = "ValidationMethod"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let validationMethodDecoded = try containerValues.decodeIfPresent(AcmClientTypes.ValidationMethod.self, forKey: .validationMethod)
        validationMethod = validationMethodDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[Swift.String]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in subjectAlternativeNamesContainer {
                if let string0 = string0 {
                    subjectAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
        let idempotencyTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .idempotencyToken)
        idempotencyToken = idempotencyTokenDecoded
        let domainValidationOptionsContainer = try containerValues.decodeIfPresent([AcmClientTypes.DomainValidationOption?].self, forKey: .domainValidationOptions)
        var domainValidationOptionsDecoded0:[AcmClientTypes.DomainValidationOption]? = nil
        if let domainValidationOptionsContainer = domainValidationOptionsContainer {
            domainValidationOptionsDecoded0 = [AcmClientTypes.DomainValidationOption]()
            for structure0 in domainValidationOptionsContainer {
                if let structure0 = structure0 {
                    domainValidationOptionsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationOptions = domainValidationOptionsDecoded0
        let optionsDecoded = try containerValues.decodeIfPresent(AcmClientTypes.CertificateOptions.self, forKey: .options)
        options = optionsDecoded
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([AcmClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[AcmClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [AcmClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension RequestCertificateOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RequestCertificateOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDomainValidationOptionsException" : self = .invalidDomainValidationOptionsException(try InvalidDomainValidationOptionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagPolicyException" : self = .tagPolicyException(try TagPolicyException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RequestCertificateOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case invalidDomainValidationOptionsException(InvalidDomainValidationOptionsException)
    case invalidParameterException(InvalidParameterException)
    case invalidTagException(InvalidTagException)
    case limitExceededException(LimitExceededException)
    case tagPolicyException(TagPolicyException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RequestCertificateOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RequestCertificateOutputResponse(certificateArn: \(Swift.String(describing: certificateArn)))"}
}

extension RequestCertificateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RequestCertificateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.certificateArn = output.certificateArn
        } else {
            self.certificateArn = nil
        }
    }
}

public struct RequestCertificateOutputResponse: Swift.Equatable {
    /// <p>String that contains the ARN of the issued certificate. This must be of the form:</p>
    ///          <p>
    ///             <code>arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    public let certificateArn: Swift.String?

    public init (
        certificateArn: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
    }
}

struct RequestCertificateOutputResponseBody: Swift.Equatable {
    public let certificateArn: Swift.String?
}

extension RequestCertificateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
    }
}

extension RequestInProgressException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RequestInProgressException(message: \(Swift.String(describing: message)))"}
}

extension RequestInProgressException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: RequestInProgressExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The certificate request is in process and the certificate in your account has not yet been
///       issued.</p>
public struct RequestInProgressException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct RequestInProgressExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension RequestInProgressExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ResendValidationEmailInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResendValidationEmailInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResendValidationEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResendValidationEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResendValidationEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResendValidationEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResendValidationEmailOutputError>
}

extension ResendValidationEmailInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResendValidationEmailInput(certificateArn: \(Swift.String(describing: certificateArn)), domain: \(Swift.String(describing: domain)), validationDomain: \(Swift.String(describing: validationDomain)))"}
}

extension ResendValidationEmailInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case domain = "Domain"
        case validationDomain = "ValidationDomain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let validationDomain = validationDomain {
            try encodeContainer.encode(validationDomain, forKey: .validationDomain)
        }
    }
}

public struct ResendValidationEmailInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResendValidationEmailInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResendValidationEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResendValidationEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResendValidationEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResendValidationEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResendValidationEmailOutputError>
}

public struct ResendValidationEmailInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ResendValidationEmailInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ResendValidationEmailInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ResendValidationEmailOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ResendValidationEmailInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ResendValidationEmailOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ResendValidationEmailOutputError>
}

public struct ResendValidationEmailInput: Swift.Equatable {
    /// <p>String that contains the ARN of the requested certificate. The certificate ARN is
    ///       generated and returned by the <a>RequestCertificate</a> action as soon as the
    ///       request is made. By default, using this parameter causes email to be sent to all top-level
    ///       domains you specified in the certificate request. The ARN must be of the form: </p>
    ///
    ///          <p>
    ///             <code>arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012</code>
    ///          </p>
    public let certificateArn: Swift.String?
    /// <p>The fully qualified domain name (FQDN) of the certificate that needs to be
    ///       validated.</p>
    public let domain: Swift.String?
    /// <p>The base validation domain that will act as the suffix of the email addresses that are
    ///       used to send the emails. This must be the same as the <code>Domain</code> value or a
    ///       superdomain of the <code>Domain</code> value. For example, if you requested a certificate for
    ///         <code>site.subdomain.example.com</code> and specify a <b>ValidationDomain</b> of <code>subdomain.example.com</code>, ACM sends email to the
    ///       domain registrant, technical contact, and administrative contact in WHOIS and the following
    ///       five addresses:</p>
    ///          <ul>
    ///             <li>
    ///                <p>admin@subdomain.example.com</p>
    ///             </li>
    ///             <li>
    ///                <p>administrator@subdomain.example.com</p>
    ///             </li>
    ///             <li>
    ///                <p>hostmaster@subdomain.example.com</p>
    ///             </li>
    ///             <li>
    ///                <p>postmaster@subdomain.example.com</p>
    ///             </li>
    ///             <li>
    ///                <p>webmaster@subdomain.example.com</p>
    ///             </li>
    ///          </ul>
    public let validationDomain: Swift.String?

    public init (
        certificateArn: Swift.String? = nil,
        domain: Swift.String? = nil,
        validationDomain: Swift.String? = nil
    )
    {
        self.certificateArn = certificateArn
        self.domain = domain
        self.validationDomain = validationDomain
    }
}

struct ResendValidationEmailInputBody: Swift.Equatable {
    public let certificateArn: Swift.String?
    public let domain: Swift.String?
    public let validationDomain: Swift.String?
}

extension ResendValidationEmailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case domain = "Domain"
        case validationDomain = "ValidationDomain"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let validationDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationDomain)
        validationDomain = validationDomainDecoded
    }
}

extension ResendValidationEmailOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ResendValidationEmailOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidDomainValidationOptionsException" : self = .invalidDomainValidationOptionsException(try InvalidDomainValidationOptionsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStateException" : self = .invalidStateException(try InvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ResendValidationEmailOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case invalidDomainValidationOptionsException(InvalidDomainValidationOptionsException)
    case invalidStateException(InvalidStateException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ResendValidationEmailOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResendValidationEmailOutputResponse()"}
}

extension ResendValidationEmailOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct ResendValidationEmailOutputResponse: Swift.Equatable {

    public init() {}
}

struct ResendValidationEmailOutputResponseBody: Swift.Equatable {
}

extension ResendValidationEmailOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ResourceInUseException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceInUseException(message: \(Swift.String(describing: message)))"}
}

extension ResourceInUseException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceInUseExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The certificate is in use by another AWS service in the caller's account. Remove the
///       association and try again.</p>
public struct ResourceInUseException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceInUseExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceInUseExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The specified certificate cannot be found in the caller's account or the caller's account
///       cannot be found.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AcmClientTypes.ResourceRecord: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(AcmClientTypes.RecordType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension AcmClientTypes.ResourceRecord: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceRecord(name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)), value: \(Swift.String(describing: value)))"}
}

extension AcmClientTypes {
    /// <p>Contains a DNS record value that you can use to can use to validate ownership or control
    ///       of a domain. This is used by the <a>DescribeCertificate</a> action. </p>
    public struct ResourceRecord: Swift.Equatable {
        /// <p>The name of the DNS record to create in your domain. This is supplied by ACM.</p>
        public let name: Swift.String?
        /// <p>The type of DNS record. Currently this can be <code>CNAME</code>.</p>
        public let type: AcmClientTypes.RecordType?
        /// <p>The value of the CNAME record to add to your DNS database. This is supplied by
        ///       ACM.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: AcmClientTypes.RecordType? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
            self.value = value
        }
    }

}

extension AcmClientTypes {
    public enum RevocationReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case affiliationChanged
        case aACompromise
        case caCompromise
        case certificateHold
        case cessationOfOperation
        case keyCompromise
        case privilegeWithdrawn
        case removeFromCrl
        case superceded
        case unspecified
        case sdkUnknown(Swift.String)

        public static var allCases: [RevocationReason] {
            return [
                .affiliationChanged,
                .aACompromise,
                .caCompromise,
                .certificateHold,
                .cessationOfOperation,
                .keyCompromise,
                .privilegeWithdrawn,
                .removeFromCrl,
                .superceded,
                .unspecified,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .affiliationChanged: return "AFFILIATION_CHANGED"
            case .aACompromise: return "A_A_COMPROMISE"
            case .caCompromise: return "CA_COMPROMISE"
            case .certificateHold: return "CERTIFICATE_HOLD"
            case .cessationOfOperation: return "CESSATION_OF_OPERATION"
            case .keyCompromise: return "KEY_COMPROMISE"
            case .privilegeWithdrawn: return "PRIVILEGE_WITHDRAWN"
            case .removeFromCrl: return "REMOVE_FROM_CRL"
            case .superceded: return "SUPERCEDED"
            case .unspecified: return "UNSPECIFIED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RevocationReason(rawValue: rawValue) ?? RevocationReason.sdkUnknown(rawValue)
        }
    }
}

extension AcmClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension AcmClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension AcmClientTypes {
    /// <p>A key-value pair that identifies or specifies metadata about an ACM resource.</p>
    public struct Tag: Swift.Equatable {
        /// <p>The key of the tag.</p>
        public let key: Swift.String?
        /// <p>The value of the tag.</p>
        public let value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagPolicyException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagPolicyException(message: \(Swift.String(describing: message)))"}
}

extension TagPolicyException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TagPolicyExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A specified tag did not comply with an existing tag policy and was rejected.</p>
public struct TagPolicyException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TagPolicyExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TagPolicyExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ThrottlingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThrottlingException(message: \(Swift.String(describing: message)))"}
}

extension ThrottlingException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request was denied
///       because it exceeded a quota.</p>
public struct ThrottlingException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyTagsException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TooManyTagsException(message: \(Swift.String(describing: message)))"}
}

extension TooManyTagsException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TooManyTagsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request contains too many tags. Try the request again with fewer tags.</p>
public struct TooManyTagsException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TooManyTagsExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TooManyTagsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UpdateCertificateOptionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCertificateOptionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCertificateOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCertificateOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCertificateOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCertificateOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCertificateOptionsOutputError>
}

extension UpdateCertificateOptionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCertificateOptionsInput(certificateArn: \(Swift.String(describing: certificateArn)), options: \(Swift.String(describing: options)))"}
}

extension UpdateCertificateOptionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case options = "Options"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateArn = certificateArn {
            try encodeContainer.encode(certificateArn, forKey: .certificateArn)
        }
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
    }
}

public struct UpdateCertificateOptionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCertificateOptionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCertificateOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCertificateOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCertificateOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCertificateOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCertificateOptionsOutputError>
}

public struct UpdateCertificateOptionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCertificateOptionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCertificateOptionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCertificateOptionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCertificateOptionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCertificateOptionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCertificateOptionsOutputError>
}

public struct UpdateCertificateOptionsInput: Swift.Equatable {
    /// <p>ARN of the requested certificate to update. This must be of the form:</p>
    ///          <p>
    ///             <code>arn:aws:acm:us-east-1:<i>account</i>:certificate/<i>12345678-1234-1234-1234-123456789012</i>
    ///             </code>
    ///          </p>
    public let certificateArn: Swift.String?
    /// <p>Use to update the options for your certificate. Currently, you can specify whether to add
    ///       your certificate to a transparency log. Certificate transparency makes it possible to detect
    ///       SSL/TLS certificates that have been mistakenly or maliciously issued. Certificates that have
    ///       not been logged typically produce an error message in a browser. </p>
    public let options: AcmClientTypes.CertificateOptions?

    public init (
        certificateArn: Swift.String? = nil,
        options: AcmClientTypes.CertificateOptions? = nil
    )
    {
        self.certificateArn = certificateArn
        self.options = options
    }
}

struct UpdateCertificateOptionsInputBody: Swift.Equatable {
    public let certificateArn: Swift.String?
    public let options: AcmClientTypes.CertificateOptions?
}

extension UpdateCertificateOptionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateArn = "CertificateArn"
        case options = "Options"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateArn)
        certificateArn = certificateArnDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(AcmClientTypes.CertificateOptions.self, forKey: .options)
        options = optionsDecoded
    }
}

extension UpdateCertificateOptionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCertificateOptionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidArnException" : self = .invalidArnException(try InvalidArnException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidStateException" : self = .invalidStateException(try InvalidStateException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateCertificateOptionsOutputError: Swift.Error, Swift.Equatable {
    case invalidArnException(InvalidArnException)
    case invalidStateException(InvalidStateException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCertificateOptionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCertificateOptionsOutputResponse()"}
}

extension UpdateCertificateOptionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateCertificateOptionsOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateCertificateOptionsOutputResponseBody: Swift.Equatable {
}

extension UpdateCertificateOptionsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationException(message: \(Swift.String(describing: message)))"}
}

extension ValidationException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The supplied input
///       failed to satisfy constraints of an AWS service.</p>
public struct ValidationException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension AcmClientTypes {
    public enum ValidationMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dns
        case email
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationMethod] {
            return [
                .dns,
                .email,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dns: return "DNS"
            case .email: return "EMAIL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ValidationMethod(rawValue: rawValue) ?? ValidationMethod.sdkUnknown(rawValue)
        }
    }
}
