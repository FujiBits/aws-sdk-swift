// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RequestCertificateInputHeadersMiddleware: Middleware {
    public let id: String = "RequestCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RequestCertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<RequestCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RequestCertificateInput>
    public typealias MOutput = OperationOutput<RequestCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RequestCertificateOutputError>
}

public struct RequestCertificateInputQueryItemMiddleware: Middleware {
    public let id: String = "RequestCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RequestCertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<RequestCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RequestCertificateInput>
    public typealias MOutput = OperationOutput<RequestCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RequestCertificateOutputError>
}

public struct RequestCertificateInputBodyMiddleware: Middleware {
    public let id: String = "RequestCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RequestCertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<RequestCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RequestCertificateInput>
    public typealias MOutput = OperationOutput<RequestCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RequestCertificateOutputError>
}

extension RequestCertificateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case domainName = "DomainName"
        case domainValidationOptions = "DomainValidationOptions"
        case idempotencyToken = "IdempotencyToken"
        case options = "Options"
        case subjectAlternativeNames = "SubjectAlternativeNames"
        case tags = "Tags"
        case validationMethod = "ValidationMethod"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityArn = certificateAuthorityArn {
            try encodeContainer.encode(certificateAuthorityArn, forKey: .certificateAuthorityArn)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainValidationOptions = domainValidationOptions {
            var domainValidationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationOptions)
            for domainvalidationoptionlist0 in domainValidationOptions {
                try domainValidationOptionsContainer.encode(domainvalidationoptionlist0)
            }
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for domainlist0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(domainlist0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let validationMethod = validationMethod {
            try encodeContainer.encode(validationMethod.rawValue, forKey: .validationMethod)
        }
    }
}
