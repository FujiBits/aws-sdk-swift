// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct DiscoverInstancesInputHeadersMiddleware: Middleware {
    public let id: String = "DiscoverInstancesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DiscoverInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DiscoverInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DiscoverInstancesInput>
    public typealias MOutput = OperationOutput<DiscoverInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DiscoverInstancesOutputError>
}

public struct DiscoverInstancesInputQueryItemMiddleware: Middleware {
    public let id: String = "DiscoverInstancesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DiscoverInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DiscoverInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DiscoverInstancesInput>
    public typealias MOutput = OperationOutput<DiscoverInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DiscoverInstancesOutputError>
}

public struct DiscoverInstancesInputBodyMiddleware: Middleware {
    public let id: String = "DiscoverInstancesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<DiscoverInstancesInput>,
                  next: H) -> Swift.Result<OperationOutput<DiscoverInstancesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<DiscoverInstancesInput>
    public typealias MOutput = OperationOutput<DiscoverInstancesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<DiscoverInstancesOutputError>
}

extension DiscoverInstancesInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case healthStatus = "HealthStatus"
        case maxResults = "MaxResults"
        case namespaceName = "NamespaceName"
        case optionalParameters = "OptionalParameters"
        case queryParameters = "QueryParameters"
        case serviceName = "ServiceName"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let healthStatus = healthStatus {
            try encodeContainer.encode(healthStatus.rawValue, forKey: .healthStatus)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let namespaceName = namespaceName {
            try encodeContainer.encode(namespaceName, forKey: .namespaceName)
        }
        if let optionalParameters = optionalParameters {
            var optionalParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .optionalParameters)
            for (dictKey0, attributes0) in optionalParameters {
                try optionalParametersContainer.encode(attributes0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let queryParameters = queryParameters {
            var queryParametersContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .queryParameters)
            for (dictKey0, attributes0) in queryParameters {
                try queryParametersContainer.encode(attributes0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }
}
