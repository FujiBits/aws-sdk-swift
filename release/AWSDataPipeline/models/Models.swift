// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

public struct ActivatePipelineInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ActivatePipelineInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ActivatePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ActivatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ActivatePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ActivatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ActivatePipelineOutputError>
}

extension ActivatePipelineInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActivatePipelineInput(parameterValues: \(Swift.String(describing: parameterValues)), pipelineId: \(Swift.String(describing: pipelineId)), startTimestamp: \(Swift.String(describing: startTimestamp)))"}
}

extension ActivatePipelineInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterValues
        case pipelineId
        case startTimestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameterValues = parameterValues {
            var parameterValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameterValues)
            for parametervaluelist0 in parameterValues {
                try parameterValuesContainer.encode(parametervaluelist0)
            }
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let startTimestamp = startTimestamp {
            try encodeContainer.encode(startTimestamp.timeIntervalSince1970, forKey: .startTimestamp)
        }
    }
}

public struct ActivatePipelineInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ActivatePipelineInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ActivatePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ActivatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ActivatePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ActivatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ActivatePipelineOutputError>
}

public struct ActivatePipelineInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ActivatePipelineInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ActivatePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ActivatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ActivatePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ActivatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ActivatePipelineOutputError>
}

public struct ActivatePipelineInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ActivatePipelineInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ActivatePipelineInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ActivatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ActivatePipelineInput
    public typealias MOutput = ClientRuntime.OperationOutput<ActivatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ActivatePipelineOutputError>
}

public struct ActivatePipelineInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ActivatePipelineInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ActivatePipelineInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ActivatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ActivatePipelineInput
    public typealias MOutput = ClientRuntime.OperationOutput<ActivatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ActivatePipelineOutputError>
}

/// Contains the parameters for ActivatePipeline.
public struct ActivatePipelineInput: Swift.Equatable {
    /// A list of parameter values to pass to the pipeline at activation.
    public var parameterValues: [DataPipelineClientTypes.ParameterValue]?
    /// The ID of the pipeline.
    /// This member is required.
    public var pipelineId: Swift.String?
    /// The date and time to resume the pipeline. By default, the pipeline resumes from the last completed execution.
    public var startTimestamp: ClientRuntime.Date?

    public init (
        parameterValues: [DataPipelineClientTypes.ParameterValue]? = nil,
        pipelineId: Swift.String? = nil,
        startTimestamp: ClientRuntime.Date? = nil
    )
    {
        self.parameterValues = parameterValues
        self.pipelineId = pipelineId
        self.startTimestamp = startTimestamp
    }
}

struct ActivatePipelineInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
    public let parameterValues: [DataPipelineClientTypes.ParameterValue]?
    public let startTimestamp: ClientRuntime.Date?
}

extension ActivatePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterValues
        case pipelineId
        case startTimestamp
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let parameterValuesContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ParameterValue?].self, forKey: .parameterValues)
        var parameterValuesDecoded0:[DataPipelineClientTypes.ParameterValue]? = nil
        if let parameterValuesContainer = parameterValuesContainer {
            parameterValuesDecoded0 = [DataPipelineClientTypes.ParameterValue]()
            for structure0 in parameterValuesContainer {
                if let structure0 = structure0 {
                    parameterValuesDecoded0?.append(structure0)
                }
            }
        }
        parameterValues = parameterValuesDecoded0
        let startTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTimestamp)
        startTimestamp = startTimestampDecoded
    }
}

extension ActivatePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ActivatePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ActivatePipelineOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ActivatePipelineOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActivatePipelineOutputResponse()"}
}

extension ActivatePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Contains the output of ActivatePipeline.
public struct ActivatePipelineOutputResponse: Swift.Equatable {

    public init() {}
}

struct ActivatePipelineOutputResponseBody: Swift.Equatable {
}

extension ActivatePipelineOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AddTagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsOutputError>
}

extension AddTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddTagsInput(pipelineId: \(Swift.String(describing: pipelineId)), tags: \(Swift.String(describing: tags)))"}
}

extension AddTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineId
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct AddTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsOutputError>
}

public struct AddTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AddTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AddTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsOutputError>
}

public struct AddTagsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: AddTagsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AddTagsInput
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsOutputError>
}

public struct AddTagsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AddTagsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: AddTagsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AddTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = AddTagsInput
    public typealias MOutput = ClientRuntime.OperationOutput<AddTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AddTagsOutputError>
}

/// Contains the parameters for AddTags.
public struct AddTagsInput: Swift.Equatable {
    /// The ID of the pipeline.
    /// This member is required.
    public var pipelineId: Swift.String?
    /// The tags to add, as key/value pairs.
    /// This member is required.
    public var tags: [DataPipelineClientTypes.Tag]?

    public init (
        pipelineId: Swift.String? = nil,
        tags: [DataPipelineClientTypes.Tag]? = nil
    )
    {
        self.pipelineId = pipelineId
        self.tags = tags
    }
}

struct AddTagsInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
    public let tags: [DataPipelineClientTypes.Tag]?
}

extension AddTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineId
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DataPipelineClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataPipelineClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension AddTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AddTagsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AddTagsOutputResponse()"}
}

extension AddTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Contains the output of AddTags.
public struct AddTagsOutputResponse: Swift.Equatable {

    public init() {}
}

struct AddTagsOutputResponseBody: Swift.Equatable {
}

extension AddTagsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct CreatePipelineInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePipelineInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePipelineOutputError>
}

extension CreatePipelineInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePipelineInput(description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), tags: \(Swift.String(describing: tags)), uniqueId: \(Swift.String(describing: uniqueId)))"}
}

extension CreatePipelineInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
        case tags
        case uniqueId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let uniqueId = uniqueId {
            try encodeContainer.encode(uniqueId, forKey: .uniqueId)
        }
    }
}

public struct CreatePipelineInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePipelineInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePipelineOutputError>
}

public struct CreatePipelineInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePipelineInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreatePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreatePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePipelineOutputError>
}

public struct CreatePipelineInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePipelineInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreatePipelineInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreatePipelineInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePipelineOutputError>
}

public struct CreatePipelineInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreatePipelineInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreatePipelineInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreatePipelineInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreatePipelineOutputError>
}

/// Contains the parameters for CreatePipeline.
public struct CreatePipelineInput: Swift.Equatable {
    /// The description for the pipeline.
    public var description: Swift.String?
    /// The name for the pipeline. You can use the same name for multiple pipelines associated with your AWS account,
    ///             because AWS Data Pipeline assigns each pipeline a unique pipeline identifier.
    /// This member is required.
    public var name: Swift.String?
    /// A list of tags to associate with the pipeline at creation. Tags let you control access to pipelines.
    ///             For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines
    ///             in the AWS Data Pipeline Developer Guide.
    public var tags: [DataPipelineClientTypes.Tag]?
    /// A unique identifier. This identifier is not the same as the pipeline identifier assigned by AWS Data Pipeline.
    ///             You are responsible for defining the format and ensuring the uniqueness of this identifier. You use this
    ///             parameter to ensure idempotency during repeated calls to CreatePipeline. For example, if the
    ///             first call to CreatePipeline does not succeed, you can pass in the same unique identifier and
    ///             pipeline name combination on a subsequent call to CreatePipeline. CreatePipeline
    ///             ensures that if a pipeline already exists with the same name and unique identifier, a new pipeline is not
    ///             created. Instead, you'll receive the pipeline identifier from the previous attempt. The uniqueness of the
    ///             name and unique identifier combination is scoped to the AWS account or IAM user credentials.
    /// This member is required.
    public var uniqueId: Swift.String?

    public init (
        description: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [DataPipelineClientTypes.Tag]? = nil,
        uniqueId: Swift.String? = nil
    )
    {
        self.description = description
        self.name = name
        self.tags = tags
        self.uniqueId = uniqueId
    }
}

struct CreatePipelineInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let uniqueId: Swift.String?
    public let description: Swift.String?
    public let tags: [DataPipelineClientTypes.Tag]?
}

extension CreatePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case name
        case tags
        case uniqueId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let uniqueIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uniqueId)
        uniqueId = uniqueIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DataPipelineClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataPipelineClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreatePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreatePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreatePipelineOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreatePipelineOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreatePipelineOutputResponse(pipelineId: \(Swift.String(describing: pipelineId)))"}
}

extension CreatePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreatePipelineOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineId = output.pipelineId
        } else {
            self.pipelineId = nil
        }
    }
}

/// Contains the output of CreatePipeline.
public struct CreatePipelineOutputResponse: Swift.Equatable {
    /// The ID that AWS Data Pipeline assigns the newly created pipeline. For example, df-06372391ZG65EXAMPLE.
    /// This member is required.
    public var pipelineId: Swift.String?

    public init (
        pipelineId: Swift.String? = nil
    )
    {
        self.pipelineId = pipelineId
    }
}

struct CreatePipelineOutputResponseBody: Swift.Equatable {
    public let pipelineId: Swift.String?
}

extension CreatePipelineOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
    }
}

public struct DeactivatePipelineInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeactivatePipelineInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeactivatePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeactivatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeactivatePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeactivatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeactivatePipelineOutputError>
}

extension DeactivatePipelineInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeactivatePipelineInput(cancelActive: \(Swift.String(describing: cancelActive)), pipelineId: \(Swift.String(describing: pipelineId)))"}
}

extension DeactivatePipelineInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cancelActive
        case pipelineId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cancelActive = cancelActive {
            try encodeContainer.encode(cancelActive, forKey: .cancelActive)
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
    }
}

public struct DeactivatePipelineInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeactivatePipelineInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeactivatePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeactivatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeactivatePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeactivatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeactivatePipelineOutputError>
}

public struct DeactivatePipelineInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeactivatePipelineInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeactivatePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeactivatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeactivatePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeactivatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeactivatePipelineOutputError>
}

public struct DeactivatePipelineInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeactivatePipelineInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeactivatePipelineInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeactivatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeactivatePipelineInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeactivatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeactivatePipelineOutputError>
}

public struct DeactivatePipelineInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeactivatePipelineInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeactivatePipelineInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeactivatePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeactivatePipelineInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeactivatePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeactivatePipelineOutputError>
}

/// Contains the parameters for DeactivatePipeline.
public struct DeactivatePipelineInput: Swift.Equatable {
    /// Indicates whether to cancel any running objects. The default is true,
    ///           which sets the state of any running objects to CANCELED.
    ///           If this value is false, the pipeline is deactivated after all
    ///           running objects finish.
    public var cancelActive: Swift.Bool?
    /// The ID of the pipeline.
    /// This member is required.
    public var pipelineId: Swift.String?

    public init (
        cancelActive: Swift.Bool? = nil,
        pipelineId: Swift.String? = nil
    )
    {
        self.cancelActive = cancelActive
        self.pipelineId = pipelineId
    }
}

struct DeactivatePipelineInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
    public let cancelActive: Swift.Bool?
}

extension DeactivatePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cancelActive
        case pipelineId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let cancelActiveDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .cancelActive)
        cancelActive = cancelActiveDecoded
    }
}

extension DeactivatePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeactivatePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeactivatePipelineOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeactivatePipelineOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeactivatePipelineOutputResponse()"}
}

extension DeactivatePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Contains the output of DeactivatePipeline.
public struct DeactivatePipelineOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeactivatePipelineOutputResponseBody: Swift.Equatable {
}

extension DeactivatePipelineOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeletePipelineInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePipelineInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePipelineOutputError>
}

extension DeletePipelineInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePipelineInput(pipelineId: \(Swift.String(describing: pipelineId)))"}
}

extension DeletePipelineInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
    }
}

public struct DeletePipelineInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePipelineInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePipelineOutputError>
}

public struct DeletePipelineInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePipelineInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeletePipelineInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeletePipelineInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePipelineOutputError>
}

public struct DeletePipelineInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePipelineInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeletePipelineInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeletePipelineInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePipelineOutputError>
}

public struct DeletePipelineInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeletePipelineInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeletePipelineInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeletePipelineOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeletePipelineInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeletePipelineOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeletePipelineOutputError>
}

/// Contains the parameters for DeletePipeline.
public struct DeletePipelineInput: Swift.Equatable {
    /// The ID of the pipeline.
    /// This member is required.
    public var pipelineId: Swift.String?

    public init (
        pipelineId: Swift.String? = nil
    )
    {
        self.pipelineId = pipelineId
    }
}

struct DeletePipelineInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
}

extension DeletePipelineInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
    }
}

extension DeletePipelineOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeletePipelineOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeletePipelineOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeletePipelineOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeletePipelineOutputResponse()"}
}

extension DeletePipelineOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeletePipelineOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeletePipelineOutputResponseBody: Swift.Equatable {
}

extension DeletePipelineOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeObjectsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeObjectsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeObjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeObjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeObjectsOutputError>
}

extension DescribeObjectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeObjectsInput(evaluateExpressions: \(Swift.String(describing: evaluateExpressions)), marker: \(Swift.String(describing: marker)), objectIds: \(Swift.String(describing: objectIds)), pipelineId: \(Swift.String(describing: pipelineId)))"}
}

extension DescribeObjectsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluateExpressions
        case marker
        case objectIds
        case pipelineId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if evaluateExpressions != false {
            try encodeContainer.encode(evaluateExpressions, forKey: .evaluateExpressions)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let objectIds = objectIds {
            var objectIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .objectIds)
            for idlist0 in objectIds {
                try objectIdsContainer.encode(idlist0)
            }
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
    }
}

public struct DescribeObjectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeObjectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeObjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeObjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeObjectsOutputError>
}

public struct DescribeObjectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeObjectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeObjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeObjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeObjectsOutputError>
}

public struct DescribeObjectsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeObjectsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeObjectsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeObjectsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeObjectsOutputError>
}

public struct DescribeObjectsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeObjectsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeObjectsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeObjectsInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeObjectsOutputError>
}

/// Contains the parameters for DescribeObjects.
public struct DescribeObjectsInput: Swift.Equatable {
    /// Indicates whether any expressions in the object should be evaluated when the object descriptions are returned.
    public var evaluateExpressions: Swift.Bool
    /// The starting point for the results to be returned. For the first call, this value should be empty.
    ///            As long as there are more results, continue to call DescribeObjects with
    ///            the marker value from the previous call to retrieve the next set of results.
    public var marker: Swift.String?
    /// The IDs of the pipeline objects that contain the definitions to be described. You can pass as many as 25 identifiers in a single call to DescribeObjects.
    /// This member is required.
    public var objectIds: [Swift.String]?
    /// The ID of the pipeline that contains the object definitions.
    /// This member is required.
    public var pipelineId: Swift.String?

    public init (
        evaluateExpressions: Swift.Bool = false,
        marker: Swift.String? = nil,
        objectIds: [Swift.String]? = nil,
        pipelineId: Swift.String? = nil
    )
    {
        self.evaluateExpressions = evaluateExpressions
        self.marker = marker
        self.objectIds = objectIds
        self.pipelineId = pipelineId
    }
}

struct DescribeObjectsInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
    public let objectIds: [Swift.String]?
    public let evaluateExpressions: Swift.Bool
    public let marker: Swift.String?
}

extension DescribeObjectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluateExpressions
        case marker
        case objectIds
        case pipelineId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let objectIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .objectIds)
        var objectIdsDecoded0:[Swift.String]? = nil
        if let objectIdsContainer = objectIdsContainer {
            objectIdsDecoded0 = [Swift.String]()
            for string0 in objectIdsContainer {
                if let string0 = string0 {
                    objectIdsDecoded0?.append(string0)
                }
            }
        }
        objectIds = objectIdsDecoded0
        let evaluateExpressionsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .evaluateExpressions)
        evaluateExpressions = evaluateExpressionsDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension DescribeObjectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeObjectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeObjectsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeObjectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeObjectsOutputResponse(hasMoreResults: \(Swift.String(describing: hasMoreResults)), marker: \(Swift.String(describing: marker)), pipelineObjects: \(Swift.String(describing: pipelineObjects)))"}
}

extension DescribeObjectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeObjectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hasMoreResults = output.hasMoreResults
            self.marker = output.marker
            self.pipelineObjects = output.pipelineObjects
        } else {
            self.hasMoreResults = false
            self.marker = nil
            self.pipelineObjects = nil
        }
    }
}

/// Contains the output of DescribeObjects.
public struct DescribeObjectsOutputResponse: Swift.Equatable {
    /// Indicates whether there are more results to return.
    public var hasMoreResults: Swift.Bool
    /// The starting point for the next page of results. To view the next page of results, call DescribeObjects
    ///            again with this marker value. If the value is null, there are no more results.
    public var marker: Swift.String?
    /// An array of object definitions.
    /// This member is required.
    public var pipelineObjects: [DataPipelineClientTypes.PipelineObject]?

    public init (
        hasMoreResults: Swift.Bool = false,
        marker: Swift.String? = nil,
        pipelineObjects: [DataPipelineClientTypes.PipelineObject]? = nil
    )
    {
        self.hasMoreResults = hasMoreResults
        self.marker = marker
        self.pipelineObjects = pipelineObjects
    }
}

struct DescribeObjectsOutputResponseBody: Swift.Equatable {
    public let pipelineObjects: [DataPipelineClientTypes.PipelineObject]?
    public let marker: Swift.String?
    public let hasMoreResults: Swift.Bool
}

extension DescribeObjectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hasMoreResults
        case marker
        case pipelineObjects
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineObjectsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.PipelineObject?].self, forKey: .pipelineObjects)
        var pipelineObjectsDecoded0:[DataPipelineClientTypes.PipelineObject]? = nil
        if let pipelineObjectsContainer = pipelineObjectsContainer {
            pipelineObjectsDecoded0 = [DataPipelineClientTypes.PipelineObject]()
            for structure0 in pipelineObjectsContainer {
                if let structure0 = structure0 {
                    pipelineObjectsDecoded0?.append(structure0)
                }
            }
        }
        pipelineObjects = pipelineObjectsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let hasMoreResultsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .hasMoreResults)
        hasMoreResults = hasMoreResultsDecoded
    }
}

public struct DescribePipelinesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePipelinesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePipelinesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePipelinesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePipelinesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePipelinesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePipelinesOutputError>
}

extension DescribePipelinesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribePipelinesInput(pipelineIds: \(Swift.String(describing: pipelineIds)))"}
}

extension DescribePipelinesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineIds
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineIds = pipelineIds {
            var pipelineIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineIds)
            for idlist0 in pipelineIds {
                try pipelineIdsContainer.encode(idlist0)
            }
        }
    }
}

public struct DescribePipelinesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePipelinesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePipelinesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePipelinesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePipelinesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePipelinesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePipelinesOutputError>
}

public struct DescribePipelinesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePipelinesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribePipelinesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePipelinesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribePipelinesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePipelinesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePipelinesOutputError>
}

public struct DescribePipelinesInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePipelinesInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribePipelinesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePipelinesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribePipelinesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePipelinesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePipelinesOutputError>
}

public struct DescribePipelinesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribePipelinesInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribePipelinesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribePipelinesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribePipelinesInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribePipelinesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribePipelinesOutputError>
}

/// Contains the parameters for DescribePipelines.
public struct DescribePipelinesInput: Swift.Equatable {
    /// The IDs of the pipelines to describe. You can pass as many as 25 identifiers in a single call.
    ///             To obtain pipeline IDs, call ListPipelines.
    /// This member is required.
    public var pipelineIds: [Swift.String]?

    public init (
        pipelineIds: [Swift.String]? = nil
    )
    {
        self.pipelineIds = pipelineIds
    }
}

struct DescribePipelinesInputBody: Swift.Equatable {
    public let pipelineIds: [Swift.String]?
}

extension DescribePipelinesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineIds
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pipelineIds)
        var pipelineIdsDecoded0:[Swift.String]? = nil
        if let pipelineIdsContainer = pipelineIdsContainer {
            pipelineIdsDecoded0 = [Swift.String]()
            for string0 in pipelineIdsContainer {
                if let string0 = string0 {
                    pipelineIdsDecoded0?.append(string0)
                }
            }
        }
        pipelineIds = pipelineIdsDecoded0
    }
}

extension DescribePipelinesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribePipelinesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribePipelinesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribePipelinesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribePipelinesOutputResponse(pipelineDescriptionList: \(Swift.String(describing: pipelineDescriptionList)))"}
}

extension DescribePipelinesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribePipelinesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.pipelineDescriptionList = output.pipelineDescriptionList
        } else {
            self.pipelineDescriptionList = nil
        }
    }
}

/// Contains the output of DescribePipelines.
public struct DescribePipelinesOutputResponse: Swift.Equatable {
    /// An array of descriptions for the specified pipelines.
    /// This member is required.
    public var pipelineDescriptionList: [DataPipelineClientTypes.PipelineDescription]?

    public init (
        pipelineDescriptionList: [DataPipelineClientTypes.PipelineDescription]? = nil
    )
    {
        self.pipelineDescriptionList = pipelineDescriptionList
    }
}

struct DescribePipelinesOutputResponseBody: Swift.Equatable {
    public let pipelineDescriptionList: [DataPipelineClientTypes.PipelineDescription]?
}

extension DescribePipelinesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineDescriptionList
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineDescriptionListContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.PipelineDescription?].self, forKey: .pipelineDescriptionList)
        var pipelineDescriptionListDecoded0:[DataPipelineClientTypes.PipelineDescription]? = nil
        if let pipelineDescriptionListContainer = pipelineDescriptionListContainer {
            pipelineDescriptionListDecoded0 = [DataPipelineClientTypes.PipelineDescription]()
            for structure0 in pipelineDescriptionListContainer {
                if let structure0 = structure0 {
                    pipelineDescriptionListDecoded0?.append(structure0)
                }
            }
        }
        pipelineDescriptionList = pipelineDescriptionListDecoded0
    }
}

public struct EvaluateExpressionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EvaluateExpressionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EvaluateExpressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EvaluateExpressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EvaluateExpressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EvaluateExpressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EvaluateExpressionOutputError>
}

extension EvaluateExpressionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EvaluateExpressionInput(expression: \(Swift.String(describing: expression)), objectId: \(Swift.String(describing: objectId)), pipelineId: \(Swift.String(describing: pipelineId)))"}
}

extension EvaluateExpressionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression
        case objectId
        case pipelineId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expression = expression {
            try encodeContainer.encode(expression, forKey: .expression)
        }
        if let objectId = objectId {
            try encodeContainer.encode(objectId, forKey: .objectId)
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
    }
}

public struct EvaluateExpressionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EvaluateExpressionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EvaluateExpressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EvaluateExpressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EvaluateExpressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EvaluateExpressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EvaluateExpressionOutputError>
}

public struct EvaluateExpressionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EvaluateExpressionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EvaluateExpressionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EvaluateExpressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EvaluateExpressionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EvaluateExpressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EvaluateExpressionOutputError>
}

public struct EvaluateExpressionInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EvaluateExpressionInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: EvaluateExpressionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EvaluateExpressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = EvaluateExpressionInput
    public typealias MOutput = ClientRuntime.OperationOutput<EvaluateExpressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EvaluateExpressionOutputError>
}

public struct EvaluateExpressionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EvaluateExpressionInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: EvaluateExpressionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EvaluateExpressionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = EvaluateExpressionInput
    public typealias MOutput = ClientRuntime.OperationOutput<EvaluateExpressionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EvaluateExpressionOutputError>
}

/// Contains the parameters for EvaluateExpression.
public struct EvaluateExpressionInput: Swift.Equatable {
    /// The expression to evaluate.
    /// This member is required.
    public var expression: Swift.String?
    /// The ID of the object.
    /// This member is required.
    public var objectId: Swift.String?
    /// The ID of the pipeline.
    /// This member is required.
    public var pipelineId: Swift.String?

    public init (
        expression: Swift.String? = nil,
        objectId: Swift.String? = nil,
        pipelineId: Swift.String? = nil
    )
    {
        self.expression = expression
        self.objectId = objectId
        self.pipelineId = pipelineId
    }
}

struct EvaluateExpressionInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
    public let objectId: Swift.String?
    public let expression: Swift.String?
}

extension EvaluateExpressionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expression
        case objectId
        case pipelineId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let objectIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectId)
        objectId = objectIdDecoded
        let expressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expression)
        expression = expressionDecoded
    }
}

extension EvaluateExpressionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EvaluateExpressionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskNotFoundException" : self = .taskNotFoundException(try TaskNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EvaluateExpressionOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case taskNotFoundException(TaskNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EvaluateExpressionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EvaluateExpressionOutputResponse(evaluatedExpression: \(Swift.String(describing: evaluatedExpression)))"}
}

extension EvaluateExpressionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EvaluateExpressionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.evaluatedExpression = output.evaluatedExpression
        } else {
            self.evaluatedExpression = nil
        }
    }
}

/// Contains the output of EvaluateExpression.
public struct EvaluateExpressionOutputResponse: Swift.Equatable {
    /// The evaluated expression.
    /// This member is required.
    public var evaluatedExpression: Swift.String?

    public init (
        evaluatedExpression: Swift.String? = nil
    )
    {
        self.evaluatedExpression = evaluatedExpression
    }
}

struct EvaluateExpressionOutputResponseBody: Swift.Equatable {
    public let evaluatedExpression: Swift.String?
}

extension EvaluateExpressionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluatedExpression
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluatedExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluatedExpression)
        evaluatedExpression = evaluatedExpressionDecoded
    }
}

extension DataPipelineClientTypes.Field: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case refValue
        case stringValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let refValue = refValue {
            try encodeContainer.encode(refValue, forKey: .refValue)
        }
        if let stringValue = stringValue {
            try encodeContainer.encode(stringValue, forKey: .stringValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let stringValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stringValue)
        stringValue = stringValueDecoded
        let refValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .refValue)
        refValue = refValueDecoded
    }
}

extension DataPipelineClientTypes.Field: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Field(key: \(Swift.String(describing: key)), refValue: \(Swift.String(describing: refValue)), stringValue: \(Swift.String(describing: stringValue)))"}
}

extension DataPipelineClientTypes {
    /// A key-value pair that describes a property of a pipeline object. The value is specified as either a string value (StringValue) or a reference to another object (RefValue) but not as both.
    public struct Field: Swift.Equatable {
        /// The field identifier.
        /// This member is required.
        public var key: Swift.String?
        /// The field value, expressed as the identifier of another object.
        public var refValue: Swift.String?
        /// The field value, expressed as a String.
        public var stringValue: Swift.String?

        public init (
            key: Swift.String? = nil,
            refValue: Swift.String? = nil,
            stringValue: Swift.String? = nil
        )
        {
            self.key = key
            self.refValue = refValue
            self.stringValue = stringValue
        }
    }

}

public struct GetPipelineDefinitionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPipelineDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPipelineDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPipelineDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPipelineDefinitionOutputError>
}

extension GetPipelineDefinitionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPipelineDefinitionInput(pipelineId: \(Swift.String(describing: pipelineId)), version: \(Swift.String(describing: version)))"}
}

extension GetPipelineDefinitionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineId
        case version
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }
}

public struct GetPipelineDefinitionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPipelineDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPipelineDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPipelineDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPipelineDefinitionOutputError>
}

public struct GetPipelineDefinitionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPipelineDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetPipelineDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetPipelineDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetPipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPipelineDefinitionOutputError>
}

public struct GetPipelineDefinitionInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPipelineDefinitionInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetPipelineDefinitionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetPipelineDefinitionInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetPipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPipelineDefinitionOutputError>
}

public struct GetPipelineDefinitionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetPipelineDefinitionInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetPipelineDefinitionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetPipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetPipelineDefinitionInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetPipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetPipelineDefinitionOutputError>
}

/// Contains the parameters for GetPipelineDefinition.
public struct GetPipelineDefinitionInput: Swift.Equatable {
    /// The ID of the pipeline.
    /// This member is required.
    public var pipelineId: Swift.String?
    /// The version of the pipeline definition to retrieve. Set this parameter to latest (default)
    ///             to use the last definition saved to the pipeline or active to use the last definition
    ///             that was activated.
    public var version: Swift.String?

    public init (
        pipelineId: Swift.String? = nil,
        version: Swift.String? = nil
    )
    {
        self.pipelineId = pipelineId
        self.version = version
    }
}

struct GetPipelineDefinitionInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
    public let version: Swift.String?
}

extension GetPipelineDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineId
        case version
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension GetPipelineDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetPipelineDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetPipelineDefinitionOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetPipelineDefinitionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetPipelineDefinitionOutputResponse(parameterObjects: \(Swift.String(describing: parameterObjects)), parameterValues: \(Swift.String(describing: parameterValues)), pipelineObjects: \(Swift.String(describing: pipelineObjects)))"}
}

extension GetPipelineDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetPipelineDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.parameterObjects = output.parameterObjects
            self.parameterValues = output.parameterValues
            self.pipelineObjects = output.pipelineObjects
        } else {
            self.parameterObjects = nil
            self.parameterValues = nil
            self.pipelineObjects = nil
        }
    }
}

/// Contains the output of GetPipelineDefinition.
public struct GetPipelineDefinitionOutputResponse: Swift.Equatable {
    /// The parameter objects used in the pipeline definition.
    public var parameterObjects: [DataPipelineClientTypes.ParameterObject]?
    /// The parameter values used in the pipeline definition.
    public var parameterValues: [DataPipelineClientTypes.ParameterValue]?
    /// The objects defined in the pipeline.
    public var pipelineObjects: [DataPipelineClientTypes.PipelineObject]?

    public init (
        parameterObjects: [DataPipelineClientTypes.ParameterObject]? = nil,
        parameterValues: [DataPipelineClientTypes.ParameterValue]? = nil,
        pipelineObjects: [DataPipelineClientTypes.PipelineObject]? = nil
    )
    {
        self.parameterObjects = parameterObjects
        self.parameterValues = parameterValues
        self.pipelineObjects = pipelineObjects
    }
}

struct GetPipelineDefinitionOutputResponseBody: Swift.Equatable {
    public let pipelineObjects: [DataPipelineClientTypes.PipelineObject]?
    public let parameterObjects: [DataPipelineClientTypes.ParameterObject]?
    public let parameterValues: [DataPipelineClientTypes.ParameterValue]?
}

extension GetPipelineDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterObjects
        case parameterValues
        case pipelineObjects
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineObjectsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.PipelineObject?].self, forKey: .pipelineObjects)
        var pipelineObjectsDecoded0:[DataPipelineClientTypes.PipelineObject]? = nil
        if let pipelineObjectsContainer = pipelineObjectsContainer {
            pipelineObjectsDecoded0 = [DataPipelineClientTypes.PipelineObject]()
            for structure0 in pipelineObjectsContainer {
                if let structure0 = structure0 {
                    pipelineObjectsDecoded0?.append(structure0)
                }
            }
        }
        pipelineObjects = pipelineObjectsDecoded0
        let parameterObjectsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ParameterObject?].self, forKey: .parameterObjects)
        var parameterObjectsDecoded0:[DataPipelineClientTypes.ParameterObject]? = nil
        if let parameterObjectsContainer = parameterObjectsContainer {
            parameterObjectsDecoded0 = [DataPipelineClientTypes.ParameterObject]()
            for structure0 in parameterObjectsContainer {
                if let structure0 = structure0 {
                    parameterObjectsDecoded0?.append(structure0)
                }
            }
        }
        parameterObjects = parameterObjectsDecoded0
        let parameterValuesContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ParameterValue?].self, forKey: .parameterValues)
        var parameterValuesDecoded0:[DataPipelineClientTypes.ParameterValue]? = nil
        if let parameterValuesContainer = parameterValuesContainer {
            parameterValuesDecoded0 = [DataPipelineClientTypes.ParameterValue]()
            for structure0 in parameterValuesContainer {
                if let structure0 = structure0 {
                    parameterValuesDecoded0?.append(structure0)
                }
            }
        }
        parameterValues = parameterValuesDecoded0
    }
}

extension DataPipelineClientTypes.InstanceIdentity: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case document
        case signature
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let document = document {
            try encodeContainer.encode(document, forKey: .document)
        }
        if let signature = signature {
            try encodeContainer.encode(signature, forKey: .signature)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let documentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .document)
        document = documentDecoded
        let signatureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signature)
        signature = signatureDecoded
    }
}

extension DataPipelineClientTypes.InstanceIdentity: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceIdentity(document: \(Swift.String(describing: document)), signature: \(Swift.String(describing: signature)))"}
}

extension DataPipelineClientTypes {
    /// Identity information for the EC2 instance that is hosting the task runner. You can get this value by calling a metadata URI from the EC2 instance.
    ///             For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">Instance Metadata in the Amazon Elastic Compute Cloud User Guide.
    ///             Passing in this value proves that your task runner is running on an EC2 instance, and ensures the proper AWS Data Pipeline service charges are applied to your pipeline.
    public struct InstanceIdentity: Swift.Equatable {
        /// A description of an EC2 instance that is generated when the instance is launched and exposed to the instance via the instance metadata service in the form of a JSON representation of an object.
        public var document: Swift.String?
        /// A signature which can be used to verify the accuracy and authenticity of the information provided in the instance identity document.
        public var signature: Swift.String?

        public init (
            document: Swift.String? = nil,
            signature: Swift.String? = nil
        )
        {
            self.document = document
            self.signature = signature
        }
    }

}

extension InternalServiceError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServiceError(message: \(Swift.String(describing: message)))"}
}

extension InternalServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServiceErrorBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An internal service error occurred.
public struct InternalServiceError: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// Description of the error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServiceErrorBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServiceErrorBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidRequestException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidRequestException(message: \(Swift.String(describing: message)))"}
}

extension InvalidRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was not valid. Verify that your request was properly formatted, that the signature was generated with the correct credentials, and that you haven't exceeded any of the service limits for your account.
public struct InvalidRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Description of the error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct ListPipelinesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPipelinesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPipelinesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPipelinesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPipelinesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPipelinesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPipelinesOutputError>
}

extension ListPipelinesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPipelinesInput(marker: \(Swift.String(describing: marker)))"}
}

extension ListPipelinesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
    }
}

public struct ListPipelinesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPipelinesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPipelinesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPipelinesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPipelinesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPipelinesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPipelinesOutputError>
}

public struct ListPipelinesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPipelinesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListPipelinesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPipelinesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListPipelinesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListPipelinesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPipelinesOutputError>
}

public struct ListPipelinesInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPipelinesInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListPipelinesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPipelinesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListPipelinesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListPipelinesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPipelinesOutputError>
}

public struct ListPipelinesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListPipelinesInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListPipelinesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListPipelinesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListPipelinesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListPipelinesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListPipelinesOutputError>
}

/// Contains the parameters for ListPipelines.
public struct ListPipelinesInput: Swift.Equatable {
    /// The starting point for the results to be returned. For the first call, this value should be empty.
    ///            As long as there are more results, continue to call ListPipelines with
    ///            the marker value from the previous call to retrieve the next set of results.
    public var marker: Swift.String?

    public init (
        marker: Swift.String? = nil
    )
    {
        self.marker = marker
    }
}

struct ListPipelinesInputBody: Swift.Equatable {
    public let marker: Swift.String?
}

extension ListPipelinesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case marker
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
    }
}

extension ListPipelinesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListPipelinesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListPipelinesOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListPipelinesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListPipelinesOutputResponse(hasMoreResults: \(Swift.String(describing: hasMoreResults)), marker: \(Swift.String(describing: marker)), pipelineIdList: \(Swift.String(describing: pipelineIdList)))"}
}

extension ListPipelinesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListPipelinesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hasMoreResults = output.hasMoreResults
            self.marker = output.marker
            self.pipelineIdList = output.pipelineIdList
        } else {
            self.hasMoreResults = false
            self.marker = nil
            self.pipelineIdList = nil
        }
    }
}

/// Contains the output of ListPipelines.
public struct ListPipelinesOutputResponse: Swift.Equatable {
    /// Indicates whether there are more results that can be obtained by a subsequent call.
    public var hasMoreResults: Swift.Bool
    /// The starting point for the next page of results. To view the next page of results, call ListPipelinesOutput
    ///            again with this marker value. If the value is null, there are no more results.
    public var marker: Swift.String?
    /// The pipeline identifiers. If you require additional information about the pipelines, you can use these identifiers to call
    ///             DescribePipelines and GetPipelineDefinition.
    /// This member is required.
    public var pipelineIdList: [DataPipelineClientTypes.PipelineIdName]?

    public init (
        hasMoreResults: Swift.Bool = false,
        marker: Swift.String? = nil,
        pipelineIdList: [DataPipelineClientTypes.PipelineIdName]? = nil
    )
    {
        self.hasMoreResults = hasMoreResults
        self.marker = marker
        self.pipelineIdList = pipelineIdList
    }
}

struct ListPipelinesOutputResponseBody: Swift.Equatable {
    public let pipelineIdList: [DataPipelineClientTypes.PipelineIdName]?
    public let marker: Swift.String?
    public let hasMoreResults: Swift.Bool
}

extension ListPipelinesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hasMoreResults
        case marker
        case pipelineIdList
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdListContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.PipelineIdName?].self, forKey: .pipelineIdList)
        var pipelineIdListDecoded0:[DataPipelineClientTypes.PipelineIdName]? = nil
        if let pipelineIdListContainer = pipelineIdListContainer {
            pipelineIdListDecoded0 = [DataPipelineClientTypes.PipelineIdName]()
            for structure0 in pipelineIdListContainer {
                if let structure0 = structure0 {
                    pipelineIdListDecoded0?.append(structure0)
                }
            }
        }
        pipelineIdList = pipelineIdListDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let hasMoreResultsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .hasMoreResults)
        hasMoreResults = hasMoreResultsDecoded
    }
}

extension DataPipelineClientTypes.Operator: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for stringlist0 in values {
                try valuesContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(DataPipelineClientTypes.OperatorType.self, forKey: .type)
        type = typeDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension DataPipelineClientTypes.Operator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Operator(type: \(Swift.String(describing: type)), values: \(Swift.String(describing: values)))"}
}

extension DataPipelineClientTypes {
    /// Contains a logical operation for comparing the value of a field with a specified value.
    public struct Operator: Swift.Equatable {
        ///
        ///             The logical operation to be performed: equal (EQ), equal reference (REF_EQ), less than or equal (LE), greater than or equal (GE), or between (BETWEEN). Equal reference (REF_EQ) can be used only with reference fields. The other comparison types can be used only with String fields. The comparison types you can use apply only to certain object fields, as detailed below.
        ///
        ///
        ///           The comparison operators EQ and REF_EQ act on the following fields:
        ///
        ///
        ///             name
        ///             @sphere
        ///             parent
        ///             @componentParent
        ///             @instanceParent
        ///             @status
        ///             @scheduledStartTime
        ///             @scheduledEndTime
        ///             @actualStartTime
        ///             @actualEndTime
        ///
        ///
        ///
        ///             The comparison operators GE, LE, and BETWEEN act on the following fields:
        ///
        ///
        ///             @scheduledStartTime
        ///             @scheduledEndTime
        ///             @actualStartTime
        ///             @actualEndTime
        ///
        ///         Note that fields beginning with the at sign (@) are read-only and set by the web service. When you name fields, you should choose names containing only alpha-numeric values, as symbols may be reserved by AWS Data Pipeline. User-defined fields that you add to a pipeline should prefix their name with the string "my".
        public var type: DataPipelineClientTypes.OperatorType?
        /// The value that the actual field value will be compared with.
        public var values: [Swift.String]?

        public init (
            type: DataPipelineClientTypes.OperatorType? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.type = type
            self.values = values
        }
    }

}

extension DataPipelineClientTypes {
    public enum OperatorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case between
        case equal
        case greaterthanorequal
        case lessthanorequal
        case referenceequal
        case sdkUnknown(Swift.String)

        public static var allCases: [OperatorType] {
            return [
                .between,
                .equal,
                .greaterthanorequal,
                .lessthanorequal,
                .referenceequal,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .between: return "BETWEEN"
            case .equal: return "EQ"
            case .greaterthanorequal: return "GE"
            case .lessthanorequal: return "LE"
            case .referenceequal: return "REF_EQ"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OperatorType(rawValue: rawValue) ?? OperatorType.sdkUnknown(rawValue)
        }
    }
}

extension DataPipelineClientTypes.ParameterAttribute: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case stringValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let stringValue = stringValue {
            try encodeContainer.encode(stringValue, forKey: .stringValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let stringValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stringValue)
        stringValue = stringValueDecoded
    }
}

extension DataPipelineClientTypes.ParameterAttribute: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ParameterAttribute(key: \(Swift.String(describing: key)), stringValue: \(Swift.String(describing: stringValue)))"}
}

extension DataPipelineClientTypes {
    /// The attributes allowed or specified with a parameter object.
    public struct ParameterAttribute: Swift.Equatable {
        /// The field identifier.
        /// This member is required.
        public var key: Swift.String?
        /// The field value, expressed as a String.
        /// This member is required.
        public var stringValue: Swift.String?

        public init (
            key: Swift.String? = nil,
            stringValue: Swift.String? = nil
        )
        {
            self.key = key
            self.stringValue = stringValue
        }
    }

}

extension DataPipelineClientTypes.ParameterObject: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes
        case id
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for parameterattributelist0 in attributes {
                try attributesContainer.encode(parameterattributelist0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let attributesContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ParameterAttribute?].self, forKey: .attributes)
        var attributesDecoded0:[DataPipelineClientTypes.ParameterAttribute]? = nil
        if let attributesContainer = attributesContainer {
            attributesDecoded0 = [DataPipelineClientTypes.ParameterAttribute]()
            for structure0 in attributesContainer {
                if let structure0 = structure0 {
                    attributesDecoded0?.append(structure0)
                }
            }
        }
        attributes = attributesDecoded0
    }
}

extension DataPipelineClientTypes.ParameterObject: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ParameterObject(attributes: \(Swift.String(describing: attributes)), id: \(Swift.String(describing: id)))"}
}

extension DataPipelineClientTypes {
    /// Contains information about a parameter object.
    public struct ParameterObject: Swift.Equatable {
        /// The attributes of the parameter object.
        /// This member is required.
        public var attributes: [DataPipelineClientTypes.ParameterAttribute]?
        /// The ID of the parameter object.
        /// This member is required.
        public var id: Swift.String?

        public init (
            attributes: [DataPipelineClientTypes.ParameterAttribute]? = nil,
            id: Swift.String? = nil
        )
        {
            self.attributes = attributes
            self.id = id
        }
    }

}

extension DataPipelineClientTypes.ParameterValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case stringValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let stringValue = stringValue {
            try encodeContainer.encode(stringValue, forKey: .stringValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let stringValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stringValue)
        stringValue = stringValueDecoded
    }
}

extension DataPipelineClientTypes.ParameterValue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ParameterValue(id: \(Swift.String(describing: id)), stringValue: \(Swift.String(describing: stringValue)))"}
}

extension DataPipelineClientTypes {
    /// A value or list of parameter values.
    public struct ParameterValue: Swift.Equatable {
        /// The ID of the parameter value.
        /// This member is required.
        public var id: Swift.String?
        /// The field value, expressed as a String.
        /// This member is required.
        public var stringValue: Swift.String?

        public init (
            id: Swift.String? = nil,
            stringValue: Swift.String? = nil
        )
        {
            self.id = id
            self.stringValue = stringValue
        }
    }

}

extension PipelineDeletedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipelineDeletedException(message: \(Swift.String(describing: message)))"}
}

extension PipelineDeletedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PipelineDeletedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified pipeline has been deleted.
public struct PipelineDeletedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Description of the error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PipelineDeletedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension PipelineDeletedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DataPipelineClientTypes.PipelineDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description
        case fields
        case name
        case pipelineId
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let fields = fields {
            var fieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fields)
            for fieldlist0 in fields {
                try fieldsContainer.encode(fieldlist0)
            }
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.Field?].self, forKey: .fields)
        var fieldsDecoded0:[DataPipelineClientTypes.Field]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [DataPipelineClientTypes.Field]()
            for structure0 in fieldsContainer {
                if let structure0 = structure0 {
                    fieldsDecoded0?.append(structure0)
                }
            }
        }
        fields = fieldsDecoded0
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[DataPipelineClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataPipelineClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension DataPipelineClientTypes.PipelineDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipelineDescription(description: \(Swift.String(describing: description)), fields: \(Swift.String(describing: fields)), name: \(Swift.String(describing: name)), pipelineId: \(Swift.String(describing: pipelineId)), tags: \(Swift.String(describing: tags)))"}
}

extension DataPipelineClientTypes {
    /// Contains pipeline metadata.
    public struct PipelineDescription: Swift.Equatable {
        /// Description of the pipeline.
        public var description: Swift.String?
        /// A list of read-only fields that contain metadata about the pipeline: @userId, @accountId, and @pipelineState.
        /// This member is required.
        public var fields: [DataPipelineClientTypes.Field]?
        /// The name of the pipeline.
        /// This member is required.
        public var name: Swift.String?
        /// The pipeline identifier that was assigned by AWS Data Pipeline. This is a string of the form df-297EG78HU43EEXAMPLE.
        /// This member is required.
        public var pipelineId: Swift.String?
        /// A list of tags to associated with a pipeline. Tags let you control access to pipelines.
        ///             For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines in the AWS Data Pipeline Developer Guide.
        public var tags: [DataPipelineClientTypes.Tag]?

        public init (
            description: Swift.String? = nil,
            fields: [DataPipelineClientTypes.Field]? = nil,
            name: Swift.String? = nil,
            pipelineId: Swift.String? = nil,
            tags: [DataPipelineClientTypes.Tag]? = nil
        )
        {
            self.description = description
            self.fields = fields
            self.name = name
            self.pipelineId = pipelineId
            self.tags = tags
        }
    }

}

extension DataPipelineClientTypes.PipelineIdName: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DataPipelineClientTypes.PipelineIdName: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipelineIdName(id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)))"}
}

extension DataPipelineClientTypes {
    /// Contains the name and identifier of a pipeline.
    public struct PipelineIdName: Swift.Equatable {
        /// The ID of the pipeline that was assigned by AWS Data Pipeline. This is a string of the form df-297EG78HU43EEXAMPLE.
        public var id: Swift.String?
        /// The name of the pipeline.
        public var name: Swift.String?

        public init (
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.id = id
            self.name = name
        }
    }

}

extension PipelineNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipelineNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension PipelineNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PipelineNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified pipeline was not found. Verify that you used the correct user and account identifiers.
public struct PipelineNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Description of the error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PipelineNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension PipelineNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DataPipelineClientTypes.PipelineObject: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fields
        case id
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fields = fields {
            var fieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fields)
            for fieldlist0 in fields {
                try fieldsContainer.encode(fieldlist0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.Field?].self, forKey: .fields)
        var fieldsDecoded0:[DataPipelineClientTypes.Field]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [DataPipelineClientTypes.Field]()
            for structure0 in fieldsContainer {
                if let structure0 = structure0 {
                    fieldsDecoded0?.append(structure0)
                }
            }
        }
        fields = fieldsDecoded0
    }
}

extension DataPipelineClientTypes.PipelineObject: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PipelineObject(fields: \(Swift.String(describing: fields)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)))"}
}

extension DataPipelineClientTypes {
    /// Contains information about a pipeline object. This can be a logical, physical, or physical attempt pipeline object. The complete set of components of a pipeline defines the pipeline.
    public struct PipelineObject: Swift.Equatable {
        /// Key-value pairs that define the properties of the object.
        /// This member is required.
        public var fields: [DataPipelineClientTypes.Field]?
        /// The ID of the object.
        /// This member is required.
        public var id: Swift.String?
        /// The name of the object.
        /// This member is required.
        public var name: Swift.String?

        public init (
            fields: [DataPipelineClientTypes.Field]? = nil,
            id: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.fields = fields
            self.id = id
            self.name = name
        }
    }

}

public struct PollForTaskInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PollForTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PollForTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PollForTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PollForTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PollForTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PollForTaskOutputError>
}

extension PollForTaskInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PollForTaskInput(hostname: \(Swift.String(describing: hostname)), instanceIdentity: \(Swift.String(describing: instanceIdentity)), workerGroup: \(Swift.String(describing: workerGroup)))"}
}

extension PollForTaskInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostname
        case instanceIdentity
        case workerGroup
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hostname = hostname {
            try encodeContainer.encode(hostname, forKey: .hostname)
        }
        if let instanceIdentity = instanceIdentity {
            try encodeContainer.encode(instanceIdentity, forKey: .instanceIdentity)
        }
        if let workerGroup = workerGroup {
            try encodeContainer.encode(workerGroup, forKey: .workerGroup)
        }
    }
}

public struct PollForTaskInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PollForTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PollForTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PollForTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PollForTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PollForTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PollForTaskOutputError>
}

public struct PollForTaskInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PollForTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PollForTaskInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PollForTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PollForTaskInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PollForTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PollForTaskOutputError>
}

public struct PollForTaskInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PollForTaskInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: PollForTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PollForTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PollForTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<PollForTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PollForTaskOutputError>
}

public struct PollForTaskInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PollForTaskInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: PollForTaskInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PollForTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PollForTaskInput
    public typealias MOutput = ClientRuntime.OperationOutput<PollForTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PollForTaskOutputError>
}

/// Contains the parameters for PollForTask.
public struct PollForTaskInput: Swift.Equatable {
    /// The public DNS name of the calling task runner.
    public var hostname: Swift.String?
    /// Identity information for the EC2 instance that is hosting the task runner. You can get this value from the instance using http://169.254.169.254/latest/meta-data/instance-id. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">Instance Metadata in the Amazon Elastic Compute Cloud User Guide. Passing in this value proves that your task runner is running on an EC2 instance, and ensures the proper AWS Data Pipeline service charges are applied to your pipeline.
    public var instanceIdentity: DataPipelineClientTypes.InstanceIdentity?
    /// The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created.
    ///             You can only specify a single value for workerGroup in the call to PollForTask. There are no wildcard values permitted in
    ///             workerGroup; the string must be an exact, case-sensitive, match.
    /// This member is required.
    public var workerGroup: Swift.String?

    public init (
        hostname: Swift.String? = nil,
        instanceIdentity: DataPipelineClientTypes.InstanceIdentity? = nil,
        workerGroup: Swift.String? = nil
    )
    {
        self.hostname = hostname
        self.instanceIdentity = instanceIdentity
        self.workerGroup = workerGroup
    }
}

struct PollForTaskInputBody: Swift.Equatable {
    public let workerGroup: Swift.String?
    public let hostname: Swift.String?
    public let instanceIdentity: DataPipelineClientTypes.InstanceIdentity?
}

extension PollForTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostname
        case instanceIdentity
        case workerGroup
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let workerGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerGroup)
        workerGroup = workerGroupDecoded
        let hostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostname)
        hostname = hostnameDecoded
        let instanceIdentityDecoded = try containerValues.decodeIfPresent(DataPipelineClientTypes.InstanceIdentity.self, forKey: .instanceIdentity)
        instanceIdentity = instanceIdentityDecoded
    }
}

extension PollForTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PollForTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskNotFoundException" : self = .taskNotFoundException(try TaskNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PollForTaskOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case taskNotFoundException(TaskNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PollForTaskOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PollForTaskOutputResponse(taskObject: \(Swift.String(describing: taskObject)))"}
}

extension PollForTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PollForTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskObject = output.taskObject
        } else {
            self.taskObject = nil
        }
    }
}

/// Contains the output of PollForTask.
public struct PollForTaskOutputResponse: Swift.Equatable {
    /// The information needed to complete the task that is being assigned to the task runner. One of the fields returned in this object is taskId,
    ///             which contains an identifier for the task being assigned. The calling task runner uses taskId in subsequent calls to ReportTaskProgress
    ///             and SetTaskStatus.
    public var taskObject: DataPipelineClientTypes.TaskObject?

    public init (
        taskObject: DataPipelineClientTypes.TaskObject? = nil
    )
    {
        self.taskObject = taskObject
    }
}

struct PollForTaskOutputResponseBody: Swift.Equatable {
    public let taskObject: DataPipelineClientTypes.TaskObject?
}

extension PollForTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskObject
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskObjectDecoded = try containerValues.decodeIfPresent(DataPipelineClientTypes.TaskObject.self, forKey: .taskObject)
        taskObject = taskObjectDecoded
    }
}

public struct PutPipelineDefinitionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutPipelineDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutPipelineDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutPipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutPipelineDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutPipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutPipelineDefinitionOutputError>
}

extension PutPipelineDefinitionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutPipelineDefinitionInput(parameterObjects: \(Swift.String(describing: parameterObjects)), parameterValues: \(Swift.String(describing: parameterValues)), pipelineId: \(Swift.String(describing: pipelineId)), pipelineObjects: \(Swift.String(describing: pipelineObjects)))"}
}

extension PutPipelineDefinitionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterObjects
        case parameterValues
        case pipelineId
        case pipelineObjects
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameterObjects = parameterObjects {
            var parameterObjectsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameterObjects)
            for parameterobjectlist0 in parameterObjects {
                try parameterObjectsContainer.encode(parameterobjectlist0)
            }
        }
        if let parameterValues = parameterValues {
            var parameterValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameterValues)
            for parametervaluelist0 in parameterValues {
                try parameterValuesContainer.encode(parametervaluelist0)
            }
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let pipelineObjects = pipelineObjects {
            var pipelineObjectsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineObjects)
            for pipelineobjectlist0 in pipelineObjects {
                try pipelineObjectsContainer.encode(pipelineobjectlist0)
            }
        }
    }
}

public struct PutPipelineDefinitionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutPipelineDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutPipelineDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutPipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutPipelineDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutPipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutPipelineDefinitionOutputError>
}

public struct PutPipelineDefinitionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutPipelineDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<PutPipelineDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutPipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<PutPipelineDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<PutPipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutPipelineDefinitionOutputError>
}

public struct PutPipelineDefinitionInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutPipelineDefinitionInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: PutPipelineDefinitionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutPipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutPipelineDefinitionInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutPipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutPipelineDefinitionOutputError>
}

public struct PutPipelineDefinitionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PutPipelineDefinitionInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: PutPipelineDefinitionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<PutPipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = PutPipelineDefinitionInput
    public typealias MOutput = ClientRuntime.OperationOutput<PutPipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<PutPipelineDefinitionOutputError>
}

/// Contains the parameters for PutPipelineDefinition.
public struct PutPipelineDefinitionInput: Swift.Equatable {
    /// The parameter objects used with the pipeline.
    public var parameterObjects: [DataPipelineClientTypes.ParameterObject]?
    /// The parameter values used with the pipeline.
    public var parameterValues: [DataPipelineClientTypes.ParameterValue]?
    /// The ID of the pipeline.
    /// This member is required.
    public var pipelineId: Swift.String?
    /// The objects that define the pipeline. These objects overwrite the existing pipeline definition.
    /// This member is required.
    public var pipelineObjects: [DataPipelineClientTypes.PipelineObject]?

    public init (
        parameterObjects: [DataPipelineClientTypes.ParameterObject]? = nil,
        parameterValues: [DataPipelineClientTypes.ParameterValue]? = nil,
        pipelineId: Swift.String? = nil,
        pipelineObjects: [DataPipelineClientTypes.PipelineObject]? = nil
    )
    {
        self.parameterObjects = parameterObjects
        self.parameterValues = parameterValues
        self.pipelineId = pipelineId
        self.pipelineObjects = pipelineObjects
    }
}

struct PutPipelineDefinitionInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
    public let pipelineObjects: [DataPipelineClientTypes.PipelineObject]?
    public let parameterObjects: [DataPipelineClientTypes.ParameterObject]?
    public let parameterValues: [DataPipelineClientTypes.ParameterValue]?
}

extension PutPipelineDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterObjects
        case parameterValues
        case pipelineId
        case pipelineObjects
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let pipelineObjectsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.PipelineObject?].self, forKey: .pipelineObjects)
        var pipelineObjectsDecoded0:[DataPipelineClientTypes.PipelineObject]? = nil
        if let pipelineObjectsContainer = pipelineObjectsContainer {
            pipelineObjectsDecoded0 = [DataPipelineClientTypes.PipelineObject]()
            for structure0 in pipelineObjectsContainer {
                if let structure0 = structure0 {
                    pipelineObjectsDecoded0?.append(structure0)
                }
            }
        }
        pipelineObjects = pipelineObjectsDecoded0
        let parameterObjectsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ParameterObject?].self, forKey: .parameterObjects)
        var parameterObjectsDecoded0:[DataPipelineClientTypes.ParameterObject]? = nil
        if let parameterObjectsContainer = parameterObjectsContainer {
            parameterObjectsDecoded0 = [DataPipelineClientTypes.ParameterObject]()
            for structure0 in parameterObjectsContainer {
                if let structure0 = structure0 {
                    parameterObjectsDecoded0?.append(structure0)
                }
            }
        }
        parameterObjects = parameterObjectsDecoded0
        let parameterValuesContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ParameterValue?].self, forKey: .parameterValues)
        var parameterValuesDecoded0:[DataPipelineClientTypes.ParameterValue]? = nil
        if let parameterValuesContainer = parameterValuesContainer {
            parameterValuesDecoded0 = [DataPipelineClientTypes.ParameterValue]()
            for structure0 in parameterValuesContainer {
                if let structure0 = structure0 {
                    parameterValuesDecoded0?.append(structure0)
                }
            }
        }
        parameterValues = parameterValuesDecoded0
    }
}

extension PutPipelineDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutPipelineDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum PutPipelineDefinitionOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutPipelineDefinitionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PutPipelineDefinitionOutputResponse(errored: \(Swift.String(describing: errored)), validationErrors: \(Swift.String(describing: validationErrors)), validationWarnings: \(Swift.String(describing: validationWarnings)))"}
}

extension PutPipelineDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: PutPipelineDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errored = output.errored
            self.validationErrors = output.validationErrors
            self.validationWarnings = output.validationWarnings
        } else {
            self.errored = false
            self.validationErrors = nil
            self.validationWarnings = nil
        }
    }
}

/// Contains the output of PutPipelineDefinition.
public struct PutPipelineDefinitionOutputResponse: Swift.Equatable {
    /// Indicates whether there were validation errors, and the pipeline definition is stored but cannot be
    ///             activated until you correct the pipeline and call PutPipelineDefinition to commit the corrected pipeline.
    /// This member is required.
    public var errored: Swift.Bool
    /// The validation errors that are associated with the objects defined in pipelineObjects.
    public var validationErrors: [DataPipelineClientTypes.ValidationError]?
    /// The validation warnings that are associated with the objects defined in pipelineObjects.
    public var validationWarnings: [DataPipelineClientTypes.ValidationWarning]?

    public init (
        errored: Swift.Bool = false,
        validationErrors: [DataPipelineClientTypes.ValidationError]? = nil,
        validationWarnings: [DataPipelineClientTypes.ValidationWarning]? = nil
    )
    {
        self.errored = errored
        self.validationErrors = validationErrors
        self.validationWarnings = validationWarnings
    }
}

struct PutPipelineDefinitionOutputResponseBody: Swift.Equatable {
    public let validationErrors: [DataPipelineClientTypes.ValidationError]?
    public let validationWarnings: [DataPipelineClientTypes.ValidationWarning]?
    public let errored: Swift.Bool
}

extension PutPipelineDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errored
        case validationErrors
        case validationWarnings
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validationErrorsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ValidationError?].self, forKey: .validationErrors)
        var validationErrorsDecoded0:[DataPipelineClientTypes.ValidationError]? = nil
        if let validationErrorsContainer = validationErrorsContainer {
            validationErrorsDecoded0 = [DataPipelineClientTypes.ValidationError]()
            for structure0 in validationErrorsContainer {
                if let structure0 = structure0 {
                    validationErrorsDecoded0?.append(structure0)
                }
            }
        }
        validationErrors = validationErrorsDecoded0
        let validationWarningsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ValidationWarning?].self, forKey: .validationWarnings)
        var validationWarningsDecoded0:[DataPipelineClientTypes.ValidationWarning]? = nil
        if let validationWarningsContainer = validationWarningsContainer {
            validationWarningsDecoded0 = [DataPipelineClientTypes.ValidationWarning]()
            for structure0 in validationWarningsContainer {
                if let structure0 = structure0 {
                    validationWarningsDecoded0?.append(structure0)
                }
            }
        }
        validationWarnings = validationWarningsDecoded0
        let erroredDecoded = try containerValues.decode(Swift.Bool.self, forKey: .errored)
        errored = erroredDecoded
    }
}

extension DataPipelineClientTypes.Query: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case selectors
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let selectors = selectors {
            var selectorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .selectors)
            for selectorlist0 in selectors {
                try selectorsContainer.encode(selectorlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let selectorsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.Selector?].self, forKey: .selectors)
        var selectorsDecoded0:[DataPipelineClientTypes.Selector]? = nil
        if let selectorsContainer = selectorsContainer {
            selectorsDecoded0 = [DataPipelineClientTypes.Selector]()
            for structure0 in selectorsContainer {
                if let structure0 = structure0 {
                    selectorsDecoded0?.append(structure0)
                }
            }
        }
        selectors = selectorsDecoded0
    }
}

extension DataPipelineClientTypes.Query: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Query(selectors: \(Swift.String(describing: selectors)))"}
}

extension DataPipelineClientTypes {
    /// Defines the query to run against an object.
    public struct Query: Swift.Equatable {
        /// List of selectors that define the query. An object must satisfy all of the selectors to match the query.
        public var selectors: [DataPipelineClientTypes.Selector]?

        public init (
            selectors: [DataPipelineClientTypes.Selector]? = nil
        )
        {
            self.selectors = selectors
        }
    }

}

public struct QueryObjectsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "QueryObjectsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<QueryObjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<QueryObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<QueryObjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<QueryObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<QueryObjectsOutputError>
}

extension QueryObjectsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueryObjectsInput(limit: \(Swift.String(describing: limit)), marker: \(Swift.String(describing: marker)), pipelineId: \(Swift.String(describing: pipelineId)), query: \(Swift.String(describing: query)), sphere: \(Swift.String(describing: sphere)))"}
}

extension QueryObjectsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case marker
        case pipelineId
        case query
        case sphere
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let marker = marker {
            try encodeContainer.encode(marker, forKey: .marker)
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let query = query {
            try encodeContainer.encode(query, forKey: .query)
        }
        if let sphere = sphere {
            try encodeContainer.encode(sphere, forKey: .sphere)
        }
    }
}

public struct QueryObjectsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "QueryObjectsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<QueryObjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<QueryObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<QueryObjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<QueryObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<QueryObjectsOutputError>
}

public struct QueryObjectsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "QueryObjectsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<QueryObjectsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<QueryObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<QueryObjectsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<QueryObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<QueryObjectsOutputError>
}

public struct QueryObjectsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "QueryObjectsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: QueryObjectsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<QueryObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = QueryObjectsInput
    public typealias MOutput = ClientRuntime.OperationOutput<QueryObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<QueryObjectsOutputError>
}

public struct QueryObjectsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "QueryObjectsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: QueryObjectsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<QueryObjectsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = QueryObjectsInput
    public typealias MOutput = ClientRuntime.OperationOutput<QueryObjectsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<QueryObjectsOutputError>
}

/// Contains the parameters for QueryObjects.
public struct QueryObjectsInput: Swift.Equatable {
    /// The maximum number of object names that QueryObjects will return in a single call. The default value is 100.
    public var limit: Swift.Int?
    /// The starting point for the results to be returned. For the first call, this value should be empty.
    ///            As long as there are more results, continue to call QueryObjects with
    ///            the marker value from the previous call to retrieve the next set of results.
    public var marker: Swift.String?
    /// The ID of the pipeline.
    /// This member is required.
    public var pipelineId: Swift.String?
    /// The query that defines the objects to be returned. The Query object can contain a maximum of ten selectors.
    ///             The conditions in the query are limited to top-level String fields in the object.
    ///             These filters can be applied to components, instances, and attempts.
    public var query: DataPipelineClientTypes.Query?
    /// Indicates whether the query applies to components or instances. The possible values are:	
    ///             COMPONENT, INSTANCE, and ATTEMPT.
    /// This member is required.
    public var sphere: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        marker: Swift.String? = nil,
        pipelineId: Swift.String? = nil,
        query: DataPipelineClientTypes.Query? = nil,
        sphere: Swift.String? = nil
    )
    {
        self.limit = limit
        self.marker = marker
        self.pipelineId = pipelineId
        self.query = query
        self.sphere = sphere
    }
}

struct QueryObjectsInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
    public let query: DataPipelineClientTypes.Query?
    public let sphere: Swift.String?
    public let marker: Swift.String?
    public let limit: Swift.Int?
}

extension QueryObjectsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case marker
        case pipelineId
        case query
        case sphere
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let queryDecoded = try containerValues.decodeIfPresent(DataPipelineClientTypes.Query.self, forKey: .query)
        query = queryDecoded
        let sphereDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sphere)
        sphere = sphereDecoded
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension QueryObjectsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension QueryObjectsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum QueryObjectsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension QueryObjectsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueryObjectsOutputResponse(hasMoreResults: \(Swift.String(describing: hasMoreResults)), ids: \(Swift.String(describing: ids)), marker: \(Swift.String(describing: marker)))"}
}

extension QueryObjectsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: QueryObjectsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.hasMoreResults = output.hasMoreResults
            self.ids = output.ids
            self.marker = output.marker
        } else {
            self.hasMoreResults = false
            self.ids = nil
            self.marker = nil
        }
    }
}

/// Contains the output of QueryObjects.
public struct QueryObjectsOutputResponse: Swift.Equatable {
    /// Indicates whether there are more results that can be obtained by a subsequent call.
    public var hasMoreResults: Swift.Bool
    /// The identifiers that match the query selectors.
    public var ids: [Swift.String]?
    /// The starting point for the next page of results. To view the next page of results, call QueryObjects
    ///            again with this marker value. If the value is null, there are no more results.
    public var marker: Swift.String?

    public init (
        hasMoreResults: Swift.Bool = false,
        ids: [Swift.String]? = nil,
        marker: Swift.String? = nil
    )
    {
        self.hasMoreResults = hasMoreResults
        self.ids = ids
        self.marker = marker
    }
}

struct QueryObjectsOutputResponseBody: Swift.Equatable {
    public let ids: [Swift.String]?
    public let marker: Swift.String?
    public let hasMoreResults: Swift.Bool
}

extension QueryObjectsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hasMoreResults
        case ids
        case marker
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ids)
        var idsDecoded0:[Swift.String]? = nil
        if let idsContainer = idsContainer {
            idsDecoded0 = [Swift.String]()
            for string0 in idsContainer {
                if let string0 = string0 {
                    idsDecoded0?.append(string0)
                }
            }
        }
        ids = idsDecoded0
        let markerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marker)
        marker = markerDecoded
        let hasMoreResultsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .hasMoreResults)
        hasMoreResults = hasMoreResultsDecoded
    }
}

public struct RemoveTagsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsOutputError>
}

extension RemoveTagsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveTagsInput(pipelineId: \(Swift.String(describing: pipelineId)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension RemoveTagsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineId
        case tagKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for stringlist0 in tagKeys {
                try tagKeysContainer.encode(stringlist0)
            }
        }
    }
}

public struct RemoveTagsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsOutputError>
}

public struct RemoveTagsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<RemoveTagsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<RemoveTagsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsOutputError>
}

public struct RemoveTagsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: RemoveTagsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = RemoveTagsInput
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsOutputError>
}

public struct RemoveTagsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "RemoveTagsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: RemoveTagsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<RemoveTagsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = RemoveTagsInput
    public typealias MOutput = ClientRuntime.OperationOutput<RemoveTagsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<RemoveTagsOutputError>
}

/// Contains the parameters for RemoveTags.
public struct RemoveTagsInput: Swift.Equatable {
    /// The ID of the pipeline.
    /// This member is required.
    public var pipelineId: Swift.String?
    /// The keys of the tags to remove.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        pipelineId: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.pipelineId = pipelineId
        self.tagKeys = tagKeys
    }
}

struct RemoveTagsInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
    public let tagKeys: [Swift.String]?
}

extension RemoveTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case pipelineId
        case tagKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension RemoveTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension RemoveTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum RemoveTagsOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension RemoveTagsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RemoveTagsOutputResponse()"}
}

extension RemoveTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Contains the output of RemoveTags.
public struct RemoveTagsOutputResponse: Swift.Equatable {

    public init() {}
}

struct RemoveTagsOutputResponseBody: Swift.Equatable {
}

extension RemoveTagsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct ReportTaskProgressInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReportTaskProgressInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReportTaskProgressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReportTaskProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReportTaskProgressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReportTaskProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReportTaskProgressOutputError>
}

extension ReportTaskProgressInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReportTaskProgressInput(fields: \(Swift.String(describing: fields)), taskId: \(Swift.String(describing: taskId)))"}
}

extension ReportTaskProgressInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fields
        case taskId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fields = fields {
            var fieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fields)
            for fieldlist0 in fields {
                try fieldsContainer.encode(fieldlist0)
            }
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }
}

public struct ReportTaskProgressInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReportTaskProgressInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReportTaskProgressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReportTaskProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReportTaskProgressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReportTaskProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReportTaskProgressOutputError>
}

public struct ReportTaskProgressInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReportTaskProgressInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReportTaskProgressInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReportTaskProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReportTaskProgressInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReportTaskProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReportTaskProgressOutputError>
}

public struct ReportTaskProgressInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReportTaskProgressInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ReportTaskProgressInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReportTaskProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ReportTaskProgressInput
    public typealias MOutput = ClientRuntime.OperationOutput<ReportTaskProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReportTaskProgressOutputError>
}

public struct ReportTaskProgressInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReportTaskProgressInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ReportTaskProgressInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReportTaskProgressOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ReportTaskProgressInput
    public typealias MOutput = ClientRuntime.OperationOutput<ReportTaskProgressOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReportTaskProgressOutputError>
}

/// Contains the parameters for ReportTaskProgress.
public struct ReportTaskProgressInput: Swift.Equatable {
    /// Key-value pairs that define the properties of the ReportTaskProgressInput object.
    public var fields: [DataPipelineClientTypes.Field]?
    /// The ID of the task assigned to the task runner. This value is provided in the response for PollForTask.
    /// This member is required.
    public var taskId: Swift.String?

    public init (
        fields: [DataPipelineClientTypes.Field]? = nil,
        taskId: Swift.String? = nil
    )
    {
        self.fields = fields
        self.taskId = taskId
    }
}

struct ReportTaskProgressInputBody: Swift.Equatable {
    public let taskId: Swift.String?
    public let fields: [DataPipelineClientTypes.Field]?
}

extension ReportTaskProgressInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fields
        case taskId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let fieldsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.Field?].self, forKey: .fields)
        var fieldsDecoded0:[DataPipelineClientTypes.Field]? = nil
        if let fieldsContainer = fieldsContainer {
            fieldsDecoded0 = [DataPipelineClientTypes.Field]()
            for structure0 in fieldsContainer {
                if let structure0 = structure0 {
                    fieldsDecoded0?.append(structure0)
                }
            }
        }
        fields = fieldsDecoded0
    }
}

extension ReportTaskProgressOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ReportTaskProgressOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskNotFoundException" : self = .taskNotFoundException(try TaskNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ReportTaskProgressOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case taskNotFoundException(TaskNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ReportTaskProgressOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReportTaskProgressOutputResponse(canceled: \(Swift.String(describing: canceled)))"}
}

extension ReportTaskProgressOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ReportTaskProgressOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.canceled = output.canceled
        } else {
            self.canceled = false
        }
    }
}

/// Contains the output of ReportTaskProgress.
public struct ReportTaskProgressOutputResponse: Swift.Equatable {
    /// If true, the calling task runner should cancel processing of the task. The task runner does not need to call SetTaskStatus for canceled tasks.
    /// This member is required.
    public var canceled: Swift.Bool

    public init (
        canceled: Swift.Bool = false
    )
    {
        self.canceled = canceled
    }
}

struct ReportTaskProgressOutputResponseBody: Swift.Equatable {
    public let canceled: Swift.Bool
}

extension ReportTaskProgressOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case canceled
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let canceledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .canceled)
        canceled = canceledDecoded
    }
}

public struct ReportTaskRunnerHeartbeatInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReportTaskRunnerHeartbeatInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReportTaskRunnerHeartbeatInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReportTaskRunnerHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReportTaskRunnerHeartbeatInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReportTaskRunnerHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReportTaskRunnerHeartbeatOutputError>
}

extension ReportTaskRunnerHeartbeatInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReportTaskRunnerHeartbeatInput(hostname: \(Swift.String(describing: hostname)), taskrunnerId: \(Swift.String(describing: taskrunnerId)), workerGroup: \(Swift.String(describing: workerGroup)))"}
}

extension ReportTaskRunnerHeartbeatInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostname
        case taskrunnerId
        case workerGroup
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hostname = hostname {
            try encodeContainer.encode(hostname, forKey: .hostname)
        }
        if let taskrunnerId = taskrunnerId {
            try encodeContainer.encode(taskrunnerId, forKey: .taskrunnerId)
        }
        if let workerGroup = workerGroup {
            try encodeContainer.encode(workerGroup, forKey: .workerGroup)
        }
    }
}

public struct ReportTaskRunnerHeartbeatInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReportTaskRunnerHeartbeatInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReportTaskRunnerHeartbeatInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReportTaskRunnerHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReportTaskRunnerHeartbeatInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReportTaskRunnerHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReportTaskRunnerHeartbeatOutputError>
}

public struct ReportTaskRunnerHeartbeatInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReportTaskRunnerHeartbeatInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ReportTaskRunnerHeartbeatInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReportTaskRunnerHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ReportTaskRunnerHeartbeatInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ReportTaskRunnerHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReportTaskRunnerHeartbeatOutputError>
}

public struct ReportTaskRunnerHeartbeatInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReportTaskRunnerHeartbeatInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ReportTaskRunnerHeartbeatInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReportTaskRunnerHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ReportTaskRunnerHeartbeatInput
    public typealias MOutput = ClientRuntime.OperationOutput<ReportTaskRunnerHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReportTaskRunnerHeartbeatOutputError>
}

public struct ReportTaskRunnerHeartbeatInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ReportTaskRunnerHeartbeatInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ReportTaskRunnerHeartbeatInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ReportTaskRunnerHeartbeatOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ReportTaskRunnerHeartbeatInput
    public typealias MOutput = ClientRuntime.OperationOutput<ReportTaskRunnerHeartbeatOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ReportTaskRunnerHeartbeatOutputError>
}

/// Contains the parameters for ReportTaskRunnerHeartbeat.
public struct ReportTaskRunnerHeartbeatInput: Swift.Equatable {
    /// The public DNS name of the task runner.
    public var hostname: Swift.String?
    /// The ID of the task runner. This value should be unique across your AWS account. In the case of AWS Data Pipeline Task Runner
    ///             launched on a resource managed by AWS Data Pipeline, the web service provides a unique identifier when it launches the application.
    ///             If you have written a custom task runner, you should assign a unique identifier for the task runner.
    /// This member is required.
    public var taskrunnerId: Swift.String?
    /// The type of task the task runner is configured to accept and process. The worker group is set as a field on objects in the pipeline when they are created.
    ///             You can only specify a single value for workerGroup. There are no wildcard values permitted in workerGroup; the string
    ///             must be an exact, case-sensitive, match.
    public var workerGroup: Swift.String?

    public init (
        hostname: Swift.String? = nil,
        taskrunnerId: Swift.String? = nil,
        workerGroup: Swift.String? = nil
    )
    {
        self.hostname = hostname
        self.taskrunnerId = taskrunnerId
        self.workerGroup = workerGroup
    }
}

struct ReportTaskRunnerHeartbeatInputBody: Swift.Equatable {
    public let taskrunnerId: Swift.String?
    public let workerGroup: Swift.String?
    public let hostname: Swift.String?
}

extension ReportTaskRunnerHeartbeatInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostname
        case taskrunnerId
        case workerGroup
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskrunnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskrunnerId)
        taskrunnerId = taskrunnerIdDecoded
        let workerGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .workerGroup)
        workerGroup = workerGroupDecoded
        let hostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostname)
        hostname = hostnameDecoded
    }
}

extension ReportTaskRunnerHeartbeatOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ReportTaskRunnerHeartbeatOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ReportTaskRunnerHeartbeatOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ReportTaskRunnerHeartbeatOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReportTaskRunnerHeartbeatOutputResponse(terminate: \(Swift.String(describing: terminate)))"}
}

extension ReportTaskRunnerHeartbeatOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ReportTaskRunnerHeartbeatOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.terminate = output.terminate
        } else {
            self.terminate = false
        }
    }
}

/// Contains the output of ReportTaskRunnerHeartbeat.
public struct ReportTaskRunnerHeartbeatOutputResponse: Swift.Equatable {
    /// Indicates whether the calling task runner should terminate.
    /// This member is required.
    public var terminate: Swift.Bool

    public init (
        terminate: Swift.Bool = false
    )
    {
        self.terminate = terminate
    }
}

struct ReportTaskRunnerHeartbeatOutputResponseBody: Swift.Equatable {
    public let terminate: Swift.Bool
}

extension ReportTaskRunnerHeartbeatOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case terminate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let terminateDecoded = try containerValues.decode(Swift.Bool.self, forKey: .terminate)
        terminate = terminateDecoded
    }
}

extension DataPipelineClientTypes.Selector: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fieldName
        case `operator` = "operator"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fieldName = fieldName {
            try encodeContainer.encode(fieldName, forKey: .fieldName)
        }
        if let `operator` = `operator` {
            try encodeContainer.encode(`operator`, forKey: .`operator`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fieldName)
        fieldName = fieldNameDecoded
        let operatorDecoded = try containerValues.decodeIfPresent(DataPipelineClientTypes.Operator.self, forKey: .operator)
        `operator` = operatorDecoded
    }
}

extension DataPipelineClientTypes.Selector: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Selector(fieldName: \(Swift.String(describing: fieldName)), operator: \(Swift.String(describing: `operator`)))"}
}

extension DataPipelineClientTypes {
    /// A comparision that is used to determine whether a query should return this object.
    public struct Selector: Swift.Equatable {
        /// Contains a logical operation for comparing the value of a field with a specified value.
        public var `operator`: DataPipelineClientTypes.Operator?
        /// The name of the field that the operator will be applied to. The field name is the "key" portion of the field definition in the pipeline definition syntax that is used by the AWS Data Pipeline API. If the field is not set on the object, the condition fails.
        public var fieldName: Swift.String?

        public init (
            `operator`: DataPipelineClientTypes.Operator? = nil,
            fieldName: Swift.String? = nil
        )
        {
            self.`operator` = `operator`
            self.fieldName = fieldName
        }
    }

}

public struct SetStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetStatusOutputError>
}

extension SetStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetStatusInput(objectIds: \(Swift.String(describing: objectIds)), pipelineId: \(Swift.String(describing: pipelineId)), status: \(Swift.String(describing: status)))"}
}

extension SetStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectIds
        case pipelineId
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let objectIds = objectIds {
            var objectIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .objectIds)
            for idlist0 in objectIds {
                try objectIdsContainer.encode(idlist0)
            }
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }
}

public struct SetStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetStatusOutputError>
}

public struct SetStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetStatusOutputError>
}

public struct SetStatusInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetStatusInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: SetStatusInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SetStatusInput
    public typealias MOutput = ClientRuntime.OperationOutput<SetStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetStatusOutputError>
}

public struct SetStatusInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetStatusInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: SetStatusInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SetStatusInput
    public typealias MOutput = ClientRuntime.OperationOutput<SetStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetStatusOutputError>
}

/// Contains the parameters for SetStatus.
public struct SetStatusInput: Swift.Equatable {
    /// The IDs of the objects. The corresponding objects can be either physical or components, but not a mix of both types.
    /// This member is required.
    public var objectIds: [Swift.String]?
    /// The ID of the pipeline that contains the objects.
    /// This member is required.
    public var pipelineId: Swift.String?
    /// The status to be set on all the objects specified in objectIds. For components, use PAUSE or RESUME.
    ///             For instances, use TRY_CANCEL, RERUN, or MARK_FINISHED.
    /// This member is required.
    public var status: Swift.String?

    public init (
        objectIds: [Swift.String]? = nil,
        pipelineId: Swift.String? = nil,
        status: Swift.String? = nil
    )
    {
        self.objectIds = objectIds
        self.pipelineId = pipelineId
        self.status = status
    }
}

struct SetStatusInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
    public let objectIds: [Swift.String]?
    public let status: Swift.String?
}

extension SetStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case objectIds
        case pipelineId
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let objectIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .objectIds)
        var objectIdsDecoded0:[Swift.String]? = nil
        if let objectIdsContainer = objectIdsContainer {
            objectIdsDecoded0 = [Swift.String]()
            for string0 in objectIdsContainer {
                if let string0 = string0 {
                    objectIdsDecoded0?.append(string0)
                }
            }
        }
        objectIds = objectIdsDecoded0
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SetStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetStatusOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetStatusOutputResponse()"}
}

extension SetStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct SetStatusOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetStatusOutputResponseBody: Swift.Equatable {
}

extension SetStatusOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct SetTaskStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetTaskStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetTaskStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetTaskStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetTaskStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetTaskStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetTaskStatusOutputError>
}

extension SetTaskStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetTaskStatusInput(errorId: \(Swift.String(describing: errorId)), errorMessage: \(Swift.String(describing: errorMessage)), errorStackTrace: \(Swift.String(describing: errorStackTrace)), taskId: \(Swift.String(describing: taskId)), taskStatus: \(Swift.String(describing: taskStatus)))"}
}

extension SetTaskStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorId
        case errorMessage
        case errorStackTrace
        case taskId
        case taskStatus
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorId = errorId {
            try encodeContainer.encode(errorId, forKey: .errorId)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let errorStackTrace = errorStackTrace {
            try encodeContainer.encode(errorStackTrace, forKey: .errorStackTrace)
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskStatus = taskStatus {
            try encodeContainer.encode(taskStatus.rawValue, forKey: .taskStatus)
        }
    }
}

public struct SetTaskStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetTaskStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetTaskStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetTaskStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetTaskStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetTaskStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetTaskStatusOutputError>
}

public struct SetTaskStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetTaskStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<SetTaskStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetTaskStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<SetTaskStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<SetTaskStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetTaskStatusOutputError>
}

public struct SetTaskStatusInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetTaskStatusInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: SetTaskStatusInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetTaskStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SetTaskStatusInput
    public typealias MOutput = ClientRuntime.OperationOutput<SetTaskStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetTaskStatusOutputError>
}

public struct SetTaskStatusInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "SetTaskStatusInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: SetTaskStatusInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<SetTaskStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = SetTaskStatusInput
    public typealias MOutput = ClientRuntime.OperationOutput<SetTaskStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<SetTaskStatusOutputError>
}

/// Contains the parameters for SetTaskStatus.
public struct SetTaskStatusInput: Swift.Equatable {
    /// If an error occurred during the task, this value specifies the error code. This value is set on the physical attempt object.
    ///             It is used to display error information to the user. It should not start with string "Service_" which is reserved by the system.
    public var errorId: Swift.String?
    /// If an error occurred during the task, this value specifies a text description of the error. This value is set on the physical attempt object.
    ///             It is used to display error information to the user. The web service does not parse this value.
    public var errorMessage: Swift.String?
    /// If an error occurred during the task, this value specifies the stack trace associated with the error. This value is set on the physical attempt object.
    ///             It is used to display error information to the user. The web service does not parse this value.
    public var errorStackTrace: Swift.String?
    /// The ID of the task assigned to the task runner. This value is provided in the response for PollForTask.
    /// This member is required.
    public var taskId: Swift.String?
    /// If FINISHED, the task successfully completed. If FAILED, the task ended unsuccessfully. Preconditions use false.
    /// This member is required.
    public var taskStatus: DataPipelineClientTypes.TaskStatus?

    public init (
        errorId: Swift.String? = nil,
        errorMessage: Swift.String? = nil,
        errorStackTrace: Swift.String? = nil,
        taskId: Swift.String? = nil,
        taskStatus: DataPipelineClientTypes.TaskStatus? = nil
    )
    {
        self.errorId = errorId
        self.errorMessage = errorMessage
        self.errorStackTrace = errorStackTrace
        self.taskId = taskId
        self.taskStatus = taskStatus
    }
}

struct SetTaskStatusInputBody: Swift.Equatable {
    public let taskId: Swift.String?
    public let taskStatus: DataPipelineClientTypes.TaskStatus?
    public let errorId: Swift.String?
    public let errorMessage: Swift.String?
    public let errorStackTrace: Swift.String?
}

extension SetTaskStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorId
        case errorMessage
        case errorStackTrace
        case taskId
        case taskStatus
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let taskStatusDecoded = try containerValues.decodeIfPresent(DataPipelineClientTypes.TaskStatus.self, forKey: .taskStatus)
        taskStatus = taskStatusDecoded
        let errorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorId)
        errorId = errorIdDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let errorStackTraceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorStackTrace)
        errorStackTrace = errorStackTraceDecoded
    }
}

extension SetTaskStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension SetTaskStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TaskNotFoundException" : self = .taskNotFoundException(try TaskNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum SetTaskStatusOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case taskNotFoundException(TaskNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension SetTaskStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SetTaskStatusOutputResponse()"}
}

extension SetTaskStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

/// Contains the output of SetTaskStatus.
public struct SetTaskStatusOutputResponse: Swift.Equatable {

    public init() {}
}

struct SetTaskStatusOutputResponseBody: Swift.Equatable {
}

extension SetTaskStatusOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DataPipelineClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension DataPipelineClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension DataPipelineClientTypes {
    /// Tags are key/value pairs defined by a user and associated with a pipeline to control access. AWS Data Pipeline allows you to associate ten tags per pipeline.
    ///             For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines in the AWS Data Pipeline Developer Guide.
    public struct Tag: Swift.Equatable {
        /// The key name of a tag defined by a user.
        ///             For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines in the AWS Data Pipeline Developer Guide.
        /// This member is required.
        public var key: Swift.String?
        /// The optional value portion of a tag defined by a user.
        ///             For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines in the AWS Data Pipeline Developer Guide.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TaskNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension TaskNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: TaskNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified task was not found.
public struct TaskNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// Description of the error message.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TaskNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension TaskNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension DataPipelineClientTypes.TaskObject: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attemptId
        case objects
        case pipelineId
        case taskId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attemptId = attemptId {
            try encodeContainer.encode(attemptId, forKey: .attemptId)
        }
        if let objects = objects {
            var objectsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .objects)
            for (dictKey0, pipelineobjectmap0) in objects {
                try objectsContainer.encode(pipelineobjectmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let taskId = taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let attemptIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attemptId)
        attemptId = attemptIdDecoded
        let objectsContainer = try containerValues.decodeIfPresent([Swift.String: DataPipelineClientTypes.PipelineObject?].self, forKey: .objects)
        var objectsDecoded0: [Swift.String:DataPipelineClientTypes.PipelineObject]? = nil
        if let objectsContainer = objectsContainer {
            objectsDecoded0 = [Swift.String:DataPipelineClientTypes.PipelineObject]()
            for (key0, pipelineobject0) in objectsContainer {
                if let pipelineobject0 = pipelineobject0 {
                    objectsDecoded0?[key0] = pipelineobject0
                }
            }
        }
        objects = objectsDecoded0
    }
}

extension DataPipelineClientTypes.TaskObject: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TaskObject(attemptId: \(Swift.String(describing: attemptId)), objects: \(Swift.String(describing: objects)), pipelineId: \(Swift.String(describing: pipelineId)), taskId: \(Swift.String(describing: taskId)))"}
}

extension DataPipelineClientTypes {
    /// Contains information about a pipeline task that is assigned to a task runner.
    public struct TaskObject: Swift.Equatable {
        /// The ID of the pipeline task attempt object. AWS Data Pipeline uses this value to track how many times a task is attempted.
        public var attemptId: Swift.String?
        /// Connection information for the location where the task runner will publish the output of the task.
        public var objects: [Swift.String:DataPipelineClientTypes.PipelineObject]?
        /// The ID of the pipeline that provided the task.
        public var pipelineId: Swift.String?
        /// An internal identifier for the task. This ID is passed to the SetTaskStatus and ReportTaskProgress actions.
        public var taskId: Swift.String?

        public init (
            attemptId: Swift.String? = nil,
            objects: [Swift.String:DataPipelineClientTypes.PipelineObject]? = nil,
            pipelineId: Swift.String? = nil,
            taskId: Swift.String? = nil
        )
        {
            self.attemptId = attemptId
            self.objects = objects
            self.pipelineId = pipelineId
            self.taskId = taskId
        }
    }

}

extension DataPipelineClientTypes {
    public enum TaskStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case `false`
        case finished
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskStatus] {
            return [
                .failed,
                .false,
                .finished,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .false: return "FALSE"
            case .finished: return "FINISHED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskStatus(rawValue: rawValue) ?? TaskStatus.sdkUnknown(rawValue)
        }
    }
}

public struct ValidatePipelineDefinitionInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ValidatePipelineDefinitionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ValidatePipelineDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ValidatePipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ValidatePipelineDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ValidatePipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ValidatePipelineDefinitionOutputError>
}

extension ValidatePipelineDefinitionInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidatePipelineDefinitionInput(parameterObjects: \(Swift.String(describing: parameterObjects)), parameterValues: \(Swift.String(describing: parameterValues)), pipelineId: \(Swift.String(describing: pipelineId)), pipelineObjects: \(Swift.String(describing: pipelineObjects)))"}
}

extension ValidatePipelineDefinitionInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterObjects
        case parameterValues
        case pipelineId
        case pipelineObjects
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameterObjects = parameterObjects {
            var parameterObjectsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameterObjects)
            for parameterobjectlist0 in parameterObjects {
                try parameterObjectsContainer.encode(parameterobjectlist0)
            }
        }
        if let parameterValues = parameterValues {
            var parameterValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .parameterValues)
            for parametervaluelist0 in parameterValues {
                try parameterValuesContainer.encode(parametervaluelist0)
            }
        }
        if let pipelineId = pipelineId {
            try encodeContainer.encode(pipelineId, forKey: .pipelineId)
        }
        if let pipelineObjects = pipelineObjects {
            var pipelineObjectsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pipelineObjects)
            for pipelineobjectlist0 in pipelineObjects {
                try pipelineObjectsContainer.encode(pipelineobjectlist0)
            }
        }
    }
}

public struct ValidatePipelineDefinitionInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ValidatePipelineDefinitionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ValidatePipelineDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ValidatePipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ValidatePipelineDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ValidatePipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ValidatePipelineDefinitionOutputError>
}

public struct ValidatePipelineDefinitionInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ValidatePipelineDefinitionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ValidatePipelineDefinitionInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ValidatePipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ValidatePipelineDefinitionInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ValidatePipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ValidatePipelineDefinitionOutputError>
}

public struct ValidatePipelineDefinitionInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ValidatePipelineDefinitionInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ValidatePipelineDefinitionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ValidatePipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ValidatePipelineDefinitionInput
    public typealias MOutput = ClientRuntime.OperationOutput<ValidatePipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ValidatePipelineDefinitionOutputError>
}

public struct ValidatePipelineDefinitionInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ValidatePipelineDefinitionInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ValidatePipelineDefinitionInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ValidatePipelineDefinitionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ValidatePipelineDefinitionInput
    public typealias MOutput = ClientRuntime.OperationOutput<ValidatePipelineDefinitionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ValidatePipelineDefinitionOutputError>
}

/// Contains the parameters for ValidatePipelineDefinition.
public struct ValidatePipelineDefinitionInput: Swift.Equatable {
    /// The parameter objects used with the pipeline.
    public var parameterObjects: [DataPipelineClientTypes.ParameterObject]?
    /// The parameter values used with the pipeline.
    public var parameterValues: [DataPipelineClientTypes.ParameterValue]?
    /// The ID of the pipeline.
    /// This member is required.
    public var pipelineId: Swift.String?
    /// The objects that define the pipeline changes to validate against the pipeline.
    /// This member is required.
    public var pipelineObjects: [DataPipelineClientTypes.PipelineObject]?

    public init (
        parameterObjects: [DataPipelineClientTypes.ParameterObject]? = nil,
        parameterValues: [DataPipelineClientTypes.ParameterValue]? = nil,
        pipelineId: Swift.String? = nil,
        pipelineObjects: [DataPipelineClientTypes.PipelineObject]? = nil
    )
    {
        self.parameterObjects = parameterObjects
        self.parameterValues = parameterValues
        self.pipelineId = pipelineId
        self.pipelineObjects = pipelineObjects
    }
}

struct ValidatePipelineDefinitionInputBody: Swift.Equatable {
    public let pipelineId: Swift.String?
    public let pipelineObjects: [DataPipelineClientTypes.PipelineObject]?
    public let parameterObjects: [DataPipelineClientTypes.ParameterObject]?
    public let parameterValues: [DataPipelineClientTypes.ParameterValue]?
}

extension ValidatePipelineDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterObjects
        case parameterValues
        case pipelineId
        case pipelineObjects
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .pipelineId)
        pipelineId = pipelineIdDecoded
        let pipelineObjectsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.PipelineObject?].self, forKey: .pipelineObjects)
        var pipelineObjectsDecoded0:[DataPipelineClientTypes.PipelineObject]? = nil
        if let pipelineObjectsContainer = pipelineObjectsContainer {
            pipelineObjectsDecoded0 = [DataPipelineClientTypes.PipelineObject]()
            for structure0 in pipelineObjectsContainer {
                if let structure0 = structure0 {
                    pipelineObjectsDecoded0?.append(structure0)
                }
            }
        }
        pipelineObjects = pipelineObjectsDecoded0
        let parameterObjectsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ParameterObject?].self, forKey: .parameterObjects)
        var parameterObjectsDecoded0:[DataPipelineClientTypes.ParameterObject]? = nil
        if let parameterObjectsContainer = parameterObjectsContainer {
            parameterObjectsDecoded0 = [DataPipelineClientTypes.ParameterObject]()
            for structure0 in parameterObjectsContainer {
                if let structure0 = structure0 {
                    parameterObjectsDecoded0?.append(structure0)
                }
            }
        }
        parameterObjects = parameterObjectsDecoded0
        let parameterValuesContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ParameterValue?].self, forKey: .parameterValues)
        var parameterValuesDecoded0:[DataPipelineClientTypes.ParameterValue]? = nil
        if let parameterValuesContainer = parameterValuesContainer {
            parameterValuesDecoded0 = [DataPipelineClientTypes.ParameterValue]()
            for structure0 in parameterValuesContainer {
                if let structure0 = structure0 {
                    parameterValuesDecoded0?.append(structure0)
                }
            }
        }
        parameterValues = parameterValuesDecoded0
    }
}

extension ValidatePipelineDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ValidatePipelineDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServiceError" : self = .internalServiceError(try InternalServiceError(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidRequestException" : self = .invalidRequestException(try InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineDeletedException" : self = .pipelineDeletedException(try PipelineDeletedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PipelineNotFoundException" : self = .pipelineNotFoundException(try PipelineNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ValidatePipelineDefinitionOutputError: Swift.Error, Swift.Equatable {
    case internalServiceError(InternalServiceError)
    case invalidRequestException(InvalidRequestException)
    case pipelineDeletedException(PipelineDeletedException)
    case pipelineNotFoundException(PipelineNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ValidatePipelineDefinitionOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidatePipelineDefinitionOutputResponse(errored: \(Swift.String(describing: errored)), validationErrors: \(Swift.String(describing: validationErrors)), validationWarnings: \(Swift.String(describing: validationWarnings)))"}
}

extension ValidatePipelineDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidatePipelineDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errored = output.errored
            self.validationErrors = output.validationErrors
            self.validationWarnings = output.validationWarnings
        } else {
            self.errored = false
            self.validationErrors = nil
            self.validationWarnings = nil
        }
    }
}

/// Contains the output of ValidatePipelineDefinition.
public struct ValidatePipelineDefinitionOutputResponse: Swift.Equatable {
    /// Indicates whether there were validation errors.
    /// This member is required.
    public var errored: Swift.Bool
    /// Any validation errors that were found.
    public var validationErrors: [DataPipelineClientTypes.ValidationError]?
    /// Any validation warnings that were found.
    public var validationWarnings: [DataPipelineClientTypes.ValidationWarning]?

    public init (
        errored: Swift.Bool = false,
        validationErrors: [DataPipelineClientTypes.ValidationError]? = nil,
        validationWarnings: [DataPipelineClientTypes.ValidationWarning]? = nil
    )
    {
        self.errored = errored
        self.validationErrors = validationErrors
        self.validationWarnings = validationWarnings
    }
}

struct ValidatePipelineDefinitionOutputResponseBody: Swift.Equatable {
    public let validationErrors: [DataPipelineClientTypes.ValidationError]?
    public let validationWarnings: [DataPipelineClientTypes.ValidationWarning]?
    public let errored: Swift.Bool
}

extension ValidatePipelineDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errored
        case validationErrors
        case validationWarnings
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validationErrorsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ValidationError?].self, forKey: .validationErrors)
        var validationErrorsDecoded0:[DataPipelineClientTypes.ValidationError]? = nil
        if let validationErrorsContainer = validationErrorsContainer {
            validationErrorsDecoded0 = [DataPipelineClientTypes.ValidationError]()
            for structure0 in validationErrorsContainer {
                if let structure0 = structure0 {
                    validationErrorsDecoded0?.append(structure0)
                }
            }
        }
        validationErrors = validationErrorsDecoded0
        let validationWarningsContainer = try containerValues.decodeIfPresent([DataPipelineClientTypes.ValidationWarning?].self, forKey: .validationWarnings)
        var validationWarningsDecoded0:[DataPipelineClientTypes.ValidationWarning]? = nil
        if let validationWarningsContainer = validationWarningsContainer {
            validationWarningsDecoded0 = [DataPipelineClientTypes.ValidationWarning]()
            for structure0 in validationWarningsContainer {
                if let structure0 = structure0 {
                    validationWarningsDecoded0?.append(structure0)
                }
            }
        }
        validationWarnings = validationWarningsDecoded0
        let erroredDecoded = try containerValues.decode(Swift.Bool.self, forKey: .errored)
        errored = erroredDecoded
    }
}

extension DataPipelineClientTypes.ValidationError: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors
        case id
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errors = errors {
            var errorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .errors)
            for validationmessages0 in errors {
                try errorsContainer.encode(validationmessages0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let errorsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .errors)
        var errorsDecoded0:[Swift.String]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [Swift.String]()
            for string0 in errorsContainer {
                if let string0 = string0 {
                    errorsDecoded0?.append(string0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

extension DataPipelineClientTypes.ValidationError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationError(errors: \(Swift.String(describing: errors)), id: \(Swift.String(describing: id)))"}
}

extension DataPipelineClientTypes {
    /// Defines a validation error. Validation errors prevent pipeline activation. The set of validation errors that can be returned are defined by AWS Data Pipeline.
    public struct ValidationError: Swift.Equatable {
        /// A description of the validation error.
        public var errors: [Swift.String]?
        /// The identifier of the object that contains the validation error.
        public var id: Swift.String?

        public init (
            errors: [Swift.String]? = nil,
            id: Swift.String? = nil
        )
        {
            self.errors = errors
            self.id = id
        }
    }

}

extension DataPipelineClientTypes.ValidationWarning: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
        case warnings
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let warnings = warnings {
            var warningsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .warnings)
            for validationmessages0 in warnings {
                try warningsContainer.encode(validationmessages0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let warningsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .warnings)
        var warningsDecoded0:[Swift.String]? = nil
        if let warningsContainer = warningsContainer {
            warningsDecoded0 = [Swift.String]()
            for string0 in warningsContainer {
                if let string0 = string0 {
                    warningsDecoded0?.append(string0)
                }
            }
        }
        warnings = warningsDecoded0
    }
}

extension DataPipelineClientTypes.ValidationWarning: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationWarning(id: \(Swift.String(describing: id)), warnings: \(Swift.String(describing: warnings)))"}
}

extension DataPipelineClientTypes {
    /// Defines a validation warning. Validation warnings do not prevent pipeline activation. The set of validation warnings that can be returned are defined by AWS Data Pipeline.
    public struct ValidationWarning: Swift.Equatable {
        /// The identifier of the object that contains the validation warning.
        public var id: Swift.String?
        /// A description of the validation warning.
        public var warnings: [Swift.String]?

        public init (
            id: Swift.String? = nil,
            warnings: [Swift.String]? = nil
        )
        {
            self.id = id
            self.warnings = warnings
        }
    }

}
