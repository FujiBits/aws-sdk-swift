// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(message: \(Swift.String(describing: message)))"}
}

extension AccessDeniedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request could not be completed because you do not have access to the resource.
///
public struct AccessDeniedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictException(message: \(Swift.String(describing: message)))"}
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///  The request could not be completed due to a conflict with the current state of the
///          target resource.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct CreateDatasetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDatasetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDatasetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDatasetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDatasetOutputError>
}

extension CreateDatasetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDatasetInput(clientToken: \(Swift.String(describing: clientToken)), datasetName: \(Swift.String(describing: datasetName)), datasetSchema: \(Swift.String(describing: datasetSchema)), serverSideKmsKeyId: \(Swift.String(describing: serverSideKmsKeyId)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateDatasetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let datasetName = datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let datasetSchema = datasetSchema {
            try encodeContainer.encode(datasetSchema, forKey: .datasetSchema)
        }
        if let serverSideKmsKeyId = serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateDatasetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDatasetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDatasetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDatasetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDatasetOutputError>
}

public struct CreateDatasetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDatasetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateDatasetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateDatasetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDatasetOutputError>
}

public struct CreateDatasetInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateDatasetInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateDatasetInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateDatasetInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateDatasetOutputError>
}

public struct CreateDatasetInput: Swift.Equatable {
    ///  A unique identifier for the request. If you do not set the client request token, Amazon
    ///          Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the dataset being created.
    /// This member is required.
    public var datasetName: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names,
    ///          column names, and data types.
    /// This member is required.
    public var datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    /// Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Any tags associated with the ingested data described in the dataset.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init (
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        datasetSchema: LookoutEquipmentClientTypes.DatasetSchema? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.datasetSchema = datasetSchema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
    }
}

struct CreateDatasetInputBody: Swift.Equatable {
    public let datasetName: Swift.String?
    public let datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    public let serverSideKmsKeyId: Swift.String?
    public let clientToken: Swift.String?
    public let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension CreateDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetSchemaDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetSchema.self, forKey: .datasetSchema)
        datasetSchema = datasetSchemaDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateDatasetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDatasetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateDatasetOutputResponse(datasetArn: \(Swift.String(describing: datasetArn)), datasetName: \(Swift.String(describing: datasetName)), status: \(Swift.String(describing: status)))"}
}

extension CreateDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateDatasetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.status = output.status
        } else {
            self.datasetArn = nil
            self.datasetName = nil
            self.status = nil
        }
    }
}

public struct CreateDatasetOutputResponse: Swift.Equatable {
    ///  The Amazon Resource Name (ARN) of the dataset being created.
    public var datasetArn: Swift.String?
    /// The name of the dataset being created.
    public var datasetName: Swift.String?
    /// Indicates the status of the CreateDataset operation.
    public var status: LookoutEquipmentClientTypes.DatasetStatus?

    public init (
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.DatasetStatus? = nil
    )
    {
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.status = status
    }
}

struct CreateDatasetOutputResponseBody: Swift.Equatable {
    public let datasetName: Swift.String?
    public let datasetArn: Swift.String?
    public let status: LookoutEquipmentClientTypes.DatasetStatus?
}

extension CreateDatasetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
    }
}

public struct CreateInferenceSchedulerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInferenceSchedulerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInferenceSchedulerOutputError>
}

extension CreateInferenceSchedulerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInferenceSchedulerInput(clientToken: \(Swift.String(describing: clientToken)), dataDelayOffsetInMinutes: \(Swift.String(describing: dataDelayOffsetInMinutes)), dataInputConfiguration: \(Swift.String(describing: dataInputConfiguration)), dataOutputConfiguration: \(Swift.String(describing: dataOutputConfiguration)), dataUploadFrequency: \(Swift.String(describing: dataUploadFrequency)), inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)), modelName: \(Swift.String(describing: modelName)), roleArn: \(Swift.String(describing: roleArn)), serverSideKmsKeyId: \(Swift.String(describing: serverSideKmsKeyId)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateInferenceSchedulerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let dataDelayOffsetInMinutes = dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataInputConfiguration = dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataUploadFrequency = dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let serverSideKmsKeyId = serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateInferenceSchedulerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInferenceSchedulerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInferenceSchedulerOutputError>
}

public struct CreateInferenceSchedulerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInferenceSchedulerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInferenceSchedulerOutputError>
}

public struct CreateInferenceSchedulerInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInferenceSchedulerInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateInferenceSchedulerInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateInferenceSchedulerInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInferenceSchedulerOutputError>
}

public struct CreateInferenceSchedulerInput: Swift.Equatable {
    ///  A unique identifier for the request. If you do not set the client request token, Amazon
    ///          Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// A period of time (in minutes) by which inference on the data is delayed after the data
    ///          starts. For instance, if you select an offset delay time of five minutes, inference will
    ///          not begin on the data until the first data measurement after the five minute mark. For example, if
    ///          five minutes is selected, the inference scheduler will wake up at the configured frequency with the
    ///          additional five minute delay time to check the customer S3 bucket. The customer can upload data at
    ///          the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    public var dataDelayOffsetInMinutes: Swift.Int?
    /// Specifies configuration information for the input data for the inference scheduler,
    ///          including delimiter, format, and dataset location.
    /// This member is required.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    /// Specifies configuration information for the output results for the inference scheduler,
    ///          including the S3 location for the output.
    /// This member is required.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    ///  How often data is uploaded to the source S3 bucket for the input data. The value chosen
    ///          is the length of time between data uploads. For instance, if you select 5 minutes, Amazon
    ///          Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency
    ///          also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this
    ///          example, it starts once every 5 minutes.
    /// This member is required.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The name of the inference scheduler being created.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// The name of the previously trained ML model being used to create the inference
    ///          scheduler.
    /// This member is required.
    public var modelName: Swift.String?
    /// The Amazon Resource Name (ARN) of a role with permission to access the data source being
    ///          used for the inference.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt inference scheduler data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Any tags associated with the inference scheduler.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init (
        clientToken: Swift.String? = nil,
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.clientToken = clientToken
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelName = modelName
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
    }
}

struct CreateInferenceSchedulerInputBody: Swift.Equatable {
    public let modelName: Swift.String?
    public let inferenceSchedulerName: Swift.String?
    public let dataDelayOffsetInMinutes: Swift.Int?
    public let dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    public let dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    public let dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    public let roleArn: Swift.String?
    public let serverSideKmsKeyId: Swift.String?
    public let clientToken: Swift.String?
    public let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension CreateInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInferenceSchedulerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInferenceSchedulerOutputResponse(inferenceSchedulerArn: \(Swift.String(describing: inferenceSchedulerArn)), inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)), status: \(Swift.String(describing: status)))"}
}

extension CreateInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateInferenceSchedulerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.status = output.status
        } else {
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.status = nil
        }
    }
}

public struct CreateInferenceSchedulerOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the inference scheduler being created.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of inference scheduler being created.
    public var inferenceSchedulerName: Swift.String?
    /// Indicates the status of the CreateInferenceScheduler operation.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init (
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.status = status
    }
}

struct CreateInferenceSchedulerOutputResponseBody: Swift.Equatable {
    public let inferenceSchedulerArn: Swift.String?
    public let inferenceSchedulerName: Swift.String?
    public let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
}

extension CreateInferenceSchedulerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

public struct CreateModelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateModelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateModelOutputError>
}

extension CreateModelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateModelInput(clientToken: \(Swift.String(describing: clientToken)), dataPreProcessingConfiguration: \(Swift.String(describing: dataPreProcessingConfiguration)), datasetName: \(Swift.String(describing: datasetName)), datasetSchema: \(Swift.String(describing: datasetSchema)), evaluationDataEndTime: \(Swift.String(describing: evaluationDataEndTime)), evaluationDataStartTime: \(Swift.String(describing: evaluationDataStartTime)), labelsInputConfiguration: \(Swift.String(describing: labelsInputConfiguration)), modelName: \(Swift.String(describing: modelName)), offCondition: \(Swift.String(describing: offCondition)), roleArn: \(Swift.String(describing: roleArn)), serverSideKmsKeyId: \(Swift.String(describing: serverSideKmsKeyId)), tags: \(Swift.String(describing: tags)), trainingDataEndTime: \(Swift.String(describing: trainingDataEndTime)), trainingDataStartTime: \(Swift.String(describing: trainingDataStartTime)))"}
}

extension CreateModelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case offCondition = "OffCondition"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let dataPreProcessingConfiguration = dataPreProcessingConfiguration {
            try encodeContainer.encode(dataPreProcessingConfiguration, forKey: .dataPreProcessingConfiguration)
        }
        if let datasetName = datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let datasetSchema = datasetSchema {
            try encodeContainer.encode(datasetSchema, forKey: .datasetSchema)
        }
        if let evaluationDataEndTime = evaluationDataEndTime {
            try encodeContainer.encode(evaluationDataEndTime.timeIntervalSince1970, forKey: .evaluationDataEndTime)
        }
        if let evaluationDataStartTime = evaluationDataStartTime {
            try encodeContainer.encode(evaluationDataStartTime.timeIntervalSince1970, forKey: .evaluationDataStartTime)
        }
        if let labelsInputConfiguration = labelsInputConfiguration {
            try encodeContainer.encode(labelsInputConfiguration, forKey: .labelsInputConfiguration)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let offCondition = offCondition {
            try encodeContainer.encode(offCondition, forKey: .offCondition)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let serverSideKmsKeyId = serverSideKmsKeyId {
            try encodeContainer.encode(serverSideKmsKeyId, forKey: .serverSideKmsKeyId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let trainingDataEndTime = trainingDataEndTime {
            try encodeContainer.encode(trainingDataEndTime.timeIntervalSince1970, forKey: .trainingDataEndTime)
        }
        if let trainingDataStartTime = trainingDataStartTime {
            try encodeContainer.encode(trainingDataStartTime.timeIntervalSince1970, forKey: .trainingDataStartTime)
        }
    }
}

public struct CreateModelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateModelOutputError>
}

public struct CreateModelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateModelOutputError>
}

public struct CreateModelInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateModelInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: CreateModelInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateModelInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateModelOutputError>
}

public struct CreateModelInput: Swift.Equatable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon
    ///          Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The configuration is the TargetSamplingRate, which is the sampling rate of
    ///          the data after post processing by
    ///          Amazon Lookout for Equipment. For example, if you provide data that
    ///          has been collected at a 1 second level and you want the system to resample
    ///          the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute.
    ///          When providing a value for the TargetSamplingRate, you must
    ///             attach the prefix "PT" to the rate you want.  The value for a 1 second rate
    ///             is therefore PT1S, the value for a 15 minute rate
    ///             is PT15M, and the value for a 1 hour rate
    ///             is PT1H
    ///
    public var dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    /// The name of the dataset for the ML model being created.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The data schema for the ML model being created.
    public var datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    ///  Indicates the time reference in the dataset that should be used to end the subset of
    ///          evaluation data for the ML model.
    public var evaluationDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that should be used to begin the subset of
    ///          evaluation data for the ML model.
    public var evaluationDataStartTime: ClientRuntime.Date?
    /// The input configuration for the labels being used for the ML model that's being created.
    ///
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// The name for the ML model to be created.
    /// This member is required.
    public var modelName: Swift.String?
    /// Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.
    public var offCondition: Swift.String?
    ///  The Amazon Resource Name (ARN) of a role with permission to access the data source
    ///          being used to create the ML model.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    ///  Any tags associated with the ML model being created.
    public var tags: [LookoutEquipmentClientTypes.Tag]?
    /// Indicates the time reference in the dataset that should be used to end the subset of
    ///          training data for the ML model.
    public var trainingDataEndTime: ClientRuntime.Date?
    /// Indicates the time reference in the dataset that should be used to begin the subset of
    ///          training data for the ML model.
    public var trainingDataStartTime: ClientRuntime.Date?

    public init (
        clientToken: Swift.String? = nil,
        dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration? = nil,
        datasetName: Swift.String? = nil,
        datasetSchema: LookoutEquipmentClientTypes.DatasetSchema? = nil,
        evaluationDataEndTime: ClientRuntime.Date? = nil,
        evaluationDataStartTime: ClientRuntime.Date? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        modelName: Swift.String? = nil,
        offCondition: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil,
        trainingDataEndTime: ClientRuntime.Date? = nil,
        trainingDataStartTime: ClientRuntime.Date? = nil
    )
    {
        self.clientToken = clientToken
        self.dataPreProcessingConfiguration = dataPreProcessingConfiguration
        self.datasetName = datasetName
        self.datasetSchema = datasetSchema
        self.evaluationDataEndTime = evaluationDataEndTime
        self.evaluationDataStartTime = evaluationDataStartTime
        self.labelsInputConfiguration = labelsInputConfiguration
        self.modelName = modelName
        self.offCondition = offCondition
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.tags = tags
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
    }
}

struct CreateModelInputBody: Swift.Equatable {
    public let modelName: Swift.String?
    public let datasetName: Swift.String?
    public let datasetSchema: LookoutEquipmentClientTypes.DatasetSchema?
    public let labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    public let clientToken: Swift.String?
    public let trainingDataStartTime: ClientRuntime.Date?
    public let trainingDataEndTime: ClientRuntime.Date?
    public let evaluationDataStartTime: ClientRuntime.Date?
    public let evaluationDataEndTime: ClientRuntime.Date?
    public let roleArn: Swift.String?
    public let dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    public let serverSideKmsKeyId: Swift.String?
    public let tags: [LookoutEquipmentClientTypes.Tag]?
    public let offCondition: Swift.String?
}

extension CreateModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetName = "DatasetName"
        case datasetSchema = "DatasetSchema"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case modelName = "ModelName"
        case offCondition = "OffCondition"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case tags = "Tags"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetSchemaDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetSchema.self, forKey: .datasetSchema)
        datasetSchema = datasetSchemaDecoded
        let labelsInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsInputConfiguration.self, forKey: .labelsInputConfiguration)
        labelsInputConfiguration = labelsInputConfigurationDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let trainingDataStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingDataStartTime)
        trainingDataStartTime = trainingDataStartTimeDecoded
        let trainingDataEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingDataEndTime)
        trainingDataEndTime = trainingDataEndTimeDecoded
        let evaluationDataStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .evaluationDataStartTime)
        evaluationDataStartTime = evaluationDataStartTimeDecoded
        let evaluationDataEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .evaluationDataEndTime)
        evaluationDataEndTime = evaluationDataEndTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPreProcessingConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataPreProcessingConfiguration.self, forKey: .dataPreProcessingConfiguration)
        dataPreProcessingConfiguration = dataPreProcessingConfigurationDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let offConditionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offCondition)
        offCondition = offConditionDecoded
    }
}

extension CreateModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateModelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateModelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateModelOutputResponse(modelArn: \(Swift.String(describing: modelArn)), status: \(Swift.String(describing: status)))"}
}

extension CreateModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelArn = output.modelArn
            self.status = output.status
        } else {
            self.modelArn = nil
            self.status = nil
        }
    }
}

public struct CreateModelOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the model being created.
    public var modelArn: Swift.String?
    /// Indicates the status of the CreateModel operation.
    public var status: LookoutEquipmentClientTypes.ModelStatus?

    public init (
        modelArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil
    )
    {
        self.modelArn = modelArn
        self.status = status
    }
}

struct CreateModelOutputResponseBody: Swift.Equatable {
    public let modelArn: Swift.String?
    public let status: LookoutEquipmentClientTypes.ModelStatus?
}

extension CreateModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelArn = "ModelArn"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LookoutEquipmentClientTypes.DataIngestionJobSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case jobId = "JobId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetArn = datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let datasetName = datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let ingestionInputConfiguration = ingestionInputConfiguration {
            try encodeContainer.encode(ingestionInputConfiguration, forKey: .ingestionInputConfiguration)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LookoutEquipmentClientTypes.DataIngestionJobSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DataIngestionJobSummary(datasetArn: \(Swift.String(describing: datasetArn)), datasetName: \(Swift.String(describing: datasetName)), ingestionInputConfiguration: \(Swift.String(describing: ingestionInputConfiguration)), jobId: \(Swift.String(describing: jobId)), status: \(Swift.String(describing: status)))"}
}

extension LookoutEquipmentClientTypes {
    /// Provides information about a specified data ingestion job, including dataset
    ///          information, data ingestion configuration, and status.
    public struct DataIngestionJobSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the dataset used in the data ingestion job.
        public var datasetArn: Swift.String?
        /// The name of the dataset used for the data ingestion job.
        public var datasetName: Swift.String?
        ///  Specifies information for the input data for the data inference job, including data S3
        ///          location parameters.
        public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
        /// Indicates the job ID of the data ingestion job.
        public var jobId: Swift.String?
        /// Indicates the status of the data ingestion job.
        public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

        public init (
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
            jobId: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
        )
        {
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.ingestionInputConfiguration = ingestionInputConfiguration
            self.jobId = jobId
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.DataPreProcessingConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetSamplingRate = "TargetSamplingRate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetSamplingRate = targetSamplingRate {
            try encodeContainer.encode(targetSamplingRate.rawValue, forKey: .targetSamplingRate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetSamplingRateDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.TargetSamplingRate.self, forKey: .targetSamplingRate)
        targetSamplingRate = targetSamplingRateDecoded
    }
}

extension LookoutEquipmentClientTypes.DataPreProcessingConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DataPreProcessingConfiguration(targetSamplingRate: \(Swift.String(describing: targetSamplingRate)))"}
}

extension LookoutEquipmentClientTypes {
    /// The configuration is the TargetSamplingRate, which is the sampling rate of
    ///          the data after post processing by
    ///          Amazon Lookout for Equipment. For example, if you provide data that
    ///          has been collected at a 1 second level and you want the system to resample
    ///          the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute.
    ///             When providing a value for the TargetSamplingRate, you must
    ///                attach the prefix "PT" to the rate you want.  The value for a 1 second rate
    ///                is therefore PT1S, the value for a 15 minute rate
    ///                is PT15M, and the value for a 1 hour rate
    ///                is PT1H
    ///
    public struct DataPreProcessingConfiguration: Swift.Equatable {
        /// The sampling rate of the data after post processing by Amazon Lookout for Equipment.
        ///          For example, if you provide data that has been collected at a 1 second level and
        ///          you want the system to resample the data at a 1 minute rate before training,
        ///          the TargetSamplingRate is 1 minute.
        ///          When providing a value for the TargetSamplingRate, you must attach
        ///             the prefix "PT" to the rate you want.  The value for a 1 second rate is
        ///             therefore PT1S, the value for a 15 minute
        ///             rate is PT15M, and the value for a 1 hour rate
        ///             is PT1H
        ///
        public var targetSamplingRate: LookoutEquipmentClientTypes.TargetSamplingRate?

        public init (
            targetSamplingRate: LookoutEquipmentClientTypes.TargetSamplingRate? = nil
        )
        {
            self.targetSamplingRate = targetSamplingRate
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum DataUploadFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pt10m
        case pt15m
        case pt1h
        case pt30m
        case pt5m
        case sdkUnknown(Swift.String)

        public static var allCases: [DataUploadFrequency] {
            return [
                .pt10m,
                .pt15m,
                .pt1h,
                .pt30m,
                .pt5m,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pt10m: return "PT10M"
            case .pt15m: return "PT15M"
            case .pt1h: return "PT1H"
            case .pt30m: return "PT30M"
            case .pt5m: return "PT5M"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataUploadFrequency(rawValue: rawValue) ?? DataUploadFrequency.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.DatasetSchema: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inlineDataSchema = "InlineDataSchema"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inlineDataSchema = inlineDataSchema {
            try encodeContainer.encode(inlineDataSchema, forKey: .inlineDataSchema)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inlineDataSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inlineDataSchema)
        inlineDataSchema = inlineDataSchemaDecoded
    }
}

extension LookoutEquipmentClientTypes.DatasetSchema: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DatasetSchema(inlineDataSchema: \(Swift.String(describing: inlineDataSchema)))"}
}

extension LookoutEquipmentClientTypes {
    /// Provides information about the data schema used with the given dataset.
    public struct DatasetSchema: Swift.Equatable {
        ///
        ///
        public var inlineDataSchema: Swift.String?

        public init (
            inlineDataSchema: Swift.String? = nil
        )
        {
            self.inlineDataSchema = inlineDataSchema
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum DatasetStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case created
        case ingestionInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatus] {
            return [
                .active,
                .created,
                .ingestionInProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .created: return "CREATED"
            case .ingestionInProgress: return "INGESTION_IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DatasetStatus(rawValue: rawValue) ?? DatasetStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.DatasetSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let datasetArn = datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let datasetName = datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension LookoutEquipmentClientTypes.DatasetSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DatasetSummary(createdAt: \(Swift.String(describing: createdAt)), datasetArn: \(Swift.String(describing: datasetArn)), datasetName: \(Swift.String(describing: datasetName)), status: \(Swift.String(describing: status)))"}
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific data set, including name, ARN, and status.
    ///
    public struct DatasetSummary: Swift.Equatable {
        /// The time at which the dataset was created in Amazon Lookout for Equipment.
        public var createdAt: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) of the specified dataset.
        public var datasetArn: Swift.String?
        /// The name of the dataset.
        public var datasetName: Swift.String?
        /// Indicates the status of the dataset.
        public var status: LookoutEquipmentClientTypes.DatasetStatus?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.DatasetStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.status = status
        }
    }

}

public struct DeleteDatasetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDatasetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDatasetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDatasetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDatasetOutputError>
}

extension DeleteDatasetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDatasetInput(datasetName: \(Swift.String(describing: datasetName)))"}
}

extension DeleteDatasetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
    }
}

public struct DeleteDatasetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDatasetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDatasetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDatasetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDatasetOutputError>
}

public struct DeleteDatasetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDatasetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteDatasetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteDatasetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDatasetOutputError>
}

public struct DeleteDatasetInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteDatasetInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteDatasetInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteDatasetInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteDatasetOutputError>
}

public struct DeleteDatasetInput: Swift.Equatable {
    /// The name of the dataset to be deleted.
    /// This member is required.
    public var datasetName: Swift.String?

    public init (
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

struct DeleteDatasetInputBody: Swift.Equatable {
    public let datasetName: Swift.String?
}

extension DeleteDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
    }
}

extension DeleteDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteDatasetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDatasetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteDatasetOutputResponse()"}
}

extension DeleteDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDatasetOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteDatasetOutputResponseBody: Swift.Equatable {
}

extension DeleteDatasetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteInferenceSchedulerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInferenceSchedulerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInferenceSchedulerOutputError>
}

extension DeleteInferenceSchedulerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInferenceSchedulerInput(inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)))"}
}

extension DeleteInferenceSchedulerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

public struct DeleteInferenceSchedulerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInferenceSchedulerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInferenceSchedulerOutputError>
}

public struct DeleteInferenceSchedulerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInferenceSchedulerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInferenceSchedulerOutputError>
}

public struct DeleteInferenceSchedulerInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInferenceSchedulerInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteInferenceSchedulerInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteInferenceSchedulerInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInferenceSchedulerOutputError>
}

public struct DeleteInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler to be deleted.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init (
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct DeleteInferenceSchedulerInputBody: Swift.Equatable {
    public let inferenceSchedulerName: Swift.String?
}

extension DeleteInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension DeleteInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInferenceSchedulerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInferenceSchedulerOutputResponse()"}
}

extension DeleteInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteInferenceSchedulerOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteInferenceSchedulerOutputResponseBody: Swift.Equatable {
}

extension DeleteInferenceSchedulerOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DeleteModelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteModelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteModelOutputError>
}

extension DeleteModelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteModelInput(modelName: \(Swift.String(describing: modelName)))"}
}

extension DeleteModelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

public struct DeleteModelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteModelOutputError>
}

public struct DeleteModelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteModelOutputError>
}

public struct DeleteModelInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteModelInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DeleteModelInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteModelInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteModelOutputError>
}

public struct DeleteModelInput: Swift.Equatable {
    /// The name of the ML model to be deleted.
    /// This member is required.
    public var modelName: Swift.String?

    public init (
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DeleteModelInputBody: Swift.Equatable {
    public let modelName: Swift.String?
}

extension DeleteModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension DeleteModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteModelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteModelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteModelOutputResponse()"}
}

extension DeleteModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteModelOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteModelOutputResponseBody: Swift.Equatable {
}

extension DeleteModelOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DescribeDataIngestionJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDataIngestionJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDataIngestionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDataIngestionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDataIngestionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDataIngestionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDataIngestionJobOutputError>
}

extension DescribeDataIngestionJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDataIngestionJobInput(jobId: \(Swift.String(describing: jobId)))"}
}

extension DescribeDataIngestionJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
    }
}

public struct DescribeDataIngestionJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDataIngestionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDataIngestionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDataIngestionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDataIngestionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDataIngestionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDataIngestionJobOutputError>
}

public struct DescribeDataIngestionJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDataIngestionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDataIngestionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDataIngestionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDataIngestionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDataIngestionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDataIngestionJobOutputError>
}

public struct DescribeDataIngestionJobInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDataIngestionJobInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeDataIngestionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDataIngestionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeDataIngestionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDataIngestionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDataIngestionJobOutputError>
}

public struct DescribeDataIngestionJobInput: Swift.Equatable {
    /// The job ID of the data ingestion job.
    /// This member is required.
    public var jobId: Swift.String?

    public init (
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

struct DescribeDataIngestionJobInputBody: Swift.Equatable {
    public let jobId: Swift.String?
}

extension DescribeDataIngestionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
    }
}

extension DescribeDataIngestionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDataIngestionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDataIngestionJobOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDataIngestionJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDataIngestionJobOutputResponse(createdAt: \(Swift.String(describing: createdAt)), datasetArn: \(Swift.String(describing: datasetArn)), failedReason: \(Swift.String(describing: failedReason)), ingestionInputConfiguration: \(Swift.String(describing: ingestionInputConfiguration)), jobId: \(Swift.String(describing: jobId)), roleArn: \(Swift.String(describing: roleArn)), status: \(Swift.String(describing: status)))"}
}

extension DescribeDataIngestionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDataIngestionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.datasetArn = output.datasetArn
            self.failedReason = output.failedReason
            self.ingestionInputConfiguration = output.ingestionInputConfiguration
            self.jobId = output.jobId
            self.roleArn = output.roleArn
            self.status = output.status
        } else {
            self.createdAt = nil
            self.datasetArn = nil
            self.failedReason = nil
            self.ingestionInputConfiguration = nil
            self.jobId = nil
            self.roleArn = nil
            self.status = nil
        }
    }
}

public struct DescribeDataIngestionJobOutputResponse: Swift.Equatable {
    /// The time at which the data ingestion job was created.
    public var createdAt: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the dataset being used in the data ingestion job.
    ///
    public var datasetArn: Swift.String?
    /// Specifies the reason for failure when a data ingestion job has failed.
    public var failedReason: Swift.String?
    /// Specifies the S3 location configuration for the data input for the data ingestion job.
    ///
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    /// Indicates the job ID of the data ingestion job.
    public var jobId: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role with permission to access the data source
    ///          being ingested.
    public var roleArn: Swift.String?
    /// Indicates the status of the DataIngestionJob operation.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        datasetArn: Swift.String? = nil,
        failedReason: Swift.String? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        jobId: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
    )
    {
        self.createdAt = createdAt
        self.datasetArn = datasetArn
        self.failedReason = failedReason
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.jobId = jobId
        self.roleArn = roleArn
        self.status = status
    }
}

struct DescribeDataIngestionJobOutputResponseBody: Swift.Equatable {
    public let jobId: Swift.String?
    public let datasetArn: Swift.String?
    public let ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    public let roleArn: Swift.String?
    public let createdAt: ClientRuntime.Date?
    public let status: LookoutEquipmentClientTypes.IngestionJobStatus?
    public let failedReason: Swift.String?
}

extension DescribeDataIngestionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case datasetArn = "DatasetArn"
        case failedReason = "FailedReason"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case jobId = "JobId"
        case roleArn = "RoleArn"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
    }
}

public struct DescribeDatasetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDatasetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDatasetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDatasetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDatasetOutputError>
}

extension DescribeDatasetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDatasetInput(datasetName: \(Swift.String(describing: datasetName)))"}
}

extension DescribeDatasetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
    }
}

public struct DescribeDatasetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDatasetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDatasetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDatasetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDatasetOutputError>
}

public struct DescribeDatasetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDatasetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeDatasetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeDatasetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDatasetOutputError>
}

public struct DescribeDatasetInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeDatasetInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeDatasetInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeDatasetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeDatasetInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeDatasetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeDatasetOutputError>
}

public struct DescribeDatasetInput: Swift.Equatable {
    /// The name of the dataset to be described.
    /// This member is required.
    public var datasetName: Swift.String?

    public init (
        datasetName: Swift.String? = nil
    )
    {
        self.datasetName = datasetName
    }
}

struct DescribeDatasetInputBody: Swift.Equatable {
    public let datasetName: Swift.String?
}

extension DescribeDatasetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
    }
}

extension DescribeDatasetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDatasetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeDatasetOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDatasetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeDatasetOutputResponse(createdAt: \(Swift.String(describing: createdAt)), datasetArn: \(Swift.String(describing: datasetArn)), datasetName: \(Swift.String(describing: datasetName)), ingestionInputConfiguration: \(Swift.String(describing: ingestionInputConfiguration)), lastUpdatedAt: \(Swift.String(describing: lastUpdatedAt)), schema: \(Swift.String(describing: schema)), serverSideKmsKeyId: \(Swift.String(describing: serverSideKmsKeyId)), status: \(Swift.String(describing: status)))"}
}

extension DescribeDatasetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeDatasetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.ingestionInputConfiguration = output.ingestionInputConfiguration
            self.lastUpdatedAt = output.lastUpdatedAt
            self.schema = output.schema
            self.serverSideKmsKeyId = output.serverSideKmsKeyId
            self.status = output.status
        } else {
            self.createdAt = nil
            self.datasetArn = nil
            self.datasetName = nil
            self.ingestionInputConfiguration = nil
            self.lastUpdatedAt = nil
            self.schema = nil
            self.serverSideKmsKeyId = nil
            self.status = nil
        }
    }
}

public struct DescribeDatasetOutputResponse: Swift.Equatable {
    /// Specifies the time the dataset was created in Amazon Lookout for Equipment.
    public var createdAt: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the dataset being described.
    public var datasetArn: Swift.String?
    /// The name of the dataset being described.
    public var datasetName: Swift.String?
    /// Specifies the S3 location configuration for the data input for the data ingestion job.
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    /// Specifies the time the dataset was last updated, if it was.
    public var lastUpdatedAt: ClientRuntime.Date?
    /// A JSON description of the data that is in each time series dataset, including names,
    ///          column names, and data types.
    public var schema: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Indicates the status of the dataset.
    public var status: LookoutEquipmentClientTypes.DatasetStatus?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        schema: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.DatasetStatus? = nil
    )
    {
        self.createdAt = createdAt
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.lastUpdatedAt = lastUpdatedAt
        self.schema = schema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.status = status
    }
}

struct DescribeDatasetOutputResponseBody: Swift.Equatable {
    public let datasetName: Swift.String?
    public let datasetArn: Swift.String?
    public let createdAt: ClientRuntime.Date?
    public let lastUpdatedAt: ClientRuntime.Date?
    public let status: LookoutEquipmentClientTypes.DatasetStatus?
    public let schema: Swift.String?
    public let serverSideKmsKeyId: Swift.String?
    public let ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
}

extension DescribeDatasetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case lastUpdatedAt = "LastUpdatedAt"
        case schema = "Schema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DatasetStatus.self, forKey: .status)
        status = statusDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
    }
}

public struct DescribeInferenceSchedulerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInferenceSchedulerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInferenceSchedulerOutputError>
}

extension DescribeInferenceSchedulerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInferenceSchedulerInput(inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)))"}
}

extension DescribeInferenceSchedulerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

public struct DescribeInferenceSchedulerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInferenceSchedulerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInferenceSchedulerOutputError>
}

public struct DescribeInferenceSchedulerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInferenceSchedulerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInferenceSchedulerOutputError>
}

public struct DescribeInferenceSchedulerInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeInferenceSchedulerInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeInferenceSchedulerInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeInferenceSchedulerInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeInferenceSchedulerOutputError>
}

public struct DescribeInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler being described.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init (
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct DescribeInferenceSchedulerInputBody: Swift.Equatable {
    public let inferenceSchedulerName: Swift.String?
}

extension DescribeInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension DescribeInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeInferenceSchedulerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeInferenceSchedulerOutputResponse(createdAt: \(Swift.String(describing: createdAt)), dataDelayOffsetInMinutes: \(Swift.String(describing: dataDelayOffsetInMinutes)), dataInputConfiguration: \(Swift.String(describing: dataInputConfiguration)), dataOutputConfiguration: \(Swift.String(describing: dataOutputConfiguration)), dataUploadFrequency: \(Swift.String(describing: dataUploadFrequency)), inferenceSchedulerArn: \(Swift.String(describing: inferenceSchedulerArn)), inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)), modelArn: \(Swift.String(describing: modelArn)), modelName: \(Swift.String(describing: modelName)), roleArn: \(Swift.String(describing: roleArn)), serverSideKmsKeyId: \(Swift.String(describing: serverSideKmsKeyId)), status: \(Swift.String(describing: status)), updatedAt: \(Swift.String(describing: updatedAt)))"}
}

extension DescribeInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeInferenceSchedulerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.dataDelayOffsetInMinutes = output.dataDelayOffsetInMinutes
            self.dataInputConfiguration = output.dataInputConfiguration
            self.dataOutputConfiguration = output.dataOutputConfiguration
            self.dataUploadFrequency = output.dataUploadFrequency
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.roleArn = output.roleArn
            self.serverSideKmsKeyId = output.serverSideKmsKeyId
            self.status = output.status
            self.updatedAt = output.updatedAt
        } else {
            self.createdAt = nil
            self.dataDelayOffsetInMinutes = nil
            self.dataInputConfiguration = nil
            self.dataOutputConfiguration = nil
            self.dataUploadFrequency = nil
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.modelArn = nil
            self.modelName = nil
            self.roleArn = nil
            self.serverSideKmsKeyId = nil
            self.status = nil
            self.updatedAt = nil
        }
    }
}

public struct DescribeInferenceSchedulerOutputResponse: Swift.Equatable {
    /// Specifies the time at which the inference scheduler was created.
    public var createdAt: ClientRuntime.Date?
    ///  A period of time (in minutes) by which inference on the data is delayed after the data
    ///          starts. For instance, if you select an offset delay time of five minutes, inference will
    ///          not begin on the data until the first data measurement after the five minute mark. For example, if
    ///          five minutes is selected, the inference scheduler will wake up at the configured frequency with the
    ///          additional five minute delay time to check the customer S3 bucket. The customer can upload data at
    ///          the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    public var dataDelayOffsetInMinutes: Swift.Int?
    ///  Specifies configuration information for the input data for the inference scheduler,
    ///          including delimiter, format, and dataset location.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    ///  Specifies information for the output results for the inference scheduler,
    ///          including the output S3 location.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    /// Specifies how often data is uploaded to the source S3 bucket for the input data. This
    ///          value is the length of time between data uploads. For instance, if you select 5 minutes,
    ///          Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This
    ///          frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data.
    ///          In this example, it starts once every 5 minutes.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The Amazon Resource Name (ARN) of the inference scheduler being described.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being described.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of the ML model of the inference scheduler being
    ///          described.
    public var modelArn: Swift.String?
    /// The name of the ML model of the inference scheduler being described.
    public var modelName: Swift.String?
    ///  The Amazon Resource Name (ARN) of a role with permission to access the data source for
    ///          the inference scheduler being described.
    public var roleArn: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt inference scheduler data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
    /// Specifies the time at which the inference scheduler was last updated, if it was.
    public var updatedAt: ClientRuntime.Date?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil,
        updatedAt: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelArn = modelArn
        self.modelName = modelName
        self.roleArn = roleArn
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.status = status
        self.updatedAt = updatedAt
    }
}

struct DescribeInferenceSchedulerOutputResponseBody: Swift.Equatable {
    public let modelArn: Swift.String?
    public let modelName: Swift.String?
    public let inferenceSchedulerName: Swift.String?
    public let inferenceSchedulerArn: Swift.String?
    public let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
    public let dataDelayOffsetInMinutes: Swift.Int?
    public let dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    public let createdAt: ClientRuntime.Date?
    public let updatedAt: ClientRuntime.Date?
    public let dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    public let dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    public let roleArn: Swift.String?
    public let serverSideKmsKeyId: Swift.String?
}

extension DescribeInferenceSchedulerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case roleArn = "RoleArn"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
    }
}

public struct DescribeModelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeModelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeModelOutputError>
}

extension DescribeModelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeModelInput(modelName: \(Swift.String(describing: modelName)))"}
}

extension DescribeModelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
    }
}

public struct DescribeModelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeModelOutputError>
}

public struct DescribeModelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeModelOutputError>
}

public struct DescribeModelInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeModelInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: DescribeModelInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeModelInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeModelOutputError>
}

public struct DescribeModelInput: Swift.Equatable {
    /// The name of the ML model to be described.
    /// This member is required.
    public var modelName: Swift.String?

    public init (
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DescribeModelInputBody: Swift.Equatable {
    public let modelName: Swift.String?
}

extension DescribeModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelName = "ModelName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension DescribeModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeModelOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeModelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeModelOutputResponse(createdAt: \(Swift.String(describing: createdAt)), dataPreProcessingConfiguration: \(Swift.String(describing: dataPreProcessingConfiguration)), datasetArn: \(Swift.String(describing: datasetArn)), datasetName: \(Swift.String(describing: datasetName)), evaluationDataEndTime: \(Swift.String(describing: evaluationDataEndTime)), evaluationDataStartTime: \(Swift.String(describing: evaluationDataStartTime)), failedReason: \(Swift.String(describing: failedReason)), labelsInputConfiguration: \(Swift.String(describing: labelsInputConfiguration)), lastUpdatedTime: \(Swift.String(describing: lastUpdatedTime)), modelArn: \(Swift.String(describing: modelArn)), modelMetrics: \(Swift.String(describing: modelMetrics)), modelName: \(Swift.String(describing: modelName)), offCondition: \(Swift.String(describing: offCondition)), roleArn: \(Swift.String(describing: roleArn)), schema: \(Swift.String(describing: schema)), serverSideKmsKeyId: \(Swift.String(describing: serverSideKmsKeyId)), status: \(Swift.String(describing: status)), trainingDataEndTime: \(Swift.String(describing: trainingDataEndTime)), trainingDataStartTime: \(Swift.String(describing: trainingDataStartTime)), trainingExecutionEndTime: \(Swift.String(describing: trainingExecutionEndTime)), trainingExecutionStartTime: \(Swift.String(describing: trainingExecutionStartTime)))"}
}

extension DescribeModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.createdAt = output.createdAt
            self.dataPreProcessingConfiguration = output.dataPreProcessingConfiguration
            self.datasetArn = output.datasetArn
            self.datasetName = output.datasetName
            self.evaluationDataEndTime = output.evaluationDataEndTime
            self.evaluationDataStartTime = output.evaluationDataStartTime
            self.failedReason = output.failedReason
            self.labelsInputConfiguration = output.labelsInputConfiguration
            self.lastUpdatedTime = output.lastUpdatedTime
            self.modelArn = output.modelArn
            self.modelMetrics = output.modelMetrics
            self.modelName = output.modelName
            self.offCondition = output.offCondition
            self.roleArn = output.roleArn
            self.schema = output.schema
            self.serverSideKmsKeyId = output.serverSideKmsKeyId
            self.status = output.status
            self.trainingDataEndTime = output.trainingDataEndTime
            self.trainingDataStartTime = output.trainingDataStartTime
            self.trainingExecutionEndTime = output.trainingExecutionEndTime
            self.trainingExecutionStartTime = output.trainingExecutionStartTime
        } else {
            self.createdAt = nil
            self.dataPreProcessingConfiguration = nil
            self.datasetArn = nil
            self.datasetName = nil
            self.evaluationDataEndTime = nil
            self.evaluationDataStartTime = nil
            self.failedReason = nil
            self.labelsInputConfiguration = nil
            self.lastUpdatedTime = nil
            self.modelArn = nil
            self.modelMetrics = nil
            self.modelName = nil
            self.offCondition = nil
            self.roleArn = nil
            self.schema = nil
            self.serverSideKmsKeyId = nil
            self.status = nil
            self.trainingDataEndTime = nil
            self.trainingDataStartTime = nil
            self.trainingExecutionEndTime = nil
            self.trainingExecutionStartTime = nil
        }
    }
}

public struct DescribeModelOutputResponse: Swift.Equatable {
    /// Indicates the time and date at which the ML model was created.
    public var createdAt: ClientRuntime.Date?
    /// The configuration is the TargetSamplingRate, which is the sampling rate of
    ///          the data after post processing by
    ///          Amazon Lookout for Equipment. For example, if you provide data that
    ///          has been collected at a 1 second level and you want the system to resample
    ///          the data at a 1 minute rate before training, the TargetSamplingRate is 1 minute.
    ///             When providing a value for the TargetSamplingRate, you must
    ///                attach the prefix "PT" to the rate you want.  The value for a 1 second rate
    ///                is therefore PT1S, the value for a 15 minute rate
    ///                is PT15M, and the value for a 1 hour rate
    ///                is PT1H
    ///
    public var dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    /// The Amazon Resouce Name (ARN) of the dataset used to create the ML model being
    ///          described.
    public var datasetArn: Swift.String?
    /// The name of the dataset being used by the ML being described.
    public var datasetName: Swift.String?
    ///  Indicates the time reference in the dataset that was used to end the subset of
    ///          evaluation data for the ML model.
    public var evaluationDataEndTime: ClientRuntime.Date?
    ///  Indicates the time reference in the dataset that was used to begin the subset of
    ///          evaluation data for the ML model.
    public var evaluationDataStartTime: ClientRuntime.Date?
    /// If the training of the ML model failed, this indicates the reason for that failure.
    ///
    public var failedReason: Swift.String?
    /// Specifies configuration information about the labels input, including its S3 location.
    ///
    public var labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    /// Indicates the last time the ML model was updated. The type of update is not specified.
    ///
    public var lastUpdatedTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the ML model being described.
    public var modelArn: Swift.String?
    /// The Model Metrics show an aggregated summary of the model's performance within the evaluation time
    ///          range. This is the JSON content of the metrics created when evaluating the model.
    public var modelMetrics: Swift.String?
    /// The name of the ML model being described.
    public var modelName: Swift.String?
    /// Indicates that the asset associated with this sensor has been shut off. As long as this condition is met, Lookout for Equipment will not use data from this asset for training, evaluation, or inference.
    public var offCondition: Swift.String?
    ///  The Amazon Resource Name (ARN) of a role with permission to access the data source for
    ///          the ML model being described.
    public var roleArn: Swift.String?
    /// A JSON description of the data that is in each time series dataset, including names,
    ///          column names, and data types.
    public var schema: Swift.String?
    /// Provides the identifier of the KMS key used to encrypt model data by Amazon Lookout for Equipment.
    public var serverSideKmsKeyId: Swift.String?
    /// Specifies the current status of the model being described. Status describes the status
    ///          of the most recent action of the model.
    public var status: LookoutEquipmentClientTypes.ModelStatus?
    ///  Indicates the time reference in the dataset that was used to end the subset of training
    ///          data for the ML model.
    public var trainingDataEndTime: ClientRuntime.Date?
    ///  Indicates the time reference in the dataset that was used to begin the subset of
    ///          training data for the ML model.
    public var trainingDataStartTime: ClientRuntime.Date?
    /// Indicates the time at which the training of the ML model was completed.
    public var trainingExecutionEndTime: ClientRuntime.Date?
    /// Indicates the time at which the training of the ML model began.
    public var trainingExecutionStartTime: ClientRuntime.Date?

    public init (
        createdAt: ClientRuntime.Date? = nil,
        dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration? = nil,
        datasetArn: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        evaluationDataEndTime: ClientRuntime.Date? = nil,
        evaluationDataStartTime: ClientRuntime.Date? = nil,
        failedReason: Swift.String? = nil,
        labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration? = nil,
        lastUpdatedTime: ClientRuntime.Date? = nil,
        modelArn: Swift.String? = nil,
        modelMetrics: Swift.String? = nil,
        modelName: Swift.String? = nil,
        offCondition: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        schema: Swift.String? = nil,
        serverSideKmsKeyId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil,
        trainingDataEndTime: ClientRuntime.Date? = nil,
        trainingDataStartTime: ClientRuntime.Date? = nil,
        trainingExecutionEndTime: ClientRuntime.Date? = nil,
        trainingExecutionStartTime: ClientRuntime.Date? = nil
    )
    {
        self.createdAt = createdAt
        self.dataPreProcessingConfiguration = dataPreProcessingConfiguration
        self.datasetArn = datasetArn
        self.datasetName = datasetName
        self.evaluationDataEndTime = evaluationDataEndTime
        self.evaluationDataStartTime = evaluationDataStartTime
        self.failedReason = failedReason
        self.labelsInputConfiguration = labelsInputConfiguration
        self.lastUpdatedTime = lastUpdatedTime
        self.modelArn = modelArn
        self.modelMetrics = modelMetrics
        self.modelName = modelName
        self.offCondition = offCondition
        self.roleArn = roleArn
        self.schema = schema
        self.serverSideKmsKeyId = serverSideKmsKeyId
        self.status = status
        self.trainingDataEndTime = trainingDataEndTime
        self.trainingDataStartTime = trainingDataStartTime
        self.trainingExecutionEndTime = trainingExecutionEndTime
        self.trainingExecutionStartTime = trainingExecutionStartTime
    }
}

struct DescribeModelOutputResponseBody: Swift.Equatable {
    public let modelName: Swift.String?
    public let modelArn: Swift.String?
    public let datasetName: Swift.String?
    public let datasetArn: Swift.String?
    public let schema: Swift.String?
    public let labelsInputConfiguration: LookoutEquipmentClientTypes.LabelsInputConfiguration?
    public let trainingDataStartTime: ClientRuntime.Date?
    public let trainingDataEndTime: ClientRuntime.Date?
    public let evaluationDataStartTime: ClientRuntime.Date?
    public let evaluationDataEndTime: ClientRuntime.Date?
    public let roleArn: Swift.String?
    public let dataPreProcessingConfiguration: LookoutEquipmentClientTypes.DataPreProcessingConfiguration?
    public let status: LookoutEquipmentClientTypes.ModelStatus?
    public let trainingExecutionStartTime: ClientRuntime.Date?
    public let trainingExecutionEndTime: ClientRuntime.Date?
    public let failedReason: Swift.String?
    public let modelMetrics: Swift.String?
    public let lastUpdatedTime: ClientRuntime.Date?
    public let createdAt: ClientRuntime.Date?
    public let serverSideKmsKeyId: Swift.String?
    public let offCondition: Swift.String?
}

extension DescribeModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case dataPreProcessingConfiguration = "DataPreProcessingConfiguration"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case evaluationDataEndTime = "EvaluationDataEndTime"
        case evaluationDataStartTime = "EvaluationDataStartTime"
        case failedReason = "FailedReason"
        case labelsInputConfiguration = "LabelsInputConfiguration"
        case lastUpdatedTime = "LastUpdatedTime"
        case modelArn = "ModelArn"
        case modelMetrics = "ModelMetrics"
        case modelName = "ModelName"
        case offCondition = "OffCondition"
        case roleArn = "RoleArn"
        case schema = "Schema"
        case serverSideKmsKeyId = "ServerSideKmsKeyId"
        case status = "Status"
        case trainingDataEndTime = "TrainingDataEndTime"
        case trainingDataStartTime = "TrainingDataStartTime"
        case trainingExecutionEndTime = "TrainingExecutionEndTime"
        case trainingExecutionStartTime = "TrainingExecutionStartTime"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
        let labelsInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsInputConfiguration.self, forKey: .labelsInputConfiguration)
        labelsInputConfiguration = labelsInputConfigurationDecoded
        let trainingDataStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingDataStartTime)
        trainingDataStartTime = trainingDataStartTimeDecoded
        let trainingDataEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingDataEndTime)
        trainingDataEndTime = trainingDataEndTimeDecoded
        let evaluationDataStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .evaluationDataStartTime)
        evaluationDataStartTime = evaluationDataStartTimeDecoded
        let evaluationDataEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .evaluationDataEndTime)
        evaluationDataEndTime = evaluationDataEndTimeDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let dataPreProcessingConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataPreProcessingConfiguration.self, forKey: .dataPreProcessingConfiguration)
        dataPreProcessingConfiguration = dataPreProcessingConfigurationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let trainingExecutionStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingExecutionStartTime)
        trainingExecutionStartTime = trainingExecutionStartTimeDecoded
        let trainingExecutionEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .trainingExecutionEndTime)
        trainingExecutionEndTime = trainingExecutionEndTimeDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
        let modelMetricsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelMetrics)
        modelMetrics = modelMetricsDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let serverSideKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideKmsKeyId)
        serverSideKmsKeyId = serverSideKmsKeyIdDecoded
        let offConditionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .offCondition)
        offCondition = offConditionDecoded
    }
}

extension LookoutEquipmentClientTypes {
    public enum InferenceExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceExecutionStatus] {
            return [
                .failed,
                .inProgress,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InferenceExecutionStatus(rawValue: rawValue) ?? InferenceExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.InferenceExecutionSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case customerResultObject = "CustomerResultObject"
        case dataEndTime = "DataEndTime"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataStartTime = "DataStartTime"
        case failedReason = "FailedReason"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case scheduledStartTime = "ScheduledStartTime"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let customerResultObject = customerResultObject {
            try encodeContainer.encode(customerResultObject, forKey: .customerResultObject)
        }
        if let dataEndTime = dataEndTime {
            try encodeContainer.encode(dataEndTime.timeIntervalSince1970, forKey: .dataEndTime)
        }
        if let dataInputConfiguration = dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataStartTime = dataStartTime {
            try encodeContainer.encode(dataStartTime.timeIntervalSince1970, forKey: .dataStartTime)
        }
        if let failedReason = failedReason {
            try encodeContainer.encode(failedReason, forKey: .failedReason)
        }
        if let inferenceSchedulerArn = inferenceSchedulerArn {
            try encodeContainer.encode(inferenceSchedulerArn, forKey: .inferenceSchedulerArn)
        }
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let modelArn = modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let scheduledStartTime = scheduledStartTime {
            try encodeContainer.encode(scheduledStartTime.timeIntervalSince1970, forKey: .scheduledStartTime)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let scheduledStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .scheduledStartTime)
        scheduledStartTime = scheduledStartTimeDecoded
        let dataStartTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .dataStartTime)
        dataStartTime = dataStartTimeDecoded
        let dataEndTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .dataEndTime)
        dataEndTime = dataEndTimeDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let customerResultObjectDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.S3Object.self, forKey: .customerResultObject)
        customerResultObject = customerResultObjectDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let failedReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failedReason)
        failedReason = failedReasonDecoded
    }
}

extension LookoutEquipmentClientTypes.InferenceExecutionSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InferenceExecutionSummary(customerResultObject: \(Swift.String(describing: customerResultObject)), dataEndTime: \(Swift.String(describing: dataEndTime)), dataInputConfiguration: \(Swift.String(describing: dataInputConfiguration)), dataOutputConfiguration: \(Swift.String(describing: dataOutputConfiguration)), dataStartTime: \(Swift.String(describing: dataStartTime)), failedReason: \(Swift.String(describing: failedReason)), inferenceSchedulerArn: \(Swift.String(describing: inferenceSchedulerArn)), inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)), modelArn: \(Swift.String(describing: modelArn)), modelName: \(Swift.String(describing: modelName)), scheduledStartTime: \(Swift.String(describing: scheduledStartTime)), status: \(Swift.String(describing: status)))"}
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific inference execution, including input and output
    ///          data configuration, inference scheduling information, status, and so on.
    public struct InferenceExecutionSummary: Swift.Equatable {
        ///
        ///
        public var customerResultObject: LookoutEquipmentClientTypes.S3Object?
        /// Indicates the time reference in the dataset at which the inference execution stopped.
        ///
        public var dataEndTime: ClientRuntime.Date?
        ///  Specifies configuration information for the input data for the inference scheduler,
        ///          including delimiter, format, and dataset location.
        public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
        ///  Specifies configuration information for the output results from for the inference
        ///          execution, including the output S3 location.
        public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
        /// Indicates the time reference in the dataset at which the inference execution began.
        ///
        public var dataStartTime: ClientRuntime.Date?
        ///  Specifies the reason for failure when an inference execution has failed.
        public var failedReason: Swift.String?
        ///  The Amazon Resource Name (ARN) of the inference scheduler being used for the inference
        ///          execution.
        public var inferenceSchedulerArn: Swift.String?
        /// The name of the inference scheduler being used for the inference execution.
        public var inferenceSchedulerName: Swift.String?
        /// The Amazon Resource Name (ARN) of the ML model used for the inference execution.
        public var modelArn: Swift.String?
        /// The name of the ML model being used for the inference execution.
        public var modelName: Swift.String?
        /// Indicates the start time at which the inference scheduler began the specific inference
        ///          execution.
        public var scheduledStartTime: ClientRuntime.Date?
        /// Indicates the status of the inference execution.
        public var status: LookoutEquipmentClientTypes.InferenceExecutionStatus?

        public init (
            customerResultObject: LookoutEquipmentClientTypes.S3Object? = nil,
            dataEndTime: ClientRuntime.Date? = nil,
            dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
            dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
            dataStartTime: ClientRuntime.Date? = nil,
            failedReason: Swift.String? = nil,
            inferenceSchedulerArn: Swift.String? = nil,
            inferenceSchedulerName: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            scheduledStartTime: ClientRuntime.Date? = nil,
            status: LookoutEquipmentClientTypes.InferenceExecutionStatus? = nil
        )
        {
            self.customerResultObject = customerResultObject
            self.dataEndTime = dataEndTime
            self.dataInputConfiguration = dataInputConfiguration
            self.dataOutputConfiguration = dataOutputConfiguration
            self.dataStartTime = dataStartTime
            self.failedReason = failedReason
            self.inferenceSchedulerArn = inferenceSchedulerArn
            self.inferenceSchedulerName = inferenceSchedulerName
            self.modelArn = modelArn
            self.modelName = modelName
            self.scheduledStartTime = scheduledStartTime
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceInputConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceInputNameConfiguration = "InferenceInputNameConfiguration"
        case inputTimeZoneOffset = "InputTimeZoneOffset"
        case s3InputConfiguration = "S3InputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceInputNameConfiguration = inferenceInputNameConfiguration {
            try encodeContainer.encode(inferenceInputNameConfiguration, forKey: .inferenceInputNameConfiguration)
        }
        if let inputTimeZoneOffset = inputTimeZoneOffset {
            try encodeContainer.encode(inputTimeZoneOffset, forKey: .inputTimeZoneOffset)
        }
        if let s3InputConfiguration = s3InputConfiguration {
            try encodeContainer.encode(s3InputConfiguration, forKey: .s3InputConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3InputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceS3InputConfiguration.self, forKey: .s3InputConfiguration)
        s3InputConfiguration = s3InputConfigurationDecoded
        let inputTimeZoneOffsetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputTimeZoneOffset)
        inputTimeZoneOffset = inputTimeZoneOffsetDecoded
        let inferenceInputNameConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputNameConfiguration.self, forKey: .inferenceInputNameConfiguration)
        inferenceInputNameConfiguration = inferenceInputNameConfigurationDecoded
    }
}

extension LookoutEquipmentClientTypes.InferenceInputConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InferenceInputConfiguration(inferenceInputNameConfiguration: \(Swift.String(describing: inferenceInputNameConfiguration)), inputTimeZoneOffset: \(Swift.String(describing: inputTimeZoneOffset)), s3InputConfiguration: \(Swift.String(describing: s3InputConfiguration)))"}
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the input data for the inference, including S3
    ///          location of input data..
    public struct InferenceInputConfiguration: Swift.Equatable {
        /// Specifies configuration information for the input data for the inference, including
        ///          timestamp format and delimiter.
        public var inferenceInputNameConfiguration: LookoutEquipmentClientTypes.InferenceInputNameConfiguration?
        /// Indicates the difference between your time zone and Greenwich Mean Time (GMT).
        public var inputTimeZoneOffset: Swift.String?
        ///  Specifies configuration information for the input data for the inference, including S3
        ///          location of input data..
        public var s3InputConfiguration: LookoutEquipmentClientTypes.InferenceS3InputConfiguration?

        public init (
            inferenceInputNameConfiguration: LookoutEquipmentClientTypes.InferenceInputNameConfiguration? = nil,
            inputTimeZoneOffset: Swift.String? = nil,
            s3InputConfiguration: LookoutEquipmentClientTypes.InferenceS3InputConfiguration? = nil
        )
        {
            self.inferenceInputNameConfiguration = inferenceInputNameConfiguration
            self.inputTimeZoneOffset = inputTimeZoneOffset
            self.s3InputConfiguration = s3InputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceInputNameConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentTimestampDelimiter = "ComponentTimestampDelimiter"
        case timestampFormat = "TimestampFormat"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let componentTimestampDelimiter = componentTimestampDelimiter {
            try encodeContainer.encode(componentTimestampDelimiter, forKey: .componentTimestampDelimiter)
        }
        if let timestampFormat = timestampFormat {
            try encodeContainer.encode(timestampFormat, forKey: .timestampFormat)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampFormatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timestampFormat)
        timestampFormat = timestampFormatDecoded
        let componentTimestampDelimiterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentTimestampDelimiter)
        componentTimestampDelimiter = componentTimestampDelimiterDecoded
    }
}

extension LookoutEquipmentClientTypes.InferenceInputNameConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InferenceInputNameConfiguration(componentTimestampDelimiter: \(Swift.String(describing: componentTimestampDelimiter)), timestampFormat: \(Swift.String(describing: timestampFormat)))"}
}

extension LookoutEquipmentClientTypes {
    /// Specifies configuration information for the input data for the inference, including
    ///          timestamp format and delimiter.
    public struct InferenceInputNameConfiguration: Swift.Equatable {
        /// Indicates the delimiter character used between items in the data.
        public var componentTimestampDelimiter: Swift.String?
        /// The format of the timestamp, whether Epoch time, or standard, with or without hyphens
        ///          (-).
        public var timestampFormat: Swift.String?

        public init (
            componentTimestampDelimiter: Swift.String? = nil,
            timestampFormat: Swift.String? = nil
        )
        {
            self.componentTimestampDelimiter = componentTimestampDelimiter
            self.timestampFormat = timestampFormat
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceOutputConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId = "KmsKeyId"
        case s3OutputConfiguration = "S3OutputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let s3OutputConfiguration = s3OutputConfiguration {
            try encodeContainer.encode(s3OutputConfiguration, forKey: .s3OutputConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3OutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceS3OutputConfiguration.self, forKey: .s3OutputConfiguration)
        s3OutputConfiguration = s3OutputConfigurationDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension LookoutEquipmentClientTypes.InferenceOutputConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InferenceOutputConfiguration(kmsKeyId: \(Swift.String(describing: kmsKeyId)), s3OutputConfiguration: \(Swift.String(describing: s3OutputConfiguration)))"}
}

extension LookoutEquipmentClientTypes {
    ///  Specifies configuration information for the output results from for the inference,
    ///          including KMS key ID and output S3 location.
    public struct InferenceOutputConfiguration: Swift.Equatable {
        /// The ID number for the AWS KMS key used to encrypt the inference output.
        public var kmsKeyId: Swift.String?
        ///  Specifies configuration information for the output results from for the inference,
        ///          output S3 location.
        /// This member is required.
        public var s3OutputConfiguration: LookoutEquipmentClientTypes.InferenceS3OutputConfiguration?

        public init (
            kmsKeyId: Swift.String? = nil,
            s3OutputConfiguration: LookoutEquipmentClientTypes.InferenceS3OutputConfiguration? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputConfiguration = s3OutputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceS3InputConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case prefix = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}

extension LookoutEquipmentClientTypes.InferenceS3InputConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InferenceS3InputConfiguration(bucket: \(Swift.String(describing: bucket)), prefix: \(Swift.String(describing: prefix)))"}
}

extension LookoutEquipmentClientTypes {
    ///  Specifies configuration information for the input data for the inference, including
    ///          input data S3 location.
    public struct InferenceS3InputConfiguration: Swift.Equatable {
        /// The bucket containing the input dataset for the inference.
        /// This member is required.
        public var bucket: Swift.String?
        /// The prefix for the S3 bucket used for the input data for the inference.
        public var prefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            prefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.prefix = prefix
        }
    }

}

extension LookoutEquipmentClientTypes.InferenceS3OutputConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case prefix = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}

extension LookoutEquipmentClientTypes.InferenceS3OutputConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InferenceS3OutputConfiguration(bucket: \(Swift.String(describing: bucket)), prefix: \(Swift.String(describing: prefix)))"}
}

extension LookoutEquipmentClientTypes {
    ///  Specifies configuration information for the output results from the inference,
    ///          including output S3 location.
    public struct InferenceS3OutputConfiguration: Swift.Equatable {
        ///  The bucket containing the output results from the inference
        /// This member is required.
        public var bucket: Swift.String?
        ///  The prefix for the S3 bucket used for the output results from the inference.
        public var prefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            prefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.prefix = prefix
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum InferenceSchedulerStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pending
        case running
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceSchedulerStatus] {
            return [
                .pending,
                .running,
                .stopped,
                .stopping,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pending: return "PENDING"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InferenceSchedulerStatus(rawValue: rawValue) ?? InferenceSchedulerStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.InferenceSchedulerSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataDelayOffsetInMinutes = dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataUploadFrequency = dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerArn = inferenceSchedulerArn {
            try encodeContainer.encode(inferenceSchedulerArn, forKey: .inferenceSchedulerArn)
        }
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let modelArn = modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
    }
}

extension LookoutEquipmentClientTypes.InferenceSchedulerSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InferenceSchedulerSummary(dataDelayOffsetInMinutes: \(Swift.String(describing: dataDelayOffsetInMinutes)), dataUploadFrequency: \(Swift.String(describing: dataUploadFrequency)), inferenceSchedulerArn: \(Swift.String(describing: inferenceSchedulerArn)), inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)), modelArn: \(Swift.String(describing: modelArn)), modelName: \(Swift.String(describing: modelName)), status: \(Swift.String(describing: status)))"}
}

extension LookoutEquipmentClientTypes {
    /// Contains information about the specific inference scheduler, including data delay
    ///          offset, model name and ARN, status, and so on.
    public struct InferenceSchedulerSummary: Swift.Equatable {
        /// A period of time (in minutes) by which inference on the data is delayed after the data
        ///          starts. For instance, if an offset delay time of five minutes was selected, inference will
        ///          not begin on the data until the first data measurement after the five minute mark. For example, if
        ///          five minutes is selected, the inference scheduler will wake up at the configured frequency with the
        ///          additional five minute delay time to check the customer S3 bucket. The customer can upload data at
        ///          the same frequency and they don't need to stop and restart the scheduler when uploading new data.
        ///
        public var dataDelayOffsetInMinutes: Swift.Int?
        /// How often data is uploaded to the source S3 bucket for the input data. This value is the
        ///          length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment
        ///          will upload the real-time data to the source bucket once every 5 minutes. This frequency also
        ///          determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this
        ///          example, it starts once every 5 minutes.
        public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
        ///  The Amazon Resource Name (ARN) of the inference scheduler.
        public var inferenceSchedulerArn: Swift.String?
        /// The name of the inference scheduler.
        public var inferenceSchedulerName: Swift.String?
        ///  The Amazon Resource Name (ARN) of the ML model used by the inference scheduler.
        public var modelArn: Swift.String?
        /// The name of the ML model used for the inference scheduler.
        public var modelName: Swift.String?
        /// Indicates the status of the inference scheduler.
        public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

        public init (
            dataDelayOffsetInMinutes: Swift.Int? = nil,
            dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
            inferenceSchedulerArn: Swift.String? = nil,
            inferenceSchedulerName: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
        )
        {
            self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
            self.dataUploadFrequency = dataUploadFrequency
            self.inferenceSchedulerArn = inferenceSchedulerArn
            self.inferenceSchedulerName = inferenceSchedulerName
            self.modelArn = modelArn
            self.modelName = modelName
            self.status = status
        }
    }

}

extension LookoutEquipmentClientTypes.IngestionInputConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3InputConfiguration = "S3InputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3InputConfiguration = s3InputConfiguration {
            try encodeContainer.encode(s3InputConfiguration, forKey: .s3InputConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3InputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionS3InputConfiguration.self, forKey: .s3InputConfiguration)
        s3InputConfiguration = s3InputConfigurationDecoded
    }
}

extension LookoutEquipmentClientTypes.IngestionInputConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IngestionInputConfiguration(s3InputConfiguration: \(Swift.String(describing: s3InputConfiguration)))"}
}

extension LookoutEquipmentClientTypes {
    ///  Specifies configuration information for the input data for the data ingestion job,
    ///          including input data S3 location.
    public struct IngestionInputConfiguration: Swift.Equatable {
        /// The location information for the S3 bucket used for input data for the data ingestion.
        ///
        /// This member is required.
        public var s3InputConfiguration: LookoutEquipmentClientTypes.IngestionS3InputConfiguration?

        public init (
            s3InputConfiguration: LookoutEquipmentClientTypes.IngestionS3InputConfiguration? = nil
        )
        {
            self.s3InputConfiguration = s3InputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes {
    public enum IngestionJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [IngestionJobStatus] {
            return [
                .failed,
                .inProgress,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IngestionJobStatus(rawValue: rawValue) ?? IngestionJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.IngestionS3InputConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case prefix = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}

extension LookoutEquipmentClientTypes.IngestionS3InputConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IngestionS3InputConfiguration(bucket: \(Swift.String(describing: bucket)), prefix: \(Swift.String(describing: prefix)))"}
}

extension LookoutEquipmentClientTypes {
    ///  Specifies S3 configuration information for the input data for the data ingestion job.
    ///
    public struct IngestionS3InputConfiguration: Swift.Equatable {
        /// The name of the S3 bucket used for the input data for the data ingestion.
        /// This member is required.
        public var bucket: Swift.String?
        /// The prefix for the S3 location being used for the input data for the data ingestion.
        ///
        public var prefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            prefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.prefix = prefix
        }
    }

}

extension InternalServerException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServerException(message: \(Swift.String(describing: message)))"}
}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///  Processing of the request has failed because of an unknown error, exception or failure.
///
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes.LabelsInputConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3InputConfiguration = "S3InputConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3InputConfiguration = s3InputConfiguration {
            try encodeContainer.encode(s3InputConfiguration, forKey: .s3InputConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3InputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.LabelsS3InputConfiguration.self, forKey: .s3InputConfiguration)
        s3InputConfiguration = s3InputConfigurationDecoded
    }
}

extension LookoutEquipmentClientTypes.LabelsInputConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LabelsInputConfiguration(s3InputConfiguration: \(Swift.String(describing: s3InputConfiguration)))"}
}

extension LookoutEquipmentClientTypes {
    /// Contains the configuration information for the S3 location being used to hold label
    ///          data.
    public struct LabelsInputConfiguration: Swift.Equatable {
        /// Contains location information for the S3 location being used for label data.
        /// This member is required.
        public var s3InputConfiguration: LookoutEquipmentClientTypes.LabelsS3InputConfiguration?

        public init (
            s3InputConfiguration: LookoutEquipmentClientTypes.LabelsS3InputConfiguration? = nil
        )
        {
            self.s3InputConfiguration = s3InputConfiguration
        }
    }

}

extension LookoutEquipmentClientTypes.LabelsS3InputConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case prefix = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}

extension LookoutEquipmentClientTypes.LabelsS3InputConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LabelsS3InputConfiguration(bucket: \(Swift.String(describing: bucket)), prefix: \(Swift.String(describing: prefix)))"}
}

extension LookoutEquipmentClientTypes {
    /// The location information (prefix and bucket name) for the s3 location being used for
    ///          label data.
    public struct LabelsS3InputConfiguration: Swift.Equatable {
        /// The name of the S3 bucket holding the label data.
        /// This member is required.
        public var bucket: Swift.String?
        ///  The prefix for the S3 bucket used for the label data.
        public var prefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            prefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.prefix = prefix
        }
    }

}

public struct ListDataIngestionJobsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDataIngestionJobsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDataIngestionJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDataIngestionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDataIngestionJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDataIngestionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDataIngestionJobsOutputError>
}

extension ListDataIngestionJobsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDataIngestionJobsInput(datasetName: \(Swift.String(describing: datasetName)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListDataIngestionJobsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetName = datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct ListDataIngestionJobsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDataIngestionJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDataIngestionJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDataIngestionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDataIngestionJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDataIngestionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDataIngestionJobsOutputError>
}

public struct ListDataIngestionJobsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDataIngestionJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDataIngestionJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDataIngestionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDataIngestionJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDataIngestionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDataIngestionJobsOutputError>
}

public struct ListDataIngestionJobsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDataIngestionJobsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListDataIngestionJobsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDataIngestionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListDataIngestionJobsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListDataIngestionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDataIngestionJobsOutputError>
}

public struct ListDataIngestionJobsInput: Swift.Equatable {
    /// The name of the dataset being used for the data ingestion job.
    public var datasetName: Swift.String?
    ///  Specifies the maximum number of data ingestion jobs to list.
    public var maxResults: Swift.Int?
    ///  An opaque pagination token indicating where to continue the listing of data ingestion
    ///          jobs.
    public var nextToken: Swift.String?
    /// Indicates the status of the data ingestion job.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

    public init (
        datasetName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
    )
    {
        self.datasetName = datasetName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListDataIngestionJobsInputBody: Swift.Equatable {
    public let datasetName: Swift.String?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let status: LookoutEquipmentClientTypes.IngestionJobStatus?
}

extension ListDataIngestionJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetName = "DatasetName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ListDataIngestionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDataIngestionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDataIngestionJobsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDataIngestionJobsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDataIngestionJobsOutputResponse(dataIngestionJobSummaries: \(Swift.String(describing: dataIngestionJobSummaries)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDataIngestionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDataIngestionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataIngestionJobSummaries = output.dataIngestionJobSummaries
            self.nextToken = output.nextToken
        } else {
            self.dataIngestionJobSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDataIngestionJobsOutputResponse: Swift.Equatable {
    /// Specifies information about the specific data ingestion job, including dataset name and
    ///          status.
    public var dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]?
    ///  An opaque pagination token indicating where to continue the listing of data ingestion
    ///          jobs.
    public var nextToken: Swift.String?

    public init (
        dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dataIngestionJobSummaries = dataIngestionJobSummaries
        self.nextToken = nextToken
    }
}

struct ListDataIngestionJobsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let dataIngestionJobSummaries: [LookoutEquipmentClientTypes.DataIngestionJobSummary]?
}

extension ListDataIngestionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataIngestionJobSummaries = "DataIngestionJobSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let dataIngestionJobSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.DataIngestionJobSummary?].self, forKey: .dataIngestionJobSummaries)
        var dataIngestionJobSummariesDecoded0:[LookoutEquipmentClientTypes.DataIngestionJobSummary]? = nil
        if let dataIngestionJobSummariesContainer = dataIngestionJobSummariesContainer {
            dataIngestionJobSummariesDecoded0 = [LookoutEquipmentClientTypes.DataIngestionJobSummary]()
            for structure0 in dataIngestionJobSummariesContainer {
                if let structure0 = structure0 {
                    dataIngestionJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        dataIngestionJobSummaries = dataIngestionJobSummariesDecoded0
    }
}

public struct ListDatasetsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDatasetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDatasetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDatasetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDatasetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDatasetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDatasetsOutputError>
}

extension ListDatasetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDatasetsInput(datasetNameBeginsWith: \(Swift.String(describing: datasetNameBeginsWith)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDatasetsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetNameBeginsWith = datasetNameBeginsWith {
            try encodeContainer.encode(datasetNameBeginsWith, forKey: .datasetNameBeginsWith)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListDatasetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDatasetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDatasetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDatasetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDatasetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDatasetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDatasetsOutputError>
}

public struct ListDatasetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDatasetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListDatasetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDatasetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListDatasetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListDatasetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDatasetsOutputError>
}

public struct ListDatasetsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListDatasetsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListDatasetsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListDatasetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListDatasetsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListDatasetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListDatasetsOutputError>
}

public struct ListDatasetsInput: Swift.Equatable {
    /// The beginning of the name of the datasets to be listed.
    public var datasetNameBeginsWith: Swift.String?
    ///  Specifies the maximum number of datasets to list.
    public var maxResults: Swift.Int?
    ///  An opaque pagination token indicating where to continue the listing of datasets.
    ///
    public var nextToken: Swift.String?

    public init (
        datasetNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetNameBeginsWith = datasetNameBeginsWith
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDatasetsInputBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let datasetNameBeginsWith: Swift.String?
}

extension ListDatasetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let datasetNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetNameBeginsWith)
        datasetNameBeginsWith = datasetNameBeginsWithDecoded
    }
}

extension ListDatasetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListDatasetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListDatasetsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListDatasetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListDatasetsOutputResponse(datasetSummaries: \(Swift.String(describing: datasetSummaries)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListDatasetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListDatasetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.datasetSummaries = output.datasetSummaries
            self.nextToken = output.nextToken
        } else {
            self.datasetSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListDatasetsOutputResponse: Swift.Equatable {
    /// Provides information about the specified dataset, including creation time, dataset ARN,
    ///          and status.
    public var datasetSummaries: [LookoutEquipmentClientTypes.DatasetSummary]?
    ///  An opaque pagination token indicating where to continue the listing of datasets.
    ///
    public var nextToken: Swift.String?

    public init (
        datasetSummaries: [LookoutEquipmentClientTypes.DatasetSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetSummaries = datasetSummaries
        self.nextToken = nextToken
    }
}

struct ListDatasetsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let datasetSummaries: [LookoutEquipmentClientTypes.DatasetSummary]?
}

extension ListDatasetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetSummaries = "DatasetSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let datasetSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.DatasetSummary?].self, forKey: .datasetSummaries)
        var datasetSummariesDecoded0:[LookoutEquipmentClientTypes.DatasetSummary]? = nil
        if let datasetSummariesContainer = datasetSummariesContainer {
            datasetSummariesDecoded0 = [LookoutEquipmentClientTypes.DatasetSummary]()
            for structure0 in datasetSummariesContainer {
                if let structure0 = structure0 {
                    datasetSummariesDecoded0?.append(structure0)
                }
            }
        }
        datasetSummaries = datasetSummariesDecoded0
    }
}

public struct ListInferenceExecutionsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInferenceExecutionsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInferenceExecutionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInferenceExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInferenceExecutionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInferenceExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInferenceExecutionsOutputError>
}

extension ListInferenceExecutionsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInferenceExecutionsInput(dataEndTimeBefore: \(Swift.String(describing: dataEndTimeBefore)), dataStartTimeAfter: \(Swift.String(describing: dataStartTimeAfter)), inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListInferenceExecutionsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataEndTimeBefore = "DataEndTimeBefore"
        case dataStartTimeAfter = "DataStartTimeAfter"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataEndTimeBefore = dataEndTimeBefore {
            try encodeContainer.encode(dataEndTimeBefore.timeIntervalSince1970, forKey: .dataEndTimeBefore)
        }
        if let dataStartTimeAfter = dataStartTimeAfter {
            try encodeContainer.encode(dataStartTimeAfter.timeIntervalSince1970, forKey: .dataStartTimeAfter)
        }
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct ListInferenceExecutionsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInferenceExecutionsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInferenceExecutionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInferenceExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInferenceExecutionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInferenceExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInferenceExecutionsOutputError>
}

public struct ListInferenceExecutionsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInferenceExecutionsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInferenceExecutionsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInferenceExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInferenceExecutionsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInferenceExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInferenceExecutionsOutputError>
}

public struct ListInferenceExecutionsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInferenceExecutionsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListInferenceExecutionsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInferenceExecutionsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListInferenceExecutionsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListInferenceExecutionsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInferenceExecutionsOutputError>
}

public struct ListInferenceExecutionsInput: Swift.Equatable {
    /// The time reference in the inferenced dataset before which Amazon Lookout for Equipment stopped the
    ///          inference execution.
    public var dataEndTimeBefore: ClientRuntime.Date?
    /// The time reference in the inferenced dataset after which Amazon Lookout for Equipment started the
    ///          inference execution.
    public var dataStartTimeAfter: ClientRuntime.Date?
    /// The name of the inference scheduler for the inference execution listed.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    /// Specifies the maximum number of inference executions to list.
    public var maxResults: Swift.Int?
    /// An opaque pagination token indicating where to continue the listing of inference
    ///          executions.
    public var nextToken: Swift.String?
    /// The status of the inference execution.
    public var status: LookoutEquipmentClientTypes.InferenceExecutionStatus?

    public init (
        dataEndTimeBefore: ClientRuntime.Date? = nil,
        dataStartTimeAfter: ClientRuntime.Date? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceExecutionStatus? = nil
    )
    {
        self.dataEndTimeBefore = dataEndTimeBefore
        self.dataStartTimeAfter = dataStartTimeAfter
        self.inferenceSchedulerName = inferenceSchedulerName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListInferenceExecutionsInputBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let inferenceSchedulerName: Swift.String?
    public let dataStartTimeAfter: ClientRuntime.Date?
    public let dataEndTimeBefore: ClientRuntime.Date?
    public let status: LookoutEquipmentClientTypes.InferenceExecutionStatus?
}

extension ListInferenceExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataEndTimeBefore = "DataEndTimeBefore"
        case dataStartTimeAfter = "DataStartTimeAfter"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataStartTimeAfterDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .dataStartTimeAfter)
        dataStartTimeAfter = dataStartTimeAfterDecoded
        let dataEndTimeBeforeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .dataEndTimeBefore)
        dataEndTimeBefore = dataEndTimeBeforeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceExecutionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension ListInferenceExecutionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInferenceExecutionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInferenceExecutionsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInferenceExecutionsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInferenceExecutionsOutputResponse(inferenceExecutionSummaries: \(Swift.String(describing: inferenceExecutionSummaries)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListInferenceExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInferenceExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceExecutionSummaries = output.inferenceExecutionSummaries
            self.nextToken = output.nextToken
        } else {
            self.inferenceExecutionSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListInferenceExecutionsOutputResponse: Swift.Equatable {
    /// Provides an array of information about the individual inference executions returned from
    ///          the ListInferenceExecutions operation, including model used, inference
    ///          scheduler, data configuration, and so on.
    public var inferenceExecutionSummaries: [LookoutEquipmentClientTypes.InferenceExecutionSummary]?
    ///  An opaque pagination token indicating where to continue the listing of inference
    ///          executions.
    public var nextToken: Swift.String?

    public init (
        inferenceExecutionSummaries: [LookoutEquipmentClientTypes.InferenceExecutionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceExecutionSummaries = inferenceExecutionSummaries
        self.nextToken = nextToken
    }
}

struct ListInferenceExecutionsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let inferenceExecutionSummaries: [LookoutEquipmentClientTypes.InferenceExecutionSummary]?
}

extension ListInferenceExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceExecutionSummaries = "InferenceExecutionSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceExecutionSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.InferenceExecutionSummary?].self, forKey: .inferenceExecutionSummaries)
        var inferenceExecutionSummariesDecoded0:[LookoutEquipmentClientTypes.InferenceExecutionSummary]? = nil
        if let inferenceExecutionSummariesContainer = inferenceExecutionSummariesContainer {
            inferenceExecutionSummariesDecoded0 = [LookoutEquipmentClientTypes.InferenceExecutionSummary]()
            for structure0 in inferenceExecutionSummariesContainer {
                if let structure0 = structure0 {
                    inferenceExecutionSummariesDecoded0?.append(structure0)
                }
            }
        }
        inferenceExecutionSummaries = inferenceExecutionSummariesDecoded0
    }
}

public struct ListInferenceSchedulersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInferenceSchedulersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInferenceSchedulersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInferenceSchedulersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInferenceSchedulersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInferenceSchedulersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInferenceSchedulersOutputError>
}

extension ListInferenceSchedulersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInferenceSchedulersInput(inferenceSchedulerNameBeginsWith: \(Swift.String(describing: inferenceSchedulerNameBeginsWith)), maxResults: \(Swift.String(describing: maxResults)), modelName: \(Swift.String(describing: modelName)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListInferenceSchedulersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerNameBeginsWith = "InferenceSchedulerNameBeginsWith"
        case maxResults = "MaxResults"
        case modelName = "ModelName"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerNameBeginsWith = inferenceSchedulerNameBeginsWith {
            try encodeContainer.encode(inferenceSchedulerNameBeginsWith, forKey: .inferenceSchedulerNameBeginsWith)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct ListInferenceSchedulersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInferenceSchedulersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInferenceSchedulersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInferenceSchedulersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInferenceSchedulersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInferenceSchedulersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInferenceSchedulersOutputError>
}

public struct ListInferenceSchedulersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInferenceSchedulersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInferenceSchedulersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInferenceSchedulersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInferenceSchedulersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInferenceSchedulersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInferenceSchedulersOutputError>
}

public struct ListInferenceSchedulersInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInferenceSchedulersInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListInferenceSchedulersInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInferenceSchedulersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListInferenceSchedulersInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListInferenceSchedulersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInferenceSchedulersOutputError>
}

public struct ListInferenceSchedulersInput: Swift.Equatable {
    /// The beginning of the name of the inference schedulers to be listed.
    public var inferenceSchedulerNameBeginsWith: Swift.String?
    ///  Specifies the maximum number of inference schedulers to list.
    public var maxResults: Swift.Int?
    /// The name of the ML model used by the inference scheduler to be listed.
    public var modelName: Swift.String?
    ///  An opaque pagination token indicating where to continue the listing of inference
    ///          schedulers.
    public var nextToken: Swift.String?

    public init (
        inferenceSchedulerNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        modelName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceSchedulerNameBeginsWith = inferenceSchedulerNameBeginsWith
        self.maxResults = maxResults
        self.modelName = modelName
        self.nextToken = nextToken
    }
}

struct ListInferenceSchedulersInputBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let inferenceSchedulerNameBeginsWith: Swift.String?
    public let modelName: Swift.String?
}

extension ListInferenceSchedulersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerNameBeginsWith = "InferenceSchedulerNameBeginsWith"
        case maxResults = "MaxResults"
        case modelName = "ModelName"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let inferenceSchedulerNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerNameBeginsWith)
        inferenceSchedulerNameBeginsWith = inferenceSchedulerNameBeginsWithDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
    }
}

extension ListInferenceSchedulersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInferenceSchedulersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInferenceSchedulersOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInferenceSchedulersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInferenceSchedulersOutputResponse(inferenceSchedulerSummaries: \(Swift.String(describing: inferenceSchedulerSummaries)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListInferenceSchedulersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInferenceSchedulersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerSummaries = output.inferenceSchedulerSummaries
            self.nextToken = output.nextToken
        } else {
            self.inferenceSchedulerSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListInferenceSchedulersOutputResponse: Swift.Equatable {
    /// Provides information about the specified inference scheduler, including data upload
    ///          frequency, model name and ARN, and status.
    public var inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]?
    ///  An opaque pagination token indicating where to continue the listing of inference
    ///          schedulers.
    public var nextToken: Swift.String?

    public init (
        inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceSchedulerSummaries = inferenceSchedulerSummaries
        self.nextToken = nextToken
    }
}

struct ListInferenceSchedulersOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let inferenceSchedulerSummaries: [LookoutEquipmentClientTypes.InferenceSchedulerSummary]?
}

extension ListInferenceSchedulersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerSummaries = "InferenceSchedulerSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let inferenceSchedulerSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.InferenceSchedulerSummary?].self, forKey: .inferenceSchedulerSummaries)
        var inferenceSchedulerSummariesDecoded0:[LookoutEquipmentClientTypes.InferenceSchedulerSummary]? = nil
        if let inferenceSchedulerSummariesContainer = inferenceSchedulerSummariesContainer {
            inferenceSchedulerSummariesDecoded0 = [LookoutEquipmentClientTypes.InferenceSchedulerSummary]()
            for structure0 in inferenceSchedulerSummariesContainer {
                if let structure0 = structure0 {
                    inferenceSchedulerSummariesDecoded0?.append(structure0)
                }
            }
        }
        inferenceSchedulerSummaries = inferenceSchedulerSummariesDecoded0
    }
}

public struct ListModelsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListModelsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListModelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListModelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListModelsOutputError>
}

extension ListModelsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListModelsInput(datasetNameBeginsWith: \(Swift.String(describing: datasetNameBeginsWith)), maxResults: \(Swift.String(describing: maxResults)), modelNameBeginsWith: \(Swift.String(describing: modelNameBeginsWith)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListModelsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case modelNameBeginsWith = "ModelNameBeginsWith"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let datasetNameBeginsWith = datasetNameBeginsWith {
            try encodeContainer.encode(datasetNameBeginsWith, forKey: .datasetNameBeginsWith)
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let modelNameBeginsWith = modelNameBeginsWith {
            try encodeContainer.encode(modelNameBeginsWith, forKey: .modelNameBeginsWith)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct ListModelsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListModelsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListModelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListModelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListModelsOutputError>
}

public struct ListModelsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListModelsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListModelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListModelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListModelsOutputError>
}

public struct ListModelsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListModelsInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListModelsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListModelsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListModelsOutputError>
}

public struct ListModelsInput: Swift.Equatable {
    /// The beginning of the name of the dataset of the ML models to be listed.
    public var datasetNameBeginsWith: Swift.String?
    ///  Specifies the maximum number of ML models to list.
    public var maxResults: Swift.Int?
    /// The beginning of the name of the ML models being listed.
    public var modelNameBeginsWith: Swift.String?
    ///  An opaque pagination token indicating where to continue the listing of ML models.
    ///
    public var nextToken: Swift.String?
    /// The status of the ML model.
    public var status: LookoutEquipmentClientTypes.ModelStatus?

    public init (
        datasetNameBeginsWith: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        modelNameBeginsWith: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.ModelStatus? = nil
    )
    {
        self.datasetNameBeginsWith = datasetNameBeginsWith
        self.maxResults = maxResults
        self.modelNameBeginsWith = modelNameBeginsWith
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListModelsInputBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let status: LookoutEquipmentClientTypes.ModelStatus?
    public let modelNameBeginsWith: Swift.String?
    public let datasetNameBeginsWith: Swift.String?
}

extension ListModelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasetNameBeginsWith = "DatasetNameBeginsWith"
        case maxResults = "MaxResults"
        case modelNameBeginsWith = "ModelNameBeginsWith"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let modelNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelNameBeginsWith)
        modelNameBeginsWith = modelNameBeginsWithDecoded
        let datasetNameBeginsWithDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetNameBeginsWith)
        datasetNameBeginsWith = datasetNameBeginsWithDecoded
    }
}

extension ListModelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListModelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListModelsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListModelsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListModelsOutputResponse(modelSummaries: \(Swift.String(describing: modelSummaries)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListModelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListModelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.modelSummaries = output.modelSummaries
            self.nextToken = output.nextToken
        } else {
            self.modelSummaries = nil
            self.nextToken = nil
        }
    }
}

public struct ListModelsOutputResponse: Swift.Equatable {
    /// Provides information on the specified model, including created time, model and dataset
    ///          ARNs, and status.
    public var modelSummaries: [LookoutEquipmentClientTypes.ModelSummary]?
    ///  An opaque pagination token indicating where to continue the listing of ML models.
    ///
    public var nextToken: Swift.String?

    public init (
        modelSummaries: [LookoutEquipmentClientTypes.ModelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelSummaries = modelSummaries
        self.nextToken = nextToken
    }
}

struct ListModelsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let modelSummaries: [LookoutEquipmentClientTypes.ModelSummary]?
}

extension ListModelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case modelSummaries = "ModelSummaries"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let modelSummariesContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.ModelSummary?].self, forKey: .modelSummaries)
        var modelSummariesDecoded0:[LookoutEquipmentClientTypes.ModelSummary]? = nil
        if let modelSummariesContainer = modelSummariesContainer {
            modelSummariesDecoded0 = [LookoutEquipmentClientTypes.ModelSummary]()
            for structure0 in modelSummariesContainer {
                if let structure0 = structure0 {
                    modelSummariesDecoded0?.append(structure0)
                }
            }
        }
        modelSummaries = modelSummariesDecoded0
    }
}

public struct ListTagsForResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ListTagsForResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTagsForResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource (such as the dataset or model) that is
    ///          the focus of the ListTagsForResource operation.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    ///  Any tags associated with the resource.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init (
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension LookoutEquipmentClientTypes {
    public enum ModelStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case inProgress
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelStatus] {
            return [
                .failed,
                .inProgress,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelStatus(rawValue: rawValue) ?? ModelStatus.sdkUnknown(rawValue)
        }
    }
}

extension LookoutEquipmentClientTypes.ModelSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case datasetArn = "DatasetArn"
        case datasetName = "DatasetName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt.timeIntervalSince1970, forKey: .createdAt)
        }
        if let datasetArn = datasetArn {
            try encodeContainer.encode(datasetArn, forKey: .datasetArn)
        }
        if let datasetName = datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let modelArn = modelArn {
            try encodeContainer.encode(modelArn, forKey: .modelArn)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let datasetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetArn)
        datasetArn = datasetArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.ModelStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createdAt)
        createdAt = createdAtDecoded
    }
}

extension LookoutEquipmentClientTypes.ModelSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ModelSummary(createdAt: \(Swift.String(describing: createdAt)), datasetArn: \(Swift.String(describing: datasetArn)), datasetName: \(Swift.String(describing: datasetName)), modelArn: \(Swift.String(describing: modelArn)), modelName: \(Swift.String(describing: modelName)), status: \(Swift.String(describing: status)))"}
}

extension LookoutEquipmentClientTypes {
    /// Provides information about the specified ML model, including dataset and model names and
    ///          ARNs, as well as status.
    public struct ModelSummary: Swift.Equatable {
        /// The time at which the specific model was created.
        public var createdAt: ClientRuntime.Date?
        ///  The Amazon Resource Name (ARN) of the dataset used to create the model.
        public var datasetArn: Swift.String?
        /// The name of the dataset being used for the ML model.
        public var datasetName: Swift.String?
        ///  The Amazon Resource Name (ARN) of the ML model.
        public var modelArn: Swift.String?
        /// The name of the ML model.
        public var modelName: Swift.String?
        /// Indicates the status of the ML model.
        public var status: LookoutEquipmentClientTypes.ModelStatus?

        public init (
            createdAt: ClientRuntime.Date? = nil,
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            status: LookoutEquipmentClientTypes.ModelStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.modelArn = modelArn
            self.modelName = modelName
            self.status = status
        }
    }

}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///  The resource requested could not be found. Verify the resource ID and retry your
///          request.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LookoutEquipmentClientTypes.S3Object: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case key = "Key"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
    }
}

extension LookoutEquipmentClientTypes.S3Object: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3Object(bucket: \(Swift.String(describing: bucket)), key: \(Swift.String(describing: key)))"}
}

extension LookoutEquipmentClientTypes {
    /// Contains information about an S3 bucket.
    public struct S3Object: Swift.Equatable {
        /// The name of the specific S3 bucket.
        /// This member is required.
        public var bucket: Swift.String?
        /// The AWS Key Management Service (AWS KMS) key being used to encrypt the S3 object.
        ///          Without this key, data in the bucket is not accessible.
        /// This member is required.
        public var key: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            key: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
        }
    }

}

extension ServiceQuotaExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceQuotaExceededException(message: \(Swift.String(describing: message)))"}
}

extension ServiceQuotaExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///  Resource limitations have been exceeded.
public struct ServiceQuotaExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct StartDataIngestionJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartDataIngestionJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartDataIngestionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartDataIngestionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartDataIngestionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartDataIngestionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartDataIngestionJobOutputError>
}

extension StartDataIngestionJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartDataIngestionJobInput(clientToken: \(Swift.String(describing: clientToken)), datasetName: \(Swift.String(describing: datasetName)), ingestionInputConfiguration: \(Swift.String(describing: ingestionInputConfiguration)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension StartDataIngestionJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let datasetName = datasetName {
            try encodeContainer.encode(datasetName, forKey: .datasetName)
        }
        if let ingestionInputConfiguration = ingestionInputConfiguration {
            try encodeContainer.encode(ingestionInputConfiguration, forKey: .ingestionInputConfiguration)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

public struct StartDataIngestionJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartDataIngestionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartDataIngestionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartDataIngestionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartDataIngestionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartDataIngestionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartDataIngestionJobOutputError>
}

public struct StartDataIngestionJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartDataIngestionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartDataIngestionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartDataIngestionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartDataIngestionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartDataIngestionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartDataIngestionJobOutputError>
}

public struct StartDataIngestionJobInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartDataIngestionJobInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StartDataIngestionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartDataIngestionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartDataIngestionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartDataIngestionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartDataIngestionJobOutputError>
}

public struct StartDataIngestionJobInput: Swift.Equatable {
    ///  A unique identifier for the request. If you do not set the client request token, Amazon
    ///          Lookout for Equipment generates one.
    /// This member is required.
    public var clientToken: Swift.String?
    /// The name of the dataset being used by the data ingestion job.
    /// This member is required.
    public var datasetName: Swift.String?
    ///  Specifies information for the input data for the data ingestion job, including dataset
    ///          S3 location.
    /// This member is required.
    public var ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    ///  The Amazon Resource Name (ARN) of a role with permission to access the data source for
    ///          the data ingestion job.
    /// This member is required.
    public var roleArn: Swift.String?

    public init (
        clientToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.datasetName = datasetName
        self.ingestionInputConfiguration = ingestionInputConfiguration
        self.roleArn = roleArn
    }
}

struct StartDataIngestionJobInputBody: Swift.Equatable {
    public let datasetName: Swift.String?
    public let ingestionInputConfiguration: LookoutEquipmentClientTypes.IngestionInputConfiguration?
    public let roleArn: Swift.String?
    public let clientToken: Swift.String?
}

extension StartDataIngestionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case datasetName = "DatasetName"
        case ingestionInputConfiguration = "IngestionInputConfiguration"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let datasetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasetName)
        datasetName = datasetNameDecoded
        let ingestionInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionInputConfiguration.self, forKey: .ingestionInputConfiguration)
        ingestionInputConfiguration = ingestionInputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension StartDataIngestionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartDataIngestionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartDataIngestionJobOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartDataIngestionJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartDataIngestionJobOutputResponse(jobId: \(Swift.String(describing: jobId)), status: \(Swift.String(describing: status)))"}
}

extension StartDataIngestionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartDataIngestionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.status = output.status
        } else {
            self.jobId = nil
            self.status = nil
        }
    }
}

public struct StartDataIngestionJobOutputResponse: Swift.Equatable {
    /// Indicates the job ID of the data ingestion job.
    public var jobId: Swift.String?
    /// Indicates the status of the StartDataIngestionJob operation.
    public var status: LookoutEquipmentClientTypes.IngestionJobStatus?

    public init (
        jobId: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.IngestionJobStatus? = nil
    )
    {
        self.jobId = jobId
        self.status = status
    }
}

struct StartDataIngestionJobOutputResponseBody: Swift.Equatable {
    public let jobId: Swift.String?
    public let status: LookoutEquipmentClientTypes.IngestionJobStatus?
}

extension StartDataIngestionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId = "JobId"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.IngestionJobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

public struct StartInferenceSchedulerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartInferenceSchedulerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartInferenceSchedulerOutputError>
}

extension StartInferenceSchedulerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartInferenceSchedulerInput(inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)))"}
}

extension StartInferenceSchedulerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

public struct StartInferenceSchedulerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartInferenceSchedulerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartInferenceSchedulerOutputError>
}

public struct StartInferenceSchedulerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartInferenceSchedulerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartInferenceSchedulerOutputError>
}

public struct StartInferenceSchedulerInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartInferenceSchedulerInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StartInferenceSchedulerInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartInferenceSchedulerInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartInferenceSchedulerOutputError>
}

public struct StartInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler to be started.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init (
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct StartInferenceSchedulerInputBody: Swift.Equatable {
    public let inferenceSchedulerName: Swift.String?
}

extension StartInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension StartInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartInferenceSchedulerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartInferenceSchedulerOutputResponse(inferenceSchedulerArn: \(Swift.String(describing: inferenceSchedulerArn)), inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)), modelArn: \(Swift.String(describing: modelArn)), modelName: \(Swift.String(describing: modelName)), status: \(Swift.String(describing: status)))"}
}

extension StartInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartInferenceSchedulerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.status = output.status
        } else {
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.modelArn = nil
            self.modelName = nil
            self.status = nil
        }
    }
}

public struct StartInferenceSchedulerOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the inference scheduler being started.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being started.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of the ML model being used by the inference scheduler.
    ///
    public var modelArn: Swift.String?
    /// The name of the ML model being used by the inference scheduler.
    public var modelName: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init (
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

struct StartInferenceSchedulerOutputResponseBody: Swift.Equatable {
    public let modelArn: Swift.String?
    public let modelName: Swift.String?
    public let inferenceSchedulerName: Swift.String?
    public let inferenceSchedulerArn: Swift.String?
    public let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
}

extension StartInferenceSchedulerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

public struct StopInferenceSchedulerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopInferenceSchedulerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopInferenceSchedulerOutputError>
}

extension StopInferenceSchedulerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopInferenceSchedulerInput(inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)))"}
}

extension StopInferenceSchedulerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
    }
}

public struct StopInferenceSchedulerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopInferenceSchedulerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopInferenceSchedulerOutputError>
}

public struct StopInferenceSchedulerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopInferenceSchedulerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StopInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StopInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StopInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopInferenceSchedulerOutputError>
}

public struct StopInferenceSchedulerInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StopInferenceSchedulerInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: StopInferenceSchedulerInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StopInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StopInferenceSchedulerInput
    public typealias MOutput = ClientRuntime.OperationOutput<StopInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StopInferenceSchedulerOutputError>
}

public struct StopInferenceSchedulerInput: Swift.Equatable {
    /// The name of the inference scheduler to be stopped.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?

    public init (
        inferenceSchedulerName: Swift.String? = nil
    )
    {
        self.inferenceSchedulerName = inferenceSchedulerName
    }
}

struct StopInferenceSchedulerInputBody: Swift.Equatable {
    public let inferenceSchedulerName: Swift.String?
}

extension StopInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerName = "InferenceSchedulerName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
    }
}

extension StopInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StopInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopInferenceSchedulerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StopInferenceSchedulerOutputResponse(inferenceSchedulerArn: \(Swift.String(describing: inferenceSchedulerArn)), inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)), modelArn: \(Swift.String(describing: modelArn)), modelName: \(Swift.String(describing: modelName)), status: \(Swift.String(describing: status)))"}
}

extension StopInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StopInferenceSchedulerOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.inferenceSchedulerArn = output.inferenceSchedulerArn
            self.inferenceSchedulerName = output.inferenceSchedulerName
            self.modelArn = output.modelArn
            self.modelName = output.modelName
            self.status = output.status
        } else {
            self.inferenceSchedulerArn = nil
            self.inferenceSchedulerName = nil
            self.modelArn = nil
            self.modelName = nil
            self.status = nil
        }
    }
}

public struct StopInferenceSchedulerOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the inference schedule being stopped.
    public var inferenceSchedulerArn: Swift.String?
    /// The name of the inference scheduler being stopped.
    public var inferenceSchedulerName: Swift.String?
    /// The Amazon Resource Name (ARN) of the ML model used by the inference scheduler being
    ///          stopped.
    public var modelArn: Swift.String?
    /// The name of the ML model used by the inference scheduler being stopped.
    public var modelName: Swift.String?
    /// Indicates the status of the inference scheduler.
    public var status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?

    public init (
        inferenceSchedulerArn: Swift.String? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        status: LookoutEquipmentClientTypes.InferenceSchedulerStatus? = nil
    )
    {
        self.inferenceSchedulerArn = inferenceSchedulerArn
        self.inferenceSchedulerName = inferenceSchedulerName
        self.modelArn = modelArn
        self.modelName = modelName
        self.status = status
    }
}

struct StopInferenceSchedulerOutputResponseBody: Swift.Equatable {
    public let modelArn: Swift.String?
    public let modelName: Swift.String?
    public let inferenceSchedulerName: Swift.String?
    public let inferenceSchedulerArn: Swift.String?
    public let status: LookoutEquipmentClientTypes.InferenceSchedulerStatus?
}

extension StopInferenceSchedulerOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inferenceSchedulerArn = "InferenceSchedulerArn"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case modelArn = "ModelArn"
        case modelName = "ModelName"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelArn)
        modelArn = modelArnDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let inferenceSchedulerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerArn)
        inferenceSchedulerArn = inferenceSchedulerArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceSchedulerStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension LookoutEquipmentClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension LookoutEquipmentClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension LookoutEquipmentClientTypes {
    /// A tag is a key-value pair that can be added to a resource as metadata.
    public struct Tag: Swift.Equatable {
        /// The key for the specified tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value for the specified tag.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: TagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = TagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the specific resource to which the tag should be
    ///          associated.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tag or tags to be associated with a specific resource. Both the tag key and value
    ///          are specified.
    /// This member is required.
    public var tags: [LookoutEquipmentClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [LookoutEquipmentClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let tags: [LookoutEquipmentClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([LookoutEquipmentClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[LookoutEquipmentClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [LookoutEquipmentClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceQuotaExceededException" : self = .serviceQuotaExceededException(try ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceQuotaExceededException(ServiceQuotaExceededException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension LookoutEquipmentClientTypes {
    public enum TargetSamplingRate: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pt10m
        case pt10s
        case pt15m
        case pt15s
        case pt1h
        case pt1m
        case pt1s
        case pt30m
        case pt30s
        case pt5m
        case pt5s
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetSamplingRate] {
            return [
                .pt10m,
                .pt10s,
                .pt15m,
                .pt15s,
                .pt1h,
                .pt1m,
                .pt1s,
                .pt30m,
                .pt30s,
                .pt5m,
                .pt5s,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pt10m: return "PT10M"
            case .pt10s: return "PT10S"
            case .pt15m: return "PT15M"
            case .pt15s: return "PT15S"
            case .pt1h: return "PT1H"
            case .pt1m: return "PT1M"
            case .pt1s: return "PT1S"
            case .pt30m: return "PT30M"
            case .pt30s: return "PT30S"
            case .pt5m: return "PT5M"
            case .pt5s: return "PT5S"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TargetSamplingRate(rawValue: rawValue) ?? TargetSamplingRate.sdkUnknown(rawValue)
        }
    }
}

extension ThrottlingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThrottlingException(message: \(Swift.String(describing: message)))"}
}

extension ThrottlingException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UntagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UntagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UntagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource to which the tag is currently associated.
    ///
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Specifies the key of the tag to be removed from a specified resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateInferenceSchedulerInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInferenceSchedulerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInferenceSchedulerOutputError>
}

extension UpdateInferenceSchedulerInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateInferenceSchedulerInput(dataDelayOffsetInMinutes: \(Swift.String(describing: dataDelayOffsetInMinutes)), dataInputConfiguration: \(Swift.String(describing: dataInputConfiguration)), dataOutputConfiguration: \(Swift.String(describing: dataOutputConfiguration)), dataUploadFrequency: \(Swift.String(describing: dataUploadFrequency)), inferenceSchedulerName: \(Swift.String(describing: inferenceSchedulerName)), roleArn: \(Swift.String(describing: roleArn)))"}
}

extension UpdateInferenceSchedulerInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataDelayOffsetInMinutes = dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataInputConfiguration = dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataUploadFrequency = dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

public struct UpdateInferenceSchedulerInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInferenceSchedulerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInferenceSchedulerOutputError>
}

public struct UpdateInferenceSchedulerInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInferenceSchedulerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInferenceSchedulerInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInferenceSchedulerInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInferenceSchedulerOutputError>
}

public struct UpdateInferenceSchedulerInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInferenceSchedulerInputURLPathMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: UpdateInferenceSchedulerInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let host = context.getHost(), let hostCustomPath = URL(string: "http://\(host)")?.path, !hostCustomPath.isEmpty {
            urlPath = "\(hostCustomPath)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateInferenceSchedulerInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInferenceSchedulerOutputError>
}

public struct UpdateInferenceSchedulerInput: Swift.Equatable {
    ///  A period of time (in minutes) by which inference on the data is delayed after the data
    ///          starts. For instance, if you select an offset delay time of five minutes, inference will
    ///          not begin on the data until the first data measurement after the five minute mark. For example, if
    ///          five minutes is selected, the inference scheduler will wake up at the configured frequency with the
    ///          additional five minute delay time to check the customer S3 bucket. The customer can upload data at
    ///          the same frequency and they don't need to stop and restart the scheduler when uploading new data.
    public var dataDelayOffsetInMinutes: Swift.Int?
    ///  Specifies information for the input data for the inference scheduler, including
    ///          delimiter, format, and dataset location.
    public var dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    ///  Specifies information for the output results from the inference scheduler, including the output S3 location.
    public var dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    /// How often data is uploaded to the source S3 bucket for the input data. The value chosen
    ///          is the length of time between data uploads. For instance, if you select 5 minutes, Amazon
    ///          Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency
    ///          also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this
    ///          example, it starts once every 5 minutes.
    public var dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    /// The name of the inference scheduler to be updated.
    /// This member is required.
    public var inferenceSchedulerName: Swift.String?
    ///  The Amazon Resource Name (ARN) of a role with permission to access the data source for
    ///          the inference scheduler.
    public var roleArn: Swift.String?

    public init (
        dataDelayOffsetInMinutes: Swift.Int? = nil,
        dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration? = nil,
        dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration? = nil,
        dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency? = nil,
        inferenceSchedulerName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.dataDelayOffsetInMinutes = dataDelayOffsetInMinutes
        self.dataInputConfiguration = dataInputConfiguration
        self.dataOutputConfiguration = dataOutputConfiguration
        self.dataUploadFrequency = dataUploadFrequency
        self.inferenceSchedulerName = inferenceSchedulerName
        self.roleArn = roleArn
    }
}

struct UpdateInferenceSchedulerInputBody: Swift.Equatable {
    public let inferenceSchedulerName: Swift.String?
    public let dataDelayOffsetInMinutes: Swift.Int?
    public let dataUploadFrequency: LookoutEquipmentClientTypes.DataUploadFrequency?
    public let dataInputConfiguration: LookoutEquipmentClientTypes.InferenceInputConfiguration?
    public let dataOutputConfiguration: LookoutEquipmentClientTypes.InferenceOutputConfiguration?
    public let roleArn: Swift.String?
}

extension UpdateInferenceSchedulerInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case roleArn = "RoleArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inferenceSchedulerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inferenceSchedulerName)
        inferenceSchedulerName = inferenceSchedulerNameDecoded
        let dataDelayOffsetInMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataDelayOffsetInMinutes)
        dataDelayOffsetInMinutes = dataDelayOffsetInMinutesDecoded
        let dataUploadFrequencyDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.DataUploadFrequency.self, forKey: .dataUploadFrequency)
        dataUploadFrequency = dataUploadFrequencyDecoded
        let dataInputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceInputConfiguration.self, forKey: .dataInputConfiguration)
        dataInputConfiguration = dataInputConfigurationDecoded
        let dataOutputConfigurationDecoded = try containerValues.decodeIfPresent(LookoutEquipmentClientTypes.InferenceOutputConfiguration.self, forKey: .dataOutputConfiguration)
        dataOutputConfiguration = dataOutputConfigurationDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
    }
}

extension UpdateInferenceSchedulerOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInferenceSchedulerOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ValidationException" : self = .validationException(try ValidationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateInferenceSchedulerOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case conflictException(ConflictException)
    case internalServerException(InternalServerException)
    case resourceNotFoundException(ResourceNotFoundException)
    case throttlingException(ThrottlingException)
    case validationException(ValidationException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInferenceSchedulerOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateInferenceSchedulerOutputResponse()"}
}

extension UpdateInferenceSchedulerOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateInferenceSchedulerOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateInferenceSchedulerOutputResponseBody: Swift.Equatable {
}

extension UpdateInferenceSchedulerOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ValidationException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ValidationException(message: \(Swift.String(describing: message)))"}
}

extension ValidationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

///  The input fails to satisfy constraints specified by Amazon Lookout for Equipment or a related AWS
///          service that's being utilized.
public struct ValidationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    /// This member is required.
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
