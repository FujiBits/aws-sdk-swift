// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ModifyHsmInputHeadersMiddleware: Middleware {
    public let id: String = "ModifyHsmInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyHsmInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyHsmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyHsmInput>
    public typealias MOutput = OperationOutput<ModifyHsmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyHsmOutputError>
}

public struct ModifyHsmInputQueryItemMiddleware: Middleware {
    public let id: String = "ModifyHsmInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyHsmInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyHsmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyHsmInput>
    public typealias MOutput = OperationOutput<ModifyHsmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyHsmOutputError>
}

public struct ModifyHsmInputBodyMiddleware: Middleware {
    public let id: String = "ModifyHsmInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ModifyHsmInput>,
                  next: H) -> Swift.Result<OperationOutput<ModifyHsmOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ModifyHsmInput>
    public typealias MOutput = OperationOutput<ModifyHsmOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ModifyHsmOutputError>
}

extension ModifyHsmInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case eniIp = "EniIp"
        case externalId = "ExternalId"
        case hsmArn = "HsmArn"
        case iamRoleArn = "IamRoleArn"
        case subnetId = "SubnetId"
        case syslogIp = "SyslogIp"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eniIp = eniIp {
            try encodeContainer.encode(eniIp, forKey: .eniIp)
        }
        if let externalId = externalId {
            try encodeContainer.encode(externalId, forKey: .externalId)
        }
        if let hsmArn = hsmArn {
            try encodeContainer.encode(hsmArn, forKey: .hsmArn)
        }
        if let iamRoleArn = iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let syslogIp = syslogIp {
            try encodeContainer.encode(syslogIp, forKey: .syslogIp)
        }
    }
}
