// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PutClusterCapacityProvidersInputHeadersMiddleware: Middleware {
    public let id: String = "PutClusterCapacityProvidersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutClusterCapacityProvidersInput>,
                  next: H) -> Swift.Result<OperationOutput<PutClusterCapacityProvidersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutClusterCapacityProvidersInput>
    public typealias MOutput = OperationOutput<PutClusterCapacityProvidersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutClusterCapacityProvidersOutputError>
}

public struct PutClusterCapacityProvidersInputQueryItemMiddleware: Middleware {
    public let id: String = "PutClusterCapacityProvidersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutClusterCapacityProvidersInput>,
                  next: H) -> Swift.Result<OperationOutput<PutClusterCapacityProvidersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutClusterCapacityProvidersInput>
    public typealias MOutput = OperationOutput<PutClusterCapacityProvidersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutClusterCapacityProvidersOutputError>
}

public struct PutClusterCapacityProvidersInputBodyMiddleware: Middleware {
    public let id: String = "PutClusterCapacityProvidersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PutClusterCapacityProvidersInput>,
                  next: H) -> Swift.Result<OperationOutput<PutClusterCapacityProvidersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PutClusterCapacityProvidersInput>
    public typealias MOutput = OperationOutput<PutClusterCapacityProvidersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PutClusterCapacityProvidersOutputError>
}

extension PutClusterCapacityProvidersInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case capacityProviders
        case cluster
        case defaultCapacityProviderStrategy
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityProviders = capacityProviders {
            var capacityProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .capacityProviders)
            for stringlist0 in capacityProviders {
                try capacityProvidersContainer.encode(stringlist0)
            }
        }
        if let cluster = cluster {
            try encodeContainer.encode(cluster, forKey: .cluster)
        }
        if let defaultCapacityProviderStrategy = defaultCapacityProviderStrategy {
            var defaultCapacityProviderStrategyContainer = encodeContainer.nestedUnkeyedContainer(forKey: .defaultCapacityProviderStrategy)
            for capacityproviderstrategy0 in defaultCapacityProviderStrategy {
                try defaultCapacityProviderStrategyContainer.encode(capacityproviderstrategy0)
            }
        }
    }
}
