// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SubmitContainerStateChangeInputHeadersMiddleware: Middleware {
    public let id: String = "SubmitContainerStateChangeInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SubmitContainerStateChangeInput>,
                  next: H) -> Swift.Result<OperationOutput<SubmitContainerStateChangeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SubmitContainerStateChangeInput>
    public typealias MOutput = OperationOutput<SubmitContainerStateChangeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SubmitContainerStateChangeOutputError>
}

public struct SubmitContainerStateChangeInputQueryItemMiddleware: Middleware {
    public let id: String = "SubmitContainerStateChangeInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SubmitContainerStateChangeInput>,
                  next: H) -> Swift.Result<OperationOutput<SubmitContainerStateChangeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SubmitContainerStateChangeInput>
    public typealias MOutput = OperationOutput<SubmitContainerStateChangeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SubmitContainerStateChangeOutputError>
}

public struct SubmitContainerStateChangeInputBodyMiddleware: Middleware {
    public let id: String = "SubmitContainerStateChangeInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SubmitContainerStateChangeInput>,
                  next: H) -> Swift.Result<OperationOutput<SubmitContainerStateChangeOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SubmitContainerStateChangeInput>
    public typealias MOutput = OperationOutput<SubmitContainerStateChangeOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SubmitContainerStateChangeOutputError>
}

extension SubmitContainerStateChangeInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case cluster
        case containerName
        case exitCode
        case networkBindings
        case reason
        case runtimeId
        case status
        case task
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cluster = cluster {
            try encodeContainer.encode(cluster, forKey: .cluster)
        }
        if let containerName = containerName {
            try encodeContainer.encode(containerName, forKey: .containerName)
        }
        if let exitCode = exitCode {
            try encodeContainer.encode(exitCode, forKey: .exitCode)
        }
        if let networkBindings = networkBindings {
            var networkBindingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkBindings)
            for networkbindings0 in networkBindings {
                try networkBindingsContainer.encode(networkbindings0)
            }
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
        if let runtimeId = runtimeId {
            try encodeContainer.encode(runtimeId, forKey: .runtimeId)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let task = task {
            try encodeContainer.encode(task, forKey: .task)
        }
    }
}
