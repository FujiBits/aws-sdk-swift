// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct RegisterContainerInstanceInputHeadersMiddleware: Middleware {
    public let id: String = "RegisterContainerInstanceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterContainerInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterContainerInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterContainerInstanceInput>
    public typealias MOutput = OperationOutput<RegisterContainerInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterContainerInstanceOutputError>
}

public struct RegisterContainerInstanceInputQueryItemMiddleware: Middleware {
    public let id: String = "RegisterContainerInstanceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterContainerInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterContainerInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterContainerInstanceInput>
    public typealias MOutput = OperationOutput<RegisterContainerInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterContainerInstanceOutputError>
}

public struct RegisterContainerInstanceInputBodyMiddleware: Middleware {
    public let id: String = "RegisterContainerInstanceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<RegisterContainerInstanceInput>,
                  next: H) -> Swift.Result<OperationOutput<RegisterContainerInstanceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<RegisterContainerInstanceInput>
    public typealias MOutput = OperationOutput<RegisterContainerInstanceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<RegisterContainerInstanceOutputError>
}

extension RegisterContainerInstanceInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case attributes
        case cluster
        case containerInstanceArn
        case instanceIdentityDocument
        case instanceIdentityDocumentSignature
        case platformDevices
        case tags
        case totalResources
        case versionInfo
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            var attributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributes)
            for attributes0 in attributes {
                try attributesContainer.encode(attributes0)
            }
        }
        if let cluster = cluster {
            try encodeContainer.encode(cluster, forKey: .cluster)
        }
        if let containerInstanceArn = containerInstanceArn {
            try encodeContainer.encode(containerInstanceArn, forKey: .containerInstanceArn)
        }
        if let instanceIdentityDocument = instanceIdentityDocument {
            try encodeContainer.encode(instanceIdentityDocument, forKey: .instanceIdentityDocument)
        }
        if let instanceIdentityDocumentSignature = instanceIdentityDocumentSignature {
            try encodeContainer.encode(instanceIdentityDocumentSignature, forKey: .instanceIdentityDocumentSignature)
        }
        if let platformDevices = platformDevices {
            var platformDevicesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformDevices)
            for platformdevices0 in platformDevices {
                try platformDevicesContainer.encode(platformdevices0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tags0 in tags {
                try tagsContainer.encode(tags0)
            }
        }
        if let totalResources = totalResources {
            var totalResourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .totalResources)
            for resources0 in totalResources {
                try totalResourcesContainer.encode(resources0)
            }
        }
        if let versionInfo = versionInfo {
            try encodeContainer.encode(versionInfo, forKey: .versionInfo)
        }
    }
}
