// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension FisClient {
    /// Creates an experiment template.
    ///          To create a template, specify the following information:
    ///
    ///
    ///
    ///                   Targets: A target can be a specific resource
    ///                in your AWS environment, or one or more resources that match criteria that you
    ///                specify, for example, resources that have specific tags.
    ///
    ///
    ///
    ///                   Actions: The actions to carry out on the
    ///                target. You can specify multiple actions, the duration of each action, and when to start each action during an experiment.
    ///
    ///
    ///
    ///                   Stop conditions: If a stop condition is
    ///                triggered while an experiment is running, the experiment is automatically
    ///                stopped. You can define a stop condition as a CloudWatch alarm.
    ///
    ///
    ///          For more information, see the <a href="https://docs.aws.amazon.com/fis/latest/userguide/">AWS Fault Injection Simulator User Guide.
    func createExperimentTemplate(input: CreateExperimentTemplateInput) async throws -> CreateExperimentTemplateOutputResponse
    {
        typealias createExperimentTemplateContinuation = CheckedContinuation<CreateExperimentTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createExperimentTemplateContinuation) in
            createExperimentTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified experiment template.
    func deleteExperimentTemplate(input: DeleteExperimentTemplateInput) async throws -> DeleteExperimentTemplateOutputResponse
    {
        typealias deleteExperimentTemplateContinuation = CheckedContinuation<DeleteExperimentTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteExperimentTemplateContinuation) in
            deleteExperimentTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified AWS FIS action.
    func getAction(input: GetActionInput) async throws -> GetActionOutputResponse
    {
        typealias getActionContinuation = CheckedContinuation<GetActionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getActionContinuation) in
            getAction(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified experiment.
    func getExperiment(input: GetExperimentInput) async throws -> GetExperimentOutputResponse
    {
        typealias getExperimentContinuation = CheckedContinuation<GetExperimentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getExperimentContinuation) in
            getExperiment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets information about the specified experiment template.
    func getExperimentTemplate(input: GetExperimentTemplateInput) async throws -> GetExperimentTemplateOutputResponse
    {
        typealias getExperimentTemplateContinuation = CheckedContinuation<GetExperimentTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getExperimentTemplateContinuation) in
            getExperimentTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the available AWS FIS actions.
    func listActions(input: ListActionsInput) async throws -> ListActionsOutputResponse
    {
        typealias listActionsContinuation = CheckedContinuation<ListActionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listActionsContinuation) in
            listActions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists your experiment templates.
    func listExperimentTemplates(input: ListExperimentTemplatesInput) async throws -> ListExperimentTemplatesOutputResponse
    {
        typealias listExperimentTemplatesContinuation = CheckedContinuation<ListExperimentTemplatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listExperimentTemplatesContinuation) in
            listExperimentTemplates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists your experiments.
    func listExperiments(input: ListExperimentsInput) async throws -> ListExperimentsOutputResponse
    {
        typealias listExperimentsContinuation = CheckedContinuation<ListExperimentsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listExperimentsContinuation) in
            listExperiments(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the tags for the specified resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts running an experiment from the specified experiment template.
    func startExperiment(input: StartExperimentInput) async throws -> StartExperimentOutputResponse
    {
        typealias startExperimentContinuation = CheckedContinuation<StartExperimentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startExperimentContinuation) in
            startExperiment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops the specified experiment.
    func stopExperiment(input: StopExperimentInput) async throws -> StopExperimentOutputResponse
    {
        typealias stopExperimentContinuation = CheckedContinuation<StopExperimentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopExperimentContinuation) in
            stopExperiment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Applies the specified tags to the specified resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified tags from the specified resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the specified experiment template.
    func updateExperimentTemplate(input: UpdateExperimentTemplateInput) async throws -> UpdateExperimentTemplateOutputResponse
    {
        typealias updateExperimentTemplateContinuation = CheckedContinuation<UpdateExperimentTemplateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateExperimentTemplateContinuation) in
            updateExperimentTemplate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
