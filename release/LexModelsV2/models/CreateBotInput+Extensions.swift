// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateBotInputHeadersMiddleware: Middleware {
    public let id: String = "CreateBotInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBotInput>
    public typealias MOutput = OperationOutput<CreateBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBotOutputError>
}

public struct CreateBotInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateBotInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBotInput>
    public typealias MOutput = OperationOutput<CreateBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBotOutputError>
}

public struct CreateBotInputBodyMiddleware: Middleware {
    public let id: String = "CreateBotInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBotInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBotOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBotInput>
    public typealias MOutput = OperationOutput<CreateBotOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBotOutputError>
}

extension CreateBotInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case botName
        case botTags
        case dataPrivacy
        case description
        case idleSessionTTLInSeconds
        case roleArn
        case testBotAliasTags
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let botName = botName {
            try encodeContainer.encode(botName, forKey: .botName)
        }
        if let botTags = botTags {
            var botTagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .botTags)
            for (dictKey0, tagmap0) in botTags {
                try botTagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let dataPrivacy = dataPrivacy {
            try encodeContainer.encode(dataPrivacy, forKey: .dataPrivacy)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let idleSessionTTLInSeconds = idleSessionTTLInSeconds {
            try encodeContainer.encode(idleSessionTTLInSeconds, forKey: .idleSessionTTLInSeconds)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let testBotAliasTags = testBotAliasTags {
            var testBotAliasTagsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .testBotAliasTags)
            for (dictKey0, tagmap0) in testBotAliasTags {
                try testBotAliasTagsContainer.encode(tagmap0, forKey: Key(stringValue: dictKey0))
            }
        }
    }
}
