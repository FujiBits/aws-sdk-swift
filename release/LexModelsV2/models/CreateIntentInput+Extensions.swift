// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateIntentInputHeadersMiddleware: Middleware {
    public let id: String = "CreateIntentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateIntentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateIntentInput>
    public typealias MOutput = OperationOutput<CreateIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateIntentOutputError>
}

public struct CreateIntentInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateIntentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateIntentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateIntentInput>
    public typealias MOutput = OperationOutput<CreateIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateIntentOutputError>
}

public struct CreateIntentInputBodyMiddleware: Middleware {
    public let id: String = "CreateIntentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateIntentInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateIntentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateIntentInput>
    public typealias MOutput = OperationOutput<CreateIntentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateIntentOutputError>
}

extension CreateIntentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case description
        case dialogCodeHook
        case fulfillmentCodeHook
        case inputContexts
        case intentClosingSetting
        case intentConfirmationSetting
        case intentName
        case kendraConfiguration
        case outputContexts
        case parentIntentSignature
        case sampleUtterances
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let dialogCodeHook = dialogCodeHook {
            try encodeContainer.encode(dialogCodeHook, forKey: .dialogCodeHook)
        }
        if let fulfillmentCodeHook = fulfillmentCodeHook {
            try encodeContainer.encode(fulfillmentCodeHook, forKey: .fulfillmentCodeHook)
        }
        if let inputContexts = inputContexts {
            var inputContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inputContexts)
            for inputcontextslist0 in inputContexts {
                try inputContextsContainer.encode(inputcontextslist0)
            }
        }
        if let intentClosingSetting = intentClosingSetting {
            try encodeContainer.encode(intentClosingSetting, forKey: .intentClosingSetting)
        }
        if let intentConfirmationSetting = intentConfirmationSetting {
            try encodeContainer.encode(intentConfirmationSetting, forKey: .intentConfirmationSetting)
        }
        if let intentName = intentName {
            try encodeContainer.encode(intentName, forKey: .intentName)
        }
        if let kendraConfiguration = kendraConfiguration {
            try encodeContainer.encode(kendraConfiguration, forKey: .kendraConfiguration)
        }
        if let outputContexts = outputContexts {
            var outputContextsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .outputContexts)
            for outputcontextslist0 in outputContexts {
                try outputContextsContainer.encode(outputcontextslist0)
            }
        }
        if let parentIntentSignature = parentIntentSignature {
            try encodeContainer.encode(parentIntentSignature, forKey: .parentIntentSignature)
        }
        if let sampleUtterances = sampleUtterances {
            var sampleUtterancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sampleUtterances)
            for sampleutteranceslist0 in sampleUtterances {
                try sampleUtterancesContainer.encode(sampleutteranceslist0)
            }
        }
    }
}
