// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateResourcePolicyStatementInputHeadersMiddleware: Middleware {
    public let id: String = "CreateResourcePolicyStatementInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateResourcePolicyStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateResourcePolicyStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateResourcePolicyStatementInput>
    public typealias MOutput = OperationOutput<CreateResourcePolicyStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateResourcePolicyStatementOutputError>
}

public struct CreateResourcePolicyStatementInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateResourcePolicyStatementInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateResourcePolicyStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateResourcePolicyStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedRevisionId = input.operationInput.expectedRevisionId {
            let expectedRevisionIdQueryItem = URLQueryItem(name: "expectedRevisionId".urlPercentEncoding(), value: String(expectedRevisionId).urlPercentEncoding())
            input.builder.withQueryItem(expectedRevisionIdQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateResourcePolicyStatementInput>
    public typealias MOutput = OperationOutput<CreateResourcePolicyStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateResourcePolicyStatementOutputError>
}

public struct CreateResourcePolicyStatementInputBodyMiddleware: Middleware {
    public let id: String = "CreateResourcePolicyStatementInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateResourcePolicyStatementInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateResourcePolicyStatementOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateResourcePolicyStatementInput>
    public typealias MOutput = OperationOutput<CreateResourcePolicyStatementOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateResourcePolicyStatementOutputError>
}

extension CreateResourcePolicyStatementInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case action
        case condition
        case effect
        case principal
        case statementId
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            var actionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .action)
            for operationlist0 in action {
                try actionContainer.encode(operationlist0)
            }
        }
        if let condition = condition {
            var conditionContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .condition)
            for (dictKey0, conditionmap0) in condition {
                try conditionContainer.encode(conditionmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let effect = effect {
            try encodeContainer.encode(effect.rawValue, forKey: .effect)
        }
        if let principal = principal {
            var principalContainer = encodeContainer.nestedUnkeyedContainer(forKey: .principal)
            for principallist0 in principal {
                try principalContainer.encode(principallist0)
            }
        }
        if let statementId = statementId {
            try encodeContainer.encode(statementId, forKey: .statementId)
        }
    }
}
