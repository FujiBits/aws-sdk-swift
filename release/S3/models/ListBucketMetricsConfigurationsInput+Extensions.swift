// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListBucketMetricsConfigurationsInputHeadersMiddleware: Middleware {
    public let id: String = "ListBucketMetricsConfigurationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBucketMetricsConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBucketMetricsConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: String(expectedBucketOwner))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBucketMetricsConfigurationsInput>
    public typealias MOutput = OperationOutput<ListBucketMetricsConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBucketMetricsConfigurationsOutputError>
}

public struct ListBucketMetricsConfigurationsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListBucketMetricsConfigurationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListBucketMetricsConfigurationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ListBucketMetricsConfigurationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(URLQueryItem(name: "metrics", value: nil))
        input.builder.withQueryItem(URLQueryItem(name: "x-id", value: "ListBucketMetricsConfigurations"))
        if let continuationToken = input.operationInput.continuationToken {
            let continuationTokenQueryItem = URLQueryItem(name: "continuation-token".urlPercentEncoding(), value: String(continuationToken).urlPercentEncoding())
            input.builder.withQueryItem(continuationTokenQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListBucketMetricsConfigurationsInput>
    public typealias MOutput = OperationOutput<ListBucketMetricsConfigurationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListBucketMetricsConfigurationsOutputError>
}

extension ListBucketMetricsConfigurationsInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
