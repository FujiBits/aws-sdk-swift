// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetObjectInputHeadersMiddleware: Middleware {
    public let id: String = "GetObjectInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetObjectInput>,
                  next: H) -> Swift.Result<OperationOutput<GetObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: String(expectedBucketOwner))
        }
        if let ifMatch = input.operationInput.ifMatch {
            input.builder.withHeader(name: "If-Match", value: String(ifMatch))
        }
        if let ifModifiedSince = input.operationInput.ifModifiedSince {
            input.builder.withHeader(name: "If-Modified-Since", value: String(ifModifiedSince.rfc5322()))
        }
        if let ifNoneMatch = input.operationInput.ifNoneMatch {
            input.builder.withHeader(name: "If-None-Match", value: String(ifNoneMatch))
        }
        if let ifUnmodifiedSince = input.operationInput.ifUnmodifiedSince {
            input.builder.withHeader(name: "If-Unmodified-Since", value: String(ifUnmodifiedSince.rfc5322()))
        }
        if let range = input.operationInput.range {
            input.builder.withHeader(name: "Range", value: String(range))
        }
        if let requestPayer = input.operationInput.requestPayer {
            input.builder.withHeader(name: "x-amz-request-payer", value: String(requestPayer.rawValue))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: String(sSECustomerKeyMD5))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetObjectInput>
    public typealias MOutput = OperationOutput<GetObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetObjectOutputError>
}

public struct GetObjectInputQueryItemMiddleware: Middleware {
    public let id: String = "GetObjectInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetObjectInput>,
                  next: H) -> Swift.Result<OperationOutput<GetObjectOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(URLQueryItem(name: "x-id", value: "GetObject"))
        if let versionId = input.operationInput.versionId {
            let versionIdQueryItem = URLQueryItem(name: "versionId".urlPercentEncoding(), value: String(versionId).urlPercentEncoding())
            input.builder.withQueryItem(versionIdQueryItem)
        }
        if let responseContentDisposition = input.operationInput.responseContentDisposition {
            let responseContentDispositionQueryItem = URLQueryItem(name: "response-content-disposition".urlPercentEncoding(), value: String(responseContentDisposition).urlPercentEncoding())
            input.builder.withQueryItem(responseContentDispositionQueryItem)
        }
        let partNumberQueryItem = URLQueryItem(name: "partNumber".urlPercentEncoding(), value: String(input.operationInput.partNumber).urlPercentEncoding())
        input.builder.withQueryItem(partNumberQueryItem)
        if let responseContentType = input.operationInput.responseContentType {
            let responseContentTypeQueryItem = URLQueryItem(name: "response-content-type".urlPercentEncoding(), value: String(responseContentType).urlPercentEncoding())
            input.builder.withQueryItem(responseContentTypeQueryItem)
        }
        if let responseExpires = input.operationInput.responseExpires {
            let responseExpiresQueryItem = URLQueryItem(name: "response-expires".urlPercentEncoding(), value: String(responseExpires.rfc5322()).urlPercentEncoding())
            input.builder.withQueryItem(responseExpiresQueryItem)
        }
        if let responseContentEncoding = input.operationInput.responseContentEncoding {
            let responseContentEncodingQueryItem = URLQueryItem(name: "response-content-encoding".urlPercentEncoding(), value: String(responseContentEncoding).urlPercentEncoding())
            input.builder.withQueryItem(responseContentEncodingQueryItem)
        }
        if let responseCacheControl = input.operationInput.responseCacheControl {
            let responseCacheControlQueryItem = URLQueryItem(name: "response-cache-control".urlPercentEncoding(), value: String(responseCacheControl).urlPercentEncoding())
            input.builder.withQueryItem(responseCacheControlQueryItem)
        }
        if let responseContentLanguage = input.operationInput.responseContentLanguage {
            let responseContentLanguageQueryItem = URLQueryItem(name: "response-content-language".urlPercentEncoding(), value: String(responseContentLanguage).urlPercentEncoding())
            input.builder.withQueryItem(responseContentLanguageQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetObjectInput>
    public typealias MOutput = OperationOutput<GetObjectOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetObjectOutputError>
}

extension GetObjectInput: Encodable, Reflection {

    public func encode(to encoder: Encoder) throws {
    }
}
