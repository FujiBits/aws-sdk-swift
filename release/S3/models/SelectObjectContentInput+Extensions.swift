// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SelectObjectContentInputHeadersMiddleware: Middleware {
    public let id: String = "SelectObjectContentInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SelectObjectContentInput>,
                  next: H) -> Swift.Result<OperationOutput<SelectObjectContentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let expectedBucketOwner = input.operationInput.expectedBucketOwner {
            input.builder.withHeader(name: "x-amz-expected-bucket-owner", value: String(expectedBucketOwner))
        }
        if let sSECustomerAlgorithm = input.operationInput.sSECustomerAlgorithm {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-algorithm", value: String(sSECustomerAlgorithm))
        }
        if let sSECustomerKey = input.operationInput.sSECustomerKey {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key", value: String(sSECustomerKey))
        }
        if let sSECustomerKeyMD5 = input.operationInput.sSECustomerKeyMD5 {
            input.builder.withHeader(name: "x-amz-server-side-encryption-customer-key-MD5", value: String(sSECustomerKeyMD5))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SelectObjectContentInput>
    public typealias MOutput = OperationOutput<SelectObjectContentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SelectObjectContentOutputError>
}

public struct SelectObjectContentInputQueryItemMiddleware: Middleware {
    public let id: String = "SelectObjectContentInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SelectObjectContentInput>,
                  next: H) -> Swift.Result<OperationOutput<SelectObjectContentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        input.builder.withQueryItem(URLQueryItem(name: "select", value: nil))
        input.builder.withQueryItem(URLQueryItem(name: "select-type", value: "2"))
        input.builder.withQueryItem(URLQueryItem(name: "x-id", value: "SelectObjectContent"))
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SelectObjectContentInput>
    public typealias MOutput = OperationOutput<SelectObjectContentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SelectObjectContentOutputError>
}

public struct SelectObjectContentInputBodyMiddleware: Middleware {
    public let id: String = "SelectObjectContentInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SelectObjectContentInput>,
                  next: H) -> Swift.Result<OperationOutput<SelectObjectContentOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SelectObjectContentInput>
    public typealias MOutput = OperationOutput<SelectObjectContentOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SelectObjectContentOutputError>
}

extension SelectObjectContentInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case expression = "Expression"
        case expressionType = "ExpressionType"
        case inputSerialization = "InputSerialization"
        case outputSerialization = "OutputSerialization"
        case requestProgress = "RequestProgress"
        case scanRange = "ScanRange"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if encoder.codingPath.isEmpty {
            try container.encode("http://s3.amazonaws.com/doc/2006-03-01/", forKey: Key("xmlns"))
        }
        if let expression = expression {
            try container.encode(expression, forKey: Key("expression"))
        }
        if let expressionType = expressionType {
            try container.encode(expressionType, forKey: Key("expressionType"))
        }
        if let inputSerialization = inputSerialization {
            try container.encode(inputSerialization, forKey: Key("inputSerialization"))
        }
        if let outputSerialization = outputSerialization {
            try container.encode(outputSerialization, forKey: Key("outputSerialization"))
        }
        if let requestProgress = requestProgress {
            try container.encode(requestProgress, forKey: Key("requestProgress"))
        }
        if let scanRange = scanRange {
            try container.encode(scanRange, forKey: Key("scanRange"))
        }
    }
}
